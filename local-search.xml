<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>雅虎究竟怎么了</title>
    <link href="/2025/10/13/what-happened-to-yahoo/"/>
    <url>/2025/10/13/what-happened-to-yahoo/</url>
    
    <content type="html"><![CDATA[<h1 id="What-Happened-to-Yahoo"><a href="#What-Happened-to-Yahoo" class="headerlink" title="What Happened to Yahoo"></a>What Happened to Yahoo</h1><h1 id="雅虎究竟怎么了"><a href="#雅虎究竟怎么了" class="headerlink" title="雅虎究竟怎么了"></a>雅虎究竟怎么了</h1><p>原文链接: <a href="https://paulgraham.com/yahoo.html">https://paulgraham.com/yahoo.html</a></p><p>August 2010</p><p>When I went to work for Yahoo after they bought our startup in 1998, it felt like the center of the world. It was supposed to be the next big thing. It was supposed to be what Google turned out to be.1998 年，雅虎收购了我们的初创公司，之后我便加入雅虎工作。那时候的雅虎，感觉就像世界的中心。它本应成为下一个巨头，本应发展成如今谷歌的模样。</p><p>What went wrong? The problems that hosed Yahoo go back a long time, practically to the beginning of the company. They were already very visible when I got there in 1998. Yahoo had two problems Google didn’t: easy money, and ambivalence about being a technology company.到底哪里出了问题？拖垮雅虎的问题由来已久，几乎从公司创立之初就存在了。1998 年我加入时，这些问题已经十分明显。雅虎面临着两个谷歌没有的难题：一是 “来钱太容易”，二是在 “是否要做一家科技公司” 这件事上态度摇摆不定。</p><h2 id="Money"><a href="#Money" class="headerlink" title="Money"></a>Money</h2><h2 id="金钱问题"><a href="#金钱问题" class="headerlink" title="金钱问题"></a>金钱问题</h2><p>The first time I met Jerry Yang, we thought we were meeting for different reasons. He thought we were meeting so he could check us out in person before buying us. I thought we were meeting so we could show him our new technology, Revenue Loop. It was a way of sorting shopping search results. Merchants bid a percentage of sales for traffic, but the results were sorted not by the bid but by the bid times the average amount a user would buy. It was like the algorithm Google uses now to sort ads, but this was in the spring of 1998, before Google was founded.我第一次见到杨致远时，我们对会面目的的理解完全不同。他以为会面是为了在收购我们公司前，当面考察一下我们；而我则认为，会面是为了向他展示我们的新技术 ——“收益循环”（Revenue Loop）。这是一种用于排序购物搜索结果的技术：商家会按销售额的一定比例竞标以获取流量，但搜索结果的排序依据并非单纯的竞标金额，而是竞标金额乘以用户的平均购买金额。这种模式和谷歌现在用于广告排序的算法很像，但当时是 1998 年春天，谷歌都还没成立。</p><p>Revenue Loop was the optimal sort for shopping search, in the sense that it sorted in order of how much money Yahoo would make from each link. But it wasn’t just optimal in that sense. Ranking search results by user behavior also makes search better. Users train the search: you can start out finding matches based on mere textual similarity, and as users buy more stuff the search results get better and better.从 “雅虎能从每个链接中赚取多少收益” 这个角度来看，“收益循环” 是购物搜索的最佳排序方式。但它的优势不止于此：根据用户行为对搜索结果进行排序，还能提升搜索体验。可以说，是用户在 “训练” 搜索功能 —— 一开始，搜索可能只是基于文本相似度来匹配结果，但随着用户购买行为的增加，搜索结果会变得越来越精准。</p><p>Jerry didn’t seem to care. I was confused. I was showing him technology that extracted the maximum value from search traffic, and he didn’t care? I couldn’t tell whether I was explaining it badly, or he was just very poker faced.杨致远对此似乎毫不在意，这让我很困惑。我向他展示的是一种能从搜索流量中挖掘最大价值的技术，他怎么会不关心呢？我不确定是自己没解释清楚，还是他只是天生表情冷淡、不露声色。</p><p>I didn’t realize the answer till later, after I went to work at Yahoo. It was neither of my guesses. The reason Yahoo didn’t care about a technique that extracted the full value of traffic was that advertisers were already overpaying for it. If Yahoo merely extracted the actual value, they’d have made less.直到后来我加入雅虎工作，才明白其中缘由 —— 我的两个猜测都不对。雅虎之所以不在乎这种能 “榨干” 流量全部价值的技术，是因为当时的广告商已经在为流量支付过高的费用了。如果雅虎只提取流量的实际价值，反而会赚得更少。</p><p>Hard as it is to believe now, the big money then was in banner ads. Advertisers were willing to pay ridiculous amounts for banner ads. So Yahoo’s sales force had evolved to exploit this source of revenue. Led by a large and terrifyingly formidable man called Anil Singh, Yahoo’s sales guys would fly out to Procter &amp; Gamble and come back with million dollar orders for banner ad impressions.现在听起来可能难以置信，但当时的主要收入来源是横幅广告。广告商愿意为横幅广告支付高得离谱的费用，因此雅虎的销售团队也逐渐发展成专门挖掘这一收入来源的队伍。在安尼尔・辛格（Anil Singh）—— 一个身材高大、气场强大到令人敬畏的人的带领下，雅虎的销售人员会飞往宝洁公司，签下价值数百万美元的横幅广告曝光订单。</p><p>The prices seemed cheap compared to print, which was what advertisers, for lack of any other reference, compared them to. But they were expensive compared to what they were worth. So these big, dumb companies were a dangerous source of revenue to depend on. But there was another source even more dangerous: other Internet startups.由于没有其他参照标准，广告商们会将横幅广告的价格与平面广告对比，这样一来，横幅广告的价格就显得很便宜。但如果对照其实际价值，这个价格就过高了。因此，依赖这些 “财大气粗却缺乏判断力” 的公司作为收入来源，本身就存在风险。而当时还有一个更危险的收入来源：其他互联网初创公司。</p><p>By 1998, Yahoo was the beneficiary of a de facto Ponzi scheme. Investors were excited about the Internet. One reason they were excited was Yahoo’s revenue growth. So they invested in new Internet startups. The startups then used the money to buy ads on Yahoo to get traffic. Which caused yet more revenue growth for Yahoo, and further convinced investors the Internet was worth investing in. When I realized this one day, sitting in my cubicle, I jumped up like Archimedes in his bathtub, except instead of “Eureka!” I was shouting “Sell!”到 1998 年时，雅虎实际上已经成了一个 “庞氏骗局” 的受益者。当时的投资者对互联网行业充满热情，而雅虎的收入增长正是他们热情的原因之一。于是，他们会投资新的互联网初创公司；这些初创公司拿到投资后，又会用这笔钱在雅虎上购买广告以获取流量；这反过来又推动雅虎收入进一步增长，让投资者更加坚信互联网行业值得投资。有一天，我坐在自己的工位上意识到这一点时，像阿基米德在浴缸里发现浮力定律那样跳了起来 —— 只不过我喊的不是 “尤里卡（我发现了）！”，而是 “赶紧抛售（雅虎股票）！”</p><p>Both the Internet startups and the Procter &amp; Gambles were doing brand advertising. They didn’t care about targeting. They just wanted lots of people to see their ads. So traffic became the thing to get at Yahoo. It didn’t matter what type. [1]无论是互联网初创公司，还是宝洁这样的大公司，当时做的都是品牌广告。它们不关心广告的精准定位，只希望有更多人看到自己的广告。因此，“流量” 成了雅虎追求的核心，至于流量的类型，则无关紧要。[1]</p><p>It wasn’t just Yahoo. All the search engines were doing it. This was why they were trying to get people to start calling them “portals” instead of “search engines.” Despite the actual meaning of the word portal, what they meant by it was a site where users would find what they wanted on the site itself, instead of just passing through on their way to other destinations, as they did at a search engine.当时不只是雅虎这样做，所有搜索引擎都在追求流量。这也是它们为什么试图让人们称自己为 “门户网站”，而非 “搜索引擎” 的原因。尽管 “门户” 一词本身有其实际含义，但这些公司口中的 “门户”，指的是一个能让用户在网站内部找到所需内容的平台 —— 而不是像在搜索引擎上那样，用户只是把它当作前往其他网站的 “中转站”。</p><p>I remember telling David Filo in late 1998 or early 1999 that Yahoo should buy Google, because I and most of the other programmers in the company were using it instead of Yahoo for search. He told me that it wasn’t worth worrying about. Search was only 6% of our traffic, and we were growing at 10% a month. It wasn’t worth doing better.我记得在 1998 年底或 1999 年初，我曾跟大卫・费罗（David Filo）说，雅虎应该收购谷歌 —— 因为我和公司里大多数程序员都在用谷歌搜索，而不是雅虎自己的搜索功能。但他告诉我，这件事不值得担心：搜索流量只占我们总流量的 6%，而且公司每月还在以 10% 的速度增长，没必要在搜索上做得更好。</p><p>I didn’t say “But search traffic is worth more than other traffic!” I said “Oh, ok.” Because I didn’t realize either how much search traffic was worth. I’m not sure even Larry and Sergey did then. If they had, Google presumably wouldn’t have expended any effort on enterprise search.我没有反驳说 “但搜索流量比其他流量更有价值啊！”，只是说了句 “哦，好的”。因为当时我也没意识到搜索流量的价值有多大。我甚至不确定拉里・佩奇（Larry Page）和谢尔盖・布林（Sergey Brin）（谷歌创始人）当时是否清楚这一点。如果他们清楚，谷歌或许就不会在企业搜索业务上投入任何精力了。</p><p>If circumstances had been different, the people running Yahoo might have realized sooner how important search was. But they had the most opaque obstacle in the world between them and the truth: money. As long as customers were writing big checks for banner ads, it was hard to take search seriously. Google didn’t have that to distract them.如果当时的情况有所不同，雅虎的管理层或许能更早意识到搜索业务的重要性。但在他们与 “真相” 之间，横亘着一个最难以穿透的障碍：金钱。只要客户还在为横幅广告开出巨额支票，他们就很难认真对待搜索业务。而谷歌则没有这样的 “干扰项”。</p><h2 id="Hackers"><a href="#Hackers" class="headerlink" title="Hackers"></a>Hackers</h2><h2 id="技术人才问题"><a href="#技术人才问题" class="headerlink" title="技术人才问题"></a>技术人才问题</h2><p>But Yahoo also had another problem that made it hard to change directions. They’d been thrown off balance from the start by their ambivalence about being a technology company.但雅虎还有另一个让它难以转向的问题：从一开始，它在 “是否要做一家科技公司” 上的摇摆态度，就让它失去了发展的重心。</p><p>One of the weirdest things about Yahoo when I went to work there was the way they insisted on calling themselves a “media company.” If you walked around their offices, it seemed like a software company. The cubicles were full of programmers writing code, product managers thinking about feature lists and ship dates, support people (yes, there were actually support people) telling users to restart their browsers, and so on, just like a software company. So why did they call themselves a media company?我刚加入雅虎时，最奇怪的一件事就是他们坚持称自己是 “媒体公司”。但如果你在他们的办公室里走一圈，会发现这里明明就是一家软件公司：工位上坐满了写代码的程序员，产品经理在琢磨功能清单和发布日期，客服人员（没错，当时雅虎确实有客服）告诉用户 “重启浏览器试试”—— 诸如此类的场景，和软件公司一模一样。那他们为什么还要称自己是媒体公司呢？</p><p>One reason was the way they made money: by selling ads. In 1995 it was hard to imagine a technology company making money that way. Technology companies made money by selling their software to users. Media companies sold ads. So they must be a media company.原因之一在于他们的盈利模式：靠卖广告赚钱。在 1995 年，人们很难想象一家科技公司会通过这种方式盈利 —— 当时的科技公司都是靠向用户出售软件赚钱，而媒体公司才靠卖广告盈利。因此，雅虎认为自己 “必须是一家媒体公司”。</p><p>Another big factor was the fear of Microsoft. If anyone at Yahoo considered the idea that they should be a technology company, the next thought would have been that Microsoft would crush them.另一个重要原因是对微软的恐惧。当时雅虎内部只要有人提出 “我们应该做一家科技公司”，接下来的念头必然是 “那微软会把我们打垮的”。</p><p>It’s hard for anyone much younger than me to understand the fear Microsoft still inspired in 1995. Imagine a company with several times the power Google has now, but way meaner. It was perfectly reasonable to be afraid of them. Yahoo watched them crush the first hot Internet company, Netscape. It was reasonable to worry that if they tried to be the next Netscape, they’d suffer the same fate. How were they to know that Netscape would turn out to be Microsoft’s last victim?对于比我年轻很多的人来说，很难理解 1995 年时微软所引发的恐惧。你可以想象一下：一家公司拥有比现在谷歌强大好几倍的实力，而且行事比谷歌凶狠得多。当时人们对微软感到恐惧，是完全合乎情理的。雅虎亲眼目睹了微软击垮了当时最热门的互联网公司 —— 网景（Netscape）。因此，他们有理由担心：如果自己试图成为下一个网景，就会遭遇同样的命运。可他们怎么会知道，网景其实是微软最后一个 “受害者” 呢？</p><p>It would have been a clever move to pretend to be a media company to throw Microsoft off their scent. But unfortunately Yahoo actually tried to be one, sort of. Project managers at Yahoo were called “producers,” for example, and the different parts of the company were called “properties.” But what Yahoo really needed to be was a technology company, and by trying to be something else, they ended up being something that was neither here nor there. That’s why Yahoo as a company has never had a sharply defined identity.如果雅虎只是 “假装” 自己是媒体公司，以此迷惑微软，那会是一步很聪明的棋。但不幸的是，雅虎竟然真的在某种程度上试图成为一家媒体公司。比如，雅虎的项目经理被称为 “制片人”（producers），公司的各个业务部门被称为 “资产”（properties）。可雅虎真正需要成为的是一家科技公司 —— 试图成为其他类型的公司，最终导致它变得 “不伦不类”。这也是为什么雅虎作为一家公司，始终没有一个清晰明确的定位。</p><p>The worst consequence of trying to be a media company was that they didn’t take programming seriously enough. Microsoft (back in the day), Google, and Facebook have all had hacker-centric cultures. But Yahoo treated programming as a commodity. At Yahoo, user-facing software was controlled by product managers and designers. The job of programmers was just to take the work of the product managers and designers the final step, by translating it into code.试图成为媒体公司带来的最糟糕后果，是雅虎没有足够重视编程（技术）。无论是当年的微软，还是后来的谷歌、Facebook，都拥有以 “黑客（技术人才）” 为核心的文化。但雅虎却把编程视为一种 “普通商品”—— 在雅虎，面向用户的软件产品由产品经理和设计师主导，程序员的工作只是把产品经理和设计师的想法 “翻译” 成代码，完成最后一步流程而已。</p><p>One obvious result of this practice was that when Yahoo built things, they often weren’t very good. But that wasn’t the worst problem. The worst problem was that they hired bad programmers.这种模式带来的一个明显后果是：雅虎开发的产品往往质量不高。但这还不是最严重的问题，最严重的是他们招到的程序员水平不行。</p><p>Microsoft (back in the day), Google, and Facebook have all been obsessed with hiring the best programmers. Yahoo wasn’t. They preferred good programmers to bad ones, but they didn’t have the kind of single-minded, almost obnoxiously elitist focus on hiring the smartest people that the big winners have had. And when you consider how much competition there was for programmers when they were hiring, during the Bubble, it’s not surprising that the quality of their programmers was uneven.当年的微软、后来的谷歌和 Facebook，都执着于招聘最优秀的程序员。但雅虎不是这样：他们虽然也更愿意招优秀的程序员，却没有像那些行业赢家那样，抱着 “一门心思、近乎偏执的精英主义” 去寻找最聪明的人才。而且，在互联网泡沫时期，招聘程序员的竞争本就异常激烈 —— 在这样的背景下，雅虎程序员的水平参差不齐，也就不足为奇了。</p><p>In technology, once you have bad programmers, you’re doomed. I can’t think of an instance where a company has sunk into technical mediocrity and recovered. Good programmers want to work with other good programmers. So once the quality of programmers at your company starts to drop, you enter a death spiral from which there is no recovery. [2]在科技行业，一旦公司里充斥着水平糟糕的程序员，就注定会走向失败。我想不出任何一家公司陷入技术平庸后还能东山再起的例子。优秀的程序员只愿意和其他优秀的程序员共事，所以一旦公司程序员的整体水平开始下滑，就会陷入无法挽回的 “死亡螺旋”。[2]</p><p>At Yahoo this death spiral started early. If there was ever a time when Yahoo was a Google-style talent magnet, it was over by the time I got there in 1998.雅虎的这场 “死亡螺旋” 很早就开始了。如果说雅虎曾经有过像谷歌那样吸引顶尖人才的时期，那在 1998 年我加入时，这个时期早已结束。</p><p>The company felt prematurely old. Most technology companies eventually get taken over by suits and middle managers. At Yahoo it felt as if they’d deliberately accelerated this process. They didn’t want to be a bunch of hackers. They wanted to be suits. A media company should be run by suits.当时的雅虎给人一种 “未老先衰” 的感觉。大多数科技公司最终会被西装革履的管理人员和中层经理掌控，但雅虎似乎是在刻意加速这个过程。他们不想做一群 “技术极客”，而想成为 “西装精英”—— 在他们看来，媒体公司就应该由这类人来运营。</p><p>The first time I visited Google, they had about 500 people, the same number Yahoo had when I went to work there. But boy did things seem different. It was still very much a hacker-centric culture. I remember talking to some programmers in the cafeteria about the problem of gaming search results (now known as SEO), and they asked “what should we do?” Programmers at Yahoo wouldn’t have asked that. Theirs was not to reason why; theirs was to build what product managers spec’d. I remember coming away from Google thinking “Wow, it’s still a startup.”我第一次去谷歌时，他们大约有 500 名员工，和我加入雅虎时的员工数量差不多。但两者的氛围简直天差地别 —— 谷歌当时依然是极具 “技术极客核心” 的文化。我记得曾在食堂和一些程序员聊起 “操纵搜索结果”（也就是现在所说的 SEO）的问题，他们会主动问 “我们该怎么解决这个问题？”。而雅虎的程序员绝不会这样问，他们从不会去思考 “为什么要做”，只会按产品经理的需求文档去开发。离开谷歌时，我心里想的是：“哇，这地方还像个初创公司一样有活力。”</p><p>There’s not much we can learn from Yahoo’s first fatal flaw. It’s probably too much to hope any company could avoid being damaged by depending on a bogus source of revenue. But startups can learn an important lesson from the second one. In the software business, you can’t afford not to have a hacker-centric culture.从雅虎的第一个致命缺陷（依赖虚假收入来源）中，我们能学到的东西不多 —— 毕竟期望任何公司都能避免因依赖虚假收入而受损，可能有些不切实际。但初创公司能从第二个缺陷（错误定位与轻视技术人才）中吸取重要教训：在软件行业，没有以技术极客为核心的文化，是绝对行不通的。</p><p>Probably the most impressive commitment I’ve heard to having a hacker-centric culture came from Mark Zuckerberg, when he spoke at Startup School in 2007. He said that in the early days Facebook made a point of hiring programmers even for jobs that would not ordinarily consist of programming, like HR and marketing.在我听过的关于 “坚守技术极客核心文化” 的案例中，最令人印象深刻的当属马克・扎克伯格 ——2007 年他在 “创业学院”（Startup School）演讲时提到，Facebook 早期特意招聘程序员来做那些通常不需要编程技能的工作，比如人力资源和市场营销。</p><p>So which companies need to have a hacker-centric culture? Which companies are “in the software business” in this respect? As Yahoo discovered, the area covered by this rule is bigger than most people realize. The answer is: any company that needs to have good software.那么，哪些公司需要以技术极客为核心的文化？从这个角度来说，哪些公司属于 “软件行业”？正如雅虎所经历的那样，这个规则涵盖的范围比大多数人想象的更广。答案是：任何需要优质软件的公司。</p><p>Why would great programmers want to work for a company that didn’t have a hacker-centric culture, as long as there were others that did? I can imagine two reasons: if they were paid a huge amount, or if the domain was interesting and none of the companies in it were hacker-centric. Otherwise you can’t attract good programmers to work in a suit-centric culture. And without good programmers you won’t get good software, no matter how many people you put on a task, or how many procedures you establish to ensure “quality.”只要存在拥有技术极客文化的公司，优秀的程序员为什么要去一家没有这种文化的公司工作呢？我能想到的两个理由是：要么能拿到极高的薪水，要么所在领域非常有趣，且该领域内所有公司都没有技术极客文化。除此之外，你不可能吸引优秀的程序员到一个以 “西装精英” 为核心的公司工作。而没有优秀的程序员，无论你为一项任务投入多少人力，或制定多少流程来确保 “质量”，都无法开发出优质的软件。</p><p>Hacker culture often seems kind of irresponsible. That’s why people proposing to destroy it use phrases like “adult supervision.” That was the phrase they used at Yahoo. But there are worse things than seeming irresponsible. Losing, for example.技术极客文化往往给人一种 “不负责任” 的感觉，这也是那些想要摧毁这种文化的人会用 “成年人监管” 这类说法的原因 —— 雅虎内部当时就是这么说的。但有些事情比 “看起来不负责任” 更糟糕，比如（在行业竞争中）彻底失败。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>[1] The closest we got to targeting when I was there was when we created <a href="https://pets.yahoo.com/">pets.yahoo.com</a> in order to provoke a bidding war between 3 pet supply startups for the spot as top sponsor.[1] 我在雅虎期间，公司最接近 “精准定位” 的举措，是创建了<a href="https://pets.yahoo.com/">pets.yahoo.com</a>（雅虎宠物频道）—— 目的是挑起三家宠物用品初创公司之间的竞标大战，争夺该频道的顶级赞助商席位。</p><p>[2] In theory you could beat the death spiral by buying good programmers instead of hiring them. You can get programmers who would never have come to you as employees by buying their startups. But so far the only companies smart enough to do this are companies smart enough not to need to.[2] 理论上，你可以通过收购而非直接招聘来获得优秀程序员，从而打破 “死亡螺旋”—— 收购优秀程序员创办的初创公司，就能吸引到那些原本绝不会作为普通员工加入你的人。但到目前为止，只有足够聪明、本就不需要靠这种方式来获取人才的公司，才懂得这样做。</p><p>Thanks to Trevor Blackwell, Jessica Livingston, and Geoff Ralston for reading drafts of this.感谢特雷弗・布莱克韦尔（Trevor Blackwell）、杰西卡・利文斯顿（Jessica Livingston）和杰夫・拉尔斯顿（Geoff Ralston）阅读本文初稿并提出建议。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络初创公司的未来</title>
    <link href="/2025/09/30/the-future-of-web-startups/"/>
    <url>/2025/09/30/the-future-of-web-startups/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Future-of-Web-Startups"><a href="#The-Future-of-Web-Startups" class="headerlink" title="The Future of Web Startups"></a>The Future of Web Startups</h1><h1 id="网络初创公司的未来"><a href="#网络初创公司的未来" class="headerlink" title="网络初创公司的未来"></a>网络初创公司的未来</h1><p>原文链接: <a href="https://paulgraham.com/webstartups.html">https://paulgraham.com/webstartups.html</a></p><p>October 2007</p><p>(This essay is derived from a keynote at FOWA in October 2007.)（本文改编自 2007 年 10 月在 FOWA（网络创业者大会）上发表的主题演讲。）</p><p>There’s something interesting happening right now. Startups are undergoing the same transformation that technology does when it becomes cheaper.当下正发生着一件有趣的事：初创公司正经历着与科技产品降价时相同的变革。</p><p>It’s a pattern we see over and over in technology. Initially there’s some device that’s very expensive and made in small quantities. Then someone discovers how to make them cheaply; many more get built; and as a result they can be used in new ways.这是我们在科技领域反复看到的一种模式。起初，某种设备价格高昂且产量稀少；随后有人找到低成本制造的方法，产量大幅增加；最终，这些设备得以被应用到新的领域。</p><p>Computers are a familiar example. When I was a kid, computers were big, expensive machines built one at a time. Now they’re a commodity. Now we can stick computers in everything.电脑就是一个大家熟知的例子。在我小时候，电脑还是体积庞大、价格昂贵、需逐一制造的机器；如今，电脑已成为日常商品，我们甚至能将其嵌入到各类物品中。</p><p>This pattern is very old. Most of the turning points in economic history are instances of it. It happened to steel in the 1850s, and to power in the 1780s. It happened to cloth manufacture in the thirteenth century, generating the wealth that later brought about the Renaissance. Agriculture itself was an instance of this pattern.这种模式由来已久，经济史上的多数转折点都印证了它。19 世纪 50 年代的钢铁行业、18 世纪 80 年代的能源行业都经历过这一过程；13 世纪的纺织业也不例外 —— 纺织业的变革创造了大量财富，为后来文艺复兴的兴起奠定了基础。甚至农业的发展本身，也是这种模式的体现。</p><p>Now as well as being produced by startups, this pattern is happening to startups. It’s so cheap to start web startups that orders of magnitudes more will be started. If the pattern holds true, that should cause dramatic changes.如今，这种模式不仅由初创公司推动产生，更在初创公司自身身上发生。创办网络初创公司的成本已大幅降低，未来这类公司的数量或将呈数量级增长。若这一模式持续成立，必将引发巨大变革。</p><h2 id="Lots-of-Startups"><a href="#Lots-of-Startups" class="headerlink" title="Lots of Startups"></a><strong>Lots of Startups</strong></h2><h2 id="初创公司数量将大幅增加"><a href="#初创公司数量将大幅增加" class="headerlink" title="初创公司数量将大幅增加"></a><strong>初创公司数量将大幅增加</strong></h2><p>So my first prediction about the future of web startups is pretty straightforward: there will be a lot of them. When starting a startup was expensive, you had to get the permission of investors to do it. Now the only threshold is courage.因此，我对网络初创公司未来的第一个预测非常明确：这类公司的数量会变得非常多。过去，创办初创公司成本高昂，必须获得投资者的许可才能启动；而现在，唯一的门槛只剩勇气。</p><p>Even that threshold is getting lower, as people watch others take the plunge and survive. In the last batch of startups we funded, we had several founders who said they’d thought of applying before, but weren’t sure and got jobs instead. It was only after hearing reports of friends who’d done it that they decided to try it themselves.而且，随着人们看到他人勇敢尝试并成功存活，连 “勇气” 这道门槛也在降低。在我们上一批投资的初创公司中，有几位创始人表示，他们此前就想过申请融资，但因不确定而选择先找份工作。直到听说有朋友成功创办了初创公司，他们才决定亲自尝试。</p><p>Starting a startup is hard, but having a 9 to 5 job is hard too, and in some ways a worse kind of hard. In a startup you have lots of worries, but you don’t have that feeling that your life is flying by like you do in a big company. Plus in a startup you could make much more money.创办初创公司确实不易，但朝九晚五的工作同样辛苦，且在某些方面，这种辛苦更令人煎熬。在初创公司，你会有很多担忧，但不会像在大公司那样，产生 “时光飞逝却一事无成” 的失落感。此外，在初创公司，你有可能赚到多得多的钱。</p><p>As word spreads that startups work, the number may grow to a point that would now seem surprising.随着 “初创公司可行” 的消息逐渐传开，其数量可能会增长到如今令人难以置信的规模。</p><p>We now think of it as normal to have a job at a company, but this is the thinnest of historical veneers. Just two or three lifetimes ago, most people in what are now called industrialized countries lived by farming. So while it may seem surprising to propose that large numbers of people will change the way they make a living, it would be more surprising if they didn’t.如今，我们觉得在公司上班是天经地义的事，但这在历史长河中只是极短暂的现象。仅仅两三代人之前，现在所谓的 “工业化国家” 里，大多数人还以务农为生。因此，尽管 “大量人将改变谋生方式” 的说法可能听起来令人意外，但如果这种改变没有发生，才更令人惊讶。</p><h2 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a><strong>Standardization</strong></h2><h2 id="标准化将成为趋势"><a href="#标准化将成为趋势" class="headerlink" title="标准化将成为趋势"></a><strong>标准化将成为趋势</strong></h2><p>When technology makes something dramatically cheaper, standardization always follows. When you make things in large volumes you tend to standardize everything that doesn’t need to change.当科技使某种事物的成本大幅降低时，标准化就会随之而来。当你需要大量生产某种东西时，总会将所有无需改动的部分标准化。</p><p>At Y Combinator we still only have four people, so we try to standardize everything. We could hire employees, but we want to be forced to figure out how to scale investing.在 Y Combinator（创业孵化器），我们目前仍只有四名员工，因此我们努力将所有流程标准化。我们本可以招聘更多员工，但我们希望通过这种 “人员有限” 的约束，找到扩大投资规模的方法。</p><p>We often tell startups to release a minimal version one quickly, then let the needs of the users determine what to do next. In essense, let the market design the product. We’ve done the same thing ourselves. We think of the techniques we’re developing for dealing with large numbers of startups as like software. Sometimes it literally is software, like Hacker News and our application system.我们经常建议初创公司：先快速推出最小可行版本（第一版产品），然后根据用户需求决定后续方向。本质上，就是让市场来主导产品设计。我们自己也在践行这一理念 —— 我们将为服务大量初创公司而开发的方法视为 “软件”，有时它们甚至就是实实在在的软件，比如 Hacker News（黑客新闻平台）和我们的融资申请系统。</p><p>One of the most important things we’ve been working on standardizing are investment terms. Till now investment terms have been individually negotiated. This is a problem for founders, because it makes raising money take longer and cost more in legal fees. So as well as using the same paperwork for every deal we do, we’ve commissioned generic angel paperwork that all the startups we fund can use for future rounds.投资条款是我们在标准化工作中最重要的内容之一。在此之前，投资条款都需要逐一协商，这对创始人来说是个麻烦 —— 不仅会延长融资时间，还会增加法律费用。因此，我们不仅在所有投资交易中使用统一文件，还定制了通用的天使轮融资文件，供我们投资的所有初创公司在后续融资轮次中使用。</p><p>Some investors will still want to cook up their own deal terms. Series A rounds, where you raise a million dollars or more, will be custom deals for the forseeable future. But I think angel rounds will start to be done mostly with standardized agreements. An angel who wants to insert a bunch of complicated terms into the agreement is probably not one you want anyway.当然，仍有部分投资者希望定制自己的交易条款。在可预见的未来，融资额达 100 万美元及以上的 A 轮融资，仍会是定制化交易。但我认为，天使轮融资将主要采用标准化协议。毕竟，一个总想在协议中加入一堆复杂条款的天使投资者，很可能本就不是你该选择的合作伙伴。</p><h2 id="New-Attitude-to-Acquisition"><a href="#New-Attitude-to-Acquisition" class="headerlink" title="New Attitude to Acquisition"></a><strong>New Attitude to Acquisition</strong></h2><h2 id="对收购的态度将发生转变"><a href="#对收购的态度将发生转变" class="headerlink" title="对收购的态度将发生转变"></a><strong>对收购的态度将发生转变</strong></h2><p>Another thing I see starting to get standardized is acquisitions. As the volume of startups increases, big companies will start to develop standardized procedures that make acquisitions little more work than hiring someone.我发现另一个开始走向标准化的领域是 “收购”。随着初创公司数量增多，大公司会逐步建立标准化流程，使收购的工作量降至与招聘一个人相差无几的水平。</p><p>Google is the leader here, as in so many areas of technology. They buy a lot of startups— more than most people realize, because they only announce a fraction of them. And being Google, they’re figuring out how to do it efficiently.与在众多科技领域一样，谷歌（Google）在这方面也处于领先地位。谷歌收购的初创公司数量远超大多数人的想象 —— 因为他们只公布了其中一小部分。而凭借谷歌的特质，他们正在摸索如何高效地完成收购。</p><p>One problem they’ve solved is how to think about acquisitions. For most companies, acquisitions still carry some stigma of inadequacy. Companies do them because they have to, but there’s usually some feeling they shouldn’t have to—that their own programmers should be able to build everything they need.谷歌解决的一个关键问题是 “如何看待收购”。对大多数公司而言，收购仍带有一种 “自身能力不足” 的负面意味：他们收购初创公司是出于 “无奈”，内心深处却总觉得 “本不该如此”—— 认为自己公司的程序员应该能开发出所有需要的东西。</p><p>Google’s example should cure the rest of the world of this idea. Google has by far the best programmers of any public technology company. If they don’t have a problem doing acquisitions, the others should have even less problem. However many Google does, Microsoft should do ten times as many.谷歌的例子理应让其他公司摒弃这种想法。目前，谷歌拥有所有上市科技公司中最优秀的程序员团队。如果连谷歌都不排斥收购，其他公司更没理由抵触。无论谷歌收购多少家初创公司，微软（Microsoft）都应该收购十倍于此的数量。</p><p>One reason Google doesn’t have a problem with acquisitions is that they know first-hand the quality of the people they can get that way. Larry and Sergey only started Google after making the rounds of the search engines trying to sell their idea and finding no takers. They’ve been the guys coming in to visit the big company, so they know who might be sitting across that conference table from them.谷歌不抵触收购的一个原因是，他们亲身体验过通过收购能获得多么优秀的人才。拉里・佩奇（Larry Page）和谢尔盖・布林（Sergey Brin）当初曾向多家搜索引擎公司推销自己的理念，却无人问津，之后才创办了谷歌。他们曾是 “走进大公司推销想法的创业者”，因此清楚坐在谈判桌另一端的人可能具备怎样的潜力。</p><h2 id="Riskier-Strategies-are-Possible"><a href="#Riskier-Strategies-are-Possible" class="headerlink" title="Riskier Strategies are Possible"></a><strong>Riskier Strategies are Possible</strong></h2><h2 id="高风险策略将具备可行性"><a href="#高风险策略将具备可行性" class="headerlink" title="高风险策略将具备可行性"></a><strong>高风险策略将具备可行性</strong></h2><p>Risk is always proportionate to reward. The way to get really big returns is to do things that seem crazy, like starting a new search engine in 1998, or turning down a billion dollar acquisition offer.风险与回报始终成正比。要获得超高回报，就必须做一些看似 “疯狂” 的事 —— 比如在 1998 年创办一家新的搜索引擎公司，或是拒绝一份 10 亿美元的收购要约。</p><p>This has traditionally been a problem in venture funding. Founders and investors have different attitudes to risk. Knowing that risk is on average proportionate to reward, investors like risky strategies, while founders, who don’t have a big enough sample size to care what’s true on average, tend to be more conservative.在传统风险投资领域，这一直是个难题：创始人与投资者对风险的态度截然不同。投资者知道 “风险平均而言与回报成正比”，因此更倾向于高风险策略；而创始人由于没有足够多的 “试错样本”，无法关注 “平均规律”，往往会更加保守。</p><p>If startups are easy to start, this conflict goes away, because founders can start them younger, when it’s rational to take more risk, and can start more startups total in their careers. When founders can do lots of startups, they can start to look at the world in the same portfolio-optimizing way as investors. And that means the overall amount of wealth created can be greater, because strategies can be riskier.但如果创办初创公司变得容易，这种矛盾就会消失。因为创始人可以在更年轻的时候启动项目 —— 这个阶段承担更多风险是合理的，而且在整个职业生涯中，他们可以创办更多家初创公司。当创始人能创办多家公司时，他们就会像投资者一样，以 “优化投资组合” 的视角看待问题。这意味着，由于高风险策略具备了可行性，整体创造的财富规模也会更大。</p><h2 id="Younger-Nerdier-Founders"><a href="#Younger-Nerdier-Founders" class="headerlink" title="Younger, Nerdier Founders"></a><strong>Younger, Nerdier Founders</strong></h2><h2 id="创始人将更年轻、更懂技术"><a href="#创始人将更年轻、更懂技术" class="headerlink" title="创始人将更年轻、更懂技术"></a><strong>创始人将更年轻、更懂技术</strong></h2><p>If startups become a cheap commodity, more people will be able to have them, just as more people could have computers once microprocessors made them cheap. And in particular, younger and more technical founders will be able to start startups than could before.如果初创公司变成 “低成本商品”，更多人就能创办它们 —— 就像微处理器让电脑成本降低后，更多人能拥有电脑一样。尤其值得注意的是，未来能创办初创公司的人，会比以前更年轻、技术背景更深厚。</p><p>Back when it cost a lot to start a startup, you had to convince investors to let you do it. And that required very different skills from actually doing the startup. If investors were perfect judges, the two would require exactly the same skills. But unfortunately most investors are terrible judges. I know because I see behind the scenes what an enormous amount of work it takes to raise money, and the amount of selling required in an industry is always inversely proportional to the judgement of the buyers.过去，创办初创公司成本高昂，必须说服投资者才能启动项目 —— 而 “说服投资者” 所需的技能，与 “实际运营初创公司” 的技能截然不同。如果投资者是完美的判断者，这两种技能理应完全一致，但遗憾的是，大多数投资者的判断力都很差。我之所以知道这一点，是因为我亲眼目睹了融资过程需要付出多少努力；而一个行业中 “说服他人” 的工作量，往往与 “买家（此处指投资者）的判断力” 成反比。</p><p>Fortunately, if startups get cheaper to start, there’s another way to convince investors. Instead of going to venture capitalists with a business plan and trying to convince them to fund it, you can get a product launched on a few tens of thousands of dollars of seed money from us or your uncle, and approach them with a working company instead of a plan for one. Then instead of having to seem smooth and confident, you can just point them to Alexa.幸运的是，若创办初创公司的成本降低，说服投资者就有了另一种方式：你无需拿着商业计划书去找风险投资家，试图说服他们投资；只需用我们或你亲戚提供的几万美元种子资金，先推出一款产品，然后带着一家 “正在运营的公司”（而非 “公司计划书”）去见投资者。届时，你无需表现得圆滑自信，只需让他们去看 Alexa（亚马逊旗下网站流量统计工具）的数据即可。</p><p>This way of convincing investors is better suited to hackers, who often went into technology in part because they felt uncomfortable with the amount of fakeness required in other fields.这种说服投资者的方式，更适合 “技术极客”（hackers）。他们选择进入科技领域，部分原因就是反感其他行业中那些 “虚与委蛇” 的做法。</p><h2 id="Startup-Hubs-Will-Persist"><a href="#Startup-Hubs-Will-Persist" class="headerlink" title="Startup Hubs Will Persist"></a><strong>Startup Hubs Will Persist</strong></h2><h2 id="初创公司聚集地将持续存在"><a href="#初创公司聚集地将持续存在" class="headerlink" title="初创公司聚集地将持续存在"></a><strong>初创公司聚集地将持续存在</strong></h2><p>It might seem that if startups get cheap to start, it will mean the end of startup hubs like Silicon Valley. If all you need to start a startup is rent money, you should be able to do it anywhere.有人可能会认为，既然创办初创公司的成本降低，硅谷这样的初创公司聚集地就会走向终结 —— 毕竟，若启动公司只需支付租金，理论上在任何地方都能创办。</p><p>This is kind of true and kind of false. It’s true that you can now start a startup anywhere. But you have to do more with a startup than just start it. You have to make it succeed. And that is more likely to happen in a startup hub.这种说法有对有错。确实，如今在任何地方都能创办初创公司，但创办只是第一步，你还需要让公司成功 —— 而在初创公司聚集地，成功的概率要大得多。</p><p>I’ve thought a lot about this question, and it seems to me the increasing cheapness of web startups will if anything increase the importance of startup hubs. The value of startup hubs, like centers for any kind of business, lies in something very old-fashioned: face to face meetings. No technology in the immediate future will replace walking down University Ave and running into a friend who tells you how to fix a bug that’s been bothering you all weekend, or visiting a friend’s startup down the street and ending up in a conversation with one of their investors.我对这个问题思考了很久，在我看来，网络初创公司成本越来越低，非但不会削弱初创公司聚集地的重要性，反而会提升其价值。和所有行业的聚集中心一样，初创公司聚集地的核心价值在于一种非常传统的方式：面对面交流。短期内，没有任何技术能替代这样的场景 —— 比如走在大学大道上偶遇一位朋友，对方帮你解决了困扰你整个周末的程序漏洞；或是去街对面朋友的初创公司拜访，意外和他们的一位投资者聊了起来。</p><p>The question of whether to be in a startup hub is like the question of whether to take outside investment. The question is not whether you need it, but whether it brings any advantage at all. Because anything that brings an advantage will give your competitors an advantage over you if they do it and you don’t. So if you hear someone saying “we don’t need to be in Silicon Valley,” that use of the word “need” is a sign they’re not even thinking about the question right.“是否要扎根初创公司聚集地”，这个问题就像 “是否要接受外部投资” 一样 —— 关键不在于 “你是否需要它”，而在于 “它是否能带来任何优势”。因为只要某件事能带来优势，若竞争对手做了而你没做，他们就会比你更具竞争力。所以，当你听到有人说 “我们不需要在硅谷” 时，这种对 “需要” 一词的使用，说明他们甚至没有正确理解这个问题。</p><p>And while startup hubs are as powerful magnets as ever, the increasing cheapness of starting a startup means the particles they’re attracting are getting lighter. A startup now can be just a pair of 22 year old guys. A company like that can move much more easily than one with 10 people, half of whom have kids.尽管初创公司聚集地仍像强大的磁体一样吸引着创业者，但创办成本的降低意味着，它们吸引的 “个体” 正变得更 “轻盈”。如今，一家初创公司可能只是两个 22 岁的年轻人搭档。这样的团队比那些有 10 名员工（其中一半已为人父母）的公司更容易搬迁。</p><p>We know because we make people move for Y Combinator, and it doesn’t seem to be a problem. The advantage of being able to work together face to face for three months outweighs the inconvenience of moving. Ask anyone who’s done it.我们之所以知道这一点，是因为我们会要求创业者为加入 Y Combinator 而搬迁，而这似乎从未成为难题。三个月面对面协作带来的优势，远大于搬迁带来的不便 —— 你可以去问问任何有过这种经历的人。</p><p>The mobility of seed-stage startups means that seed funding is a national business. One of the most common emails we get is from people asking if we can help them set up a local clone of Y Combinator. But this just wouldn’t work. Seed funding isn’t regional, just as big research universities aren’t.种子轮初创公司的高流动性，意味着种子资金是一门全国性的生意。我们收到的最常见邮件之一，就是有人询问能否帮助他们在当地建立一个 “Y Combinator 翻版”。但这根本行不通，因为种子资金不存在地域性，就像大型研究型大学不会受地域限制一样。</p><p>Is seed funding not merely national, but international? Interesting question. There are signs it may be. We’ve had an ongoing stream of founders from outside the US, and they tend to do particularly well, because they’re all people who were so determined to succeed that they were willing to move to another country to do it.种子资金是否不仅是全国性的，还能走向国际？这是个有趣的问题，而且已有迹象表明这种可能性。我们不断收到来自美国以外的创始人的申请，他们往往表现得格外出色 —— 因为他们都是为了成功不惜搬到另一个国家的人，决心可想而知。</p><p>The more mobile startups get, the harder it would be to start new silicon valleys. If startups are mobile, the best local talent will go to the real Silicon Valley, and all they’ll get at the local one will be the people who didn’t have the energy to move.初创公司的流动性越强，打造 “新硅谷” 就越困难。因为如果初创公司可以自由搬迁，当地最优秀的人才就会流向真正的硅谷，而留在 “本地硅谷” 的，只会是那些没有精力搬迁的人。</p><p>This is not a nationalistic idea, incidentally. It’s cities that compete, not countries. Atlanta is just as hosed as Munich.顺便说一句，这并非民族主义观点 —— 真正相互竞争的是城市，而非国家。亚特兰大（美国城市）和慕尼黑（德国城市）面临的困境是一样的。</p><h2 id="Better-Judgement-Needed"><a href="#Better-Judgement-Needed" class="headerlink" title="Better Judgement Needed"></a><strong>Better Judgement Needed</strong></h2><h2 id="对判断力的要求将更高"><a href="#对判断力的要求将更高" class="headerlink" title="对判断力的要求将更高"></a><strong>对判断力的要求将更高</strong></h2><p>If the number of startups increases dramatically, then the people whose job is to judge them are going to have to get better at it. I’m thinking particularly of investors and acquirers. We now get on the order of 1000 applications a year. What are we going to do if we get 10,000?如果初创公司数量大幅增加，那么那些负责 “评判” 它们的人（尤其是投资者和收购方）必须提升自己的判断力。目前，我们每年收到约 1000 份申请；要是申请数量达到 10000 份，我们该如何应对？</p><p>That’s actually an alarming idea. But we’ll figure out some kind of answer. We’ll have to. It will probably involve writing some software, but fortunately we can do that.这确实是个令人担忧的问题，但我们总会找到解决办法 —— 也必须找到。解决方案很可能涉及开发一些软件，好在我们有能力做到这一点。</p><p>Acquirers will also have to get better at picking winners. They generally do better than investors, because they pick later, when there’s more performance to measure. But even at the most advanced acquirers, identifying companies to buy is extremely ad hoc, and completing the acquisition often involves a great deal of unneccessary friction.收购方也必须更善于挑选 “潜力股”。通常来说，他们的判断比投资者更准确，因为他们出手更晚，有更多业绩数据可供参考。但即便在最成熟的收购方那里，挑选待收购公司的过程也极其临时随意，完成收购往往还会遇到大量不必要的阻碍。</p><p>I think acquirers may eventually have chief acquisition officers who will both identify good acquisitions and make the deals happen. At the moment those two functions are separate. Promising new startups are often discovered by developers. If someone powerful enough wants to buy them, the deal is handed over to corp dev guys to negotiate. It would be better if both were combined in one group, headed by someone with a technical background and some vision of what they wanted to accomplish. Maybe in the future big companies will have both a VP of Engineering responsible for technology developed in-house, and a CAO responsible for bringing technology in from outside.我认为，收购方最终可能会设立 “首席收购官”（Chief Acquisition Officer）这一职位，既负责筛选优质收购标的，也负责推动交易达成。目前，这两项职能是分开的：有潜力的新初创公司往往由技术人员发现，但如果公司高层决定收购，交易就会交给企业发展部门（corp dev）的人去谈判。若能将这两项职能整合到一个团队，由具备技术背景且对目标有清晰规划的人领导，效果会好得多。或许未来，大公司会同时设立 “工程副总裁”（负责内部技术研发）和 “首席收购官”（负责从外部引入技术）。</p><p>At the moment, there is no one within big companies who gets in trouble when they buy a startup for $200 million that they could have bought earlier for $20 million. There should start to be someone who gets in trouble for that.目前，在大公司里，如果有人以 2 亿美元收购了一家本可在早期以 2000 万美元拿下的初创公司，并不会有人为此负责。但未来，必须有人为这种失误承担责任。</p><h2 id="College-Will-Change"><a href="#College-Will-Change" class="headerlink" title="College Will Change"></a><strong>College Will Change</strong></h2><h2 id="大学教育将发生变革"><a href="#大学教育将发生变革" class="headerlink" title="大学教育将发生变革"></a><strong>大学教育将发生变革</strong></h2><p>If the best hackers start their own companies after college instead of getting jobs, that will change what happens in college. Most of these changes will be for the better. I think the experience of college is warped in a bad way by the expectation that afterward you’ll be judged by potential employers.如果最优秀的技术极客（hackers）毕业后选择创办自己的公司，而非找工作，大学的生态将会发生改变 —— 而且大多数改变会是积极的。我认为，“毕业后要接受雇主评判” 的预期，已经对大学经历造成了不良扭曲。</p><p>One change will be in the meaning of “after college,” which will switch from when one graduates from college to when one leaves it. If you’re starting your own company, why do you need a degree? We don’t encourage people to start startups during college, but the best founders are certainly capable of it. Some of the most successful companies we’ve funded were started by undergrads.其中一个变化是 “毕业后” 的定义将改变：不再是 “大学毕业时”，而是 “离开大学时”。如果你要创办自己的公司，为何还需要学位？我们不鼓励人们在大学期间创办公司，但最优秀的创始人显然有这个能力 —— 我们投资过的一些最成功的公司，就是由本科生创办的。</p><p>I grew up in a time where college degrees seemed really important, so I’m alarmed to be saying things like this, but there’s nothing magical about a degree. There’s nothing that magically changes after you take that last exam. The importance of degrees is due solely to the administrative needs of large organizations. These can certainly affect your life—it’s hard to get into grad school, or to get a work visa in the US, without an undergraduate degree—but tests like this will matter less and less.我成长的年代，大学学位似乎至关重要，因此说出这样的话连我自己都感到惊讶，但学位本身并没有什么 “魔力”。考完最后一门试后，你不会发生任何神奇的改变。学位的重要性，完全源于大型机构的行政需求。当然，这确实会影响你的生活 —— 没有本科学位，很难进入研究生院，也难以获得美国工作签证 —— 但这类 “门槛” 的重要性会越来越低。</p><p>As well as mattering less whether students get degrees, it will also start to matter less where they go to college. In a startup you’re judged by users, and they don’t care where you went to college. So in a world of startups, elite universities will play less of a role as gatekeepers. In the US it’s a national scandal how easily children of rich parents game college admissions. But the way this problem ultimately gets solved may not be by reforming the universities but by going around them. We in the technology world are used to that sort of solution: you don’t beat the incumbents; you redefine the problem to make them irrelevant.除了 “是否获得学位” 变得不那么重要，“去哪所大学” 的重要性也会下降。在初创公司，你的价值由用户评判，而用户根本不在乎你毕业于哪所学校。因此，在一个初创公司遍地的世界里，顶尖大学作为 “守门人” 的角色会逐渐弱化。在美国，“富人子女轻松钻大学录取漏洞” 已是全国性丑闻，但这个问题的最终解决方式，或许不是改革大学，而是 “绕过” 大学。科技行业的人对这种解决方案很熟悉：你不必击败现有玩家，只需重新定义问题，让他们变得无关紧要。</p><p>The greatest value of universities is not the brand name or perhaps even the classes so much as the people you meet. If it becomes common to start a startup after college, students may start trying to maximize this. Instead of focusing on getting internships at companies they want to work for, they may start to focus on working with other students they want as cofounders.大学最大的价值，不在于品牌，甚至不在于课程，而在于你遇到的人。如果毕业后创办初创公司成为普遍选择，学生们可能会开始主动最大化这一价值：他们不会再专注于去心仪的公司实习，而是会着重与那些他们希望成为联合创始人的同学合作。</p><p>What students do in their classes will change too. Instead of trying to get good grades to impress future employers, students will try to learn things. We’re talking about some pretty dramatic changes here.学生在课堂上的行为也会改变：他们不再为了给未来雇主留下好印象而追求高分，而是会真正为了学习知识而学习。这些都将是相当深刻的变革。</p><h2 id="Lots-of-Competitors"><a href="#Lots-of-Competitors" class="headerlink" title="Lots of Competitors"></a><strong>Lots of Competitors</strong></h2><h2 id="竞争对手将大幅增加"><a href="#竞争对手将大幅增加" class="headerlink" title="竞争对手将大幅增加"></a><strong>竞争对手将大幅增加</strong></h2><p>If it gets easier to start a startup, it’s easier for competitors too. That doesn’t erase the advantage of increased cheapness, however. You’re not all playing a zero-sum game. There’s not some fixed number of startups that can succeed, regardless of how many are started.创办初创公司变得容易，对竞争对手来说同样如此。但这并不会抵消 “成本降低” 带来的优势，因为创业并非零和游戏 —— 无论创办多少家初创公司，能成功的公司数量并非固定不变。</p><p>In fact, I don’t think there’s any limit to the number of startups that could succeed. Startups succeed by creating wealth, which is the satisfaction of people’s desires. And people’s desires seem to be effectively infinite, at least in the short term.事实上，我认为成功的初创公司数量没有上限。初创公司通过创造财富（即满足人们的需求）获得成功，而至少在短期内，人们的需求几乎是无限的。</p><p>What the increasing number of startups does mean is that you won’t be able to sit on a good idea. Other people have your idea, and they’ll be increasingly likely to do something about it.但初创公司数量的增加意味着，你不能再 “守着一个好想法不行动”。因为其他人也可能想到同样的点子，而且他们将更有可能付诸实践。</p><h2 id="Faster-Advances"><a href="#Faster-Advances" class="headerlink" title="Faster Advances"></a><strong>Faster Advances</strong></h2><h2 id="技术进步将加速"><a href="#技术进步将加速" class="headerlink" title="技术进步将加速"></a><strong>技术进步将加速</strong></h2><p>There’s a good side to that, at least for consumers of technology. If people get right to work implementing ideas instead of sitting on them, technology will evolve faster.这也有好的一面 —— 至少对科技消费者而言是如此。如果人们不再守着想法不行动，而是立刻着手实现，技术进化的速度将会加快。</p><p>Some kinds of innovations happen a company at a time, like the punctuated equilibrium model of evolution. There are some kinds of ideas that are so threatening that it’s hard for big companies even to think of them. Look at what a hard time Microsoft is having discovering web apps. They’re like a character in a movie that everyone in the audience can see something bad is about to happen to, but who can’t see it himself. The big innovations that happen a company at a time will obviously happen faster if the rate of new companies increases.有些创新是以 “公司为单位” 发生的，就像生物进化中的 “间断平衡理论”（指进化过程中长期稳定与短期快速变化交替出现）。有些想法对大公司而言极具威胁性，以至于他们连想都不敢想。比如微软在接纳网页应用（web apps）时就举步维艰，就像电影里的某个角色 —— 观众都能看出他即将遭遇不幸，他自己却毫无察觉。如果新公司的诞生速度加快，这种 “以公司为单位” 的重大创新，显然也会发生得更快。</p><p>But in fact there will be a double speed increase. People won’t wait as long to act on new ideas, but also those ideas will increasingly be developed within startups rather than big companies. Which means technology will evolve faster per company as well.但事实上，技术进步将迎来 “双重加速”。一方面，人们不会再长时间搁置新想法，而是更快将其付诸行动；另一方面，这些新想法将越来越多地在初创公司而非大公司中落地开发。这意味着，即便在 “每家公司” 的层面，技术进化速度也会加快。</p><p>Big companies are just not a good place to make things happen fast. I talked recently to a founder whose startup had been acquired by a big company. He was a precise sort of guy, so he’d measured their productivity before and after. He counted lines of code, which can be a dubious measure, but in this case was meaningful because it was the same group of programmers. He found they were one thirteenth as productive after the acquisition.大公司本身就不是 “快速推进事情” 的理想场所。我最近和一位创始人聊过，他的初创公司被一家大公司收购了。他是个做事严谨的人，因此对比了团队在收购前后的 productivity。他用 “代码行数” 来衡量 —— 虽然这种方式有时存疑，但在这个案例中很有参考价值，因为团队成员还是同一批程序员。结果他发现，收购后团队的 productivity 仅为之前的十三分之一。</p><p>The company that bought them was not a particularly stupid one. I think what he was measuring was mostly the cost of bigness. I experienced this myself, and his number sounds about right. There’s something about big companies that just sucks the energy out of you.收购他公司的那家企业并非特别愚蠢，我认为他所衡量的，本质上是 “大企业的规模成本”。我自己也有过类似经历，他给出的数字听起来很合理 —— 大公司似乎有一种特质，总能慢慢耗尽你的精力。</p><p>Imagine what all that energy could do if it were put to use. There is an enormous latent capacity in the world’s hackers that most people don’t even realize is there. That’s the main reason we do Y Combinator: to let loose all this energy by making it easy for hackers to start their own startups.试想一下，如果这些被耗尽的精力能被充分利用，会产生多大的价值。全球的技术极客（hackers）身上蕴藏着巨大的潜在能力，而大多数人甚至没有意识到这一点。这正是我们创办 Y Combinator 的主要原因：通过降低技术极客创办初创公司的门槛，释放他们身上的所有能量。</p><p>A Series of Tubes一系列管道（比喻初创公司创办流程）</p><p>The process of starting startups is currently like the plumbing in an old house. The pipes are narrow and twisty, and there are leaks in every joint. In the future this mess will gradually be replaced by a single, huge pipe. The water will still have to get from A to B, but it will get there faster and without the risk of spraying out through some random leak.目前，创办初创公司的流程就像老房子的水管系统：管道狭窄又蜿蜒，每个接口都有漏水问题。未来，这种混乱的状况将逐渐被一根单一的、巨大的管道取代。水流（比喻初创公司的创办进程）仍然需要从 A 点流到 B 点，但速度会快得多，也不会有 “从某个随机漏洞喷溅而出” 的风险。</p><p>This will change a lot of things for the better. In a big, straight pipe like that, the force of being measured by one’s performance will propagate back through the whole system. Performance is always the ultimate test, but there are so many kinks in the plumbing now that most people are insulated from it most of the time. So you end up with a world in which high school students think they need to get good grades to get into elite colleges, and college students think they need to get good grades to impress employers, within which the employees waste most of their time in political battles, and from which consumers have to buy anyway because there are so few choices. Imagine if that sequence became a big, straight pipe. Then the effects of being measured by performance would propagate all the way back to high school, flushing out all the arbitrary stuff people are measured by now. That is the future of web startups.这将给很多事情带来积极改变。在这样一根通畅笔直的大管道中，“以业绩为核心的衡量标准” 将产生一种力量，反向传导至整个系统。业绩本应是最终的检验标准，但如今的 “水管系统” 中存在太多阻碍，导致大多数人在大多数时候都不受这一标准的影响。于是，我们最终看到的世界是：高中生认为必须考高分才能进入顶尖大学，大学生认为必须考高分才能打动雇主，而公司员工则把大部分时间浪费在办公室政治斗争中，消费者因为选择太少，只能被动购买产品。试想，如果这个链条变成一根通畅笔直的 “大管道”，那么 “以业绩为衡量标准” 的影响将一路传导回高中阶段，清除如今那些随意设定的衡量标准（如单纯的分数）。这，就是网络初创公司的未来。</p><p>Thanks to Brian Oberkirch and Simon Willison for inviting me to speak, and the crew at Carson Systems for making everything run smoothly.感谢布莱恩・奥伯基希（Brian Oberkirch）和西蒙・威利森（Simon Willison）邀请我发表演讲，也感谢卡森系统公司（Carson Systems）的团队确保一切顺利进行。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何研究哲学</title>
    <link href="/2025/09/29/how-to-do-philosophy/"/>
    <url>/2025/09/29/how-to-do-philosophy/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-Do-Philosophy"><a href="#How-to-Do-Philosophy" class="headerlink" title="How to Do Philosophy"></a>How to Do Philosophy</h1><h1 id="如何研究哲学"><a href="#如何研究哲学" class="headerlink" title="如何研究哲学"></a>如何研究哲学</h1><p>原文链接: <a href="https://paulgraham.com/philosophy.html">https://paulgraham.com/philosophy.html</a></p><p>September 2007</p><p>In high school I decided I was going to study philosophy in college. I had several motives, some more honorable than others. One of the less honorable was to shock people. College was regarded as job training where I grew up, so studying philosophy seemed an impressively impractical thing to do. Sort of like slashing holes in your clothes or putting a safety pin through your ear, which were other forms of impressive impracticality then just coming into fashion.高中时，我决定大学要学哲学。我有几个动机，有的更体面，有的则不然。其中不太体面的一个，是想让别人感到震惊。在我成长的环境里，大学被视作职业培训的场所，所以学哲学似乎是一件刻意显得不切实际的事 —— 有点像在衣服上划洞，或是用安全别针穿耳朵，这些当时刚流行起来的做法，也同样是 “刻意不切实际” 的代表。</p><p>But I had some more honest motives as well. I thought studying philosophy would be a shortcut straight to wisdom. All the people majoring in other things would just end up with a bunch of domain knowledge. I would be learning what was really what.但我也有一些更真诚的动机。我当时认为，学哲学是直达智慧的捷径。其他专业的学生最终只会掌握一堆领域知识，而我能学到事物的本质。</p><p>I’d tried to read a few philosophy books. Not recent ones; you wouldn’t find those in our high school library. But I tried to read Plato and Aristotle. I doubt I believed I understood them, but they sounded like they were talking about something important. I assumed I’d learn what in college.我试着读过几本哲学书，不是近年的著作 —— 高中图书馆里根本找不到那些。但我尝试读了柏拉图和亚里士多德的作品。我不确定自己是否真的看懂了，但他们的文字听起来像是在探讨重要的事情。我想，到了大学我就能搞明白了。</p><p>The summer before senior year I took some college classes. I learned a lot in the calculus class, but I didn’t learn much in Philosophy 101. And yet my plan to study philosophy remained intact. It was my fault I hadn’t learned anything. I hadn’t read the books we were assigned carefully enough. I’d give Berkeley’s Principles of Human Knowledge another shot in college. Anything so admired and so difficult to read must have something in it, if one could only figure out what.高三前的那个夏天，我修了几门大学课程。微积分课上学到了很多，但 “哲学导论”（Philosophy 101）却没什么收获。即便如此，我学哲学的计划依然没有改变。我觉得没学到东西是自己的问题 —— assigned 的书我没认真读。到了大学，我要再试试读贝克莱的《人类知识原理》。一部被如此推崇又如此难懂的著作，只要能搞明白它讲了什么，里面肯定有深意。</p><p>Twenty-six years later, I still don’t understand Berkeley. I have a nice edition of his collected works. Will I ever read it? Seems unlikely.26 年后的今天，我还是没读懂贝克莱。我有一套装帧精美的他的全集，但我真的会去读吗？恐怕不太可能。</p><p>The difference between then and now is that now I understand why Berkeley is probably not worth trying to understand. I think I see now what went wrong with philosophy, and how we might fix it.如今和当年的区别在于，我现在明白了为什么贝克莱或许根本不值得去读懂。我想我终于看清了哲学的问题出在哪里，也知道该如何修正。</p><h2 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h2><h2 id="语言的问题"><a href="#语言的问题" class="headerlink" title="语言的问题"></a>语言的问题</h2><p>I did end up being a philosophy major for most of college. It didn’t work out as I’d hoped. I didn’t learn any magical truths compared to which everything else was mere domain knowledge. But I do at least know now why I didn’t. Philosophy doesn’t really have a subject matter in the way math or history or most other university subjects do. There is no core of knowledge one must master. The closest you come to that is a knowledge of what various individual philosophers have said about different topics over the years. Few were sufficiently correct that people have forgotten who discovered what they discovered.大学大部分时间里，我确实是哲学专业的学生。但结果却不如我所愿 —— 我并没有学到什么 “神奇的真理”，能让其他所有知识都显得只是 “领域常识”。不过，我至少现在明白为什么会这样了：哲学并不像数学、历史或其他大多数大学学科那样，有明确的研究对象。它没有一套必须掌握的核心知识体系，最接近 “核心” 的，不过是了解多年来不同哲学家对各类话题的观点。而这些观点中，很少有足够正确、以至于人们会忘记其提出者的（就像科学发现中，人们常会忘记发现者是谁，只记得成果本身）。</p><p>Formal logic has some subject matter. I took several classes in logic. I don’t know if I learned anything from them. [1] It does seem to me very important to be able to flip ideas around in one’s head: to see when two ideas don’t fully cover the space of possibilities, or when one idea is the same as another but with a couple things changed. But did studying logic teach me the importance of thinking this way, or make me any better at it? I don’t know.形式逻辑倒是有明确的研究对象。我修过好几门逻辑学课程，但不确定自己有没有从中学到什么。[1] 我确实觉得，能在脑子里灵活梳理想法很重要 —— 比如发现两个观点并未完全涵盖所有可能性，或是察觉到某个观点其实和另一个观点本质相同，只是微调了几个细节。但这种思考方式的重要性，是逻辑学教我的吗？它有让我更擅长这种思考吗？我不确定。</p><p>There are things I know I learned from studying philosophy. The most dramatic I learned immediately, in the first semester of freshman year, in a class taught by Sydney Shoemaker. I learned that I don’t exist. I am (and you are) a collection of cells that lurches around driven by various forces, and calls itself I. But there’s no central, indivisible thing that your identity goes with. You could conceivably lose half your brain and live. Which means your brain could conceivably be split into two halves and each transplanted into different bodies. Imagine waking up after such an operation. You have to imagine being two people.不过，有些东西我很清楚是从哲学学习中得来的。最震撼的一个认知，是在大一第一学期，从西德尼・舒梅克教授的课上学到的：我不存在。我（包括你）不过是一堆细胞的集合，在各种力量的驱动下四处活动，还自称为 “我”。但并不存在一个核心的、不可分割的实体，与你的 “身份” 绑定。可以想见，即使失去半个大脑，你仍能存活。这意味着，你的大脑理论上可以被分成两半，分别移植到不同的身体里。想象一下，这样的手术后醒来，你得同时想象自己是两个人。</p><p>The real lesson here is that the concepts we use in everyday life are fuzzy, and break down if pushed too hard. Even a concept as dear to us as I. It took me a while to grasp this, but when I did it was fairly sudden, like someone in the nineteenth century grasping evolution and realizing the story of creation they’d been told as a child was all wrong. [2] Outside of math there’s a limit to how far you can push words; in fact, it would not be a bad definition of math to call it the study of terms that have precise meanings. Everyday words are inherently imprecise. They work well enough in everyday life that you don’t notice. Words seem to work, just as Newtonian physics seems to. But you can always make them break if you push them far enough.这里真正的启示是：我们日常生活中使用的概念都是模糊不清的，要是过分深究，这些概念就会站不住脚 —— 即便像 “我” 这样对我们至关重要的概念也是如此。我花了一段时间才理解这一点，但一旦想通，就像顿悟一样 —— 好比 19 世纪有人理解了进化论，突然意识到小时候听过的创世故事全是错的。[2] 除了数学领域，语言的 “深究” 是有极限的；事实上，把数学定义为 “对具有精确含义的术语的研究”，也不算离谱。日常语言本质上是不精确的，只是在日常生活中够用，所以我们察觉不到。语言看似有效，就像牛顿物理看似有效一样，但只要深究到一定程度，总能发现它的漏洞。</p><p>I would say that this has been, unfortunately for philosophy, the central fact of philosophy. Most philosophical debates are not merely afflicted by but driven by confusions over words. Do we have free will? Depends what you mean by “free.” Do abstract ideas exist? Depends what you mean by “exist.”遗憾的是，对哲学而言，这恰恰是它的核心问题：大多数哲学辩论不仅受语言困惑的困扰，甚至是由语言困惑驱动的。我们有自由意志吗？这取决于 “自由” 是什么意思。抽象概念存在吗？这取决于 “存在” 是什么意思。</p><p>Wittgenstein is popularly credited with the idea that most philosophical controversies are due to confusions over language. I’m not sure how much credit to give him. I suspect a lot of people realized this, but reacted simply by not studying philosophy, rather than becoming philosophy professors.人们通常认为，维特根斯坦提出了 “大多数哲学争议源于语言困惑” 这一观点。但我不确定该给他多少赞誉。我猜很多人都意识到了这一点，只是他们的反应是 “不学哲学”，而不是 “成为哲学教授”。</p><p>How did things get this way? Can something people have spent thousands of years studying really be a waste of time? Those are interesting questions. In fact, some of the most interesting questions you can ask about philosophy. The most valuable way to approach the current philosophical tradition may be neither to get lost in pointless speculations like Berkeley, nor to shut them down like Wittgenstein, but to study it as an example of reason gone wrong.事情怎么会变成这样？一件人类研究了数千年的事物，难道真的是在浪费时间？这些问题很有意思，实际上，它们是关于哲学最值得探讨的问题之一。面对当下的哲学传统，最有价值的态度或许既不是像研究贝克莱那样陷入无意义的思辨，也不是像维特根斯坦那样彻底否定它，而是把它当作 “理性走入误区” 的案例来研究。</p><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><h2 id="哲学的历史"><a href="#哲学的历史" class="headerlink" title="哲学的历史"></a>哲学的历史</h2><p>Western philosophy really begins with Socrates, Plato, and Aristotle. What we know of their predecessors comes from fragments and references in later works; their doctrines could be described as speculative cosmology that occasionally strays into analysis. Presumably they were driven by whatever makes people in every other society invent cosmologies. [3]西方哲学的真正开端是苏格拉底、柏拉图和亚里士多德。我们对他们之前的哲学家的了解，仅来自后世著作中的片段和提及；这些早期哲学家的学说，可以被描述为 “思辨性宇宙论”，只是偶尔会涉及分析。他们的动机，大概和其他文明中人们创造宇宙论的动机一样（即试图解释世界的起源和本质）。[3]</p><p>With Socrates, Plato, and particularly Aristotle, this tradition turned a corner. There started to be a lot more analysis. I suspect Plato and Aristotle were encouraged in this by progress in math. Mathematicians had by then shown that you could figure things out in a much more conclusive way than by making up fine sounding stories about them. [4]到了苏格拉底、柏拉图，尤其是亚里士多德这里，这一传统迎来了转折 —— 分析的成分开始大幅增加。我猜想，柏拉图和亚里士多德之所以重视分析，受到了数学发展的启发。当时的数学家已经证明，要理解事物，有一种比 “编动听故事” 更具说服力的方法。[4]</p><p>People talk so much about abstractions now that we don’t realize what a leap it must have been when they first started to. It was presumably many thousands of years between when people first started describing things as hot or cold and when someone asked “what is heat?” No doubt it was a very gradual process. We don’t know if Plato or Aristotle were the first to ask any of the questions they did. But their works are the oldest we have that do this on a large scale, and there is a freshness (not to say naivete) about them that suggests some of the questions they asked were new to them, at least.现在人们对抽象概念的讨论已经习以为常，以至于我们意识不到，人类第一次开始探讨抽象概念时，是多么大的突破。从人们第一次用 “热” 或 “冷” 描述事物，到有人提出 “热是什么？”，这中间可能间隔了数千年。毫无疑问，这是一个非常缓慢的过程。我们不知道柏拉图或亚里士多德是否是第一个提出他们那些问题的人，但他们的著作是我们现存最早的、大规模探讨这类问题的文献。而且，这些著作中透着一种新鲜感（甚至可以说是天真），至少说明他们提出的某些问题，对他们自己而言也是全新的。</p><p>Aristotle in particular reminds me of the phenomenon that happens when people discover something new, and are so excited by it that they race through a huge percentage of the newly discovered territory in one lifetime. If so, that’s evidence of how new this kind of thinking was. [5]亚里士多德尤其让我想到一种现象：当人们发现新事物时，会因兴奋而在一生中快速探索这片新领域的大部分内容。如果真是这样，那就证明这种思考方式在当时是多么新颖。[5]</p><p>This is all to explain how Plato and Aristotle can be very impressive and yet naive and mistaken. It was impressive even to ask the questions they did. That doesn’t mean they always came up with good answers. It’s not considered insulting to say that ancient Greek mathematicians were naive in some respects, or at least lacked some concepts that would have made their lives easier. So I hope people will not be too offended if I propose that ancient philosophers were similarly naive. In particular, they don’t seem to have fully grasped what I earlier called the central fact of philosophy: that words break if you push them too far.说这些，都是为了解释为什么柏拉图和亚里士多德既令人钦佩，又带着天真和谬误。仅仅是提出他们那些问题，就已经很了不起了，但这并不意味着他们总能给出好答案。说古希腊数学家在某些方面很天真，或者至少缺乏一些能让他们研究更顺利的概念，没人会觉得这是冒犯。所以，我若说古代哲学家也同样天真，希望大家不要太反感。尤其是，他们似乎没有完全理解我之前提到的哲学核心问题：语言一旦被过分深究，就会漏洞百出。</p><p>“Much to the surprise of the builders of the first digital computers,” Rod Brooks wrote, “programs written for them usually did not work.” [6] Something similar happened when people first started trying to talk about abstractions. Much to their surprise, they didn’t arrive at answers they agreed upon. In fact, they rarely seemed to arrive at answers at all.罗德・布鲁克斯曾写道：“令早期数字计算机的建造者们大为惊讶的是，为这些计算机编写的程序通常无法运行。”[6] 人们第一次尝试探讨抽象概念时，也发生了类似的事：让他们万万没想到的是，他们始终无法达成一致的答案，甚至连答案本身都很少能得出。</p><p>They were in effect arguing about artifacts induced by sampling at too low a resolution.实际上，他们争论的不过是 “因采样分辨率过低而产生的失真现象”（就像低像素图片会出现模糊或杂色，用不精确的语言探讨抽象概念，也会产生无意义的争议）。</p><p>The proof of how useless some of their answers turned out to be is how little effect they have. No one after reading Aristotle’s Metaphysics does anything differently as a result. [7]他们的某些答案有多无用，证据就在于这些答案几乎没有任何实际影响。没人会因为读了亚里士多德的《形而上学》，就改变自己的行为方式。[7]</p><p>Surely I’m not claiming that ideas have to have practical applications to be interesting? No, they may not have to. Hardy’s boast that number theory had no use whatsoever wouldn’t disqualify it. But he turned out to be mistaken. In fact, it’s suspiciously hard to find a field of math that truly has no practical use. And Aristotle’s explanation of the ultimate goal of philosophy in Book A of the Metaphysics implies that philosophy should be useful too.显然，我并不是说思想必须有实际应用才有吸引力吧？没错，思想未必需要实际应用。哈代曾宣称数论毫无用处，但这一点并不会让数论失去价值 —— 不过事实证明，他的这个说法是错误的。实际上，要找到一个真正毫无实际用途的数学领域，出奇地困难。而且，亚里士多德在《形而上学》第一卷中对哲学终极目标的阐释，也暗示哲学应当是有用的。</p><h2 id="Theoretical-Knowledge"><a href="#Theoretical-Knowledge" class="headerlink" title="Theoretical Knowledge"></a>Theoretical Knowledge</h2><h2 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h2><p>Aristotle’s goal was to find the most general of general principles. The examples he gives are convincing: an ordinary worker builds things a certain way out of habit; a master craftsman can do more because he grasps the underlying principles. The trend is clear: the more general the knowledge, the more admirable it is. But then he makes a mistake—possibly the most important mistake in the history of philosophy. He has noticed that theoretical knowledge is often acquired for its own sake, out of curiosity, rather than for any practical need. So he proposes there are two kinds of theoretical knowledge: some that’s useful in practical matters and some that isn’t. Since people interested in the latter are interested in it for its own sake, it must be more noble. So he sets as his goal in the Metaphysics the exploration of knowledge that has no practical use. Which means no alarms go off when he takes on grand but vaguely understood questions and ends up getting lost in a sea of words.亚里士多德的目标是找到 “最具普遍性的普遍原理”。他举的例子颇具说服力：普通工匠会习惯性地用某种方式造物；而大师级工匠之所以能做得更多更好，是因为他掌握了背后的原理。趋势很明显：知识的普遍性越强，就越值得推崇。但接下来他犯了一个错误 —— 或许是哲学史上最为重要的错误。他注意到，人们获取理论知识往往是为了知识本身，出于好奇心，而非出于任何实际需求。于是他提出，理论知识可分为两类：一类在实际事务中有用，另一类则无用。由于对后一类知识感兴趣的人是为了知识本身而追求它，这类知识就必然更 “崇高”。因此，他在《形而上学》中将 “探索无用的知识” 定为目标。这就意味着，当他着手研究那些宏大却模糊不清的问题、最终陷入语言的汪洋时，他丝毫没有意识到问题所在。</p><p>His mistake was to confuse motive and result. Certainly, people who want a deep understanding of something are often driven by curiosity rather than any practical need. But that doesn’t mean what they end up learning is useless. It’s very valuable in practice to have a deep understanding of what you’re doing; even if you’re never called on to solve advanced problems, you can see shortcuts in the solution of simple ones, and your knowledge won’t break down in edge cases, as it would if you were relying on formulas you didn’t understand. Knowledge is power. That’s what makes theoretical knowledge prestigious. It’s also what causes smart people to be curious about certain things and not others; our DNA is not so disinterested as we might think.亚里士多德的错误在于混淆了动机与结果。诚然，想要深入理解某件事的人，其动力往往是好奇心，而非实际需求，但这并不意味着他们最终学到的知识是无用的。在实践中，深入理解自己所做的事极具价值：即便你从未被要求解决复杂问题，也能在解决简单问题时找到捷径；而且你的知识不会像依赖自己不懂的公式那样，在特殊情况下 “失效”。知识就是力量 —— 这正是理论知识之所以有分量的原因，也是聪明人会对某些事物（而非其他事物）产生好奇的原因；我们的基因并不像我们可能认为的那样 “无私”（意即人类的好奇心本质上仍与生存、发展等实际需求相关）。</p><p>So while ideas don’t have to have immediate practical applications to be interesting, the kinds of things we find interesting will surprisingly often turn out to have practical applications.因此，尽管思想未必需要有即时的实际应用才有吸引力，但我们感兴趣的事物，往往会出人意料地最终展现出实际用途。</p><p>The reason Aristotle didn’t get anywhere in the Metaphysics was partly that he set off with contradictory aims: to explore the most abstract ideas, guided by the assumption that they were useless. He was like an explorer looking for a territory to the north of him, starting with the assumption that it was located to the south.亚里士多德在《形而上学》中毫无进展，部分原因在于他一开始就抱着相互矛盾的目标：既要探索最抽象的思想，又受 “这些思想无用” 的预设所引导。这就像一位探险家要寻找位于他北边的领地，却从 “这片领地在南边” 的预设出发。</p><p>And since his work became the map used by generations of future explorers, he sent them off in the wrong direction as well. [8] Perhaps worst of all, he protected them from both the criticism of outsiders and the promptings of their own inner compass by establishing the principle that the most noble sort of theoretical knowledge had to be useless.而且，由于他的著作成了后世数代 “探险家”（指哲学家）的地图，他也把这些人引上了歧途。[8] 或许最糟糕的是，他确立了 “最崇高的理论知识必然无用” 这一原则，这不仅让他们免受外界的批评，还屏蔽了他们内心的 “指南针”（指对知识实用性的直觉判断）。</p><p>The Metaphysics is mostly a failed experiment. A few ideas from it turned out to be worth keeping; the bulk of it has had no effect at all. The Metaphysics is among the least read of all famous books. It’s not hard to understand the way Newton’s Principia is, but the way a garbled message is.《形而上学》大体上是一次失败的尝试。其中只有少数观点被证明值得保留，绝大部分内容则毫无影响。在所有经典著作中，《形而上学》是读者最少的作品之一。它的难懂，并非像牛顿的《自然哲学的数学原理》那样因思想深奥而难懂，而是像一段混乱的信息那样因表达晦涩而难懂。</p><p>Arguably it’s an interesting failed experiment. But unfortunately that was not the conclusion Aristotle’s successors derived from works like the Metaphysics. [9] Soon after, the western world fell on intellectual hard times. Instead of version 1s to be superseded, the works of Plato and Aristotle became revered texts to be mastered and discussed. And so things remained for a shockingly long time. It was not till around 1600 (in Europe, where the center of gravity had shifted by then) that one found people confident enough to treat Aristotle’s work as a catalog of mistakes. And even then they rarely said so outright.或许可以说，这是一次有趣的失败尝试。但不幸的是，亚里士多德的继承者们从《形而上学》这类著作中得出的并非这一结论。[9] 不久之后，西方世界陷入了知识发展的困境。柏拉图和亚里士多德的著作没有被视为 “需要被后续版本取代的 1.0 版”，反而成了需要被掌握和讨论的 “神圣文本”。这种状况竟然持续了惊人地漫长的时间。直到 1600 年左右（此时知识重心已转移到欧洲），才有人有足够的信心将亚里士多德的著作视为 “错误合集”—— 即便如此，他们也很少直言不讳地这样说。</p><p>If it seems surprising that the gap was so long, consider how little progress there was in math between Hellenistic times and the Renaissance.如果这个时间跨度让你感到惊讶，不妨想想从希腊化时期到文艺复兴时期，数学领域的进展是多么缓慢。</p><p>In the intervening years an unfortunate idea took hold: that it was not only acceptable to produce works like the Metaphysics, but that it was a particularly prestigious line of work, done by a class of people called philosophers. No one thought to go back and debug Aristotle’s motivating argument. And so instead of correcting the problem Aristotle discovered by falling into it—that you can easily get lost if you talk too loosely about very abstract ideas—they continued to fall into it.在这期间，一个不幸的观念根深蒂固：创作《形而上学》这类著作不仅是可接受的，而且是一种极具声望的工作，由一群名为 “哲学家” 的人来从事。没人想回头去 “调试” 亚里士多德那套核心论证（指 “崇高的理论知识必然无用”）。因此，他们非但没有纠正亚里士多德因陷入误区而发现的问题 —— 即对高度抽象的思想谈论过于随意，就很容易迷失方向 —— 反而继续重蹈覆辙。</p><h2 id="The-Singularity"><a href="#The-Singularity" class="headerlink" title="The Singularity"></a>The Singularity</h2><h2 id="独特现象"><a href="#独特现象" class="headerlink" title="独特现象"></a>独特现象</h2><p>Curiously, however, the works they produced continued to attract new readers. Traditional philosophy occupies a kind of singularity in this respect. If you write in an unclear way about big ideas, you produce something that seems tantalizingly attractive to inexperienced but intellectually ambitious students. Till one knows better, it’s hard to distinguish something that’s hard to understand because the writer was unclear in his own mind from something like a mathematical proof that’s hard to understand because the ideas it represents are hard to understand. To someone who hasn’t learned the difference, traditional philosophy seems extremely attractive: as hard (and therefore impressive) as math, yet broader in scope. That was what lured me in as a high school student.然而奇怪的是，他们创作的这类著作依然不断吸引着新读者。传统哲学在这方面呈现出一种独特现象：如果你用模糊不清的方式谈论宏大思想，写出的东西会对那些缺乏经验但求知欲强烈的学生产生难以抗拒的吸引力。在人们弄明白其中区别之前，很难分辨两种 “难懂”：一种是因作者自身思路混乱而难懂，另一种是像数学证明那样因所表达的思想本身深奥而难懂。对尚未学会区分这两者的人来说，传统哲学极具吸引力 —— 它既像数学一样艰深（因此显得了不起），又比数学涵盖更广。高中时的我，就是被这一点吸引的。</p><p>This singularity is even more singular in having its own defense built in. When things are hard to understand, people who suspect they’re nonsense generally keep quiet. There’s no way to prove a text is meaningless. The closest you can get is to show that the official judges of some class of texts can’t distinguish them from placebos. [10]这种独特现象更奇特之处在于，它自带 “防御机制”。当某样东西难以理解时，怀疑它是无稽之谈的人通常会保持沉默 —— 毕竟没有办法证明一段文本是无意义的。最接近 “证明” 的方式，或许是证明这类文本的 “官方评判者”（指哲学界内部人士）无法区分它们与 “安慰剂”（比喻无实际意义却看似有价值的东西）的区别。[10]</p><p>And so instead of denouncing philosophy, most people who suspected it was a waste of time just studied other things. That alone is fairly damning evidence, considering philosophy’s claims. It’s supposed to be about the ultimate truths. Surely all smart people would be interested in it, if it delivered on that promise.因此，大多数怀疑哲学是浪费时间的人，并没有公开谴责哲学，而是选择去研究其他领域。考虑到哲学所宣称的目标 —— 它本应探讨 “终极真理”—— 这一点本身就是相当有力的不利证据。如果哲学真能实现这个承诺，所有聪明人理应都会对它感兴趣。</p><p>Because philosophy’s flaws turned away the sort of people who might have corrected them, they tended to be self-perpetuating. Bertrand Russell wrote in a letter in 1912:Hitherto the people attracted to philosophy have been mostly those who loved the big generalizations, which were all wrong, so that few people with exact minds have taken up the subject. [11]由于哲学的缺陷赶走了本可能纠正这些缺陷的人（指思路严谨、注重实际的人），这些缺陷往往会自我延续。伯特兰・罗素在 1912 年的一封信中写道：“迄今为止，被哲学吸引的人大多是喜欢宏大概括的人，而这些概括全都是错误的，因此很少有思维严谨的人会投身这一学科。”[11]</p><p>His response was to launch Wittgenstein at it, with dramatic results.罗素的应对之策是让维特根斯坦投身哲学研究，这带来了极具影响力的结果。</p><p>I think Wittgenstein deserves to be famous not for the discovery that most previous philosophy was a waste of time, which judging from the circumstantial evidence must have been made by every smart person who studied a little philosophy and declined to pursue it further, but for how he acted in response. [12] Instead of quietly switching to another field, he made a fuss, from inside. He was Gorbachev.我认为维特根斯坦之所以值得闻名，并非因为他发现 “以往的大部分哲学都是浪费时间”—— 从间接证据来看，任何聪明人设身处地学一点哲学、然后决定不再深入的人，都必然会有这个发现 —— 而是因为他对此采取的行动。[12] 他没有悄悄转向其他领域，而是从哲学内部掀起了波澜。他就像是哲学界的 “戈尔巴乔夫”（比喻打破旧体系的关键人物）。</p><p>The field of philosophy is still shaken from the fright Wittgenstein gave it. [13] Later in life he spent a lot of time talking about how words worked. Since that seems to be allowed, that’s what a lot of philosophers do now. Meanwhile, sensing a vacuum in the metaphysical speculation department, the people who used to do literary criticism have been edging Kantward, under new names like “literary theory,” “critical theory,” and when they’re feeling ambitious, plain “theory.” The writing is the familiar word salad:Gender is not like some of the other grammatical modes which express precisely a mode of conception without any reality that corresponds to the conceptual mode, and consequently do not express precisely something in reality by which the intellect could be moved to conceive a thing the way it does, even where that motive is not something in the thing as such. [14]哲学领域至今仍未从维特根斯坦带来的冲击中完全平复。[13] 晚年时，他花了大量时间探讨语言的运作方式。既然这一方向似乎是被认可的，如今很多哲学家都在做这件事。与此同时，察觉到形而上学思辨领域出现 “真空”，那些原本从事文学批评的人开始向康德的方向靠拢，还给自己贴上了新标签，如 “文学理论”“批判理论”，野心更大时便直接自称 “理论”（指后现代思潮中的 “理论” 学派）。他们的文字还是那种熟悉的 “文字沙拉”（比喻内容混乱、无实际意义的文字堆砌）：“性别不同于其他某些语法模式 —— 那些语法模式精确表达的是一种概念方式，却没有与之对应的现实；因此，即便当这种动机并非事物本身所固有之时，它们也无法精确表达现实中的某种东西，而正是这种东西能促使理智以特定方式去构想事物。”[14]</p><p>The singularity I’ve described is not going away. There’s a market for writing that sounds impressive and can’t be disproven. There will always be both supply and demand. So if one group abandons this territory, there will always be others ready to occupy it.我所描述的这种独特现象不会消失。“听起来了不起且无法被证伪” 的文字有其市场，这种需求和供给总会存在。因此，即便有一个群体放弃了这块 “领地”，也总会有其他群体准备占据它。</p><h2 id="A-Proposal"><a href="#A-Proposal" class="headerlink" title="A Proposal"></a>A Proposal</h2><h2 id="一种建议"><a href="#一种建议" class="headerlink" title="一种建议"></a>一种建议</h2><p>We may be able to do better. Here’s an intriguing possibility. Perhaps we should do what Aristotle meant to do, instead of what he did. The goal he announces in the Metaphysics seems one worth pursuing: to discover the most general truths. That sounds good. But instead of trying to discover them because they’re useless, let’s try to discover them because they’re useful.我们或许能做得更好。有一种有趣的可能性：或许我们应该去做亚里士多德 “本想做的事”，而非他 “实际做的事”。他在《形而上学》中宣称的目标 —— 发现 “最具普遍性的真理”—— 似乎值得追求，这听起来不错。但我们不应因为 “这些真理无用” 而去探索它们，而应因为 “这些真理有用” 去探索。</p><p>I propose we try again, but that we use that heretofore despised criterion, applicability, as a guide to keep us from wondering off into a swamp of abstractions. Instead of trying to answer the question:What are the most general truths?let’s try to answer the questionOf all the useful things we can say, which are the most general?The test of utility I propose is whether we cause people who read what we’ve written to do anything differently afterward. Knowing we have to give definite (if implicit) advice will keep us from straying beyond the resolution of the words we’re using.我建议我们重新尝试，但这次要把 “实用性”—— 这个迄今为止被轻视的标准 —— 作为指引，避免自己陷入抽象概念的泥潭。我们不应再试图回答这样的问题：“最具普遍性的真理是什么？”而应尝试回答：“在所有我们能提出的有用观点中，哪些具有最广泛的普遍性？”我所提出的 “实用性检验标准” 是：我们写下的内容，是否能让读者在读完后做出不同的行为。明确自己必须给出确切（即便含蓄）的建议，将防止我们的讨论超出所用语言的 “分辨率范围”（即避免因语言精度不足而陷入无意义思辨）。</p><p>The goal is the same as Aristotle’s; we just approach it from a different direction.我们的目标与亚里士多德的目标一致，只是选择了不同的路径。</p><p>As an example of a useful, general idea, consider that of the controlled experiment. There’s an idea that has turned out to be widely applicable. Some might say it’s part of science, but it’s not part of any specific science; it’s literally meta-physics (in our sense of “meta”). The idea of evolution is another. It turns out to have quite broad applications—for example, in genetic algorithms and even product design. Frankfurt’s distinction between lying and bullshitting seems a promising recent example. [15]“对照实验” 就是一个兼具实用性与普遍性的观点案例，它已被证明具有广泛的适用性。有人可能会说它属于科学范畴，但它并不隶属于任何一门特定科学；从字面意义上讲，它是 “元物理学”（符合我们对 “元” 的理解，即超越具体学科的底层方法）。“进化论” 是另一个例子，它的应用范围同样广泛 —— 例如在遗传算法，甚至产品设计领域。法兰克福对 “说谎” 与 “胡说” 的区分，则是近年来一个颇具潜力的案例。[15]</p><p>These seem to me what philosophy should look like: quite general observations that would cause someone who understood them to do something differently.在我看来，这才是哲学应有的样子：提出具有高度普遍性的洞见，让理解这些洞见的人做出不同的行为。</p><p>Such observations will necessarily be about things that are imprecisely defined. Once you start using words with precise meanings, you’re doing math. So starting from utility won’t entirely solve the problem I described above—it won’t flush out the metaphysical singularity. But it should help. It gives people with good intentions a new roadmap into abstraction. And they may thereby produce things that make the writing of the people with bad intentions look bad by comparison.这类洞见所探讨的对象，必然是定义不够精确的事物。一旦你开始使用含义精确的术语，你所做的就成了数学。因此，从实用性出发无法完全解决我之前描述的问题 —— 无法彻底消除 “形而上学独特现象”（即模糊文字带来的虚假吸引力）。但它肯定会有所帮助：它为心怀善意的研究者提供了一份探索抽象概念的新路线图，而他们产出的成果，或许能让那些别有用心者的文字相形见绌。</p><p>One drawback of this approach is that it won’t produce the sort of writing that gets you tenure. And not just because it’s not currently the fashion. In order to get tenure in any field you must not arrive at conclusions that members of tenure committees can disagree with. In practice there are two kinds of solutions to this problem. In math and the sciences, you can prove what you’re saying, or at any rate adjust your conclusions so you’re not claiming anything false (“6 of 8 subjects had lower blood pressure after the treatment”). In the humanities you can either avoid drawing any definite conclusions (e.g. conclude that an issue is a complex one), or draw conclusions so narrow that no one cares enough to disagree with you.这种研究方法有一个缺点：它无法产出能帮你获得终身教职的成果。这不仅仅是因为它目前不流行，更核心的原因在于：在任何领域，要获得终身教职，你得出的结论都不能让评审委员会成员产生分歧。实际上，解决这个问题有两种常见方式：在数学和科学领域，你可以证明自己的观点，或者至少调整结论，避免做出错误断言（例如 “8 名受试者中有 6 人在接受治疗后血压降低”）；在人文学科领域，你要么避免得出任何确切结论（比如宣称 “某个问题十分复杂”），要么得出极其狭隘的结论，以至于没人在意去反驳你。</p><p>The kind of philosophy I’m advocating won’t be able to take either of these routes. At best you’ll be able to achieve the essayist’s standard of proof, not the mathematician’s or the experimentalist’s. And yet you won’t be able to meet the usefulness test without implying definite and fairly broadly applicable conclusions. Worse still, the usefulness test will tend to produce results that annoy people: there’s no use in telling people things they already believe, and people are often upset to be told things they don’t.我所倡导的这种哲学，无法走上述任何一条路。你最多只能达到 “随笔作家” 的论证标准，而非数学家或实验科学家的标准。但要满足 “实用性检验”，你又必须隐含确切且具有较强普适性的结论。更糟糕的是，“实用性检验” 往往会得出令人不快的结果：告诉人们他们早已相信的事毫无意义，而告诉他们不愿相信的事，又常会惹他们不快。</p><p>Here’s the exciting thing, though. Anyone can do this. Getting to general plus useful by starting with useful and cranking up the generality may be unsuitable for junior professors trying to get tenure, but it’s better for everyone else, including professors who already have it. This side of the mountain is a nice gradual slope. You can start by writing things that are useful but very specific, and then gradually make them more general. Joe’s has good burritos. What makes a good burrito? What makes good food? What makes anything good? You can take as long as you want. You don’t have to get all the way to the top of the mountain. You don’t have to tell anyone you’re doing philosophy.但令人兴奋的是，任何人都能从事这种哲学研究。从 “有用的具体观点” 出发，逐步提升其普遍性，最终得到 “兼具普遍性与实用性的观点”—— 这种路径或许不适合试图获得终身教职的青年教授，但对其他人（包括已获得终身教职的教授）来说都更为有益。这条路径就像山的缓坡，易于攀登：你可以先从撰写 “有用但高度具体” 的内容开始，再逐步提升其普遍性。比如，从 “乔伊家的墨西哥卷饼很好吃”，到 “什么样的墨西哥卷饼才算好吃”，再到 “什么样的食物才算好吃”，最后到 “如何判断任何事物是否‘好’”。你可以按自己的节奏推进，不必非要爬到山顶，也不必告诉任何人你在研究哲学。</p><p>If it seems like a daunting task to do philosophy, here’s an encouraging thought. The field is a lot younger than it seems. Though the first philosophers in the western tradition lived about 2500 years ago, it would be misleading to say the field is 2500 years old, because for most of that time the leading practitioners weren’t doing much more than writing commentaries on Plato or Aristotle while watching over their shoulders for the next invading army. In the times when they weren’t, philosophy was hopelessly intermingled with religion. It didn’t shake itself free till a couple hundred years ago, and even then was afflicted by the structural problems I’ve described above. If I say this, some will say it’s a ridiculously overbroad and uncharitable generalization, and others will say it’s old news, but here goes: judging from their works, most philosophers up to the present have been wasting their time. So in a sense the field is still at the first step. [16]如果研究哲学看起来是一项艰巨的任务，不妨想想这个令人鼓舞的事实：这一领域远比表面上看起来年轻。尽管西方传统中的第一批哲学家生活在约 2500 年前，但说 “哲学已有 2500 年历史” 是有误导性的 —— 因为在这 2500 年的大部分时间里，主流研究者除了撰写对柏拉图或亚里士多德的评论，同时提防下一支入侵军队外，几乎没做什么别的事。而在不做这些事的时期，哲学又与宗教纠缠不清，难以分割。直到几百年前，哲学才摆脱宗教的束缚，但即便如此，它仍受限于我之前描述的结构性问题（如语言模糊、脱离实用性等）。我知道，这样说可能会有人认为这是荒谬的过度概括、不够公允，也有人会说这是老生常谈，但我还是要指出：从他们的著作来看，至今大多数哲学家都在浪费时间。因此，从某种意义上说，这一领域仍处于起步阶段。[16]</p><p>That sounds a preposterous claim to make. It won’t seem so preposterous in 10,000 years. Civilization always seems old, because it’s always the oldest it’s ever been. The only way to say whether something is really old or not is by looking at structural evidence, and structurally philosophy is young; it’s still reeling from the unexpected breakdown of words.这个观点听起来可能很荒谬，但在一万年后来看，它就不会显得如此荒谬了。文明总是显得古老，因为它永远处于 “自身历史中最古老的时刻”。判断一个领域是否真的 “古老”，唯一的方法是看其结构性发展 —— 从结构上看，哲学仍很年轻，它仍在为 “语言意外失效”（即过度深究导致语言失去意义）的问题而困惑。</p><p>Philosophy is as young now as math was in 1500. There is a lot more to discover.如今的哲学，就像 1500 年的数学一样年轻，还有大量的东西有待发现。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>[1] In practice formal logic is not much use, because despite some progress in the last 150 years we’re still only able to formalize a small percentage of statements. We may never do that much better, for the same reason 1980s-style “knowledge representation” could never have worked; many statements may have no representation more concise than a huge, analog brain state.[1] 实际上，形式逻辑没什么用处。尽管过去 150 年来它有了一些发展，但我们仍只能将极少数陈述转化为形式化语言。我们或许永远无法在这方面取得更大突破，原因与 20 世纪 80 年代的 “知识表征” 理论无法奏效相同：许多陈述的表征方式，可能并不比庞大的模拟大脑状态更简洁（即无法用简洁的形式化语言精准捕捉其含义）。</p><p>[2] It was harder for Darwin’s contemporaries to grasp this than we can easily imagine. The story of creation in the Bible is not just a Judeo-Christian concept; it’s roughly what everyone must have believed since before people were people. The hard part of grasping evolution was to realize that species weren’t, as they seem to be, unchanging, but had instead evolved from different, simpler organisms over unimaginably long periods of time.Now we don’t have to make that leap. No one in an industrialized country encounters the idea of evolution for the first time as an adult. Everyone’s taught about it as a child, either as truth or heresy.[2] 达尔文的同时代人理解进化论的难度，远超我们的想象。《圣经》中的创世故事不仅是犹太 - 基督教概念，几乎在人类诞生之初，所有人就都相信类似的创世叙事。理解进化论的难点在于：要意识到物种并非如其表面所见那般永恒不变，而是在难以想象的漫长时间里，从不同的简单生物进化而来。如今我们无需再完成这样的认知跨越。在工业化国家，没有人会在成年后才第一次接触进化论 —— 每个人在童年时期就会学到它，无论被当作真理还是异端。</p><p>[3] Greek philosophers before Plato wrote in verse. This must have affected what they said. If you try to write about the nature of the world in verse, it inevitably turns into incantation. Prose lets you be more precise, and more tentative.[3] 柏拉图之前的希腊哲学家都用诗歌写作，这必然影响了他们的表达。若试图用诗歌描述世界的本质，文字难免会变成咒语般的吟唱；而散文则能让表达更精准，也更具试探性（便于修正和完善观点）。</p><p>[4] Philosophy is like math’s ne’er-do-well brother. It was born when Plato and Aristotle looked at the works of their predecessors and said in effect “why can’t you be more like your brother?” Russell was still saying the same thing 2300 years later.Math is the precise half of the most abstract ideas, and philosophy the imprecise half. It’s probably inevitable that philosophy will suffer by comparison, because there’s no lower bound to its precision. Bad math is merely boring, whereas bad philosophy is nonsense. And yet there are some good ideas in the imprecise half.[4] 哲学就像数学那个不成器的兄弟。它的 “诞生”，源于柏拉图和亚里士多德看着前辈的著作，实则在说 “你就不能学学你兄弟（数学）吗？”2300 年后，罗素仍在重复类似的话。数学是 “最抽象思想” 中精准的一半，而哲学是其中不精准的一半。相比之下，哲学难免显得逊色，因为它的精准度没有下限：糟糕的数学只是枯燥，而糟糕的哲学则是无稽之谈。但即便在这 “不精准的一半” 中，仍存在一些有价值的观点。</p><p>[5] Aristotle’s best work was in logic and zoology, both of which he can be said to have invented. But the most dramatic departure from his predecessors was a new, much more analytical style of thinking. He was arguably the first scientist.[5] 亚里士多德最杰出的成就集中在逻辑学和动物学领域，甚至可以说这两门学科都是他开创的。但与前辈相比，他最大的突破在于开创了一种全新的、更具分析性的思考方式 —— 他或许称得上是史上第一位科学家。</p><p>[6] Brooks, Rodney, Programming in Common Lisp, Wiley, 1985, p. 94.[6] 罗德・布鲁克斯，《Common Lisp 编程》，威利出版社，1985 年，第 94 页。</p><p>[7] Some would say we depend on Aristotle more than we realize, because his ideas were one of the ingredients in our common culture. Certainly a lot of the words we use have a connection with Aristotle, but it seems a bit much to suggest that we wouldn’t have the concept of the essence of something or the distinction between matter and form if Aristotle hadn’t written about them.One way to see how much we really depend on Aristotle would be to diff European culture with Chinese: what ideas did European culture have in 1800 that Chinese culture didn’t, in virtue of Aristotle’s contribution?[7] 有人会说，我们对亚里士多德的依赖远超自身认知，因为他的思想是我们共同文化的组成部分之一。诚然，我们使用的许多词汇都与亚里士多德有关，但要说 “若没有亚里士多德的论述，我们就不会有‘事物本质’的概念，也不会区分‘质料与形式’”，就未免言过其实了。要判断我们对亚里士多德的真实依赖程度，有一种方法是对比欧洲文化与中国文化：1800 年的欧洲文化中，有哪些思想是中国文化所没有的，且这些思想要归功于亚里士多德的贡献？</p><p>[8] The meaning of the word “philosophy” has changed over time. In ancient times it covered a broad range of topics, comparable in scope to our “scholarship” (though without the methodological implications). Even as late as Newton’s time it included what we now call “science.” But core of the subject today is still what seemed to Aristotle the core: the attempt to discover the most general truths.[8] “哲学” 一词的含义随时间不断变化。在古代，它涵盖的主题范围极广，堪比我们如今所说的 “学术研究”（尽管不包含方法论层面的内涵）。即便到了牛顿时代，它仍包含我们现在所说的 “科学”。但如今这一学科的核心，仍与亚里士多德眼中的核心一致：试图发现最具普遍性的真理。</p><p>Aristotle didn’t call this “metaphysics.” That name got assigned to it because the books we now call the Metaphysics came after (meta &#x3D; after) the Physics in the standard edition of Aristotle’s works compiled by Andronicus of Rhodes three centuries later. What we call “metaphysics” Aristotle called “first philosophy.”亚里士多德并未将其称为 “形而上学”（metaphysics）。这个名称的由来是：三个世纪后，罗德岛的安德罗尼库斯编纂亚里士多德著作标准版时，我们如今所说的《形而上学》在编排上位于《物理学》（Physics）之后（“meta” 意为 “在…… 之后”），因此得名。而我们口中的 “形而上学”，亚里士多德称之为 “第一哲学”（first philosophy）。</p><p>[9] Some of Aristotle’s immediate successors may have realized this, but it’s hard to say because most of their works are lost.[9] 亚里士多德的一些直系继承者或许已经意识到了这一点，但由于他们的著作大多失传，我们很难确切判断。</p><p>[10] Sokal, Alan, “Transgressing the Boundaries: Toward a Transformative Hermeneutics of Quantum Gravity,” Social Text 46&#x2F;47, pp. 217-252.Abstract-sounding nonsense seems to be most attractive when it’s aligned with some axe the audience already has to grind. If this is so we should find it’s most popular with groups that are (or feel) weak. The powerful don’t need its reassurance.[10] 艾伦・索卡尔，《跨越边界：走向量子引力的变革性诠释学》，《社会文本》第 46&#x2F;47 期，第 217-252 页。那些听起来抽象的无稽之谈，当它与听众本身就有的私心（或目的）相契合时，往往最具吸引力。若果真如此，我们会发现这类言论在（或自认为）弱势的群体中最受欢迎 —— 强者无需这样的慰藉。</p><p>[11] Letter to Ottoline Morrell, December 1912. Quoted in:Monk, Ray, Ludwig Wittgenstein: The Duty of Genius, Penguin, 1991, p. 75.[11] 1912 年 12 月致奥托琳・莫雷尔的信件。引自：雷・蒙克，《路德维希・维特根斯坦：天才之为责任》，企鹅出版社，1991 年，第 75 页。</p><p>[12] A preliminary result, that all metaphysics between Aristotle and 1783 had been a waste of time, is due to I. Kant.[12] 有一个初步结论认为，亚里士多德至 1783 年间的所有形而上学研究都是浪费时间，这一观点应归功于伊曼努尔・康德。</p><p>[13] Wittgenstein asserted a sort of mastery to which the inhabitants of early 20th century Cambridge seem to have been peculiarly vulnerable—perhaps partly because so many had been raised religious and then stopped believing, so had a vacant space in their heads for someone to tell them what to do (others chose Marx or Cardinal Newman), and partly because a quiet, earnest place like Cambridge in that era had no natural immunity to messianic figures, just as European politics then had no natural immunity to dictators.[13] 维特根斯坦展现出一种独特的权威感，20 世纪初的剑桥学者似乎格外容易受这种权威感影响。部分原因或许是：当时许多人在宗教环境中长大，后来却不再信仰宗教，思想上留下了空白，需要有人告诉他们该怎么做（其他人则选择了马克思或纽曼红衣主教）；另一部分原因是，像当时剑桥这样宁静、严谨的地方，对 “救世主式人物” 缺乏天然抵抗力，就像当时的欧洲政治对独裁者缺乏天然抵抗力一样。</p><p>[14] This is actually from the Ordinatio of Duns Scotus (ca. 1300), with “number” replaced by “gender.” Plus ca change.Wolter, Allan (trans), Duns Scotus: Philosophical Writings, Nelson, 1963, p. 92.[14] 这段话实际上出自邓斯・司各脱的《牛津评注》（约 1300 年），只是将原文中的 “数字”（number）替换成了 “性别”（gender）。万变不离其宗（法语 “Plus ça change”，意为事物表面变化大，本质却依旧）。艾伦・沃尔特（译），《邓斯・司各脱：哲学著作选》，尼尔森出版社，1963 年，第 92 页。</p><p>[15] Frankfurt, Harry, On Bullshit, Princeton University Press, 2005.[15] 哈里・法兰克福，《论胡说》，普林斯顿大学出版社，2005 年。</p><p>[16] Some introductions to philosophy now take the line that philosophy is worth studying as a process rather than for any particular truths you’ll learn. The philosophers whose works they cover would be rolling in their graves at that. They hoped they were doing more than serving as examples of how to argue: they hoped they were getting results. Most were wrong, but it doesn’t seem an impossible hope.This argument seems to me like someone in 1500 looking at the lack of results achieved by alchemy and saying its value was as a process. No, they were going about it wrong. It turns out it is possible to transmute lead into gold (though not economically at current energy prices), but the route to that knowledge was to backtrack and try another approach.[16] 如今有些哲学导论类书籍主张，哲学值得研究的是其 “过程”，而非能学到的某些特定 “真理”。但若那些著作被收录的哲学家泉下有知，定会为此气得在九泉之下不得安宁。他们当初的期望远不止 “成为论证方法的范例”—— 他们希望自己能得出切实的成果。大多数人未能如愿，但这并非不可能实现的期望。在我看来，这种 “哲学价值在过程” 的论调，就好比 1500 年有人看到炼金术毫无成果，却声称其价值在于 “过程”。事实并非如此：他们只是用错了方法。后来人们发现，“点铅成金” 其实是可能的（尽管以当前的能源价格来看，在经济上不划算），但获取这一知识的途径，是回溯过往并尝试另一种方法。</p><p>Thanks to Trevor Blackwell, Paul Buchheit, Jessica Livingston, Robert Morris, Mark Nitzberg, and Peter Norvig for reading drafts of this.感谢特雷弗・布莱克韦尔、保罗・布赫海特、杰西卡・利文斯顿、罗伯特・莫里斯、马克・尼茨伯格和彼得・诺维格阅读本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前线快报</title>
    <link href="/2025/09/26/news-from-the-front/"/>
    <url>/2025/09/26/news-from-the-front/</url>
    
    <content type="html"><![CDATA[<h1 id="News-from-the-Front"><a href="#News-from-the-Front" class="headerlink" title="News from the Front"></a>News from the Front</h1><h1 id="前线快报"><a href="#前线快报" class="headerlink" title="前线快报"></a>前线快报</h1><p>原文链接: <a href="https://paulgraham.com/colleges.html">https://paulgraham.com/colleges.html</a></p><p>September 2007</p><p>A few weeks ago I had a thought so heretical that it really surprised me. It may not matter all that much where you go to college.几周前，我产生了一个十分离经叛道的想法，连我自己都感到惊讶：你上哪所大学，或许没那么重要。</p><p>For me, as for a lot of middle class kids, getting into a good college was more or less the meaning of life when I was growing up. What was I? A student. To do that well meant to get good grades. Why did one have to get good grades? To get into a good college. And why did one want to do that? There seemed to be several reasons: you’d learn more, get better jobs, make more money. But it didn’t matter exactly what the benefits would be. College was a bottleneck through which all your future prospects passed; everything would be better if you went to a better college.和许多中产家庭的孩子一样，在我成长的过程中，考上一所好大学或多或少就是人生的意义所在。我是什么身份？是学生。把学生的本分做好，就意味着要拿好成绩。为什么必须拿好成绩？为了考上好大学。那为什么要考上好大学呢？理由似乎有几个：能学到更多知识、找到更好的工作、赚更多的钱。但具体能有哪些好处，其实并不重要。大学就像一个瓶颈，你未来的所有可能性都要经过它；只要你考上的大学越好，一切似乎就会越顺利。</p><p>A few weeks ago I realized that somewhere along the line I had stopped believing that.几周前我才意识到，不知从何时起，我已经不再相信这套逻辑了。</p><p>What first set me thinking about this was the new trend of worrying obsessively about what kindergarten your kids go to. It seemed to me this couldn’t possibly matter. Either it won’t help your kid get into Harvard, or if it does, getting into Harvard won’t mean much anymore. And then I thought: how much does it mean even now?最初让我开始思考这个问题的，是如今家长们过度焦虑孩子上哪所幼儿园的新趋势。在我看来，这根本无关紧要。要么，选幼儿园对孩子将来考哈佛毫无帮助；要么，就算有帮助，考上哈佛也不再有多大意义了。接着我又想：即便现在，考上哈佛的意义到底有多大呢？</p><p>It turns out I have a lot of data about that. My three partners and I run a seed stage investment firm called Y Combinator. We invest when the company is just a couple guys and an idea. The idea doesn’t matter much; it will change anyway. Most of our decision is based on the founders. The average founder is three years out of college. Many have just graduated; a few are still in school. So we’re in much the same position as a graduate program, or a company hiring people right out of college. Except our choices are immediately and visibly tested. There are two possible outcomes for a startup: success or failure—and usually you know within a year which it will be.事实证明，我手头有不少相关数据。我和三位合伙人运营着一家名为 Y Combinator 的种子期投资公司。我们投资的对象，往往只是几个创始人加一个想法的初创团队。想法本身没那么重要，因为它迟早会改变。我们的决策大多基于对创始人的判断。这些创始人平均毕业三年，很多人刚毕业不久，还有少数仍在上学。所以，我们所处的位置，其实和研究生院录取新生、企业招聘应届毕业生差不多。不同的是，我们做出的选择会立刻接受显而易见的检验。初创公司的结局只有两种：成功或失败 —— 而且通常一年内就能见分晓。</p><p>The test applied to a startup is among the purest of real world tests. A startup succeeds or fails depending almost entirely on the efforts of the founders. Success is decided by the market: you only succeed if users like what you’ve built. And users don’t care where you went to college.对初创公司的检验，堪称现实世界中最纯粹的检验之一。一家初创公司的成败，几乎完全取决于创始人的努力。成功由市场决定：只有当用户喜欢你打造的产品时，你才算成功。而用户才不在乎你上的是哪所大学。</p><p>As well as having precisely measurable results, we have a lot of them. Instead of doing a small number of large deals like a traditional venture capital fund, we do a large number of small ones. We currently fund about 40 companies a year, selected from about 900 applications representing a total of about 2000 people. [1]我们不仅能获得精确可衡量的结果，而且这类结果的数量还很多。不同于传统风险投资基金专注于少数几笔大额交易，我们做的是大量小额投资。目前，我们每年会从约 900 份申请（涉及总人数约 2000 人）中筛选出约 40 家公司进行投资。[1]</p><p>Between the volume of people we judge and the rapid, unequivocal test that’s applied to our choices, Y Combinator has been an unprecedented opportunity for learning how to pick winners. One of the most surprising things we’ve learned is how little it matters where people went to college.无论是我们评估的人数规模，还是对我们选择所进行的快速、明确无疑的检验，都让 Y Combinator 获得了一个前所未有的机会 —— 学习如何挑选出能成功的人。而我们学到的最令人惊讶的一点是：一个人上哪所大学，影响微乎其微。</p><p>I thought I’d already been cured of caring about that. There’s nothing like going to grad school at Harvard to cure you of any illusions you might have about the average Harvard undergrad. And yet Y Combinator showed us we were still overestimating people who’d been to elite colleges. We’d interview people from MIT or Harvard or Stanford and sometimes find ourselves thinking: they must be smarter than they seem. It took us a few iterations to learn to trust our senses.我本以为自己早已不再在意大学出身这回事了。没有什么比在哈佛读研究生更能打破你对普通哈佛本科生可能抱有的幻想了。但 Y Combinator 的经历却告诉我们，我们仍然在高估那些毕业于顶尖大学的人。我们面试麻省理工学院（MIT）、哈佛或斯坦福的毕业生时，有时会不由自主地想：他们肯定比表面看起来更聪明。我们花了好几次实践才学会相信自己的直观判断。</p><p>Practically everyone thinks that someone who went to MIT or Harvard or Stanford must be smart. Even people who hate you for it believe it.几乎所有人都认为，能考上 MIT、哈佛或斯坦福的人一定很聪明。就算是那些因此嫉妒你的人，也对此深信不疑。</p><p>But when you think about what it means to have gone to an elite college, how could this be true? We’re talking about a decision made by admissions officers—basically, HR people—based on a cursory examination of a huge pile of depressingly similar applications submitted by seventeen year olds. And what do they have to go on? An easily gamed standardized test; a short essay telling you what the kid thinks you want to hear; an interview with a random alum; a high school record that’s largely an index of obedience. Who would rely on such a test?但仔细想想，能上顶尖大学到底意味着什么？怎么就能证明一个人聪明呢？所谓的 “顶尖大学录取”，不过是招生官 —— 本质上就是人力资源从业者 —— 在匆匆审阅一大堆内容高度雷同、令人乏味的 17 岁青少年申请材料后做出的决定。而他们依据的是什么呢？一套很容易钻空子的标准化考试成绩；一篇满是投其所好内容的短文；一场由随机挑选的校友进行的面试；一份在很大程度上只能体现 “听话程度” 的高中成绩单。这样的 “筛选标准”，谁会当真呢？</p><p>And yet a lot of companies do. A lot of companies are very much influenced by where applicants went to college. How could they be? I think I know the answer to that.然而，很多公司还真就当真了。不少公司在招聘时，会深受求职者毕业院校的影响。他们为什么会这样呢？我想我知道答案。</p><p>There used to be a saying in the corporate world: “No one ever got fired for buying IBM.” You no longer hear this about IBM specifically, but the idea is very much alive; there is a whole category of “enterprise” software companies that exist to take advantage of it. People buying technology for large organizations don’t care if they pay a fortune for mediocre software. It’s not their money. They just want to buy from a supplier who seems safe—a company with an established name, confident salesmen, impressive offices, and software that conforms to all the current fashions. Not necessarily a company that will deliver so much as one that, if they do let you down, will still seem to have been a prudent choice. So companies have evolved to fill that niche.企业界曾经有句老话：“没人会因为买了 IBM 的产品而被解雇。” 现在虽然很少再听到针对 IBM 的这种说法，但背后的逻辑依然盛行；市面上有一整个类别的 “企业级” 软件公司，就是靠利用这种逻辑生存的。为大型机构采购技术产品的人，根本不在乎是否花了大价钱买了平庸的软件 —— 毕竟花的不是自己的钱。他们只希望从 “看起来安全” 的供应商那里采购：比如一家有知名品牌、销售团队自信满满、办公环境气派、软件符合当下所有潮流的公司。他们要的不一定是能提供卓越产品的公司，而是即便出了问题，选择这家公司看起来依然是个稳妥决定的企业。于是，就有公司逐渐发展起来，填补了这个市场空白。</p><p>A recruiter at a big company is in much the same position as someone buying technology for one. If someone went to Stanford and is not obviously insane, they’re probably a safe bet. And a safe bet is enough. No one ever measures recruiters by the later performance of people they turn down. [2]大公司的招聘官，处境和那些为机构采购技术产品的人很像。如果一个人毕业于斯坦福，而且看起来没什么问题，那录用他大概率是个 “安全的选择”。而 “安全的选择” 就足够了 —— 从来没人会根据招聘官拒绝掉的人日后的表现，来评判招聘官的工作能力。[2]</p><p>I’m not saying, of course, that elite colleges have evolved to prey upon the weaknesses of large organizations the way enterprise software companies have. But they work as if they had. In addition to the power of the brand name, graduates of elite colleges have two critical qualities that plug right into the way large organizations work. They’re good at doing what they’re asked, since that’s what it takes to please the adults who judge you at seventeen. And having been to an elite college makes them more confident.当然，我并不是说顶尖大学像那些企业级软件公司一样，是为了利用大型机构的弱点而发展起来的。但它们产生的效果，却仿佛就是如此。除了品牌效应之外，顶尖大学的毕业生还有两个关键特质，恰好契合大型机构的运作模式。一是他们擅长按要求做事 —— 毕竟在 17 岁时，要取悦那些评判你的成年人，靠的就是这一点；二是毕业于顶尖大学让他们更有自信。</p><p>Back in the days when people might spend their whole career at one big company, these qualities must have been very valuable. Graduates of elite colleges would have been capable, yet amenable to authority. And since individual performance is so hard to measure in large organizations, their own confidence would have been the starting point for their reputation.在过去，人们可能会在一家大公司度过整个职业生涯，那时这两种特质肯定非常有用。顶尖大学的毕业生既有能力，又愿意服从权威。而且，在大型机构中，个人表现本就难以衡量，所以他们自身的自信，就成了建立个人声望的起点。</p><p>Things are very different in the new world of startups. We couldn’t save someone from the market’s judgement even if we wanted to. And being charming and confident counts for nothing with users. All users care about is whether you make something they like. If you don’t, you’re dead.但在初创公司这个新世界里，情况就大不相同了。即便我们想，也无法让任何人逃脱市场的评判。而且，魅力和自信在用户面前一文不值 —— 用户只关心你打造的产品是不是他们喜欢的。如果不是，你就输定了。</p><p>Knowing that test is coming makes us work a lot harder to get the right answers than anyone would if they were merely hiring people. We can’t afford to have any illusions about the predictors of success. And what we’ve found is that the variation between schools is so much smaller than the variation between individuals that it’s negligible by comparison. We can learn more about someone in the first minute of talking to them than by knowing where they went to school.知道即将面临这样的检验，让我们在 “选出对的人” 这件事上，比那些单纯招聘员工的公司付出更多努力。我们不能对 “哪些因素能预示成功” 抱有任何幻想。而我们发现的结果是：不同学校之间的差异，远比不同个体之间的差异小得多，相比之下几乎可以忽略不计。和一个人交谈的头一分钟里，我们对他的了解，比知道他毕业于哪所学校要多得多。</p><p>It seems obvious when you put it that way. Look at the individual, not where they went to college. But that’s a weaker statement than the idea I began with, that it doesn’t matter much where a given individual goes to college. Don’t you learn things at the best schools that you wouldn’t learn at lesser places?这样说的话，道理似乎很明显：要看重个人本身，而不是他们的毕业院校。但这个说法，比我最初那个 “一个人上哪所大学没那么重要” 的观点要温和一些。难道在最好的学校里，你不会学到一些在普通学校学不到的东西吗？</p><p>Apparently not. Obviously you can’t prove this in the case of a single individual, but you can tell from aggregate evidence: you can’t, without asking them, distinguish people who went to one school from those who went to another three times as far down the US News list. [3] Try it and see.显然不能。当然，单看某一个人，你无法证明这一点，但从整体数据中就能看出来：如果不主动询问，你根本无法区分一个毕业于某所顶尖大学的人，和一个毕业于《美国新闻与世界报道》（US News）大学排名中落后其三倍名次学校的人。[3] 你可以试试看。</p><p>How can this be? Because how much you learn in college depends a lot more on you than the college. A determined party animal can get through the best school without learning anything. And someone with a real thirst for knowledge will be able to find a few smart people to learn from at a school that isn’t prestigious at all.为什么会这样？因为在大学里能学到多少东西，更多取决于你自己，而非学校本身。一个一心只顾玩乐的人，就算进了最好的学校，也可能什么都学不到；而一个真正渴望知识的人，即便在一所毫无名气的学校里，也能找到几个聪明的人来学习。</p><p>The other students are the biggest advantage of going to an elite college; you learn more from them than the professors. But you should be able to reproduce this at most colleges if you make a conscious effort to find smart friends. At most colleges you can find at least a handful of other smart students, and most people have only a handful of close friends in college anyway. [4] The odds of finding smart professors are even better. The curve for faculty is a lot flatter than for students, especially in math and the hard sciences; you have to go pretty far down the list of colleges before you stop finding smart professors in the math department.上顶尖大学最大的优势，其实是身边的同学 —— 你从同学身上学到的东西，比从教授那里学到的还多。但只要你有意识地去结交聪明的朋友，在大多数大学都能获得这样的学习机会。大多数大学里，至少能找到几个聪明的学生，而且说到底，大多数人在大学里也就只有几个亲密朋友。[4] 找到聪明教授的概率就更高了。大学教职人员的水平差异，比学生的水平差异小得多，尤其是在数学和自然科学领域。你得往下翻看很长一串大学排名，才会发现某所大学的数学系里再也没有聪明的教授了。</p><p>So it’s not surprising that we’ve found the relative prestige of different colleges useless in judging individuals. There’s a lot of randomness in how colleges select people, and what they learn there depends much more on them than the college. Between these two sources of variation, the college someone went to doesn’t mean a lot. It is to some degree a predictor of ability, but so weak that we regard it mainly as a source of error and try consciously to ignore it.因此，我们发现不同大学的相对声誉在评判个人时毫无用处，这一点并不奇怪。大学招生过程存在很大的随机性，而学生在大学期间学到什么，更多取决于他们自身，而非大学本身。受这两个变异来源的影响，一个人毕业于哪所大学，意义并不大。虽然在某种程度上，它可以作为能力的预测指标，但这种关联性太弱，以至于我们更多将其视为误差来源，并刻意尝试忽略它。</p><p>I doubt what we’ve discovered is an anomaly specific to startups. Probably people have always overestimated the importance of where one goes to college. We’re just finally able to measure it.我怀疑我们发现的情况并非初创公司特有的异常现象。或许人们一直以来都高估了上哪所大学的重要性，只是我们终于有能力对其进行量化验证罢了。</p><p>The unfortunate thing is not just that people are judged by such a superficial test, but that so many judge themselves by it. A lot of people, probably the majority of people in America, have some amount of insecurity about where, or whether, they went to college. The tragedy of the situation is that by far the greatest liability of not having gone to the college you’d have liked is your own feeling that you’re thereby lacking something. Colleges are a bit like exclusive clubs in this respect. There is only one real advantage to being a member of most exclusive clubs: you know you wouldn’t be missing much if you weren’t. When you’re excluded, you can only imagine the advantages of being an insider. But invariably they’re larger in your imagination than in real life.不幸的是，人们不仅会被这种肤浅的标准评判，更有太多人用它来评判自己。很多人 —— 或许是大多数美国人 —— 都会对自己 “上了哪所大学” 或 “是否上过大学” 感到些许不安。而这种情况的可悲之处在于，到目前为止，没能进入心仪大学的最大不利因素，其实是你自己觉得因此 “有所欠缺” 的心理感受。在这一点上，大学有点像专属俱乐部。对大多数专属俱乐部的成员来说，真正的优势只有一个：你清楚，即便不是会员，你也不会错过太多东西。可当你被排除在外时，你只能凭空想象成为内部成员的种种好处 —— 但这些想象中的好处，往往比现实中要多得多。</p><p>So it is with colleges. Colleges differ, but they’re nothing like the stamp of destiny so many imagine them to be. People aren’t what some admissions officer decides about them at seventeen. They’re what they make themselves.大学也是如此。不同大学固然有差异，但绝不是很多人想象中那种 “命运的印记”。一个人的价值，不是由某个招生官在其 17 岁时的判断决定的，而是由他自己塑造的。</p><p>Indeed, the great advantage of not caring where people went to college is not just that you can stop judging them (and yourself) by superficial measures, but that you can focus instead on what really matters. What matters is what you make of yourself. I think that’s what we should tell kids. Their job isn’t to get good grades so they can get into a good college, but to learn and do. And not just because that’s more rewarding than worldly success. That will increasingly be the route to worldly success.事实上，不纠结于他人毕业院校的最大好处，不仅在于你能不再用肤浅的标准评判他人（以及自己），更在于你能转而专注于真正重要的事情 —— 也就是你如何塑造自己。我认为这才是我们应该告诉孩子的：他们的任务不是为了考上好大学而拿高分，而是去学习、去实践。这不仅因为这种做法比追求世俗意义上的成功更有价值，更因为它将越来越成为通往世俗成功的必经之路。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>注释</p><p>[1] Is what we measure worth measuring? I think so. You can get rich simply by being energetic and unscrupulous, but getting rich from a technology startup takes some amount of brains. It is just the kind of work the upper middle class values; it has about the same intellectual component as being a doctor.我们所衡量的东西值得衡量吗？我认为值得。仅凭精力充沛和不择手段，你或许能发财，但要通过科技初创公司致富，就需要一定的头脑了。这类工作正是中上层阶级所看重的，其对智力的要求，与当医生大致相当。</p><p>[2] Actually, someone did, once. Mitch Kapor’s wife Freada was in charge of HR at Lotus in the early years. (As he is at pains to point out, they did not become romantically involved till afterward.) At one point they worried Lotus was losing its startup edge and turning into a big company. So as an experiment she sent their recruiters the resumes of the first 40 employees, with identifying details changed. These were the people who had made Lotus into the star it was. Not one got an interview.事实上，还真有人做过这样的验证。米奇・卡波尔（Mitch Kapor）的妻子弗雷达（Freada）早年在莲花公司（Lotus）负责人力资源工作。（正如米奇反复强调的那样，他们是后来才发展成恋爱关系的。）有一段时间，他们担心莲花公司正失去初创企业的优势，逐渐沦为一家大公司。于是，弗雷达做了个实验：她将公司最初 40 名员工的简历（修改了身份信息）交给招聘团队。正是这 40 个人，当初把莲花公司打造成了行业明星 —— 可最终，没有一份简历获得面试机会。</p><p>[3] The US News list? Surely no one trusts that. Even if the statistics they consider are useful, how do they decide on the relative weights? The reason the US News list is meaningful is precisely because they are so intellectually dishonest in that respect. There is no external source they can use to calibrate the weighting of the statistics they use; if there were, we could just use that instead. What they must do is adjust the weights till the top schools are the usual suspects in about the right order. So in effect what the US News list tells us is what the editors think the top schools are, which is probably not far from the conventional wisdom on the matter. The amusing thing is, because some schools work hard to game the system, the editors will have to keep tweaking their algorithm to get the rankings they want.《美国新闻与世界报道》的大学排名？肯定没人真的相信吧。即便他们参考的统计数据有一定价值，可这些数据的相对权重是怎么定的呢？恰恰是因为在权重设定上缺乏学术诚信，这份排名才具有了 “意义”。他们没有任何外部依据来校准所用统计数据的权重 —— 如果有的话，我们直接用那个依据就行了。他们必然会做的，是不断调整权重，直到顶尖院校的排名与人们通常预期的顺序大致相符。所以，这份排名本质上告诉我们的，不过是编辑们认为哪些是顶尖院校，而这或许与大众对该问题的普遍看法相差不远。有趣的是，由于有些学校会极力钻排名体系的空子，编辑们就不得不持续调整算法，以得到他们想要的排名结果。</p><p>[4] Possible doesn’t mean easy, of course. A smart student at a party school will inevitably be something of an outcast, just as he or she would be in most high schools.当然，“有可能” 不代表 “很容易”。在一所风气松散、热衷社交玩乐的大学（派对大学）里，聪明的学生难免会成为某种程度上的 “异类”—— 就像他们在大多数高中里可能遭遇的那样。</p><p>Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie McDonough, Peter Norvig, and Robert Morris for reading drafts of this.感谢特雷弗・布莱克威尔（Trevor Blackwell）、萨拉・哈林（Sarah Harlin）、杰西卡・利文斯顿（Jessica Livingston）、杰姬・麦克多诺（Jackie McDonough）、彼得・诺维格（Peter Norvig）和罗伯特・莫里斯（Robert Morris）阅读本文初稿并提出意见。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何避免创业 “死亡”</title>
    <link href="/2025/09/25/how-not-to-die/"/>
    <url>/2025/09/25/how-not-to-die/</url>
    
    <content type="html"><![CDATA[<h1 id="How-Not-to-Die"><a href="#How-Not-to-Die" class="headerlink" title="How Not to Die"></a>How Not to Die</h1><h1 id="如何避免创业-“死亡”"><a href="#如何避免创业-“死亡”" class="headerlink" title="如何避免创业 “死亡”"></a>如何避免创业 “死亡”</h1><p>原文链接: <a href="https://paulgraham.com/die.html">https://paulgraham.com/die.html</a></p><p>August 2007</p><p>(This is a talk I gave at the last Y Combinator dinner of the summer. Usually we don’t have a speaker at the last dinner; it’s more of a party. But it seemed worth spoiling the atmosphere if I could save some of the startups from preventable deaths. So at the last minute I cooked up this rather grim talk. I didn’t mean this as an essay; I wrote it down because I only had two hours before dinner and think fastest while writing.)（这是我在今年夏天 YC（Y Combinator，知名创业孵化器）最后一次聚餐上的演讲。通常，最后一次聚餐不会安排演讲，更像是一场派对。但如果能让一些创业公司避免本可预防的 “死亡”，就算破坏气氛也值得。所以我在最后一刻，临时拼凑了这场相当沉重的演讲。我本来没打算把它写成文章，之所以写下来，是因为距离晚餐只剩两个小时，而我在写作时思维最快。）</p><p>A couple days ago I told a reporter that we expected about a third of the companies we funded to succeed. Actually I was being conservative. I’m hoping it might be as much as a half. Wouldn’t it be amazing if we could achieve a 50% success rate?几天前，我跟一位记者说，我们预计所投资的公司中，约有三分之一能成功。其实我当时已经很保守了。我希望成功率能达到一半。要是我们能实现 50% 的成功率，岂不是很了不起？</p><p>Another way of saying that is that half of you are going to die. Phrased that way, it doesn’t sound good at all. In fact, it’s kind of weird when you think about it, because our definition of success is that the founders get rich. If half the startups we fund succeed, then half of you are going to get rich and the other half are going to get nothing.换个说法就是，你们中有一半会 “死亡”（指创业失败）。这么说的话，听起来就一点都不乐观了。其实仔细想想，这还挺诡异的 —— 因为我们对 “成功” 的定义，就是创始人能赚到钱。如果我们投资的创业公司中有一半能成功，那你们中就有一半人能赚到钱，另一半人则会一无所获。</p><p>If you can just avoid dying, you get rich. That sounds like a joke, but it’s actually a pretty good description of what happens in a typical startup. It certainly describes what happened in Viaweb. We avoided dying till we got rich.只要能避免 “死亡”，你就能赚到钱。这话听着像玩笑，但它其实很贴切地描述了普通创业公司的处境。我们 Viaweb（作者参与创办的公司）的经历就是如此 —— 我们一直撑到赚到钱，才没走向 “死亡”。</p><p>It was really close, too. When we were visiting Yahoo to talk about being acquired, we had to interrupt everything and borrow one of their conference rooms to talk down an investor who was about to back out of a new funding round we needed to stay alive. So even in the middle of getting rich we were fighting off the grim reaper.当时情况也确实很危急。有一次我们去雅虎（Yahoo）谈被收购的事，中途不得不暂停所有议程，借了他们一间会议室，紧急说服一位即将退出我们一轮新融资的投资者 —— 那轮融资对我们维持运营至关重要。所以即便在快要赚到钱的时候，我们仍在与 “死神”（指创业失败）抗争。</p><p>You may have heard that quote about luck consisting of opportunity meeting preparation. You’ve now done the preparation. The work you’ve done so far has, in effect, put you in a position to get lucky: you can now get rich by not letting your company die. That’s more than most people have. So let’s talk about how not to die.你们可能听过一句话：“幸运是机会与准备的结合。” 现在，你们已经完成了 “准备” 这一步。到目前为止，你们所做的工作，实际上已经让你们有机会获得幸运 —— 只要不让公司 “死亡”，你们就能赚到钱。这已经比大多数人拥有的机会多了。所以，我们来聊聊如何避免 “死亡”。</p><p>We’ve done this five times now, and we’ve seen a bunch of startups die. About 10 of them so far. We don’t know exactly what happens when they die, because they generally don’t die loudly and heroically. Mostly they crawl off somewhere and die.我们运营 YC 至今已经五期了，见证了不少创业公司 “死亡”，目前大概有 10 家。我们并不完全清楚它们 “死亡” 时的具体情况，因为它们通常不会 “死” 得轰轰烈烈、充满悲壮色彩，大多是悄无声息地淡出，然后走向 “死亡”。</p><p>For us the main indication of impending doom is when we don’t hear from you. When we haven’t heard from, or about, a startup for a couple months, that’s a bad sign. If we send them an email asking what’s up, and they don’t reply, that’s a really bad sign. So far that is a 100% accurate predictor of death.对我们来说，创业公司 “末日将至” 的主要信号，就是我们收不到它们的消息。如果有两个月没收到某家创业公司的消息，也没听到任何关于它的动态，那就是个坏兆头；如果我们发邮件问情况，对方还不回复，那就是个非常糟糕的兆头了。到目前为止，这是一个 100% 准确的 “死亡” 预兆。</p><p>Whereas if a startup regularly does new deals and releases and either sends us mail or shows up at YC events, they’re probably going to live.相反，如果一家创业公司能定期达成新合作、推出新产品（或功能），还会主动给我们发消息，或者参加 YC 的活动，那它很可能会存活下来。</p><p>I realize this will sound naive, but maybe the linkage works in both directions. Maybe if you can arrange that we keep hearing from you, you won’t die.我知道这听起来可能有点天真，但或许这种关联是双向的：如果你们能确保我们持续收到你们的消息，或许你们就不会 “死亡”。</p><p>That may not be so naive as it sounds. You’ve probably noticed that having dinners every Tuesday with us and the other founders causes you to get more done than you would otherwise, because every dinner is a mini Demo Day. Every dinner is a kind of a deadline. So the mere constraint of staying in regular contact with us will push you to make things happen, because otherwise you’ll be embarrassed to tell us that you haven’t done anything new since the last time we talked.其实这可能没听起来那么天真。你们或许已经发现，每周二和我们以及其他创始人一起聚餐，会让你们比独自做事时完成更多工作 —— 因为每一次聚餐都像一场 “小型演示日”（Demo Day，创业公司展示成果的活动），也像是一个隐形的截止日期。所以，仅仅是 “要与我们保持定期联系” 这一约束，就会促使你们采取行动、做出成果 —— 否则，你们会不好意思跟我们说 “自从上次聊完，我们什么新进展都没有”。</p><p>If this works, it would be an amazing hack. It would be pretty cool if merely by staying in regular contact with us you could get rich. It sounds crazy, but there’s a good chance that would work.如果这招真的管用，那可真是个绝妙的方法。要是仅仅通过与我们保持定期联系，就能让你们赚到钱，那也太酷了。这听起来很疯狂，但这种方法很有可能奏效。</p><p>A variant is to stay in touch with other YC-funded startups. There is now a whole neighborhood of them in San Francisco. If you move there, the peer pressure that made you work harder all summer will continue to operate.另一个办法是与其他由 YC 投资的创业公司保持联系。现在，这些公司在旧金山已经形成了一个 “聚居区”。如果你们搬到那里，整个夏天让你们更努力工作的 “同伴压力”，就会继续发挥作用。</p><p>When startups die, the official cause of death is always either running out of money or a critical founder bailing. Often the two occur simultaneously. But I think the underlying cause is usually that they’ve become demoralized. You rarely hear of a startup that’s working around the clock doing deals and pumping out new features, and dies because they can’t pay their bills and their ISP unplugs their server.创业公司 “死亡” 时，“官方死因” 通常要么是资金耗尽，要么是核心创始人退出，而且这两种情况往往会同时发生。但我认为，根本原因通常是它们的士气已经低落了。你很少会听说，一家夜以继日谈合作、推新功能的创业公司，会因为付不起账单、被互联网服务提供商（ISP）断了服务器而 “死亡”。</p><p>Startups rarely die in mid keystroke. So keep typing!创业公司很少会在 “敲代码的过程中突然死亡”（指在积极行动时突然失败）。所以，继续努力吧（“继续敲代码” 的引申义）！</p><p>If so many startups get demoralized and fail when merely by hanging on they could get rich, you have to assume that running a startup can be demoralizing. That is certainly true. I’ve been there, and that’s why I’ve never done another startup. The low points in a startup are just unbelievably low. I bet even Google had moments where things seemed hopeless.既然有这么多创业公司，明明只要坚持下去就能赚到钱，却因为士气低落而失败，那你就该明白：运营创业公司确实可能让人士气低落。这一点千真万确 —— 我有过亲身经历，这也是我之后再也没创办过新公司的原因。创业过程中的低谷，真的低到难以想象。我敢说，即便是谷歌（Google），也有过事情看似毫无希望的时刻。</p><p>Knowing that should help. If you know it’s going to feel terrible sometimes, then when it feels terrible you won’t think “ouch, this feels terrible, I give up.” It feels that way for everyone. And if you just hang on, things will probably get better. The metaphor people use to describe the way a startup feels is at least a roller coaster and not drowning. You don’t just sink and sink; there are ups after the downs.知道这一点应该会有帮助。如果你提前知道 “有时候会感觉很糟糕”，那么当糟糕的感觉来临时，你就不会想 “天啊，太难受了，我放弃了”。每个人都会有这种糟糕的感觉，只要坚持下去，情况很可能会好转。人们用来形容创业处境的比喻，至少是 “过山车”，而不是 “溺水”—— 你不会一直下沉，低谷之后总会有高峰。</p><p>Another feeling that seems alarming but is in fact normal in a startup is the feeling that what you’re doing isn’t working. The reason you can expect to feel this is that what you do probably won’t work. Startups almost never get it right the first time. Much more commonly you launch something, and no one cares. Don’t assume when this happens that you’ve failed. That’s normal for startups. But don’t sit around doing nothing. Iterate.另一种在创业中看似令人担忧、但实际上很正常的感受，就是 “觉得自己正在做的事情行不通”。你之所以会有这种感受，是因为你做的事情很可能真的行不通 —— 创业公司几乎不可能一次就做对。更常见的情况是：你推出了某个产品（或功能），却没人在意。但不要以为这种情况出现就意味着失败 —— 对创业公司来说，这很正常。但也别无所事事地坐着，要去 “迭代”（调整、优化）。</p><p>I like Paul Buchheit’s suggestion of trying to make something that at least someone really loves. As long as you’ve made something that a few users are ecstatic about, you’re on the right track. It will be good for your morale to have even a handful of users who really love you, and startups run on morale. But also it will tell you what to focus on. What is it about you that they love? Can you do more of that? Where can you find more people who love that sort of thing? As long as you have some core of users who love you, all you have to do is expand it. It may take a while, but as long as you keep plugging away, you’ll win in the end. Both Blogger and Delicious did that. Both took years to succeed. But both began with a core of fanatically devoted users, and all Evan and Joshua had to do was grow that core incrementally. Wufoo is on the same trajectory now.我很认同保罗・布赫海特（Paul Buchheit，Gmail 创始人之一）的一个建议：努力做出至少有人真心喜欢的东西。只要你做出的东西，能让几位用户狂热喜爱，那你就走在正确的道路上。哪怕只有一小撮用户真心喜欢你，对你们的士气也是极大的鼓舞 —— 而创业公司正是靠士气运转的。除此之外，这些用户还会告诉你该专注于什么：他们喜欢你的产品哪一点？你能不能在这方面做得更多？去哪里找更多喜欢这类事物的人？只要你有一群真心喜欢你的核心用户，接下来要做的就是扩大这个群体。这可能需要一些时间，但只要坚持不懈地努力，最终一定会成功。Blogger（博客平台）和 Delicious（书签网站）都是这么做的，它们都花了好几年才成功，但一开始都有一群狂热忠诚的核心用户。埃文（Evan Williams，Blogger 创始人）和约书亚（Joshua Schachter，Delicious 创始人）要做的，只是逐步扩大这个核心用户群体。现在，Wufoo（表单制作工具）也在沿着同样的轨迹发展。</p><p>So when you release something and it seems like no one cares, look more closely. Are there zero users who really love you, or is there at least some little group that does? It’s quite possible there will be zero. In that case, tweak your product and try again. Every one of you is working on a space that contains at least one winning permutation somewhere in it. If you just keep trying, you’ll find it.所以，当你推出某个东西却没人在意时，不妨更仔细地观察：是真的没有一个用户真心喜欢你，还是有一小群人其实很喜欢？当然，完全没人喜欢的情况也有可能发生。如果是这样，就调整你的产品，再试一次。你们每个人所专注的领域中，至少都存在一种 “成功的可能性”（winning permutation，指能成功的产品模式或方向），只要不断尝试，就一定能找到它。</p><p>Let me mention some things not to do. The number one thing not to do is other things. If you find yourself saying a sentence that ends with “but we’re going to keep working on the startup,” you are in big trouble. Bob’s going to grad school, but we’re going to keep working on the startup. We’re moving back to Minnesota, but we’re going to keep working on the startup. We’re taking on some consulting projects, but we’re going to keep working on the startup. You may as well just translate these to “we’re giving up on the startup, but we’re not willing to admit that to ourselves,” because that’s what it means most of the time. A startup is so hard that working on it can’t be preceded by “but.”我来提一些 “不要做的事”。首要的 “不要做”，就是不要去做创业之外的其他事情。如果你发现自己说的话以 “但我们还是会继续做这个创业项目” 结尾，那麻烦就大了。比如 “鲍勃要去读研究生了，但我们还是会继续做创业项目”“我们要搬回明尼苏达州了，但我们还是会继续做创业项目”“我们接了一些咨询项目，但我们还是会继续做创业项目”—— 这些话，你们不妨直接理解为 “我们其实已经放弃这个创业项目了，只是不愿意承认而已”，因为大多数时候，事实就是如此。创业太难了，“继续做创业项目” 这件事，前面绝对不能加 “但”。</p><p>In particular, don’t go to graduate school, and don’t start other projects. Distraction is fatal to startups. Going to (or back to) school is a huge predictor of death because in addition to the distraction it gives you something to say you’re doing. If you’re only doing a startup, then if the startup fails, you fail. If you’re in grad school and your startup fails, you can say later “Oh yeah, we had this startup on the side when I was in grad school, but it didn’t go anywhere.”尤其是不要去读研究生，也不要启动其他项目 —— 分心对创业公司来说是致命的。去（或回）学校读书，是一个强烈的 “死亡” 预兆，因为它不仅会让你分心，还会给你一个 “合理的借口”：你可以说自己在做别的事。如果你只专注于创业，那么创业失败了，就是你个人的失败；但如果你在读研究生，创业失败后，你可以说 “哦，当时我在读研，顺便做了个创业项目，没做出什么名堂而已”。</p><p>You can’t use euphemisms like “didn’t go anywhere” for something that’s your only occupation. People won’t let you.但如果创业是你唯一的事业，你就没法用 “没做出什么名堂” 这种委婉说法来搪塞 —— 别人是不会接受的。</p><p>One of the most interesting things we’ve discovered from working on Y Combinator is that founders are more motivated by the fear of looking bad than by the hope of getting millions of dollars. So if you want to get millions of dollars, put yourself in a position where failure will be public and humiliating.我们从运营 YC 的过程中发现的最有趣的事情之一是：相比 “赚几百万美元” 的希望，创始人更受 “怕丢脸” 的心理驱动。所以，如果你想赚到几百万美元，就让自己处于一种 “失败会公开且丢脸” 的境地吧（这样你就会更有动力坚持下去）。</p><p>When we first met the founders of Octopart, they seemed very smart, but not a great bet to succeed, because they didn’t seem especially committed. One of the two founders was still in grad school. It was the usual story: he’d drop out if it looked like the startup was taking off. Since then he has not only dropped out of grad school, but appeared full length in Newsweek with the word “Billionaire” printed across his chest. He just cannot fail now. Everyone he knows has seen that picture. Girls who dissed him in high school have seen it. His mom probably has it on the fridge. It would be unthinkably humiliating to fail now. At this point he is committed to fight to the death.我们第一次见到 Octopart（电子元件搜索平台）的创始人时，他们看起来非常聪明，但当时并不太可能成功，因为他们对创业的投入程度似乎并不高。两位创始人中有一位还在攻读研究生，当时的情况很常见：只有等创业项目看起来有起色了，他才会退学。从那以后，他不仅退了学，还登上了《新闻周刊》—— 照片里他是全身出镜，胸前印着 “亿万富翁”（Billionaire）的字样。现在的他，根本输不起了。他认识的每个人都见过那张照片，连高中时冷落过他的女生都看到了，他妈妈说不定还把照片贴在了冰箱上。现在要是失败，那丢脸程度简直难以想象。到了这个地步，他已经下定决心要拼到最后了。</p><p>I wish every startup we funded could appear in a Newsweek article describing them as the next generation of billionaires, because then none of them would be able to give up. The success rate would be 90%. I’m not kidding.我真希望我们投资的每一家创业公司，都能登上《新闻周刊》，被描述成 “下一代亿万富翁”—— 那样的话，他们就没人会放弃了，成功率说不定能达到 90%。我可不是在开玩笑。</p><p>When we first knew the Octoparts they were lighthearted, cheery guys. Now when we talk to them they seem grimly determined. The electronic parts distributors are trying to squash them to keep their monopoly pricing. (If it strikes you as odd that people still order electronic parts out of thick paper catalogs in 2007, there’s a reason for that. The distributors want to prevent the transparency that comes from having prices online.) I feel kind of bad that we’ve transformed these guys from lighthearted to grimly determined. But that comes with the territory. If a startup succeeds, you get millions of dollars, and you don’t get that kind of money just by asking for it. You have to assume it takes some amount of pain.我们刚认识 Octopart 团队时，他们还是一群轻松活泼、乐呵呵的人。现在再和他们交流，能明显感觉到他们神情严肃、意志坚定。电子元件分销商们正试图打压他们，以维持自己的垄断定价。（如果你觉得 2007 年还有人通过厚厚的纸质目录订购电子元件很奇怪，那是有原因的：分销商就是想避免价格放到网上后带来的透明度。）想到是我们把这群人从轻松活泼的状态，变成了如今严肃坚定的模样，我心里还挺不是滋味的。但这在创业领域是难免的。创业公司要是成功了，你能赚几百万美元，但这种钱不是靠嘴说说就能得到的。你得明白，这背后必然要承受一定的痛苦。</p><p>And however tough things get for the Octoparts, I predict they’ll succeed. They may have to morph themselves into something totally different, but they won’t just crawl off and die. They’re smart; they’re working in a promising field; and they just cannot give up.而且不管 Octopart 未来会面临多大的困难，我敢预言他们一定会成功。他们或许得彻底转型成完全不同的模式，但绝不会悄无声息地走向失败。他们很聪明，所处的领域也很有前景，而且他们现在根本没有退路，不能放弃。</p><p>All of you guys already have the first two. You’re all smart and working on promising ideas. Whether you end up among the living or the dead comes down to the third ingredient, not giving up.你们所有人都已经具备了前两个条件：你们都很聪明，而且在做的项目想法也很有前景。最终你们是能存活下来，还是会走向 “死亡”（指创业失败），就取决于第三个关键因素 —— 不放弃。</p><p>So I’ll tell you now: bad shit is coming. It always is in a startup. The odds of getting from launch to liquidity without some kind of disaster happening are one in a thousand. So don’t get demoralized. When the disaster strikes, just say to yourself, ok, this was what Paul was talking about. What did he say to do? Oh, yeah. Don’t give up.所以我现在就告诉你们：麻烦事一定会来。创业过程中向来如此。一家创业公司从推出产品到实现变现（如上市、被收购等资金流通场景），期间不遇到任何麻烦的概率，千分之一都不到。所以别士气低落。当麻烦来临时，就对自己说：“好了，保罗（指作者）之前说的情况来了。他当时说该怎么做来着？哦对，别放弃。”</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在脑中构建程序</title>
    <link href="/2025/09/25/holding-a-program-in-ones-head/"/>
    <url>/2025/09/25/holding-a-program-in-ones-head/</url>
    
    <content type="html"><![CDATA[<h1 id="Holding-a-Program-in-One’s-Head"><a href="#Holding-a-Program-in-One’s-Head" class="headerlink" title="Holding a Program in One’s Head"></a>Holding a Program in One’s Head</h1><h1 id="在脑中构建程序"><a href="#在脑中构建程序" class="headerlink" title="在脑中构建程序"></a>在脑中构建程序</h1><p>原文链接: <a href="https://paulgraham.com/head.html">https://paulgraham.com/head.html</a></p><p>August 2007</p><p>A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he’s working on. Mathematicians don’t answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head, and you can manipulate it at will.一位专注于自己代码的优秀程序员，能像数学家牢记正在研究的问题那样，将程序记在脑中。数学家不会像学生被教的那样，通过在纸上演算来解答问题。他们更多的思考是在脑中进行的：他们会努力充分理解一个问题域，以至于能在其中 “穿梭自如”，就像你能在对自己成长的房子的记忆中 “漫步” 一样。最理想的编程状态亦是如此 —— 你将整个程序记在脑中，并且能随意对其进行调整。</p><p>That’s particularly valuable at the start of a project, because initially the most important thing is to be able to change what you’re doing. Not just to solve the problem in a different way, but to change the problem you’re solving.这在项目初期尤为重要，因为项目起步阶段，最重要的能力是能够调整自己的工作方向。这不仅指用不同方法解决现有问题，还包括调整你正在解决的问题本身。</p><p>Your code is your understanding of the problem you’re exploring. So it’s only when you have your code in your head that you really understand the problem.你的代码，就是你对正在探索的问题的理解。因此，只有当你能将代码记在脑中时，你才真正理解了这个问题。</p><p>It’s not easy to get a program into your head. If you leave a project for a few months, it can take days to really understand it again when you return to it. Even when you’re actively working on a program it can take half an hour to load into your head when you start work each day. And that’s in the best case. Ordinary programmers working in typical office conditions never enter this mode. Or to put it more dramatically, ordinary programmers working in typical office conditions never really understand the problems they’re solving.将程序记在脑中并非易事。若你搁置一个项目数月，当你重新接手时，可能需要好几天才能再次真正理解它。即便你正在积极开发某个程序，每天开始工作时，也可能需要半小时才能将其 “载入” 脑中 —— 而这已是最佳情况。在常规办公环境中工作的普通程序员，从未进入过这种状态。更夸张地说，在常规办公环境中工作的普通程序员，从未真正理解过他们正在解决的问题。</p><p>Even the best programmers don’t always have the whole program they’re working on loaded into their heads. But there are things you can do to help:即便是最优秀的程序员，也并非总能将正在开发的整个程序 “载入” 脑中。但你可以通过一些方法来提供帮助：</p><p>Avoid distractions. Distractions are bad for many types of work, but especially bad for programming, because programmers tend to operate at the limit of the detail they can handle.避免分心。分心对多种工作都不利，但对编程尤其有害 —— 因为程序员的工作往往需要处理大量细节，且已接近其能力极限。</p><p>The danger of a distraction depends not on how long it is, but on how much it scrambles your brain. A programmer can leave the office and go and get a sandwich without losing the code in his head. But the wrong kind of interruption can wipe your brain in 30 seconds.分心的危害不在于持续时间长短，而在于它会在多大程度上扰乱你的思绪。程序员离开办公室去买个三明治，脑中的代码可能不会丢失；但不当的干扰，却能在 30 秒内让你脑中的代码 “清零”。</p><p>Oddly enough, scheduled distractions may be worse than unscheduled ones. If you know you have a meeting in an hour, you don’t even start working on something hard.奇怪的是，计划内的分心可能比突发分心更糟糕。若你知道一小时后要开会，你甚至不会开始着手处理有难度的工作。</p><p>Work in long stretches. Since there’s a fixed cost each time you start working on a program, it’s more efficient to work in a few long sessions than many short ones. There will of course come a point where you get stupid because you’re tired. This varies from person to person. I’ve heard of people hacking for 36 hours straight, but the most I’ve ever been able to manage is about 18, and I work best in chunks of no more than 12.长时间连贯工作。由于每次开始处理程序都需要付出 “固定成本”（即进入状态的时间），因此进行几次长时间工作，比多次短时间工作效率更高。当然，你会因疲劳而进入 “思维迟钝” 的状态，这因人而异。我听说有人曾连续编程 36 小时，但我自己最多只能坚持约 18 小时，且工作效率最高的时间段通常不超过 12 小时。</p><p>The optimum is not the limit you can physically endure. There’s an advantage as well as a cost of breaking up a project. Sometimes when you return to a problem after a rest, you find your unconscious mind has left an answer waiting for you.最佳工作时长并非你身体能承受的极限。中断项目既有成本，也有好处：有时休息后重新面对问题，你会发现潜意识早已为你准备好了答案。</p><p>Use succinct languages. More powerful programming languages make programs shorter. And programmers seem to think of programs at least partially in the language they’re using to write them. The more succinct the language, the shorter the program, and the easier it is to load and keep in your head.使用简洁的编程语言。功能更强大的编程语言能让程序更简短，而程序员对程序的思考，至少在一定程度上是用他们编写程序时所用的语言进行的。语言越简洁，程序就越短，也就越容易 “载入” 并记在脑中。</p><p>You can magnify the effect of a powerful language by using a style called bottom-up programming, where you write programs in multiple layers, the lower ones acting as programming languages for those above. If you do this right, you only have to keep the topmost layer in your head.通过 “自底向上编程” 的方式，你可以放大强大编程语言的优势：这种编程方式会将程序分为多个层级编写，底层代码会成为上层代码的 “编程语言”。若能正确使用这种方法，你只需将最上层的代码记在脑中即可。</p><p>Keep rewriting your program. Rewriting a program often yields a cleaner design. But it would have advantages even if it didn’t: you have to understand a program completely to rewrite it, so there is no better way to get one loaded into your head.反复重写程序。重写程序通常能带来更简洁的设计，但即便没有这个好处，重写本身也有价值：要重写程序，你必须完全理解它，因此，没有比这更好的将程序 “载入” 脑中的方法了。</p><p>Write rereadable code. All programmers know it’s good to write readable code. But you yourself are the most important reader. Especially in the beginning; a prototype is a conversation with yourself. And when writing for yourself you have different priorities. If you’re writing for other people, you may not want to make code too dense. Some parts of a program may be easiest to read if you spread things out, like an introductory textbook. Whereas if you’re writing code to make it easy to reload into your head, it may be best to go for brevity.编写易重读的代码。所有程序员都知道，编写易读的代码很重要，但你自己才是最重要的读者。尤其是在项目初期：原型本质上是你与自己的 “对话”。为自己写代码时，你的优先级会有所不同：若为他人写代码，你可能不会让代码过于紧凑，某些部分像入门教材那样铺展开来，或许最易阅读；但若是为了方便自己日后将代码重新 “载入” 脑中，那么代码简洁凝练可能是最佳选择。</p><p>Work in small groups. When you manipulate a program in your head, your vision tends to stop at the edge of the code you own. Other parts you don’t understand as well, and more importantly, can’t take liberties with. So the smaller the number of programmers, the more completely a project can mutate. If there’s just one programmer, as there often is at first, you can do all-encompassing redesigns.以小团队形式工作。当你在脑中调整程序时，你的 “视野” 往往局限在自己负责的代码范围内。对于其他部分，你不仅理解不深，更重要的是无法随意修改。因此，团队中的程序员越少，项目就越能进行彻底的调整。若团队中只有一名程序员（项目初期常是如此），你便能对项目进行全面的重新设计。</p><p>Don’t have multiple people editing the same piece of code. You never understand other people’s code as well as your own. No matter how thoroughly you’ve read it, you’ve only read it, not written it. So if a piece of code is written by multiple authors, none of them understand it as well as a single author would.不要让多人编辑同一段代码。你对他人代码的理解，永远无法达到对自己代码的程度 —— 无论你读得多透彻，你也只是 “读” 过，而非 “写” 过。因此，若一段代码由多人编写，没人能像单人编写时那样完全理解它。</p><p>And of course you can’t safely redesign something other people are working on. It’s not just that you’d have to ask permission. You don’t even let yourself think of such things. Redesigning code with several authors is like changing laws; redesigning code you alone control is like seeing the other interpretation of an ambiguous image.当然，你无法安全地重新设计他人正在处理的代码。这不仅是因为你需要获得许可，更因为你甚至不会让自己产生这样的想法。重新设计多人编写的代码，如同修改法律般复杂；而重新设计由你独自掌控的代码，则像看懂一幅歧义图像的另一种解读般轻松。</p><p>If you want to put several people to work on a project, divide it into components and give each to one person.若你想让多人参与一个项目，应将项目拆分为多个组件，每个组件交给一名成员负责。</p><p>Start small. A program gets easier to hold in your head as you become familiar with it. You can start to treat parts as black boxes once you feel confident you’ve fully explored them. But when you first start working on a project, you’re forced to see everything. If you start with too big a problem, you may never quite be able to encompass it. So if you need to write a big, complex program, the best way to begin may not be to write a spec for it, but to write a prototype that solves a subset of the problem. Whatever the advantages of planning, they’re often outweighed by the advantages of being able to keep a program in your head.从小项目起步。随着你对程序的熟悉，将其记在脑中会变得越来越容易 —— 当你确信已充分研究过某些部分后，便可将它们视为 “黑箱”（无需关注内部细节）。但项目初期，你必须全面了解所有内容。若一开始就面对过大的问题，你可能永远无法完全掌握它。因此，若你需要编写一个庞大、复杂的程序，最佳起点或许不是撰写需求规格说明书，而是先编写一个能解决部分问题的原型。无论规划有多少好处，其价值往往不及能将程序记在脑中的优势。</p><p>It’s striking how often programmers manage to hit all eight points by accident. Someone has an idea for a new project, but because it’s not officially sanctioned, he has to do it in off hours—which turn out to be more productive because there are no distractions. Driven by his enthusiasm for the new project he works on it for many hours at a stretch. Because it’s initially just an experiment, instead of a “production” language he uses a mere “scripting” language—which is in fact far more powerful. He completely rewrites the program several times; that wouldn’t be justifiable for an official project, but this is a labor of love and he wants it to be perfect. And since no one is going to see it except him, he omits any comments except the note-to-self variety. He works in a small group perforce, because he either hasn’t told anyone else about the idea yet, or it seems so unpromising that no one else is allowed to work on it. Even if there is a group, they couldn’t have multiple people editing the same code, because it changes too fast for that to be possible. And the project starts small because the idea is small at first; he just has some cool hack he wants to try out.令人惊讶的是，程序员们常常会 “意外” 地满足上述所有八点要求。比如，某人有了一个新项目的想法，但由于未获得官方批准，他只能在业余时间开发 —— 而业余时间因无干扰，效率反而更高。出于对新项目的热情，他会连续工作数小时。由于项目初期只是一次实验，他没有使用 “生产级” 语言，而是用了一种 “脚本语言”—— 但这种语言实际上功能强大得多。他会将程序彻底重写多次：这在官方项目中可能不合理，但这是他热爱的事业，他希望做到完美。且由于除自己外无人会看到代码，他除了给自己留的备注外，不会写任何其他注释。他必然会以小团队形式工作：要么是还没告诉别人这个想法，要么是项目看起来前景不明，没人被允许参与。即便有团队，也不会出现多人编辑同一段代码的情况 —— 因为代码更新太快，根本无法实现。项目也会从小规模起步：最初的想法很简单，他只是想尝试一个有趣的小技巧。</p><p>Even more striking are the number of officially sanctioned projects that manage to do all eight things wrong. In fact, if you look at the way software gets written in most organizations, it’s almost as if they were deliberately trying to do things wrong. In a sense, they are. One of the defining qualities of organizations since there have been such a thing is to treat individuals as interchangeable parts. This works well for more parallelizable tasks, like fighting wars. For most of history a well-drilled army of professional soldiers could be counted on to beat an army of individual warriors, no matter how valorous. But having ideas is not very parallelizable. And that’s what programs are: ideas.更令人惊讶的是，许多官方批准的项目，会 “成功” 地违背上述所有八点要求。事实上，若你观察大多数组织的软件开发方式，会发现它们几乎像是在故意做错事。从某种意义上说，确实如此。组织的核心特征之一，就是将个体视为可替换的 “零件”。这种模式对可高度并行的任务（如打仗）很有效：在历史上的大部分时期，一支训练有素的职业军队，无论面对多么英勇的散兵游勇，通常都能获胜。但产生想法的过程，并不具备高度并行性 —— 而程序，本质上就是一种想法。</p><p>It’s not merely true that organizations dislike the idea of depending on individual genius, it’s a tautology. It’s part of the definition of an organization not to. Of our current concept of an organization, at least.组织不愿依赖个体天赋，这不仅是事实，更是一种必然 —— 这是组织定义的一部分，至少在我们当前对 “组织” 的认知中是如此。</p><p>Maybe we could define a new kind of organization that combined the efforts of individuals without requiring them to be interchangeable. Arguably a market is such a form of organization, though it may be more accurate to describe a market as a degenerate case—as what you get by default when organization isn’t possible.或许我们可以定义一种新型组织：它能整合个体的努力，却无需让个体成为可替换的零件。按理说，市场就是这样一种组织形式，但更准确的说法可能是，市场是一种 “简化形式”—— 即当无法形成正式组织时，默认会出现的结果。</p><p>Probably the best we’ll do is some kind of hack, like making the programming parts of an organization work differently from the rest. Perhaps the optimal solution is for big companies not even to try to develop ideas in house, but simply to buy them. But regardless of what the solution turns out to be, the first step is to realize there’s a problem. There is a contradiction in the very phrase “software company.” The two words are pulling in opposite directions. Any good programmer in a large organization is going to be at odds with it, because organizations are designed to prevent what programmers strive for.或许我们目前能做到的最佳方案，只是某种权宜之计，比如让组织中的编程部门采用与其他部门不同的运作方式。最优解甚至可能是：大公司根本不尝试在内部开发创意，而是直接外购。但无论最终解决方案是什么，第一步都是要意识到问题的存在。“软件公司” 这个词本身就存在矛盾 —— 两个词朝着完全相反的方向拉扯。大型组织中的任何一位优秀程序员，都会与组织产生矛盾，因为组织的设计初衷，恰恰是阻碍程序员所追求的目标。</p><p>Good programmers manage to get a lot done anyway. But often it requires practically an act of rebellion against the organizations that employ them. Perhaps it will help if more people understand that the way programmers behave is driven by the demands of the work they do. It’s not because they’re irresponsible that they work in long binges during which they blow off all other obligations, plunge straight into programming instead of writing specs first, and rewrite code that already works. It’s not because they’re unfriendly that they prefer to work alone, or growl at people who pop their head in the door to say hello. This apparently random collection of annoying habits has a single explanation: the power of holding a program in one’s head.尽管如此，优秀的程序员还是能完成大量工作。但这往往需要他们对雇佣自己的组织，进行近乎 “反抗” 的行动。若更多人能理解，程序员的行为方式是由其工作需求所驱动的，情况或许会有所改善。他们长时间连续工作、推掉所有其他义务，直接投入编程而非先写规格说明书，甚至重写已经能运行的代码 —— 这并非因为他们不负责任；他们偏好独自工作，或对探进头来打招呼的人不耐烦地回应 —— 这也并非因为他们不友好。这些看似杂乱的 “令人困扰的习惯”，背后只有一个解释：在脑中牢记程序的重要性。</p><p>Whether or not understanding this can help large organizations, it can certainly help their competitors. The weakest point in big companies is that they don’t let individual programmers do great work. So if you’re a little startup, this is the place to attack them. Take on the kind of problems that have to be solved in one big brain.无论理解这一点是否能帮助大型组织，它肯定能帮助这些组织的竞争对手。大公司最大的弱点，就是不让程序员个体做出出色的工作。因此，如果你是一家小型初创公司，这就是你攻击它们的突破口：去承接那些需要依靠单个人的深入思考才能解决的问题。</p><p>Thanks to Sam Altman, David Greenspan, Aaron Iba, Jessica Livingston, Robert Morris, Peter Norvig, Lisa Randall, Emmett Shear, Sergei Tsarev, and Stephen Wolfram for reading drafts of this.感谢山姆・奥特曼、大卫・格林斯潘、亚伦・伊巴、杰西卡・利文斯顿、罗伯特・莫里斯、彼得・诺维格、莉萨・兰德尔、埃米特・希尔、谢尔盖・察列夫和史蒂芬・沃尔夫勒姆阅读本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物品</title>
    <link href="/2025/09/19/stuff/"/>
    <url>/2025/09/19/stuff/</url>
    
    <content type="html"><![CDATA[<h1 id="Stuff"><a href="#Stuff" class="headerlink" title="Stuff"></a>Stuff</h1><h1 id="物品"><a href="#物品" class="headerlink" title="物品"></a>物品</h1><p>原文链接: <a href="https://paulgraham.com/stuff.html">https://paulgraham.com/stuff.html</a></p><p>July 2007</p><p>I have too much stuff. Most people in America do. In fact, the poorer people are, the more stuff they seem to have. Hardly anyone is so poor that they can’t afford a front yard full of old cars.我拥有太多物品了。大多数美国人都是如此。事实上，人们越贫穷，似乎拥有的物品就越多。几乎没有人穷到连院子里堆满旧汽车都做不到。</p><p>It wasn’t always this way. Stuff used to be rare and valuable. You can still see evidence of that if you look for it. For example, in my house in Cambridge, which was built in 1876, the bedrooms don’t have closets. In those days people’s stuff fit in a chest of drawers. Even as recently as a few decades ago there was a lot less stuff. When I look back at photos from the 1970s, I’m surprised how empty houses look. As a kid I had what I thought was a huge fleet of toy cars, but they’d be dwarfed by the number of toys my nephews have. All together my Matchboxes and Corgis took up about a third of the surface of my bed. In my nephews’ rooms the bed is the only clear space.事情并非一直如此。过去，物品稀缺且珍贵。只要你留心观察，仍能发现相关痕迹。比如，我在剑桥的房子建于 1876 年，卧室里没有壁橱。那时候，人们的所有物品都能放进一个五斗柜。即便就在几十年前，人们拥有的物品也比现在少得多。当我翻看 20 世纪 70 年代的照片时，会惊讶于当时的房子看起来如此空旷。小时候，我曾以为自己拥有一大批玩具车，但和我的侄子们拥有的玩具数量比起来，简直不值一提。我所有的火柴盒小汽车和柯基犬玩具（注：此处 “Corgis” 结合语境指玩具品牌或造型）加起来，也只占了床面的三分之一左右。而在我侄子们的房间里，床是唯一空旷的地方。</p><p>Stuff has gotten a lot cheaper, but our attitudes toward it haven’t changed correspondingly. We overvalue stuff.如今物品变得便宜多了，但我们对物品的态度却没有相应改变。我们高估了物品的价值。</p><p>That was a big problem for me when I had no money. I felt poor, and stuff seemed valuable, so almost instinctively I accumulated it. Friends would leave something behind when they moved, or I’d see something as I was walking down the street on trash night (beware of anything you find yourself describing as “perfectly good”), or I’d find something in almost new condition for a tenth its retail price at a garage sale. And pow, more stuff.在我没钱的时候，这成了一个大问题。我觉得自己很穷，而物品看起来很有价值，所以几乎是本能地开始囤积物品。朋友们搬家时会留下一些东西，或者我在垃圾回收夜（注：指居民集中丢弃大件垃圾的夜晚）沿街散步时会看到些东西（要警惕那些你忍不住形容为 “完好无损” 的物品），又或者我会在庭院旧货拍卖会上，以零售价十分之一的价格淘到几乎全新的东西。就这样，物品越积越多。</p><p>In fact these free or nearly free things weren’t bargains, because they were worth even less than they cost. Most of the stuff I accumulated was worthless, because I didn’t need it.事实上，这些免费或几乎免费的东西并非划算的交易，因为它们的实际价值甚至低于其花费（的成本）。我囤积的大多数物品都毫无价值，因为我根本用不上它们。</p><p>What I didn’t understand was that the value of some new acquisition wasn’t the difference between its retail price and what I paid for it. It was the value I derived from it. Stuff is an extremely illiquid asset. Unless you have some plan for selling that valuable thing you got so cheaply, what difference does it make what it’s “worth?” The only way you’re ever going to extract any value from it is to use it. And if you don’t have any immediate use for it, you probably never will.我过去不明白的是，一件新入手物品的价值，不在于其零售价和我实际支付价格之间的差额，而在于我从中获得的实际效用。物品是流动性极差的资产。除非你有计划把那件低价淘来的 “贵重” 物品卖掉，否则它所谓的 “价值” 又有什么意义呢？从物品中获取价值的唯一方式就是使用它。如果你当下用不上它，很可能以后也永远用不上。</p><p>Companies that sell stuff have spent huge sums training us to think stuff is still valuable. But it would be closer to the truth to treat stuff as worthless.销售物品的公司投入了巨额资金，试图让我们相信物品仍然很有价值。但更接近事实的做法是，把物品视为毫无价值。</p><p>In fact, worse than worthless, because once you’ve accumulated a certain amount of stuff, it starts to own you rather than the other way around. I know of one couple who couldn’t retire to the town they preferred because they couldn’t afford a place there big enough for all their stuff. Their house isn’t theirs; it’s their stuff’s.事实上，物品甚至比毫无价值更糟糕，因为一旦你囤积了一定数量的物品，它们就会开始 “占有” 你，而不是你拥有它们。我认识一对夫妇，他们无法退休后搬到心仪的小镇，因为在那里买不起足够大的房子来存放他们所有的物品。他们的房子不属于他们自己，而是属于他们的那些物品。</p><p>And unless you’re extremely organized, a house full of stuff can be very depressing. A cluttered room saps one’s spirits. One reason, obviously, is that there’s less room for people in a room full of stuff. But there’s more going on than that. I think humans constantly scan their environment to build a mental model of what’s around them. And the harder a scene is to parse, the less energy you have left for conscious thoughts. A cluttered room is literally exhausting.而且，除非你极其擅长整理，否则堆满物品的房子会让人非常压抑。杂乱的房间会消磨人的精神。一个很明显的原因是，堆满物品的房间里，留给人的空间就少了。但这背后还有更深层的原因。我认为，人类会不断观察周围环境，在大脑中构建出周围事物的 “心理模型”。一个场景越难梳理清晰，留给有意识思考的精力就越少。从字面意义上来说，杂乱的房间会让人精疲力竭。</p><p>(This could explain why clutter doesn’t seem to bother kids as much as adults. Kids are less perceptive. They build a coarser model of their surroundings, and this consumes less energy.)（这或许能解释为什么杂乱对孩子的影响不像对成年人那么大。孩子的感知能力较弱，他们对周围环境构建的 “心理模型” 更粗糙，因此消耗的精力也更少。）</p><p>I first realized the worthlessness of stuff when I lived in Italy for a year. All I took with me was one large backpack of stuff. The rest of my stuff I left in my landlady’s attic back in the US. And you know what? All I missed were some of the books. By the end of the year I couldn’t even remember what else I had stored in that attic.我第一次意识到物品毫无价值，是在意大利生活的那一年。我随身只带了一个装满物品的大背包，其余的物品都留在了美国房东的阁楼里。你猜怎么着？我唯一想念的只有几本书。到那一年结束时，我甚至想不起来阁楼里还存放着其他什么东西。</p><p>And yet when I got back I didn’t discard so much as a box of it. Throw away a perfectly good rotary telephone? I might need that one day.然而，当我回国后，我连一箱物品都舍不得丢弃。把一部完好无损的旋转拨号电话扔掉？说不定哪天我还会用得上呢。</p><p>The really painful thing to recall is not just that I accumulated all this useless stuff, but that I often spent money I desperately needed on stuff that I didn’t.现在回想起来，真正让人难受的不仅是我囤积了这么多无用的物品，更是我常常把急需用的钱花在了不需要的物品上。</p><p>Why would I do that? Because the people whose job is to sell you stuff are really, really good at it. The average 25 year old is no match for companies that have spent years figuring out how to get you to spend money on stuff. They make the experience of buying stuff so pleasant that “shopping” becomes a leisure activity.我为什么会这么做呢？因为那些以销售物品为业的人实在太擅长推销了。一个普通的 25 岁年轻人，根本不是那些花了数年时间研究如何让人们花钱买东西的公司的对手。这些公司把购物体验打造得无比愉悦，以至于 “购物” 本身都成了一种休闲活动。</p><p>How do you protect yourself from these people? It can’t be easy. I’m a fairly skeptical person, and their tricks worked on me well into my thirties. But one thing that might work is to ask yourself, before buying something, “is this going to make my life noticeably better?”如何才能避免被这些商家 “套路” 呢？这绝非易事。我本身是一个相当多疑的人，但他们的营销手段直到我三十多岁时还在影响我。不过，有一个方法或许管用：在买东西之前，问问自己：“这件东西能让我的生活明显变好吗？”</p><p>A friend of mine cured herself of a clothes buying habit by asking herself before she bought anything “Am I going to wear this all the time?” If she couldn’t convince herself that something she was thinking of buying would become one of those few things she wore all the time, she wouldn’t buy it. I think that would work for any kind of purchase. Before you buy anything, ask yourself: will this be something I use constantly? Or is it just something nice? Or worse still, a mere bargain?我的一个朋友通过一个方法改掉了乱买衣服的习惯：在买任何衣服前，她都会问自己 “我会经常穿这件吗？” 如果她无法说服自己，即将要买的衣服会成为她常穿的少数衣物之一，她就不会买。我认为这个方法适用于任何购物场景。买任何东西之前，问问自己：这件东西我会经常用吗？还是仅仅只是看起来不错？更糟糕的是，只是因为它很便宜？</p><p>The worst stuff in this respect may be stuff you don’t use much because it’s too good. Nothing owns you like fragile stuff. For example, the “good china” so many households have, and whose defining quality is not so much that it’s fun to use, but that one must be especially careful not to break it.从这个角度来说，最糟糕的物品或许是那些因为 “太好” 而很少使用的东西。没有什么比易碎的物品更能 “束缚” 人了。比如，很多家庭都有 “精美瓷器”，这类瓷器最显著的特点不是用起来很有乐趣，而是必须格外小心以免打碎它。</p><p>Another way to resist acquiring stuff is to think of the overall cost of owning it. The purchase price is just the beginning. You’re going to have to think about that thing for years—perhaps for the rest of your life. Every thing you own takes energy away from you. Some give more than they take. Those are the only things worth having.另一个抵制囤积物品的方法是，考虑拥有一件物品的总成本。购买价格只是开始，你可能在未来几年 —— 甚至余生都要为这件东西操心。你拥有的每一件物品都会消耗你的精力。只有那些带来的价值（效用）大于其消耗的物品，才值得拥有。</p><p>I’ve now stopped accumulating stuff. Except books—but books are different. Books are more like a fluid than individual objects. It’s not especially inconvenient to own several thousand books, whereas if you owned several thousand random possessions you’d be a local celebrity. But except for books, I now actively avoid stuff. If I want to spend money on some kind of treat, I’ll take services over goods any day.现在我已经不再囤积物品了。除了书籍 —— 但书籍是不同的。书籍更像是一种 “流动的资源”，而非独立的物品。拥有几千本书并不会带来特别多的不便，但如果拥有几千件杂乱无章的物品，你可能会成为当地的 “名人”（注：此处含调侃意味，指因囤积过多物品而引人注意）。除了书籍之外，我现在会主动避开不必要的物品。如果我想花钱犒劳自己，我会选择服务而非实物商品。</p><p>I’m not claiming this is because I’ve achieved some kind of zenlike detachment from material things. I’m talking about something more mundane. A historical change has taken place, and I’ve now realized it. Stuff used to be valuable, and now it’s not.我并不是说自己已经达到了那种对物质无欲无求的禅意境界。我说的是更实际的情况：一场历史性的转变已经发生，而我现在意识到了这一点。过去，物品是有价值的，而现在，它们不再有（过去那样的）价值了。</p><p>In industrialized countries the same thing happened with food in the middle of the twentieth century. As food got cheaper (or we got richer; they’re indistinguishable), eating too much started to be a bigger danger than eating too little. We’ve now reached that point with stuff. For most people, rich or poor, stuff has become a burden.在工业化国家，20 世纪中期的食品也曾经历过类似的变化。随着食品价格下降（或者说我们变得更富有了 —— 这两者难以区分），吃得太多开始比吃得太少更危险。如今，物品也走到了这一步。对大多数人来说，无论贫富，物品都已经变成了一种负担。</p><p>The good news is, if you’re carrying a burden without knowing it, your life could be better than you realize. Imagine walking around for years with five pound ankle weights, then suddenly having them removed.好消息是，如果你在不知不觉中背负着（物品带来的）负担，那么你的生活其实可以比现在更好。想象一下，多年来你一直戴着五磅重的脚踝负重带走路，某天突然把它取了下来（那种轻松感）。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>股权等式</title>
    <link href="/2025/09/19/the-equity-equation/"/>
    <url>/2025/09/19/the-equity-equation/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Equity-Equation"><a href="#The-Equity-Equation" class="headerlink" title="The Equity Equation"></a>The Equity Equation</h1><h1 id="股权等式"><a href="#股权等式" class="headerlink" title="股权等式"></a>股权等式</h1><p>原文链接: <a href="https://paulgraham.com/equity.html">https://paulgraham.com/equity.html</a></p><p>July 2007</p><p>An investor wants to give you money for a certain percentage of your startup. Should you take it? You’re about to hire your first employee. How much stock should you give him?一位投资者想向你的初创公司注资，以换取一定比例的股权。你该接受吗？你即将招聘第一名员工，应该给他多少股票？</p><p>These are some of the hardest questions founders face. And yet both have the same answer:这些是创始人面临的最棘手问题之一，而两者却有着相同的答案：</p><p>1&#x2F;(1 - n)1&#x2F;(1 - n)</p><p>Whenever you’re trading stock in your company for anything, whether it’s money or an employee or a deal with another company, the test for whether to do it is the same. You should give up n% of your company if what you trade it for improves your average outcome enough that the (100 - n)% you have left is worth more than the whole company was before.无论你是用公司股票换取何种东西 —— 无论是资金、员工，还是与另一家公司的合作交易 —— 判断是否值得做的标准都是一致的。当你用 n% 的公司股权去交换某样东西时，只有当这笔交换能显著提升公司的平均收益，使得你剩余的（100 - n）% 股权的价值超过交换前整个公司的价值，你才应该放弃这 n% 的股权。</p><p>For example, if an investor wants to buy half your company, how much does that investment have to improve your average outcome for you to break even? Obviously it has to double: if you trade half your company for something that more than doubles the company’s average outcome, you’re net ahead. You have half as big a share of something worth more than twice as much.举个例子，若一位投资者想收购你公司一半的股权，这笔投资需要将公司的平均收益提升多少，你才能实现盈亏平衡？答案显然是翻倍：如果你用公司一半的股权换取的东西，能让公司平均收益提升一倍以上，那么你就是净赚的。因为你持有的股权比例虽减半，但对应的公司价值却不止翻了一倍。</p><p>In the general case, if n is the fraction of the company you’re giving up, the deal is a good one if it makes the company worth more than 1&#x2F;(1 - n).一般来说，若 n 是你打算出让的公司股权比例（以小数形式表示），那么只有当这笔交易能让公司价值提升至原来的 1&#x2F;(1 - n) 倍以上时，它才是一笔划算的交易。</p><p>For example, suppose Y Combinator offers to fund you in return for 7% of your company. In this case, n is .07 and 1&#x2F;(1 - n) is 1.075. So you should take the deal if you believe we can improve your average outcome by more than 7.5%. If we improve your outcome by 10%, you’re net ahead, because the remaining .93 you hold is worth .93 x 1.1 &#x3D; 1.023. [1]比如，假设 Y Combinator（美国知名创业孵化器）提出向你提供资金，以换取你公司 7% 的股权。此时，n 为 0.07，1&#x2F;(1 - n) 的结果是 1.075。因此，只要你相信我们能让你公司的平均收益提升 7.5% 以上，就应该接受这笔交易。若我们能将你的收益提升 10%，你就是净赚的，因为你剩余的 93% 股权对应的价值为 0.93×1.1 &#x3D; 1.023（即相当于交易前整个公司价值的 1.023 倍）。[1]</p><p>One of the things the equity equation shows us is that, financially at least, taking money from a top VC firm can be a really good deal. Greg Mcadoo from Sequoia recently said at a YC dinner that when Sequoia invests alone they like to take about 30% of a company. 1&#x2F;.7 &#x3D; 1.43, meaning that deal is worth taking if they can improve your outcome by more than 43%. For the average startup, that would be an extraordinary bargain. It would improve the average startup’s prospects by more than 43% just to be able to say they were funded by Sequoia, even if they never actually got the money.股权等式告诉我们的一点是，至少从财务角度来看，接受顶级风险投资（VC）公司的注资可能是一笔非常划算的交易。红杉资本（Sequoia）的格雷格・麦卡杜（Greg Mcadoo）最近在 YC 的一次晚宴上表示，当红杉单独投资时，通常会希望获得被投公司约 30% 的股权。按照公式计算，1&#x2F;0.7≈1.43，这意味着只要红杉能让你公司的收益提升 43% 以上，这笔交易就值得接受。对于普通初创公司而言，这绝对是一笔超值的交易 —— 即便最终没有拿到红杉的资金，仅仅是 “获得红杉投资” 这一标签，就能让普通初创公司的前景提升 43% 以上。</p><p>The reason Sequoia is such a good deal is that the percentage of the company they take is artificially low. They don’t even try to get market price for their investment; they limit their holdings to leave the founders enough stock to feel the company is still theirs.红杉的投资之所以如此划算，是因为他们要求的股权比例被人为压低了。他们甚至不会试图为自己的投资争取市场公允的股权比例，而是会限制自身的持股比例，以便给创始人留下足够多的股权，让创始人依然觉得公司是自己的。</p><p>The catch is that Sequoia gets about 6000 business plans a year and funds about 20 of them, so the odds of getting this great deal are 1 in 300. The companies that make it through are not average startups.但问题在于，红杉每年会收到约 6000 份商业计划书，最终却只投资其中 20 家左右的公司，因此能获得这笔优质交易的概率仅为 300 分之一。能通过红杉筛选的公司，绝非普通的初创公司。</p><p>Of course, there are other factors to consider in a VC deal. It’s never just a straight trade of money for stock. But if it were, taking money from a top firm would generally be a bargain.当然，在风险投资交易中，还需要考虑其他因素。它从来都不只是简单的 “用钱换股权”。但即便仅从这一点来看，接受顶级风投公司的注资通常也是笔划算的买卖。</p><p>You can use the same formula when giving stock to employees, but it works in the other direction. If i is the average outcome for the company with the addition of some new person, then they’re worth n such that i &#x3D; 1&#x2F;(1 - n). Which means n &#x3D; (i - 1)&#x2F;i.给员工分配股票时，也可以使用同样的公式，但计算逻辑是反向的。假设 i 是公司新增某名员工后，平均收益能达到的倍数（相对于没有该员工时），那么这名员工对应的合理股权比例 n 需满足 i &#x3D; 1&#x2F;(1 - n)，由此可推导出 n &#x3D; (i - 1)&#x2F;i。</p><p>For example, suppose you’re just two founders and you want to hire an additional hacker who’s so good you feel he’ll increase the average outcome of the whole company by 20%. n &#x3D; (1.2 - 1)&#x2F;1.2 &#x3D; .167. So you’ll break even if you trade 16.7% of the company for him.例如，假设你公司目前只有两位创始人，你想招聘一名顶尖的程序员，并且你认为他能让公司的平均收益提升 20%。根据公式计算，n &#x3D; (1.2 - 1)&#x2F;1.2 ≈ 0.167，也就是说，若用公司 16.7% 的股权来聘用他，你能实现盈亏平衡。</p><p>That doesn’t mean 16.7% is the right amount of stock to give him. Stock is not the only cost of hiring someone: there’s usually salary and overhead as well. And if the company merely breaks even on the deal, there’s no reason to do it.但这并不意味着 16.7% 的股权就是给他的合理份额。股票并非招聘员工的唯一成本，通常还包括薪水和运营开支。而且，如果公司在这笔招聘交易中仅仅实现盈亏平衡，那就没有必要去做。</p><p>I think to translate salary and overhead into stock you should multiply the annual rate by about 1.5. Most startups grow fast or die; if you die you don’t have to pay the guy, and if you grow fast you’ll be paying next year’s salary out of next year’s valuation, which should be 3x this year’s. If your valuation grows 3x a year, the total cost in stock of a new hire’s salary and overhead is 1.5 years’ cost at the present valuation. [2]我认为，若要将薪水和运营开支折算成股权，应将年度成本乘以约 1.5。大多数初创公司要么快速发展，要么走向倒闭：如果公司倒闭，你就无需再向这名员工支付报酬；如果公司发展迅速，下一年的薪水将从下一年的公司估值中支出，而下一年的估值通常会是今年的 3 倍。若公司估值每年增长 3 倍，那么聘用新员工所产生的薪水和运营开支，折算成股权后，相当于当前估值下 1.5 年的成本。[2]</p><p>How much of an additional margin should the company need as the “activation energy” for the deal? Since this is in effect the company’s profit on a hire, the market will determine that: if you’re a hot opportunity, you can charge more.公司需要多少额外的利润空间作为达成这笔招聘交易的 “启动能量” 呢？这本质上相当于公司在这次招聘中获得的利润，具体数额由市场决定：如果你的公司是个热门的创业项目，你就能要求更高的利润空间。</p><p>Let’s run through an example. Suppose the company wants to make a “profit” of 50% on the new hire mentioned above. So subtract a third from 16.7% and we have 11.1% as his “retail” price. Suppose further that he’s going to cost $60k a year in salary and overhead, x 1.5 &#x3D; $90k total. If the company’s valuation is $2 million, $90k is 4.5%. 11.1% - 4.5% &#x3D; an offer of 6.6%.我们来举个具体的例子。假设公司希望在上述招聘中获得 50% 的 “利润”，那么就需要从 16.7% 的盈亏平衡股权比例中减去三分之一（即 5.6% 左右），得出 11.1% 作为这名员工的 “定价” 股权比例。再假设他每年的薪水和运营开支成本为 6 万美元，乘以 1.5 后总成本为 9 万美元。如果公司当前估值为 200 万美元，那么 9 万美元相当于公司估值的 4.5%。用 11.1% 减去 4.5%，最终得出应向他提供 6.6% 的公司股权。</p><p>Incidentally, notice how important it is for early employees to take little salary. It comes right out of stock that could otherwise be given to them.顺便提一句，要注意早期员工接受较低薪水的重要性 —— 薪水过高，会直接挤占原本可以分配给他们的股权份额。</p><p>Obviously there is a great deal of play in these numbers. I’m not claiming that stock grants can now be reduced to a formula. Ultimately you always have to guess. But at least know what you’re guessing. If you choose a number based on your gut feel, or a table of typical grant sizes supplied by a VC firm, understand what those are estimates of.显然，这些数字存在很大的浮动空间。我并不是说股票分配现在可以完全依靠一个公式来确定。归根结底，你还是需要进行估算，但至少要清楚自己在估算什么。如果你根据直觉，或者风投公司提供的典型股权分配表来确定股权比例，要明白这些数字背后所代表的估算逻辑。</p><p>And more generally, when you make any decision involving equity, run it through 1&#x2F;(1 - n) to see if it makes sense. You should always feel richer after trading equity. If the trade didn’t increase the value of your remaining shares enough to put you net ahead, you wouldn’t have (or shouldn’t have) done it.更宽泛地说，每当你做出涉及股权的决策时，都应该用 1&#x2F;(1 - n) 这个公式来检验其合理性。在进行股权交易后，你理应感觉自己的资产变得更丰厚了。如果这笔交易未能让你剩余股权的价值提升到足以让你净赚的程度，你就不会（也不应该）去做这笔交易。</p><p><strong>Notes注释</strong></p><p>[1] This is why we can’t believe anyone would think Y Combinator was a bad deal. Does anyone really think we’re so useless that in three months we can’t improve a startup’s prospects by 7.5%?[1] 这就是为什么我们无法相信有人会认为 Y Combinator 的投资是一笔不划算的交易。真的会有人觉得我们如此无用，以至于在三个月内都无法让一家初创公司的前景提升 7.5% 吗？</p><p>[2] The obvious choice for your present valuation is the post-money valuation of your last funding round. This probably undervalues the company, though, because (a) unless your last round just happened, the company is presumably worth more, and (b) the valuation of an early funding round usually reflects some other contribution by the investors.[2] 确定公司当前估值最直接的方法，是参考上一轮融资的投后估值。但这一数值很可能低估了公司的实际价值，原因有二：（a）除非上一轮融资刚刚完成，否则公司的价值很可能已经有所增长；（b）早期融资的估值通常还反映了投资者所提供的其他额外支持（而非仅仅是资金）。</p><p>Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Hutch Fishman, David Hornik, Paul Kedrosky, Jessica Livingston, Gary Sabot, and Joshua Schachter for reading drafts of this.感谢山姆・奥特曼（Sam Altman）、特雷弗・布莱克韦尔（Trevor Blackwell）、保罗・布赫海特（Paul Buchheit）、哈奇・菲什曼（Hutch Fishman）、大卫・霍尼克（David Hornik）、保罗・凯德罗夫斯基（Paul Kedrosky）、杰西卡・利文斯顿（Jessica Livingston）、加里・萨博特（Gary Sabot）以及约书亚・沙克特（Joshua Schachter）阅读本文的初稿并提出意见。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工会的另一种理论</title>
    <link href="/2025/09/17/an-alternative-theory-of-unions/"/>
    <url>/2025/09/17/an-alternative-theory-of-unions/</url>
    
    <content type="html"><![CDATA[<h1 id="An-Alternative-Theory-of-Unions"><a href="#An-Alternative-Theory-of-Unions" class="headerlink" title="An Alternative Theory of Unions"></a>An Alternative Theory of Unions</h1><h1 id="工会的另一种理论"><a href="#工会的另一种理论" class="headerlink" title="工会的另一种理论"></a>工会的另一种理论</h1><p>原文链接: <a href="https://paulgraham.com/unions.html">https://paulgraham.com/unions.html</a></p><p>May 2007</p><p>People who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. In those days we had a large number of high-paying union manufacturing jobs that boosted the median income. I wouldn’t quite call the high-paying union job a myth, but I think people who dwell on it are reading too much into it.<br>担心贫富差距日益扩大的人，通常会将 20 世纪中期视为一个黄金时代。在那个年代，我们有大量高薪的工会制造业岗位，这些岗位推高了收入中位数。我不会说高薪工会岗位完全是个神话，但我认为过分纠结于这一点的人，实在是过度解读了。</p><p>Oddly enough, it was working with startups that made me realize where the high-paying union job came from. In a rapidly growing market, you don’t worry too much about efficiency. It’s more important to grow fast. If there’s some mundane problem getting in your way, and there’s a simple solution that’s somewhat expensive, just take it and get on with more important things. EBay didn’t win by paying less for servers than their competitors.<br>说来也怪，正是在初创企业的工作经历，让我弄明白了高薪工会岗位的来源。在一个快速增长的市场中，人们不会太在意效率，快速发展才是更重要的事。如果有某个 mundane（ mundane：平凡的、日常的）问题阻碍了你，而解决这个问题有一个简单却略显昂贵的办法，那就采用这个办法，然后去处理更重要的事情。易贝（eBay）的成功，并不是靠比竞争对手花更少的钱购买服务器。</p><p>Difficult though it may be to imagine now, manufacturing was a growth industry in the mid twentieth century. This was an era when small firms making everything from cars to candy were getting consolidated into a new kind of corporation with national reach and huge economies of scale. You had to grow fast or die. Workers were for these companies what servers are for an Internet startup. A reliable supply was more important than low cost.<br>尽管现在可能难以想象，但 20 世纪中期的制造业曾是一个增长型行业。在那个时代，从生产汽车到糖果等各类产品的小公司，都在整合成为一种新型企业 —— 这类企业业务遍及全国，还拥有巨大的规模经济效应。在当时，企业要么快速发展，要么就会被淘汰。对于这些企业而言，工人就如同互联网初创公司眼中的服务器：稳定的供应比低成本更重要。</p><p>If you looked in the head of a 1950s auto executive, the attitude must have been: sure, give ‘em whatever they ask for, so long as the new model isn’t delayed.<br>倘若能窥探到 20 世纪 50 年代汽车行业高管的想法，他们的态度必定是：没问题，只要新款车型不延期，他们要什么就给什么。</p><p>In other words, those workers were not paid what their work was worth. Circumstances being what they were, companies would have been stupid to insist on paying them so little.<br>换句话说，那些工人的薪资并非基于他们工作的实际价值。在当时的形势下，如果企业坚持给工人开低工资，那才是愚蠢的做法。</p><p>If you want a less controversial example of this phenomenon, ask anyone who worked as a consultant building web sites during the Internet Bubble. In the late nineties you could get paid huge sums of money for building the most trivial things. And yet does anyone who was there have any expectation those days will ever return? I doubt it. Surely everyone realizes that was just a temporary aberration.<br>若想找一个争议性较小的例子来佐证这种现象，不妨问问在互联网泡沫时期从事网站搭建咨询工作的人。20 世纪 90 年代末，即便是做最微不足道的网站搭建工作，也能拿到高额报酬。但当时经历过那段时光的人，有人会期待那样的日子重现吗？我对此表示怀疑。显然，所有人都明白，那不过是一段暂时的反常时期。</p><p>The era of labor unions seems to have been the same kind of aberration, just spread over a longer period, and mixed together with a lot of ideology that prevents people from viewing it with as cold an eye as they would something like consulting during the Bubble.<br>工会的鼎盛时代似乎也是这样一段反常时期，只不过持续时间更长，还掺杂了大量意识形态因素，使得人们无法像看待互联网泡沫时期的咨询行业那样，以冷静客观的眼光看待它。</p><p>Basically, unions were just Razorfish.<br>本质上，工会就如同（互联网泡沫时期的）Razorfish（一家当时因市场泡沫而快速扩张、薪资虚高的数字服务公司，此处用以类比工会在特定时代背景下的 “虚高” 状态）。</p><p>People who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now? The best they can do is fall back on the default explanation of people living in fallen civilizations. Our ancestors were giants. The workers of the early twentieth century must have had a moral courage that’s lacking today.<br>那些认为劳工运动是由英勇的工会组织者缔造的人，面临着一个难以解释的问题：为何现在工会的规模在不断缩小？他们能给出的最佳解释，不过是沿用了那些认为文明已衰落之人的惯用说辞：我们的先辈是伟人，20 世纪早期的工人必定拥有如今人们所缺乏的道德勇气。</p><p>In fact there’s a simpler explanation. The early twentieth century was just a fast-growing startup overpaying for infrastructure. And we in the present are not a fallen people, who have abandoned whatever mysterious high-minded principles produced the high-paying union job. We simply live in a time when the fast-growing companies overspend on different things.<br>事实上，答案要简单得多。20 世纪早期的制造业，就像一家快速发展的初创公司，为 “基础设施”（此处指工人）支付了过高的成本。而如今的我们，并非是堕落的一代人 —— 没有抛弃那些催生高薪工会岗位的神秘崇高原则。我们只是生活在一个不同的时代：当下快速发展的企业，将过多的资金花在了其他领域而已。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑客的融资指南</title>
    <link href="/2025/09/16/the-hackers-guide-to-investors/"/>
    <url>/2025/09/16/the-hackers-guide-to-investors/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Hacker’s-Guide-to-Investors"><a href="#The-Hacker’s-Guide-to-Investors" class="headerlink" title="The Hacker’s Guide to Investors"></a>The Hacker’s Guide to Investors</h1><h1 id="黑客的融资指南"><a href="#黑客的融资指南" class="headerlink" title="黑客的融资指南"></a>黑客的融资指南</h1><p>原文链接: <a href="https://paulgraham.com/guidetoinvestors.html">https://paulgraham.com/guidetoinvestors.html</a></p><p>April 2007</p><p>(This essay is derived from a keynote talk at the 2007 ASES Summit at Stanford.)<br>（本文改编自 2007 年斯坦福大学 ASES 峰会的主题演讲。）</p><p>The world of investors is a foreign one to most hackers—partly because investors are so unlike hackers, and partly because they tend to operate in secret. I’ve been dealing with this world for many years, both as a founder and an investor, and I still don’t fully understand it.<br>对大多数黑客而言，投资者的世界是陌生的 —— 部分原因是投资者与黑客差异巨大，另一部分原因是他们往往在幕后运作。多年来，我既以创始人身份、也以投资者身份接触这个领域，却仍未完全弄懂它。</p><p>In this essay I’m going to list some of the more surprising things I’ve learned about investors. Some I only learned in the past year.<br>在本文中，我将列出一些关于投资者的、令人意外的发现，其中有些是我在过去一年里才领悟到的。</p><p>Teaching hackers how to deal with investors is probably the second most important thing we do at Y Combinator. The most important thing for a startup is to make something good. But everyone knows that’s important. The dangerous thing about investors is that hackers don’t know how little they know about this strange world.<br>在 Y Combinator（创业孵化器），教黑客如何与投资者打交道或许是我们第二重要的工作。对初创公司来说，最重要的事无疑是打造出优质产品，但这一点早已是人尽皆知。而投资者相关事宜的危险之处在于，黑客根本意识不到自己对这个陌生领域的了解有多浅薄。</p><h2 id="The-investors-are-what-make-a-startup-hub"><a href="#The-investors-are-what-make-a-startup-hub" class="headerlink" title="The investors are what make a startup hub."></a><strong>The investors are what make a startup hub.</strong></h2><h2 id="投资者是初创企业中心形成的关键"><a href="#投资者是初创企业中心形成的关键" class="headerlink" title="投资者是初创企业中心形成的关键"></a><strong>投资者是初创企业中心形成的关键</strong></h2><p>About a year ago I tried to figure out what you’d need to reproduce Silicon Valley. I decided the critical ingredients were rich people and nerds—investors and founders. People are all you need to make technology, and all the other people will move.<br>大约一年前，我曾试图弄明白：要复制一个 “硅谷”，究竟需要哪些条件？最终我认为，核心要素是两类人 —— 有钱人和技术达人，也就是投资者与创始人。发展科技所需的核心只有人，其他相关人员都会随之聚集而来。</p><p>If I had to narrow that down, I’d say investors are the limiting factor. Not because they contribute more to the startup, but simply because they’re least willing to move. They’re rich. They’re not going to move to Albuquerque just because there are some smart hackers there they could invest in. Whereas hackers will move to the Bay Area to find investors.<br>若要进一步缩小范围，我会说投资者是其中的限制性因素。这并非因为他们对初创公司的贡献更大，纯粹是因为他们最不愿迁移。他们本身财力雄厚，不会仅仅因为阿尔伯克基（美国新墨西哥州城市）有一些值得投资的聪明黑客，就举家搬到那里。但反过来，黑客们却会为了寻找投资者而迁往旧金山湾区。</p><h2 id="Angel-investors-are-the-most-critical"><a href="#Angel-investors-are-the-most-critical" class="headerlink" title="Angel investors are the most critical."></a><strong>Angel investors are the most critical.</strong></h2><h2 id="天使投资者至关重要"><a href="#天使投资者至关重要" class="headerlink" title="天使投资者至关重要"></a><strong>天使投资者至关重要</strong></h2><p>There are several types of investors. The two main categories are angels and VCs: VCs invest other people’s money, and angels invest their own.<br>投资者分为多种类型，其中最主要的两类是天使投资者和风险投资家（VC）：风险投资家用别人的钱进行投资，而天使投资者则用自己的钱投资。</p><p>Though they’re less well known, the angel investors are probably the more critical ingredient in creating a silicon valley. Most companies that VCs invest in would never have made it that far if angels hadn’t invested first. VCs say between half and three quarters of companies that raise series A rounds have taken some outside investment already. [1]<br>尽管天使投资者的知名度较低，但在打造 “硅谷式” 创新生态的过程中，他们或许是更关键的要素。如果没有天使投资者率先注资，大多数获得风险投资的公司根本走不到那一步。风险投资家们表示，在进行 A 轮融资的公司中，有一半到四分之三的企业此前已经获得过外部投资。[1]</p><p>Angels are willing to fund riskier projects than VCs. They also give valuable advice, because (unlike VCs) many have been startup founders themselves.<br>相比风险投资家，天使投资者更愿意为高风险项目提供资金。他们还能给出极具价值的建议，因为（与风险投资家不同）许多天使投资者本身就曾是初创公司的创始人。</p><p>Google’s story shows the key role angels play. A lot of people know Google raised money from Kleiner and Sequoia. What most don’t realize is how late. That VC round was a series B round; the premoney valuation was $75 million. Google was already a successful company at that point. Really, Google was funded with angel money.<br>谷歌的案例充分体现了天使投资者的关键作用。很多人都知道谷歌曾从凯鹏华盈（Kleiner）和红杉资本（Sequoia）获得投资，但大多数人没意识到，这轮风险投资来得很晚 —— 那是一轮 B 轮融资，投资前估值已达 7500 万美元，彼时的谷歌早已是一家成功的公司。事实上，谷歌的早期资金源自天使投资。</p><p>It may seem odd that the canonical Silicon Valley startup was funded by angels, but this is not so surprising. Risk is always proportionate to reward. So the most successful startup of all is likely to have seemed an extremely risky bet at first, and that is exactly the kind VCs won’t touch.<br>作为硅谷初创企业的典范，谷歌早期依赖天使投资，这听起来或许有些反常，但其实不足为奇。风险与回报始终成正比，因此，最成功的初创公司在起步阶段，往往看起来像是风险极高的投资标的 —— 而这类项目恰恰是风险投资家不愿触碰的。</p><p>Where do angel investors come from? From other startups. So startup hubs like Silicon Valley benefit from something like the marketplace effect, but shifted in time: startups are there because startups were there.<br>天使投资者来自哪里？答案是其他初创公司的成功者。因此，像硅谷这样的初创企业中心，受益于一种类似 “市场效应” 的现象，只是这种效应存在时间差：如今这里有初创公司，是因为过去这里就有初创公司（并培育出了天使投资者）。</p><h2 id="Angels-don’t-like-publicity"><a href="#Angels-don’t-like-publicity" class="headerlink" title="Angels don’t like publicity."></a><strong>Angels don’t like publicity.</strong></h2><h2 id="天使投资者不喜欢抛头露面"><a href="#天使投资者不喜欢抛头露面" class="headerlink" title="天使投资者不喜欢抛头露面"></a><strong>天使投资者不喜欢抛头露面</strong></h2><p>If angels are so important, why do we hear more about VCs? Because VCs like publicity. They need to market themselves to the investors who are their “customers”—the endowments and pension funds and rich families whose money they invest—and also to founders who might come to them for funding.<br>既然天使投资者如此重要，为什么我们听到更多的是风险投资家的消息？因为风险投资家喜欢曝光。他们需要向自己的 “客户”—— 也就是那些委托他们管理资金的捐赠基金、养老基金和富裕家族 —— 进行自我营销，同时也需要向可能寻求他们投资的初创公司创始人展示自身实力。</p><p>Angels don’t need to market themselves to investors because they invest their own money. Nor do they want to market themselves to founders: they don’t want random people pestering them with business plans. Actually, neither do VCs. Both angels and VCs get deals almost exclusively through personal introductions. [2]<br>天使投资者无需向其他投资者进行自我营销，因为他们用的是自己的钱。他们也不愿向创始人营销自己：不想被陌生人拿着商业计划书纠缠。事实上，风险投资家也同样如此 —— 无论是天使投资者还是风险投资家，几乎都只通过私人介绍获取投资项目。[2]</p><p>The reason VCs want a strong brand is not to draw in more business plans over the transom, but so they win deals when competing against other VCs. Whereas angels are rarely in direct competition, because (a) they do fewer deals, (b) they’re happy to split them, and (c) they invest at a point where the stream is broader.<br>风险投资家之所以想打造强大的品牌，并非为了吸引更多主动投递的商业计划书，而是为了在与其他风险投资机构竞争时，能成功拿下优质项目。而天使投资者则很少陷入直接竞争，原因有三：（1）他们参与的投资项目数量更少；（2）他们愿意与其他天使投资者共同投资；（3）他们投资的阶段更早，可选的项目范围更广。</p><h2 id="Most-investors-especially-VCs-are-not-like-founders"><a href="#Most-investors-especially-VCs-are-not-like-founders" class="headerlink" title="Most investors, especially VCs, are not like founders."></a><strong>Most investors, especially VCs, are not like founders.</strong></h2><h2 id="大多数投资者（尤其是风险投资家）与创始人截然不同"><a href="#大多数投资者（尤其是风险投资家）与创始人截然不同" class="headerlink" title="大多数投资者（尤其是风险投资家）与创始人截然不同"></a><strong>大多数投资者（尤其是风险投资家）与创始人截然不同</strong></h2><p>Some angels are, or were, hackers. But most VCs are a different type of people: they’re dealmakers.<br>有些天使投资者现在是、或者曾经是黑客，但大多数风险投资家属于另一种类型 —— 他们是交易撮合者。</p><p>If you’re a hacker, here’s a thought experiment you can run to understand why there are basically no hacker VCs: How would you like a job where you never got to make anything, but instead spent all your time listening to other people pitch (mostly terrible) projects, deciding whether to fund them, and sitting on their boards if you did? That would not be fun for most hackers. Hackers like to make things. This would be like being an administrator.<br>如果你是一名黑客，可以做这样一个思想实验，来理解为什么几乎没有 “黑客型” 风险投资家：假设有一份工作，你永远无法亲手创造任何东西，反而要把所有时间花在听别人推销（大多很糟糕的）项目、判断是否投资，以及投资后进入公司董事会 —— 你会喜欢这样的工作吗？对大多数黑客来说，这毫无乐趣可言。黑客喜欢动手创造，而这份工作更像是当一名行政管理者。</p><p>Because most VCs are a different species of people from founders, it’s hard to know what they’re thinking. If you’re a hacker, the last time you had to deal with these guys was in high school. Maybe in college you walked past their fraternity on your way to the lab. But don’t underestimate them. They’re as expert in their world as you are in yours. What they’re good at is reading people, and making deals work to their advantage. Think twice before you try to beat them at that.<br>由于大多数风险投资家与创始人属于完全不同的群体，要搞懂他们的想法并不容易。如果你是一名黑客，上一次不得不与这类人打交道可能还是在高中时期 —— 或许在大学里，你去实验室的路上会路过他们的兄弟会。但千万别低估他们：他们在自己的领域里，就像你在技术领域里一样专业。他们擅长洞察人心，并通过交易为自己争取最大利益。若想在这方面胜过他们，一定要三思而后行。</p><h2 id="Most-investors-are-momentum-investors"><a href="#Most-investors-are-momentum-investors" class="headerlink" title="Most investors are momentum investors."></a><strong>Most investors are momentum investors.</strong></h2><h2 id="大多数投资者是趋势投资者"><a href="#大多数投资者是趋势投资者" class="headerlink" title="大多数投资者是趋势投资者"></a><strong>大多数投资者是趋势投资者</strong></h2><p>Because most investors are dealmakers rather than technology people, they generally don’t understand what you’re doing. I knew as a founder that most VCs didn’t get technology. I also knew some made a lot of money. And yet it never occurred to me till recently to put those two ideas together and ask “How can VCs make money by investing in stuff they don’t understand?”<br>由于大多数投资者是交易撮合者而非技术人士，他们通常无法理解你正在做的事情。我当年作为创始人时就知道，大多数风险投资家不懂技术，同时我也知道有些风险投资家赚了很多钱。但直到最近，我才突然把这两点联系起来，提出疑问：“风险投资家怎么能通过投资自己不懂的领域赚钱呢？”</p><p>The answer is that they’re like momentum investors. You can (or could once) make a lot of money by noticing sudden changes in stock prices. When a stock jumps upward, you buy, and when it suddenly drops, you sell. In effect you’re insider trading, without knowing what you know. You just know someone knows something, and that’s making the stock move.<br>答案是，他们就像趋势投资者。你（或曾经）可以通过捕捉股价的突然波动大赚一笔：股价上涨时买入，突然下跌时卖出。这本质上类似于内幕交易，只是你并不知道具体的内幕信息 —— 你只知道有人掌握了某些信息，而这些信息正推动股价变动。</p><p>This is how most venture investors operate. They don’t try to look at something and predict whether it will take off. They win by noticing that something is taking off a little sooner than everyone else. That generates almost as good returns as actually being able to pick winners. They may have to pay a little more than they would if they got in at the very beginning, but only a little.<br>大多数风险投资者正是这样运作的。他们不会试图通过分析某个项目来预测其是否会成功，而是通过比其他人更早发现 “项目正在崛起” 的迹象来获利。这种方式带来的回报，几乎与精准选中 “潜力股” 不相上下。虽然他们进入的时机比早期投资稍晚，可能要多花一点钱，但幅度通常不大。</p><p>Investors always say what they really care about is the team. Actually what they care most about is your traffic, then what other investors think, then the team. If you don’t yet have any traffic, they fall back on number 2, what other investors think. And this, as you can imagine, produces wild oscillations in the “stock price” of a startup. One week everyone wants you, and they’re begging not to be cut out of the deal. But all it takes is for one big investor to cool on you, and the next week no one will return your phone calls. We regularly have startups go from hot to cold or cold to hot in a matter of days, and literally nothing has changed.<br>投资者总是说，他们真正看重的是团队。但事实上，他们最关心的是你的用户流量，其次是其他投资者的看法，最后才是团队。如果你的项目还没有任何流量，他们就会退而求其次，关注第二点 —— 其他投资者的态度。可想而知，这会导致初创公司的 “估值” 出现剧烈波动：这周可能所有人都想投资你，甚至恳求不要被排除在交易之外；但只要有一位大投资者对你失去兴趣，下周就可能没人再回你的电话。在我们接触的初创公司中，经常会出现项目在几天内从 “热门” 变 “冷门”，或从 “冷门” 变 “热门” 的情况，而公司本身其实没有发生任何变化。</p><p>There are two ways to deal with this phenomenon. If you’re feeling really confident, you can try to ride it. You can start by asking a comparatively lowly VC for a small amount of money, and then after generating interest there, ask more prestigious VCs for larger amounts, stirring up a crescendo of buzz, and then “sell” at the top. This is extremely risky, and takes months even if you succeed. I wouldn’t try it myself. My advice is to err on the side of safety: when someone offers you a decent deal, just take it and get on with building the company. Startups win or lose based on the quality of their product, not the quality of their funding deals.<br>应对这种现象有两种方法。如果你对自己的项目充满信心，可以尝试 “借势操作”：先向一家规模较小的风险投资机构寻求少量投资，在引发其兴趣后，再向更知名的机构争取更大额度的投资，逐步制造热度，最后在 “热度顶峰” 完成融资。但这种方式风险极高，即便成功也需要数月时间，我个人并不推荐。我的建议是稳妥行事：当有人向你提供一份不错的投资协议时，就接受它，然后专心打造公司。初创公司的成败取决于产品质量，而非融资交易的优劣。</p><h2 id="Most-investors-are-looking-for-big-hits"><a href="#Most-investors-are-looking-for-big-hits" class="headerlink" title="Most investors are looking for big hits."></a><strong>Most investors are looking for big hits.</strong></h2><h2 id="大多数投资者追求-“爆款项目”"><a href="#大多数投资者追求-“爆款项目”" class="headerlink" title="大多数投资者追求 “爆款项目”"></a><strong>大多数投资者追求 “爆款项目”</strong></h2><p>Venture investors like companies that could go public. That’s where the big returns are. They know the odds of any individual startup going public are small, but they want to invest in those that at least have a chance of going public.<br>风险投资家青睐有潜力上市的公司，因为上市才能带来高额回报。他们清楚，单个初创公司成功上市的概率很低，但仍希望投资那些至少有上市可能性的项目。</p><p>Currently the way VCs seem to operate is to invest in a bunch of companies, most of which fail, and one of which is Google. Those few big wins compensate for losses on their other investments. What this means is that most VCs will only invest in you if you’re a potential Google. They don’t care about companies that are a safe bet to be acquired for $20 million. There needs to be a chance, however small, of the company becoming really big.<br>目前，风险投资家的运作模式似乎是：投资一批公司，其中大多数会失败，但只要有一家能成为 “谷歌级” 企业，这少数几个 “爆款项目” 带来的收益就能弥补其他投资的亏损。这意味着，只有当你的项目有潜力成为下一个谷歌时，大多数风险投资家才会考虑投资。对于那些 “肯定能以 2000 万美元被收购” 的稳妥型公司，他们并不感兴趣。他们需要的是公司有成为行业巨头的可能 —— 无论这个可能性有多小。</p><p>Angels are different in this respect. They’re happy to invest in a company where the most likely outcome is a $20 million acquisition if they can do it at a low enough valuation. But of course they like companies that could go public too. So having an ambitious long-term plan pleases everyone.<br>在这一点上，天使投资者则不同。如果估值足够低，即便一家公司最可能的结局是被以 2000 万美元收购，天使投资者也愿意投资。当然，他们也青睐有上市潜力的公司。因此，制定一个有雄心的长期计划，能让所有投资者都满意。</p><p>If you take VC money, you have to mean it, because the structure of VC deals prevents early acquisitions. If you take VC money, they won’t let you sell early.<br>如果你接受了风险投资，就必须认真对待公司的长期发展 —— 因为风险投资交易的结构会限制公司早期被收购。一旦拿了风投的钱，他们不会允许你在早期就把公司卖掉。</p><h2 id="VCs-want-to-invest-large-amounts"><a href="#VCs-want-to-invest-large-amounts" class="headerlink" title="VCs want to invest large amounts."></a><strong>VCs want to invest large amounts.</strong></h2><h2 id="风险投资家倾向于大额投资"><a href="#风险投资家倾向于大额投资" class="headerlink" title="风险投资家倾向于大额投资"></a><strong>风险投资家倾向于大额投资</strong></h2><p>The fact that they’re running investment funds makes VCs want to invest large amounts. A typical VC fund is now hundreds of millions of dollars. If $400 million has to be invested by 10 partners, they have to invest $40 million each. VCs usually sit on the boards of companies they fund. If the average deal size was $1 million, each partner would have to sit on 40 boards, which would not be fun. So they prefer bigger deals, where they can put a lot of money to work at once.<br>风险投资家管理着投资基金，这一属性决定了他们倾向于大额投资。如今，一只典型的风险投资基金规模可达数亿美元。假设一只 4 亿美元的基金由 10 位合伙人负责投资，那么每位合伙人需完成 4000 万美元的投资额度。风险投资家通常会进入所投公司的董事会，若每笔投资仅 100 万美元，每位合伙人就得加入 40 家公司的董事会，这显然不现实。因此，他们更倾向于大额交易，以便一次性投入大量资金。</p><p>VCs don’t regard you as a bargain if you don’t need a lot of money. That may even make you less attractive, because it means their investment creates less of a barrier to entry for competitors.<br>如果你不需要大量资金，风险投资家不会认为你的项目 “性价比高”—— 这甚至可能让你的项目吸引力下降。因为对他们而言，投入资金少意味着其投资难以给竞争对手设置有效的进入壁垒。</p><p>Angels are in a different position because they’re investing their own money. They’re happy to invest small amounts—sometimes as little as $20,000—as long as the potential returns look good enough. So if you’re doing something inexpensive, go to angels.<br>天使投资者的情况则不同，因为他们用的是自己的钱。只要潜在回报看起来足够可观，他们愿意进行小额投资，有时甚至低至 2 万美元。因此，若你的项目所需资金不多，不妨寻求天使投资者的支持。</p><h2 id="Valuations-are-fiction"><a href="#Valuations-are-fiction" class="headerlink" title="Valuations are fiction."></a><strong>Valuations are fiction.</strong></h2><h2 id="估值是虚构的"><a href="#估值是虚构的" class="headerlink" title="估值是虚构的"></a><strong>估值是虚构的</strong></h2><p>VCs admit that valuations are an artifact. They decide how much money you need and how much of the company they want, and those two constraints yield a valuation.<br>风险投资家也承认，估值是人为构建的结果。他们会先确定你需要多少资金，以及自己想持有公司多少股份，再通过这两个条件倒推出估值。</p><p>Valuations increase as the size of the investment does. A company that an angel is willing to put $50,000 into at a valuation of a million can’t take $6 million from VCs at that valuation. That would leave the founders less than a seventh of the company between them (since the option pool would also come out of that seventh). Most VCs wouldn’t want that, which is why you never hear of deals where a VC invests $6 million at a premoney valuation of $1 million.<br>投资额度越大，估值往往越高。一家天使投资者愿以 100 万美元估值投入 5 万美元的公司，不可能以同样估值从风险投资家那里获得 600 万美元投资 —— 若按此估值，创始人持有的股份将不足公司总股份的 1&#x2F;7（而且期权池还需从这 1&#x2F;7 中划拨），大多数风险投资家不会接受这样的股权结构。这也是为何你从未听说过 “风险投资家以 100 万美元投前估值向某公司投资 600 万美元” 的案例。</p><p>If valuations change depending on the amount invested, that shows how far they are from reflecting any kind of value of the company.<br>若估值会随投资额度变化而变化，就足以说明：估值与公司实际价值的关联度极低。</p><p>Since valuations are made up, founders shouldn’t care too much about them. That’s not the part to focus on. In fact, a high valuation can be a bad thing. If you take funding at a premoney valuation of $10 million, you won’t be selling the company for 20. You’ll have to sell for over 50 for the VCs to get even a 5x return, which is low to them. More likely they’ll want you to hold out for 100. But needing to get a high price decreases the chance of getting bought at all; many companies can buy you for $10 million, but only a handful for 100. And since a startup is like a pass&#x2F;fail course for the founders, what you want to optimize is your chance of a good outcome, not the percentage of the company you keep.<br>既然估值是虚构的，创始人不必过分在意，这并非值得关注的核心。事实上，高估值甚至可能是件坏事。若你以 1000 万美元投前估值融资，公司就不可能以 2000 万美元的价格出售 —— 要让风险投资家获得 5 倍回报（对他们而言这已是较低水平），公司售价需超过 5000 万美元；他们更可能希望你坚持到售价达到 1 亿美元再出售。但过高的售价会大幅降低公司被收购的可能性：能拿出 1000 万美元收购你的公司有很多，但能拿出 1 亿美元的寥寥无几。对创始人而言，初创公司的成败如同 “非过即挂” 的考试，你需要优化的是 “获得良好结果的概率”，而非 “自己持有的公司股份比例”。</p><p>So why do founders chase high valuations? They’re tricked by misplaced ambition. They feel they’ve achieved more if they get a higher valuation. They usually know other founders, and if they get a higher valuation they can say “mine is bigger than yours.” But funding is not the real test. The real test is the final outcome for the founder, and getting too high a valuation may just make a good outcome less likely.<br>那么，创始人为何仍执着于追求高估值？这是被错位的野心所误导。他们认为，估值越高，自己的成就就越大。创始人之间通常相互认识，若能拿到更高估值，就可以 “我的估值比你高” 来彰显优势。但融资估值并非真正的考验，对创始人而言，真正的考验是最终结果 —— 过高的估值反而可能降低获得良好结果的概率。</p><p>The one advantage of a high valuation is that you get less dilution. But there is another less sexy way to achieve that: just take less money.<br>高估值唯一的好处是创始人股权稀释较少，但还有一种不那么 “光鲜” 却更务实的方法也能达到同样效果：少融点钱。</p><h2 id="Investors-look-for-founders-like-the-current-stars"><a href="#Investors-look-for-founders-like-the-current-stars" class="headerlink" title="Investors look for founders like the current stars."></a><strong>Investors look for founders like the current stars.</strong></h2><h2 id="投资者倾向于寻找-“复刻当前明星创始人”-的创业者"><a href="#投资者倾向于寻找-“复刻当前明星创始人”-的创业者" class="headerlink" title="投资者倾向于寻找 “复刻当前明星创始人” 的创业者"></a><strong>投资者倾向于寻找 “复刻当前明星创始人” 的创业者</strong></h2><p>Ten years ago investors were looking for the next Bill Gates. This was a mistake, because Microsoft was a very anomalous startup. They started almost as a contract programming operation, and the reason they became huge was that IBM happened to drop the PC standard in their lap.<br>十年前，投资者都在寻找 “下一个比尔・盖茨”。但这是个错误，因为微软是一家极特殊的初创公司：它最初几乎是一家合同编程公司，后来能发展壮大，核心原因是 IBM 恰好将个人电脑标准这一机遇送到了他们手中。</p><p>Now all the VCs are looking for the next Larry and Sergey. This is a good trend, because Larry and Sergey are closer to the ideal startup founders.<br>如今，所有风险投资家都在寻找 “下一个拉里・佩奇和谢尔盖・布林（谷歌联合创始人）”。这是一个积极的趋势，因为拉里和谢尔盖更接近理想初创公司创始人的形象。</p><p>Historically investors thought it was important for a founder to be an expert in business. So they were willing to fund teams of MBAs who planned to use the money to pay programmers to build their product for them. This is like funding Steve Ballmer in the hope that the programmer he’ll hire is Bill Gates—kind of backward, as the events of the Bubble showed. Now most VCs know they should be funding technical guys. This is more pronounced among the very top funds; the lamer ones still want to fund MBAs.<br>过去，投资者认为创始人必须是商业专家，因此他们愿意投资给 MBA（工商管理硕士）团队 —— 这些团队计划用融资款雇佣程序员来开发产品。这就好比投资给史蒂夫・鲍尔默（微软前 CEO），却期望他能雇到比尔・盖茨这样的程序员，这种逻辑是本末倒置的，互联网泡沫时期的教训已证明了这一点。如今，大多数风险投资家明白，应该投资给技术出身的创始人。顶级投资基金对此认知更为明确，而那些实力较弱的基金仍执着于投资 MBA 团队。</p><p>If you’re a hacker, it’s good news that investors are looking for Larry and Sergey. The bad news is, the only investors who can do it right are the ones who knew them when they were a couple of CS grad students, not the confident media stars they are today. What investors still don’t get is how clueless and tentative great founders can seem at the very beginning.<br>如果你是一名黑客，“投资者寻找下一个拉里和谢尔盖” 对你而言是好消息。但坏消息是：只有那些在拉里和谢尔盖还是计算机专业研究生时就认识他们的投资者，才能真正识别出这类人才 —— 而非在他们成为自信的媒体明星后才认可他们。投资者至今仍未明白：优秀的创始人在创业初期，往往显得懵懂且犹豫不决。</p><h2 id="The-contribution-of-investors-tends-to-be-underestimated"><a href="#The-contribution-of-investors-tends-to-be-underestimated" class="headerlink" title="The contribution of investors tends to be underestimated."></a><strong>The contribution of investors tends to be underestimated.</strong></h2><h2 id="投资者的贡献往往被低估"><a href="#投资者的贡献往往被低估" class="headerlink" title="投资者的贡献往往被低估"></a><strong>投资者的贡献往往被低估</strong></h2><p>Investors do more for startups than give them money. They’re helpful in doing deals and arranging introductions, and some of the smarter ones, particularly angels, can give good advice about the product.<br>投资者为初创公司提供的远不止资金。他们在促成交易、搭建人脉方面能提供帮助；一些更聪明的投资者（尤其是天使投资者）还能就产品给出有价值的建议。</p><p>In fact, I’d say what separates the great investors from the mediocre ones is the quality of their advice. Most investors give advice, but the top ones give good advice.<br>事实上，我认为优秀投资者与平庸投资者的核心区别，就在于其建议的质量。大多数投资者都会提供建议，但顶级投资者能给出优质建议。</p><p>Whatever help investors give a startup tends to be underestimated. It’s to everyone’s advantage to let the world think the founders thought of everything. The goal of the investors is for the company to become valuable, and the company seems more valuable if it seems like all the good ideas came from within.<br>投资者为初创公司提供的任何帮助，往往都会被低估。而让外界认为 “所有想法都来自创始人”，对所有人都有利：投资者的目标是让公司升值，若外界觉得公司的所有好想法都源于内部，公司的价值感会更强。</p><p>This trend is compounded by the obsession that the press has with founders. In a company founded by two people, 10% of the ideas might come from the first guy they hire. Arguably they’ve done a bad job of hiring otherwise. And yet this guy will be almost entirely overlooked by the press.<br>媒体对创始人的过度关注，进一步加剧了这种趋势。以一家由两人创立的公司为例，其 10% 的想法可能来自第一位员工 —— 若非如此，说明创始人的招聘工作做得很糟糕。但这位员工几乎会被媒体完全忽视。</p><p>I say this as a founder: the contribution of founders is always overestimated. The danger here is that new founders, looking at existing founders, will think that they’re supermen that one couldn’t possibly equal oneself. Actually they have a hundred different types of support people just offscreen making the whole show possible. [3]<br>作为一名曾经的创始人，我可以说：创始人的贡献总是被高估。这种高估存在一个隐患：新创始人看到成功的前辈时，会误以为他们是 “超人”，觉得自己永远无法企及。但事实上，这些成功创始人的背后，有无数不同类型的支持者在幕后助力，才让这一切成为可能。[3]</p><h2 id="VCs-are-afraid-of-looking-bad"><a href="#VCs-are-afraid-of-looking-bad" class="headerlink" title="VCs are afraid of looking bad."></a><strong>VCs are afraid of looking bad.</strong></h2><h2 id="风险投资家害怕-“丢脸”"><a href="#风险投资家害怕-“丢脸”" class="headerlink" title="风险投资家害怕 “丢脸”"></a><strong>风险投资家害怕 “丢脸”</strong></h2><p>I’ve been very surprised to discover how timid most VCs are. They seem to be afraid of looking bad to their partners, and perhaps also to the limited partners—the people whose money they invest.<br>我惊讶地发现，大多数风险投资家都十分谨慎。他们似乎害怕在合伙人面前丢脸，也可能担心在有限合伙人（即委托他们管理资金的人）面前失面子。</p><p>You can measure this fear in how much less risk VCs are willing to take. You can tell they won’t make investments for their fund that they might be willing to make themselves as angels. Though it’s not quite accurate to say that VCs are less willing to take risks. They’re less willing to do things that might look bad. That’s not the same thing.<br>这种恐惧可以从风险投资家 “不愿承担风险” 的行为中看出：有些项目，若以天使投资者的个人身份，他们可能愿意投资，但作为基金管理者，他们却不会为基金做出这样的投资决策。不过，说 “风险投资家不愿承担风险” 并不完全准确 —— 他们真正不愿做的，是那些 “可能会让自己丢脸” 的事，这与 “不愿承担风险” 并非同一概念。</p><p>For example, most VCs would be very reluctant to invest in a startup founded by a pair of 18 year old hackers, no matter how brilliant, because if the startup failed their partners could turn on them and say “What, you invested $x million of our money in a pair of 18 year olds?” Whereas if a VC invested in a startup founded by three former banking executives in their 40s who planned to outsource their product development—which to my mind is actually a lot riskier than investing in a pair of really smart 18 year olds—he couldn’t be faulted, if it failed, for making such an apparently prudent investment.<br>例如，大多数风险投资家都极不情愿投资由两名 18 岁黑客创立的初创公司，无论这两名黑客多有才华。因为一旦项目失败，合伙人可能会质问他们：“你竟然把我们的 x 百万美元投给了两个 18 岁的孩子？” 但如果一名风险投资家投资了另一家公司 —— 由三位 40 多岁的前银行高管创立，计划将产品开发外包出去（在我看来，这比投资两个聪明的 18 岁黑客风险高得多）—— 即便项目失败，也不会有人指责他，因为这笔投资看起来 “十分谨慎”。</p><p>As a friend of mine said, “Most VCs can’t do anything that would sound bad to the kind of doofuses who run pension funds.” Angels can take greater risks because they don’t have to answer to anyone.<br>正如我的一位朋友所说：“大多数风险投资家不敢做任何‘在养老基金管理者这类门外汉听来不靠谱’的事。” 而天使投资者则能承担更大风险，因为他们无需向任何人负责。</p><h2 id="Being-turned-down-by-investors-doesn’t-mean-much"><a href="#Being-turned-down-by-investors-doesn’t-mean-much" class="headerlink" title="Being turned down by investors doesn’t mean much."></a><strong>Being turned down by investors doesn’t mean much.</strong></h2><h2 id="被投资者拒绝说明不了什么"><a href="#被投资者拒绝说明不了什么" class="headerlink" title="被投资者拒绝说明不了什么"></a><strong>被投资者拒绝说明不了什么</strong></h2><p>Some founders are quite dejected when they get turned down by investors. They shouldn’t take it so much to heart. To start with, investors are often wrong. It’s hard to think of a successful startup that wasn’t turned down by investors at some point. Lots of VCs rejected Google. So obviously the reaction of investors is not a very meaningful test.<br>有些创始人在被投资者拒绝后会非常沮丧，但他们不应如此在意。首先，投资者经常判断失误 —— 几乎所有成功的初创公司，都曾在某个阶段被投资者拒绝过，谷歌就曾被多家风险投资家拒绝。显然，投资者的拒绝并非衡量项目价值的有效标准。</p><p>Investors will often reject you for what seem to be superficial reasons. I read of one VC who turned down a startup simply because they’d given away so many little bits of stock that the deal required too many signatures to close. [4] The reason investors can get away with this is that they see so many deals. It doesn’t matter if they underestimate you because of some surface imperfection, because the next best deal will be almost as good. Imagine picking out apples at a grocery store. You grab one with a little bruise. Maybe it’s just a surface bruise, but why even bother checking when there are so many other unbruised apples to choose from?<br>投资者常常会因为一些看似肤浅的理由拒绝你。我曾看到过这样一则案例：某风险投资家拒绝投资一家初创公司，仅仅是因为该公司已出让的小额股份过多，导致交易完成需要获取太多人的签名。[4] 投资者之所以能 “任性” 地这样做，是因为他们接触的项目数量太多。即便因某个表面瑕疵低估了你，也无关紧要 —— 因为下一个优质项目的质量往往与你相差无几。这就好比在杂货店挑苹果：你拿起一个带点磕碰的苹果，或许那只是表面损伤，但既然有那么多完好无损的苹果可选，又何必费神去检查这个呢？</p><p>Investors would be the first to admit they’re often wrong. So when you get rejected by investors, don’t think “we suck,” but instead ask “do we suck?” Rejection is a question, not an answer.<br>投资者自己也会最先承认，他们经常判断失误。因此，当你被投资者拒绝时，不要直接认定 “我们的项目很糟糕”，而应反问自己 “我们的项目真的很糟糕吗？”—— 拒绝只是一个需要你思考的问题，而非对你项目价值的最终定论。</p><h2 id="Investors-are-emotional"><a href="#Investors-are-emotional" class="headerlink" title="Investors are emotional."></a><strong>Investors are emotional.</strong></h2><h2 id="投资者也有情绪波动"><a href="#投资者也有情绪波动" class="headerlink" title="投资者也有情绪波动"></a><strong>投资者也有情绪波动</strong></h2><p>I’ve been surprised to discover how emotional investors can be. You’d expect them to be cold and calculating, or at least businesslike, but often they’re not. I’m not sure if it’s their position of power that makes them this way, or the large sums of money involved, but investment negotiations can easily turn personal. If you offend investors, they’ll leave in a huff.<br>我意外地发现，投资者的情绪波动其实很大。你可能会以为他们应该冷静理性、精于算计，至少保持专业态度，但事实往往并非如此。我不确定是权力地位让他们变得情绪化，还是涉及的巨额资金影响了心态，但投资谈判很容易演变成个人层面的冲突。一旦你冒犯了投资者，他们可能会怒气冲冲地终止合作。</p><p>A while ago an eminent VC firm offered a series A round to a startup we’d seed funded. Then they heard a rival VC firm was also interested. They were so afraid that they’d be rejected in favor of this other firm that they gave the startup what’s known as an “exploding termsheet.” They had, I think, 24 hours to say yes or no, or the deal was off. Exploding termsheets are a somewhat dubious device, but not uncommon. What surprised me was their reaction when I called to talk about it. I asked if they’d still be interested in the startup if the rival VC didn’t end up making an offer, and they said no. What rational basis could they have had for saying that? If they thought the startup was worth investing in, what difference should it make what some other VC thought? Surely it was their duty to their limited partners simply to invest in the best opportunities they found; they should be delighted if the other VC said no, because it would mean they’d overlooked a good opportunity. But of course there was no rational basis for their decision. They just couldn’t stand the idea of taking this rival firm’s rejects.<br>不久前，一家知名风险投资公司向我们孵化的某初创公司提出了 A 轮投资意向。随后，他们得知另一家竞争对手风投公司也对该初创公司感兴趣，便因担心自己被拒绝而选择了后者，向初创公司出具了一份 “限时条款清单”（exploding termsheet）—— 我记得他们只给了初创公司 24 小时时间决定是否接受，否则交易即刻失效。限时条款清单的合理性虽存疑，但在行业内并不少见。而让我意外的是，当我打电话与他们沟通时，他们的反应十分反常：我问，如果竞争对手最终没有提出投资意向，他们是否还对这家初创公司感兴趣？他们的回答是否定的。这种决定何来理性依据可言？如果他们认为这家初创公司值得投资，其他风投的看法又有什么影响呢？对他们而言，向有限合伙人负责的核心应该是投资自己找到的最佳机会；若竞争对手放弃投资，他们本应感到庆幸 —— 因为这意味着对手错失了一个好项目。但显然，他们的决定毫无理性可言，只是无法接受 “接手竞争对手放弃的项目” 这件事本身。</p><p>In this case the exploding termsheet was not (or not only) a tactic to pressure the startup. It was more like the high school trick of breaking up with someone before they can break up with you. In an earlier essay I said that VCs were a lot like high school girls. A few VCs have joked about that characterization, but none have disputed it.<br>在这个案例中，限时条款清单并非（或不仅仅是）向初创公司施压的策略，更像是高中时期的小把戏 —— 在对方提出分手前，先主动结束关系。我在之前的文章中曾提到，风险投资家很像高中女生。有些风险投资家对此调侃过，但没人反驳这个比喻。</p><h2 id="The-negotiation-never-stops-till-the-closing"><a href="#The-negotiation-never-stops-till-the-closing" class="headerlink" title="The negotiation never stops till the closing."></a><strong>The negotiation never stops till the closing.</strong></h2><h2 id="谈判在交易完成前永不停止"><a href="#谈判在交易完成前永不停止" class="headerlink" title="谈判在交易完成前永不停止"></a><strong>谈判在交易完成前永不停止</strong></h2><p>Most deals, for investment or acquisition, happen in two phases. There’s an initial phase of negotiation about the big questions. If this succeeds you get a termsheet, so called because it outlines the key terms of a deal. A termsheet is not legally binding, but it is a definite step. It’s supposed to mean that a deal is going to happen, once the lawyers work out all the details. In theory these details are minor ones; by definition all the important points are supposed to be covered in the termsheet.<br>无论是投资还是收购交易，大多数都分为两个阶段。第一阶段是围绕核心问题的初步谈判，若谈判成功，你会拿到一份 “条款清单”（termsheet）—— 之所以叫这个名字，是因为它列出了交易的关键条款。条款清单不具备法律约束力，但标志着交易取得了明确进展。理论上，只要律师敲定所有细节，交易就能完成；而这些细节在理论上都属于次要问题，因为所有重要条款按定义都应已包含在条款清单中。</p><p>Inexperience and wishful thinking combine to make founders feel that when they have a termsheet, they have a deal. They want there to be a deal; everyone acts like they have a deal; so there must be a deal. But there isn’t and may not be for several months. A lot can change for a startup in several months. It’s not uncommon for investors and acquirers to get buyer’s remorse. So you have to keep pushing, keep selling, all the way to the close. Otherwise all the “minor” details left unspecified in the termsheet will be interpreted to your disadvantage. The other side may even break the deal; if they do that, they’ll usually seize on some technicality or claim you misled them, rather than admitting they changed their minds.<br>缺乏经验加上一厢情愿，让很多创始人误以为拿到条款清单就等于交易达成。他们渴望达成交易，所有人也都表现得像交易已成定局，于是他们便坚信交易一定能完成。但事实是，交易并未达成，甚至可能在未来几个月内都无法敲定。对初创公司而言，几个月的时间足以发生很多变化，投资者或收购方出现 “买家懊悔” 的情况也很常见。因此，你必须持续推进、不断沟通，直到交易最终完成。否则，条款清单中未明确的所有 “次要” 细节，都可能被解读成对你不利的版本。对方甚至可能终止交易，而一旦他们这么做，通常会找一些技术层面的借口，或声称你误导了他们，而非承认自己改变了主意。</p><p>It can be hard to keep the pressure on an investor or acquirer all the way to the closing, because the most effective pressure is competition from other investors or acquirers, and these tend to drop away when you get a termsheet. You should try to stay as close friends as you can with these rivals, but the most important thing is just to keep up the momentum in your startup. The investors or acquirers chose you because you seemed hot. Keep doing whatever made you seem hot. Keep releasing new features; keep getting new users; keep getting mentioned in the press and in blogs.<br>要在交易完成前持续对投资者或收购方保持压力并非易事，因为最有效的压力来自其他投资者或收购方的竞争，而一旦你拿到条款清单，这些竞争对手往往会退出。你可以尝试与这些竞争对手保持良好关系，但更重要的是维持初创公司的发展势头。投资者或收购方选择你，是因为你的项目看起来 “势头正盛”，所以你要继续做那些让项目保持热度的事：不断推出新功能、持续获取新用户、频繁在媒体和博客中获得曝光。</p><h2 id="Investors-like-to-co-invest"><a href="#Investors-like-to-co-invest" class="headerlink" title="Investors like to co-invest."></a><strong>Investors like to co-invest.</strong></h2><h2 id="投资者喜欢联合投资"><a href="#投资者喜欢联合投资" class="headerlink" title="投资者喜欢联合投资"></a><strong>投资者喜欢联合投资</strong></h2><p>I’ve been surprised how willing investors are to split deals. You might think that if they found a good deal they’d want it all to themselves, but they seem positively eager to syndicate. This is understandable with angels; they invest on a smaller scale and don’t like to have too much money tied up in any one deal. But VCs also share deals a lot. Why?<br>我意外地发现，投资者非常愿意拆分交易份额。你可能会认为，若找到优质项目，他们会想独自拿下全部投资额度，但事实上他们却很热衷于联合投资（syndicate）。天使投资者这样做不难理解 —— 他们的投资规模较小，不愿将过多资金投入单个项目。但风险投资家也经常联合投资，这是为什么呢？</p><p>Partly I think this is an artifact of the rule I quoted earlier: after traffic, VCs care most what other VCs think. A deal that has multiple VCs interested in it is more likely to close, so of deals that close, more will have multiple investors.<br>我认为部分原因与我之前提到的规律有关：除了用户流量，风险投资家最在意的就是其他风投的看法。一个吸引多家风投关注的项目，交易成功的概率更高，因此最终达成的交易中，有多家投资者参与的情况也更多。</p><p>There is one rational reason to want multiple VCs in a deal: Any investor who co-invests with you is one less investor who could fund a competitor. Apparently Kleiner and Sequoia didn’t like splitting the Google deal, but it did at least have the advantage, from each one’s point of view, that there probably wouldn’t be a competitor funded by the other. Splitting deals thus has similar advantages to confusing paternity.<br>联合投资存在一个合理的动机：与你共同投资的投资者，就不会再去投资你的竞争对手。显然，凯鹏华盈和红杉资本当初并不愿意拆分谷歌的投资份额，但从双方各自的角度来看，这样做至少有一个好处 —— 对方不太可能再投资谷歌的竞争对手。因此，拆分交易份额的好处，有点像 “模糊亲子关系”（避免竞争对手获得关键资本支持）。</p><p>But I think the main reason VCs like splitting deals is the fear of looking bad. If another firm shares the deal, then in the event of failure it will seem to have been a prudent choice—a consensus decision, rather than just the whim of an individual partner.<br>但我认为，风险投资家喜欢联合投资的主要原因，还是害怕 “丢脸”。如果有其他公司共同参与投资，即便项目失败，这笔投资也会被视为 “谨慎的选择”—— 是集体共识的结果，而非某个合伙人的一时冲动。</p><h2 id="Investors-collude"><a href="#Investors-collude" class="headerlink" title="Investors collude."></a><strong>Investors collude.</strong></h2><h2 id="投资者之间存在串通行为"><a href="#投资者之间存在串通行为" class="headerlink" title="投资者之间存在串通行为"></a><strong>投资者之间存在串通行为</strong></h2><p>Investing is not covered by antitrust law. At least, it better not be, because investors regularly do things that would be illegal otherwise. I know personally of cases where one investor has talked another out of making a competitive offer, using the promise of sharing future deals.<br>投资行业不受反垄断法约束。至少目前来看最好如此，因为投资者经常会做一些若受该法律约束就会违法的事。我个人就知道这样的案例：某投资者通过承诺未来分享优质项目，说服另一位投资者放弃提出竞争性投资报价。</p><p>In principle investors are all competing for the same deals, but the spirit of cooperation is stronger than the spirit of competition. The reason, again, is that there are so many deals. Though a professional investor may have a closer relationship with a founder he invests in than with other investors, his relationship with the founder is only going to last a couple years, whereas his relationship with other firms will last his whole career. There isn’t so much at stake in his interactions with other investors, but there will be a lot of them. Professional investors are constantly trading little favors.<br>理论上，所有投资者都在争夺相同的优质项目，但行业内的合作氛围远胜于竞争氛围。原因还是在于项目数量足够多：尽管专业投资者与所投项目的创始人关系，可能比与其他投资者的关系更密切，但他与创始人的关系通常只会持续几年，而与其他投资公司的关系却会贯穿整个职业生涯。投资者与同行的单次互动中，利害关系可能不大，但这类互动却十分频繁，因此专业投资者之间会不断互相提供小便利，维系合作关系。</p><p>Another reason investors stick together is to preserve the power of investors as a whole. So you will not, as of this writing, be able to get investors into an auction for your series A round. They’d rather lose the deal than establish a precedent of VCs competitively bidding against one another. An efficient startup funding market may be coming in the distant future; things tend to move in that direction; but it’s certainly not here now.<br>投资者抱团的另一个原因，是为了维护投资者群体的整体权力。因此，截至本文撰写时，你仍无法让投资者为你的 A 轮融资展开竞价。他们宁愿放弃某个项目，也不愿开创 “风投之间互相竞价” 的先例。或许在遥远的未来，高效的初创公司融资市场会出现，行业趋势也正朝着这个方向发展，但目前显然还未达到这种状态。</p><h2 id="Large-scale-investors-care-about-their-portfolio-not-any-individual-company"><a href="#Large-scale-investors-care-about-their-portfolio-not-any-individual-company" class="headerlink" title="Large-scale investors care about their portfolio, not any individual company."></a><strong>Large-scale investors care about their portfolio, not any individual company.</strong></h2><h2 id="大型投资者关注投资组合整体，而非单个公司"><a href="#大型投资者关注投资组合整体，而非单个公司" class="headerlink" title="大型投资者关注投资组合整体，而非单个公司"></a><strong>大型投资者关注投资组合整体，而非单个公司</strong></h2><p>The reason startups work so well is that everyone with power also has equity. The only way any of them can succeed is if they all do. This makes everyone naturally pull in the same direction, subject to differences of opinion about tactics.<br>初创公司之所以能高效运转，核心原因在于所有掌握权力的人（如创始人、核心团队）都持有公司股权。对他们而言，只有公司整体成功，个人才能成功，因此尽管在策略上可能存在分歧，但所有人都会自然而然地朝着同一方向努力。</p><p>The problem is, larger scale investors don’t have exactly the same motivation. Close, but not identical. They don’t need any given startup to succeed, like founders do, just their portfolio as a whole to. So in borderline cases the rational thing for them to do is to sacrifice unpromising startups.<br>但问题在于，大型投资者的动机与创始人并非完全一致 —— 虽有相似之处，却存在本质差异。他们不像创始人那样，必须依赖某一家初创公司的成功，只需整个投资组合整体盈利即可。因此，在面临取舍时，对他们而言理性的选择是放弃那些前景不明的初创公司。</p><p>Large-scale investors tend to put startups in three categories: successes, failures, and the “living dead”—companies that are plugging along but don’t seem likely in the immediate future to get bought or go public. To the founders, “living dead” sounds harsh. These companies may be far from failures by ordinary standards. But they might as well be from a venture investor’s point of view, and they suck up just as much time and attention as the successes. So if such a company has two possible strategies, a conservative one that’s slightly more likely to work in the end, or a risky one that within a short time will either yield a giant success or kill the company, VCs will push for the kill-or-cure option. To them the company is already a write-off. Better to have resolution, one way or the other, as soon as possible.<br>大型投资者通常会将初创公司分为三类：成功企业、失败企业，以及 “活死人” 企业 —— 这类公司虽能维持运营，但短期内既无被收购可能，也无望上市。对创始人而言，“活死人” 这个称呼听起来很刺耳，因为以常规标准衡量，这些公司远算不上失败。但在风险投资者眼中，它们与失败企业并无本质区别，却要像成功企业一样占用大量时间和精力。因此，若这类公司面临两种战略选择：一种是保守策略，最终成功的概率略高；另一种是高风险策略，短期内要么大获成功，要么彻底失败 —— 风险投资家往往会倾向于 “要么涅槃，要么消亡” 的高风险选项。在他们看来，这类公司早已是 “坏账”，与其拖延，不如尽快有个了断，无论结果是好是坏。</p><p>If a startup gets into real trouble, instead of trying to save it VCs may just sell it at a low price to another of their portfolio companies. Philip Greenspun said in Founders at Work that Ars Digita’s VCs did this to them.<br>若某家初创公司陷入严重困境，风险投资家可能不会设法挽救，而是将其以低价出售给自家投资组合中的另一家公司。菲利普・格林斯潘（Philip Greenspun）在《Founders at Work》（《创业者访谈录》）一书中提到， Ars Digita（一家早期互联网公司）的风险投资家就是这样对待它的。</p><h2 id="Investors-have-different-risk-profiles-from-founders"><a href="#Investors-have-different-risk-profiles-from-founders" class="headerlink" title="Investors have different risk profiles from founders."></a><strong>Investors have different risk profiles from founders.</strong></h2><h2 id="投资者与创始人的风险偏好不同"><a href="#投资者与创始人的风险偏好不同" class="headerlink" title="投资者与创始人的风险偏好不同"></a><strong>投资者与创始人的风险偏好不同</strong></h2><p>Most people would rather a 100% chance of $1 million than a 20% chance of $10 million. Investors are rich enough to be rational and prefer the latter. So they’ll always tend to encourage founders to keep rolling the dice. If a company is doing well, investors will want founders to turn down most acquisition offers. And indeed, most startups that turn down acquisition offers ultimately do better. But it’s still hair-raising for the founders, because they might end up with nothing. When someone’s offering to buy you for a price at which your stock is worth $5 million, saying no is equivalent to having $5 million and betting it all on one spin of the roulette wheel.<br>对大多数人而言，他们更愿意选择 “100% 概率获得 100 万美元”，而非 “20% 概率获得 1000 万美元”。但投资者财力雄厚，足以保持理性，他们会更倾向于后者。因此，他们总会鼓励创始人继续 “冒险博弈”。若公司发展态势良好，投资者会希望创始人拒绝大多数收购邀约。事实上，大多数拒绝收购的初创公司最终确实发展得更好，但这对创始人来说仍充满风险 —— 因为他们也可能最终一无所有。当有人提出收购，且按此价格你的股权价值 500 万美元时，拒绝就相当于手握 500 万美元，却将其全部押在一次轮盘赌上。</p><p>Investors will tell you the company is worth more. And they may be right. But that doesn’t mean it’s wrong to sell. Any financial advisor who put all his client’s assets in the stock of a single, private company would probably lose his license for it.<br>投资者会告诉你，公司价值远不止于此，他们或许是对的，但这并不意味着出售就是错误的。任何理财顾问若将客户的全部资产投入某家私人公司的股权，很可能会被吊销执照。</p><p>More and more, investors are letting founders cash out partially. That should correct the problem. Most founders have such low standards that they’ll feel rich with a sum that doesn’t seem huge to investors. But this custom is spreading too slowly, because VCs are afraid of seeming irresponsible. No one wants to be the first VC to give someone fuck-you money and then actually get told “fuck you.” But until this does start to happen, we know VCs are being too conservative.<br>如今，越来越多的投资者开始允许创始人部分套现，这本应能解决上述风险偏好差异的问题。对大多数创始人而言，只要能获得一笔对自己来说足够 “富裕” 的资金（即便这笔钱在投资者眼中并不算多），他们就会满足。但这种做法普及得太慢，因为风险投资家担心此举会显得自己不负责任 —— 没人愿意成为第一个给创始人 “足够潇洒度日的钱”（fuck-you money），却反过来被对方 “打脸” 的风投。但只要这种情况尚未普遍发生，就说明风险投资家的做法仍过于保守。</p><h2 id="Investors-vary-greatly"><a href="#Investors-vary-greatly" class="headerlink" title="Investors vary greatly."></a><strong>Investors vary greatly.</strong></h2><h2 id="投资者之间差异巨大"><a href="#投资者之间差异巨大" class="headerlink" title="投资者之间差异巨大"></a><strong>投资者之间差异巨大</strong></h2><p>Back when I was a founder I used to think all VCs were the same. And in fact they do all look the same. They’re all what hackers call “suits.” But since I’ve been dealing with VCs more I’ve learned that some suits are smarter than others.<br>当我还是创始人时，曾以为所有风险投资家都一样。事实上，他们看起来也确实大同小异 —— 都是黑客口中的 “西装革履者”（suits）。但随着与风险投资家接触增多，我逐渐发现，这些 “西装革履者” 的能力参差不齐。</p><p>They’re also in a business where winners tend to keep winning and losers to keep losing. When a VC firm has been successful in the past, everyone wants funding from them, so they get the pick of all the new deals. The self-reinforcing nature of the venture funding market means that the top ten firms live in a completely different world from, say, the hundredth. As well as being smarter, they tend to be calmer and more upstanding; they don’t need to do iffy things to get an edge, and don’t want to because they have more brand to protect.<br>风险投资行业还存在 “赢家恒赢、输家恒输” 的马太效应：若某家风投公司过往业绩出色，所有初创公司都会希望获得它的投资，因此它能优先挑选最优质的新项目。风险投资市场的这种自我强化特性意味着，排名前十的风投公司与排名第一百的公司，完全处于两个不同的世界。顶尖风投不仅更聪明，还更沉稳、更正直 —— 它们无需通过不正当手段获取优势，也不愿这样做，因为它们有更珍贵的品牌声誉需要维护。</p><p>There are only two kinds of VCs you want to take money from, if you have the luxury of choosing: the “top tier” VCs, meaning about the top 20 or so firms, plus a few new ones that are not among the top 20 only because they haven’t been around long enough.<br>若你有选择的余地，只有两类风险投资家值得你接受投资：一类是 “顶级” 风投，即排名前 20 左右的公司；另一类是少数新兴风投 —— 它们之所以未进入前 20，只是因为成立时间不够长，而非实力不足。</p><p>It’s particularly important to raise money from a top firm if you’re a hacker, because they’re more confident. That means they’re less likely to stick you with a business guy as CEO, like VCs used to do in the 90s. If you seem smart and want to do it, they’ll let you run the company.<br>如果你是技术出身的黑客，从顶级风投公司融资尤为重要，因为它们更有信心。这意味着它们不太可能像 90 年代的风投那样，强行给你安排一位商业人士担任 CEO。只要你看起来足够聪明，且有意愿管理公司，它们就会让你继续执掌企业。</p><h2 id="Investors-don’t-realize-how-much-it-costs-to-raise-money-from-them"><a href="#Investors-don’t-realize-how-much-it-costs-to-raise-money-from-them" class="headerlink" title="Investors don’t realize how much it costs to raise money from them."></a><strong>Investors don’t realize how much it costs to raise money from them.</strong></h2><h2 id="投资者未意识到融资过程对初创公司的损耗"><a href="#投资者未意识到融资过程对初创公司的损耗" class="headerlink" title="投资者未意识到融资过程对初创公司的损耗"></a><strong>投资者未意识到融资过程对初创公司的损耗</strong></h2><p>Raising money is a huge time suck at just the point where startups can least afford it. It’s not unusual for it to take five or six months to close a funding round. Six weeks is fast. And raising money is not just something you can leave running as a background process. When you’re raising money, it’s inevitably the main focus of the company. Which means building the product isn’t.<br>融资过程极其耗费时间，而这段时间恰恰是初创公司最耽误不起的。一轮融资耗时五六个月并不罕见，六周内完成已属神速。而且，融资并非能 “后台运行” 的次要任务 —— 一旦启动融资，它必然会成为公司的核心焦点，这意味着产品研发会被搁置。</p><p>Suppose a Y Combinator company starts talking to VCs after demo day, and is successful in raising money from them, closing the deal after a comparatively short 8 weeks. Since demo day occurs after 10 weeks, the company is now 18 weeks old. Raising money, rather than working on the product, has been the company’s main focus for 44% of its existence. And mind you, this an example where things turned out well.<br>假设一家 Y Combinator 孵化的公司在 “演示日”（demo day，初创公司向投资者展示项目的日子）后开始与风投接触，并在相对较短的 8 周内完成融资。由于演示日在公司成立 10 周后举行，此时公司已成立 18 周 —— 也就是说，在公司存续期的 44% 时间里，核心任务都是融资，而非产品研发。要知道，这还是融资进展顺利的案例。</p><p>When a startup does return to working on the product after a funding round finally closes, it’s as if they were returning to work after a months-long illness. They’ve lost most of their momentum.<br>当初创公司终于完成融资，重新投入产品研发时，其状态就像大病一场后重返工作 —— 之前积累的发展势头已所剩无几。</p><p>Investors have no idea how much they damage the companies they invest in by taking so long to do it. But companies do. So there is a big opportunity here for a new kind of venture fund that invests smaller amounts at lower valuations, but promises to either close or say no very quickly. If there were such a firm, I’d recommend it to startups in preference to any other, no matter how prestigious. Startups live on speed and momentum.<br>投资者完全没意识到，漫长的融资过程会给他们所投资的公司带来多大损害，但初创公司自己却深有体会。因此，一种新型风投基金存在巨大机遇：这类基金可按较低估值投入小额资金，但承诺迅速决定是否投资（要么快速完成交易，要么明确拒绝）。若真有这样的公司，无论其他风投名气多大，我都会优先向初创公司推荐它 —— 因为初创公司的生存之本是速度和势头。</p><h2 id="Investors-don’t-like-to-say-no"><a href="#Investors-don’t-like-to-say-no" class="headerlink" title="Investors don’t like to say no."></a><strong>Investors don’t like to say no.</strong></h2><h2 id="投资者不愿直接说-“不”"><a href="#投资者不愿直接说-“不”" class="headerlink" title="投资者不愿直接说 “不”"></a><strong>投资者不愿直接说 “不”</strong></h2><p>The reason funding deals take so long to close is mainly that investors can’t make up their minds. VCs are not big companies; they can do a deal in 24 hours if they need to. But they usually let the initial meetings stretch out over a couple weeks. The reason is the selection algorithm I mentioned earlier. Most don’t try to predict whether a startup will win, but to notice quickly that it already is winning. They care what the market thinks of you and what other VCs think of you, and they can’t judge those just from meeting you.<br>融资交易耗时漫长，主要原因是投资者迟迟无法下定决心。风投公司规模并不大，若有必要，它们 24 小时内就能完成一笔交易，但通常会让初步沟通持续数周。背后的逻辑正是我之前提到的 “筛选法则”：大多数投资者不会试图预测某家初创公司能否成功，而是等待它 “已显现成功迹象” 时再迅速介入。他们在意市场对你的评价，也在意其他风投的态度，而这些信息无法仅通过与你会面就判断出来。</p><p>Because they’re investing in things that (a) change fast and (b) they don’t understand, a lot of investors will reject you in a way that can later be claimed not to have been a rejection. Unless you know this world, you may not even realize you’ve been rejected. Here’s a VC saying no:<br>We’re really excited about your project, and we want to keep in close touch as you develop it further.<br>Translated into more straightforward language, this means: We’re not investing in you, but we may change our minds if it looks like you’re taking off. Sometimes they’re more candid and say explicitly that they need to “see some traction.” They’ll invest in you if you start to get lots of users. But so would any VC. So all they’re saying is that you’re still at square 1.<br>由于他们投资的领域（1）变化迅速，（2）自己并不理解，很多投资者会用一种 “事后可否认是拒绝” 的方式婉拒你。若不了解这个行业的规则，你甚至可能没意识到自己已被拒绝。比如，风投可能会这样说：<br>“我们对你的项目非常感兴趣，希望在你后续发展过程中保持密切联系。”<br>直白翻译过来就是：“我们现在不会投资你，但如果你的项目显现爆发迹象，我们可能会改变主意。” 有时他们会更坦诚一些，明确表示需要 “看到更多进展”（see some traction）—— 意思是若你能吸引大量用户，他们才会考虑投资。但实际上，所有风投都会这么说，因此这句话本质上是在告诉你：你目前仍处于起步阶段，尚未达到投资标准。</p><p>Here’s a test for deciding whether a VC’s response was yes or no. Look down at your hands. Are you holding a termsheet?<br>判断风投的回应是 “接受” 还是 “拒绝”，有一个简单的测试方法：低头看看自己的手 —— 你拿到条款清单（termsheet）了吗？</p><h2 id="You-need-investors"><a href="#You-need-investors" class="headerlink" title="You need investors."></a><strong>You need investors.</strong></h2><h2 id="你需要投资者"><a href="#你需要投资者" class="headerlink" title="你需要投资者"></a><strong>你需要投资者</strong></h2><p>Some founders say “Who needs investors?” Empirically the answer seems to be: everyone who wants to succeed. Practically every successful startup takes outside investment at some point.<br>有些创始人会说 “谁需要投资者呢？” 但从实际案例来看，答案似乎是：所有想成功的人都需要。几乎所有成功的初创公司，在某个阶段都接受过外部投资。</p><p>Why? What the people who think they don’t need investors forget is that they will have competitors. The question is not whether you need outside investment, but whether it could help you at all. If the answer is yes, and you don’t take investment, then competitors who do will have an advantage over you. And in the startup world a little advantage can expand into a lot.<br>为什么？那些认为自己不需要投资者的人，忽略了一个事实：他们会面临竞争对手。关键问题不在于 “你是否需要外部投资”，而在于 “投资是否能给你带来帮助”。若答案是肯定的，而你拒绝投资，那么接受投资的竞争对手就会获得对你的优势。在初创行业，微小的优势可能会迅速扩大为巨大的差距。</p><p>Mike Moritz famously said that he invested in Yahoo because he thought they had a few weeks’ lead over their competitors. That may not have mattered quite so much as he thought, because Google came along three years later and kicked Yahoo’s ass. But there is something in what he said. Sometimes a small lead can grow into the yes half of a binary choice.<br>迈克・莫里茨（红杉资本合伙人）曾有句名言：他投资雅虎，是因为认为雅虎比竞争对手领先了几周。尽管后来的结果证明，这个领先优势或许没他想的那么重要（三年后谷歌崛起，远超雅虎），但他的话仍有道理 —— 有时，微小的领先优势可能会成为 “成功与否” 的关键分水岭。</p><p>Maybe as it gets cheaper to start a startup, it will start to be possible to succeed in a competitive market without outside funding. There are certainly costs to raising money. But as of this writing the empirical evidence says it’s a net win.<br>或许，随着初创公司的启动成本降低，未来在竞争市场中不依赖外部投资也能成功。当然，融资确实有成本，但截至本文撰写时，实际案例表明，接受外部投资的收益大于成本（即净收益为正）。</p><h2 id="Investors-like-it-when-you-don’t-need-them"><a href="#Investors-like-it-when-you-don’t-need-them" class="headerlink" title="Investors like it when you don’t need them."></a><strong>Investors like it when you don’t need them.</strong></h2><h2 id="你越不需要投资者，他们越青睐你"><a href="#你越不需要投资者，他们越青睐你" class="headerlink" title="你越不需要投资者，他们越青睐你"></a><strong>你越不需要投资者，他们越青睐你</strong></h2><p>A lot of founders approach investors as if they needed their permission to start a company—as if it were like getting into college. But you don’t need investors to start most companies; they just make it easier.<br>很多创始人与投资者接触时，仿佛需要对方 “批准” 才能创办公司 —— 就像申请大学需要获得录取通知书一样。但实际上，创办大多数公司并不需要投资者，他们只是能让这个过程更轻松而已。</p><p>And in fact, investors greatly prefer it if you don’t need them. What excites them, both consciously and unconsciously, is the sort of startup that approaches them saying “the train’s leaving the station; are you in or out?” not the one saying “please can we have some money to start a company?”<br>事实上，你越不需要投资者，他们反而越青睐你。无论是有意识还是无意识，最让投资者兴奋的，是那种带着 “列车即将发车，你要不要上车？” 态度来接触他们的初创公司，而非那种带着 “求您给点钱让我们创业” 姿态的公司。</p><p>Most investors are “bottoms” in the sense that the startups they like most are those that are rough with them. When Google stuck Kleiner and Sequoia with a $75 million premoney valuation, their reaction was probably “Ouch! That feels so good.” And they were right, weren’t they? That deal probably made them more than any other they’ve done.<br>从某种程度上来说，大多数投资者就像 “被动接受者”—— 他们最喜欢的，是那些对他们态度强硬的初创公司。当年谷歌以 7500 万美元的投前估值与凯鹏华盈和红杉资本合作时，这两家风投的反应或许是 “有点疼，但真爽”。而事实证明他们是对的，不是吗？这笔投资带来的回报，很可能比他们做过的任何其他投资都要高。</p><p>The thing is, VCs are pretty good at reading people. So don’t try to act tough with them unless you really are the next Google, or they’ll see through you in a second. Instead of acting tough, what most startups should do is simply always have a backup plan. Always have some alternative plan for getting started if any given investor says no. Having one is the best insurance against needing one.<br>但要注意，风险投资家非常擅长洞察人心。因此，除非你真的能成为下一个谷歌，否则不要试图在他们面前装强硬 —— 他们一秒钟就能看穿你。对大多数初创公司而言，与其装强硬，不如始终做好备选方案：若某家投资者拒绝你，总有其他启动计划能让公司继续推进。有备选方案，就是避免 “必须依赖某一家投资者” 的最佳保障。</p><p>So you shouldn’t start a startup that’s expensive to start, because then you’ll be at the mercy of investors. If you ultimately want to do something that will cost a lot, start by doing a cheaper subset of it, and expand your ambitions when and if you raise more money.<br>因此，不要创办启动成本高昂的初创公司，否则你会完全受制于投资者。如果你最终想做的事需要大量资金，不妨先从成本较低的核心子集做起，等筹集到更多资金（如果能筹集到的话），再逐步扩大目标。</p><p>Apparently the most likely animals to be left alive after a nuclear war are cockroaches, because they’re so hard to kill. That’s what you want to be as a startup, initially. Instead of a beautiful but fragile flower that needs to have its stem in a plastic tube to support itself, better to be small, ugly, and indestructible.<br>显然，核战争后最有可能存活下来的生物是蟑螂，因为它们的生存能力极强。初创公司在初期就应该像蟑螂一样。与其做一朵美丽却脆弱、需要塑料支架才能直立的花，不如做一只渺小、不起眼却坚不可摧的蟑螂。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] I may be underestimating VCs. They may play some behind the scenes role in IPOs, which you ultimately need if you want to create a silicon valley.<br>[1] 我或许低估了风险投资家的作用。他们可能在企业 IPO（首次公开募股）中扮演着幕后角色，而若想打造 “硅谷式” 生态，IPO 最终是不可或缺的环节。<br>[2] A few VCs have an email address you can send your business plan to, but the number of startups that get funded this way is basically zero. You should always get a personal introduction—and to a partner, not an associate.<br>[2] 少数风险投资公司会提供接收商业计划书的邮箱，但通过这种方式获得投资的初创公司数量基本为零。你始终应该通过私人介绍接触投资者 —— 而且要介绍给合伙人，而非普通员工。<br>[3] Several people have told us that the most valuable thing about startup school was that they got to see famous startup founders and realized they were just ordinary guys. Though we’re happy to provide this service, this is not generally the way we pitch startup school to potential speakers.<br>[3] 有好几个人告诉我们，创业学校（Startup School）最有价值的地方，是让他们有机会接触知名初创公司创始人，并发现这些创始人其实都是普通人。尽管我们很乐意提供这样的 “认知服务”，但在向潜在演讲者推介创业学校时，我们通常不会用这个理由。<br>[4] Actually this sounds to me like a VC who got buyer’s remorse, then used a technicality to get out of the deal. But it’s telling that it even seemed a plausible excuse.<br>[4] 事实上，在我看来，这个案例更像是某风险投资家出现了 “买家懊悔”，然后用一个技术细节为借口退出了交易。但值得注意的是，这个借口竟然听起来还挺合理。</p><p>Thanks to Sam Altman, Paul Buchheit, Hutch Fishman, and Robert Morris for reading drafts of this, and to Kenneth King of ASES for inviting me to speak.<br>感谢萨姆・奥尔特曼（Sam Altman）、保罗・布赫海特（Paul Buchheit）、哈奇・菲什曼（Hutch Fishman）和罗伯特・莫里斯（Robert Morris）审阅本文初稿，同时感谢 ASES 的肯尼斯・金（Kenneth King）邀请我进行此次演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两种评判方式</title>
    <link href="/2025/09/16/two-kinds-of-judgement/"/>
    <url>/2025/09/16/two-kinds-of-judgement/</url>
    
    <content type="html"><![CDATA[<h1 id="Two-Kinds-of-Judgement"><a href="#Two-Kinds-of-Judgement" class="headerlink" title="Two Kinds of Judgement"></a>Two Kinds of Judgement</h1><h2 id="两种评判方式"><a href="#两种评判方式" class="headerlink" title="两种评判方式"></a>两种评判方式</h2><p>原文链接: <a href="https://paulgraham.com/judgement.html">https://paulgraham.com/judgement.html</a></p><p>April 2007</p><p>There are two different ways people judge you. Sometimes judging you correctly is the end goal. But there’s a second much more common type of judgement where it isn’t. We tend to regard all judgements of us as the first type. We’d probably be happier if we realized which are and which aren’t.<br>人们评判你的方式有两种。有时，准确评判你本身就是最终目的。但还有第二种更为常见的评判方式，在这种方式中，准确评判你并非最终目的。我们往往会把所有针对自己的评判都归为第一种类型。如果我们能分清哪些是第一种、哪些是第二种，或许会过得更开心。</p><p>The first type of judgement, the type where judging you is the end goal, include court cases, grades in classes, and most competitions. Such judgements can of course be mistaken, but because the goal is to judge you correctly, there’s usually some kind of appeals process. If you feel you’ve been misjudged, you can protest that you’ve been treated unfairly.<br>第一种评判 —— 即以准确评判你为最终目的的评判 —— 包括法庭审判、课程评分以及大多数竞赛。这类评判当然有可能出现偏差，但由于其目的是准确评判你，通常会设有某种申诉机制。如果你觉得自己被误判了，可以提出抗议，表明自己受到了不公平对待。</p><p>Nearly all the judgements made on children are of this type, so we get into the habit early in life of thinking that all judgements are.<br>几乎所有针对儿童的评判都属于这种类型，因此我们在人生早期就养成了一种习惯，认为所有评判都是如此。</p><p>But in fact there is a second much larger class of judgements where judging you is only a means to something else. These include college admissions, hiring and investment decisions, and of course the judgements made in dating. This kind of judgement is not really about you.<br>但事实上，还有第二类规模大得多的评判，在这类评判中，评判你只是达成其他目的的一种手段。大学录取、招聘、投资决策，当然还有恋爱中的择偶判断，都属于这类评判。这类评判其实和你本人并没有太大关系。</p><p>Put yourself in the position of someone selecting players for a national team. Suppose for the sake of simplicity that this is a game with no positions, and that you have to select 20 players. There will be a few stars who clearly should make the team, and many players who clearly shouldn’t. The only place your judgement makes a difference is in the borderline cases. Suppose you screw up and underestimate the 20th best player, causing him not to make the team, and his place to be taken by the 21st best. You’ve still picked a good team. If the players have the usual distribution of ability, the 21st best player will be only slightly worse than the 20th best. Probably the difference between them will be less than the measurement error.<br>不妨设想你是为国家队挑选队员的人。为了简化问题，假设这项运动没有位置之分，而你需要挑选 20 名队员。其中，有些明星队员显然应该入选，还有很多队员显然不符合要求。你的评判唯一能产生影响的，只有那些处于 “边缘地带” 的候选人。假设你犯了个错，低估了排名第 20 位的队员，导致他没能入选，取而代之的是排名第 21 位的队员。即便如此，你选出的依然是一支优秀的队伍。如果队员的能力分布符合常规情况，那么排名第 21 位的队员只会比第 20 位的队员稍差一点，两人之间的差距很可能还小于评判过程中的误差。</p><p>The 20th best player may feel he has been misjudged. But your goal here wasn’t to provide a service estimating people’s ability. It was to pick a team, and if the difference between the 20th and 21st best players is less than the measurement error, you’ve still done that optimally.<br>那位排名第 20 位的队员可能会觉得自己被误判了。但你的目的并非提供一项 “评估个人能力” 的服务，而是挑选一支队伍。如果第 20 位和第 21 位队员之间的差距小于评判误差，那么你依然以最优的方式完成了挑选任务。</p><p>It’s a false analogy even to use the word unfair to describe this kind of misjudgement. It’s not aimed at producing a correct estimate of any given individual, but at selecting a reasonably optimal set.<br>用 “不公平” 这个词来描述这类 “误判”，本身就是一种错误的类比。这类评判的目的并非准确评估某个特定个体，而是挑选出一个相对最优的群体。</p><p>One thing that leads us astray here is that the selector seems to be in a position of power. That makes him seem like a judge. If you regard someone judging you as a customer instead of a judge, the expectation of fairness goes away. The author of a good novel wouldn’t complain that readers were unfair for preferring a potboiler with a racy cover. Stupid, perhaps, but not unfair.<br>让我们产生误解的一点是，挑选者似乎处于权力地位，这让他们看起来像法官一样。但如果你把评判你的人看作顾客，而非法官，对 “公平” 的期待就会消失。一本优秀小说的作者，不会因为读者更喜欢封面花哨的低俗畅销书而抱怨读者 “不公平”。读者的选择或许显得愚蠢，但绝非不公平。</p><p>Our early training and our self-centeredness combine to make us believe that every judgement of us is about us. In fact most aren’t. This is a rare case where being less self-centered will make people more confident. Once you realize how little most people judging you care about judging you accurately—once you realize that because of the normal distribution of most applicant pools, it matters least to judge accurately in precisely the cases where judgement has the most effect—you won’t take rejection so personally.<br>我们早年的经历和自身的自我中心倾向，让我们误以为所有针对自己的评判都与自己息息相关。但事实上，大多数评判并非如此。这是一种少见的情况：减少自我中心倾向，反而能让人更有自信。一旦你意识到，大多数评判你的人其实并不在意是否准确评判你 —— 一旦你意识到，由于大多数候选人的能力分布符合常态，恰恰在那些 “评判影响最大” 的场合，“准确评判” 的重要性最低 —— 你就不会再把被拒绝看得那么个人化了。</p><p>And curiously enough, taking rejection less personally may help you to get rejected less often. If you think someone judging you will work hard to judge you correctly, you can afford to be passive. But the more you realize that most judgements are greatly influenced by random, extraneous factors—that most people judging you are more like a fickle novel buyer than a wise and perceptive magistrate—the more you realize you can do things to influence the outcome.<br>奇怪的是，不把被拒绝看得那么个人化，或许能让你更少被拒绝。如果你认为评判你的人会努力准确地评判你，你就可能变得消极被动。但你越清楚大多数评判都深受随机、无关因素的影响 —— 越清楚大多数评判你的人更像善变的小说购买者，而非睿智敏锐的法官 —— 你就越会意识到，自己可以做些事情来影响评判结果。</p><p>One good place to apply this principle is in college applications. Most high school students applying to college do it with the usual child’s mix of inferiority and self-centeredness: inferiority in that they assume that admissions committees must be all-seeing; self-centeredness in that they assume admissions committees care enough about them to dig down into their application and figure out whether they’re good or not. These combine to make applicants passive in applying and hurt when they’re rejected. If college applicants realized how quick and impersonal most selection processes are, they’d make more effort to sell themselves, and take the outcome less personally.<br>大学申请就是应用这一原则的绝佳场景。大多数申请大学的高中生，都带着孩子特有的自卑与自我中心交织的心态：自卑，是因为他们认为招生委员会 “火眼金睛”，能洞察一切；自我中心，是因为他们觉得招生委员会会格外关注自己，会深入研究自己的申请材料，判断自己是否优秀。这两种心态叠加，导致申请者在申请过程中消极被动，被拒绝时也会深受伤害。如果大学申请者能意识到，大多数选拔过程都既迅速又 “不带个人感情”，他们就会更努力地 “推销” 自己，也不会把结果看得那么个人化。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软已死</title>
    <link href="/2025/09/16/microsoft-is-dead/"/>
    <url>/2025/09/16/microsoft-is-dead/</url>
    
    <content type="html"><![CDATA[<h1 id="Microsoft-is-Dead"><a href="#Microsoft-is-Dead" class="headerlink" title="Microsoft is Dead"></a>Microsoft is Dead</h1><h1 id="微软已死"><a href="#微软已死" class="headerlink" title="微软已死"></a>微软已死</h1><p>原文链接: <a href="https://paulgraham.com/microsoft.html">https://paulgraham.com/microsoft.html</a></p><p>April 2007</p><p>A few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they’d positioned themselves as a “media company” instead of a technology company. Then I looked at his face and realized he didn’t understand. It was as if I’d told him how much girls liked Barry Manilow in the mid 80s. Barry who?<br>几天前，我突然意识到微软已经 “死了”。当时我正和一位年轻的创业公司创始人讨论谷歌与雅虎的不同之处。我提到，雅虎从一开始就因为对微软的恐惧而走上了弯路，这也是他们将自己定位为 “媒体公司” 而非 “科技公司” 的原因。可当我看到他的表情时，才发现他完全不理解我的话。那种感觉就像我跟他说，80 年代中期的女孩们有多喜欢巴里・马尼洛（Barry Manilow），而他只会反问：“巴里是谁？”</p><p>Microsoft? He didn’t say anything, but I could tell he didn’t quite believe anyone would be frightened of them.<br>微软？他虽然没说出口，但我能看出来，他根本不相信会有人害怕微软。</p><p>Microsoft cast a shadow over the software world for almost 20 years starting in the late 80s. I can remember when it was IBM before them. I mostly ignored this shadow. I never used Microsoft software, so it only affected me indirectly—for example, in the spam I got from botnets. And because I wasn’t paying attention, I didn’t notice when the shadow disappeared.<br>从 80 年代末开始，微软在软件行业的上空笼罩了近 20 年的阴影。我还记得，在微软之前，这个位置属于 IBM。不过我大多时候都对这层阴影不以为意 —— 我从不使用微软的软件，所以它对我的影响都是间接的，比如僵尸网络发送给我的垃圾邮件。也正因为我没太在意，所以当这层阴影消失时，我都没察觉到。</p><p>But it’s gone now. I can sense that. No one is even afraid of Microsoft anymore. They still make a lot of money—so does IBM, for that matter. But they’re not dangerous.<br>但现在，这层阴影确实消失了，我能明显感觉到。如今已经没人再害怕微软了。他们确实还在赚很多钱 ——IBM 现在也是如此 —— 但他们已经不具备威胁性了。</p><p>When did Microsoft die, and of what? I know they seemed dangerous as late as 2001, because I wrote an essay then about how they were less dangerous than they seemed. I’d guess they were dead by 2005. I know when we started Y Combinator we didn’t worry about Microsoft as competition for the startups we funded. In fact, we’ve never even invited them to the demo days we organize for startups to present to investors. We invite Yahoo and Google and some other Internet companies, but we’ve never bothered to invite Microsoft. Nor has anyone there ever even sent us an email. They’re in a different world.<br>微软是何时 “死亡” 的？又是什么导致了它的 “死亡”？我记得直到 2001 年，它看起来仍颇具威胁 —— 当时我还写过一篇文章，论证它其实没有表面上那么危险。我推测，到 2005 年时，它就已经 “死了”。我之所以这么说，是因为我们创办 Y Combinator（创业孵化器）时，完全不担心微软会成为我们所投资创业公司的竞争对手。事实上，我们举办创业公司向投资者展示项目的 “演示日” 活动时，甚至从未邀请过微软。我们会邀请雅虎、谷歌以及其他一些互联网公司，但从未想过要邀请微软。而微软那边，也从来没有人给我们发过邮件。他们仿佛活在一个完全不同的世界里。</p><p>What killed them? Four things, I think, all of them occurring simultaneously in the mid 2000s.<br>是什么 “杀死” 了微软？我认为有四个原因，且所有原因都在 21 世纪中期同时出现。</p><p>The most obvious is Google. There can only be one big man in town, and they’re clearly it. Google is the most dangerous company now by far, in both the good and bad senses of the word. Microsoft can at best limp along afterward.<br>最明显的原因是谷歌。行业里往往只能有一个 “巨头”，而谷歌显然已经成为了这个角色。如今，无论从积极还是消极意义上来说，谷歌都是目前最具威胁性的公司。在那之后，微软最多只能勉强维持运营。</p><p>When did Google take the lead? There will be a tendency to push it back to their IPO in August 2004, but they weren’t setting the terms of the debate then. I’d say they took the lead in 2005. Gmail was one of the things that put them over the edge. Gmail showed they could do more than search.<br>谷歌是何时占据主导地位的？很多人会倾向于将时间追溯到 2004 年 8 月谷歌上市时，但那时的谷歌还无法左右行业的走向。我认为，它是在 2005 年开始领跑的。Gmail（谷歌邮箱）是推动其实现这一跨越的关键因素之一 ——Gmail 证明了谷歌能做的远不止搜索。</p><p>Gmail also showed how much you could do with web-based software, if you took advantage of what later came to be called “Ajax.” And that was the second cause of Microsoft’s death: everyone can see the desktop is over. It now seems inevitable that applications will live on the web—not just email, but everything, right up to Photoshop. Even Microsoft sees that now.<br>Gmail 还向人们展示了：如果充分利用后来被称为 “Ajax”（异步 JavaScript 和 XML）的技术，网页端软件能实现多么强大的功能。而这也成为了 “杀死” 微软的第二个原因：所有人都意识到，桌面端软件的时代已经结束了。如今，应用程序（无论是电子邮件，还是像 Photoshop 这样的专业软件）都将转移到网页端，这似乎已成定局。就连微软现在也意识到了这一点。</p><p>Ironically, Microsoft unintentionally helped create Ajax. The x in Ajax is from the XMLHttpRequest object, which lets the browser communicate with the server in the background while displaying a page. (Originally the only way to communicate with the server was to ask for a new page.) XMLHttpRequest was created by Microsoft in the late 90s because they needed it for Outlook. What they didn’t realize was that it would be useful to a lot of other people too—in fact, to anyone who wanted to make web apps work like desktop ones.<br>颇具讽刺意味的是，微软在无意中为 Ajax 的诞生提供了帮助。Ajax 中的 “X” 源自 “XMLHttpRequest”（XMLHttpRequest 对象），这个技术能让浏览器在显示页面的同时，在后台与服务器进行通信（最初，浏览器与服务器通信的唯一方式是请求加载新页面）。XMLHttpRequest 是微软在 90 年代末开发的，当时是为了满足 Outlook（微软邮件客户端）的功能需求。但微软当时没有意识到，这个技术对其他很多人也同样有用 —— 事实上，任何想让网页应用具备桌面应用般流畅体验的人，都能用得上它。</p><p>The other critical component of Ajax is Javascript, the programming language that runs in the browser. Microsoft saw the danger of Javascript and tried to keep it broken for as long as they could. [1] But eventually the open source world won, by producing Javascript libraries that grew over the brokenness of Explorer the way a tree grows over barbed wire.<br>Ajax 的另一个关键组成部分是 JavaScript—— 一种能在浏览器中运行的编程语言。微软早就察觉到了 JavaScript 的威胁，因此一直试图让这项技术 “处于故障状态”，不让它正常发展。[1] 但最终，开源社区取得了胜利：他们开发出了各种 JavaScript 库，绕过了 IE 浏览器（Explorer）的缺陷，就像树木能绕过铁丝网生长一样。</p><p>The third cause of Microsoft’s death was broadband Internet. Anyone who cares can have fast Internet access now. And the bigger the pipe to the server, the less you need the desktop.<br>“杀死” 微软的第三个原因是宽带互联网的普及。如今，只要有需求，几乎所有人都能用上高速网络。而用户与服务器之间的 “数据通道” 越宽（网速越快），对桌面端软件的需求就越低。</p><p>The last nail in the coffin came, of all places, from Apple. Thanks to OS X, Apple has come back from the dead in a way that is extremely rare in technology. [2] Their victory is so complete that I’m now surprised when I come across a computer running Windows. Nearly all the people we fund at Y Combinator use Apple laptops. It was the same in the audience at startup school. All the computer people use Macs or Linux now. Windows is for grandmas, like Macs used to be in the 90s. So not only does the desktop no longer matter, no one who cares about computers uses Microsoft’s anyway.<br>给微软 “棺材钉上最后一颗钉子” 的，竟然是苹果公司。凭借 OS X 系统，苹果实现了科技行业中极为罕见的 “起死回生”。[2] 苹果的胜利是如此彻底：现在当我看到有人使用 Windows 系统的电脑时，反而会感到惊讶。在 Y Combinator 投资的项目团队中，几乎所有人都用苹果笔记本；创业学校（Startup School）的观众也大多如此。如今，所有懂电脑的人不是用 Mac（苹果电脑）就是用 Linux 系统，Windows 则成了 “奶奶辈” 的选择 —— 就像 90 年代时的 Mac 一样。所以，如今的情况是：不仅桌面端时代已经落幕，就连真正关注电脑的人，也没人再用微软的产品了。</p><p>And of course Apple has Microsoft on the run in music too, with TV and phones on the way.<br>当然，苹果在音乐领域也让微软节节败退，而在电视和手机领域，苹果对微软的优势也在逐步扩大。</p><p>I’m glad Microsoft is dead. They were like Nero or Commodus—evil in the way only inherited power can make you. Because remember, the Microsoft monopoly didn’t begin with Microsoft. They got it from IBM. The software business was overhung by a monopoly from about the mid-1950s to about 2005. For practically its whole existence, that is. One of the reasons “Web 2.0” has such an air of euphoria about it is the feeling, conscious or not, that this era of monopoly may finally be over.<br>我很高兴微软已经 “死了”。它就像罗马帝国的尼禄（Nero）或康茂德（Commodus）皇帝一样 —— 那种 “恶”，是只有继承而来的权力才能造就的。要知道，微软的垄断地位并非自己开创的，而是从 IBM 那里 “继承” 来的。从 20 世纪 50 年代中期到 21 世纪 00 年代中期，软件行业几乎一直被垄断阴影笼罩，可以说，在软件行业存在的大部分时间里，垄断都是常态。而 “Web 2.0”（第二代互联网）之所以洋溢着一种兴奋的氛围，原因之一就是人们（无论是否有意识地察觉）都觉得，那个垄断的时代或许终于结束了。</p><p>Of course, as a hacker I can’t help thinking about how something broken could be fixed. Is there some way Microsoft could come back? In principle, yes. To see how, envision two things: (a) the amount of cash Microsoft now has on hand, and (b) Larry and Sergey making the rounds of all the search engines ten years ago trying to sell the idea for Google for a million dollars, and being turned down by everyone.<br>当然，作为一名黑客，我忍不住会思考：“出了问题的事物是否有修复的可能？” 微软有没有可能东山再起？理论上是有的。要理解这种可能性，不妨想象两件事：第一，微软现在手握的现金规模；第二，十年前（注：以文章发表的 2007 年计算，即 1997 年左右），拉里・佩奇（Larry Page）和谢尔盖・布林（Sergey Brin）曾拜访过所有搜索引擎公司，试图以 100 万美元的价格卖掉谷歌的想法，却遭到了所有人的拒绝。</p><p>The surprising fact is, brilliant hackers—dangerously brilliant hackers—can be had very cheaply, by the standards of a company as rich as Microsoft. They can’t hire smart people anymore, but they could buy as many as they wanted for only an order of magnitude more. So if they wanted to be a contender again, this is how they could do it:<br>一个令人惊讶的事实是：以微软这样财力雄厚的公司的标准来看，那些才华横溢的黑客 —— 甚至是 “极具威胁性的天才黑客”—— 其实 “很便宜” 就能挖到。微软现在可能招不到顶尖人才了，但他们完全可以通过收购（拥有这些人才的公司）来获取人才，而且所需的成本，相比其他方式也高不了一个数量级。所以，如果微软想重新成为行业竞争者，或许可以这样做：</p><p>Buy all the good “Web 2.0” startups. They could get substantially all of them for less than they’d have to pay for Facebook.<br>收购所有优秀的 “Web 2.0” 创业公司。要买下这些公司，所需的总资金可能都比单独收购 Facebook 一家要少。</p><p>Put them all in a building in Silicon Valley, surrounded by lead shielding to protect them from any contact with Redmond.<br>把这些公司都安置在硅谷的一栋大楼里，用 “铅屏蔽” 把他们与微软总部所在的雷德蒙德（Redmond）完全隔离开，避免他们受到任何影响。</p><p>I feel safe suggesting this, because they’d never do it. Microsoft’s biggest weakness is that they still don’t realize how much they suck. They still think they can write software in house. Maybe they can, by the standards of the desktop world. But that world ended a few years ago.<br>我敢放心地提出这个建议，是因为微软绝对不会这么做。微软最大的弱点在于，他们至今仍没意识到自己有多 “糟糕”—— 他们还以为自己能在内部开发出优秀的软件。或许以桌面端时代的标准来看，他们确实能做到，但那个时代早在几年前就已经结束了。</p><p>I already know what the reaction to this essay will be. Half the readers will say that Microsoft is still an enormously profitable company, and that I should be more careful about drawing conclusions based on what a few people think in our insular little “Web 2.0” bubble. The other half, the younger half, will complain that this is old news.<br>我已经能预料到读者对这篇文章的反应：一半的读者会说，微软仍然是一家利润极高的公司，认为我不该仅凭 “Web 2.0” 这个封闭小圈子里几个人的看法就下结论；而另一半读者 —— 也就是更年轻的那部分 —— 则会抱怨说，这些都是旧闻了。</p><p><strong>Notes</strong><br><strong>注释</strong></p><p>[1] It doesn’t take a conscious effort to make software incompatible. All you have to do is not work too hard at fixing bugs—which, if you’re a big company, you produce in copious quantities. The situation is analogous to the writing of “literary theorists.” Most don’t try to be obscure; they just don’t make an effort to be clear. It wouldn’t pay.<br>[1] 要让软件不兼容，其实不需要刻意为之。你要做的只是不花心思去修复漏洞 —— 而对于大公司来说，漏洞本来就多得数不胜数。这种情况就像 “文学理论家” 写文章：大多数人并非故意写得晦涩难懂，只是没花心思把内容写清楚而已，因为 “写清楚” 对他们来说没有好处。</p><p>[2] In part because Steve Jobs got pushed out by John Sculley in a way that’s rare among technology companies. If Apple’s board hadn’t made that blunder, they wouldn’t have had to bounce back.<br>[2] 苹果之前陷入困境，部分原因是史蒂夫・乔布斯（Steve Jobs）被约翰・斯卡利（John Sculley）排挤出公司 —— 这种情况在科技公司中并不常见。如果当时苹果董事会没有犯下这个错误，苹果后来也就不需要 “东山再起” 了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并非不创业的理由</title>
    <link href="/2025/09/15/why-to-not-not-start-a-startup/"/>
    <url>/2025/09/15/why-to-not-not-start-a-startup/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-to-Not-Not-Start-a-Startup"><a href="#Why-to-Not-Not-Start-a-Startup" class="headerlink" title="Why to Not Not Start a Startup"></a>Why to Not Not Start a Startup</h1><h1 id="并非不创业的理由"><a href="#并非不创业的理由" class="headerlink" title="并非不创业的理由"></a>并非不创业的理由</h1><p>原文链接: <a href="https://paulgraham.com/notnot.html">https://paulgraham.com/notnot.html</a></p><p>March 2007</p><p>(This essay is derived from talks at the 2007 Startup School and the Berkeley CSUA.)<br>（本文改编自 2007 年创业学校（Startup School）和加州大学伯克利分校计算机科学本科生协会（Berkeley CSUA）的演讲内容。）</p><p>We’ve now been doing Y Combinator long enough to have some data about success rates. Our first batch, in the summer of 2005, had eight startups in it. Of those eight, it now looks as if at least four succeeded. Three have been acquired: Reddit was a merger of two, Reddit and Infogami, and a third was acquired that we can’t talk about yet. Another from that batch was Loopt, which is doing so well they could probably be acquired in about ten minutes if they wanted to.<br>如今，我们运营 Y Combinator（注：美国著名创业孵化器）的时间已经足够长，能够收集到一些关于创业成功率的数据了。我们的第一期孵化项目始于 2005 年夏天，当时共有 8 家初创公司参与。时至今日，这 8 家公司中，至少有 4 家看起来是成功的。其中 3 家已被收购：Reddit 是由两家公司（Reddit 和 Infogami）合并而成，之后被收购；还有一家的收购事宜目前暂不便透露。同一批中的另一家公司 Loopt 发展势头良好，只要他们愿意，或许在十分钟内就能找到收购方。</p><p>So about half the founders from that first summer, less than two years ago, are now rich, at least by their standards. (One thing you learn when you get rich is that there are many degrees of it.)<br>因此，在不到两年前的第一期孵化项目中，约有一半的创始人如今已经变得富有 —— 至少以他们自己的标准来看是这样。（当你变得富有时会明白一件事：财富是分不同等级的。）</p><p>I’m not ready to predict our success rate will stay as high as 50%. That first batch could have been an anomaly. But we should be able to do better than the oft-quoted (and probably made up) standard figure of 10%. I’d feel safe aiming at 25%.<br>我目前还无法断言我们的成功率会一直保持在 50% 这么高的水平。第一期项目的结果可能只是个特例。但我们的表现理应比那个常被引用（而且很可能是编造的）的 10% 行业标准成功率要好。如果将目标定在 25%，我会觉得比较稳妥。</p><p>Even the founders who fail don’t seem to have such a bad time. Of those first eight startups, three are now probably dead. In two cases the founders just went on to do other things at the end of the summer. I don’t think they were traumatized by the experience. The closest to a traumatic failure was Kiko, whose founders kept working on their startup for a whole year before being squashed by Google Calendar. But they ended up happy. They sold their software on eBay for a quarter of a million dollars. After they paid back their angel investors, they had about a year’s salary each. [1] Then they immediately went on to start a new and much more exciting startup, Justin.TV.<br>即便那些创业失败的创始人，日子似乎也不算太糟。在最初的 8 家初创公司中，有 3 家如今很可能已经倒闭了。其中两家公司的创始人在那个夏天结束后，只是转而去做了其他事情，这段创业经历并没有给他们带来心理创伤。最接近 “惨痛失败” 的案例是 Kiko：这家公司的创始人坚持运营了整整一年，最终还是被谷歌日历（Google Calendar）挤压得无法生存。但他们最后还是过得不错 —— 他们在 eBay 上把公司的软件卖了 25 万美元。在偿还了天使投资人的资金后，每个人还能拿到大约一年的薪水 [1]。随后，他们立刻创办了一家新的、更令人兴奋的初创公司 ——Justin.TV（注：知名直播平台 Twitch 的前身）。</p><p>So here is an even more striking statistic: 0% of that first batch had a terrible experience. They had ups and downs, like every startup, but I don’t think any would have traded it for a job in a cubicle. And that statistic is probably not an anomaly. Whatever our long-term success rate ends up being, I think the rate of people who wish they’d gotten a regular job will stay close to 0%.<br>因此，有一个更引人注目的数据：第一期项目中，没有任何一位创始人（即 0%）拥有糟糕的创业经历。和所有初创公司一样，他们的创业过程也有起有伏，但我认为没有人会愿意用这段经历去换一份在格子间里的朝九晚五的工作。而且这个数据很可能并非特例。无论我们最终的长期成功率如何，我相信那些 “后悔没找一份常规工作” 的创始人比例会一直接近于 0%。</p><p>The big mystery to me is: why don’t more people start startups? If nearly everyone who does it prefers it to a regular job, and a significant percentage get rich, why doesn’t everyone want to do this? A lot of people think we get thousands of applications for each funding cycle. In fact we usually only get several hundred. Why don’t more people apply? And while it must seem to anyone watching this world that startups are popping up like crazy, the number is small compared to the number of people with the necessary skills. The great majority of programmers still go straight from college to cubicle, and stay there.<br>对我来说，一个很大的谜团是：为什么没有更多人去创业？如果几乎所有创业者都认为创业比常规工作更值得做，而且有相当一部分人通过创业变得富有，那为什么不是所有人都想尝试呢？很多人以为，我们每一轮融资周期都会收到数千份申请，但实际上通常只有几百份。为什么没有更多人申请？而且，在任何关注这个领域的人看来，初创公司似乎在 “疯狂涌现”，但与具备创业所需技能的人数相比，实际创业的人数其实很少。绝大多数程序员大学毕业后，还是会直接走进格子间工作，并且一直待在那里。</p><p>It seems like people are not acting in their own interest. What’s going on? Well, I can answer that. Because of Y Combinator’s position at the very start of the venture funding process, we’re probably the world’s leading experts on the psychology of people who aren’t sure if they want to start a company.<br>人们似乎没有在为自己的利益行事。这到底是怎么回事？其实我能给出答案。由于 Y Combinator 处于风险投资流程的最前端，我们或许是全球最了解 “不确定自己是否想创业的人” 的心理状态的专家。</p><p>There’s nothing wrong with being unsure. If you’re a hacker thinking about starting a startup and hesitating before taking the leap, you’re part of a grand tradition. Larry and Sergey seem to have felt the same before they started Google, and so did Jerry and Filo before they started Yahoo. In fact, I’d guess the most successful startups are the ones started by uncertain hackers rather than gung-ho business guys.<br>犹豫不决本身并没有错。如果你是一名程序员（注：此处 “hacker” 指擅长编程的技术人员，非 “黑客”），正在考虑创业却迟迟不敢迈出那一步，那么你其实加入了一个 “伟大的传统”。拉里・佩奇（Larry Page）和谢尔盖・布林（Sergey Brin）在创办谷歌（Google）之前，似乎也有过同样的犹豫；杰瑞・杨（Jerry Yang）和戴夫・费罗（Dave Filo）在创办雅虎（Yahoo）之前也是如此。事实上，我认为最成功的初创公司，往往是由那些犹豫不决的技术人员创办的，而非那些热情高涨的商人。</p><p>We have some evidence to support this. Several of the most successful startups we’ve funded told us later that they only decided to apply at the last moment. Some decided only hours before the deadline.<br>我们有一些证据可以支持这一点。我们资助过的几家最成功的初创公司后来表示，他们是在最后一刻才决定申请我们的孵化项目的，有些甚至在截止日期前几个小时才做出决定。</p><p>The way to deal with uncertainty is to analyze it into components. Most people who are reluctant to do something have about eight different reasons mixed together in their heads, and don’t know themselves which are biggest. Some will be justified and some bogus, but unless you know the relative proportion of each, you don’t know whether your overall uncertainty is mostly justified or mostly bogus.<br>应对犹豫的方法，是将其拆解成不同的因素来分析。大多数不愿意做某件事的人，脑海里往往混杂着大约八个不同的理由，而且他们自己也不知道哪些理由是最主要的。这些理由中，有些是合理的，有些则站不住脚。但除非你清楚每个理由所占的比重，否则你无法判断自己整体的犹豫究竟是大多合理，还是大多毫无根据。</p><p>So I’m going to list all the components of people’s reluctance to start startups, and explain which are real. Then would-be founders can use this as a checklist to examine their own feelings.<br>因此，我将列出人们不愿创业的所有因素，并解释哪些因素是真实存在的问题，哪些不是。这样一来，那些潜在的创业者就可以把这份清单当作自我审视的工具，理清自己的想法。</p><p>I admit my goal is to increase your self-confidence. But there are two things different here from the usual confidence-building exercise. One is that I’m motivated to be honest. Most people in the confidence-building business have already achieved their goal when you buy the book or pay to attend the seminar where they tell you how great you are. Whereas if I encourage people to start startups who shouldn’t, I make my own life worse. If I encourage too many people to apply to Y Combinator, it just means more work for me, because I have to read all the applications.<br>我承认，我的目标是增强大家的自信心。但这与通常的 “打气” 活动有两点不同。首先，我有足够的动力去保持诚实。在 “励志行业” 里，大多数人只要让你买下他们的书，或者付费参加他们的研讨会（在会上他们会一个劲地夸你很棒），就算达成目标了。但如果我鼓励那些不适合创业的人去创业，只会让我自己的生活变得更糟 —— 要是我怂恿太多人申请 Y Combinator，那意味着我要阅读更多的申请材料，工作量会大大增加。</p><p>The other thing that’s going to be different is my approach. Instead of being positive, I’m going to be negative. Instead of telling you “come on, you can do it” I’m going to consider all the reasons you aren’t doing it, and show why most (but not all) should be ignored. We’ll start with the one everyone’s born with.<br>第二点不同在于我的方法。我不会用积极鼓励的方式，而是会采用 “反向思考” 的方式。我不会对你说 “加油，你能行”，而是会分析所有让你不愿创业的理由，并说明为什么其中大多数（但并非全部）理由都应该被忽略。我们先从一个几乎人人都有的顾虑开始。</p><h2 id="Too-young"><a href="#Too-young" class="headerlink" title="Too young"></a><strong>Too young</strong></h2><h2 id="年纪太小"><a href="#年纪太小" class="headerlink" title="年纪太小"></a><strong>年纪太小</strong></h2><p>A lot of people think they’re too young to start a startup. Many are right. The median age worldwide is about 27, so probably a third of the population can truthfully say they’re too young.<br>很多人认为自己年纪太小，不适合创业。其中不少人的想法是对的。全球人口的年龄中位数约为 27 岁，因此可能有三分之一的人确实可以说自己 “年纪太小”。</p><p>What’s too young? One of our goals with Y Combinator was to discover the lower bound on the age of startup founders. It always seemed to us that investors were too conservative here—that they wanted to fund professors, when really they should be funding grad students or even undergrads.<br>那么，多大算 “年纪太小” 呢？Y Combinator 的目标之一，就是找出初创公司创始人年龄的下限。在我们看来，投资者在这方面一直过于保守 —— 他们总想给教授级别的人投资，但实际上，他们更应该资助研究生，甚至本科生。</p><p>The main thing we’ve discovered from pushing the edge of this envelope is not where the edge is, but how fuzzy it is. The outer limit may be as low as 16. We don’t look beyond 18 because people younger than that can’t legally enter into contracts. But the most successful founder we’ve funded so far, Sam Altman, was 19 at the time.<br>在不断探索这个 “年龄下限” 的过程中，我们最大的发现不是下限具体是多少，而是这个下限其实非常模糊。理论上，年龄下限可能低至 16 岁。但我们不会考虑 18 岁以下的创业者，因为从法律层面来说，18 岁以下的人无法签订合同。不过，我们目前资助过的最成功的创始人萨姆・奥尔特曼（Sam Altman），在创业时只有 19 岁。</p><p>Sam Altman, however, is an outlying data point. When he was 19, he seemed like he had a 40 year old inside him. There are other 19 year olds who are 12 inside.<br>不过，萨姆・奥尔特曼是个特例。他 19 岁时，心智成熟度堪比 40 岁的人；而有些 19 岁的人，心智却还像 12 岁的孩子。</p><p>There’s a reason we have a distinct word “adult” for people over a certain age. There is a threshold you cross. It’s conventionally fixed at 21, but different people cross it at greatly varying ages. You’re old enough to start a startup if you’ve crossed this threshold, whatever your age.<br>我们用 “成年人” 这个词来特指某个年龄段以上的人，是有原因的 —— 这背后存在一个需要跨越的 “成熟门槛”。传统上，这个门槛被设定在 21 岁，但不同的人跨越它的年龄差异很大。无论你的实际年龄是多少，只要你跨越了这个成熟门槛，就足以具备创业的 “年龄条件” 了。</p><p>How do you tell? There are a couple tests adults use. I realized these tests existed after meeting Sam Altman, actually. I noticed that I felt like I was talking to someone much older. Afterward I wondered, what am I even measuring? What made him seem older?<br>如何判断一个人是否跨越了这个门槛呢？成年人有几个判断标准。其实，我是在见到萨姆・奥尔特曼之后，才意识到这些标准的存在的。当时我就觉得，和他交谈时，感觉像是在和一个比他实际年龄大得多的人对话。后来我就想：我到底是在衡量什么？是什么让他显得如此成熟？</p><p>One test adults use is whether you still have the kid flake reflex. When you’re a little kid and you’re asked to do something hard, you can cry and say “I can’t do it” and the adults will probably let you off. As a kid there’s a magic button you can press by saying “I’m just a kid” that will get you out of most difficult situations. Whereas adults, by definition, are not allowed to flake. They still do, of course, but when they do they’re ruthlessly pruned.<br>第一个判断标准是：你是否还保留着 “孩子式的逃避本能”。当你还是个小孩时，如果有人让你做一件很难的事，你可以哭着说 “我做不到”，大人们很可能就会放过你。对孩子来说，“我还只是个孩子” 这句话就像一个 “魔法按钮”，按下它就能帮你摆脱大多数困境。但从定义上来说，成年人是不允许逃避的。当然，成年人有时也会逃避，但一旦逃避，就会受到无情的后果惩罚（注：此处 “ruthlessly pruned” 比喻因逃避责任而付出代价，如失去机会、信誉受损等）。</p><p>The other way to tell an adult is by how they react to a challenge. Someone who’s not yet an adult will tend to respond to a challenge from an adult in a way that acknowledges their dominance. If an adult says “that’s a stupid idea,” a kid will either crawl away with his tail between his legs, or rebel. But rebelling presumes inferiority as much as submission. The adult response to “that’s a stupid idea,” is simply to look the other person in the eye and say “Really? Why do you think so?”<br>另一个判断标准是看一个人如何应对质疑。尚未成熟的人在面对成年人的质疑时，往往会下意识地承认对方的 “主导地位”。如果一个成年人说 “这主意真蠢”，孩子要么会垂头丧气地退缩，要么会反抗。但无论是反抗还是顺从，本质上都默认了自己的 “劣势地位”。而成年人面对 “这主意真蠢” 的质疑时，只会直视对方的眼睛，平静地问：“是吗？你为什么这么认为？”</p><p>There are a lot of adults who still react childishly to challenges, of course. What you don’t often find are kids who react to challenges like adults. When you do, you’ve found an adult, whatever their age.<br>当然，有很多生理上的成年人，在面对质疑时依然会做出孩子气的反应。但你很少会发现，有哪个孩子能像成年人一样应对质疑。一旦你遇到这样的孩子，无论他的实际年龄是多少，他都已经是一个心智成熟的成年人了。</p><h2 id="Too-inexperienced"><a href="#Too-inexperienced" class="headerlink" title="Too inexperienced"></a><strong>Too inexperienced</strong></h2><h2 id="经验太浅"><a href="#经验太浅" class="headerlink" title="经验太浅"></a><strong>经验太浅</strong></h2><p>I once wrote that startup founders should be at least 23, and that people should work for another company for a few years before starting their own. I no longer believe that, and what changed my mind is the example of the startups we’ve funded.<br>我曾经撰文称，初创公司的创始人至少应该年满 23 岁，而且在自己创业之前，应该先在其他公司工作几年。但现在我不再这么认为了 —— 是我们资助过的那些初创公司的案例，改变了我的想法。</p><p>I still think 23 is a better age than 21. But the best way to get experience if you’re 21 is to start a startup. So, paradoxically, if you’re too inexperienced to start a startup, what you should do is start one. That’s a way more efficient cure for inexperience than a normal job. In fact, getting a normal job may actually make you less able to start a startup, by turning you into a tame animal who thinks he needs an office to work in and a product manager to tell him what software to write.<br>我依然认为 23 岁比 21 岁更适合创业。但如果你已经 21 岁，获取创业所需经验的最佳方式恰恰就是去创业。因此，看似矛盾的是：如果你因为经验太浅而不敢创业，那你更应该去创业。相比于一份常规工作，创业是解决 “经验不足” 问题效率高得多的方式。事实上，一份常规工作反而可能让你更难开启创业之路 —— 它会把你变成一只 “温顺的动物”，让你觉得工作必须依赖办公室，写什么软件也必须由产品经理来指挥。</p><p>What really convinced me of this was the Kikos. They started a startup right out of college. Their inexperience caused them to make a lot of mistakes. But by the time we funded their second startup, a year later, they had become extremely formidable. They were certainly not tame animals. And there is no way they’d have grown so much if they’d spent that year working at Microsoft, or even Google. They’d still have been diffident junior programmers.<br>真正让我确信这一点的，是 Kiko 团队的经历。他们大学刚毕业就创办了公司，经验不足让他们犯了很多错。但一年后，当我们为他们的第二家初创公司提供资助时，他们已经变得极具竞争力，绝非 “温顺的动物”。如果那一年他们是在微软，甚至谷歌工作，绝不可能有如此大的成长 —— 他们很可能还只是缺乏自信的初级程序员。</p><p>So now I’d advise people to go ahead and start startups right out of college. There’s no better time to take risks than when you’re young. Sure, you’ll probably fail. But even failure will get you to the ultimate goal faster than getting a job.<br>因此，现在我会建议人们大学毕业就直接去创业。年轻时期是承担风险的最佳时机，再没有比这更好的时候了。当然，你很可能会失败，但即便失败，也比找一份工作更能让你快速接近最终目标。</p><p>It worries me a bit to be saying this, because in effect we’re advising people to educate themselves by failing at our expense, but it’s the truth.<br>说这些话时我多少有些顾虑，因为这本质上相当于我们在建议人们 “用我们资助的项目试错，以此完成自我成长”，但这确实是事实。</p><h2 id="Not-determined-enough"><a href="#Not-determined-enough" class="headerlink" title="Not determined enough"></a><strong>Not determined enough</strong></h2><h2 id="决心不够"><a href="#决心不够" class="headerlink" title="决心不够"></a><strong>决心不够</strong></h2><p>You need a lot of determination to succeed as a startup founder. It’s probably the single best predictor of success.<br>要成为成功的初创公司创始人，你需要极强的决心。这或许是判断一个人能否创业成功的最重要单一因素。</p><p>Some people may not be determined enough to make it. It’s hard for me to say for sure, because I’m so determined that I can’t imagine what’s going on in the heads of people who aren’t. But I know they exist.<br>有些人可能确实决心不足，难以创业成功。我很难对此做出绝对肯定的判断 —— 因为我自身的决心很强，无法想象那些决心不足的人脑子里在想什么。但我知道这类人确实存在。</p><p>Most hackers probably underestimate their determination. I’ve seen a lot become visibly more determined as they get used to running a startup. I can think of several we’ve funded who would have been delighted at first to be bought for $2 million, but are now set on world domination.<br>大多数技术人员很可能低估了自己的决心。我见过很多人在逐渐适应运营初创公司的过程中，决心变得明显更强。我能想到我们资助过的几家公司：一开始，若有人愿意用 200 万美元收购他们，他们会欣喜若狂；但现在，他们的目标已经是 “征服全球市场” 了。</p><p>How can you tell if you’re determined enough, when Larry and Sergey themselves were unsure at first about starting a company? I’m guessing here, but I’d say the test is whether you’re sufficiently driven to work on your own projects. Though they may have been unsure whether they wanted to start a company, it doesn’t seem as if Larry and Sergey were meek little research assistants, obediently doing their advisors’ bidding. They started projects of their own.<br>既然拉里和谢尔盖一开始也不确定是否要创办公司，那你该如何判断自己的决心是否足够呢？我对此的猜测是：检验标准在于你是否有足够的动力去推进自己的项目。尽管他们可能不确定自己是否想创业，但拉里和谢尔盖显然不是温顺的研究助理，不会乖乖听从导师的指令 —— 他们会主动开启自己的项目。</p><h2 id="Not-smart-enough"><a href="#Not-smart-enough" class="headerlink" title="Not smart enough"></a><strong>Not smart enough</strong></h2><h2 id="不够聪明"><a href="#不够聪明" class="headerlink" title="不够聪明"></a><strong>不够聪明</strong></h2><p>You may need to be moderately smart to succeed as a startup founder. But if you’re worried about this, you’re probably mistaken. If you’re smart enough to worry that you might not be smart enough to start a startup, you probably are.<br>要成为成功的初创公司创始人，你可能需要具备中等偏上的智商。但如果你正为此担忧，那你很可能多虑了。只要你聪明到能意识到 “自己可能不够聪明去创业”，那你通常就已经足够聪明了。</p><p>And in any case, starting a startup just doesn’t require that much intelligence. Some startups do. You have to be good at math to write Mathematica. But most companies do more mundane stuff where the decisive factor is effort, not brains. Silicon Valley can warp your perspective on this, because there’s a cult of smartness here. People who aren’t smart at least try to act that way. But if you think it takes a lot of intelligence to get rich, try spending a couple days in some of the fancier bits of New York or LA.<br>而且无论如何，创业本身并不需要超高的智商。有些创业项目确实有此要求 —— 比如开发 Mathematica（注：一款科学计算软件）就需要出色的数学能力。但大多数公司做的都是更普通的业务，在这些领域，决定性因素是努力，而非智商。硅谷可能会让你在这一问题上产生认知偏差，因为这里盛行 “崇拜聪明” 的文化，即使不够聪明的人也会努力装出聪明的样子。但如果你认为 “变富需要极高的智商”，不妨去纽约或洛杉矶的一些高档区域待上几天（你就会发现事实并非如此）。</p><p>If you don’t think you’re smart enough to start a startup doing something technically difficult, just write enterprise software. Enterprise software companies aren’t technology companies, they’re sales companies, and sales depends mostly on effort.<br>如果你觉得自己的智商不足以支撑技术难度高的创业项目，那去做企业级软件就好。企业级软件公司本质上不是技术公司，而是销售公司 —— 而销售的成败主要取决于努力程度。</p><h2 id="Know-nothing-about-business"><a href="#Know-nothing-about-business" class="headerlink" title="Know nothing about business"></a><strong>Know nothing about business</strong></h2><h2 id="不懂商业"><a href="#不懂商业" class="headerlink" title="不懂商业"></a><strong>不懂商业</strong></h2><p>This is another variable whose coefficient should be zero. You don’t need to know anything about business to start a startup. The initial focus should be the product. All you need to know in this phase is how to build things people want. If you succeed, you’ll have to think about how to make money from it. But this is so easy you can pick it up on the fly.<br>这是另一个 “影响系数应为零” 的因素 —— 创业根本不需要你懂商业。创业初期的核心应该是产品，在这个阶段，你只需要知道如何打造人们想要的东西。如果产品成功了，你再去思考如何从中盈利也不迟。而盈利这件事其实很简单，你完全可以在实践中快速学会。</p><p>I get a fair amount of flak for telling founders just to make something great and not worry too much about making money. And yet all the empirical evidence points that way: pretty much 100% of startups that make something popular manage to make money from it. And acquirers tell me privately that revenue is not what they buy startups for, but their strategic value. Which means, because they made something people want. Acquirers know the rule holds for them too: if users love you, you can always make money from that somehow, and if they don’t, the cleverest business model in the world won’t save you.<br>我因为 “建议创始人专注打造好产品，不必过分担心盈利” 而受到不少批评。但所有实证证据都指向这一点：几乎 100% 做出了受欢迎产品的初创公司，最终都能找到盈利方式。而且收购方私下告诉我，他们收购初创公司看重的不是营收，而是其战略价值 —— 换句话说，是因为这些公司打造出了人们想要的东西。收购方也明白一个规律：如果用户喜欢你的产品，你总有办法从中盈利；但如果用户不买账，再精妙的商业模式也救不了你。</p><p>So why do so many people argue with me? I think one reason is that they hate the idea that a bunch of twenty year olds could get rich from building something cool that doesn’t make any money. They just don’t want that to be possible. But how possible it is doesn’t depend on how much they want it to be.<br>那么，为什么有这么多人反驳我呢？我认为原因之一是：他们不愿接受 “一群 20 多岁的年轻人，靠做一个暂时不盈利但很酷的产品就能变富” 这种事。他们只是不希望这种事成为可能。但一件事是否可行，并不取决于他们的意愿。</p><p>For a while it annoyed me to hear myself described as some kind of irresponsible pied piper, leading impressionable young hackers down the road to ruin. But now I realize this kind of controversy is a sign of a good idea.<br>有一段时间，听到别人把我描述成 “不负责任的花衣魔笛手”，说我误导易受影响的年轻技术人员走向毁灭，我会感到很恼火。但现在我意识到，这种争议恰恰是一个想法有价值的信号。</p><p>The most valuable truths are the ones most people don’t believe. They’re like undervalued stocks. If you start with them, you’ll have the whole field to yourself. So when you find an idea you know is good but most people disagree with, you should not merely ignore their objections, but push aggressively in that direction. In this case, that means you should seek out ideas that would be popular but seem hard to make money from.<br>最有价值的真理，往往是大多数人都不相信的。它们就像被低估的股票，如果你从一开始就坚信并践行，就能在这个领域占据独一无二的优势。因此，当你发现一个你确信很好，但大多数人都反对的想法时，你不仅要无视他们的质疑，更要朝着这个方向坚定推进。具体到创业这件事上，这意味着你应该去探索那些 “产品会受欢迎，但看似难以盈利” 的想法。</p><p>We’ll bet a seed round you can’t make something popular that we can’t figure out how to make money from.<br>我们愿意赌一轮种子基金：只要你能做出受欢迎的产品，我们就一定能找到盈利的方法（言外之意，做出受欢迎的产品是核心，盈利无需过度担忧）。</p><h2 id="No-cofounder"><a href="#No-cofounder" class="headerlink" title="No cofounder"></a><strong>No cofounder</strong></h2><h2 id="没有联合创始人"><a href="#没有联合创始人" class="headerlink" title="没有联合创始人"></a><strong>没有联合创始人</strong></h2><p>Not having a cofounder is a real problem. A startup is too much for one person to bear. And though we differ from other investors on a lot of questions, we all agree on this. All investors, without exception, are more likely to fund you with a cofounder than without.<br>没有联合创始人是一个切实存在的问题。初创公司的压力和工作量太大，一个人根本扛不住。尽管我们在很多问题上与其他投资者存在分歧，但在这一点上，大家的看法完全一致：所有投资者都会更倾向于资助有联合创始人的团队，无一例外。</p><p>We’ve funded two single founders, but in both cases we suggested their first priority should be to find a cofounder. Both did. But we’d have preferred them to have cofounders before they applied. It’s not super hard to get a cofounder for a project that’s just been funded, and we’d rather have cofounders committed enough to sign up for something super hard.<br>我们曾经资助过两位独立创始人，但在这两个案例中，我们都建议他们把 “找到联合创始人” 作为首要任务，他们最终也都找到了。不过，我们更希望他们在申请资助前就已经有联合创始人了。为一个刚获得资助的项目找联合创始人并不算太难，而我们更看重的是，联合创始人是否有足够的决心，愿意投身于一项极具挑战性的事业（即未获资助时就愿意共同创业）。</p><p>If you don’t have a cofounder, what should you do? Get one. It’s more important than anything else. If there’s no one where you live who wants to start a startup with you, move where there are people who do. If no one wants to work with you on your current idea, switch to an idea people want to work on.<br>如果你没有联合创始人，该怎么办？答案就是：找到一位。这件事比其他任何事都重要。如果在你目前居住的地方，没有人愿意和你一起创业，那就搬到有这样的人的地方去；如果没人愿意参与你当前的创业想法，那就换一个大家愿意为之努力的想法。</p><p>If you’re still in school, you’re surrounded by potential cofounders. A few years out it gets harder to find them. Not only do you have a smaller pool to draw from, but most already have jobs, and perhaps even families to support. So if you had friends in college you used to scheme about startups with, stay in touch with them as well as you can. That may help keep the dream alive.<br>如果你还在上学，身边其实到处都是潜在的联合创始人。毕业几年后，找到联合创始人的难度就会变大 —— 不仅可选的人群范围变小了，而且大多数人已经有了工作，甚至可能需要养家糊口。因此，如果你在大学里有过一起畅想创业的朋友，一定要尽量和他们保持联系，这或许能让你们的创业梦想得以延续。</p><p>It’s possible you could meet a cofounder through something like a user’s group or a conference. But I wouldn’t be too optimistic. You need to work with someone to know whether you want them as a cofounder. [2]<br>你或许能通过用户组、行业会议之类的场合找到联合创始人，但我对此不抱太大希望。你需要和一个人实际共事过，才能判断他是否适合成为你的联合创始人 [2]。</p><p>The real lesson to draw from this is not how to find a cofounder, but that you should start startups when you’re young and there are lots of them around.<br>从这件事里能学到的真正道理，不是 “如何找到联合创始人”，而是 “你应该在年轻、身边有很多潜在伙伴的时候就开始创业”。</p><h2 id="No-idea"><a href="#No-idea" class="headerlink" title="No idea"></a><strong>No idea</strong></h2><h2 id="没有创业想法"><a href="#没有创业想法" class="headerlink" title="没有创业想法"></a><strong>没有创业想法</strong></h2><p>In a sense, it’s not a problem if you don’t have a good idea, because most startups change their idea anyway. In the average Y Combinator startup, I’d guess 70% of the idea is new at the end of the first three months. Sometimes it’s 100%.<br>从某种意义上说，没有好的创业想法并不算问题 —— 因为大多数初创公司最终都会改变最初的想法。我估计，在 Y Combinator 孵化的初创公司中，平均有 70% 的创业想法会在最初三个月结束时发生改变，有时甚至是 100% 彻底改变。</p><p>In fact, we’re so sure the founders are more important than the initial idea that we’re going to try something new this funding cycle. We’re going to let people apply with no idea at all. If you want, you can answer the question on the application form that asks what you’re going to do with “We have no idea.” If you seem really good we’ll accept you anyway. We’re confident we can sit down with you and cook up some promising project.<br>事实上，我们坚信 “创始人比最初的创业想法更重要”，因此在这一轮融资周期中，我们打算尝试一件新事：允许申请人在完全没有创业想法的情况下提交申请。如果你愿意，在申请表中 “你打算做什么项目” 这一栏，你可以直接回答 “我们还没有想法”。只要我们觉得你足够优秀，依然会接纳你。我们有信心和你一起合作，构思出一个有前景的项目。</p><p>Really this just codifies what we do already. We put little weight on the idea. We ask mainly out of politeness. The kind of question on the application form that we really care about is the one where we ask what cool things you’ve made. If what you’ve made is version one of a promising startup, so much the better, but the main thing we care about is whether you’re good at making things. Being lead developer of a popular open source project counts almost as much.<br>实际上，这只是把我们一直在做的事正式明确下来而已。我们原本就不太看重创业想法，在申请表中设置相关问题，主要是出于礼貌。申请表中我们真正关心的问题是 “你做出过哪些很酷的东西”。如果你做出的东西恰好是某个有前景的初创项目的 1.0 版本，那自然再好不过；但我们最看重的，是你是否具备 “做出东西” 的能力。如果你是某个热门开源项目的首席开发者，这一点的分量几乎和前者相当。</p><p>That solves the problem if you get funded by Y Combinator. What about in the general case? Because in another sense, it is a problem if you don’t have an idea. If you start a startup with no idea, what do you do next?<br>如果你能获得 Y Combinator 的资助，那 “没有创业想法” 的问题就能解决。但在一般情况下呢？因为从另一个角度来说，没有想法确实是个问题 —— 要是你毫无想法就开启创业，接下来该做什么？</p><p>So here’s the brief recipe for getting startup ideas. Find something that’s missing in your own life, and supply that need—no matter how specific to you it seems. Steve Wozniak built himself a computer; who knew so many other people would want them? A need that’s narrow but genuine is a better starting point than one that’s broad but hypothetical. So even if the problem is simply that you don’t have a date on Saturday night, if you can think of a way to fix that by writing software, you’re onto something, because a lot of other people have the same problem.<br>其实，获取创业想法有个简单的方法：找到你自己生活中缺失的东西，然后满足这个需求 —— 无论这个需求看起来多 “个人化”。史蒂夫・沃兹尼亚克（Steve Wozniak）最初只是为自己造了一台电脑，当时谁能想到会有这么多人也想要呢？一个范围狭窄但真实存在的需求，远比一个宽泛却停留在假设层面的需求更适合作为创业起点。所以，哪怕问题只是 “周六晚上找不到约会对象”，只要你能想到用软件解决这个问题，你就已经找对方向了 —— 因为很多人都有同样的困扰。</p><h2 id="No-room-for-more-startups"><a href="#No-room-for-more-startups" class="headerlink" title="No room for more startups"></a><strong>No room for more startups</strong></h2><h2 id="没有更多创业空间了"><a href="#没有更多创业空间了" class="headerlink" title="没有更多创业空间了"></a><strong>没有更多创业空间了</strong></h2><p>A lot of people look at the ever-increasing number of startups and think “this can’t continue.” Implicit in their thinking is a fallacy: that there is some limit on the number of startups there could be. But this is false. No one claims there’s any limit on the number of people who can work for salary at 1000-person companies. Why should there be any limit on the number who can work for equity at 5-person companies? [3]<br>很多人看到初创公司数量不断增加，就会觉得 “这种趋势不可能持续”。他们的想法中隐含着一个谬误：认为初创公司的数量存在某种上限。但这是错误的。没人会说 “千人规模的公司能雇佣的员工数量有上限”，那为什么 “5 人规模、靠股权激励员工的初创公司”，其数量就该有上限呢 [3]？</p><p>Nearly everyone who works is satisfying some kind of need. Breaking up companies into smaller units doesn’t make those needs go away. Existing needs would probably get satisfied more efficiently by a network of startups than by a few giant, hierarchical organizations, but I don’t think that would mean less opportunity, because satisfying current needs would lead to more. Certainly this tends to be the case in individuals. Nor is there anything wrong with that. We take for granted things that medieval kings would have considered effeminate luxuries, like whole buildings heated to spring temperatures year round. And if things go well, our descendants will take for granted things we would consider shockingly luxurious. There is no absolute standard for material wealth. Health care is a component of it, and that alone is a black hole. For the foreseeable future, people will want ever more material wealth, so there is no limit to the amount of work available for companies, and for startups in particular.<br>几乎所有工作都是在满足某种需求。将公司拆分成更小的单元，并不会让这些需求消失。相比少数庞大的层级制组织，一个由初创公司构成的网络或许能更高效地满足现有需求，但这并不意味着机会会减少 —— 因为满足当前需求的过程中，会催生出更多新需求。对个人而言，情况往往也是如此，而且这本身并没有任何问题。我们如今习以为常的东西，比如 “整栋建筑全年保持春天般的温度”，在中世纪国王看来可能是过于柔弱的奢侈品；如果发展顺利，我们的后代也会把一些在我们看来 “极度奢华” 的东西视为理所当然。物质财富没有绝对的衡量标准，医疗保健就是其中一部分，单这一项就像个 “无底洞”。在可预见的未来，人们对物质财富的需求会不断增长，因此企业（尤其是初创公司）能承接的工作总量是没有上限的。</p><p>Usually the limited-room fallacy is not expressed directly. Usually it’s implicit in statements like “there are only so many startups Google, Microsoft, and Yahoo can buy.” Maybe, though the list of acquirers is a lot longer than that. And whatever you think of other acquirers, Google is not stupid. The reason big companies buy startups is that they’ve created something valuable. And why should there be any limit to the number of valuable startups companies can acquire, any more than there is a limit to the amount of wealth individual people want? Maybe there would be practical limits on the number of startups any one acquirer could assimilate, but if there is value to be had, in the form of upside that founders are willing to forgo in return for an immediate payment, acquirers will evolve to consume it. Markets are pretty smart that way.<br>通常，“创业空间有限” 的谬误不会被直接说出来，而是隐含在类似 “谷歌、微软和雅虎能收购的初创公司就这么多” 的说法里。或许确实如此，但收购方的名单远不止这几家。而且不管你怎么看待其他收购方，谷歌绝非傻瓜 —— 大公司收购初创公司，核心原因是这些初创公司创造了有价值的东西。既然个人对财富的渴望没有上限，那公司能收购的 “有价值初创公司” 数量，又凭什么会有上限呢？或许单一收购方在消化初创公司的数量上存在实际限制，但只要有价值可图（比如创始人愿意放弃未来收益，换取即时回报），市场就会催生出更多能承接这些收购的主体。市场在这方面往往很 “聪明”。</p><ol><li>Family to support</li><li>要养家糊口<br>This one is real. I wouldn’t advise anyone with a family to start a startup. I’m not saying it’s a bad idea, just that I don’t want to take responsibility for advising it. I’m willing to take responsibility for telling 22 year olds to start startups. So what if they fail? They’ll learn a lot, and that job at Microsoft will still be waiting for them if they need it. But I’m not prepared to cross moms.<br>这是一个切实存在的顾虑。我不会建议有家庭负担的人去创业。我不是说这是个坏主意，只是不想为这个建议承担责任。我愿意为 “建议 22 岁的年轻人创业” 负责 —— 就算他们失败了又怎样？他们能学到很多东西，而且如果需要，微软的工作岗位依然会等着他们。但我可不想去 “得罪” 那些身为母亲的人（意指不想因建议有家庭的人创业，而让其家人承担风险）。</li></ol><p>What you can do, if you have a family and want to start a startup, is start a consulting business you can then gradually turn into a product business. Empirically the chances of pulling that off seem very small. You’re never going to produce Google this way. But at least you’ll never be without an income.<br>如果你有家庭但仍想创业，或许可以先从咨询业务做起，之后再逐步转型为产品型公司。但从实际经验来看，这种转型成功的概率似乎很小 —— 你不可能靠这种方式打造出下一个谷歌，但至少能保证不会没有收入。</p><p>Another way to decrease the risk is to join an existing startup instead of starting your own. Being one of the first employees of a startup is a lot like being a founder, in both the good ways and the bad. You’ll be roughly 1&#x2F;n^2 founder, where n is your employee number.<br>另一种降低风险的方式是加入一家已有的初创公司，而非自己创办。成为初创公司的早期员工，无论从好的方面还是坏的方面来看，都和当创始人很像。你的 “创始人属性” 大致可以用 “1&#x2F;n²” 来衡量，其中 n 是你的员工编号（比如第 2 号员工，其 “创始人属性” 约为 1&#x2F;4；第 3 号员工约为 1&#x2F;9，以此类推）。</p><p>As with the question of cofounders, the real lesson here is to start startups when you’re young.<br>和 “找联合创始人” 的问题一样，这件事能教会我们的真正道理是：要在年轻的时候创业。</p><h2 id="Independently-wealthy"><a href="#Independently-wealthy" class="headerlink" title="Independently wealthy"></a><strong>Independently wealthy</strong></h2><h2 id="已经实现财务自由"><a href="#已经实现财务自由" class="headerlink" title="已经实现财务自由"></a><strong>已经实现财务自由</strong></h2><p>This is my excuse for not starting a startup. Startups are stressful. Why do it if you don’t need the money? For every “serial entrepreneur,” there are probably twenty sane ones who think “Start another company? Are you crazy?”<br>这是我自己不创业的理由。创业压力太大了，既然不需要钱，为什么还要去做？每出现一个 “连续创业者”，可能就有 20 个头脑清醒的人会想：“再开一家公司？你疯了吗？”</p><p>I’ve come close to starting new startups a couple times, but I always pull back because I don’t want four years of my life to be consumed by random schleps. I know this business well enough to know you can’t do it half-heartedly. What makes a good startup founder so dangerous is his willingness to endure infinite schleps.<br>我有好几次都快开启新的创业项目了，但最终还是退缩了 —— 因为我不想让自己四年的人生被各种琐碎麻烦的事（注：“schleps” 指枯燥、费力又必须做的事）占据。我太了解这个行业了，知道创业不能三心二意。优秀的创业创始人之所以 “厉害”，关键就在于他们愿意承受无穷无尽的琐碎麻烦。</p><p>There is a bit of a problem with retirement, though. Like a lot of people, I like to work. And one of the many weird little problems you discover when you get rich is that a lot of the interesting people you’d like to work with are not rich. They need to work at something that pays the bills. Which means if you want to have them as colleagues, you have to work at something that pays the bills too, even though you don’t need to. I think this is what drives a lot of serial entrepreneurs, actually.<br>不过，财务自由后 “无所事事” 也有个小问题。和很多人一样，我喜欢工作。而且当你变富后，会发现一个很奇怪的小问题：很多你想共事的有趣的人，都还没有实现财务自由，他们需要靠工作赚钱养家。这意味着，即便你不需要钱，要是想让这些人成为你的同事，你也得做一份能赚钱的工作。事实上，我认为这正是很多连续创业者不断创业的动力。</p><p>That’s why I love working on Y Combinator so much. It’s an excuse to work on something interesting with people I like.<br>这就是我为什么这么喜欢投身于 Y Combinator 的工作 —— 它让我有理由和自己喜欢的人一起，做一些有趣的事。</p><h2 id="Not-ready-for-commitment"><a href="#Not-ready-for-commitment" class="headerlink" title="Not ready for commitment"></a><strong>Not ready for commitment</strong></h2><h2 id="没准备好投入时间精力"><a href="#没准备好投入时间精力" class="headerlink" title="没准备好投入时间精力"></a><strong>没准备好投入时间精力</strong></h2><p>This was my reason for not starting a startup for most of my twenties. Like a lot of people that age, I valued freedom most of all. I was reluctant to do anything that required a commitment of more than a few months. Nor would I have wanted to do anything that completely took over my life the way a startup does. And that’s fine. If you want to spend your time travelling around, or playing in a band, or whatever, that’s a perfectly legitimate reason not to start a company.<br>在我二十多岁的大部分时间里，这都是我不创业的理由。和很多同龄人一样，我当时最看重自由，不愿做任何需要投入超过几个月时间的事，更不想让某件事像创业那样完全占据我的生活。这其实没什么问题 —— 如果你想把时间花在旅行、玩乐队或其他事情上，那完全可以作为不创业的正当理由。</p><p>If you start a startup that succeeds, it’s going to consume at least three or four years. (If it fails, you’ll be done a lot quicker.) So you shouldn’t do it if you’re not ready for commitments on that scale. Be aware, though, that if you get a regular job, you’ll probably end up working there for as long as a startup would take, and you’ll find you have much less spare time than you might expect. So if you’re ready to clip on that ID badge and go to that orientation session, you may also be ready to start that startup.<br>如果你的创业项目成功了，它至少会占据你三四年的时间（如果失败，就能更快结束）。所以，要是你没准备好做出这种规模的投入，就不应该创业。但要知道，如果你找一份常规工作，很可能最终在这家公司工作的时间，和创业所需的时间一样长，而且你会发现自己的空闲时间比想象中少得多。因此，如果你已经准备好戴上工牌、参加新员工培训，那或许你也已经准备好去创业了。</p><h2 id="Need-for-structure"><a href="#Need-for-structure" class="headerlink" title="Need for structure"></a><strong>Need for structure</strong></h2><h2 id="需要结构化的工作环境"><a href="#需要结构化的工作环境" class="headerlink" title="需要结构化的工作环境"></a><strong>需要结构化的工作环境</strong></h2><p>I’m told there are people who need structure in their lives. This seems to be a nice way of saying they need someone to tell them what to do. I believe such people exist. There’s plenty of empirical evidence: armies, religious cults, and so on. They may even be the majority.<br>有人告诉我，有些人的生活需要 “结构化”。这似乎是一种委婉的说法，实际是指他们需要有人告诉自己该做什么。我相信这类人确实存在，有大量实证可以证明 —— 比如军队、邪教组织等等，这类人甚至可能占大多数。</p><p>If you’re one of these people, you probably shouldn’t start a startup. In fact, you probably shouldn’t even go to work for one. In a good startup, you don’t get told what to do very much. There may be one person whose job title is CEO, but till the company has about twelve people no one should be telling anyone what to do. That’s too inefficient. Each person should just do what they need to without anyone telling them.<br>如果你是这类人，那很可能不适合创业，甚至可能连去初创公司工作都不适合。在一家优秀的初创公司里，没人会频繁告诉你该做什么。或许会有一个人挂着 CEO 的头衔，但在公司员工达到 12 人左右之前，不该有人指挥其他人做事 —— 那样效率太低了。每个人都应该主动去做需要做的事，无需他人指使。</p><p>If that sounds like a recipe for chaos, think about a soccer team. Eleven people manage to work together in quite complicated ways, and yet only in occasional emergencies does anyone tell anyone else what to do. A reporter once asked David Beckham if there were any language problems at Real Madrid, since the players were from about eight different countries. He said it was never an issue, because everyone was so good they never had to talk. They all just did the right thing.<br>如果这听起来像会导致混乱，不妨想想足球队。11 名球员以相当复杂的方式协作，但只有在偶尔的紧急情况下，才会有人指挥其他人。有记者曾问大卫・贝克汉姆，皇马的球员来自大约 8 个不同的国家，是否存在语言障碍。贝克汉姆说这从来不是问题，因为每个人都很优秀，根本不需要说话 —— 他们都知道该做什么。</p><p>How do you tell if you’re independent-minded enough to start a startup? If you’d bristle at the suggestion that you aren’t, then you probably are.<br>如何判断自己是否有足够的独立思考能力去创业？如果有人说你 “没有”，你会感到反感，那你很可能就具备这种能力。</p><h2 id="Fear-of-uncertainty"><a href="#Fear-of-uncertainty" class="headerlink" title="Fear of uncertainty"></a><strong>Fear of uncertainty</strong></h2><h2 id="害怕不确定性"><a href="#害怕不确定性" class="headerlink" title="害怕不确定性"></a><strong>害怕不确定性</strong></h2><p>Perhaps some people are deterred from starting startups because they don’t like the uncertainty. If you go to work for Microsoft, you can predict fairly accurately what the next few years will be like—all too accurately, in fact. If you start a startup, anything might happen.<br>或许有些人因为讨厌不确定性而不敢创业。如果你去微软工作，能相当准确地预测未来几年的生活是什么样的 —— 事实上，准确得有些过头了。但如果你创业，任何事都有可能发生。</p><p>Well, if you’re troubled by uncertainty, I can solve that problem for you: if you start a startup, it will probably fail. Seriously, though, this is not a bad way to think about the whole experience. Hope for the best, but expect the worst. In the worst case, it will at least be interesting. In the best case you might get rich.<br>如果你被不确定性困扰，我可以帮你 “解决” 这个问题：如果你创业，大概率会失败。不过说真的，用这种心态看待创业经历其实不错 —— 抱最好的希望，做最坏的打算。最坏的情况是，这段经历至少会很有趣；最好的情况是，你可能会变得富有。</p><p>No one will blame you if the startup tanks, so long as you made a serious effort. There may once have been a time when employers would regard that as a mark against you, but they wouldn’t now. I asked managers at big companies, and they all said they’d prefer to hire someone who’d tried to start a startup and failed over someone who’d spent the same time working at a big company.<br>只要你付出了认真的努力，就算初创公司失败了，也没人会责怪你。或许曾经有那么一段时间，雇主会把创业失败当作你的 “污点”，但现在不会了。我问过一些大公司的管理者，他们都表示，比起在大公司工作过相同时间的人，他们更愿意雇佣那些尝试过创业但失败了的人。</p><p>Nor will investors hold it against you, as long as you didn’t fail out of laziness or incurable stupidity. I’m told there’s a lot of stigma attached to failing in other places—in Europe, for example. Not here. In America, companies, like practically everything else, are disposable.<br>只要你不是因为懒惰或无可救药的愚蠢而失败，投资者也不会因此对你有看法。我听说在其他地方（比如欧洲），创业失败会带来很多负面标签，但在美国不会。在这里，公司就像几乎所有其他事物一样，是可以 “被替代” 的（意指失败被视为正常，不会过度苛责）。</p><h2 id="Don’t-realize-what-you’re-avoiding"><a href="#Don’t-realize-what-you’re-avoiding" class="headerlink" title="Don’t realize what you’re avoiding"></a><strong>Don’t realize what you’re avoiding</strong></h2><h2 id="没意识到自己在逃避什么"><a href="#没意识到自己在逃避什么" class="headerlink" title="没意识到自己在逃避什么"></a><strong>没意识到自己在逃避什么</strong></h2><p>One reason people who’ve been out in the world for a year or two make better founders than people straight from college is that they know what they’re avoiding. If their startup fails, they’ll have to get a job, and they know how much jobs suck.<br>有一两年社会经验的人比刚毕业的大学生更适合当创始人，原因之一是他们清楚自己在 “逃避” 什么。如果创业失败，他们就得去找工作，而他们知道工作有多 “糟糕”。</p><p>If you’ve had summer jobs in college, you may think you know what jobs are like, but you probably don’t. Summer jobs at technology companies are not real jobs. If you get a summer job as a waiter, that’s a real job. Then you have to carry your weight. But software companies don’t hire students for the summer as a source of cheap labor. They do it in the hope of recruiting them when they graduate. So while they’re happy if you produce, they don’t expect you to.<br>如果你在大学期间做过暑期工，可能会觉得自己了解工作是什么样的，但实际上你很可能并不了解。科技公司的暑期工算不上 “真正的工作”，但如果你暑假去当服务员，那就是真正的工作 —— 你必须承担起自己的职责。软件公司暑期雇佣学生，并不是为了获取廉价劳动力，而是希望能在他们毕业时将其招入麾下。所以，即便你能做出成果，他们会很开心，但并不会对你有硬性要求。</p><p>That will change if you get a real job after you graduate. Then you’ll have to earn your keep. And since most of what big companies do is boring, you’re going to have to work on boring stuff. Easy, compared to college, but boring. At first it may seem cool to get paid for doing easy stuff, after paying to do hard stuff in college. But that wears off after a few months. Eventually it gets demoralizing to work on dumb stuff, even if it’s easy and you get paid a lot.<br>但如果你毕业后找一份真正的工作，情况就会改变。那时你必须靠工作谋生，而且由于大公司的大部分业务都很枯燥，你不得不去做那些无聊的事情。这些工作可能比大学的功课简单，但极其乏味。刚开始，你可能会觉得 “做着简单的事还能拿工资” 很酷 —— 毕竟在大学里，你是花钱去做难题。但这种新鲜感几个月后就会消失。最终，即便工作轻松、薪水丰厚，做着毫无意义的事也会让你士气低落。</p><p>And that’s not the worst of it. The thing that really sucks about having a regular job is the expectation that you’re supposed to be there at certain times. Even Google is afflicted with this, apparently. And what this means, as everyone who’s had a regular job can tell you, is that there are going to be times when you have absolutely no desire to work on anything, and you’re going to have to go to work anyway and sit in front of your screen and pretend to. To someone who likes work, as most good hackers do, this is torture.<br>而且这还不是最糟糕的。常规工作真正让人难以忍受的是 “必须在特定时间到岗” 的要求 —— 显然，即便谷歌也受此困扰。任何做过常规工作的人都知道，这意味着：总有那么些时候，你完全没有任何工作的意愿，但还是得去上班，坐在屏幕前假装工作。对于像大多数优秀技术人员那样热爱工作的人来说，这简直是折磨。</p><p>In a startup, you skip all that. There’s no concept of office hours in most startups. Work and life just get mixed together. But the good thing about that is that no one minds if you have a life at work. In a startup you can do whatever you want most of the time. If you’re a founder, what you want to do most of the time is work. But you never have to pretend to.<br>而在初创公司，你可以避开所有这些。大多数初创公司都没有 “办公时间” 的概念，工作和生活只是交织在一起。但好处在于，没人会介意你在工作中兼顾生活。在初创公司，大部分时间你都可以做自己想做的事。如果你是创始人，大多数时候你想做的就是工作，但你永远不必 “假装工作”。</p><p>If you took a nap in your office in a big company, it would seem unprofessional. But if you’re starting a startup and you fall asleep in the middle of the day, your cofounders will just assume you were tired.<br>在大公司的办公室里打盹，会被认为不专业；但如果你在创业期间中午睡着了，你的联合创始人只会觉得你是累了。</p><h2 id="Parents-want-you-to-be-a-doctor"><a href="#Parents-want-you-to-be-a-doctor" class="headerlink" title="Parents want you to be a doctor"></a><strong>Parents want you to be a doctor</strong></h2><h2 id="父母希望你当医生"><a href="#父母希望你当医生" class="headerlink" title="父母希望你当医生"></a><strong>父母希望你当医生</strong></h2><p>A significant number of would-be startup founders are probably dissuaded from doing it by their parents. I’m not going to say you shouldn’t listen to them. Families are entitled to their own traditions, and who am I to argue with them? But I will give you a couple reasons why a safe career might not be what your parents really want for you.<br>有相当一部分潜在的创业者，可能会因为父母的反对而放弃创业。我不会说 “你不该听父母的话”—— 每个家庭都有自己的传统，我没资格去反驳。但我想告诉你，“安稳的职业” 或许并非你父母真正希望你拥有的，原因有二。</p><p>One is that parents tend to be more conservative for their kids than they would be for themselves. This is actually a rational response to their situation. Parents end up sharing more of their kids’ ill fortune than good fortune. Most parents don’t mind this; it’s part of the job; but it does tend to make them excessively conservative. And erring on the side of conservatism is still erring. In almost everything, reward is proportionate to risk. So by protecting their kids from risk, parents are, without realizing it, also protecting them from rewards. If they saw that, they’d want you to take more risks.<br>第一，父母在为孩子做选择时，往往比为自己做选择时更保守。这其实是他们基于自身处境的理性反应 —— 父母最终分担孩子的不幸，往往比分享孩子的好运要多。大多数父母并不介意这一点，因为这是为人父母的一部分，但这确实会让他们变得过度保守。而 “偏向保守” 本身也是一种失误。几乎在所有事情中，回报都与风险成正比。因此，父母在无意识中为孩子规避风险的同时，也挡住了孩子可能获得的回报。如果他们意识到这一点，或许会希望你多承担一些风险。</p><p>The other reason parents may be mistaken is that, like generals, they’re always fighting the last war. If they want you to be a doctor, odds are it’s not just because they want you to help the sick, but also because it’s a prestigious and lucrative career. [4] But not so lucrative or prestigious as it was when their opinions were formed. When I was a kid in the seventies, a doctor was the thing to be. There was a sort of golden triangle involving doctors, Mercedes 450SLs, and tennis. All three vertices now seem pretty dated.<br>父母可能犯错的另一个原因是：他们就像将军一样，总是在 “打过去的仗”（意指用过去的经验判断现在的情况）。如果他们希望你当医生，很可能不仅是因为想让你救死扶伤，还因为在他们的认知里，医生是一份有声望、收入高的职业 [4]。但如今的医生职业，已不再像他们形成这种认知时那样高薪、那样有威望了。我七十年代小时候，医生是人人向往的职业，当时还流传着 “医生、奔驰 450SL 轿车、网球” 的 “黄金三角” 说法，象征着成功。而现在，这三者看起来都相当过时了。</p><p>The parents who want you to be a doctor may simply not realize how much things have changed. Would they be that unhappy if you were Steve Jobs instead? So I think the way to deal with your parents’ opinions about what you should do is to treat them like feature requests. Even if your only goal is to please them, the way to do that is not simply to give them what they ask for. Instead think about why they’re asking for something, and see if there’s a better way to give them what they need.<br>希望你当医生的父母，可能只是没意识到时代已经发生了巨大变化。如果你的成就堪比史蒂夫・乔布斯，他们还会那么不开心吗？因此，我认为对待父母对你职业选择的意见，应该像对待 “功能需求” 一样：即便你的唯一目标是让他们满意，也不应该只给他们 “他们要求的东西”，而是要思考他们 “为什么这么要求”，然后找到更好的方式来满足他们真正的需求。</p><h2 id="A-job-is-the-default"><a href="#A-job-is-the-default" class="headerlink" title="A job is the default"></a><strong>A job is the default</strong></h2><h2 id="找工作是-“默认选项”"><a href="#找工作是-“默认选项”" class="headerlink" title="找工作是 “默认选项”"></a><strong>找工作是 “默认选项”</strong></h2><p>This leads us to the last and probably most powerful reason people get regular jobs: it’s the default thing to do. Defaults are enormously powerful, precisely because they operate without any conscious choice.<br>这就引出了人们选择常规工作的最后一个，也可能是最关键的一个原因：找工作是 “默认选项”。默认选项的影响力极大，恰恰是因为它不需要人们做出主动选择。</p><p>To almost everyone except criminals, it seems an axiom that if you need money, you should get a job. Actually this tradition is not much more than a hundred years old. Before that, the default way to make a living was by farming. It’s a bad plan to treat something only a hundred years old as an axiom. By historical standards, that’s something that’s changing pretty rapidly.<br>对除了罪犯之外的几乎所有人来说，“需要钱就该找工作” 似乎是一条公理。但实际上，这种传统距今还不到一百年。在此之前，谋生的默认方式是务农。把一项只有百年历史的传统当作 “公理”，是不明智的 —— 从历史尺度来看，这种传统的变化速度其实很快。</p><p>We may be seeing another such change right now. I’ve read a lot of economic history, and I understand the startup world pretty well, and it now seems to me fairly likely that we’re seeing the beginning of a change like the one from farming to manufacturing.<br>如今，我们或许正见证另一场类似的变革。我读了很多经济史，也非常了解创业领域，现在我越来越觉得，我们可能正处于一场变革的开端 —— 就像当年从务农转向制造业那样的变革。</p><p>And you know what? If you’d been around when that change began (around 1000 in Europe) it would have seemed to nearly everyone that running off to the city to make your fortune was a crazy thing to do. Though serfs were in principle forbidden to leave their manors, it can’t have been that hard to run away to a city. There were no guards patrolling the perimeter of the village. What prevented most serfs from leaving was that it seemed insanely risky. Leave one’s plot of land? Leave the people you’d spent your whole life with, to live in a giant city of three or four thousand complete strangers? How would you live? How would you get food, if you didn’t grow it?<br>你知道吗？如果在那场变革刚开始时（欧洲约公元 1000 年），你告诉别人 “跑到城市里去发家致富”，几乎所有人都会觉得你疯了。虽然理论上农奴不允许离开自己的庄园，但逃到城市其实没那么难 —— 村子周围并没有卫兵巡逻。阻止大多数农奴离开的，是他们觉得这太冒险了：离开自己的土地？离开相伴一生的人，去一个有三四千个陌生人的 “大城市” 生活？怎么生存？不种地的话，怎么获得食物？</p><p>Frightening as it seemed to them, it’s now the default with us to live by our wits. So if it seems risky to you to start a startup, think how risky it once seemed to your ancestors to live as we do now. Oddly enough, the people who know this best are the very ones trying to get you to stick to the old model. How can Larry and Sergey say you should come work as their employee, when they didn’t get jobs themselves?<br>尽管在当时的农奴看来，进城谋生很可怕，但如今 “靠智慧谋生” 已成为我们的默认选择。因此，如果你觉得创业有风险，不妨想想：我们现在的生活方式，在我们的祖先看来也曾是无比冒险的。奇怪的是，最清楚这一点的人，恰恰是那些试图让你坚守旧模式的人 —— 拉里・佩奇和谢尔盖・布林自己都没找过工作，他们凭什么让你去当他们的员工呢？</p><p>Now we look back on medieval peasants and wonder how they stood it. How grim it must have been to till the same fields your whole life with no hope of anything better, under the thumb of lords and priests you had to give all your surplus to and acknowledge as your masters. I wouldn’t be surprised if one day people look back on what we consider a normal job in the same way. How grim it would be to commute every day to a cubicle in some soulless office complex, and be told what to do by someone you had to acknowledge as a boss—someone who could call you into their office and say “take a seat,” and you’d sit! Imagine having to ask permission to release software to users. Imagine being sad on Sunday afternoons because the weekend was almost over, and tomorrow you’d have to get up and go to work. How did they stand it?<br>现在我们回顾中世纪的农民，会疑惑他们怎么能忍受那样的生活：一辈子在同一片土地上耕作，没有任何变得更好的希望，还要受领主和牧师的支配 —— 把所有剩余的劳动成果交给他们，承认他们是自己的主人。如果有一天，人们以同样的眼光回顾我们现在所认为的 “常规工作”，我也不会感到惊讶。想想看：每天通勤到毫无生气的办公园区，坐在格子间里，听一个你必须称之为 “老板” 的人发号施令 —— 他可以叫你进办公室说 “坐下”，你就必须坐下；发布软件给用户还要申请许可；周日下午因为周末即将结束、明天又要起床上班而感到沮丧。这样的生活，他们怎么能忍受呢？</p><p>It’s exciting to think we may be on the cusp of another shift like the one from farming to manufacturing. That’s why I care about startups. Startups aren’t interesting just because they’re a way to make a lot of money. I couldn’t care less about other ways to do that, like speculating in securities. At most those are interesting the way puzzles are. There’s more going on with startups. They may represent one of those rare, historic shifts in the way wealth is created.<br>想到我们可能正处于一场类似 “从务农到制造业” 的变革风口，就令人兴奋 —— 这就是我关注创业的原因。创业之所以有趣，不只是因为它能让人赚很多钱（对于炒股等其他赚钱方式，我一点也不感兴趣，它们最多像谜题一样有点意思），更重要的是，创业背后蕴含着更大的意义：它可能代表着人类创造财富方式的一种罕见的、历史性的变革。</p><p>That’s ultimately what drives us to work on Y Combinator. We want to make money, if only so we don’t have to stop doing it, but that’s not the main goal. There have only been a handful of these great economic shifts in human history. It would be an amazing hack to make one happen faster.<br>这正是我们投身于 Y Combinator 工作的根本动力。我们确实想赚钱 —— 至少这样我们就不用停止这项工作 —— 但这并非主要目标。人类历史上，这样重大的经济变革屈指可数。如果能推动这样一场变革加速到来，那将是一件极具突破性的事。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] The only people who lost were us. The angels had convertible debt, so they had first claim on the proceeds of the auction. Y Combinator only got 38 cents on the dollar.<br>[1] 唯一亏损的只有我们。那些天使投资人持有的是可转换债券，因此他们对拍卖所得拥有优先求偿权。而 Y Combinator 最终只收回了每 1 美元投资中的 38 美分。<br>[2] The best kind of organization for that might be an open source project, but those don’t involve a lot of face to face meetings. Maybe it would be worth starting one that did.<br>[2] 最适合寻找联合创始人的组织形式或许是开源项目，但这类项目通常不会涉及太多面对面的交流。或许，发起一个注重面对面沟通的开源项目会是个值得尝试的办法。<br>[3] There need to be some number of big companies to acquire the startups, so the number of big companies couldn’t decrease to zero.<br>[3] 市场需要有一定数量的大公司来收购初创公司，因此大公司的数量不可能减少到零。<br>[4] Thought experiment: If doctors did the same work, but as impoverished outcasts, which parents would still want their kids to be doctors?<br>[4] 不妨做个思想实验：如果医生做着现在同样的工作，却过着贫困潦倒、被社会排斥的生活，还有多少父母会希望自己的孩子成为医生呢？</p><p>Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this, to the founders of Zenter for letting me use their web-based PowerPoint killer even though it isn’t launched yet, and to Ming-Hay Luk of the Berkeley CSUA for inviting me to speak.<br>感谢特雷弗・布莱克韦尔（Trevor Blackwell）、杰西卡・利文斯顿（Jessica Livingston）和罗伯特・莫里斯（Robert Morris）阅读了本文的初稿；感谢 Zenter 公司的创始人允许我使用他们那款尚未发布、能与 PowerPoint 抗衡的网页版产品；同时也感谢加州大学伯克利分校计算机科学本科生协会（Berkeley CSUA）的陆明熹（Ming-Hay Luk）邀请我进行演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变得智慧值得吗？</title>
    <link href="/2025/09/12/is-it-worth-to-being-wise/"/>
    <url>/2025/09/12/is-it-worth-to-being-wise/</url>
    
    <content type="html"><![CDATA[<h1 id="Is-It-Worth-Being-Wise"><a href="#Is-It-Worth-Being-Wise" class="headerlink" title="Is It Worth Being Wise?"></a>Is It Worth Being Wise?</h1><h1 id="变得智慧值得吗？"><a href="#变得智慧值得吗？" class="headerlink" title="变得智慧值得吗？"></a>变得智慧值得吗？</h1><p>原文链接: <a href="https://paulgraham.com/wisdom.html">https://paulgraham.com/wisdom.html</a></p><p>February 2007</p><p>A few days ago I finally figured out something I’ve wondered about for 25 years: the relationship between wisdom and intelligence. Anyone can see they’re not the same by the number of people who are smart, but not very wise. And yet intelligence and wisdom do seem related. How?<br>几天前，我终于弄明白了一个困扰了我 25 年的问题：智慧与聪明之间的关系。只要看看那些头脑聪明却不够智慧的人有多少，就知道二者并非一回事。但与此同时，智慧与聪明之间似乎又存在关联。这种关联究竟是什么呢？</p><p>What is wisdom? I’d say it’s knowing what to do in a lot of situations. I’m not trying to make a deep point here about the true nature of wisdom, just to figure out how we use the word. A wise person is someone who usually knows the right thing to do.<br>什么是智慧？我认为，智慧就是在诸多情况下都知道该怎么做。在此，我并非要深入探讨智慧的本质，只是想弄清楚我们是如何使用 “智慧” 这个词的。一个智慧的人，通常是那种知道该做正确之事的人。</p><p>And yet isn’t being smart also knowing what to do in certain situations? For example, knowing what to do when the teacher tells your elementary school class to add all the numbers from 1 to 100? [1]<br>可难道 “聪明” 不也是在某些特定情况下知道该怎么做吗？比如，当老师让小学班级里的学生计算 1 到 100 所有数字的和时，知道该如何计算，这不就是聪明的表现吗？[1]</p><p>Some say wisdom and intelligence apply to different types of problems—wisdom to human problems and intelligence to abstract ones. But that isn’t true. Some wisdom has nothing to do with people: for example, the wisdom of the engineer who knows certain structures are less prone to failure than others. And certainly smart people can find clever solutions to human problems as well as abstract ones. [2]<br>有人说，智慧和聪明适用于不同类型的问题 —— 智慧针对人际问题，聪明针对抽象问题。但这种说法并不正确。有些智慧与人类毫无关系：比如工程师的智慧，他们知道某些结构比其他结构更不容易出故障。而且，聪明的人显然既能为抽象问题找到巧妙的解决办法，也能为人际问题想出高明的对策。[2]</p><p>Another popular explanation is that wisdom comes from experience while intelligence is innate. But people are not simply wise in proportion to how much experience they have. Other things must contribute to wisdom besides experience, and some may be innate: a reflective disposition, for example.<br>另一种常见的解释是，智慧源于经验，而聪明是与生俱来的。但一个人的智慧程度，并非简单地与他的经验多少成正比。除了经验，肯定还有其他因素会促成智慧，其中有些因素可能是天生的：比如善于反思的性格。</p><p>Neither of the conventional explanations of the difference between wisdom and intelligence stands up to scrutiny. So what is the difference? If we look at how people use the words “wise” and “smart,” what they seem to mean is different shapes of performance.<br>关于智慧与聪明之间差异的这两种传统解释，都经不起仔细推敲。那么，二者的区别究竟在哪里呢？如果我们观察人们使用 “wise（智慧的）” 和 “smart（聪明的）” 这两个词的方式就会发现，它们所指代的似乎是不同表现形态。</p><h2 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a><strong>Curve</strong></h2><h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a><strong>曲线</strong></h2><p>“Wise” and “smart” are both ways of saying someone knows what to do. The difference is that “wise” means one has a high average outcome across all situations, and “smart” means one does spectacularly well in a few. That is, if you had a graph in which the x axis represented situations and the y axis the outcome, the graph of the wise person would be high overall, and the graph of the smart person would have high peaks.<br>“智慧的” 和 “聪明的” 这两个词，本质上都是用来形容一个人知道该怎么做。二者的区别在于：“智慧” 意味着一个人在所有情况下的平均表现都很好；而 “聪明” 则意味着一个人在少数几种情况下能有极其出色的表现。也就是说，若绘制一张图表，横轴代表不同情境，纵轴代表表现结果，那么智慧之人的图表整体走势会很高，而聪明之人的图表则会出现几个很高的峰值。</p><p>The distinction is similar to the rule that one should judge talent at its best and character at its worst. Except you judge intelligence at its best, and wisdom by its average. That’s how the two are related: they’re the two different senses in which the same curve can be high.<br>这种区别类似于一条准则：评判才华要看其最佳表现，评判品格要看其最差表现。而对于聪明与智慧，评判聪明要看其最佳表现，评判智慧则要看其平均表现。这就是二者之间的关联：它们是同一条曲线在不同维度上呈现出 “高” 的两种表现形式。</p><p>So a wise person knows what to do in most situations, while a smart person knows what to do in situations where few others could. We need to add one more qualification: we should ignore cases where someone knows what to do because they have inside information. [3] But aside from that, I don’t think we can get much more specific without starting to be mistaken.<br>因此，智慧的人在大多数情况下都知道该怎么做，而聪明的人则在那些很少有人能应对的情境中知道该怎么做。这里我们还需要补充一个限定条件：如果一个人是因为掌握了内幕信息才知道该怎么做，这种情况应排除在外。[3] 除此之外，我认为若再想更精确地界定二者，就难免会出现偏差了。</p><p>Nor do we need to. Simple as it is, this explanation predicts, or at least accords with, both of the conventional stories about the distinction between wisdom and intelligence. Human problems are the most common type, so being good at solving those is key in achieving a high average outcome. And it seems natural that a high average outcome depends mostly on experience, but that dramatic peaks can only be achieved by people with certain rare, innate qualities; nearly anyone can learn to be a good swimmer, but to be an Olympic swimmer you need a certain body type.<br>而且我们也无需过度精确。尽管这个解释很简单，但它能够解释 —— 至少是符合 —— 关于智慧与聪明区别的那两种传统说法。人际问题是最常见的问题类型，因此善于解决这类问题是实现高平均表现的关键。而且，高平均表现主要依赖经验，这似乎合情合理；但那些极高的峰值表现，却只能由具备某些罕见先天特质的人实现 —— 就像几乎所有人都能学会游泳并游得不错，但要成为奥运会游泳选手，就必须具备特定的身体条件一样。</p><p>This explanation also suggests why wisdom is such an elusive concept: there’s no such thing. “Wise” means something—that one is on average good at making the right choice. But giving the name “wisdom” to the supposed quality that enables one to do that doesn’t mean such a thing exists. To the extent “wisdom” means anything, it refers to a grab-bag of qualities as various as self-discipline, experience, and empathy. [4]<br>这个解释还能说明为何 “智慧” 是一个如此难以捉摸的概念：因为根本不存在 “智慧” 这种单一的特质。“智慧的” 这个词有其含义 —— 指一个人在做正确选择方面的平均能力较强。但我们把那种据称能让人做出正确选择的特质命名为 “智慧”，并不意味着这种单一特质真的存在。从本质上来说，“智慧” 如果有意义，那它所指代的也是一系列杂乱的特质，比如自律、经验、同理心等等，这些特质各不相同。[4]</p><p>Likewise, though “intelligent” means something, we’re asking for trouble if we insist on looking for a single thing called “intelligence.” And whatever its components, they’re not all innate. We use the word “intelligent” as an indication of ability: a smart person can grasp things few others could. It does seem likely there’s some inborn predisposition to intelligence (and wisdom too), but this predisposition is not itself intelligence.<br>同样地，尽管 “聪明的” 这个词有其含义，但如果我们执意要寻找一种名为 “聪明” 的单一特质，那就是自寻烦恼了。而且，无论构成聪明的要素是什么，它们并非全都是天生的。我们用 “聪明的” 这个词来表示一种能力：聪明的人能理解少数人才能理解的事物。似乎确实存在某种与生俱来的、趋向于聪明（也趋向于智慧）的倾向，但这种倾向本身并非聪明。</p><p>One reason we tend to think of intelligence as inborn is that people trying to measure it have concentrated on the aspects of it that are most measurable. A quality that’s inborn will obviously be more convenient to work with than one that’s influenced by experience, and thus might vary in the course of a study. The problem comes when we drag the word “intelligence” over onto what they’re measuring. If they’re measuring something inborn, they can’t be measuring intelligence. Three year olds aren’t smart. When we describe one as smart, it’s shorthand for “smarter than other three year olds.”<br>我们之所以倾向于认为聪明是天生的，原因之一在于那些试图衡量聪明的人，往往把注意力集中在聪明中最容易衡量的方面。一种天生的特质，显然比受经验影响、可能在研究过程中发生变化的特质更容易研究。但问题在于，我们把他们所衡量的东西等同于 “聪明” 了。如果他们衡量的是某种天生的特质，那他们衡量的就不是聪明本身。三岁的孩子并不聪明。当我们说某个三岁孩子 “聪明” 时，其实是 “比其他三岁孩子更聪明” 的简略说法。</p><h2 id="Split"><a href="#Split" class="headerlink" title="Split"></a><strong>Split</strong></h2><h2 id="分化"><a href="#分化" class="headerlink" title="分化"></a><strong>分化</strong></h2><p>Perhaps it’s a technicality to point out that a predisposition to intelligence is not the same as intelligence. But it’s an important technicality, because it reminds us that we can become smarter, just as we can become wiser.<br>指出 “趋向于聪明的倾向不等于聪明本身”，或许只是一个技术性的细节。但这个细节至关重要，因为它提醒我们：我们可以变得更聪明，就像我们可以变得更智慧一样。</p><p>The alarming thing is that we may have to choose between the two.<br>令人担忧的是，我们或许不得不在二者之间做出选择。</p><p>If wisdom and intelligence are the average and peaks of the same curve, then they converge as the number of points on the curve decreases. If there’s just one point, they’re identical: the average and maximum are the same. But as the number of points increases, wisdom and intelligence diverge. And historically the number of points on the curve seems to have been increasing: our ability is tested in an ever wider range of situations.<br>如果说智慧是同一条曲线的平均值，聪明是这条曲线的峰值，那么随着曲线上数据点数量的减少，二者会逐渐趋同。如果只有一个数据点，二者就完全相同 —— 平均值和最大值是一样的。但随着数据点数量的增加，智慧与聪明就会逐渐分化。从历史发展来看，这条曲线上的数据点数量似乎一直在增加：我们的能力需要在越来越多不同的情境中接受考验。</p><p>In the time of Confucius and Socrates, people seem to have regarded wisdom, learning, and intelligence as more closely related than we do. Distinguishing between “wise” and “smart” is a modern habit. [5] And the reason we do is that they’ve been diverging. As knowledge gets more specialized, there are more points on the curve, and the distinction between the spikes and the average becomes sharper, like a digital image rendered with more pixels.<br>在孔子和苏格拉底的时代，人们似乎认为智慧、学识和聪明之间的联系比我们现在认为的要紧密得多。区分 “智慧的” 和 “聪明的” 是现代才有的习惯。[5] 我们之所以会做这种区分，是因为这两种能力已经逐渐分化了。随着知识变得越来越专业化，曲线上的数据点越来越多，峰值与平均值之间的区别也变得越来越明显，就像像素更高的数字图像，细节会更清晰一样。</p><p>One consequence is that some old recipes may have become obsolete. At the very least we have to go back and figure out if they were really recipes for wisdom or intelligence. But the really striking change, as intelligence and wisdom drift apart, is that we may have to decide which we prefer. We may not be able to optimize for both simultaneously.<br>这种分化带来的一个结果是，一些古老的 “方法” 可能已经过时了。至少我们需要回头审视，弄清楚那些方法究竟是培养智慧的，还是提升聪明的。但随着聪明与智慧日益分化，真正显著的变化是：我们可能不得不决定自己更倾向于追求哪一个。我们或许无法同时让二者都达到最佳状态。</p><p>Society seems to have voted for intelligence. We no longer admire the sage—not the way people did two thousand years ago. Now we admire the genius. Because in fact the distinction we began with has a rather brutal converse: just as you can be smart without being very wise, you can be wise without being very smart. That doesn’t sound especially admirable. That gets you James Bond, who knows what to do in a lot of situations, but has to rely on Q for the ones involving math.<br>社会似乎已经选择了聪明。我们不再像两千年前的人们那样崇拜圣人了。现在我们崇拜的是天才。因为事实上，我们最初提到的那种区别，有一个相当残酷的反向结论：就像一个人可以聪明却不够智慧一样，一个人也可以智慧却不够聪明。后者听起来似乎没那么值得钦佩。这就好比詹姆斯・邦德，他在很多情况下都知道该怎么做，但遇到涉及数学的问题时，就不得不依赖 Q 博士。</p><p>Intelligence and wisdom are obviously not mutually exclusive. In fact, a high average may help support high peaks. But there are reasons to believe that at some point you have to choose between them. One is the example of very smart people, who are so often unwise that in popular culture this now seems to be regarded as the rule rather than the exception. Perhaps the absent-minded professor is wise in his way, or wiser than he seems, but he’s not wise in the way Confucius or Socrates wanted people to be. [6]<br>聪明与智慧显然并非相互排斥。事实上，高平均值（智慧）或许能为高峰值（聪明）提供支撑。但有理由相信，在某些时候，你必须在二者之间做出选择。其中一个理由就是那些非常聪明的人所表现出的例子：他们往往不够智慧，以至于在流行文化中，这种情况似乎已经被视为常态，而非特例。或许那位心不在焉的教授有他自己的智慧之处，或者比表面看起来更智慧，但他的智慧并非孔子或苏格拉底所期望的那种智慧。[6]</p><h2 id="New"><a href="#New" class="headerlink" title="New"></a><strong>New</strong></h2><h2 id="新变化"><a href="#新变化" class="headerlink" title="新变化"></a><strong>新变化</strong></h2><p>For both Confucius and Socrates, wisdom, virtue, and happiness were necessarily related. The wise man was someone who knew what the right choice was and always made it; to be the right choice, it had to be morally right; he was therefore always happy, knowing he’d done the best he could. I can’t think of many ancient philosophers who would have disagreed with that, so far as it goes.<br>在孔子和苏格拉底看来，智慧、美德与幸福三者之间存在必然的联系。智慧的人知道什么是正确的选择，并且总能做出正确的选择；而要成为正确的选择，就必须在道德上是正当的；因此，智慧的人因为知道自己已经尽了最大努力，所以总能感到幸福。就此而言，我想不出有多少古代哲学会反对这种观点。</p><p>“The superior man is always happy; the small man sad,” said Confucius. [7]<br>孔子说：“君子坦荡荡，小人长戚戚。”[7]（注：此处引用采用《论语》中常见译法，原文直译为 “君子总是快乐的，小人总是悲伤的”，结合中文文化语境调整为更贴合的经典名句翻译）</p><p>Whereas a few years ago I read an interview with a mathematician who said that most nights he went to bed discontented, feeling he hadn’t made enough progress. [8] The Chinese and Greek words we translate as “happy” didn’t mean exactly what we do by it, but there’s enough overlap that this remark contradicts them.<br>然而，几年前我读到过一篇对一位数学家的采访，他说自己大多数晚上睡觉时都感到不满，觉得自己没有取得足够的进步。[8] 我们翻译成 “幸福” 的中文词汇（如 “乐”）和希腊词汇，其含义与我们现在所说的 “幸福” 并非完全一致，但二者有足够多的重合之处，因此这位数学家的话与古代哲人的观点是相悖的。</p><p>Is the mathematician a small man because he’s discontented? No; he’s just doing a kind of work that wasn’t very common in Confucius’s day.<br>难道因为这位数学家感到不满，他就是个 “小人” 吗？显然不是；他只是在从事一种在孔子时代并不常见的工作而已。</p><p>Human knowledge seems to grow fractally. Time after time, something that seemed a small and uninteresting area—experimental error, even—turns out, when examined up close, to have as much in it as all knowledge up to that point. Several of the fractal buds that have exploded since ancient times involve inventing and discovering new things. Math, for example, used to be something a handful of people did part-time. Now it’s the career of thousands. And in work that involves making new things, some old rules don’t apply.<br>人类知识的增长似乎呈分形模式。一次又一次，某个看似微小且无趣的领域 —— 即便只是实验误差 —— 在近距离审视后会发现，其包含的内容体量竟与此前所有知识的总和相当。自古代以来，诸多 “分形萌芽” 的爆发都与创造和发现新事物相关。例如，数学曾只是少数人在业余时间研究的东西，如今却成了数千人的职业。而在涉及创造新事物的工作中，一些古老的规则已不再适用。</p><p>Recently I’ve spent some time advising people, and there I find the ancient rule still works: try to understand the situation as well as you can, give the best advice you can based on your experience, and then don’t worry about it, knowing you did all you could. But I don’t have anything like this serenity when I’m writing an essay. Then I’m worried. What if I run out of ideas? And when I’m writing, four nights out of five I go to bed discontented, feeling I didn’t get enough done.<br>最近我花了些时间给人提供建议，发现在这个过程中，那条古老的规则依然有效：尽你所能去理解情况，根据自己的经验给出最佳建议，然后便无需担忧 —— 因为你知道自己已竭尽全力。但当我写文章时，却完全没有这样的平静。那时的我满是焦虑：要是思路断了怎么办？而且在写作期间，我五分之四的夜晚都是带着不满入睡的，总觉得自己没完成足够多的工作。</p><p>Advising people and writing are fundamentally different types of work. When people come to you with a problem and you have to figure out the right thing to do, you don’t (usually) have to invent anything. You just weigh the alternatives and try to judge which is the prudent choice. But prudence can’t tell me what sentence to write next. The search space is too big.<br>为人提供建议与写作，本质上是两种截然不同的工作。当人们带着问题来找你，你需要找出正确的解决方案时，（通常）并不需要创造任何新东西。你只需权衡各种选项，判断哪个是审慎的选择即可。但 “审慎” 却无法告诉我下一句话该写什么 —— 因为可供选择的范围实在太大了。</p><p>Someone like a judge or a military officer can in much of his work be guided by duty, but duty is no guide in making things. Makers depend on something more precarious: inspiration. And like most people who lead a precarious existence, they tend to be worried, not contented. In that respect they’re more like the small man of Confucius’s day, always one bad harvest (or ruler) away from starvation. Except instead of being at the mercy of weather and officials, they’re at the mercy of their own imagination.<br>像法官或军官这类人，其大部分工作都能以 “职责” 为指引，但 “职责” 却无法指导人们进行创造。创造者依赖的是更不稳定的东西：灵感。就像大多数过着不稳定生活的人一样，他们往往充满忧虑，而非满足。从这一点来看，他们更像孔子时代的 “小人”—— 总是离饥荒仅一步之遥，可能一场歉收、或是遇到一位苛政的统治者就会陷入困境。只不过，创造者并非受制于天气和官员，而是受制于自己的想象力。</p><h2 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a><strong>Limits</strong></h2><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a><strong>局限</strong></h2><p>To me it was a relief just to realize it might be ok to be discontented. The idea that a successful person should be happy has thousands of years of momentum behind it. If I was any good, why didn’t I have the easy confidence winners are supposed to have? But that, I now believe, is like a runner asking “If I’m such a good athlete, why do I feel so tired?” Good runners still get tired; they just get tired at higher speeds.<br>对我而言，意识到 “感到不满也可能是正常的”，本身就是一种解脱。“成功人士就应该幸福” 这一观念，已经有了数千年的思想惯性。如果我真的有能力，为何没有拥有成功者应有的那种从容自信呢？但现在我明白了，这种想法就像一位跑步运动员问：“如果我真的是个好运动员，为什么还会觉得这么累？” 优秀的运动员依然会感到疲惫，只是他们在跑得更快时才会累。</p><p>People whose work is to invent or discover things are in the same position as the runner. There’s no way for them to do the best they can, because there’s no limit to what they could do. The closest you can come is to compare yourself to other people. But the better you do, the less this matters. An undergrad who gets something published feels like a star. But for someone at the top of the field, what’s the test of doing well? Runners can at least compare themselves to others doing exactly the same thing; if you win an Olympic gold medal, you can be fairly content, even if you think you could have run a bit faster. But what is a novelist to do?<br>以创造或发现为工作的人，处境与跑步运动员相同。他们永远无法 “做到最好”，因为他们能做的事没有上限。最接近 “做到最好” 的方式，或许是与他人比较，但你做得越好，这种比较的意义就越小。一个能发表文章的本科生会觉得自己像个明星，但对于行业顶尖人士来说，如何衡量 “做得好” 呢？跑步运动员至少能与做着完全相同事情的人比较 —— 即便觉得自己还能跑得更快，赢得奥运金牌也足以让人感到相当满足。可小说家该如何衡量自己的成就呢？</p><p>Whereas if you’re doing the kind of work in which problems are presented to you and you have to choose between several alternatives, there’s an upper bound on your performance: choosing the best every time. In ancient societies, nearly all work seems to have been of this type. The peasant had to decide whether a garment was worth mending, and the king whether or not to invade his neighbor, but neither was expected to invent anything. In principle they could have; the king could have invented firearms, then invaded his neighbor. But in practice innovations were so rare that they weren’t expected of you, any more than goalkeepers are expected to score goals. [9] In practice, it seemed as if there was a correct decision in every situation, and if you made it you’d done your job perfectly, just as a goalkeeper who prevents the other team from scoring is considered to have played a perfect game.<br>然而，如果你从事的工作是 “面对已存在的问题，并在多个选项中做出选择”，那么你的表现就有一个上限：每次都选出最佳选项。在古代社会，几乎所有工作都属于这种类型。农民要判断一件衣服是否值得修补，国王要决定是否进攻邻国，但没人会期望他们创造新事物。理论上他们或许可以 —— 国王本可以发明火器，再用它进攻邻国 —— 但实际上，创新极为罕见，人们不会对任何人抱有这样的期望，就像没人会期望守门员进球一样。[9] 事实上，在当时的认知里，似乎每种情况都存在一个 “正确决策”，只要你做出了这个决策，就算完美完成了工作 —— 这就像守门员守住所有射门，就会被认为表现完美一样。</p><p>In this world, wisdom seemed paramount. [10] Even now, most people do work in which problems are put before them and they have to choose the best alternative. But as knowledge has grown more specialized, there are more and more types of work in which people have to make up new things, and in which performance is therefore unbounded. Intelligence has become increasingly important relative to wisdom because there is more room for spikes.<br>在这样的世界里，睿智似乎是最重要的。[10] 即便现在，大多数人的工作依然是 “面对问题并选择最佳选项”。但随着知识愈发专业化，需要人们 “创造新事物” 的工作类型越来越多，而这类工作的表现没有上限。相较于睿智，聪慧变得越来越重要 —— 因为 “峰值表现” 有了更大的发挥空间。</p><h2 id="Recipes"><a href="#Recipes" class="headerlink" title="Recipes"></a><strong>Recipes</strong></h2><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><p>Another sign we may have to choose between intelligence and wisdom is how different their recipes are. Wisdom seems to come largely from curing childish qualities, and intelligence largely from cultivating them.<br>我们或许必须在聪慧与睿智之间做出选择的另一个迹象，在于二者的 “培养方法” 截然不同。睿智的获得，在很大程度上源于克服幼稚的特质；而聪慧的提升，却在很大程度上依赖于培养这些特质。</p><p>Recipes for wisdom, particularly ancient ones, tend to have a remedial character. To achieve wisdom one must cut away all the debris that fills one’s head on emergence from childhood, leaving only the important stuff. Both self-control and experience have this effect: to eliminate the random biases that come from your own nature and from the circumstances of your upbringing respectively. That’s not all wisdom is, but it’s a large part of it. Much of what’s in the sage’s head is also in the head of every twelve year old. The difference is that in the head of the twelve year old it’s mixed together with a lot of random junk.<br>培养睿智的方法 —— 尤其是古老的方法 —— 往往带有 “矫正” 性质。要获得睿智，就必须清除童年时期在头脑中堆积的 “杂物”，只留下重要的东西。自律和经验都能起到这样的作用：自律消除源于个人天性的随机偏见，经验则消除源于成长环境的随机偏见。这虽然不是睿智的全部，但却是其重要组成部分。圣人脑中的许多认知，每个十二岁的孩子脑中也有，区别在于，孩子的认知中混杂着大量无关的 “垃圾信息”。</p><p>The path to intelligence seems to be through working on hard problems. You develop intelligence as you might develop muscles, through exercise. But there can’t be too much compulsion here. No amount of discipline can replace genuine curiosity. So cultivating intelligence seems to be a matter of identifying some bias in one’s character—some tendency to be interested in certain types of things—and nurturing it. Instead of obliterating your idiosyncrasies in an effort to make yourself a neutral vessel for the truth, you select one and try to grow it from a seedling into a tree.<br>提升聪慧的途径，似乎是通过解决难题实现的。就像通过锻炼增强肌肉一样，你通过攻克难题来发展聪慧。但这一过程不能有过多强迫 —— 再多的自律也无法替代真正的好奇心。因此，培养聪慧的关键在于：发现自身性格中的某种 “倾向”（即对某类事物产生兴趣的倾向），并加以培养。你无需为了让自己成为 “容纳真理的中立容器” 而抹杀自己的特质，反而应该挑选出一种特质，将其从幼苗培育成大树。</p><p>The wise are all much alike in their wisdom, but very smart people tend to be smart in distinctive ways.<br>所有睿智的人，在 “睿智” 这一点上都颇为相似；但极为聪慧的人，其 “聪慧” 的表现方式却各有不同。</p><p>Most of our educational traditions aim at wisdom. So perhaps one reason schools work badly is that they’re trying to make intelligence using recipes for wisdom. Most recipes for wisdom have an element of subjection. At the very least, you’re supposed to do what the teacher says. The more extreme recipes aim to break down your individuality the way basic training does. But that’s not the route to intelligence. Whereas wisdom comes through humility, it may actually help, in cultivating intelligence, to have a mistakenly high opinion of your abilities, because that encourages you to keep working. Ideally till you realize how mistaken you were.<br>我们大多数教育传统都以培养睿智为目标。因此，学校教育效果不佳的原因之一，或许就是它们在用 “培养睿智的方法” 来试图提升学生的 “聪慧”。大多数培养睿智的方法都带有 “服从” 的成分 —— 至少，你要听从老师的指令。更极端的方法甚至会像基础军事训练那样，试图摧毁你的个性。但这绝非提升聪慧的途径。睿智源于谦逊，而在培养聪慧的过程中，对自己能力有 “过高的误判” 反而可能有帮助 —— 因为这种误判能鼓励你坚持探索，直到你最终意识到自己的误判为止（这是最理想的情况）。</p><p>(The reason it’s hard to learn new skills late in life is not just that one’s brain is less malleable. Another probably even worse obstacle is that one has higher standards.)<br>（人到晚年难以学习新技能，不仅是因为大脑的可塑性下降，另一个或许更严重的障碍是：你对自己的要求变得更高了。）</p><p>I realize we’re on dangerous ground here. I’m not proposing the primary goal of education should be to increase students’ “self-esteem.” That just breeds laziness. And in any case, it doesn’t really fool the kids, not the smart ones. They can tell at a young age that a contest where everyone wins is a fraud.<br>我知道这个话题有些敏感。我并非主张教育的首要目标应该是提升学生的 “自尊”—— 那样只会滋生懒惰。而且无论如何，这也骗不了孩子，尤其是聪慧的孩子。他们在很小的时候就能识破 “人人都能赢” 的比赛本质上是场骗局。</p><p>A teacher has to walk a narrow path: you want to encourage kids to come up with things on their own, but you can’t simply applaud everything they produce. You have to be a good audience: appreciative, but not too easily impressed. And that’s a lot of work. You have to have a good enough grasp of kids’ capacities at different ages to know when to be surprised.<br>教师必须走一条狭窄的道路：既要鼓励孩子独立创造，又不能对他们的所有成果都盲目称赞。你需要成为一个 “好观众”—— 懂得欣赏，但又不会轻易被打动。这绝非易事：你必须充分了解不同年龄段孩子的能力，才能判断什么时候该为他们的成果感到惊喜。</p><p>That’s the opposite of traditional recipes for education. Traditionally the student is the audience, not the teacher; the student’s job is not to invent, but to absorb some prescribed body of material. (The use of the term “recitation” for sections in some colleges is a fossil of this.) The problem with these old traditions is that they’re too much influenced by recipes for wisdom.<br>这与传统的教育方法恰好相反。在传统教育中，学生是 “观众”，老师才是 “表演者”；学生的任务不是创造，而是吸收规定的知识内容。（一些大学将课堂环节称为 “recitation（背诵 &#x2F; 复述）”，就是这种传统的遗留。）这些古老传统的问题在于，它们过多地受到了 “培养睿智的方法” 的影响。</p><h2 id="Different"><a href="#Different" class="headerlink" title="Different"></a><strong>Different</strong></h2><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a><strong>差异</strong></h2><p>I deliberately gave this essay a provocative title; of course it’s worth being wise. But I think it’s important to understand the relationship between intelligence and wisdom, and particularly what seems to be the growing gap between them. That way we can avoid applying rules and standards to intelligence that are really meant for wisdom. These two senses of “knowing what to do” are more different than most people realize. The path to wisdom is through discipline, and the path to intelligence through carefully selected self-indulgence. Wisdom is universal, and intelligence idiosyncratic. And while wisdom yields calmness, intelligence much of the time leads to discontentment.<br>我特意给这篇文章起了一个具有挑衅性的标题 —— 显然，变得睿智是值得的。但我认为，理解聪慧与睿智之间的关系，尤其是二者之间似乎日益扩大的差距，至关重要。只有这样，我们才能避免将本应用于衡量睿智的规则和标准，套用在聪慧上。这两种 “知道该怎么做” 的能力，其差异比大多数人意识到的要大得多：通往睿智的道路是 “自律”，而通往聪慧的道路是 “精心选择的自我放纵”；睿智具有普遍性，聪慧却具有独特性；睿智能带来平静，而聪慧在大多数时候会带来不满。</p><p>That’s particularly worth remembering. A physicist friend recently told me half his department was on Prozac. Perhaps if we acknowledge that some amount of frustration is inevitable in certain kinds of work, we can mitigate its effects. Perhaps we can box it up and put it away some of the time, instead of letting it flow together with everyday sadness to produce what seems an alarmingly large pool. At the very least, we can avoid being discontented about being discontented.<br>这一点尤其值得铭记。一位物理学家朋友最近告诉我，他所在部门有一半人在服用百忧解（抗抑郁药物）。或许，如果我们承认在某些类型的工作中，一定程度的挫折是不可避免的，就能减轻其带来的影响。或许我们可以在某些时候将这种挫折感 “打包收纳”，而不是任由它与日常的悲伤情绪交织，汇聚成一片看似令人不安的 “情绪深潭”。至少，我们可以避免因 “感到不满” 而进一步 “对不满本身感到不满”。</p><p>If you feel exhausted, it’s not necessarily because there’s something wrong with you. Maybe you’re just running fast.<br>如果你感到疲惫，未必是你自身出了问题。或许你只是在 “快速奔跑” 而已（指在追求聪慧的道路上奋力前行）。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] Gauss was supposedly asked this when he was 10. Instead of laboriously adding together the numbers like the other students, he saw that they consisted of 50 pairs that each summed to 101 (100 + 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get the answer, 5050.<br>[1] 据说高斯 10 岁时就被问到过这个问题（计算 1 到 100 的和）。与其他同学费力地逐个相加不同，高斯发现这些数字可以组成 50 对，每对之和均为 101（如 100+1、99+2 等），因此他只需用 101 乘以 50，就能得出答案 5050。</p><p>[2] A variant is that intelligence is the ability to solve problems, and wisdom the judgement to know how to use those solutions. But while this is certainly an important relationship between wisdom and intelligence, it’s not the distinction between them. Wisdom is useful in solving problems too, and intelligence can help in deciding what to do with the solutions.<br>[2] 有一种相关观点认为，聪慧是解决问题的能力，而睿智是判断如何运用这些解决方案的能力。但尽管这确实是聪慧与睿智之间的一种重要关联，却并非二者的本质区别。因为睿智在解决问题时也能发挥作用，而聪慧同样有助于判断该如何运用解决方案。</p><p>[3] In judging both intelligence and wisdom we have to factor out some knowledge. People who know the combination of a safe will be better at opening it than people who don’t, but no one would say that was a test of intelligence or wisdom.<br>[3] 在评判聪慧与睿智时，我们都必须排除某些特定知识的影响。知道保险箱密码的人无疑比不知道的人更擅长打开它，但没人会说这是对聪慧或睿智的考验。</p><p>But knowledge overlaps with wisdom and probably also intelligence. A knowledge of human nature is certainly part of wisdom. So where do we draw the line?<br>但知识与睿智存在重叠，或许与聪慧也存在重叠。对人性的认知，无疑是睿智的一部分。那么，我们该如何划分 “特定知识” 与 “聪慧 &#x2F; 睿智” 的界限呢？</p><p>Perhaps the solution is to discount knowledge that at some point has a sharp drop in utility. For example, understanding French will help you in a large number of situations, but its value drops sharply as soon as no one else involved knows French. Whereas the value of understanding vanity would decline more gradually.<br>或许解决办法是：排除那些在特定情况下 “效用会急剧下降” 的知识。例如，懂法语能在很多情境中帮到你，但一旦周围没人懂法语，法语的价值就会急剧下降；而对 “虚荣心” 的理解，其价值下降的过程则会平缓得多。</p><p>The knowledge whose utility drops sharply is the kind that has little relation to other knowledge. This includes mere conventions, like languages and safe combinations, and also what we’d call “random” facts, like movie stars’ birthdays, or how to distinguish 1956 from 1957 Studebakers.<br>这类 “效用急剧下降” 的知识，往往与其他知识关联甚微。其中包括纯粹的约定俗成（如语言、保险箱密码），也包括我们所说的 “零散事实”（如电影明星的生日、如何区分 1956 年与 1957 年款的斯图贝克汽车）。</p><p>[4] People seeking some single thing called “wisdom” have been fooled by grammar. Wisdom is just knowing the right thing to do, and there are a hundred and one different qualities that help in that. Some, like selflessness, might come from meditating in an empty room, and others, like a knowledge of human nature, might come from going to drunken parties.<br>[4] 那些试图寻找某种单一存在的 “睿智” 的人，其实是被语法误导了。“睿智” 本质上就是知道该做正确的事，而有无数种不同的特质都能帮助人们实现这一点。有些特质（如无私）可能源于在空房间中冥想，而另一些特质（如对人性的认知）则可能源于参加喧闹的派对。</p><p>Perhaps realizing this will help dispel the cloud of semi-sacred mystery that surrounds wisdom in so many people’s eyes. The mystery comes mostly from looking for something that doesn’t exist. And the reason there have historically been so many different schools of thought about how to achieve wisdom is that they’ve focused on different components of it.<br>或许意识到这一点，有助于驱散在许多人眼中围绕着 “睿智” 的那层半神圣的神秘面纱。这种神秘感主要源于人们在寻找一种并不存在的 “单一特质”。历史上之所以有如此多关于 “如何获得睿智” 的不同学派，正是因为它们各自聚焦于 “睿智” 所包含的不同组成部分。</p><p>When I use the word “wisdom” in this essay, I mean no more than whatever collection of qualities helps people make the right choice in a wide variety of situations.<br>在本文中，我使用 “睿智” 一词时，所指的无非是 “能帮助人们在多种情境下做出正确选择的一系列特质的集合”。</p><p>[5] Even in English, our sense of the word “intelligence” is surprisingly recent. Predecessors like “understanding” seem to have had a broader meaning.<br>[5] 即便是在英语中，我们对 “intelligence（聪慧）” 一词的理解也出人意料地晚近。它的前身词汇（如 “understanding”）似乎有着更宽泛的含义。</p><p>[6] There is of course some uncertainty about how closely the remarks attributed to Confucius and Socrates resemble their actual opinions. I’m using these names as we use the name “Homer,” to mean the hypothetical people who said the things attributed to them.<br>[6] 当然，我们如今所引用的孔子和苏格拉底的言论，与他们真实观点的契合度有多高，仍存在一定不确定性。我使用这两个名字，就像我们使用 “荷马” 这个名字一样，指代那些被认为说出了相关言论的 “假定人物”（而非严格考证后的历史本人）。</p><p>[7] Analects VII:36, Fung trans.<br>[7] 此处引用源自冯友兰译本的《论语・述而》篇第 36 章。</p><p>Some translators use “calm” instead of “happy.” One source of difficulty here is that present-day English speakers have a different idea of happiness from many older societies. Every language probably has a word meaning “how one feels when things are going well,” but different cultures react differently when things go well. We react like children, with smiles and laughter. But in a more reserved society, or in one where life was tougher, the reaction might be a quiet contentment.<br>有些译者会用 “calm（平静）” 而非 “happy（幸福）” 来翻译（此处《论语》原文）。造成这种翻译差异的原因之一是，现代英语使用者对 “幸福” 的理解，与许多古代社会截然不同。每种语言或许都有一个词来描述 “事情顺利时的感受”，但不同文化对 “事情顺利” 的反应各不相同：我们会像孩子一样，用微笑和笑声表达；而在一个更内敛的社会，或是生活条件更艰苦的社会，人们的反应可能是一种平静的满足。</p><p>[8] It may have been Andrew Wiles, but I’m not sure. If anyone remembers such an interview, I’d appreciate hearing from you.<br>[8] （前文提到的那位感到不满的数学家）或许是安德鲁・怀尔斯，但我并不确定。如果有人记得相关采访，欢迎与我联系。</p><p>[9] Confucius claimed proudly that he had never invented anything—that he had simply passed on an accurate account of ancient traditions. [Analects VII:1] It’s hard for us now to appreciate how important a duty it must have been in preliterate societies to remember and pass on the group’s accumulated knowledge. Even in Confucius’s time it still seems to have been the first duty of the scholar.<br>[9] 孔子曾自豪地表示，自己从未创造过任何新事物，只是准确地传承了古代的传统（《论语・述而》篇第 1 章）。如今我们很难理解，在无文字记载的社会中，记忆并传承群体积累的知识是一项何等重要的职责。即便在孔子所处的时代，这似乎仍是学者的首要职责。</p><p>[10] The bias toward wisdom in ancient philosophy may be exaggerated by the fact that, in both Greece and China, many of the first philosophers (including Confucius and Plato) saw themselves as teachers of administrators, and so thought disproportionately about such matters. The few people who did invent things, like storytellers, must have seemed an outlying data point that could be ignored.<br>[10] 古代哲学对 “睿智” 的偏重，或许因以下事实而被放大：在古希腊和古代中国，许多早期哲学家（包括孔子和柏拉图）都将自己视为治国者的导师，因此会过度关注与 “睿智（治国、处世）” 相关的议题。而少数从事创造的人（如说书人），在当时想必被视为可以忽略的 “边缘存在”。</p><p>Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢特雷弗・布莱克威尔、萨拉・哈林、杰西卡・利文斯顿和罗伯特・莫里斯阅读本文初稿并提出建议。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>向创业者学习</title>
    <link href="/2025/09/12/learning-from-founders/"/>
    <url>/2025/09/12/learning-from-founders/</url>
    
    <content type="html"><![CDATA[<h1 id="Learning-from-Founders"><a href="#Learning-from-Founders" class="headerlink" title="Learning from Founders"></a>Learning from Founders</h1><h1 id="向创业者学习"><a href="#向创业者学习" class="headerlink" title="向创业者学习"></a>向创业者学习</h1><p>原文链接: <a href="https://paulgraham.com/foundersatwork.html">https://paulgraham.com/foundersatwork.html</a></p><p>January 2007</p><p>(Foreword to Jessica Livingston’s Founders at Work.)<br>（为杰西卡・利文斯顿所著《创业者在工作》一书作的序言）</p><p>Apparently sprinters reach their highest speed right out of the blocks, and spend the rest of the race slowing down. The winners slow down the least. It’s that way with most startups too. The earliest phase is usually the most productive. That’s when they have the really big ideas. Imagine what Apple was like when 100% of its employees were either Steve Jobs or Steve Wozniak.<br>显然，短跑运动员在冲出起跑线时就能达到最高速度，之后的赛程则一直在减速，而获胜者减速的幅度最小。大多数初创公司的发展轨迹亦是如此。初创初期往往是效率最高的阶段，正是在这个阶段，他们会产生真正具有颠覆性的伟大想法。试想一下，当苹果公司的所有员工只有史蒂夫・乔布斯和史蒂夫・沃兹尼亚克两人时，这家公司会是怎样的景象。</p><p>The striking thing about this phase is that it’s completely different from most people’s idea of what business is like. If you looked in people’s heads (or stock photo collections) for images representing “business,” you’d get images of people dressed up in suits, groups sitting around conference tables looking serious, Powerpoint presentations, people producing thick reports for one another to read. Early stage startups are the exact opposite of this. And yet they’re probably the most productive part of the whole economy.<br>这个阶段最显著的特点在于，它与大多数人对 “商业运作” 的固有认知截然不同。若你去探寻人们脑海中（或图库中）代表 “商业” 的画面，浮现的往往是身着正装的职场人士、围坐在会议桌旁神情严肃的团队、演示幻灯片的场景，以及人们互相传阅厚厚的报告的画面。而处于初创初期的公司，与这些场景恰恰相反。但即便如此，它们或许仍是整个经济体中效率最高的部分。</p><p>Why the disconnect? I think there’s a general principle at work here: the less energy people expend on performance, the more they expend on appearances to compensate. More often than not the energy they expend on seeming impressive makes their actual performance worse. A few years ago I read an article in which a car magazine modified the “sports” model of some production car to get the fastest possible standing quarter mile. You know how they did it? They cut off all the crap the manufacturer had bolted onto the car to make it look fast.<br>为何会存在这种认知偏差？我认为背后存在一个普遍规律：人们在实际业绩上投入的精力越少，就越会在表面形象上投入精力以作弥补。而且，他们为了显得 “厉害” 所耗费的精力，往往会反过来导致实际业绩变得更差。几年前，我曾读过一篇文章，某汽车杂志为了让一款量产车的 “运动版” 能跑出最快的静态四分之一英里（起步加速测试）成绩，对车辆进行了改装。你知道他们是怎么做的吗？他们拆除了制造商为让车子 “看起来跑得快” 而加装的所有华而不实的部件。</p><p>Business is broken the same way that car was. The effort that goes into looking productive is not merely wasted, but actually makes organizations less productive. Suits, for example. Suits do not help people to think better. I bet most executives at big companies do their best thinking when they wake up on Sunday morning and go downstairs in their bathrobe to make a cup of coffee. That’s when you have ideas. Just imagine what a company would be like if people could think that well at work. People do in startups, at least some of the time. (Half the time you’re in a panic because your servers are on fire, but the other half you’re thinking as deeply as most people only get to sitting alone on a Sunday morning.)<br>商业领域的问题，与那辆被加装无用部件的汽车如出一辙。为了 “看起来高效” 而付出的努力，不仅是一种浪费，实际上还会降低组织的真实效率。以正装为例，穿正装并不会让人的思维变得更清晰。我敢打赌，大公司里的大多数高管，最佳的思考状态出现在周日早晨 —— 穿着浴袍下楼煮咖啡的时刻。就是在这样的时刻，灵感才会涌现。试想一下，如果人们在工作时也能有这样清晰的思维，公司会变成什么样？在初创公司里，人们至少在部分时间能达到这种状态。（一半时间里，你会因服务器出故障而陷入恐慌；但另一半时间里，你的思考深度，能达到大多数人只有独自坐在周日早晨时才有的水平。）</p><p>Ditto for most of the other differences between startups and what passes for productivity in big companies. And yet conventional ideas of professionalism have such an iron grip on our minds that even startup founders are affected by them. In our startup, when outsiders came to visit we tried hard to seem “professional.” We’d clean up our offices, wear better clothes, try to arrange that a lot of people were there during conventional office hours. In fact, programming didn’t get done by well-dressed people at clean desks during office hours. It got done by badly dressed people (I was notorious for programmming wearing just a towel) in offices strewn with junk at 2 in the morning. But no visitor would understand that. Not even investors, who are supposed to be able to recognize real productivity when they see it. Even we were affected by the conventional wisdom. We thought of ourselves as impostors, succeeding despite being totally unprofessional. It was as if we’d created a Formula 1 car but felt sheepish because it didn’t look like a car was supposed to look.<br>初创公司与大公司所标榜的 “高效模式” 之间的其他差异，大多也符合这一规律。然而，传统的 “职业规范” 观念对我们的影响根深蒂固，即便初创公司的创始人也难以摆脱。在我们自己的初创公司里，每当有外人来访，我们都会努力表现得 “专业”：打扫办公室、换上更体面的衣服、尽量安排更多人在常规办公时间待在公司。但事实上，编程工作从来都不是由衣着光鲜的人在整洁的办公桌前、在办公时间内完成的。真正的编程工作，是由衣着随意的人（我曾因只裹着毛巾写代码而 “声名狼藉”）在凌晨两点、堆满杂物的办公室里完成的。但没有访客会理解这一点，即便是那些本应能识别出真正效率的投资者也不例外。我们自己也受到了传统观念的影响，甚至觉得自己像 “冒牌货”—— 尽管完全不符合 “职业规范”，却意外取得了成功。这就好比我们造出了一辆一级方程式赛车，却因它不符合人们对 “汽车应有的样子” 的认知而感到局促不安。</p><p>In the car world, there are at least some people who know that a high performance car looks like a Formula 1 racecar, not a sedan with giant rims and a fake spoiler bolted to the trunk. Why not in business? Probably because startups are so small. The really dramatic growth happens when a startup only has three or four people, so only three or four people see that, whereas tens of thousands see business as it’s practiced by Boeing or Philip Morris.<br>在汽车领域，至少有人知道，高性能汽车的样子应该像一级方程式赛车，而不是加装了大轮毂和假尾翼的轿车。为何在商业领域却不是这样？或许是因为初创公司规模太小。初创公司真正爆发式的增长，往往发生在团队只有三四个人的时候，所以只有这三四个人能见证这一过程；而成千上万的人所看到的 “商业运作”，都是波音、菲利普・莫里斯这类大公司的模式。</p><p>This book can help fix that problem, by showing everyone what, till now, only a handful people got to see: what happens in the first year of a startup. This is what real productivity looks like. This is the Formula 1 racecar. It looks weird, but it goes fast.<br>而这本书恰好能解决这个问题 —— 它将向所有人展示此前只有少数人能看到的景象：初创公司成立第一年里发生的一切。这才是真正的高效该有的样子，就像那辆一级方程式赛车，看似怪异，却能高速驰骋。</p><p>Of course, big companies won’t be able to do everything these startups do. In big companies there’s always going to be more politics, and less scope for individual decisions. But seeing what startups are really like will at least show other organizations what to aim for. The time may soon be coming when instead of startups trying to seem more corporate, corporations will try to seem more like startups. That would be a good thing.<br>当然，大公司无法完全照搬初创公司的所有做法。在大公司里，职场政治必然更多，个人决策的空间也必然更小。但了解初创公司的真实运作模式，至少能让其他组织明确努力的方向。或许在不久的将来，不再是初创公司努力模仿大公司的 “企业范儿”，而是大公司会努力向初创公司靠拢。若真能如此，那将是一件大好事。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>艺术何以称 “好”</title>
    <link href="/2025/09/11/how-art-can-be-good/"/>
    <url>/2025/09/11/how-art-can-be-good/</url>
    
    <content type="html"><![CDATA[<h1 id="How-Art-Can-Be-Good"><a href="#How-Art-Can-Be-Good" class="headerlink" title="How Art Can Be Good"></a>How Art Can Be Good</h1><h1 id="艺术何以称-“好”"><a href="#艺术何以称-“好”" class="headerlink" title="艺术何以称 “好”"></a>艺术何以称 “好”</h1><p>原文链接: <a href="https://paulgraham.com/goodart.html">https://paulgraham.com/goodart.html</a></p><p>December 2006</p><p>I grew up believing that taste is just a matter of personal preference. Each person has things they like, but no one’s preferences are any better than anyone else’s. There is no such thing as good taste.<br>我从小到大一直认为，品味不过是个人偏好的问题。每个人都有自己喜欢的事物，但没有人的偏好比别人的更高明。根本不存在所谓的 “好品味”。</p><p>Like a lot of things I grew up believing, this turns out to be false, and I’m going to try to explain why.<br>就像许多我从小深信不疑的观念一样，事实证明这个想法是错误的，接下来我会试着解释原因。</p><p>One problem with saying there’s no such thing as good taste is that it also means there’s no such thing as good art. If there were good art, then people who liked it would have better taste than people who didn’t. So if you discard taste, you also have to discard the idea of art being good, and artists being good at making it.<br>认为 “不存在好品味” 的一个问题在于，这同时意味着 “不存在好艺术”。倘若存在好艺术，那么喜欢它的人就会比不喜欢它的人拥有更好的品味。因此，要是你否定品味的存在，就不得不同时否定 “艺术有优劣之分” 以及 “艺术家创作水平有高低之别” 的观点。</p><p>It was pulling on that thread that unravelled my childhood faith in relativism. When you’re trying to make things, taste becomes a practical matter. You have to decide what to do next. Would it make the painting better if I changed that part? If there’s no such thing as better, it doesn’t matter what you do. In fact, it doesn’t matter if you paint at all. You could just go out and buy a ready-made blank canvas. If there’s no such thing as good, that would be just as great an achievement as the ceiling of the Sistine Chapel. Less laborious, certainly, but if you can achieve the same level of performance with less effort, surely that’s more impressive, not less.<br>正是顺着这条思路，我童年时期对相对主义的信念开始瓦解。当你试图创作时，品味就成了一个实际问题。你必须决定下一步该做什么：修改这部分会让画作变得更好吗？如果 “更好” 本身就不存在，那你做什么都无关紧要。事实上，你是否动笔作画都无所谓 —— 你大可以直接去买一块现成的空白画布。若 “好” 的标准本就不存在，那么买空白画布的行为，就能和创作西斯廷教堂天顶画相提并论，同为伟大的成就。当然，买画布更省力，但如果能用更少的努力达到同等 “水准”，按理说这应该更令人惊叹，而非相反。</p><p>Yet that doesn’t seem quite right, does it?<br>但这显然不对劲，不是吗？</p><h2 id="Audience"><a href="#Audience" class="headerlink" title="Audience"></a>Audience</h2><h2 id="受众"><a href="#受众" class="headerlink" title="受众"></a>受众</h2><p>I think the key to this puzzle is to remember that art has an audience. Art has a purpose, which is to interest its audience. Good art (like good anything) is art that achieves its purpose particularly well. The meaning of “interest” can vary. Some works of art are meant to shock, and others to please; some are meant to jump out at you, and others to sit quietly in the background. But all art has to work on an audience, and—here’s the critical point—members of the audience share things in common.<br>我认为解开这个谜题的关键，在于记住艺术存在受众。艺术有其目的，那就是吸引受众。好的艺术（就像所有领域的 “好事物” 一样），是能出色达成自身目的的艺术。“吸引” 的含义可以多种多样：有些艺术作品旨在冲击感官，有些意在带来愉悦；有些力求抓人眼球，有些则甘愿低调地作为背景存在。但所有艺术都必须对受众产生影响，而关键在于 —— 受众群体之间存在共通之处。</p><p>For example, nearly all humans find human faces engaging. It seems to be wired into us. Babies can recognize faces practically from birth. In fact, faces seem to have co-evolved with our interest in them; the face is the body’s billboard. So all other things being equal, a painting with faces in it will interest people more than one without. [1]<br>例如，几乎所有人都会被人类的面部吸引，这似乎是我们与生俱来的本能。婴儿几乎从出生起就能识别面孔。事实上，人类的面部特征与我们对它的兴趣似乎是共同进化的结果 —— 面部就像是身体的 “广告牌”。因此，在其他条件相同的情况下，一幅包含面部的画作会比不含面部的画作更能引起人们的兴趣。[1]</p><p>One reason it’s easy to believe that taste is merely personal preference is that, if it isn’t, how do you pick out the people with better taste? There are billions of people, each with their own opinion; on what grounds can you prefer one to another? [2]<br>人们之所以容易认为品味只是个人偏好，原因之一在于：如果品味并非纯个人化的，那该如何分辨谁拥有更好的品味呢？全球数十亿人各有各的看法，你凭什么认为某个人的观点比另一个人的更可取？[2]</p><p>But if audiences have a lot in common, you’re not in a position of having to choose one out of a random set of individual biases, because the set isn’t random. All humans find faces engaging—practically by definition: face recognition is in our DNA. And so having a notion of good art, in the sense of art that does its job well, doesn’t require you to pick out a few individuals and label their opinions as correct. No matter who you pick, they’ll find faces engaging.<br>但如果受众之间存在诸多共通点，你就不必在一堆随机的个人偏见中挑选 —— 因为这些偏好本就不是随机的。几乎从定义上来说，所有人都会被面部吸引：面部识别能力深植于我们的基因中。因此，要形成 “好艺术” 的概念（即能出色完成自身使命的艺术），并不需要你挑选出少数人，将他们的观点标榜为 “正确”。无论你选择谁作为受众样本，他们都会被面部形象所吸引。</p><p>Of course, space aliens probably wouldn’t find human faces engaging. But there might be other things they shared in common with us. The most likely source of examples is math. I expect space aliens would agree with us most of the time about which of two proofs was better. Erdos thought so. He called a maximally elegant proof one out of God’s book, and presumably God’s book is universal. [3]<br>当然，外星生命或许不会被人类面部吸引，但他们可能与我们存在其他共通之处。最可能的例子来自数学领域：我认为，对于两个数学证明中哪个更优，外星生命大多时候会与我们达成共识。厄尔多斯（Erdos）也持这种观点。他将极致优美的证明称为 “出自上帝之书的证明”，而想必 “上帝之书” 的标准是普世通用的。[3]</p><p>Once you start talking about audiences, you don’t have to argue simply that there are or aren’t standards of taste. Instead tastes are a series of concentric rings, like ripples in a pond. There are some things that will appeal to you and your friends, others that will appeal to most people your age, others that will appeal to most humans, and perhaps others that would appeal to most sentient beings (whatever that means).<br>一旦你开始从 “受众” 的角度思考，就不必再纠结于 “品味是否存在标准” 这种非黑即白的争论。相反，品味更像是一系列同心圆，如同池塘里的涟漪：有些事物能吸引你和你的朋友，有些能吸引你这个年龄段的大多数人，有些能吸引绝大多数人类，甚至可能存在能吸引多数有感知能力的生命体（无论 “有感知能力” 具体指什么）的事物。</p><p>The picture is slightly more complicated than that, because in the middle of the pond there are overlapping sets of ripples. For example, there might be things that appealed particularly to men, or to people from a certain culture.<br>实际情况会比这更复杂一些，因为池塘中央的涟漪会相互重叠。例如，有些事物可能特别吸引男性，或是吸引来自某一特定文化背景的人。</p><p>If good art is art that interests its audience, then when you talk about art being good, you also have to say for what audience. So is it meaningless to talk about art simply being good or bad? No, because one audience is the set of all possible humans. I think that’s the audience people are implicitly talking about when they say a work of art is good: they mean it would engage any human. [4]<br>如果 “好艺术” 是能吸引其受众的艺术，那么当你评价一件艺术作品 “好” 时，就必须明确它针对的是哪类受众。如此一来，单纯谈论艺术 “好” 或 “坏” 是否就毫无意义了？并非如此，因为存在一类特殊的受众 —— 所有可能的人类。我认为，当人们说一件艺术作品 “好” 时，他们潜意识里所指的受众就是全人类：意思是这件作品能吸引任何一个人。[4]</p><p>And that is a meaningful test, because although, like any everyday concept, “human” is fuzzy around the edges, there are a lot of things practically all humans have in common. In addition to our interest in faces, there’s something special about primary colors for nearly all of us, because it’s an artifact of the way our eyes work. Most humans will also find images of 3D objects engaging, because that also seems to be built into our visual perception. [5] And beneath that there’s edge-finding, which makes images with definite shapes more engaging than mere blur.<br>这一评价标准是有意义的，因为尽管 “人类” 和其他日常概念一样，边界模糊，但几乎所有人类都存在诸多共通点。除了对人脸的兴趣，三原色对我们大多数人来说也有特殊意义 —— 这是由我们眼睛的工作原理决定的。大多数人还会被三维物体的图像吸引，因为这似乎也是我们视觉感知系统的固有属性。[5] 而在这之下，还有 “边缘识别” 能力：这使得轮廓清晰的图像比模糊的图像更具吸引力。</p><p>Humans have a lot more in common than this, of course. My goal is not to compile a complete list, just to show that there’s some solid ground here. People’s preferences aren’t random. So an artist working on a painting and trying to decide whether to change some part of it doesn’t have to think “Why bother? I might as well flip a coin.” Instead he can ask “What would make the painting more interesting to people?” And the reason you can’t equal Michelangelo by going out and buying a blank canvas is that the ceiling of the Sistine Chapel is more interesting to people.<br>当然，人类的共通点远不止这些。我的目的并非列出完整清单，只是想证明 “好艺术” 的评价存在坚实依据 —— 人们的偏好并非随机的。因此，艺术家在创作时，不必纠结 “修改这部分有意义吗？不如抛硬币决定”，而是可以思考 “怎样做能让这幅画更吸引人们？”。而你买一块空白画布无法与米开朗基罗相提并论的原因，就在于西斯廷教堂天顶画对人们更具吸引力。</p><p>A lot of philosophers have had a hard time believing it was possible for there to be objective standards for art. It seemed obvious that beauty, for example, was something that happened in the head of the observer, not something that was a property of objects. It was thus “subjective” rather than “objective.” But in fact if you narrow the definition of beauty to something that works a certain way on humans, and you observe how much humans have in common, it turns out to be a property of objects after all. You don’t have to choose between something being a property of the subject or the object if subjects all react similarly. Being good art is thus a property of objects as much as, say, being toxic to humans is: it’s good art if it consistently affects humans in a certain way.<br>许多哲学家难以相信艺术存在客观标准。例如，他们认为美显然是观察者主观感受的产物，而非物体本身的属性，因此美是 “主观” 的，而非 “客观” 的。但事实上，若将 “美” 的定义限定为 “能对人类产生特定影响的事物”，并考虑到人类之间的诸多共通点，就会发现美终究还是物体的一种属性。如果所有主体（即人类）的反应都相似，就无需在 “属性属于主体” 还是 “属性属于客体” 之间做选择。因此，“成为好艺术” 和 “对人类有毒性” 一样，都是物体的属性：若一件艺术作品能持续对人类产生特定的积极影响，它就是好艺术。</p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><h2 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h2><p>So could we figure out what the best art is by taking a vote? After all, if appealing to humans is the test, we should be able to just ask them, right?<br>那么，我们能否通过投票来选出 “最好的艺术” 呢？毕竟，既然 “吸引人类” 是评判标准，直接询问人们的看法不就行了吗？</p><p>Well, not quite. For products of nature that might work. I’d be willing to eat the apple the world’s population had voted most delicious, and I’d probably be willing to visit the beach they voted most beautiful, but having to look at the painting they voted the best would be a crapshoot.<br>事情并非如此简单。对于自然产物而言，投票或许可行：我愿意吃全球投票选出的 “最美味苹果”，也可能愿意去 “最美丽的海滩” 度假，但看投票选出的 “最好画作”，结果却可能不尽如人意。</p><p>Man-made stuff is different. For one thing, artists, unlike apple trees, often deliberately try to trick us. Some tricks are quite subtle. For example, any work of art sets expectations by its level of finish. You don’t expect photographic accuracy in something that looks like a quick sketch. So one widely used trick, especially among illustrators, is to intentionally make a painting or drawing look like it was done faster than it was. The average person looks at it and thinks: how amazingly skillful. It’s like saying something clever in a conversation as if you’d thought of it on the spur of the moment, when in fact you’d worked it out the day before.<br>人造物品则不同。首先，艺术家不像苹果树，他们常会刻意 “欺骗” 受众，有些手段还十分隐蔽。例如，任何艺术作品都会通过 “完成度” 设定受众的期待：对于一幅看起来像快速草图的作品，你不会要求它具备照片般的精准度。因此，一种被广泛使用的技巧（尤其在插画师中）是：故意让作品看起来比实际创作时间更短。普通人看到后会觉得 “技艺太惊人了”，这就像在对话中随口说出一句精妙的话，仿佛是即兴想到的，实则前一天就已构思好。</p><p>Another much less subtle influence is brand. If you go to see the Mona Lisa, you’ll probably be disappointed, because it’s hidden behind a thick glass wall and surrounded by a frenzied crowd taking pictures of themselves in front of it. At best you can see it the way you see a friend across the room at a crowded party. The Louvre might as well replace it with copy; no one would be able to tell. And yet the Mona Lisa is a small, dark painting. If you found people who’d never seen an image of it and sent them to a museum in which it was hanging among other paintings with a tag labelling it as a portrait by an unknown fifteenth century artist, most would walk by without giving it a second look.<br>另一个影响更明显的因素是 “品牌效应”。如果你去看《蒙娜丽莎》，很可能会感到失望：它被厚厚的玻璃墙保护着，周围挤满了在画前自拍的人群。你最多只能像在拥挤的派对上隔着房间看朋友那样瞥见它。卢浮宫即便用复制品替换原作，也没人能分辨出来。更何况，《蒙娜丽莎》本身是一幅尺寸不大、色调暗沉的画。如果找一些从未见过这幅画的人，把他们带到一家博物馆 —— 馆内《蒙娜丽莎》与其他画作挂在一起，标签上写着 “15 世纪无名画家肖像作品”，大多数人都会匆匆路过，不会多看一眼。</p><p>For the average person, brand dominates all other factors in the judgement of art. Seeing a painting they recognize from reproductions is so overwhelming that their response to it as a painting is drowned out.<br>对普通人而言，在评价艺术时，“品牌效应” 会压倒所有其他因素。看到一幅从复制品中认识的画作，这种熟悉感会让人印象深刻，以至于他们对画作本身的真实感受反而被掩盖了。</p><p>And then of course there are the tricks people play on themselves. Most adults looking at art worry that if they don’t like what they’re supposed to, they’ll be thought uncultured. This doesn’t just affect what they claim to like; they actually make themselves like things they’re supposed to.<br>当然，人们还会自我欺骗。大多数成年人欣赏艺术时会担心：如果自己不喜欢那些 “理应喜欢” 的作品，就会被认为没文化。这种担忧不仅影响他们嘴上说喜欢什么，甚至会让他们真的强迫自己去喜欢那些 “该喜欢” 的东西。</p><p>That’s why you can’t just take a vote. Though appeal to people is a meaningful test, in practice you can’t measure it, just as you can’t find north using a compass with a magnet sitting next to it. There are sources of error so powerful that if you take a vote, all you’re measuring is the error.<br>这就是为什么不能简单靠投票来判定好艺术。尽管 “吸引受众” 是个有意义的标准，但在实际中却无法精准衡量 —— 就像指南针旁边放着磁铁，你永远找不到真正的北方。干扰判断的误差源太过强大，此时投票结果，不过是对误差的测量而已。</p><p>We can, however, approach our goal from another direction, by using ourselves as guinea pigs. You’re human. If you want to know what the basic human reaction to a piece of art would be, you can at least approach that by getting rid of the sources of error in your own judgements.<br>不过，我们可以换个方向接近目标 —— 把自己当作 “实验对象”。你本身就是人类，若想知道人类对一件艺术品的基本反应，至少可以先排除自己判断中的误差源。</p><p>For example, while anyone’s reaction to a famous painting will be warped at first by its fame, there are ways to decrease its effects. One is to come back to the painting over and over. After a few days the fame wears off, and you can start to see it as a painting. Another is to stand close. A painting familiar from reproductions looks more familiar from ten feet away; close in you see details that get lost in reproductions, and which you’re therefore seeing for the first time.<br>比如，任何人初见名作时，反应都会受其 “名气” 干扰，但有办法减弱这种影响。一是反复观赏：几天之后，名气带来的光环会逐渐褪去，你才能真正将它当作一幅画来看。二是近距离观察：从十英尺外看，熟悉的复制品画面会更有 “熟悉感”；凑近后，你会发现复制品中丢失的细节 —— 这些细节对你而言，其实是第一次见到。</p><p>There are two main kinds of error that get in the way of seeing a work of art: biases you bring from your own circumstances, and tricks played by the artist. Tricks are straightforward to correct for. Merely being aware of them usually prevents them from working. For example, when I was ten I used to be very impressed by airbrushed lettering that looked like shiny metal. But once you study how it’s done, you see that it’s a pretty cheesy trick—one of the sort that relies on pushing a few visual buttons really hard to temporarily overwhelm the viewer. It’s like trying to convince someone by shouting at them.<br>阻碍人们看清艺术品本质的误差主要有两类：一是个人背景带来的偏见，二是艺术家耍的 “技巧”。其中，“技巧” 的干扰很容易修正 —— 只要意识到它们的存在，通常就能避免被误导。比如我十岁时，总被那些看似闪亮金属质感的喷绘字体吸引。但一旦了解其制作原理，就会发现这不过是种廉价的把戏：靠强烈刺激几个视觉 “开关”，暂时迷惑观众。这就像靠大喊大叫来试图说服别人一样。</p><p>The way not to be vulnerable to tricks is to explicitly seek out and catalog them. When you notice a whiff of dishonesty coming from some kind of art, stop and figure out what’s going on. When someone is obviously pandering to an audience that’s easily fooled, whether it’s someone making shiny stuff to impress ten year olds, or someone making conspicuously avant-garde stuff to impress would-be intellectuals, learn how they do it. Once you’ve seen enough examples of specific types of tricks, you start to become a connoisseur of trickery in general, just as professional magicians are.<br>避免被 “技巧” 欺骗的方法，是主动找出并归类这些把戏。当你从某类艺术中察觉到一丝 “不真诚”，就停下来弄清楚背后的门道。如果有人明显在迎合容易被忽悠的受众 —— 无论是靠闪亮元素吸引孩子，还是靠刻意前卫的风格讨好准知识分子 —— 都要去弄明白他们是怎么做到的。见过足够多特定类型的把戏后，你就会像专业魔术师一样，成为辨别 “忽悠手段” 的行家。</p><p>What counts as a trick? Roughly, it’s something done with contempt for the audience. For example, the guys designing Ferraris in the 1950s were probably designing cars that they themselves admired. Whereas I suspect over at General Motors the marketing people are telling the designers, “Most people who buy SUVs do it to seem manly, not to drive off-road. So don’t worry about the suspension; just make that sucker as big and tough-looking as you can.” [6]<br>什么样的手段才算 “把戏”？大致来说，是那些带着对受众的轻视而做的事。比如 20 世纪 50 年代设计法拉利的人，很可能是在设计自己也欣赏的车；但我猜通用汽车的营销人员会对设计师说：“买 SUV 的人大多是为了显得有男子气概，不是为了越野。所以别管悬挂系统，只管把这玩意儿造得越大、越硬朗越好。”[6]</p><p>I think with some effort you can make yourself nearly immune to tricks. It’s harder to escape the influence of your own circumstances, but you can at least move in that direction. The way to do it is to travel widely, in both time and space. If you go and see all the different kinds of things people like in other cultures, and learn about all the different things people have liked in the past, you’ll probably find it changes what you like. I doubt you could ever make yourself into a completely universal person, if only because you can only travel in one direction in time. But if you find a work of art that would appeal equally to your friends, to people in Nepal, and to the ancient Greeks, you’re probably onto something.<br>我认为只要努力，你几乎能让自己对 “把戏” 免疫。摆脱个人背景的影响更难，但至少能朝这个方向努力。方法就是 “广泛旅行”—— 既跨越空间，也跨越时间。去看看其他文化中的人喜欢什么，了解过去的人欣赏过什么，你很可能会发现自己的喜好因此改变。或许你永远成不了 “完全普世” 的人（毕竟时间只能单向流逝），但如果一件艺术品能同时吸引你的朋友、尼泊尔人，以及古希腊人，那它大概率是真正的好艺术。</p><p>My main point here is not how to have good taste, but that there can even be such a thing. And I think I’ve shown that. There is such a thing as good art. It’s art that interests its human audience, and since humans have a lot in common, what interests them is not random. Since there’s such a thing as good art, there’s also such a thing as good taste, which is the ability to recognize it.<br>我在这里的核心观点，不是教大家如何拥有好品味，而是证明 “好品味” 本身是存在的。我想我已经做到了这一点：好艺术是存在的 —— 它是能吸引人类受众的艺术；而由于人类有诸多共通点，能吸引他们的事物并非随机。既然好艺术存在，好品味也必然存在 —— 它就是识别好艺术的能力。</p><p>If we were talking about the taste of apples, I’d agree that taste is just personal preference. Some people like certain kinds of apples and others like other kinds, but how can you say that one is right and the other wrong? [7]<br>如果讨论的是苹果的 “味道”，我会认同 “品味只是个人偏好”：有人喜欢这种苹果，有人喜欢那种，你怎么能说谁对谁错呢？[7]</p><p>The thing is, art isn’t apples. Art is man-made. It comes with a lot of cultural baggage, and in addition the people who make it often try to trick us. Most people’s judgement of art is dominated by these extraneous factors; they’re like someone trying to judge the taste of apples in a dish made of equal parts apples and jalapeno peppers. All they’re tasting is the peppers. So it turns out you can pick out some people and say that they have better taste than others: they’re the ones who actually taste art like apples.<br>但问题是，艺术不是苹果。艺术是人造的，带着大量文化包袱，而且创作者还常试图 “忽悠” 受众。大多数人对艺术的判断被这些外在因素主导 —— 就像在 “苹果与墨西哥辣椒各占一半” 的菜里尝苹果味道，尝到的全是辣椒味。因此，你完全可以找出一些人，说他们的品味更好：因为他们能像品尝纯苹果一样，真正感受艺术本身。</p><p>Or to put it more prosaically, they’re the people who (a) are hard to trick, and (b) don’t just like whatever they grew up with. If you could find people who’d eliminated all such influences on their judgement, you’d probably still see variation in what they liked. But because humans have so much in common, you’d also find they agreed on a lot. They’d nearly all prefer the ceiling of the Sistine Chapel to a blank canvas.<br>更通俗地说，这类人有两个特点：（1）不易被 “忽悠”；（2）不会只喜欢自己从小接触的东西。即便找到能排除所有干扰因素的人，他们的喜好可能仍有差异，但由于人类的共通点极多，他们的共识也会很多 —— 几乎所有人都会认为西斯廷教堂天顶画比空白画布更好。</p><h2 id="Making-It"><a href="#Making-It" class="headerlink" title="Making It"></a>Making It</h2><h2 id="创作启示"><a href="#创作启示" class="headerlink" title="创作启示"></a>创作启示</h2><p>I wrote this essay because I was tired of hearing “taste is subjective” and wanted to kill it once and for all. Anyone who makes things knows intuitively that’s not true. When you’re trying to make art, the temptation to be lazy is as great as in any other kind of work. Of course it matters to do a good job. And yet you can see how great a hold “taste is subjective” has even in the art world by how nervous it makes people to talk about art being good or bad. Those whose jobs require them to judge art, like curators, mostly resort to euphemisms like “significant” or “important” or (getting dangerously close) “realized.” [8]<br>我写这篇文章，是因为受够了 “品味是主观的” 这种说法，想彻底推翻它。任何创作者凭直觉都知道这不是真的：创作艺术时，偷懒的诱惑和做其他工作时一样大，而 “把作品做好” 显然至关重要。但即便在艺术圈，“品味是主观的” 这一观念也根深蒂固 —— 从人们谈论艺术好坏时的紧张态度就能看出来。那些工作需要评判艺术的人（比如策展人），大多会用 “有意义的”“重要的” 这类委婉说法，或是（近乎冒险地）用 “完成度高的” 来替代 “好” 或 “坏”。[8]</p><p>I don’t have any illusions that being able to talk about art being good or bad will cause the people who talk about it to have anything more useful to say. Indeed, one of the reasons “taste is subjective” found such a receptive audience is that, historically, the things people have said about good taste have generally been such nonsense.<br>我并不幻想 “能谈论艺术好坏” 这件事，能让谈论艺术的人说出更有用的话。事实上，“品味是主观的” 之所以能被广泛接受，原因之一就是：历史上，人们对 “好品味” 的论述大多是无稽之谈。</p><p>It’s not for the people who talk about art that I want to free the idea of good art, but for those who make it. Right now, ambitious kids going to art school run smack into a brick wall. They arrive hoping one day to be as good as the famous artists they’ve seen in books, and the first thing they learn is that the concept of good has been retired. Instead everyone is just supposed to explore their own personal vision. [9]<br>我想为 “好艺术” 正名，不是为了那些谈论艺术的人，而是为了创作者。如今，怀揣抱负去艺术学校的年轻人会碰壁：他们带着 “有朝一日能像书中名家一样优秀” 的期待入学，却首先学到 “‘好’的概念已经过时”，反而被告知 “每个人只需探索自己的个人视角”。[9]</p><p>When I was in art school, we were looking one day at a slide of some great fifteenth century painting, and one of the students asked “Why don’t artists paint like that now?” The room suddenly got quiet. Though rarely asked out loud, this question lurks uncomfortably in the back of every art student’s mind. It was as if someone had brought up the topic of lung cancer in a meeting within Philip Morris.<br>我上艺术学校时，有一次我们看一幅 15 世纪名作的幻灯片，一个学生问：“为什么现在的艺术家不这么画了？” 房间瞬间安静下来。这个问题虽然很少有人当众提出，却一直不安地藏在每个艺术生的心底 —— 就像在菲利普・莫里斯（烟草公司）的会议上提起肺癌话题一样敏感。</p><p>“Well,” the professor replied, “we’re interested in different questions now.” He was a pretty nice guy, but at the time I couldn’t help wishing I could send him back to fifteenth century Florence to explain in person to Leonardo &amp; Co. how we had moved beyond their early, limited concept of art. Just imagine that conversation.<br>“因为我们现在关注的问题不一样了。” 教授回答。他人很好，但当时我忍不住想：要是能把他送回 15 世纪的佛罗伦萨，让他当面给达・芬奇等人解释 “我们已经超越了他们早期、局限的艺术概念”，会是怎样的场景？你可以想象一下这段对话。</p><p>In fact, one of the reasons artists in fifteenth century Florence made such great things was that they believed you could make great things. [10] They were intensely competitive and were always trying to outdo one another, like mathematicians or physicists today—maybe like anyone who has ever done anything really well.<br>事实上，15 世纪佛罗伦萨的艺术家能创作出伟大作品，原因之一就是他们相信 “伟大作品是可以实现的”。[10] 他们竞争激烈，总想超越彼此 —— 就像如今的数学家或物理学家，或许也像所有把事情做到极致的人一样。</p><p>The idea that you could make great things was not just a useful illusion. They were actually right. So the most important consequence of realizing there can be good art is that it frees artists to try to make it. To the ambitious kids arriving at art school this year hoping one day to make great things, I say: don’t believe it when they tell you this is a naive and outdated ambition. There is such a thing as good art, and if you try to make it, there are people who will notice.<br>“能创作出伟大作品” 并非只是有用的幻想 —— 他们是对的。因此，意识到 “好艺术存在” 的最重要意义，是让创作者敢于去尝试创作它。对于今年怀揣 “有朝一日创作出伟大作品” 的抱负进入艺术学校的年轻人，我想说：当有人告诉你这是天真、过时的目标时，别相信他们。好艺术是存在的，只要你努力去创作，总会有人看见。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] This is not to say, of course, that good paintings must have faces in them, just that everyone’s visual piano has that key on it. There are situations in which you want to avoid faces, precisely because they attract so much attention. But you can see how universally faces work by their prevalence in advertising.<br>[1] 当然，这并不是说好的画作必须包含人脸，只是想说明每个人的 “视觉琴键” 上都有这一个按键。有些情况下，你反而需要刻意避开人脸 —— 正是因为人脸太容易吸引注意力了。但从广告中人脸的高频出现，就能看出它的吸引力是多么普遍。</p><p>[2] The other reason it’s easy to believe is that it makes people feel good. To a kid, this idea is crack. In every other respect they’re constantly being told that they have a lot to learn. But in this they’re perfect. Their opinion carries the same weight as any adult’s. You should probably question anything you believed as a kid that you’d want to believe this much.<br>[2] 人们容易相信 “品味只是个人偏好”，还有一个原因是这个说法能让人感觉良好。对孩子来说，这个观点简直像 “兴奋剂”：在其他所有方面，大人总说他们还有很多要学，但在 “品味” 上，他们却能和成年人平起平坐，拥有同等分量的话语权。对于童年时深信不疑、且至今仍格外愿意相信的观点，你或许都该打个问号。</p><p>[3] It’s conceivable that the elegance of proofs is quantifiable, in the sense that there may be some formal measure that turns out to coincide with mathematicians’ judgements. Perhaps it would be worth trying to make a formal language for proofs in which those considered more elegant consistently came out shorter (perhaps after being macroexpanded or compiled).<br>[3] 数学证明的 “优美程度” 或许是可量化的 —— 也就是说，可能存在某种正式的衡量标准，能与数学家的主观判断达成一致。或许我们值得尝试创造一种 “证明的正式语言”：在这种语言中，那些被认为更优美的证明，经过宏展开或编译后，篇幅总能更短。</p><p>[4] Maybe it would be possible to make art that would appeal to space aliens, but I’m not going to get into that because (a) it’s too hard to answer, and (b) I’m satisfied if I can establish that good art is a meaningful idea for human audiences.<br>[4] 或许确实存在能吸引外星生命的艺术，但我不会深入探讨这个话题 —— 原因有二：（1）这个问题太难回答；（2）对我而言，只要能证明 “好艺术” 对人类受众来说是个有意义的概念，就足够了。</p><p>[5] If early abstract paintings seem more interesting than later ones, it may be because the first abstract painters were trained to paint from life, and their hands thus tended to make the kind of gestures you use in representing physical things. In effect they were saying “scaramara” instead of “uebfgbsb.”<br>[5] 如果早期的抽象画看起来比后期的更有吸引力，或许是因为第一批抽象画家接受过 “写生” 训练 —— 他们的笔触习惯带有描绘实体事物的动作逻辑。换句话说，他们的创作更像在表达有意义的 “信号”，而非无意义的 “乱码”（此处 “scaramara” 和 “uebfgbsb” 分别比喻 “有逻辑的表达” 和 “无意义的堆砌”）。</p><p>[6] It’s a bit more complicated, because sometimes artists unconsciously use tricks by imitating art that does.<br>[6] 情况其实更复杂一些：有时艺术家会模仿那些使用 “把戏” 的作品，在这个过程中，他们自己也会无意识地用上这些把戏。</p><p>[7] I phrased this in terms of the taste of apples because if people can see the apples, they can be fooled. When I was a kid most apples were a variety called Red Delicious that had been bred to look appealing in stores, but which didn’t taste very good.<br>[7] 我用 “苹果的味道” 来打比方，是因为 “视觉” 会误导人们对 “味道” 的判断。我小时候，市面上大部分苹果是 “红元帅” 品种 —— 这种苹果经过培育，在商店里看起来色泽诱人，但口感其实并不好。</p><p>[8] To be fair, curators are in a difficult position. If they’re dealing with recent art, they have to include things in shows that they think are bad. That’s because the test for what gets included in shows is basically the market price, and for recent art that is largely determined by successful businessmen and their wives. So it’s not always intellectual dishonesty that makes curators and dealers use neutral-sounding language.<br>[8] 公平地说，策展人的处境其实很艰难。如果要策划当代艺术展，他们往往不得不把自己认为 “不好” 的作品也纳入展览。这是因为，决定作品能否参展的核心标准本质上是市场价格，而当代艺术的价格，很大程度上是由成功的商人和他们的妻子决定的。因此，策展人和艺术品经销商使用中立的措辞，并非总是出于 “学术不诚实”。</p><p>[9] What happens in practice is that everyone gets really good at talking about art. As the art itself gets more random, the effort that would have gone into the work goes instead into the intellectual sounding theory behind it. “My work represents an exploration of gender and sexuality in an urban context,” etc. Different people win at that game.<br>[9] 实际情况是，现在的人都变得特别会 “谈论艺术”。随着艺术本身变得越来越随意，原本应该投入到创作中的精力，反而被用在炮制听起来高深的 “背后理论” 上 —— 比如 “我的作品探索了城市语境下的性别与性取向问题” 等等。在这场 “理论游戏” 中，有人会胜出，但与艺术本身无关。</p><p>[10] There were several other reasons, including that Florence was then the richest and most sophisticated city in the world, and that they lived in a time before photography had (a) killed portraiture as a source of income and (b) made brand the dominant factor in the sale of art.<br>[10] 15 世纪佛罗伦萨艺术家能创作出伟大作品，还有其他几个原因：当时的佛罗伦萨是世界上最富有、最成熟的城市；而且他们所处的时代，摄影技术尚未出现 —— 摄影后来不仅让肖像画失去了主要收入来源，还让 “品牌效应” 成为艺术品销售中的主导因素。</p><p>Incidentally, I’m not saying that good art &#x3D; fifteenth century European art. I’m not saying we should make what they made, but that we should work like they worked. There are fields now in which many people work with the same energy and honesty that fifteenth century artists did, but art is not one of them.<br>顺便提一句，我并不是说 “好艺术就等于 15 世纪欧洲艺术”。我想表达的不是 “我们应该创作和他们一样的作品”，而是 “我们应该像他们那样去创作”。如今在很多领域，仍有许多人以 15 世纪艺术家那样的热情和真诚投入工作，但艺术领域不在其中。</p><p>Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this, and to Paul Watson for permission to use the image at the top.<br>感谢特雷弗・布莱克韦尔（Trevor Blackwell）、杰西卡・利文斯顿（Jessica Livingston）和罗伯特・莫里斯（Robert Morris）阅读本文初稿，同时感谢保罗・沃森（Paul Watson）允许使用文首图片。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导致初创公司失败的 18 个错误</title>
    <link href="/2025/09/11/the-18-mistakes-that-kill-startups/"/>
    <url>/2025/09/11/the-18-mistakes-that-kill-startups/</url>
    
    <content type="html"><![CDATA[<h1 id="The-18-Mistakes-That-Kill-Startups"><a href="#The-18-Mistakes-That-Kill-Startups" class="headerlink" title="The 18 Mistakes That Kill Startups"></a>The 18 Mistakes That Kill Startups</h1><h1 id="导致初创公司失败的-18-个错误"><a href="#导致初创公司失败的-18-个错误" class="headerlink" title="导致初创公司失败的 18 个错误"></a>导致初创公司失败的 18 个错误</h1><p>原文链接: <a href="https://paulgraham.com/startupmistakes.html">https://paulgraham.com/startupmistakes.html</a></p><p>October 2006</p><p>In the Q &amp; A period after a recent talk, someone asked what made startups fail. After standing there gaping for a few seconds I realized this was kind of a trick question. It’s equivalent to asking how to make a startup succeed — if you avoid every cause of failure, you succeed — and that’s too big a question to answer on the fly.<br>在最近一次演讲后的问答环节中，有人问是什么导致初创公司失败。我愣在那里几秒后才意识到，这其实是个有点 tricky（ tricky 此处指 “暗藏玄机、不好直接回答”）的问题。它本质上等同于问 “如何让初创公司成功”—— 因为只要规避所有失败原因，就能成功 —— 而这个问题太大了，根本无法当场给出答案。</p><p>Afterwards I realized it could be helpful to look at the problem from this direction. If you have a list of all the things you shouldn’t do, you can turn that into a recipe for succeeding just by negating. And this form of list may be more useful in practice. It’s easier to catch yourself doing something you shouldn’t than always to remember to do something you should. [1]<br>后来我意识到，从这个角度审视问题或许会很有帮助。如果你有一份 “所有不该做的事” 的清单，只需要反过来做，就能将其转化为成功的方法。而且这种形式的清单在实际中可能更有用：比起时刻记住该做什么，发现自己正在做不该做的事要容易得多。[1]</p><p>In a sense there’s just one mistake that kills startups: not making something users want. If you make something users want, you’ll probably be fine, whatever else you do or don’t do. And if you don’t make something users want, then you’re dead, whatever else you do or don’t do. So really this is a list of 18 things that cause startups not to make something users want. Nearly all failure funnels through that.<br>从某种意义上说，导致初创公司失败的根本错误只有一个：没有做出用户想要的产品。只要你做出了用户想要的东西，无论其他方面做得如何，大概率都能顺利发展；但如果没做到这一点，无论其他方面多出色，公司也注定走向失败。因此，这份清单本质上列出的是 18 个 “导致初创公司无法做出用户所需产品” 的原因 —— 几乎所有初创公司的失败，最终都源于此。</p><h2 id="Single-Founder"><a href="#Single-Founder" class="headerlink" title="Single Founder"></a><strong>Single Founder</strong></h2><h2 id="单一创始人"><a href="#单一创始人" class="headerlink" title="单一创始人"></a><strong>单一创始人</strong></h2><p>Have you ever noticed how few successful startups were founded by just one person? Even companies you think of as having one founder, like Oracle, usually turn out to have more. It seems unlikely this is a coincidence.<br>你是否注意到，由单一创始人创办且最终成功的初创公司少之又少？即便像甲骨文（Oracle）这样你以为是 “单人创办” 的公司，实际上通常也有多位创始人。这绝非巧合。</p><p>What’s wrong with having one founder? To start with, it’s a vote of no confidence. It probably means the founder couldn’t talk any of his friends into starting the company with him. That’s pretty alarming, because his friends are the ones who know him best.<br>单一创始人模式有什么问题？首先，这本身就是一种 “缺乏信心” 的信号 —— 很可能意味着这位创始人连自己的朋友都说服不了，无法让他们一起加入创业。这相当令人担忧，因为朋友往往是最了解他的人。</p><p>But even if the founder’s friends were all wrong and the company is a good bet, he’s still at a disadvantage. Starting a startup is too hard for one person. Even if you could do all the work yourself, you need colleagues to brainstorm with, to talk you out of stupid decisions, and to cheer you up when things go wrong.<br>即便创始人的朋友都判断失误，这家公司其实前景良好，单一创始人依然会处于劣势。创办初创公司的难度极大，单靠一个人难以承受。即便你能独自完成所有工作，也需要同事一起头脑风暴、劝阻你不要做出愚蠢的决定，以及在事情不顺时鼓励你振作。</p><p>The last one might be the most important. The low points in a startup are so low that few could bear them alone. When you have multiple founders, esprit de corps binds them together in a way that seems to violate conservation laws. Each thinks “I can’t let my friends down.” This is one of the most powerful forces in human nature, and it’s missing when there’s just one founder.<br>最后一点或许最为关键。初创公司遇到的低谷时期，其艰难程度足以让大多数人无法独自承受。而当有多位创始人时，团队精神会以一种仿佛 “打破守恒定律” 的方式将他们凝聚在一起 —— 每个人都会想 “我不能让朋友们失望”。这是人性中最强大的力量之一，而单一创始人模式恰恰缺少了这一点。</p><h2 id="Bad-Location"><a href="#Bad-Location" class="headerlink" title="Bad Location"></a><strong>Bad Location</strong></h2><h2 id="选址不佳"><a href="#选址不佳" class="headerlink" title="选址不佳"></a><strong>选址不佳</strong></h2><p>Startups prosper in some places and not others. Silicon Valley dominates, then Boston, then Seattle, Austin, Denver, and New York. After that there’s not much. Even in New York the number of startups per capita is probably a 20th of what it is in Silicon Valley. In towns like Houston and Chicago and Detroit it’s too small to measure.<br>初创公司在某些地区能蓬勃发展，在另一些地区却举步维艰。硅谷独占鳌头，其次是波士顿、西雅图、奥斯汀、丹佛和纽约，再之后就没有多少值得一提的地区了。即便在纽约，人均初创公司数量可能也只有硅谷的二十分之一；而在休斯顿、芝加哥、底特律这类城市，这个数字更是微乎其微，几乎无法统计。</p><p>Why is the falloff so sharp? Probably for the same reason it is in other industries. What’s the sixth largest fashion center in the US? The sixth largest center for oil, or finance, or publishing? Whatever they are they’re probably so far from the top that it would be misleading even to call them centers.<br>为何地区间的差距如此悬殊？原因很可能与其他行业类似。比如，美国第六大时尚中心是哪里？第六大石油、金融或出版中心呢？无论答案是什么，这些所谓的 “中心” 与顶尖地区的差距都极大，甚至称它们为 “中心” 都显得牵强。</p><p>It’s an interesting question why cities become startup hubs, but the reason startups prosper in them is probably the same as it is for any industry: that’s where the experts are. Standards are higher; people are more sympathetic to what you’re doing; the kind of people you want to hire want to live there; supporting industries are there; the people you run into in chance meetings are in the same business. Who knows exactly how these factors combine to boost startups in Silicon Valley and squish them in Detroit, but it’s clear they do from the number of startups per capita in each.<br>“城市为何会成为初创公司中心” 是个有趣的问题，但初创公司能在这些地区繁荣发展的原因，或许与所有行业的规律一致：这里聚集了该领域的专业人才。这些地区的行业标准更高，人们更能理解你所做的事，你想招聘的人才愿意定居于此，相关配套产业也十分完善，就连偶然遇到的人都可能和你从事同一行业。没人能确切说清这些因素是如何共同作用，让硅谷的初创公司蒸蒸日上、却让底特律的初创公司举步维艰的，但从两地人均初创公司数量来看，这种影响显而易见。</p><h2 id="Marginal-Niche"><a href="#Marginal-Niche" class="headerlink" title="Marginal Niche"></a><strong>Marginal Niche</strong></h2><h2 id="选择边缘细分领域"><a href="#选择边缘细分领域" class="headerlink" title="选择边缘细分领域"></a><strong>选择边缘细分领域</strong></h2><p>Most of the groups that apply to Y Combinator suffer from a common problem: choosing a small, obscure niche in the hope of avoiding competition.<br>大多数申请加入 Y Combinator（Y Combinator 是美国著名初创企业孵化器）的团队都存在一个共同问题：为了规避竞争，选择进入一个规模小、知名度低的边缘细分领域。</p><p>If you watch little kids playing sports, you notice that below a certain age they’re afraid of the ball. When the ball comes near them their instinct is to avoid it. I didn’t make a lot of catches as an eight year old outfielder, because whenever a fly ball came my way, I used to close my eyes and hold my glove up more for protection than in the hope of catching it.<br>如果你观察小孩运动，会发现一定年龄以下的孩子都怕球 —— 球靠近时，他们的本能反应是躲开。我八岁当外场手时，几乎接不到球，因为每当高飞球朝我飞来，我总会闭上眼睛、举起手套，更多是为了保护自己，而非指望能接住球。</p><p>Choosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. If you make anything good, you’re going to have competitors, so you may as well face that. You can only avoid competition by avoiding good ideas.<br>选择边缘领域创业，就好比我八岁时应对高飞球的策略。只要你做出好产品，就必然会面临竞争，所以不如坦然面对。毕竟，想要完全规避竞争，唯一的办法就是放弃好的想法。</p><p>I think this shrinking from big problems is mostly unconscious. It’s not that people think of grand ideas but decide to pursue smaller ones because they seem safer. Your unconscious won’t even let you think of grand ideas. So the solution may be to think about ideas without involving yourself. What would be a great idea for someone else to do as a startup?<br>我认为，这种 “回避重大问题” 的倾向大多是无意识的。并非人们想到了宏大的好点子，却因为觉得 “更安全” 而选择去做小项目 —— 而是他们的潜意识根本不会让他们想到那些宏大的想法。因此，解决办法或许是 “跳出自身视角思考”：如果是别人创业，什么才是一个好点子？</p><h2 id="Derivative-Idea"><a href="#Derivative-Idea" class="headerlink" title="Derivative Idea"></a><strong>Derivative Idea</strong></h2><h2 id="想法缺乏原创性（跟风模仿）"><a href="#想法缺乏原创性（跟风模仿）" class="headerlink" title="想法缺乏原创性（跟风模仿）"></a><strong>想法缺乏原创性（跟风模仿）</strong></h2><p>Many of the applications we get are imitations of some existing company. That’s one source of ideas, but not the best. If you look at the origins of successful startups, few were started in imitation of some other startup. Where did they get their ideas? Usually from some specific, unsolved problem the founders identified.<br>我们收到的很多申请方案，都是对现有公司的模仿。模仿确实是获取想法的一种方式，但绝非最佳方式。如果你去研究成功初创公司的起源，会发现很少有公司是靠模仿其他初创公司起家的。它们的想法来自哪里？通常是创始人发现的某个具体且尚未解决的问题。</p><p>Our startup made software for making online stores. When we started it, there wasn’t any; the few sites you could order from were hand-made at great expense by web consultants. We knew that if online shopping ever took off, these sites would have to be generated by software, so we wrote some. Pretty straightforward.<br>我们自己的初创公司曾开发过用于搭建网上商店的软件。当时市面上还没有这类产品 —— 少数能下单购物的网站，都是由网络顾问手工搭建的，成本极高。我们意识到，一旦网购开始流行，这些网站必然需要通过软件批量生成，于是就开发了相关软件。思路其实很简单直接。</p><p>It seems like the best problems to solve are ones that affect you personally. Apple happened because Steve Wozniak wanted a computer, Google because Larry and Sergey couldn’t find stuff online, Hotmail because Sabeer Bhatia and Jack Smith couldn’t exchange email at work.<br>似乎最值得解决的问题，是那些创始人自己亲身遇到的问题。苹果的诞生，源于史蒂夫・沃兹尼亚克（Steve Wozniak）自己想要一台电脑；谷歌的出现，是因为拉里・佩奇（Larry）和谢尔盖・布林（Sergey）在网上找不到想要的信息；Hotmail 的创立，则是因为萨比尔・巴蒂亚（Sabeer Bhatia）和杰克・史密斯（Jack Smith）在工作中无法便捷地交换电子邮件。</p><p>So instead of copying the Facebook, with some variation that the Facebook rightly ignored, look for ideas from the other direction. Instead of starting from companies and working back to the problems they solved, look for problems and imagine the company that might solve them. [2] What do people complain about? What do you wish there was?<br>因此，与其去模仿 Facebook（比如做一些 Facebook 不屑一顾的微小改动），不如换个方向寻找灵感。不要从 “现有公司” 出发，去追溯它们解决了什么问题；而应该先找到 “未被解决的问题”，再构想能解决这个问题的公司。[2] 人们常抱怨什么？你自己希望有什么产品或服务存在？</p><h2 id="Obstinacy"><a href="#Obstinacy" class="headerlink" title="Obstinacy"></a><strong>Obstinacy</strong></h2><h2 id="固执己见，不愿变通"><a href="#固执己见，不愿变通" class="headerlink" title="固执己见，不愿变通"></a><strong>固执己见，不愿变通</strong></h2><p>In some fields the way to succeed is to have a vision of what you want to achieve, and to hold true to it no matter what setbacks you encounter. Starting startups is not one of them. The stick-to-your-vision approach works for something like winning an Olympic gold medal, where the problem is well-defined. Startups are more like science, where you need to follow the trail wherever it leads.<br>在某些领域，成功的关键在于明确目标愿景，并无论遇到多少挫折都坚持下去。但创办初创公司不属于这类领域。“坚守愿景” 的方法适用于像赢得奥运金牌这样 “目标明确” 的事；而初创公司更像科学研究 —— 你需要跟着线索走，无论它指向何方。</p><p>So don’t get too attached to your original plan, because it’s probably wrong. Most successful startups end up doing something different than they originally intended — often so different that it doesn’t even seem like the same company. You have to be prepared to see the better idea when it arrives. And the hardest part of that is often discarding your old idea.<br>因此，不要过分执着于最初的计划，因为它很可能是错的。大多数成功的初创公司，最终做的事情都与最初的设想大相径庭 —— 有时差异大到让人觉得这根本不是同一家公司。你必须做好准备，当更好的想法出现时，能及时发现并接纳。而其中最困难的部分，往往是放弃旧想法。</p><p>But openness to new ideas has to be tuned just right. Switching to a new idea every week will be equally fatal. Is there some kind of external test you can use? One is to ask whether the ideas represent some kind of progression. If in each new idea you’re able to re-use most of what you built for the previous ones, then you’re probably in a process that converges. Whereas if you keep restarting from scratch, that’s a bad sign.<br>但对新想法的开放态度也需要适度 —— 每周都换一个新想法，同样会导致失败。有没有什么外部标准可以用来判断？一个方法是看这些新想法是否存在 “递进关系”：如果每个新想法都能复用之前项目中大部分已完成的成果，那么你很可能正朝着正确的方向推进；但如果每次都要从零开始，那就不是个好信号。</p><p>Fortunately there’s someone you can ask for advice: your users. If you’re thinking about turning in some new direction and your users seem excited about it, it’s probably a good bet.<br>幸运的是，有一群人可以为你提供建议 —— 你的用户。如果你正考虑转向新方向，而用户对此表现出热情，那么这个方向很可能是可行的。</p><h2 id="Hiring-Bad-Programmers"><a href="#Hiring-Bad-Programmers" class="headerlink" title="Hiring Bad Programmers"></a><strong>Hiring Bad Programmers</strong></h2><h2 id="招聘不合格的程序员"><a href="#招聘不合格的程序员" class="headerlink" title="招聘不合格的程序员"></a><strong>招聘不合格的程序员</strong></h2><p>I forgot to include this in the early versions of the list, because nearly all the founders I know are programmers. This is not a serious problem for them. They might accidentally hire someone bad, but it’s not going to kill the company. In a pinch they can do whatever’s required themselves.<br>我最初的清单里漏掉了这一点，因为我认识的创始人几乎都是程序员。对他们来说，这不是什么严重问题 —— 即便不小心招到了不合格的人，也不会导致公司倒闭，因为紧急情况下，他们自己就能完成所需的工作。</p><p>But when I think about what killed most of the startups in the e-commerce business back in the 90s, it was bad programmers. A lot of those companies were started by business guys who thought the way startups worked was that you had some clever idea and then hired programmers to implement it. That’s actually much harder than it sounds — almost impossibly hard in fact — because business guys can’t tell which are the good programmers. They don’t even get a shot at the best ones, because no one really good wants a job implementing the vision of a business guy.<br>但回想 20 世纪 90 年代电子商务领域多数初创公司的失败原因，会发现症结在于招聘了不合格的程序员。当时很多这类公司由纯商务背景的人创办，他们误以为初创公司的运作逻辑是：先有个巧妙的想法，再雇程序员把想法落地。但事实远比听起来难得多 —— 实际上几乎难如登天 —— 因为商务背景的人无法辨别程序员水平的优劣。他们甚至连接触顶尖程序员的机会都没有，因为真正优秀的程序员，根本不愿意接受一份 “单纯为实现商务人士愿景而工作” 的职位。</p><p>In practice what happens is that the business guys choose people they think are good programmers (it says here on his resume that he’s a Microsoft Certified Developer) but who aren’t. Then they’re mystified to find that their startup lumbers along like a World War II bomber while their competitors scream past like jet fighters. This kind of startup is in the same position as a big company, but without the advantages.<br>实际情况是，这些商务背景的人会选中他们自认为 “优秀” 的程序员（比如简历上写着 “微软认证开发人员”），但这些人其实并不合格。之后他们就会困惑地发现：自己的初创公司像二战时期的轰炸机一样慢吞吞地前行，而竞争对手却像喷气式战斗机般呼啸而过。这类初创公司陷入了和大公司一样的困境，却没有大公司所具备的优势。</p><p>So how do you pick good programmers if you’re not a programmer? I don’t think there’s an answer. I was about to say you’d have to find a good programmer to help you hire people. But if you can’t recognize good programmers, how would you even do that?<br>那么，如果你本身不是程序员，该如何挑选优秀的程序员呢？我认为这个问题没有完美答案。我本来想说，你可以找一位优秀的程序员帮你招人，但反过来想：如果你连优秀程序员都认不出来，又怎么能找到这样一位 “帮手” 呢？</p><h2 id="Choosing-the-Wrong-Platform"><a href="#Choosing-the-Wrong-Platform" class="headerlink" title="Choosing the Wrong Platform"></a><strong>Choosing the Wrong Platform</strong></h2><h2 id="选择错误的技术平台"><a href="#选择错误的技术平台" class="headerlink" title="选择错误的技术平台"></a><strong>选择错误的技术平台</strong></h2><p>A related problem (since it tends to be done by bad programmers) is choosing the wrong platform. For example, I think a lot of startups during the Bubble killed themselves by deciding to build server-based applications on Windows. Hotmail was still running on FreeBSD for years after Microsoft bought it, presumably because Windows couldn’t handle the load. If Hotmail’s founders had chosen to use Windows, they would have been swamped.<br>一个与之相关的问题（通常由不合格的程序员导致）是选择了错误的技术平台。比如，我认为互联网泡沫时期的很多初创公司，就是因为决定在 Windows 系统上搭建服务器端应用而自取灭亡。微软收购 Hotmail 后，其系统多年来仍在 FreeBSD（一种类 Unix 操作系统）上运行，推测原因是 Windows 无法承受当时的负载。要是 Hotmail 的创始人当初选择了 Windows，公司恐怕早就被流量压垮了。</p><p>PayPal only just dodged this bullet. After they merged with <a href="https://x.com/">X.com</a>, the new CEO wanted to switch to Windows — even after PayPal cofounder Max Levchin showed that their software scaled only 1% as well on Windows as Unix. Fortunately for PayPal they switched CEOs instead.<br>贝宝（PayPal）也险些栽在这个问题上。在与<a href="https://x.com/">X.com</a>合并后，新任 CEO 曾想将技术平台切换到 Windows—— 即便贝宝联合创始人马克斯・列夫琴（Max Levchin）已经证明，他们的软件在 Windows 上的扩展性仅为在 Unix 系统上的 1%。幸运的是，贝宝最终换了 CEO，而非换了平台。</p><p>Platform is a vague word. It could mean an operating system, or a programming language, or a “framework” built on top of a programming language. It implies something that both supports and limits, like the foundation of a house.<br>“平台” 是个模糊的概念，它可能指操作系统、编程语言，也可能指基于编程语言构建的 “框架”。它兼具 “支撑” 与 “限制” 的属性，就像房子的地基 —— 地基决定了房子能建多高、多稳固，也限定了建造的可能性。</p><p>The scary thing about platforms is that there are always some that seem to outsiders to be fine, responsible choices and yet, like Windows in the 90s, will destroy you if you choose them. Java applets were probably the most spectacular example. This was supposed to be the new way of delivering applications. Presumably it killed just about 100% of the startups who believed that.<br>技术平台的可怕之处在于：总有一些平台在门外汉看来是 “稳妥、合理” 的选择，但实际上却会像 90 年代的 Windows（用于服务器端）一样，一旦选择就会让你陷入绝境。Java 小程序（Java applets）或许是最典型的例子 —— 它曾被认为是交付应用程序的新方式，但几乎所有坚信这一点并采用它的初创公司，最终都失败了。</p><p>How do you pick the right platforms? The usual way is to hire good programmers and let them choose. But there is a trick you could use if you’re not a programmer: visit a top computer science department and see what they use in research projects.<br>如何选择正确的技术平台？常规做法是招聘优秀的程序员，让他们来做决定。但如果你不是程序员，也有一个小技巧：去顶尖大学的计算机科学系看看，他们在科研项目中使用的是什么平台。</p><h2 id="Slowness-in-Launching"><a href="#Slowness-in-Launching" class="headerlink" title="Slowness in Launching"></a><strong>Slowness in Launching</strong></h2><h2 id="产品上线过慢"><a href="#产品上线过慢" class="headerlink" title="产品上线过慢"></a><strong>产品上线过慢</strong></h2><p>Companies of all sizes have a hard time getting software done. It’s intrinsic to the medium; software is always 85% done. It takes an effort of will to push through this and get something released to users. [3]<br>无论公司规模大小，完成软件开发都并非易事。这是软件行业的固有属性 —— 软件似乎永远处于 “完成了 85%” 的状态。要突破这种困境、将产品发布给用户，需要强大的意志力。[3]</p><p>Startups make all kinds of excuses for delaying their launch. Most are equivalent to the ones people use for procrastinating in everyday life. There’s something that needs to happen first. Maybe. But if the software were 100% finished and ready to launch at the push of a button, would they still be waiting?<br>初创公司为推迟上线找各种借口，这些借口和人们日常生活中拖延时用的理由大同小异，比如 “还有件事得先做完”。或许确实有需要优先处理的事，但假设软件已经 100% 完成、按下按钮就能上线，他们就真的会立刻发布吗？</p><p>One reason to launch quickly is that it forces you to actually finish some quantum of work. Nothing is truly finished till it’s released; you can see that from the rush of work that’s always involved in releasing anything, no matter how finished you thought it was. The other reason you need to launch is that it’s only by bouncing your idea off users that you fully understand it.<br>尽快上线的一个原因是，它能迫使你真正完成一部分实质性工作。任何产品在发布前都不算 “真正完成”—— 即便你觉得已经完工，发布前总会涌现出一堆紧急工作，这一点足以证明。另一个原因是：只有让用户接触你的产品、反馈想法，你才能真正理解自己做的东西到底是什么。</p><p>Several distinct problems manifest themselves as delays in launching: working too slowly; not truly understanding the problem; fear of having to deal with users; fear of being judged; working on too many different things; excessive perfectionism. Fortunately you can combat all of them by the simple expedient of forcing yourself to launch something fairly quickly.<br>多种不同的问题都会表现为 “上线延迟”：工作效率过低、未真正理解要解决的问题、害怕与用户打交道、担心被他人评判、同时推进太多项目、过度追求完美。幸运的是，有一种简单的办法能解决所有这些问题 —— 强迫自己尽快发布一个可用的版本。</p><h2 id="Launching-Too-Early"><a href="#Launching-Too-Early" class="headerlink" title="Launching Too Early"></a><strong>Launching Too Early</strong></h2><h2 id="产品上线过早"><a href="#产品上线过早" class="headerlink" title="产品上线过早"></a><strong>产品上线过早</strong></h2><p>Launching too slowly has probably killed a hundred times more startups than launching too fast, but it is possible to launch too fast. The danger here is that you ruin your reputation. You launch something, the early adopters try it out, and if it’s no good they may never come back.<br>虽然 “上线过慢” 导致的初创公司失败案例，可能是 “上线过早” 的一百倍，但 “上线过早” 确实也是可能发生的问题。其风险在于损害公司声誉：你发布了产品，早期用户尝试后发现体验糟糕，他们可能就再也不会回来了。</p><p>So what’s the minimum you need to launch? We suggest startups think about what they plan to do, identify a core that’s both (a) useful on its own and (b) something that can be incrementally expanded into the whole project, and then get that done as soon as possible.<br>那么，产品上线的 “最低标准” 是什么？我们建议初创公司先明确自己的目标，找到一个 “核心功能”—— 这个功能需要同时满足两个条件：（a）单独使用时就有价值；（b）可以在此基础上逐步扩展成完整项目。然后尽快完成这个核心功能并上线。</p><p>This is the same approach I (and many other programmers) use for writing software. Think about the overall goal, then start by writing the smallest subset of it that does anything useful. If it’s a subset, you’ll have to write it anyway, so in the worst case you won’t be wasting your time. But more likely you’ll find that implementing a working subset is both good for morale and helps you see more clearly what the rest should do.<br>这也是我（以及许多其他程序员）编写软件时会用到的方法：先明确整体目标，然后从 “最小可用子集” 开始写 —— 这个子集要能实现某个有用的功能。既然它是整体的一部分，迟早都要开发，所以即便情况最差，你也没有浪费时间。而且更常见的情况是，实现这个可用子集不仅能提振团队士气，还能帮你更清晰地规划后续功能的开发方向。</p><p>The early adopters you need to impress are fairly tolerant. They don’t expect a newly launched product to do everything; it just has to do something.<br>你需要争取的早期用户其实相当宽容。他们不指望一个刚上线的产品能做到面面俱到，只要它能解决某个具体问题、有实际用处就够了。</p><h2 id="Having-No-Specific-User-in-Mind"><a href="#Having-No-Specific-User-in-Mind" class="headerlink" title="Having No Specific User in Mind"></a><strong>Having No Specific User in Mind</strong></h2><h2 id="心中没有明确的目标用户"><a href="#心中没有明确的目标用户" class="headerlink" title="心中没有明确的目标用户"></a><strong>心中没有明确的目标用户</strong></h2><p>You can’t build things users like without understanding them. I mentioned earlier that the most successful startups seem to have begun by trying to solve a problem their founders had. Perhaps there’s a rule here: perhaps you create wealth in proportion to how well you understand the problem you’re solving, and the problems you understand best are your own. [4]<br>不理解用户，就不可能做出用户喜欢的产品。我之前提到过，最成功的初创公司似乎都是从解决创始人自己遇到的问题起步的。或许这里有一条规律：你创造的价值，与你对 “所解决问题” 的理解深度成正比；而你最了解的问题，必然是自己亲身经历的问题。[4]</p><p>That’s just a theory. What’s not a theory is the converse: if you’re trying to solve problems you don’t understand, you’re hosed.<br>这只是一个理论，但反过来的结论却绝非理论：如果你试图解决自己不理解的问题，那你肯定会失败。</p><p>And yet a surprising number of founders seem willing to assume that someone, they’re not sure exactly who, will want what they’re building. Do the founders want it? No, they’re not the target market. Who is? Teenagers. People interested in local events (that one is a perennial tarpit). Or “business” users. What business users? Gas stations? Movie studios? Defense contractors?<br>然而，数量惊人的创始人似乎愿意这样假设：总会有人（但他们说不清具体是谁）想要自己正在开发的产品。创始人自己需要吗？不需要，因为他们不是目标用户。那目标用户是谁？“青少年”？“对本地活动感兴趣的人”（这个群体一直是创业陷阱）？还是 “企业用户”？—— 但具体是哪类企业用户？加油站？电影公司？还是国防承包商？</p><p>You can of course build something for users other than yourself. We did. But you should realize you’re stepping into dangerous territory. You’re flying on instruments, in effect, so you should (a) consciously shift gears, instead of assuming you can rely on your intuitions as you ordinarily would, and (b) look at the instruments.<br>当然，你也可以为 “非自己所属群体” 的用户开发产品 —— 我们之前就是这么做的。但你必须意识到，这相当于踏入了危险地带。本质上，你就像在依靠仪器驾驶飞机（而非凭直觉），因此你需要：（a）有意识地改变思路，不能再像以往那样依赖自己的直觉；（b）密切关注 “仪器数据”。</p><p>In this case the instruments are the users. When designing for other people you have to be empirical. You can no longer guess what will work; you have to find users and measure their responses. So if you’re going to make something for teenagers or “business” users or some other group that doesn’t include you, you have to be able to talk some specific ones into using what you’re making. If you can’t, you’re on the wrong track.<br>在这里，“仪器数据” 就是用户反馈。为他人设计产品时，你必须采用实证方法 —— 不能再靠猜测判断 “什么可行”，而要找到具体的目标用户，收集并分析他们的反馈。因此，如果你要为青少年、“企业用户” 或其他不包含你自身的群体开发产品，就必须能说服该群体中的一些具体用户来使用你的产品。如果做不到这一点，那你就走偏了。</p><h2 id="Raising-Too-Little-Money"><a href="#Raising-Too-Little-Money" class="headerlink" title="Raising Too Little Money"></a><strong>Raising Too Little Money</strong></h2><h2 id="融资过少"><a href="#融资过少" class="headerlink" title="融资过少"></a><strong>融资过少</strong></h2><p>Most successful startups take funding at some point. Like having more than one founder, it seems a good bet statistically. How much should you take, though?<br>大多数成功的初创公司都会在某个阶段进行融资。从数据上看，这和 “拥有多位创始人” 一样，是个大概率能带来积极结果的选择。但问题是，该融多少钱？</p><p>Startup funding is measured in time. Every startup that isn’t profitable (meaning nearly all of them, initially) has a certain amount of time left before the money runs out and they have to stop. This is sometimes referred to as runway, as in “How much runway do you have left?” It’s a good metaphor because it reminds you that when the money runs out you’re going to be airborne or dead.<br>初创公司的融资额度，本质上是用 “时间” 来衡量的。每一家尚未盈利的初创公司（几乎所有初创公司初期都是如此），在资金耗尽、不得不停止运营前，都有一段 “剩余时间”。这段时间有时被称为 “跑道”（runway），比如人们会问 “你们还剩多少跑道？” 这个比喻很贴切，因为它提醒你：当资金（跑道）耗尽时，你要么已经 “起飞”（实现盈利或进入下一阶段），要么就会 “坠毁”（公司倒闭）。</p><p>Too little money means not enough to get airborne. What airborne means depends on the situation. Usually you have to advance to a visibly higher level: if all you have is an idea, a working prototype; if you have a prototype, launching; if you’re launched, significant growth. It depends on investors, because until you’re profitable that’s who you have to convince.<br>融资过少，意味着 “跑道” 不够长，不足以让你 “起飞”。“起飞” 的具体定义因公司阶段而异：如果只有想法，那 “起飞” 就是做出可用的原型；如果已有原型，那 “起飞” 就是产品上线；如果产品已上线，那 “起飞” 就是实现显著增长。这一切都与投资者有关，因为在实现盈利前，你必须说服他们继续投资。</p><p>So if you take money from investors, you have to take enough to get to the next step, whatever that is. [5] Fortunately you have some control over both how much you spend and what the next step is. We advise startups to set both low, initially: spend practically nothing, and make your initial goal simply to build a solid prototype. This gives you maximum flexibility.<br>因此，如果你从投资者那里融资，就必须融到足够支撑公司走到 “下一步” 的资金，无论这 “下一步” 具体是什么。[5] 幸运的是，你对 “资金支出速度” 和 “下一步目标” 都有一定控制权。我们建议初创公司初期将这两者都设得低一些：尽可能压缩开支，初期目标仅定为做出一个可靠的原型。这样能为你保留最大的灵活性。</p><h2 id="Spending-Too-Much"><a href="#Spending-Too-Much" class="headerlink" title="Spending Too Much"></a><strong>Spending Too Much</strong></h2><h2 id="开支过高"><a href="#开支过高" class="headerlink" title="开支过高"></a><strong>开支过高</strong></h2><p>It’s hard to distinguish spending too much from raising too little. If you run out of money, you could say either was the cause. The only way to decide which to call it is by comparison with other startups. If you raised five million and ran out of money, you probably spent too much.<br>“开支过高” 和 “融资过少” 很难区分 —— 如果公司资金耗尽，你既可以说是 “融少了”，也可以说是 “花多了”。要判断到底是哪一种情况，唯一的方法是和其他初创公司对比：如果你融了 500 万美元却还是没钱了，那很可能是开支过高。</p><p>Burning through too much money is not as common as it used to be. Founders seem to have learned that lesson. Plus it keeps getting cheaper to start a startup. So as of this writing few startups spend too much. None of the ones we’ve funded have. (And not just because we make small investments; many have gone on to raise further rounds.)<br>如今，“烧钱过快” 已不像过去那么常见了 —— 创始人似乎已经吸取了教训。此外，创办初创公司的成本也在不断降低。因此，在撰写本文时，很少有初创公司会出现开支过高的问题。我们投资过的公司中，没有一家出现过这种情况（这不仅仅是因为我们投资金额少，很多公司后来还成功完成了后续轮次的融资）。</p><p>The classic way to burn through cash is by hiring a lot of people. This bites you twice: in addition to increasing your costs, it slows you down—so money that’s getting consumed faster has to last longer. Most hackers understand why that happens; Fred Brooks explained it in The Mythical Man-Month.<br>烧钱最典型的方式就是大规模招人。这种做法会带来双重打击：一方面增加成本，另一方面拖慢工作进度 —— 这就导致 “消耗速度变快的资金”，反而需要支撑更久的时间。大多数程序员都明白背后的原因，弗雷德・布鲁克斯（Fred Brooks）在《人月神话》（The Mythical Man-Month）一书中早已对此做出过解释。</p><p>We have three general suggestions about hiring: (a) don’t do it if you can avoid it, (b) pay people with equity rather than salary, not just to save money, but because you want the kind of people who are committed enough to prefer that, and (c) only hire people who are either going to write code or go out and get users, because those are the only things you need at first.<br>关于招聘，我们有三条通用建议：（a）能不招就不招；（b）尽量用股权而非薪水支付报酬 —— 这不仅是为了省钱，更因为你需要的是那些对公司足够投入、愿意接受股权的人；（c）只招两类人：要么是会写代码的，要么是能开拓用户的，因为初创初期只需要这两类人。</p><h2 id="Raising-Too-Much-Money"><a href="#Raising-Too-Much-Money" class="headerlink" title="Raising Too Much Money"></a><strong>Raising Too Much Money</strong></h2><h2 id="融资过多"><a href="#融资过多" class="headerlink" title="融资过多"></a><strong>融资过多</strong></h2><p>It’s obvious how too little money could kill you, but is there such a thing as having too much?<br>融资过少会导致失败，这一点显而易见，但 “融资过多” 也会成为问题吗？</p><p>Yes and no. The problem is not so much the money itself as what comes with it. As one VC who spoke at Y Combinator said, “Once you take several million dollars of my money, the clock is ticking.” If VCs fund you, they’re not going to let you just put the money in the bank and keep operating as two guys living on ramen. They want that money to go to work. [6] At the very least you’ll move into proper office space and hire more people. That will change the atmosphere, and not entirely for the better. Now most of your people will be employees rather than founders. They won’t be as committed; they’ll need to be told what to do; they’ll start to engage in office politics.<br>答案是 “既是也不是”。问题不在于钱本身，而在于钱带来的附加影响。正如一位在 Y Combinator 分享过的风投所说：“一旦你拿了我几百万美元，时钟就开始滴答作响了。” 风投给你钱，不会允许你把钱存进银行，继续像两个靠泡面度日的创业者那样低调运营。他们希望这笔钱 “动起来”[6]—— 至少你得搬进像样的办公室、招更多人。这会改变公司氛围，而且绝非全是好事：现在公司里大部分人是员工而非创始人，他们不会像创始人那样投入，需要别人告知该做什么，还会开始搞办公室政治。</p><p>When you raise a lot of money, your company moves to the suburbs and has kids.<br>融资过多，就好比你的公司 “搬到了郊区、有了孩子”—— 变得臃肿、不再灵活，承担起了不必要的负担。</p><p>Perhaps more dangerously, once you take a lot of money it gets harder to change direction. Suppose your initial plan was to sell something to companies. After taking VC money you hire a sales force to do that. What happens now if you realize you should be making this for consumers instead of businesses? That’s a completely different kind of selling. What happens, in practice, is that you don’t realize that. The more people you have, the more you stay pointed in the same direction.<br>更危险的或许是，融资过多会让公司难以转向。假设你最初计划向企业销售产品，拿了风投的钱后，你雇了一支销售团队专门做企业客户。可后来你发现，产品其实更适合面向消费者 —— 这需要一套完全不同的销售模式，你该怎么办？实际情况往往是，你根本意识不到需要转向：公司人越多，就越难偏离原来的方向。</p><p>Another drawback of large investments is the time they take. The time required to raise money grows with the amount. [7] When the amount rises into the millions, investors get very cautious. VCs never quite say yes or no; they just engage you in an apparently endless conversation. Raising VC scale investments is thus a huge time sink — more work, probably, than the startup itself. And you don’t want to be spending all your time talking to investors while your competitors are spending theirs building things.<br>大额融资的另一个弊端是耗时过长。融资所需的时间会随着金额增加而增加 [7]。当金额达到数百万美元时，投资者会变得异常谨慎 —— 他们从不会直接说 “行” 或 “不行”，只会和你进行看似没完没了的沟通。因此，争取风投级别的大额融资会耗费大量时间，其工作量甚至可能超过初创公司本身的业务。你肯定不希望自己整天和投资者开会，而竞争对手却在专心打造产品。</p><p>We advise founders who go on to seek VC money to take the first reasonable deal they get. If you get an offer from a reputable firm at a reasonable valuation with no unusually onerous terms, just take it and get on with building the company. [8] Who cares if you could get a 30% better deal elsewhere? Economically, startups are an all-or-nothing game. Bargain-hunting among investors is a waste of time.<br>我们建议那些寻求风投融资的创始人，遇到第一个合理的报价就接受。如果有知名风投给出合理估值，且条款没有特别苛刻，就接受它，然后专心经营公司 [8]。哪怕别处可能有高出 30% 的报价，又有什么关系呢？从经济角度看，初创公司的成功本就是 “全有或全无” 的游戏，在投资者之间 “货比三家” 纯粹是浪费时间。</p><h2 id="Poor-Investor-Management"><a href="#Poor-Investor-Management" class="headerlink" title="Poor Investor Management"></a><strong>Poor Investor Management</strong></h2><h2 id="投资者管理不当"><a href="#投资者管理不当" class="headerlink" title="投资者管理不当"></a><strong>投资者管理不当</strong></h2><p>As a founder, you have to manage your investors. You shouldn’t ignore them, because they may have useful insights. But neither should you let them run the company. That’s supposed to be your job. If investors had sufficient vision to run the companies they fund, why didn’t they start them?<br>作为创始人，你必须管理好投资者。不能忽视他们，因为他们可能提供有价值的见解；但也不能让他们掌控公司 —— 运营公司本是你的职责。如果投资者有能力运营自己投资的公司，那他们为什么不自己创业呢？</p><p>Pissing off investors by ignoring them is probably less dangerous than caving in to them. In our startup, we erred on the ignoring side. A lot of our energy got drained away in disputes with investors instead of going into the product. But this was less costly than giving in, which would probably have destroyed the company. If the founders know what they’re doing, it’s better to have half their attention focused on the product than the full attention of investors who don’t.<br>忽视投资者而惹他们不快，可能比向他们妥协更安全。我们自己创业时，就犯过 “忽视投资者” 的错 —— 大量精力消耗在与投资者的争执上，而非投入到产品中。但即便如此，也比妥协要好：妥协很可能会毁掉公司。如果创始人清楚自己在做什么，哪怕他们只有一半精力放在产品上，也比让不懂业务的投资者全权掌控要好。</p><p>How hard you have to work on managing investors usually depends on how much money you’ve taken. When you raise VC-scale money, the investors get a great deal of control. If they have a board majority, they’re literally your bosses. In the more common case, where founders and investors are equally represented and the deciding vote is cast by neutral outside directors, all the investors have to do is convince the outside directors and they control the company.<br>管理投资者的难度，通常取决于你融了多少钱。如果融到风投级别的资金，投资者会获得很大的控制权：如果他们在董事会占多数席位，那他们就是你事实上的老板。更常见的情况是，创始人与投资者在董事会席位对等，关键投票权掌握在中立的外部董事手中 —— 此时投资者只需说服外部董事，就能掌控公司。</p><p>If things go well, this shouldn’t matter. So long as you seem to be advancing rapidly, most investors will leave you alone. But things don’t always go smoothly in startups. Investors have made trouble even for the most successful companies. One of the most famous examples is Apple, whose board made a nearly fatal blunder in firing Steve Jobs. Apparently even Google got a lot of grief from their investors early on.<br>如果一切顺利，控制权问题可能无关紧要 —— 只要公司发展势头迅猛，大多数投资者会让你自主运营。但初创公司的发展不会总是一帆风顺，即便最成功的公司也曾因投资者而陷入麻烦。最著名的例子莫过于苹果：当年董事会解雇史蒂夫・乔布斯（Steve Jobs），几乎是致命的错误。显然，谷歌早期也因投资者而备受困扰。</p><h2 id="Sacrificing-Users-to-Supposed-Profit"><a href="#Sacrificing-Users-to-Supposed-Profit" class="headerlink" title="Sacrificing Users to (Supposed) Profit"></a><strong>Sacrificing Users to (Supposed) Profit</strong></h2><h2 id="为（所谓的）利润牺牲用户"><a href="#为（所谓的）利润牺牲用户" class="headerlink" title="为（所谓的）利润牺牲用户"></a><strong>为（所谓的）利润牺牲用户</strong></h2><p>When I said at the beginning that if you make something users want, you’ll be fine, you may have noticed I didn’t mention anything about having the right business model. That’s not because making money is unimportant. I’m not suggesting that founders start companies with no chance of making money in the hope of unloading them before they tank. The reason we tell founders not to worry about the business model initially is that making something people want is so much harder.<br>我在文章开头提到 “只要做出用户想要的产品，就大概率能成功”，你可能注意到了，我没提 “正确的商业模式”。这并非因为赚钱不重要 —— 我不是建议创始人创办 “没有盈利可能、只想在倒闭前转手” 的公司。我们让创始人初期不用纠结商业模式，核心原因是 “做出用户想要的产品” 本身已经足够困难。</p><p>I don’t know why it’s so hard to make something people want. It seems like it should be straightforward. But you can tell it must be hard by how few startups do it.<br>我不知道为什么 “做出用户想要的产品” 会这么难 —— 按理说这应该很直接。但从 “能做到这一点的初创公司寥寥无几” 就能看出，这件事确实极具挑战性。</p><p>Because making something people want is so much harder than making money from it, you should leave business models for later, just as you’d leave some trivial but messy feature for version 2. In version 1, solve the core problem. And the core problem in a startup is how to create wealth (&#x3D; how much people want something x the number who want it), not how to convert that wealth into money.<br>既然 “做出用户想要的产品” 比 “从中赚钱” 难得多，就应该把商业模式的问题留到后面 —— 就像把那些琐碎但复杂的功能放到 2.0 版本再开发一样。1.0 版本的核心任务是解决核心问题，而初创公司的核心问题是 “创造价值”（价值 &#x3D; 用户对产品的需求程度 × 有需求的用户数量），而非 “将价值转化为利润”。</p><p>The companies that win are the ones that put users first. Google, for example. They made search work, then worried about how to make money from it. And yet some startup founders still think it’s irresponsible not to focus on the business model from the beginning. They’re often encouraged in this by investors whose experience comes from less malleable industries.<br>成功的公司都是把用户放在首位的。比如谷歌：他们先做好了搜索功能，之后才考虑如何从中盈利。但有些初创公司创始人仍认为 “初期不关注商业模式就是不负责任”，而这种想法往往是被那些 “来自灵活性较低行业” 的投资者灌输的。</p><p>It is irresponsible not to think about business models. It’s just ten times more irresponsible not to think about the product.<br>不考虑商业模式确实不负责任，但不关注产品的不负责任程度，是前者的十倍。</p><h2 id="Not-Wanting-to-Get-Your-Hands-Dirty"><a href="#Not-Wanting-to-Get-Your-Hands-Dirty" class="headerlink" title="Not Wanting to Get Your Hands Dirty"></a><strong>Not Wanting to Get Your Hands Dirty</strong></h2><h2 id="不愿亲力亲为做-“脏活累活”"><a href="#不愿亲力亲为做-“脏活累活”" class="headerlink" title="不愿亲力亲为做 “脏活累活”"></a><strong>不愿亲力亲为做 “脏活累活”</strong></h2><p>Nearly all programmers would rather spend their time writing code and have someone else handle the messy business of extracting money from it. And not just the lazy ones. Larry and Sergey apparently felt this way too at first. After developing their new search algorithm, the first thing they tried was to get some other company to buy it.<br>几乎所有程序员都宁愿把时间花在写代码上，让别人去处理 “从产品中赚钱” 这种繁琐的事 —— 不光是懒的程序员如此，拉里・佩奇（Larry）和谢尔盖・布林（Sergey）最初显然也有这种想法。他们开发出全新的搜索算法后，首先尝试的是让其他公司收购这个技术，而非自己创业。</p><p>Start a company? Yech. Most hackers would rather just have ideas. But as Larry and Sergey found, there’s not much of a market for ideas. No one trusts an idea till you embody it in a product and use that to grow a user base. Then they’ll pay big time.<br>自己创办公司？太麻烦了。大多数程序员宁愿只负责想出点子。但正如拉里和谢尔盖发现的那样，“点子” 本身并没有太大市场 —— 除非你把点子转化为产品，并用产品积累起用户群，否则没人会相信它的价值。只有到那时，别人才会愿意花大价钱。</p><p>Maybe this will change, but I doubt it will change much. There’s nothing like users for convincing acquirers. It’s not just that the risk is decreased. The acquirers are human, and they have a hard time paying a bunch of young guys millions of dollars just for being clever. When the idea is embodied in a company with a lot of users, they can tell themselves they’re buying the users rather than the cleverness, and this is easier for them to swallow. [9]<br>这种情况或许会改变，但我认为不会有太大变化。没有什么比 “用户” 更能说服收购方了 —— 这不仅是因为风险降低了，还因为收购方也是人：让他们给几个年轻人几百万美元，只因为 “他们很聪明”，这很难让他们接受。但如果 “点子” 已经转化为一家拥有大量用户的公司，他们就能说服自己 “是在收购用户，而非为聪明买单”，这样心理上更容易接受 [9]。</p><p>If you’re going to attract users, you’ll probably have to get up from your computer and go find some. It’s unpleasant work, but if you can make yourself do it you have a much greater chance of succeeding. In the first batch of startups we funded, in the summer of 2005, most of the founders spent all their time building their applications. But there was one who was away half the time talking to executives at cell phone companies, trying to arrange deals. Can you imagine anything more painful for a hacker? [10] But it paid off, because this startup seems the most successful of that group by an order of magnitude.<br>要吸引用户，你很可能得离开电脑，亲自去开拓。这是件不愉快的事，但如果你能强迫自己去做，成功的概率会大得多。2005 年夏天，我们投资的第一批初创公司中，大多数创始人都把所有时间花在开发产品上。但有一位创始人却花一半时间去和手机公司的高管谈合作 —— 对程序员来说，还有比这更痛苦的事吗 [10]？但这种付出得到了回报：这家初创公司成了那批公司中最成功的一个，领先优势甚至不止一个量级。</p><p>If you want to start a startup, you have to face the fact that you can’t just hack. At least one hacker will have to spend some of the time doing business stuff.<br>如果你想创办初创公司，就必须接受一个事实：不能只埋头写代码。至少要有一位程序员，得抽出部分时间去处理商务相关的事务。</p><h2 id="Fights-Between-Founders"><a href="#Fights-Between-Founders" class="headerlink" title="Fights Between Founders"></a><strong>Fights Between Founders</strong></h2><h2 id="创始人之间产生矛盾"><a href="#创始人之间产生矛盾" class="headerlink" title="创始人之间产生矛盾"></a><strong>创始人之间产生矛盾</strong></h2><p>Fights between founders are surprisingly common. About 20% of the startups we’ve funded have had a founder leave. It happens so often that we’ve reversed our attitude to vesting. We still don’t require it, but now we advise founders to vest so there will be an orderly way for people to quit.<br>创始人之间产生矛盾，比想象中更常见。在我们投资过的初创公司中，约 20% 都出现过创始人离职的情况。这种事太频繁了，以至于我们对 “股权兑现”（vesting，指创始人需在公司工作一定时间才能完全拥有股权）的态度都发生了转变：我们仍不强制要求，但现在会建议创始人设置股权兑现机制，以便有人离职时能有一个有序的处理方式。</p><p>A founder leaving doesn’t necessarily kill a startup, though. Plenty of successful startups have had that happen. [11] Fortunately it’s usually the least committed founder who leaves. If there are three founders and one who was lukewarm leaves, big deal. If you have two and one leaves, or a guy with critical technical skills leaves, that’s more of a problem. But even that is survivable. Blogger got down to one person, and they bounced back.<br>不过，创始人离职并不一定会导致初创公司失败。很多成功的初创公司都经历过创始人离职的情况 [11]。幸运的是，通常离职的是投入度最低的创始人：如果有三位创始人，其中一位本来就态度冷淡的人离开，影响并不大；但如果是两位创始人中一人离职，或是掌握核心技术的创始人离开，问题就会更棘手。即便如此，公司仍有可能挺过来 —— 博客平台 Blogger 曾一度只剩下一位员工，最终还是实现了反弹。</p><p>Most of the disputes I’ve seen between founders could have been avoided if they’d been more careful about who they started a company with. Most disputes are not due to the situation but the people. Which means they’re inevitable. And most founders who’ve been burned by such disputes probably had misgivings, which they suppressed, when they started the company. Don’t suppress misgivings. It’s much easier to fix problems before the company is started than after. So don’t include your housemate in your startup because he’d feel left out otherwise. Don’t start a company with someone you dislike because they have some skill you need and you worry you won’t find anyone else. The people are the most important ingredient in a startup, so don’t compromise there.<br>我见过的大多数创始人矛盾，其实都可以通过 “更谨慎地选择创业伙伴” 来避免。大多数矛盾的根源不在于外部情况，而在于人本身 —— 这意味着，如果伙伴选错了，矛盾早晚会爆发。而且，大多数因创始人矛盾吃过亏的人，在创业初期很可能就有过疑虑，只是当时压下去了。千万不要压抑这种疑虑：在公司成立前解决问题，远比成立后容易得多。因此，不要因为 “怕室友觉得被冷落” 就拉他一起创业；也不要因为 “对方有你需要的技能，又担心找不到别人”，就和自己不喜欢的人合伙。人是初创公司最重要的组成部分，在这件事上绝不能妥协。</p><h2 id="A-Half-Hearted-Effort"><a href="#A-Half-Hearted-Effort" class="headerlink" title="A Half-Hearted Effort"></a><strong>A Half-Hearted Effort</strong></h2><h2 id="投入三心二意"><a href="#投入三心二意" class="headerlink" title="投入三心二意"></a><strong>投入三心二意</strong></h2><p>The failed startups you hear most about are the spectacular flameouts. Those are actually the elite of failures. The most common type is not the one that makes spectacular mistakes, but the one that doesn’t do much of anything — the one we never even hear about, because it was some project a couple guys started on the side while working on their day jobs, but which never got anywhere and was gradually abandoned.<br>你听得多的初创公司失败案例，都是那些 “轰轰烈烈的崩盘”，但这类其实是 “失败中的精英”。最常见的失败类型，不是犯了惊天动地的错误，而是 “无所作为”—— 这类公司你根本不会听说，因为它们只是几个人在全职工作之余搞的副业项目，既没做出什么成果，最后也慢慢不了了之。</p><p>Statistically, if you want to avoid failure, it would seem like the most important thing is to quit your day job. Most founders of failed startups don’t quit their day jobs, and most founders of successful ones do. If startup failure were a disease, the CDC would be issuing bulletins warning people to avoid day jobs.<br>从数据上看，若想避免失败，最重要的似乎是辞去全职工作。大多数失败初创公司的创始人没有辞职，而大多数成功初创公司的创始人都辞了。要是初创公司失败是一种疾病，美国疾病控制与预防中心（CDC）恐怕都会发布公告，警告人们 “避免从事全职工作”。</p><p>Does that mean you should quit your day job? Not necessarily. I’m guessing here, but I’d guess that many of these would-be founders may not have the kind of determination it takes to start a company, and that in the back of their minds, they know it. The reason they don’t invest more time in their startup is that they know it’s a bad investment. [12]<br>这是不是意味着你必须辞去全职工作？不一定。我推测，很多 “准创始人” 可能本身就没有创业所需的决心，而且他们自己心里也清楚这一点。他们之所以不在创业项目上投入更多时间，是因为潜意识里知道这是一笔 “糟糕的投资”[12]。</p><p>I’d also guess there’s some band of people who could have succeeded if they’d taken the leap and done it full-time, but didn’t. I have no idea how wide this band is, but if the winner&#x2F;borderline&#x2F;hopeless progression has the sort of distribution you’d expect, the number of people who could have made it, if they’d quit their day job, is probably an order of magnitude larger than the number who do make it. [13]<br>我还推测，有一群人 “本可以成功”—— 只要他们勇敢迈出一步、全职投入创业，但他们最终没有这样做。我不知道这个群体有多大，但如果 “成功 &#x2F; 临界 &#x2F; 无望” 的分布符合常规规律，那么 “若辞去全职工作就可能成功” 的人数，大概会比 “实际成功” 的人数多一个量级 [13]。</p><p>If that’s true, most startups that could succeed fail because the founders don’t devote their whole efforts to them. That certainly accords with what I see out in the world. Most startups fail because they don’t make something people want, and the reason most don’t is that they don’t try hard enough.<br>如果这种推测成立，那么大多数 “本可成功” 的初创公司最终失败，都是因为创始人没有全身心投入。这与我在现实中看到的情况完全一致：大多数初创公司失败，是因为没做出用户想要的产品；而没做出的原因，大多是投入的努力不够。</p><p>In other words, starting startups is just like everything else. The biggest mistake you can make is not to try hard enough. To the extent there’s a secret to success, it’s not to be in denial about that.<br>换句话说，创业和做其他任何事都一样：最大的错误就是努力不够。如果说成功有什么秘诀，那就是别否认这个事实。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] This is not a complete list of the causes of failure, just those you can control. There are also several you can’t, notably ineptitude and bad luck.<br>[1] 本文并未列出所有失败原因，仅涵盖那些你能控制的因素。还有一些因素是你无法控制的，尤其是能力不足和运气不佳。</p><p>[2] Ironically, one variant of the Facebook that might work is a facebook exclusively for college students.<br>[2] 颇具讽刺意味的是，Facebook 的一个潜在可行变体，或许是 “仅限大学生使用的社交平台”。</p><p>[3] Steve Jobs tried to motivate people by saying “Real artists ship.” This is a fine sentence, but unfortunately not true. Many famous works of art are unfinished. It’s true in fields that have hard deadlines, like architecture and filmmaking, but even there people tend to be tweaking stuff till it’s yanked out of their hands.<br>[3] 史蒂夫・乔布斯曾用 “真正的艺术家总会交付作品”（Real artists ship）来激励员工。这句话说得很好，但可惜并不完全正确 —— 很多著名的艺术作品都是未完成的。在有严格截止日期的领域（如建筑、电影制作），这句话或许成立，但即便是在这些领域，人们也总想着修改，直到作品被强行从手中夺走才罢休。</p><p>[4] There’s probably also a second factor: startup founders tend to be at the leading edge of technology, so problems they face are probably especially valuable.<br>[4] 可能还有第二个因素：初创公司创始人往往处于技术前沿，因此他们遇到的问题可能具有特别高的价值。</p><p>[5] You should take more than you think you’ll need, maybe 50% to 100% more, because software takes longer to write and deals longer to close than you expect.<br>[5] 融资时，你应该融到比预期多的钱，大概多 50% 到 100%—— 因为软件开发所需的时间、达成合作所需的时间，往往比你预想的要长。</p><p>[6] Since people sometimes call us VCs, I should add that we’re not. VCs invest large amounts of other people’s money. We invest small amounts of our own, like angel investors.<br>[6] 由于有时会有人把我们称为风投（VC），这里需要说明：我们并非风投。风投会用大量他人的资金进行投资，而我们像天使投资人一样，用自己的小额资金投资。</p><p>[7] Not linearly of course, or it would take forever to raise five million dollars. In practice it just feels like it takes forever.<br>Though if you include the cases where VCs don’t invest, it would literally take forever in the median case. And maybe we should, because the danger of chasing large investments is not just that they take a long time. That’s the best case. The real danger is that you’ll expend a lot of time and get nothing.<br>[7] 当然，融资时间与金额并非线性关系，否则融 500 万美元就要花上一辈子了。但实际体验中，感觉就像要花一辈子。<br>不过，如果把 “风投最终没有投资” 的情况也算进去，中位数情况下，融资时间确实相当于 “无限长”。而且我们确实应该考虑这种情况，因为追逐大额融资的风险不仅在于耗时久（这已是最好的结果），真正的风险是你投入大量时间，最终却一无所获。</p><p>[8] Some VCs will offer you an artificially low valuation to see if you have the balls to ask for more. It’s lame that VCs play such games, but some do. If you’re dealing with one of those you should push back on the valuation a bit.<br>[8] 有些风投会故意给出过低的估值，试探你是否有勇气要求更高估值。风投玩这种把戏很没水平，但确实有人这么做。如果你遇到这种情况，应该在估值问题上适当争取。</p><p>[9] Suppose YouTube’s founders had gone to Google in 2005 and told them “Google Video is badly designed. Give us $10 million and we’ll tell you all the mistakes you made.” They would have gotten the royal raspberry. Eighteen months later Google paid $1.6 billion for the same lesson, partly because they could then tell themselves that they were buying a phenomenon, or a community, or some vague thing like that.<br>I don’t mean to be hard on Google. They did better than their competitors, who may have now missed the video boat entirely.<br>[9] 试想一下，若 YouTube 的创始人在 2005 年去找谷歌，说 “谷歌视频（Google Video）设计得很糟糕，给我们 1000 万美元，我们就告诉你所有问题”，他们肯定会被无情拒绝。但 18 个月后，谷歌却花 16 亿美元学到了同样的教训 —— 部分原因是，那时他们可以说服自己 “买的是一个现象、一个社区，或是类似的模糊概念”。<br>我并不是要批评谷歌，他们已经比竞争对手做得好很多了 —— 那些竞争对手现在可能已经完全错失了视频领域的机遇。</p><p>[10] Yes, actually: dealing with the government. But phone companies are up there.<br>[10] 实际上，还有更痛苦的事：和政府打交道。但与手机公司打交道，痛苦程度也不相上下。</p><p>[11] Many more than most people realize, because companies don’t advertise this. Did you know Apple originally had three founders?<br>[11] 经历过创始人离职的成功公司，比大多数人想象的要多 —— 因为公司不会主动宣传这种事。你知道苹果最初有三位创始人吗？</p><p>[12] I’m not dissing these people. I don’t have the determination myself. I’ve twice come close to starting startups since Viaweb, and both times I bailed because I realized that without the spur of poverty I just wasn’t willing to endure the stress of a startup.<br>[12] 我并不是在贬低这些人 —— 我自己也没有这样的决心。自从创办 Viaweb 之后，我有两次差点再次创业，但两次都放弃了，因为我意识到，没有 “贫穷” 这个压力，我实在不愿意承受创业的压力。</p><p>[13] So how do you know whether you’re in the category of people who should quit their day job, or the presumably larger one who shouldn’t? I got to the point of saying that this was hard to judge for yourself and that you should seek outside advice, before realizing that that’s what we do. We think of ourselves as investors, but viewed from the other direction Y Combinator is a service for advising people whether or not to quit their day job. We could be mistaken, and no doubt often are, but we do at least bet money on our conclusions.<br>[13] 那么，你如何判断自己属于 “应该辞职创业” 的群体，还是属于 “不应该辞职”（这个群体可能更大）的群体呢？我本来想说，这个问题很难自己判断，应该寻求外部建议 —— 后来才意识到，这正是我们在做的事。我们认为自己是投资人，但从另一个角度看，Y Combinator 其实是在提供 “建议人们是否该辞职创业” 的服务。我们的判断可能会出错，而且无疑经常出错，但至少我们会用资金为自己的结论下注。</p><p>Thanks to Sam Altman, Jessica Livingston, Greg McAdoo, and Robert Morris for reading drafts of this.<br>感谢萨姆・奥尔特曼（Sam Altman）、杰西卡・利文斯顿（Jessica Livingston）、格雷格・麦卡杜（Greg McAdoo）和罗伯特・莫里斯（Robert Morris）审阅本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何向投资者进行演示汇报</title>
    <link href="/2025/09/10/how-to-present-to-investors/"/>
    <url>/2025/09/10/how-to-present-to-investors/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-Present-to-Investors"><a href="#How-to-Present-to-Investors" class="headerlink" title="How to Present to Investors"></a>How to Present to Investors</h1><h1 id="如何向投资者进行演示汇报"><a href="#如何向投资者进行演示汇报" class="headerlink" title="如何向投资者进行演示汇报"></a>如何向投资者进行演示汇报</h1><p>August 2006, rev. April 2007, September 2010<br>2006 年 8 月，2007 年 4 月修订，2010 年 9 月修订</p><p>In a few days it will be Demo Day, when the startups we funded this summer present to investors. Y Combinator funds startups twice a year, in January and June. Ten weeks later we invite all the investors we know to hear them present what they’ve built so far.<br>几天后就是演示日（Demo Day）了，今年夏天我们资助的初创公司将在这一天向投资者进行汇报。Y Combinator（创业孵化器，简称 YC）每年分两次为初创公司提供资金支持，分别在 1 月和 6 月。十周后，我们会邀请所有认识的投资者前来，听这些公司汇报目前已完成的成果。</p><p>Ten weeks is not much time. The average startup probably doesn’t have much to show for itself after ten weeks. But the average startup fails. When you look at the ones that went on to do great things, you find a lot that began with someone pounding out a prototype in a week or two of nonstop work. Startups are a counterexample to the rule that haste makes waste.<br>十周的时间并不长。普通的初创公司在十周后可能没什么拿得出手的成果，但普通的初创公司往往也会失败。当你观察那些最终取得卓越成就的公司时会发现，很多公司最初都是有人连续一两周不眠不休地赶制出原型产品才起步的。初创公司的存在，恰恰是 “欲速则不达” 这一法则的反例。</p><p>(Too much money seems to be as bad for startups as too much time, so we don’t give them much money either.)<br>（过多的资金对初创公司而言，似乎和过多的时间一样有害，因此我们也不会给它们提供大量资金。）</p><p>A week before Demo Day, we have a dress rehearsal called Rehearsal Day. At other Y Combinator events we allow outside guests, but not at Rehearsal Day. No one except the other founders gets to see the rehearsals.<br>演示日的前一周，我们会举办一场名为 “彩排日”（Rehearsal Day）的预演。在 YC 的其他活动中，我们会允许外部嘉宾参与，但彩排日不对外开放。除了其他初创公司的创始人之外，任何人都无法观看彩排。</p><p>The presentations on Rehearsal Day are often pretty rough. But this is to be expected. We try to pick founders who are good at building things, not ones who are slick presenters. Some of the founders are just out of college, or even still in it, and have never spoken to a group of people they didn’t already know.<br>彩排日的演示汇报往往比较粗糙，但这是意料之中的事。我们挑选创始人时，更看重的是他们打造产品的能力，而非流畅的演讲技巧。有些创始人刚大学毕业，甚至还在读大学，从未在一群陌生人面前做过演讲。</p><p>So we concentrate on the basics. On Demo Day each startup will only get ten minutes, so we encourage them to focus on just two goals: (a) explain what you’re doing, and (b) explain why users will want it.<br>因此，我们会把重点放在基础内容上。演示日当天，每家初创公司只有十分钟的汇报时间，所以我们建议它们只聚焦两个核心目标：（1）说明自己在做什么；（2）说明用户为什么会需要这款产品。</p><p>That might sound easy, but it’s not when the speakers have no experience presenting, and they’re explaining technical matters to an audience that’s mostly non-technical.<br>这听起来可能很简单，但对于毫无演讲经验的人来说，要向以非技术人员为主的听众解释技术相关内容，绝非易事。</p><p>This situation is constantly repeated when startups present to investors: people who are bad at explaining, talking to people who are bad at understanding. Practically every successful startup, including stars like Google, presented at some point to investors who didn’t get it and turned them down. Was it because the founders were bad at presenting, or because the investors were obtuse? It’s probably always some of both.<br>初创公司向投资者汇报时，这种情况屡见不鲜：不擅长解释的人，向不擅长理解的人进行说明。几乎所有成功的初创公司，包括谷歌这样的行业标杆，都曾在某个阶段向投资者汇报时，因对方无法理解而遭到拒绝。这是因为创始人不擅长演讲，还是因为投资者反应迟钝？很可能两者都有一定影响。</p><p>At the most recent Rehearsal Day, we four Y Combinator partners found ourselves saying a lot of the same things we said at the last two. So at dinner afterward we collected all our tips about presenting to investors. Most startups face similar challenges, so we hope these will be useful to a wider audience.<br>在最近一次的彩排日中，我们四位 YC 合伙人发现，自己反复强调的很多内容与前两次彩排时并无二致。因此，在之后的晚餐中，我们汇总了所有关于如何向投资者做演示汇报的建议。鉴于大多数初创公司都会面临类似的挑战，我们希望这些建议能对更多人有所帮助。</p><h2 id="Explain-what-you’re-doing"><a href="#Explain-what-you’re-doing" class="headerlink" title="Explain what you’re doing."></a><strong>Explain what you’re doing.</strong></h2><h2 id="说明你在做什么"><a href="#说明你在做什么" class="headerlink" title="说明你在做什么"></a><strong>说明你在做什么</strong></h2><p>Investors’ main question when judging a very early startup is whether you’ve made a compelling product. Before they can judge whether you’ve built a good x, they have to understand what kind of x you’ve built. They will get very frustrated if instead of telling them what you do, you make them sit through some kind of preamble.<br>评估处于极早期阶段的初创公司时，投资者最核心的疑问是：你是否打造出了一款有吸引力的产品。在判断你打造的 “某类产品”（x）是否出色之前，他们首先需要弄清楚你打造的到底是 “哪类产品”（x）。如果你不直接说明自己在做什么，而是让他们耐着性子听冗长的开场白，他们会感到非常不耐烦。</p><p>Say what you’re doing as soon as possible, preferably in the first sentence. “We’re Jeff and Bob and we’ve built an easy to use web-based database. Now we’ll show it to you and explain why people need this.”<br>尽快说明你的业务内容，最好在第一句话就点明。比如：“我们是杰夫和鲍勃，我们打造了一款易于使用的网页版数据库。现在我们将为大家展示这款产品，并说明人们为什么需要它。”</p><p>If you’re a great public speaker you may be able to violate this rule. Last year one founder spent the whole first half of his talk on a fascinating analysis of the limits of the conventional desktop metaphor. He got away with it, but unless you’re a captivating speaker, which most hackers aren’t, it’s better to play it safe.<br>如果你是一位出色的演讲者，或许可以打破这条规则。去年，有一位创始人在演讲的前半段，全程都在深入分析传统桌面隐喻的局限性，内容十分精彩，他也成功地吸引了听众。但除非你是极具感染力的演讲者（大多数技术人员都不是），否则还是稳妥行事为好。</p><h2 id="Get-rapidly-to-demo"><a href="#Get-rapidly-to-demo" class="headerlink" title="Get rapidly to demo."></a><strong>Get rapidly to demo.</strong></h2><h2 id="尽快进入产品演示环节"><a href="#尽快进入产品演示环节" class="headerlink" title="尽快进入产品演示环节"></a><strong>尽快进入产品演示环节</strong></h2><p>This section is now obsolete for YC founders presenting at Demo Day, because Demo Day presentations are now so short that they rarely include much if any demo. They seem to work just as well without, however, which makes me think I was wrong to emphasize demos so much before.<br>对于要在 YC 演示日进行汇报的创始人来说，本节内容现已不再适用。因为如今演示日的汇报时间极短，几乎不会包含产品演示环节，即便有，内容也非常有限。不过，没有演示环节似乎也不影响汇报效果，这让我意识到，之前过分强调产品演示是不对的。</p><p>A demo explains what you’ve made more effectively than any verbal description. The only thing worth talking about first is the problem you’re trying to solve and why it’s important. But don’t spend more than a tenth of your time on that. Then demo.<br>产品演示比任何口头描述都更能清晰地展现你所打造的成果。在演示前，唯一值得简要说明的是你试图解决的问题，以及这个问题的重要性。但这部分内容的耗时不应超过总时长的十分之一，之后就应立即进入演示环节。</p><p>When you demo, don’t run through a catalog of features. Instead start with the problem you’re solving, and then show how your product solves it. Show features in an order driven by some kind of purpose, rather than the order in which they happen to appear on the screen.<br>演示产品时，不要像罗列清单一样逐一介绍功能。相反，应先从你要解决的问题入手，然后展示你的产品是如何解决这个问题的。按照特定的逻辑顺序（而非功能在屏幕上的显示顺序）来展示产品功能，确保每一步演示都有明确的目的。</p><p>If you’re demoing something web-based, assume that the network connection will mysteriously die 30 seconds into your presentation, and come prepared with a copy of the server software running on your laptop.<br>如果你要演示的是网页版产品，请提前做好准备：假设汇报开始 30 秒后网络会突然中断，并在笔记本电脑上预装好可运行的服务器软件副本，以防万一。</p><h2 id="Better-a-narrow-description-than-a-vague-one"><a href="#Better-a-narrow-description-than-a-vague-one" class="headerlink" title="Better a narrow description than a vague one."></a><strong>Better a narrow description than a vague one.</strong></h2><h2 id="描述宁窄勿泛"><a href="#描述宁窄勿泛" class="headerlink" title="描述宁窄勿泛"></a><strong>描述宁窄勿泛</strong></h2><p>One reason founders resist describing their projects concisely is that, at this early stage, there are all kinds of possibilities. The most concise descriptions seem misleadingly narrow. So for example a group that has built an easy web-based database might resist calling their applicaton that, because it could be so much more. In fact, it could be anything…<br>创始人不愿简洁描述自己项目的原因之一是，在初创阶段，项目存在各种发展可能性，而最简洁的描述往往显得过于局限，甚至可能产生误导。例如，一个团队打造了一款易于使用的网页版数据库，但他们可能不愿这样定义自己的产品，因为他们觉得产品的潜力远不止于此 —— 实际上，他们甚至觉得产品未来可能发展成任何形态……</p><p>The problem is, as you approach (in the calculus sense) a description of something that could be anything, the content of your description approaches zero. If you describe your web-based database as “a system to allow people to collaboratively leverage the value of information,” it will go in one investor ear and out the other. They’ll just discard that sentence as meaningless boilerplate, and hope, with increasing impatience, that in the next sentence you’ll actually explain what you’ve made.<br>但问题在于，当你试图用一种 “包罗万象” 的方式描述产品（从微积分的角度来说，就是无限趋近于 “什么都可能是”）时，你的描述内容实际上会变得毫无意义。如果你把网页版数据库描述成 “一个能让人们协作挖掘信息价值的系统”，投资者会左耳进右耳出。他们会把这句话当成毫无意义的套话抛在脑后，然后越来越不耐烦地期待你能在下一句话中真正说明自己到底做了什么。</p><p>Your primary goal is not to describe everything your system might one day become, but simply to convince investors you’re worth talking to further. So approach this like an algorithm that gets the right answer by successive approximations. Begin with a description that’s gripping but perhaps overly narrow, then flesh it out to the extent you can. It’s the same principle as incremental development: start with a simple prototype, then add features, but at every point have working code. In this case, “working code” means a working description in the investor’s head.<br>你的首要目标不是描述产品未来可能发展成的所有形态，而只是让投资者相信你值得他们进一步沟通。因此，你可以采用 “逐步逼近” 的思路来描述产品，就像算法通过不断迭代得到正确答案一样。首先用一段吸引人（即便可能略显局限）的描述开篇，然后再尽可能地补充细节。这与 “增量开发” 的原则一致：先从简单的原型入手，再逐步添加功能，但在每个阶段都要有可运行的代码。在这里，“可运行的代码” 就相当于在投资者脑海中形成一个 “清晰易懂的产品认知”。</p><h2 id="Don’t-talk-and-drive"><a href="#Don’t-talk-and-drive" class="headerlink" title="Don’t talk and drive."></a><strong>Don’t talk and drive.</strong></h2><h2 id="避免-“边操作边讲解”"><a href="#避免-“边操作边讲解”" class="headerlink" title="避免 “边操作边讲解”"></a><strong>避免 “边操作边讲解”</strong></h2><p>Have one person talk while another uses the computer. If the same person does both, they’ll inevitably mumble downwards at the computer screen instead of talking clearly at the audience.<br>安排一个人负责讲解，另一个人负责操作电脑。如果同一个人既要讲解又要操作，他们难免会低头对着电脑屏幕含糊不清地说话，而无法面向听众清晰表达。</p><p>As long as you’re standing near the audience and looking at them, politeness (and habit) compel them to pay attention to you. Once you stop looking at them to fuss with something on your computer, their minds drift off to the errands they have to run later.<br>只要你站在靠近听众的位置并注视着他们，出于礼貌和习惯，他们会集中注意力听你讲话。但一旦你不再看向他们，转而专注于摆弄电脑，他们的思绪就会飘到其他事情上，比如之后要处理的事务。</p><h2 id="Don’t-talk-about-secondary-matters-at-length"><a href="#Don’t-talk-about-secondary-matters-at-length" class="headerlink" title="Don’t talk about secondary matters at length."></a><strong>Don’t talk about secondary matters at length.</strong></h2><h2 id="不要详细谈论次要内容"><a href="#不要详细谈论次要内容" class="headerlink" title="不要详细谈论次要内容"></a><strong>不要详细谈论次要内容</strong></h2><p>If you only have a few minutes, spend them explaining what your product does and why it’s great. Second order issues like competitors or resumes should be single slides you go through quickly at the end. If you have impressive resumes, just flash them on the screen for 15 seconds and say a few words. For competitors, list the top 3 and explain in one sentence each what they lack that you have. And put this kind of thing at the end, after you’ve made it clear what you’ve built.<br>如果你的汇报时间只有几分钟，就应把时间都用在说明产品功能和产品优势上。竞争对手分析、团队简历等次要内容，只需制作成单张幻灯片，在汇报末尾快速带过即可。如果团队成员有亮眼的简历，只需在屏幕上展示 15 秒，简单说几句就行；对于竞争对手，列出前三名，用一句话分别说明他们的不足以及你所具备的优势。这类内容一定要放在汇报末尾，先把你打造的产品解释清楚再说。</p><h2 id="Don’t-get-too-deeply-into-business-models"><a href="#Don’t-get-too-deeply-into-business-models" class="headerlink" title="Don’t get too deeply into business models."></a><strong>Don’t get too deeply into business models.</strong></h2><h2 id="不要深入探讨商业模式"><a href="#不要深入探讨商业模式" class="headerlink" title="不要深入探讨商业模式"></a><strong>不要深入探讨商业模式</strong></h2><p>It’s good to talk about how you plan to make money, but mainly because it shows you care about that and have thought about it. Don’t go into detail about your business model, because (a) that’s not what smart investors care about in a brief presentation, and (b) any business model you have at this point is probably wrong anyway.<br>简要提及你计划如何盈利是有必要的，这主要是为了表明你关注盈利问题，并且已经对此进行过思考。但不要深入细节，原因有二：（1）在简短的汇报中，精明的投资者并不关注商业模式的细节；（2）在当前阶段，你提出的任何商业模式都很可能是不完善的。</p><p>Recently a VC who came to speak at Y Combinator talked about a company he just invested in. He said their business model was wrong and would probably change three times before they got it right. The founders were experienced guys who’d done startups before and who’d just succeeded in getting millions from one of the top VC firms, and even their business model was crap. (And yet he invested anyway, because he expected it to be crap at this stage.)<br>最近，一位来 YC 演讲的风险投资人（VC）提到了他刚投资的一家公司。他表示，这家公司当前的商业模式存在问题，很可能需要调整三次才能找到正确的方向。即便这家公司的创始人经验丰富，有过创业经历，还成功从顶尖风投公司获得了数百万美元的投资，但他们的商业模式依然不够成熟。（但这位投资人还是选择了投资，因为他知道在这个阶段，商业模式不完善是正常的。）</p><p>If you’re solving an important problem, you’re going to sound a lot smarter talking about that than the business model. The business model is just a bunch of guesses, and guesses about stuff that’s probably not your area of expertise. So don’t spend your precious few minutes talking about crap when you could be talking about solid, interesting things you know a lot about: the problem you’re solving and what you’ve built so far.<br>如果你正在解决一个重要的问题，那么谈论这个问题会比谈论商业模式更能体现你的专业性。商业模式本质上只是一系列推测，而且这些推测所涉及的领域可能并非你的专长。因此，不要把宝贵的几分钟浪费在这些不确定的内容上，而应聚焦于你熟悉且有扎实基础的话题：你正在解决的问题，以及目前已完成的成果。</p><p>As well as being a bad use of time, if your business model seems spectacularly wrong, that will push the stuff you want investors to remember out of their heads. They’ll just remember you as the company with the boneheaded plan for making money, rather than the company that solved that important problem.<br>除了浪费时间之外，如果你的商业模式明显存在漏洞，还会让投资者忽略你希望他们记住的核心信息。他们最终可能只会记得你是 “那个有愚蠢盈利计划的公司”，而不是 “那个解决了重要问题的公司”。</p><h2 id="Talk-slowly-and-clearly-at-the-audience"><a href="#Talk-slowly-and-clearly-at-the-audience" class="headerlink" title="Talk slowly and clearly at the audience."></a><strong>Talk slowly and clearly at the audience.</strong></h2><h2 id="面向听众，放慢语速、清晰表达"><a href="#面向听众，放慢语速、清晰表达" class="headerlink" title="面向听众，放慢语速、清晰表达"></a><strong>面向听众，放慢语速、清晰表达</strong></h2><p>Everyone at Rehearsal Day could see the difference between the people who’d been out in the world for a while and had presented to groups, and those who hadn’t.<br>在彩排日，所有人都能看出两类人的区别：一类是有过社会经验、曾向群体做过汇报的人，另一类则毫无相关经验。</p><p>You need to use a completely different voice and manner talking to a roomful of people than you would in conversation. Everyday life gives you no practice in this. If you can’t already do it, the best solution is to treat it as a consciously artificial trick, like juggling.<br>面向满屋子的人讲话，需要用到与日常对话完全不同的语气和方式，而日常生活中几乎没有这种练习机会。如果你还不擅长，最好的办法是把它当作一种需要刻意练习的技巧，就像玩杂耍一样。</p><p>However, that doesn’t mean you should talk like some kind of announcer. Audiences tune that out. What you need to do is talk in this artificial way, and yet make it seem conversational. (Writing is the same. Good writing is an elaborate effort to seem spontaneous.)<br>但这并不意味着你要像播音员那样说话 —— 听众会对这种腔调感到麻木。你需要做的是，用这种经过刻意练习的方式表达，同时让语气听起来自然流畅，就像日常聊天一样。（写作也是如此：优秀的文章看似随性，实则是精心打磨的结果。）</p><p>If you want to write out your whole presentation beforehand and memorize it, that’s ok. That has worked for some groups in the past. But make sure to write something that sounds like spontaneous, informal speech, and deliver it that way too.<br>如果你想提前把整个汇报内容写下来并背熟，这也没问题 —— 过去有些团队就是这么做的，而且效果不错。但要注意，写出来的内容必须听起来像自然、随意的日常对话，汇报时也要用这种语气呈现。</p><p>Err on the side of speaking slowly. At Rehearsal Day, one of the founders mentioned a rule actors use: if you feel you’re speaking too slowly, you’re speaking at about the right speed.<br>语速宁慢勿快。在一次彩排日中，有位创始人提到了一个演员常用的准则：当你觉得自己语速太慢时，实际上你的语速刚刚好。</p><h2 id="Have-one-person-talk"><a href="#Have-one-person-talk" class="headerlink" title="Have one person talk."></a><strong>Have one person talk.</strong></h2><h2 id="尽量由一人主导讲解"><a href="#尽量由一人主导讲解" class="headerlink" title="尽量由一人主导讲解"></a><strong>尽量由一人主导讲解</strong></h2><p>Startups often want to show that all the founders are equal partners. This is a good instinct; investors dislike unbalanced teams. But trying to show it by partitioning the presentation is going too far. It’s distracting. You can demonstrate your respect for one another in more subtle ways. For example, when one of the groups presented at Demo Day, the more extroverted of the two founders did most of the talking, but he described his co-founder as the best hacker he’d ever met, and you could tell he meant it.<br>初创公司通常希望向投资者证明，所有创始人都是平等的合作伙伴。这种想法很合理 —— 投资者不喜欢团队结构失衡。但如果为了体现这一点，而把汇报内容拆分给多人讲解，就有些过犹不及了，反而会分散听众的注意力。其实，你们可以用更含蓄的方式展现彼此间的尊重。比如，在某次演示日中，有个团队的两位创始人里，外向的那位主导了大部分讲解，但他提到自己的合伙人是 “见过的最厉害的技术高手”，而且能明显看出他是发自内心的。</p><p>Pick the one or at most two best speakers, and have them do most of the talking.<br>选择一位，最多两位最擅长演讲的创始人，让他们主导大部分讲解工作。</p><p>Exception: If one of the founders is an expert in some specific technical field, it can be good for them to talk about that for a minute or so. This kind of “expert witness” can add credibility, even if the audience doesn’t understand all the details. If Jobs and Wozniak had 10 minutes to present the Apple II, it might be a good plan to have Jobs speak for 9 minutes and have Woz speak for a minute in the middle about some of the technical feats he’d pulled off in the design. (Though of course if it were actually those two, Jobs would speak for the entire 10 minutes.)<br>例外情况：如果某位创始人是特定技术领域的专家，让他用一分钟左右的时间讲解该领域内容会很有帮助。这种 “专家证言” 能增加汇报的可信度，即便听众无法理解所有技术细节。假设乔布斯和沃兹尼亚克有 10 分钟时间介绍 Apple II 电脑，合理的安排可能是：乔布斯讲 9 分钟，中间让沃兹用 1 分钟讲解他在设计中实现的一些技术突破。（当然，要是换成他们俩本人，很可能乔布斯会全程讲满 10 分钟。）</p><h2 id="Seem-confident"><a href="#Seem-confident" class="headerlink" title="Seem confident."></a><strong>Seem confident.</strong></h2><h2 id="展现自信姿态"><a href="#展现自信姿态" class="headerlink" title="展现自信姿态"></a><strong>展现自信姿态</strong></h2><p>Between the brief time available and their lack of technical background, many in the audience will have a hard time evaluating what you’re doing. Probably the single biggest piece of evidence, initially, will be your own confidence in it. You have to show you’re impressed with what you’ve made.<br>由于汇报时间有限，且大多数听众缺乏技术背景，他们很难快速评估你所做的事情。在最初阶段，你对自己产品的信心，或许是让他们判断的最重要依据。你必须让听众感受到，你对自己打造的成果充满认可。</p><p>And I mean show, not tell. Never say “we’re passionate” or “our product is great.” People just ignore that—or worse, write you off as bullshitters. Such messages must be implicit.<br>注意，这里说的是 “用行动展现”，而不是 “用语言宣称”。永远不要说 “我们充满热情” 或 “我们的产品很棒”—— 人们要么会无视这些话，要么更糟，会把你当成说空话的人。这种信心必须通过含蓄的方式传递。</p><p>What you must not do is seem nervous and apologetic. If you’ve truly made something good, you’re doing investors a favor by telling them about it. If you don’t genuinely believe that, perhaps you ought to change what your company is doing. If you don’t believe your startup has such promise that you’d be doing them a favor by letting them invest, why are you investing your time in it?<br>绝对不要表现得紧张或拘谨。如果你确实打造出了好产品，那么向投资者介绍它，其实是在给他们提供一个机会。如果你连这一点都不相信，或许应该重新审视公司的业务方向。如果你不认为自己的初创公司有足够潜力，不觉得让投资者参与投资是给他们的 “机会”，那你又为什么要在这件事上投入自己的时间呢？</p><h2 id="Don’t-try-to-seem-more-than-you-are"><a href="#Don’t-try-to-seem-more-than-you-are" class="headerlink" title="Don’t try to seem more than you are."></a><strong>Don’t try to seem more than you are.</strong></h2><h2 id="不要刻意-“装成熟”"><a href="#不要刻意-“装成熟”" class="headerlink" title="不要刻意 “装成熟”"></a><strong>不要刻意 “装成熟”</strong></h2><p>Don’t worry if your company is just a few months old and doesn’t have an office yet, or your founders are technical people with no business experience. Google was like that once, and they turned out ok. Smart investors can see past such superficial flaws. They’re not looking for finished, smooth presentations. They’re looking for raw talent. All you need to convince them of is that you’re smart and that you’re onto something good. If you try too hard to conceal your rawness—by trying to seem corporate, or pretending to know about stuff you don’t—you may just conceal your talent.<br>不必担心公司成立才几个月、还没有办公场地，也不用在意创始人都是技术出身、缺乏商业经验 —— 谷歌曾经也是这样，后来发展得很好。精明的投资者能看透这些表面问题，他们要找的不是 “成熟流畅的汇报”，而是 “有潜力的人才”。你只需要让他们相信两点：你很聪明，而且你正在做的事情有价值。如果你过分刻意地掩盖自己的 “青涩”—— 比如故作 “大企业派头”，或者不懂装懂 —— 反而可能会掩盖自己的才华。</p><p>You can afford to be candid about what you haven’t figured out yet. Don’t go out of your way to bring it up (e.g. by having a slide about what might go wrong), but don’t try to pretend either that you’re further along than you are. If you’re a hacker and you’re presenting to experienced investors, they’re probably better at detecting bullshit than you are at producing it.<br>对于尚未解决的问题，你完全可以坦诚面对。不必特意主动提及（比如专门做一张幻灯片讲 “可能出现的问题”），但也不要假装公司已经发展到了超出实际的阶段。如果你是技术人员，面对的是经验丰富的投资者，他们识别 “空话” 的能力，很可能比你编造 “空话” 的能力强得多。</p><h2 id="Don’t-put-too-many-words-on-slides"><a href="#Don’t-put-too-many-words-on-slides" class="headerlink" title="Don’t put too many words on slides."></a><strong>Don’t put too many words on slides.</strong></h2><h2 id="幻灯片不要堆砌过多文字"><a href="#幻灯片不要堆砌过多文字" class="headerlink" title="幻灯片不要堆砌过多文字"></a><strong>幻灯片不要堆砌过多文字</strong></h2><p>When there are a lot of words on a slide, people just skip reading it. So look at your slides and ask of each word “could I cross this out?” This includes gratuitous clip art. Try to get your slides under 20 words if you can.<br>如果幻灯片上文字太多，听众根本不会去读。所以，制作幻灯片时，要对每个词都问一句 “这个词能删掉吗？”—— 无关紧要的剪贴画也一样。尽量让每张幻灯片的文字控制在 20 个以内。</p><p>Don’t read your slides. They should be something in the background as you face the audience and talk to them, not something you face and read to an audience sitting behind you.<br>不要照着幻灯片念。幻灯片应该是你面向听众讲解时的 “背景辅助”，而不是你对着它念、让听众坐在后面听的 “稿子”。</p><p>Cluttered sites don’t do well in demos, especially when they’re projected onto a screen. At the very least, crank up the font size big enough to make all the text legible. But cluttered sites are bad anyway, so perhaps you should use this opportunity to make your design simpler.<br>演示时，界面杂乱的网站效果会很差，尤其是投影到屏幕上之后。至少要把字体调大，确保所有文字都清晰可见。不过，界面杂乱本身就是问题，或许你可以借这次机会，把产品设计得更简洁。</p><h2 id="Specific-numbers-are-good"><a href="#Specific-numbers-are-good" class="headerlink" title="Specific numbers are good."></a><strong>Specific numbers are good.</strong></h2><h2 id="用具体数据说话"><a href="#用具体数据说话" class="headerlink" title="用具体数据说话"></a><strong>用具体数据说话</strong></h2><p>If you have any kind of data, however preliminary, tell the audience. Numbers stick in people’s heads. If you can claim that the median visitor generates 12 page views, that’s great.<br>只要你有数据 —— 无论多初步 —— 都要展示给听众。数据更容易让人记住。比如，如果你能说 “访客平均浏览页数为 12 页”，这就很有说服力。</p><p>But don’t give them more than four or five numbers, and only give them numbers specific to you. You don’t need to tell them the size of the market you’re in. Who cares, really, if it’s 500 million or 5 billion a year? Talking about that is like an actor at the beginning of his career telling his parents how much Tom Hanks makes. Yeah, sure, but first you have to become Tom Hanks. The important part is not whether he makes ten million a year or a hundred, but how you get there.<br>但不要给出超过 4-5 个数据，而且必须是与你公司直接相关的数据。你不需要告诉他们你所在市场的规模 —— 一年 5 亿还是 50 亿，真的有人在意吗？谈论这个，就像刚入行的演员跟父母说 “汤姆・汉克斯能赚多少钱” 一样：没错，他是赚得多，但首先你得先成为汤姆・汉克斯才行。重要的不是 “市场有多大”，而是 “你怎么在这个市场里做出成绩”。</p><h2 id="Tell-stories-about-users"><a href="#Tell-stories-about-users" class="headerlink" title="Tell stories about users."></a><strong>Tell stories about users.</strong></h2><h2 id="讲用户的故事"><a href="#讲用户的故事" class="headerlink" title="讲用户的故事"></a><strong>讲用户的故事</strong></h2><p>The biggest fear of investors looking at early stage startups is that you’ve built something based on your own a priori theories of what the world needs, but that no one will actually want. So it’s good if you can talk about problems specific users have and how you solve them.<br>投资者看待早期初创公司时，最大的担忧是：你打造的产品只是基于自己 “觉得世界需要什么” 的主观判断，而实际上没人真的需要它。因此，如果你能讲讲具体用户遇到的问题，以及你的产品如何解决这些问题，会非常有帮助。</p><p>Greg Mcadoo said one thing Sequoia looks for is the “proxy for demand.” What are people doing now, using inadequate tools, that shows they need what you’re making?<br>红杉资本的格雷格・麦卡杜曾说过，红杉会寻找 “需求的替代信号”—— 也就是说，现在人们在用不够好的工具做某件事，这是否能证明他们需要你打造的产品？</p><p>Another sign of user need is when people pay a lot for something. It’s easy to convince investors there will be demand for a cheaper alternative to something popular, if you preserve the qualities that made it popular.<br>用户需求的另一个信号是：人们愿意为某类产品花高价。如果你能打造出一款 “价格更低、但保留了热门产品核心优势” 的替代品，很容易就能让投资者相信它有市场需求。</p><p>The best stories about user needs are about your own. A remarkable number of famous startups grew out of some need the founders had: Apple, Microsoft, Yahoo, Google. Experienced investors know that, so stories of this type will get their attention. The next best thing is to talk about the needs of people you know personally, like your friends or siblings.<br>关于用户需求，最好的故事是 “你自己的故事”。很多知名初创公司，比如苹果、微软、雅虎、谷歌，都是从创始人自身的需求中诞生的。有经验的投资者都知道这一点，所以这类故事能吸引他们的注意力。退而求其次的选择，是讲你认识的人的需求，比如朋友或家人遇到的问题。</p><h2 id="Make-a-soundbite-stick-in-their-heads"><a href="#Make-a-soundbite-stick-in-their-heads" class="headerlink" title="Make a soundbite stick in their heads."></a><strong>Make a soundbite stick in their heads.</strong></h2><h2 id="用一句-“记忆点”-让他们记住你"><a href="#用一句-“记忆点”-让他们记住你" class="headerlink" title="用一句 “记忆点” 让他们记住你"></a><strong>用一句 “记忆点” 让他们记住你</strong></h2><p>Professional investors hear a lot of pitches. After a while they all blur together. The first cut is simply to be one of those they remember. And the way to ensure that is to create a descriptive phrase about yourself that sticks in their heads.<br>专业投资者会听很多场汇报，时间一长，大部分内容都会变得模糊。而你要做的第一步，就是成为他们能记住的其中一个。要做到这一点，关键是创造一句能让人记住的 “描述语”，用来定义你的公司。</p><p>In Hollywood, these phrases seem to be of the form “x meets y.” In the startup world, they’re usually “the x of y” or “the x y.” Viaweb’s was “the Microsoft Word of ecommerce.”<br>在好莱坞，这种描述语常是 “X 与 Y 的结合”（x meets y）的形式；在初创圈，则多是 “Y 领域的 X”（the x of y）或 “X 式 Y”（the x y）。比如，Viaweb（早期电商平台）的描述语是 “电商领域的微软 Word”（the Microsoft Word of ecommerce）。</p><p>Find one and launch it clearly (but apparently casually) in your talk, preferably near the beginning.<br>找到一句适合你公司的描述语，在汇报中清晰（但看似随意）地说出来，最好放在汇报开头附近。</p><p>It’s a good exercise for you, too, to sit down and try to figure out how to describe your startup in one compelling phrase. If you can’t, your plans may not be sufficiently focused.<br>对你来说，坐下来试着用一句有吸引力的话描述自己的公司，本身也是一项有益的练习。如果做不到，可能说明你的业务计划还不够聚焦。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复制你真正喜欢的东西</title>
    <link href="/2025/09/10/copy-what-you-like/"/>
    <url>/2025/09/10/copy-what-you-like/</url>
    
    <content type="html"><![CDATA[<h1 id="Copy-What-You-Like"><a href="#Copy-What-You-Like" class="headerlink" title="Copy What You Like"></a>Copy What You Like</h1><h1 id="复制你真正喜欢的东西"><a href="#复制你真正喜欢的东西" class="headerlink" title="复制你真正喜欢的东西"></a>复制你真正喜欢的东西</h1><p>原文链接: <a href="https://paulgraham.com/copy.html">https://paulgraham.com/copy.html</a></p><p>July 2006</p><p>When I was in high school I spent a lot of time imitating bad writers. What we studied in English classes was mostly fiction, so I assumed that was the highest form of writing. Mistake number one. The stories that seemed to be most admired were ones in which people suffered in complicated ways. Anything funny or gripping was ipso facto suspect, unless it was old enough to be hard to understand, like Shakespeare or Chaucer. Mistake number two. The ideal medium seemed the short story, which I’ve since learned had quite a brief life, roughly coincident with the peak of magazine publishing. But since their size made them perfect for use in high school classes, we read a lot of them, which gave us the impression the short story was flourishing. Mistake number three. And because they were so short, nothing really had to happen; you could just show a randomly truncated slice of life, and that was considered advanced. Mistake number four. The result was that I wrote a lot of stories in which nothing happened except that someone was unhappy in a way that seemed deep.<br>高中时，我花了大量时间模仿蹩脚的作家。当时英语课上学习的内容大多是小说，于是我便认定小说是最高级的写作形式。这是我的第一个错误。那些看似最受推崇的故事，往往是人物在复杂困境中饱受折磨的类型。任何有趣或扣人心弦的内容，本质上都会受到质疑 —— 除非它年代久远、晦涩难懂，比如莎士比亚或乔叟的作品。这是我的第二个错误。我当时觉得短篇小说是最理想的创作载体，后来才知道，短篇小说的黄金时期其实相当短暂，大致与杂志出版业的鼎盛期重合。但由于篇幅适中，短篇小说非常适合高中课堂教学，我们因此读了很多，这让我们误以为短篇小说仍在蓬勃发展。这是我的第三个错误。而且，正因为篇幅短，故事里其实不需要发生什么实质性内容；你只需随意截取生活中的一个片段呈现出来，就会被认为是 “高深” 的写法。这是我的第四个错误。结果就是，我写了很多故事，里面什么都没发生，只讲了某个人以一种看似 “深刻” 的方式深陷苦闷之中。</p><p>For most of college I was a philosophy major. I was very impressed by the papers published in philosophy journals. They were so beautifully typeset, and their tone was just captivating—alternately casual and buffer-overflowingly technical. A fellow would be walking along a street and suddenly modality qua modality would spring upon him. I didn’t ever quite understand these papers, but I figured I’d get around to that later, when I had time to reread them more closely. In the meantime I tried my best to imitate them. This was, I can now see, a doomed undertaking, because they weren’t really saying anything. No philosopher ever refuted another, for example, because no one said anything definite enough to refute. Needless to say, my imitations didn’t say anything either.<br>大学的大部分时间里，我是哲学专业的学生。哲学期刊上发表的论文给我留下了极其深刻的印象。这些论文排版精美，语气也极具吸引力 —— 时而随意通俗，时而又充斥着复杂到 “溢出” 的专业术语。文中的人物可能正在街上走着，突然就陷入了 “模态本身作为模态”（注：哲学专业术语，指对 “模态” 这一概念本身的探讨）的思考中。我始终没能完全读懂这些论文，但我觉得以后总有时间仔细重读，到时候自然能理解。在此期间，我竭尽全力模仿这种写法。如今我才明白，这根本就是一项注定失败的尝试，因为这些论文本质上什么都没说。比如，从未有哲学家能反驳另一位哲学家的观点，因为没有人提出过足够明确、能被反驳的主张。不用说，我模仿写出的东西也同样空洞无物。</p><p>In grad school I was still wasting time imitating the wrong things. There was then a fashionable type of program called an expert system, at the core of which was something called an inference engine. I looked at what these things did and thought “I could write that in a thousand lines of code.” And yet eminent professors were writing books about them, and startups were selling them for a year’s salary a copy. What an opportunity, I thought; these impressive things seem easy to me; I must be pretty sharp. Wrong. It was simply a fad. The books the professors wrote about expert systems are now ignored. They were not even on a path to anything interesting. And the customers paying so much for them were largely the same government agencies that paid thousands for screwdrivers and toilet seats.<br>读研究生时，我仍在浪费时间模仿错误的东西。当时有一种很流行的程序叫做 “专家系统”，其核心是一个名为 “推理引擎” 的组件。我研究了这些系统的功能后心想：“我用一千行代码就能写出这个。” 然而，知名教授们却在撰写关于它们的专著，初创公司更是将其以相当于一年薪水的价格出售。我当时觉得这是个绝佳机会：这些看似厉害的东西对我来说这么简单，我一定很有天赋。事实证明我又错了。这不过是一阵风潮而已。如今，那些教授写的关于专家系统的书早已无人问津，它们甚至没有为任何有意义的技术方向铺路。而那些花高价购买专家系统的客户，大多是曾花数千美元买螺丝刀和马桶圈的政府机构（注：此处暗指部分政府机构采购存在浪费、溢价严重的问题）。</p><p>How do you avoid copying the wrong things? Copy only what you genuinely like. That would have saved me in all three cases. I didn’t enjoy the short stories we had to read in English classes; I didn’t learn anything from philosophy papers; I didn’t use expert systems myself. I believed these things were good because they were admired.<br>如何避免模仿错误的事物？答案是：只模仿你真正喜欢的东西。若是当初能做到这一点，我在上述三个阶段都能少走弯路。我并不喜欢英语课上那些必读书目里的短篇小说；我从哲学论文中什么也没学到；我自己也从未使用过专家系统。我之所以认为这些东西 “好”，只是因为它们受到了他人的推崇。</p><p>It can be hard to separate the things you like from the things you’re impressed with. One trick is to ignore presentation. Whenever I see a painting impressively hung in a museum, I ask myself: how much would I pay for this if I found it at a garage sale, dirty and frameless, and with no idea who painted it? If you walk around a museum trying this experiment, you’ll find you get some truly startling results. Don’t ignore this data point just because it’s an outlier.<br>要区分 “你喜欢的东西” 和 “让你觉得厉害的东西”，其实并不容易。有个小技巧是：忽略外在的呈现形式。每当我在博物馆里看到一幅被精心陈列、看似极具格调的画作时，我都会问自己：如果这幅画出现在旧货拍卖会上，又脏又没有画框，而且我完全不知道作者是谁，我会愿意花多少钱买它？如果你在博物馆里试着做这个 “假设实验”，会得到一些令人惊讶的结果。不要因为这个结果和常规认知不同，就忽略它。</p><p>Another way to figure out what you like is to look at what you enjoy as guilty pleasures. Many things people like, especially if they’re young and ambitious, they like largely for the feeling of virtue in liking them. 99% of people reading Ulysses are thinking “I’m reading Ulysses” as they do it. A guilty pleasure is at least a pure one. What do you read when you don’t feel up to being virtuous? What kind of book do you read and feel sad that there’s only half of it left, instead of being impressed that you’re half way through? That’s what you really like.<br>另一个找到自己真正喜好的方法，是关注那些你当作 “guilty pleasures”（注：指因觉得 “不够高雅” 而心怀愧疚，但又忍不住喜欢的事物）的东西。很多人喜欢某些事物，尤其是年轻且有野心的人，很大程度上是因为 “喜欢这些东西能带来一种优越感”。99% 读《尤利西斯》的人，在阅读时心里都在想 “我正在读《尤利西斯》”（注：暗指人们读经典有时是为了彰显品味，而非真心喜欢）。而 “ guilty pleasures ” 至少是纯粹的 —— 当你不想为了 “显得高雅” 而勉强自己时，你会读什么？当你读某本书时，会因为 “只剩一半没读了” 而感到难过，而非因为 “已经读了一半” 而觉得自豪，这种书才是你真正喜欢的。</p><p>Even when you find genuinely good things to copy, there’s another pitfall to be avoided. Be careful to copy what makes them good, rather than their flaws. It’s easy to be drawn into imitating flaws, because they’re easier to see, and of course easier to copy too. For example, most painters in the eighteenth and nineteenth centuries used brownish colors. They were imitating the great painters of the Renaissance, whose paintings by that time were brown with dirt. Those paintings have since been cleaned, revealing brilliant colors; their imitators are of course still brown.<br>即便你找到了真正值得模仿的好东西，仍有一个陷阱需要避开：要小心模仿那些 “让它们变好的核心特质”，而非 “它们的缺陷”。人们很容易不自觉地去模仿缺陷，因为缺陷更容易被察觉，模仿起来也当然更简单。比如，18、19 世纪的大多数画家都习惯使用偏褐色的色调。他们是在模仿文艺复兴时期的伟大画家，但那些大师的画作在当时已经因积灰而变成了褐色。后来，这些文艺复兴时期的画作经过清理，露出了鲜艳明亮的本色；而那些模仿者的作品，至今仍保持着单调的褐色。</p><p>It was painting, incidentally, that cured me of copying the wrong things. Halfway through grad school I decided I wanted to try being a painter, and the art world was so manifestly corrupt that it snapped the leash of credulity. These people made philosophy professors seem as scrupulous as mathematicians. It was so clearly a choice of doing good work xor being an insider that I was forced to see the distinction. It’s there to some degree in almost every field, but I had till then managed to avoid facing it.<br>顺便说一句，是绘画让我改掉了模仿错误事物的毛病。研究生读到一半时，我决定尝试当一名画家。而艺术界的腐败现象如此明显，彻底打破了我的轻信。在这些人面前，哲学教授都显得像数学家一样严谨。在艺术界，“做出好作品” 和 “融入圈内” 显然是二选一的关系，这让我不得不看清两者的区别。其实几乎每个领域都在一定程度上存在这种矛盾，但在此之前，我一直刻意回避面对它。</p><p>That was one of the most valuable things I learned from painting: you have to figure out for yourself what’s good. You can’t trust authorities. They’ll lie to you on this one.<br>这是我从绘画中学到的最宝贵的道理之一：什么是 “好”，必须由你自己判断。不要相信所谓的权威，在这件事上，他们会误导你。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>荒岛测试</title>
    <link href="/2025/09/10/the-island-test/"/>
    <url>/2025/09/10/the-island-test/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Island-Test"><a href="#The-Island-Test" class="headerlink" title="The Island Test"></a>The Island Test</h1><h1 id="岛屿测试"><a href="#岛屿测试" class="headerlink" title="岛屿测试"></a>岛屿测试</h1><p>原文链接: <a href="https://paulgraham.com/island.html">https://paulgraham.com/island.html</a></p><p>July 2006</p><p>I’ve discovered a handy test for figuring out what you’re addicted to. Imagine you were going to spend the weekend at a friend’s house on a little island off the coast of Maine. There are no shops on the island and you won’t be able to leave while you’re there. Also, you’ve never been to this house before, so you can’t assume it will have more than any house might.<br>我发现了一个实用的测试，可以帮你弄清楚自己对什么上瘾。想象一下，你要去缅因州海岸附近的一座小岛，在朋友家度过一个周末。岛上没有商店，你待在那里的时候也无法离开。而且，你以前从未去过这所房子，所以不能想当然地认为它会有超出普通房子的东西。</p><p>What, besides clothes and toiletries, do you make a point of packing? That’s what you’re addicted to. For example, if you find yourself packing a bottle of vodka (just in case), you may want to stop and think about that.<br>除了衣服和洗漱用品，你一定会特意打包的东西是什么？那就是你上瘾的东西。比如，如果你发现自己要带上一瓶伏特加（以防万一），或许就该停下来好好想想了。</p><p>For me the list is four things: books, earplugs, a notebook, and a pen.<br>对我来说，这个清单上有四样东西：书、耳塞、笔记本和笔。</p><p>There are other things I might bring if I thought of it, like music, or tea, but I can live without them. I’m not so addicted to caffeine that I wouldn’t risk the house not having any tea, just for a weekend.<br>如果想到的话，我可能还会带些其他东西，比如音乐播放器或茶叶，但没有它们我也能过。我对咖啡因的依赖没那么严重，不至于因为担心朋友家没有茶，就特意为了一个周末带上茶叶。</p><p>Quiet is another matter. I realize it seems a bit eccentric to take earplugs on a trip to an island off the coast of Maine. If anywhere should be quiet, that should. But what if the person in the next room snored? What if there was a kid playing basketball? (Thump, thump, thump… thump.) Why risk it? Earplugs are small.<br>安静则是另一回事。我知道，去缅因州海岸的小岛旅行还带耳塞，听起来可能有点古怪。按理说，那里本该是最安静的地方。可万一隔壁房间的人打呼噜呢？万一有小孩在打篮球呢？（砰、砰、砰…… 砰。）何必冒这个险呢？耳塞又不占地方。</p><p>Sometimes I can think with noise. If I already have momentum on some project, I can work in noisy places. I can edit an essay or debug code in an airport. But airports are not so bad: most of the noise is whitish. I couldn’t work with the sound of a sitcom coming through the wall, or a car in the street playing thump-thump music.<br>有时候，有噪音我也能思考。如果我正在推进某个项目，已经有了思路，就能在嘈杂的地方工作 —— 比如在机场修改文章或调试代码。但机场的噪音还不算太糟，大多是无规律的白噪音。可如果墙那边传来情景喜剧的声音，或是街上有汽车放着节奏感极强的重低音音乐，我就根本无法工作了。</p><p>And of course there’s another kind of thinking, when you’re starting something new, that requires complete quiet. You never know when this will strike. It’s just as well to carry plugs.<br>当然，还有另一种思考方式 —— 当你要开启新事物时，需要绝对的安静。你永远不知道这种需求什么时候会出现，所以带上耳塞总没错。</p><p>The notebook and pen are professional equipment, as it were. Though actually there is something druglike about them, in the sense that their main purpose is to make me feel better. I hardly ever go back and read stuff I write down in notebooks. It’s just that if I can’t write things down, worrying about remembering one idea gets in the way of having the next. Pen and paper wick ideas.<br>可以说，笔记本和笔就像是我的 “专业装备”。不过实际上，它们有点像 “解药”，主要作用是让我安心。我几乎从不回头看记在笔记本上的内容，只是如果不把想法写下来，我就会一直担心忘了当前的想法，这样反而会阻碍下一个想法的产生。笔和纸就像 “吸墨纸”，能留住我的想法。</p><p>The best notebooks I’ve found are made by a company called Miquelrius. I use their smallest size, which is about 2.5 x 4 in. The secret to writing on such narrow pages is to break words only when you run out of space, like a Latin inscription. I use the cheapest plastic Bic ballpoints, partly because their gluey ink doesn’t seep through pages, and partly so I don’t worry about losing them.<br>我发现最好用的笔记本是一家叫 Miquelrius（米奎尔留斯）的公司生产的。我用的是他们最小的尺寸，大约 2.5 英寸 ×4 英寸（约 6.4 厘米 ×10.2 厘米）。在这么窄的纸页上写字，秘诀就是只在空间不够时才拆分单词，就像刻拉丁文铭文那样。我用的是最便宜的比克（Bic）塑料圆珠笔，一方面是因为它的墨汁黏性强，不会渗到下一页；另一方面是因为便宜，丢了也不心疼。</p><p>I only started carrying a notebook about three years ago. Before that I used whatever scraps of paper I could find. But the problem with scraps of paper is that they’re not ordered. In a notebook you can guess what a scribble means by looking at the pages around it. In the scrap era I was constantly finding notes I’d written years before that might say something I needed to remember, if I could only figure out what.<br>我大概三年前才开始随身携带笔记本。在此之前，我都是随手找些碎纸片来记东西。但碎纸片的问题在于没有条理 —— 在笔记本里，你可以通过前后页的内容猜到潦草字迹的意思；而在 “碎纸片时代”，我经常发现几年前写的笔记，里面或许有我需要记住的内容，可我根本想不起来那是什么意思。</p><p>As for books, I know the house would probably have something to read. On the average trip I bring four books and only read one of them, because I find new books to read en route. Really bringing books is insurance.<br>至于书，我知道朋友家大概率会有可阅读的东西。每次旅行我通常会带四本书，但只看一本，因为我会在途中找到新的书来读。说到底，带书就像是买一份 “保险”。</p><p>I realize this dependence on books is not entirely good—that what I need them for is distraction. The books I bring on trips are often quite virtuous, the sort of stuff that might be assigned reading in a college class. But I know my motives aren’t virtuous. I bring books because if the world gets boring I need to be able to slip into another distilled by some writer. It’s like eating jam when you know you should be eating fruit.<br>我知道，对书的这种依赖并非全然是好事 —— 我需要书，其实是为了 “转移注意力”。我旅行时带的书往往都很 “正经”，像是大学课堂上可能会布置的必读书目。但我清楚自己的动机并不 “纯粹”：带书是因为如果现实世界变得无聊，我就能遁入某个作家笔下的另一个世界。这就像明明知道该吃水果，却偏偏要吃果酱一样。</p><p>There is a point where I’ll do without books. I was walking in some steep mountains once, and decided I’d rather just think, if I was bored, rather than carry a single unnecessary ounce. It wasn’t so bad. I found I could entertain myself by having ideas instead of reading other people’s. If you stop eating jam, fruit starts to taste better.<br>不过，我也有过不带书的时候。有一次我在陡峭的山区徒步，当时决定：如果觉得无聊，我宁愿单纯思考，也不愿多带一盎司不必要的东西。结果发现也没那么糟 —— 我可以靠自己产生想法来打发时间，而不是去读别人的想法。就像如果你不再吃果酱，就会发现水果本身的味道其实更好。</p><p>So maybe I’ll try not bringing books on some future trip. They’re going to have to pry the plugs out of my cold, dead ears, however.<br>所以，或许未来某趟旅行，我会尝试不带书。但至于耳塞，除非我死了，否则谁也别想从我耳朵里把它们拔出来。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>边缘的力量</title>
    <link href="/2025/09/09/the-power-of-the-marginal/"/>
    <url>/2025/09/09/the-power-of-the-marginal/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Power-of-the-Marginal"><a href="#The-Power-of-the-Marginal" class="headerlink" title="The Power of the Marginal"></a>The Power of the Marginal</h1><h1 id="边缘的力量"><a href="#边缘的力量" class="headerlink" title="边缘的力量"></a>边缘的力量</h1><p>原文链接: <a href="https://paulgraham.com/marginal.html">https://paulgraham.com/marginal.html</a></p><p>June 2006</p><p>(This essay is derived from talks at Usenix 2006 and Railsconf 2006.)<br>（本文改编自 2006 年 Usenix 大会与 Railsconf 大会上的演讲内容。）</p><p>A couple years ago my friend Trevor and I went to look at the Apple garage. As we stood there, he said that as a kid growing up in Saskatchewan he’d been amazed at the dedication Jobs and Wozniak must have had to work in a garage.<br>几年前，我和朋友特雷弗去参观了苹果公司最初的那个车库。站在那里时，他说，自己小时候在萨斯喀彻温省长大，一直很惊叹乔布斯和沃兹尼亚克竟有如此坚定的信念，能在车库里埋头工作。</p><p>“Those guys must have been freezing!”<br>“那两个人当时肯定冻坏了！”</p><p>That’s one of California’s hidden advantages: the mild climate means there’s lots of marginal space. In cold places that margin gets trimmed off. There’s a sharper line between outside and inside, and only projects that are officially sanctioned — by organizations, or parents, or wives, or at least by oneself — get proper indoor space. That raises the activation energy for new ideas. You can’t just tinker. You have to justify.<br>这正是加利福尼亚州一个不为人知的优势：温和的气候造就了大量 “边缘空间”。而在寒冷地区，这样的边缘空间会被大大压缩。室内与室外的界限变得十分清晰，只有那些得到官方认可 —— 无论是来自机构、父母、妻子，还是至少得到自己认可 —— 的项目，才能获得合适的室内空间。这无疑增加了新想法产生的 “启动门槛”。你不能再只是随便捣鼓，而是必须先证明做这件事的合理性。</p><p>Some of Silicon Valley’s most famous companies began in garages: Hewlett-Packard in 1938, Apple in 1976, Google in 1998. In Apple’s case the garage story is a bit of an urban legend. Woz says all they did there was assemble some computers, and that he did all the actual design of the Apple I and Apple II in his apartment or his cube at HP. [1] This was apparently too marginal even for Apple’s PR people.<br>硅谷一些最知名的公司都发源于车库：1938 年的惠普、1976 年的苹果、1998 年的谷歌。不过，苹果的 “车库创业” 故事多少带点都市传说的色彩。沃兹尼亚克曾表示，他们当时在车库里只是组装了一些电脑，而苹果 I 型和苹果 II 型的所有实际设计工作，都是他在自己的公寓或惠普公司的办公隔间里完成的。[1] 显然，就连苹果的公关团队都觉得这样的经历 “边缘” 得有些过头了。</p><p>By conventional standards, Jobs and Wozniak were marginal people too. Obviously they were smart, but they can’t have looked good on paper. They were at the time a pair of college dropouts with about three years of school between them, and hippies to boot. Their previous business experience consisted of making “blue boxes” to hack into the phone system, a business with the rare distinction of being both illegal and unprofitable.<br>按照传统标准来看，乔布斯和沃兹尼亚克本身也属于 “边缘人物”。显然他们很聪明，但从纸面履历上看却毫无亮点。当时两人都是大学辍学生，加起来的在校时间也就三年左右，而且还是嬉皮士。他们之前的 “商业经历”，不过是制作用于破解电话系统的 “蓝盒子”—— 这种生意堪称 “奇葩”，既违法又不赚钱。</p><h2 id="Outsiders"><a href="#Outsiders" class="headerlink" title="Outsiders"></a><strong>Outsiders</strong></h2><h2 id="局外人"><a href="#局外人" class="headerlink" title="局外人"></a><strong>局外人</strong></h2><p>Now a startup operating out of a garage in Silicon Valley would feel part of an exalted tradition, like the poet in his garret, or the painter who can’t afford to heat his studio and thus has to wear a beret indoors. But in 1976 it didn’t seem so cool. The world hadn’t yet realized that starting a computer company was in the same category as being a writer or a painter. It hadn’t been for long. Only in the preceding couple years had the dramatic fall in the cost of hardware allowed outsiders to compete.<br>如今，在硅谷的车库里创办初创公司，会让人感觉自己置身于一种崇高的传统之中，就像阁楼里的诗人，或是付不起工作室取暖费、只能在室内戴贝雷帽的画家。但在 1976 年，这样的做法可一点都不 “酷”。当时的人们还没意识到，创办电脑公司与当作家、画家是同一类事 —— 这种认知的转变其实来得很晚。仅仅是在那之前的几年，硬件成本的大幅下降，才让 “局外人” 有了参与竞争的可能。</p><p>In 1976, everyone looked down on a company operating out of a garage, including the founders. One of the first things Jobs did when they got some money was to rent office space. He wanted Apple to seem like a real company.<br>1976 年时，所有人都看不起在车库里运营的公司，包括公司的创始人自己。乔布斯在他们赚到第一笔钱后，做的第一件事就是租办公空间。他想让苹果看起来像一家 “正经公司”。</p><p>They already had something few real companies ever have: a fabulously well designed product. You’d think they’d have had more confidence. But I’ve talked to a lot of startup founders, and it’s always this way. They’ve built something that’s going to change the world, and they’re worried about some nit like not having proper business cards.<br>其实他们当时已经拥有了许多正经公司都没有的东西：一款设计极佳的产品。你可能会觉得他们应该更有信心才对。但我和很多初创公司创始人聊过，发现情况总是如此：他们明明打造出了可能改变世界的产品，却在为没有像样的名片这种小事焦虑。</p><p>That’s the paradox I want to explore: great new things often come from the margins, and yet the people who discover them are looked down on by everyone, including themselves.<br>这正是我想探讨的悖论：伟大的新事物往往源自边缘，但创造这些事物的人，却会被所有人（包括他们自己）看不起。</p><p>It’s an old idea that new things come from the margins. I want to examine its internal structure. Why do great ideas come from the margins? What kind of ideas? And is there anything we can do to encourage the process?<br>“新事物源于边缘” 是一个古老的观点。我想深入剖析它的内在逻辑：为什么伟大的想法会出自边缘地带？这些想法通常是什么类型？我们又能做些什么来推动这一过程？</p><h2 id="Insiders"><a href="#Insiders" class="headerlink" title="Insiders"></a><strong>Insiders</strong></h2><h2 id="局内人"><a href="#局内人" class="headerlink" title="局内人"></a><strong>局内人</strong></h2><p>One reason so many good ideas come from the margin is simply that there’s so much of it. There have to be more outsiders than insiders, if insider means anything. If the number of outsiders is huge it will always seem as if a lot of ideas come from them, even if few do per capita. But I think there’s more going on than this. There are real disadvantages to being an insider, and in some kinds of work they can outweigh the advantages.<br>之所以有这么多好想法来自边缘，一个简单的原因是 “边缘” 本身的体量巨大。如果 “局内人” 有明确含义，那么局外人的数量必然多于局内人。即便从人均角度看，局外人产出的好想法并不多，但由于基数庞大，总会让人觉得大量想法都来自他们。不过，我认为事情远不止这么简单。成为局内人其实存在实实在在的劣势，在某些领域，这些劣势甚至会超过优势。</p><p>Imagine, for example, what would happen if the government decided to commission someone to write an official Great American Novel. First there’d be a huge ideological squabble over who to choose. Most of the best writers would be excluded for having offended one side or the other. Of the remainder, the smart ones would refuse such a job, leaving only a few with the wrong sort of ambition. The committee would choose one at the height of his career — that is, someone whose best work was behind him — and hand over the project with copious free advice about how the book should show in positive terms the strength and diversity of the American people, etc, etc.<br>举个例子，试想如果政府决定委托某人撰写一部 “官方版伟大的美国小说”，会发生什么？首先，在人选问题上会爆发激烈的意识形态争论。大多数优秀作家会因为得罪了某一方而被排除在外。剩下的人里，聪明的会拒绝这份工作，最后只留下少数野心错位的人。委员会最终会选中一位 “事业巅峰期” 的作家 —— 换句话说，就是那些最佳创作时期已经过去的人 —— 然后还会给出一大堆 “免费建议”，比如这本书必须正面展现美国人民的力量与多样性等等。</p><p>The unfortunate writer would then sit down to work with a huge weight of expectation on his shoulders. Not wanting to blow such a public commission, he’d play it safe. This book had better command respect, and the way to ensure that would be to make it a tragedy. Audiences have to be enticed to laugh, but if you kill people they feel obliged to take you seriously. As everyone knows, America plus tragedy equals the Civil War, so that’s what it would have to be about. When finally completed twelve years later, the book would be a 900-page pastiche of existing popular novels — roughly Gone with the Wind plus Roots. But its bulk and celebrity would make it a bestseller for a few months, until blown out of the water by a talk-show host’s autobiography. The book would be made into a movie and thereupon forgotten, except by the more waspish sort of reviewers, among whom it would be a byword for bogusness like Milli Vanilli or Battlefield Earth.<br>随后，这位不幸的作家会在巨大的期望压力下开始创作。由于不想搞砸这份公开委托，他会选择稳妥的路线。这本书必须赢得尊重，而确保这一点的方法，就是把它写成一部悲剧。观众需要被引导才会发笑，但只要故事里有人死亡，他们就会觉得必须严肃对待。众所周知，“美国” 加 “悲剧” 的组合，结果必然是写南北战争 —— 所以这本书的主题也就定下来了。十二年后，这本书终于完成，会是一部 900 页的作品，拼凑了各种已有的流行小说元素，大致相当于《飘》加上《根》的混合体。不过，凭借其篇幅和 “官方光环”，它会在几个月内成为畅销书，直到被某位脱口秀主持人的自传挤下榜单。之后这本书会被改编成电影，然后就此被人遗忘，只有那些尖刻的评论家还会提起它 —— 在他们眼中，这本书会成为 “虚假” 的代名词，就像 Milli Vanilli（注：曾因假唱丑闻闻名的双人组合）或《地球战场》（注：被认为是史上最差电影之一）一样。</p><p>Maybe I got a little carried away with this example. And yet is this not at each point the way such a project would play out? The government knows better than to get into the novel business, but in other fields where they have a natural monopoly, like nuclear waste dumps, aircraft carriers, and regime change, you’d find plenty of projects isomorphic to this one — and indeed, plenty that were less successful.<br>或许这个例子有些夸张，但这样的项目难道不正是在各个环节都会朝着这个方向发展吗？政府很清楚不该涉足小说创作，但在其他他们拥有天然垄断权的领域 —— 比如核废料处理、航空母舰建造、政权更迭干预 —— 你会发现大量与这个 “小说项目” 结构相似的项目，而且其中很多甚至比这更失败。</p><p>This little thought experiment suggests a few of the disadvantages of insider projects: the selection of the wrong kind of people, the excessive scope, the inability to take risks, the need to seem serious, the weight of expectations, the power of vested interests, the undiscerning audience, and perhaps most dangerous, the tendency of such work to become a duty rather than a pleasure.<br>这个小小的思想实验揭示了局内人项目的几个劣势：选错合适的人选、项目范围过于宽泛、无法承担风险、必须表现得 “严肃”、承受巨大的期望压力、受既得利益者影响、面对缺乏判断力的受众，而最危险的或许是 —— 这类工作会逐渐变成一种责任，而非乐趣。</p><h2 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a><strong>Tests</strong></h2><h2 id="筛选标准"><a href="#筛选标准" class="headerlink" title="筛选标准"></a><strong>筛选标准</strong></h2><p>A world with outsiders and insiders implies some kind of test for distinguishing between them. And the trouble with most tests for selecting elites is that there are two ways to pass them: to be good at what they try to measure, and to be good at hacking the test itself.<br>一个存在局内人与局外人的世界，必然需要某种筛选标准来区分两者。但大多数筛选精英的标准都存在一个问题：通过标准的方式有两种 —— 要么真正擅长标准想要衡量的能力，要么擅长 “钻标准的空子”。</p><p>So the first question to ask about a field is how honest its tests are, because this tells you what it means to be an outsider. This tells you how much to trust your instincts when you disagree with authorities, whether it’s worth going through the usual channels to become one yourself, and perhaps whether you want to work in this field at all.<br>因此，看待一个领域时，首先要问的是它的筛选标准有多 “诚实”—— 因为这能让你明白 “成为局外人” 意味着什么。它会告诉你，当你与权威观点不一致时，该在多大程度上相信自己的直觉；告诉你是否值得通过常规渠道让自己成为局内人；甚至告诉你是否真的想在这个领域工作。</p><p>Tests are least hackable when there are consistent standards for quality, and the people running the test really care about its integrity. Admissions to PhD programs in the hard sciences are fairly honest, for example. The professors will get whoever they admit as their own grad students, so they try hard to choose well, and they have a fair amount of data to go on. Whereas undergraduate admissions seem to be much more hackable.<br>当一个领域存在统一的质量标准，且执行筛选的人真正重视标准的公正性时，这类筛选标准就最难被钻空子。例如，硬科学领域（注：指自然科学中依赖实验与量化分析的学科，如物理、化学等）的博士项目录取就相当诚实。教授们录取的学生会成为自己的研究生，所以他们会尽力做好筛选，而且也有足够多的客观数据作为参考。相比之下，本科录取则更容易被 “钻空子”。</p><p>One way to tell whether a field has consistent standards is the overlap between the leading practitioners and the people who teach the subject in universities. At one end of the scale you have fields like math and physics, where nearly all the teachers are among the best practitioners. In the middle are medicine, law, history, architecture, and computer science, where many are. At the bottom are business, literature, and the visual arts, where there’s almost no overlap between the teachers and the leading practitioners. It’s this end that gives rise to phrases like “those who can’t do, teach.”<br>判断一个领域是否有统一标准，有一种方法是看该领域的顶尖从业者与大学里教授这门学科的人之间有多少重合。在光谱的一端是数学和物理这样的领域，几乎所有教师都是该领域最优秀的从业者；中间地带包括医学、法律、历史、建筑学和计算机科学，这些领域的教师中有不少是顶尖从业者；而在最底端的是商业、文学和视觉艺术 —— 在这些领域，教师与顶尖从业者之间几乎没有重合。也正是这个领域，催生了 “不会做事的人才去教书” 这样的说法。</p><p>Incidentally, this scale might be helpful in deciding what to study in college. When I was in college the rule seemed to be that you should study whatever you were most interested in. But in retrospect you’re probably better off studying something moderately interesting with someone who’s good at it than something very interesting with someone who isn’t. You often hear people say that you shouldn’t major in business in college, but this is actually an instance of a more general rule: don’t learn things from teachers who are bad at them.<br>顺便说一句，这个 “重合度光谱” 或许能帮你决定在大学学什么。我上大学时，似乎大家都遵循 “学自己最感兴趣的东西” 这一原则。但现在回想起来，选择一个 “还算感兴趣” 的领域，跟着擅长它的人学习，可能比选择一个 “非常感兴趣” 的领域，却跟着不擅长的人学习要好得多。你经常会听到有人说 “不要在大学主修商科”，但这其实是一个更普遍原则的体现：不要向不擅长某件事的人学习这件事。</p><p>How much you should worry about being an outsider depends on the quality of the insiders. If you’re an amateur mathematician and think you’ve solved a famous open problem, better go back and check. When I was in grad school, a friend in the math department had the job of replying to people who sent in proofs of Fermat’s last theorem and so on, and it did not seem as if he saw it as a valuable source of tips — more like manning a mental health hotline. Whereas if the stuff you’re writing seems different from what English professors are interested in, that’s not necessarily a problem.<br>你需要在多大程度上担心自己是 “局外人”，取决于局内人的水平。如果你是一名业余数学家，且认为自己解决了某个著名的未解决难题，那最好再回去检查一遍。我读研究生时，数学系有个朋友的工作是回复那些寄来费马大定理证明等内容的人，他显然不觉得这些来信能提供有价值的思路 —— 这更像是在值守一条心理健康热线。但如果你写的东西与英语教授感兴趣的内容不同，那未必是个问题。</p><h2 id="Anti-Tests"><a href="#Anti-Tests" class="headerlink" title="Anti-Tests"></a><strong>Anti-Tests</strong></h2><h2 id="反向筛选标准"><a href="#反向筛选标准" class="headerlink" title="反向筛选标准"></a><strong>反向筛选标准</strong></h2><p>Where the method of selecting the elite is thoroughly corrupt, most of the good people will be outsiders. In art, for example, the image of the poor, misunderstood genius is not just one possible image of a great artist: it’s the standard image. I’m not saying it’s correct, incidentally, but it is telling how well this image has stuck. You couldn’t make a rap like that stick to math or medicine. [2]<br>当筛选精英的方式完全腐败时，大多数优秀的人都会沦为局外人。以艺术领域为例，“贫穷且不被理解的天才” 不仅是伟大艺术家的一种可能形象，更是一种标准形象。顺便说一句，我并不是说这种形象是正确的，但它能长久流传，本身就很能说明问题。你绝不可能在数学或医学领域，塑造出类似的经典形象。[2]</p><p>If it’s corrupt enough, a test becomes an anti-test, filtering out the people it should select by making them to do things only the wrong people would do. Popularity in high school seems to be such a test. There are plenty of similar ones in the grownup world. For example, rising up through the hierarchy of the average big company demands an attention to politics few thoughtful people could spare. [3] Someone like Bill Gates can grow a company under him, but it’s hard to imagine him having the patience to climb the corporate ladder at General Electric — or Microsoft, actually.<br>若筛选机制腐败到一定程度，就会沦为 “反向筛选”—— 它会迫使本应被选中的人去做只有不合适的人才愿意做的事，从而将前者排除在外。高中时期的 “受欢迎程度” 似乎就是这样一种筛选。在成人世界里，类似的情况也比比皆是。例如，在普通大公司的层级体系中晋升，需要花费大量精力钻研 “办公室政治”，而大多数有思想的人都不愿在这方面投入时间。[3] 像比尔・盖茨这样的人，有能力自己创办并发展公司，但很难想象他会有耐心在通用电气 —— 事实上，即便在微软 —— 的职场阶梯上一步步攀爬。</p><p>It’s kind of strange when you think about it, because lord-of-the-flies schools and bureaucratic companies are both the default. There are probably a lot of people who go from one to the other and never realize the whole world doesn’t work this way.<br>仔细想想，这其实有些奇怪：像 “蝇王” 式（注：源自小说《蝇王》，形容群体中混乱、残酷的生存状态）混乱的学校，以及充满官僚主义的公司，竟然都是一种 “默认常态”。或许有很多人从这样的学校进入这样的公司，却从未意识到，并非整个世界都遵循这种逻辑运转。</p><p>I think that’s one reason big companies are so often blindsided by startups. People at big companies don’t realize the extent to which they live in an environment that is one large, ongoing test for the wrong qualities.<br>我认为，这正是大公司常常被初创公司 “打个措手不及” 的原因之一。大公司的人没有意识到，他们所处的环境，本质上是一个持续不断、却在筛选 “错误特质” 的大型测试场。</p><p>If you’re an outsider, your best chances for beating insiders are obviously in fields where corrupt tests select a lame elite. But there’s a catch: if the tests are corrupt, your victory won’t be recognized, at least in your lifetime. You may feel you don’t need that, but history suggests it’s dangerous to work in fields with corrupt tests. You may beat the insiders, and yet not do as good work, on an absolute scale, as you would in a field that was more honest.<br>如果你是局外人，那么击败局内人的最佳机会，显然存在于那些筛选机制腐败、选出的精英能力平庸的领域。但这里有个隐患：若筛选机制腐败，你的成就可能无法得到认可，至少在你有生之年是如此。你或许觉得自己不需要这种认可，但历史表明，在筛选机制腐败的领域工作是有风险的。即便你能击败局内人，从绝对水平来看，你做出的成果也可能不如在筛选机制更公正的领域中那么出色。</p><p>Standards in art, for example, were almost as corrupt in the first half of the eighteenth century as they are today. This was the era of those fluffy idealized portraits of countesses with their lapdogs. Chardin decided to skip all that and paint ordinary things as he saw them. He’s now considered the best of that period — and yet not the equal of Leonardo or Bellini or Memling, who all had the additional encouragement of honest standards.<br>以艺术领域为例，18 世纪上半叶的艺术标准几乎和如今一样腐败。那个时代流行的是描绘女伯爵与哈巴狗的、浮夸而理想化的肖像画。夏尔丹（注：法国写实主义画家）选择摒弃这一切，转而描绘他眼中的日常事物。如今，他被视为那个时代最优秀的画家 —— 但仍无法与达・芬奇、贝里尼或梅姆林（注：均为文艺复兴时期著名画家）相提并论，而后者都曾受益于更公正的艺术标准所带来的额外激励。</p><p>It can be worth participating in a corrupt contest, however, if it’s followed by another that isn’t corrupt. For example, it would be worth competing with a company that can spend more than you on marketing, as long as you can survive to the next round, when customers compare your actual products. Similarly, you shouldn’t be discouraged by the comparatively corrupt test of college admissions, because it’s followed immediately by less hackable tests. [4]<br>不过，若腐败的竞争之后还有一场公正的竞争，那么参与前者或许是值得的。例如，即便对手公司在营销上的投入比你多，只要你能撑到下一轮 —— 也就是消费者直接对比产品本身的阶段 —— 这场竞争就值得参与。同样，你也不必因大学录取这种相对腐败的筛选机制而气馁，因为紧随其后的，就是更难被 “钻空子” 的公正测试。[4]</p><h2 id="Risk"><a href="#Risk" class="headerlink" title="Risk"></a><strong>Risk</strong></h2><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a><strong>风险</strong></h2><p>Even in a field with honest tests, there are still advantages to being an outsider. The most obvious is that outsiders have nothing to lose. They can do risky things, and if they fail, so what? Few will even notice.<br>即便在筛选机制公正的领域，局外人依然拥有优势。最明显的一点是，局外人 “没什么可失去的”。他们可以尝试有风险的事，即便失败了又如何？几乎没人会在意。</p><p>The eminent, on the other hand, are weighed down by their eminence. Eminence is like a suit: it impresses the wrong people, and it constrains the wearer.<br>反观那些知名人士，他们的 “名望” 却成了负担。名望就像一套西装：它能给不该被打动的人留下印象，却会束缚穿着它的人。</p><p>Outsiders should realize the advantage they have here. Being able to take risks is hugely valuable. Everyone values safety too much, both the obscure and the eminent. No one wants to look like a fool. But it’s very useful to be able to. If most of your ideas aren’t stupid, you’re probably being too conservative. You’re not bracketing the problem.<br>局外人应当意识到自己在这方面的优势。敢于冒险的能力极具价值。无论是无名之辈还是知名人士，所有人都过于看重 “安全”，没人愿意看起来像个傻瓜。但事实上，“愿意看起来像傻瓜” 是一种非常有用的特质。如果你的大多数想法都不算 “愚蠢”，那很可能说明你过于保守，没有充分探索问题的边界。</p><p>Lord Acton said we should judge talent at its best and character at its worst. For example, if you write one great book and ten bad ones, you still count as a great writer — or at least, a better writer than someone who wrote eleven that were merely good. Whereas if you’re a quiet, law-abiding citizen most of the time but occasionally cut someone up and bury them in your backyard, you’re a bad guy.<br>阿克顿勋爵（注：19 世纪英国历史学家）曾说，评价才华要看其巅峰之作，评价品格要看其最差表现。例如，若你写出一本杰作和十本烂书，你依然算得上是伟大的作家 —— 至少比写出十一本 “还不错” 的书的人更优秀。但如果你平时是个安静守法的公民，却偶尔会杀人并埋在自家后院，那你就是个坏人。</p><p>Almost everyone makes the mistake of treating ideas as if they were indications of character rather than talent — as if having a stupid idea made you stupid. There’s a huge weight of tradition advising us to play it safe. “Even a fool is thought wise if he keeps silent,” says the Old Testament (Proverbs 17:28).<br>几乎所有人都会犯一个错误：将想法视为品格的体现，而非才华的体现 —— 仿佛有一个愚蠢的想法，就意味着你本人很愚蠢。传统观念也在极力劝我们 “稳妥行事”。《旧约圣经》中就有这样的说法：“愚昧人静默不言，也可算为智慧”（《箴言》17:28）。</p><p>Well, that may be fine advice for a bunch of goatherds in Bronze Age Palestine. There conservatism would be the order of the day. But times have changed. It might still be reasonable to stick with the Old Testament in political questions, but materially the world now has a lot more state. Tradition is less of a guide, not just because things change faster, but because the space of possibilities is so large. The more complicated the world gets, the more valuable it is to be willing to look like a fool.<br>诚然，对于青铜时代巴勒斯坦地区的牧羊人来说，这或许是个不错的建议 —— 在那个时代，保守本就是常态。但时代已经变了。在政治问题上遵循《旧约》的观点或许仍有道理，但在物质层面，如今的世界已经有了天翻地覆的变化。传统不再是可靠的指南，这不仅是因为事物变化更快，还因为 “可能性的空间” 变得无比广阔。世界越复杂，“愿意看起来像傻瓜” 的品质就越有价值。</p><h2 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a><strong>Delegation</strong></h2><h2 id="委派"><a href="#委派" class="headerlink" title="委派"></a><strong>委派</strong></h2><p>And yet the more successful people become, the more heat they get if they screw up — or even seem to screw up. In this respect, as in many others, the eminent are prisoners of their own success. So the best way to understand the advantages of being an outsider may be to look at the disadvantages of being an insider.<br>然而，一个人越成功，一旦搞砸事情 —— 哪怕只是 “看似搞砸”—— 所面临的压力就越大。在这方面，与其他许多方面一样，知名人士其实是自己成功的 “囚徒”。因此，要理解局外人的优势，最好的方法或许是审视局内人的劣势。</p><p>If you ask eminent people what’s wrong with their lives, the first thing they’ll complain about is the lack of time. A friend of mine at Google is fairly high up in the company and went to work for them long before they went public. In other words, he’s now rich enough not to have to work. I asked him if he could still endure the annoyances of having a job, now that he didn’t have to. And he said that there weren’t really any annoyances, except — and he got a wistful look when he said this — that he got so much email.<br>若你问知名人士生活中最大的困扰是什么，他们最先抱怨的往往是 “时间不够用”。我有个朋友在谷歌工作，职位相当高，而且在谷歌上市前就加入了公司 —— 换句话说，他现在已经富有到无需工作的程度。我问他，既然没必要再工作，是否还能忍受职场中的那些烦心事。他说，其实没什么烦心事，除了 —— 说这话时，他露出了怅然若失的表情 —— 每天要处理大量邮件。</p><p>The eminent feel like everyone wants to take a bite out of them. The problem is so widespread that people pretending to be eminent do it by pretending to be overstretched.<br>知名人士会觉得，所有人都想从他们身上 “分一杯羹”。这个问题如此普遍，以至于那些想装成 “知名人士” 的人，都会通过假装 “忙得不可开交” 来达到目的。</p><p>The lives of the eminent become scheduled, and that’s not good for thinking. One of the great advantages of being an outsider is long, uninterrupted blocks of time. That’s what I remember about grad school: apparently endless supplies of time, which I spent worrying about, but not writing, my dissertation. Obscurity is like health food — unpleasant, perhaps, but good for you. Whereas fame tends to be like the alcohol produced by fermentation. When it reaches a certain concentration, it kills off the yeast that produced it.<br>知名人士的生活被各种日程填满，这对思考非常不利。局外人最大的优势之一，就是拥有大块、不受干扰的时间。我还记得读研究生时的状态：仿佛有无限的时间，而我却把这些时间都用来焦虑，迟迟没动笔写论文。“默默无闻” 就像健康食品 —— 或许不好吃，但对人有益。而名望则更像发酵产生的酒精：当浓度达到一定程度时，就会杀死产生它的酵母（注：此处比喻名望会扼杀创造名望的创造力）。</p><p>The eminent generally respond to the shortage of time by turning into managers. They don’t have time to work. They’re surrounded by junior people they’re supposed to help or supervise. The obvious solution is to have the junior people do the work. Some good stuff happens this way, but there are problems it doesn’t work so well for: the kind where it helps to have everything in one head.<br>面对时间短缺，知名人士通常会选择 “转型为管理者”。他们没有时间亲自做事，身边围绕着需要他们指导或监督的下属。最直接的解决办法，就是让下属来承担具体工作。这种方式确实能做出一些好成果，但对于某些问题却效果不佳 —— 比如那些需要 “一个人掌握所有细节” 才能解决的问题。</p><p>For example, it recently emerged that the famous glass artist Dale Chihuly hasn’t actually blown glass for 27 years. He has assistants do the work for him. But one of the most valuable sources of ideas in the visual arts is the resistance of the medium. That’s why oil paintings look so different from watercolors. In principle you could make any mark in any medium; in practice the medium steers you. And if you’re no longer doing the work yourself, you stop learning from this.<br>例如，最近有消息称，著名玻璃艺术家戴尔・奇胡利（注：美国玻璃艺术家，以大型玻璃雕塑闻名）已经有 27 年没有亲手吹制玻璃了，所有工作都由助手完成。但在视觉艺术领域，创意最宝贵的来源之一，恰恰是 “媒介本身的局限性”。这就是油画与水彩画看起来截然不同的原因：理论上，你可以在任何媒介上留下任何痕迹；但实际上，媒介会反过来引导你的创作。而如果你不再亲手创作，就会失去从这种 “媒介引导” 中学习的机会。</p><p>So if you want to beat those eminent enough to delegate, one way to do it is to take advantage of direct contact with the medium. In the arts it’s obvious how: blow your own glass, edit your own films, stage your own plays. And in the process pay close attention to accidents and to new ideas you have on the fly. This technique can be generalized to any sort of work: if you’re an outsider, don’t be ruled by plans. Planning is often just a weakness forced on those who delegate.<br>因此，若你想击败那些因知名而 “委派他人做事” 的人，方法之一就是利用 “与创作媒介直接接触” 的优势。在艺术领域，这一点很明确：自己吹制玻璃、自己剪辑电影、自己编排戏剧。在这个过程中，要密切关注意外情况，以及即兴产生的新想法。这种方法可以推广到任何领域：如果你是局外人，就不要被计划束缚。“做计划” 往往是那些需要委派他人的人，因自身局限而被迫采取的做法。</p><p>Is there a general rule for finding problems best solved in one head? Well, you can manufacture them by taking any project usually done by multiple people and trying to do it all yourself. Wozniak’s work was a classic example: he did everything himself, hardware and software, and the result was miraculous. He claims not one bug was ever found in the Apple II, in either hardware or software.<br>有没有一个通用原则，能帮我们找到 “最好由一个人解决” 的问题？答案是，你可以将任何通常由多人完成的项目，尝试自己独立完成 —— 这样就能找到这类问题。沃兹尼亚克的工作就是经典案例：他独自一人完成了所有工作，包括硬件和软件设计，最终成果堪称奇迹。他声称，苹果 II 型电脑的硬件和软件中，从未发现过任何漏洞。</p><p>Another way to find good problems to solve in one head is to focus on the grooves in the chocolate bar — the places where tasks are divided when they’re split between several people. If you want to beat delegation, focus on a vertical slice: for example, be both writer and editor, or both design buildings and construct them.<br>另一种找到 “适合独自解决的好问题” 的方法，是关注 “巧克力棒上的凹槽”—— 也就是多人协作时，任务被分割的节点。若你想击败 “委派模式”，可以专注于 “垂直领域的完整流程”：例如，既当作家又当编辑，或既设计建筑又负责施工。</p><p>One especially good groove to span is the one between tools and things made with them. For example, programming languages and applications are usually written by different people, and this is responsible for a lot of the worst flaws in programming languages. I think every language should be designed simultaneously with a large application written in it, the way C was with Unix.<br>在所有 “需要跨越的凹槽” 中，“工具” 与 “用工具制作的产品” 之间的界限尤为关键。例如，编程语言和应用程序通常由不同的人开发，这正是许多编程语言存在严重缺陷的原因。我认为，每种编程语言在设计时，都应该同步用它来开发一个大型应用程序 —— 就像 C 语言与 Unix 操作系统同步开发那样。</p><p>Techniques for competing with delegation translate well into business, because delegation is endemic there. Instead of avoiding it as a drawback of senility, many companies embrace it as a sign of maturity. In big companies software is often designed, implemented, and sold by three separate types of people. In startups one person may have to do all three. And though this feels stressful, it’s one reason startups win. The needs of customers and the means of satisfying them are all in one head.<br>与 “委派模式” 竞争的方法，在商业领域同样适用，因为 “委派” 在商业世界中极为普遍。许多公司非但没有将委派视为 “发展到一定阶段的弊端” 而规避，反而将其视为 “成熟的标志”。在大公司里，软件的设计、开发和销售，通常由三类不同的人负责；而在初创公司，一个人可能需要包揽这三项工作。尽管这会让人感到压力，但这正是初创公司能够胜出的原因之一 —— 因为客户的需求与满足需求的方法，都集中在同一个人的脑海里。</p><h2 id="Focus"><a href="#Focus" class="headerlink" title="Focus"></a><strong>Focus</strong></h2><h2 id="专注"><a href="#专注" class="headerlink" title="专注"></a><strong>专注</strong></h2><p>The very skill of insiders can be a weakness. Once someone is good at something, they tend to spend all their time doing that. This kind of focus is very valuable, actually. Much of the skill of experts is the ability to ignore false trails. But focus has drawbacks: you don’t learn from other fields, and when a new approach arrives, you may be the last to notice.<br>局内人自身的专业技能，恰恰可能成为一种弱点。一个人一旦擅长某件事，往往会把所有时间都投入其中。事实上，这种专注本身极具价值 —— 专家的核心能力之一，就是能够忽略那些无关的 “岔路”。但专注也有弊端：你无法从其他领域汲取经验，而且当新的方法出现时，你可能会是最后一个察觉的人。</p><p>For outsiders this translates into two ways to win. One is to work on a variety of things. Since you can’t derive as much benefit (yet) from a narrow focus, you may as well cast a wider net and derive what benefit you can from similarities between fields. Just as you can compete with delegation by working on larger vertical slices, you can compete with specialization by working on larger horizontal slices — by both writing and illustrating your book, for example.<br>对於局外人而言，这意味着有两种胜出路径。第一种是涉足多个领域。既然你暂时无法从 “窄领域专注” 中获得太多收益，不如扩大范围，从不同领域的共性中挖掘价值。就像你可以通过 “覆盖垂直领域全流程”（如前文所述）来对抗 “委派模式” 一样，你也可以通过 “覆盖水平领域多技能” 来对抗 “专业化”—— 例如，自己既写书又为书绘制插图。</p><p>The second way to compete with focus is to see what focus overlooks. In particular, new things. So if you’re not good at anything yet, consider working on something so new that no one else is either. It won’t have any prestige yet, if no one is good at it, but you’ll have it all to yourself.<br>第二种对抗 “专注” 的方法，是关注专注所忽略的事物 —— 尤其是新事物。因此，如果你目前在任何领域都不算擅长，不妨考虑投身於一个足够新、以至於还没人擅长的领域。既然没人精通，这个领域暂时不会有什麼声望，但你能独享这片 “蓝海”。</p><p>The potential of a new medium is usually underestimated, precisely because no one has yet explored its possibilities. Before Durer tried making engravings, no one took them very seriously. Engraving was for making little devotional images — basically fifteenth century baseball cards of saints. Trying to make masterpieces in this medium must have seemed to Durer’s contemporaries the way that, say, making masterpieces in comics might seem to the average person today.<br>新媒介的潜力往往被低估，原因很简单：还没人探索过它的可能性。在丢勒（注：文艺复兴时期德国艺术家）尝试制作版画之前，没人把版画当回事 —— 当时的版画只是用来制作小型宗教画像，本质上就像 15 世纪的 “圣徒棒球卡”。在丢勒的同时代人看来，试图用版画创作杰作，大概就像如今普通人看待 “用漫画创作杰作” 一样荒谬。</p><p>In the computer world we get not new mediums but new platforms: the minicomputer, the microprocessor, the web-based application. At first they’re always dismissed as being unsuitable for real work. And yet someone always decides to try anyway, and it turns out you can do more than anyone expected. So in the future when you hear people say of a new platform: yeah, it’s popular and cheap, but not ready yet for real work, jump on it.<br>在计算机领域，我们遇到的不是新媒介，而是新平台：小型计算机、微处理器、基於网页的应用程序。起初，这些平台总会被贬低为 “不适合正经工作”。但总会有人决定放手一试，结果往往是 —— 人们能用它做到远超预期的事。因此，未来当你听到有人评价某个新平台：“嗯，它确实流行又便宜，但还没准备好用于正经工作” 时，赶紧抓住这个机会。</p><p>As well as being more comfortable working on established lines, insiders generally have a vested interest in perpetuating them. The professor who made his reputation by discovering some new idea is not likely to be the one to discover its replacement. This is particularly true with companies, who have not only skill and pride anchoring them to the status quo, but money as well. The Achilles heel of successful companies is their inability to cannibalize themselves. Many innovations consist of replacing something with a cheaper alternative, and companies just don’t want to see a path whose immediate effect is to cut an existing source of revenue.<br>除了更习惯在成熟领域工作，局内人通常还存在 “维持现状的既得利益”。一个靠某个新理论成名的教授，不太可能成为推翻这个理论的人。企业更是如此 —— 它们不仅因专业技能和荣誉感被束缚在现状中，还被金钱利益捆绑。成功企业的致命弱点，就是无法 “自我颠覆”。许多创新本质上是用更廉价的方案替代现有产品，而企业往往不愿接受这种 “会直接削减现有收入” 的路径。</p><p>So if you’re an outsider you should actively seek out contrarian projects. Instead of working on things the eminent have made prestigious, work on things that could steal that prestige.<br>因此，如果你是局外人，应当主动寻找 “反主流项目”。不要去做那些已被知名人士赋予声望的事，而要去做那些有可能 “夺走这些声望” 的事。</p><p>The really juicy new approaches are not the ones insiders reject as impossible, but those they ignore as undignified. For example, after Wozniak designed the Apple II he offered it first to his employer, HP. They passed. One of the reasons was that, to save money, he’d designed the Apple II to use a TV as a monitor, and HP felt they couldn’t produce anything so declasse.<br>真正有价值的新方法，不是那些被局内人斥为 “不可能” 的方案，而是那些被他们视为 “不够体面” 而忽略的方案。例如，沃兹尼亚克设计出苹果 II 型电脑后，首先将其推荐给了自己的雇主惠普，但惠普拒绝了。原因之一是，为了节省成本，沃兹尼亚克设计的苹果 II 型用电视机作为显示器，而惠普认为自己不能生产如此 “低端” 的产品。</p><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a><strong>Less</strong></h2><h2 id="精简"><a href="#精简" class="headerlink" title="精简"></a><strong>精简</strong></h2><p>Wozniak used a TV as a monitor for the simple reason that he couldn’t afford a monitor. Outsiders are not merely free but compelled to make things that are cheap and lightweight. And both are good bets for growth: cheap things spread faster, and lightweight things evolve faster.<br>沃兹尼亚克用电视机当显示器，原因很简单 —— 他买不起专用显示器。局外人不仅 “可以” 做廉价、轻量化的产品，更是 “不得不” 这样做。而这两点恰恰是成长的绝佳优势：廉价的产品传播更快，轻量化的产品迭代更快。</p><p>The eminent, on the other hand, are almost forced to work on a large scale. Instead of garden sheds they must design huge art museums. One reason they work on big things is that they can: like our hypothetical novelist, they’re flattered by such opportunities. They also know that big projects will by their sheer bulk impress the audience. A garden shed, however lovely, would be easy to ignore; a few might even snicker at it. You can’t snicker at a giant museum, no matter how much you dislike it. And finally, there are all those people the eminent have working for them; they have to choose projects that can keep them all busy.<br>反观知名人士，他们几乎被迫要做 “大规模项目”。他们不能设计花园小屋，而必须设计大型艺术博物馆。原因之一是 “他们有能力做”：就像我们之前假设的那位小说家一样，他们会被这样的机会打动。同时他们也清楚，大型项目仅凭体量就能给观众留下深刻印象 —— 一座再精致的花园小屋也容易被忽视，甚至可能有人会嘲笑它；但无论你多不喜欢一座巨型博物馆，都不会嘲笑它。最後，知名人士手下有许多员工，他们必须选择能让所有人都有事可做的大项目。</p><p>Outsiders are free of all this. They can work on small things, and there’s something very pleasing about small things. Small things can be perfect; big ones always have something wrong with them. But there’s a magic in small things that goes beyond such rational explanations. All kids know it. Small things have more personality.<br>局外人则不受这些束缚。他们可以专注於小项目，而小项目本身就有一种独特的魅力。小事物可以做到完美，大事物却总有瑕疵。而且小事物中蕴含着一种难以用理性解释的魔力 —— 所有孩子都懂这一点：小事物更有 “个性”。</p><p>Plus making them is more fun. You can do what you want; you don’t have to satisfy committees. And perhaps most important, small things can be done fast. The prospect of seeing the finished project hangs in the air like the smell of dinner cooking. If you work fast, maybe you could have it done tonight.<br>此外，做小项目更有乐趣。你可以随心所欲，不必去满足委员会的要求。或许最重要的是，小项目能快速完成。想到很快就能看到成品，那种期待感就像空气中弥漫的晚餐香味 —— 只要你加快速度，或许今晚就能完成。</p><p>Working on small things is also a good way to learn. The most important kinds of learning happen one project at a time. (“Next time, I won’t…”) The faster you cycle through projects, the faster you’ll evolve.<br>做小项目也是学习的好方法。最重要的学习往往来自一个个具体项目的实践（比如总结 “下次不会再犯的错”）。你完成项目的周期越快，成长就越快。</p><p>Plain materials have a charm like small scale. And in addition there’s the challenge of making do with less. Every designer’s ears perk up at the mention of that game, because it’s a game you can’t lose. Like the JV playing the varsity, if you even tie, you win. So paradoxically there are cases where fewer resources yield better results, because the designers’ pleasure at their own ingenuity more than compensates. [5]<br>普通材料也拥有类似 “小体量” 的魅力。此外，“用有限资源完成任务” 本身就是一种挑战。所有设计师一听到这种挑战，都会立刻提起兴趣 —— 因为这是一场 “稳赚不赔的游戏”。就像校队二队对抗一队，哪怕打平，你也算赢了。因此，看似矛盾的是：在某些情况下，资源越少，成果反而越好 —— 因为设计师从 “发挥巧思” 中获得的乐趣，足以弥补资源的不足。[5]</p><p>So if you’re an outsider, take advantage of your ability to make small and inexpensive things. Cultivate the pleasure and simplicity of that kind of work; one day you’ll miss it.<br>因此，如果你是局外人，一定要利用好自己 “能做小而廉价的事物” 的优势。享受这种工作带来的乐趣与纯粹 —— 总有一天，你会怀念这种感觉。</p><h2 id="Responsibility"><a href="#Responsibility" class="headerlink" title="Responsibility"></a><strong>Responsibility</strong></h2><h2 id="责任"><a href="#责任" class="headerlink" title="责任"></a><strong>责任</strong></h2><p>When you’re old and eminent, what will you miss about being young and obscure? What people seem to miss most is the lack of responsibilities.<br>当你年老成名后，会怀念年轻时默默无闻的什麼？人们最怀念的，似乎是 “没有那麼多责任” 的状态。</p><p>Responsibility is an occupational disease of eminence. In principle you could avoid it, just as in principle you could avoid getting fat as you get old, but few do. I sometimes suspect that responsibility is a trap and that the most virtuous route would be to shirk it, but regardless it’s certainly constraining.<br>责任是成名带来的 “职业病”。理论上，你可以避免它，就像理论上你可以避免年老发胖一样，但很少有人能做到。有时我会怀疑，责任其实是一个陷阱，而 “逃避责任” 反而是更明智的选择 —— 但无论如何，责任无疑会带来束缚。</p><p>When you’re an outsider you’re constrained too, of course. You’re short of money, for example. But that constrains you in different ways. How does responsibility constrain you? The worst thing is that it allows you not to focus on real work. Just as the most dangerous forms of procrastination are those that seem like work, the danger of responsibilities is not just that they can consume a whole day, but that they can do it without setting off the kind of alarms you’d set off if you spent a whole day sitting on a park bench.<br>当然，局外人也会面临束缚，比如缺钱。但这种束缚与责任带来的束缚截然不同。责任是如何束缚人的？最糟糕的一点是，它会让你 “无法专注於真正的工作”。就像最危险的拖延，是那些 “看似在工作” 的拖延一样 —— 责任的危险之处不仅在於它会占据你一整天的时间，更在於它不会像 “你在公园长椅上坐一整天” 那样，让你产生 “自己在浪费时间” 的警觉。</p><p>A lot of the pain of being an outsider is being aware of one’s own procrastination. But this is actually a good thing. You’re at least close enough to work that the smell of it makes you hungry.<br>局外人的许多痛苦，来自 “意识到自己在拖延”。但这其实是件好事 —— 至少你离 “真正的工作” 足够近，能被它的 “吸引力” 勾起渴望。</p><p>As an outsider, you’re just one step away from getting things done. A huge step, admittedly, and one that most people never seem to make, but only one step. If you can summon up the energy to get started, you can work on projects with an intensity (in both senses) that few insiders can match. For insiders work turns into a duty, laden with responsibilities and expectations. It’s never so pure as it was when they were young.<br>作为局外人，你离 “完成事情” 只有一步之遥。诚然，这是一大步，而且大多数人似乎永远跨不过去，但终究只是一步。只要你能鼓起勇气开始，就能以一种 “局内人难以企及的强度” 投入项目（这里的 “强度” 既指专注度，也指投入的精力）。对局内人而言，工作已经变成了一种责任，背负着各种义务和期望，再也没有年轻时那种纯粹的热爱了。</p><p>Work like a dog being taken for a walk, instead of an ox being yoked to the plow. That’s what they miss.<br>像被牵去散步的狗一样享受工作，而不是像被套上犁的牛一样被迫劳作 —— 这正是他们所怀念的状态。</p><h2 id="Audience"><a href="#Audience" class="headerlink" title="Audience"></a><strong>Audience</strong></h2><h2 id="受众"><a href="#受众" class="headerlink" title="受众"></a><strong>受众</strong></h2><p>A lot of outsiders make the mistake of doing the opposite; they admire the eminent so much that they copy even their flaws. Copying is a good way to learn, but copy the right things. When I was in college I imitated the pompous diction of famous professors. But this wasn’t what made them eminent — it was more a flaw their eminence had allowed them to sink into. Imitating it was like pretending to have gout in order to seem rich.<br>许多局外人会犯一个相反的错误：他们过分崇拜知名人士，甚至会模仿对方的缺点。模仿确实是学习的好方法，但要模仿 “对的东西”。我上大学时，曾模仿著名教授那种浮夸的措辞，但这并非他们成名的原因 —— 这种措辞更像是 “成名后被纵容出的缺点”。模仿这种缺点，就像为了显得富有而假装患痛风一样可笑。</p><p>Half the distinguishing qualities of the eminent are actually disadvantages. Imitating these is not only a waste of time, but will make you seem a fool to your models, who are often well aware of it.<br>知名人士身上，有一半的 “独特特质” 其实是缺点。模仿这些特质不仅浪费时间，还会让你在 “模仿对象” 眼中显得愚蠢 —— 而他们往往很清楚自己的这些缺点。</p><p>What are the genuine advantages of being an insider? The greatest is an audience. It often seems to outsiders that the great advantage of insiders is money — that they have the resources to do what they want. But so do people who inherit money, and that doesn’t seem to help, not as much as an audience. It’s good for morale to know people want to see what you’re making; it draws work out of you.<br>局内人真正的优势是什麼？最大的优势是 “拥有受众”。在局外人看来，局内人的最大优势似乎是金钱 —— 他们有资源去做自己想做的事。但继承遗产的人也有钱，却没因此获得太多帮助，远不如 “拥有受众” 的作用大。知道有人期待看你创作的东西，这对士气是极大的鼓舞，能推动你产出更多作品。</p><p>If I’m right that the defining advantage of insiders is an audience, then we live in exciting times, because just in the last ten years the Internet has made audiences a lot more liquid. Outsiders don’t have to content themselves anymore with a proxy audience of a few smart friends. Now, thanks to the Internet, they can start to grow themselves actual audiences. This is great news for the marginal, who retain the advantages of outsiders while increasingly being able to siphon off what had till recently been the prerogative of the elite.<br>如果我没说错，局内人的核心优势是 “受众”，那麼我们正生活在一个令人兴奋的时代 —— 因为在过去十年里，互联网让 “受众” 变得极具流动性。如今，局外人不必再满足於 “只有几个聪明朋友当‘代理受众’”；借助互联网，他们可以自己培养真正的受众。这对 “边缘群体” 来说是个好消息：他们既能保留局外人的优势，又能逐渐获得那些直到最近仍被精英阶层垄断的资源（指受众）。</p><p>Though the Web has been around for more than ten years, I think we’re just beginning to see its democratizing effects. Outsiders are still learning how to steal audiences. But more importantly, audiences are still learning how to be stolen — they’re still just beginning to realize how much deeper bloggers can dig than journalists, how much more interesting a democratic news site can be than a front page controlled by editors, and how much funnier a bunch of kids with webcams can be than mass-produced sitcoms.<br>尽管互联网已经存在了十多年，但我认为它的 “民主化效应” 才刚刚开始显现。局外人仍在学习如何 “争夺受众”，但更重要的是，受众也在学习 “如何被争夺”—— 他们才刚刚开始意识到：博主能比记者挖掘更深入的内容；民主型新闻网站能比编辑掌控的头版更有趣；一群拿着摄像头的年轻人，能比批量生产的情景喜剧更搞笑。</p><p>The big media companies shouldn’t worry that people will post their copyrighted material on YouTube. They should worry that people will post their own stuff on YouTube, and audiences will watch that instead.<br>大型媒体公司不该担心有人会把他们的版权内容发到 YouTube 上，而该担心人们会把自己创作的内容发到 YouTube 上 —— 观众会转而看这些内容。</p><h2 id="Hacking"><a href="#Hacking" class="headerlink" title="Hacking"></a><strong>Hacking</strong></h2><h2 id="即兴创作（“拼凑式创新”）"><a href="#即兴创作（“拼凑式创新”）" class="headerlink" title="即兴创作（“拼凑式创新”）"></a><strong>即兴创作（“拼凑式创新”）</strong></h2><p>If I had to condense the power of the marginal into one sentence it would be: just try hacking something together. That phrase draws in most threads I’ve mentioned here. Hacking something together means deciding what to do as you’re doing it, not a subordinate executing the vision of his boss. It implies the result won’t be pretty, because it will be made quickly out of inadequate materials. It may work, but it won’t be the sort of thing the eminent would want to put their name on. Something hacked together means something that barely solves the problem, or maybe doesn’t solve the problem at all, but another you discovered en route. But that’s ok, because the main value of that initial version is not the thing itself, but what it leads to. Insiders who daren’t walk through the mud in their nice clothes will never make it to the solid ground on the other side.<br>若要把 “边缘的力量” 浓缩成一句话，那就是：试着即兴拼凑点东西出来。这句话能串联起我之前提到的大部分观点。“即兴拼凑” 指的是边做边确定方向，而非下属机械执行老板的构想。这种方式的结果往往不 “精致”—— 因为它是用不够完善的材料快速做成的。它可能管用，但绝不会是那种知名人士愿意署名的作品。“拼凑出来的东西”，要么勉强能解决问题，要么根本没解决原本的问题，却在过程中意外解决了另一个问题。但这没关系，因为最初版本的核心价值不在于它本身，而在于它能引出什么。那些穿着体面、不愿踩进泥泞的局内人，永远到不了对岸坚实的土地。</p><p>The word “try” is an especially valuable component. I disagree here with Yoda, who said there is no try. There is try. It implies there’s no punishment if you fail. You’re driven by curiosity instead of duty. That means the wind of procrastination will be in your favor: instead of avoiding this work, this will be what you do as a way of avoiding other work. And when you do it, you’ll be in a better mood. The more the work depends on imagination, the more that matters, because most people have more ideas when they’re happy.<br>“试着” 这个词尤为关键。我不太认同尤达（《星球大战》角色）所说的 “没有‘试着’，只有‘做到’或‘没做到’”——“试着做” 是存在的。它意味着即使失败，也不会有惩罚；你做事的动力是好奇心，而非责任感。这会让 “拖延” 反而对你有利：你不会逃避这件事，反而会把做它当作逃避其他事的方式。而且做的时候，你的心情会更轻松。工作对想象力的依赖程度越高，心情的影响就越大 —— 因为大多数人在开心时，能产生更多想法。</p><p>If I could go back and redo my twenties, that would be one thing I’d do more of: just try hacking things together. Like many people that age, I spent a lot of time worrying about what I should do. I also spent some time trying to build stuff. I should have spent less time worrying and more time building. If you’re not sure what to do, make something.<br>如果能回到二十多岁重新来过，我一定会多做一件事：试着即兴拼凑些东西。和很多同龄人一样，那时的我总在纠结 “该做什么”，虽然也花了些时间尝试创作，但其实应该少些焦虑、多些行动。如果你不确定该做什么，那就动手做点东西出来。</p><p>Raymond Chandler’s advice to thriller writers was “When in doubt, have a man come through a door with a gun in his hand.” He followed that advice. Judging from his books, he was often in doubt. But though the result is occasionally cheesy, it’s never boring. In life, as in books, action is underrated.<br>雷蒙德・钱德勒（美国硬汉派侦探小说作家）给惊悚小说作家的建议是：“不确定怎么写时，就让一个男人举着枪从门里走进来。” 他自己也践行了这条建议。从他的作品来看，他确实经常 “不确定”。虽然这样写出来的内容有时显得俗套，但绝不会无聊。无论是生活还是写作，“行动” 的价值都被低估了。</p><p>Fortunately the number of things you can just hack together keeps increasing. People fifty years ago would be astonished that one could just hack together a movie, for example. Now you can even hack together distribution. Just make stuff and put it online.<br>幸运的是，如今能 “即兴拼凑” 的事物越来越多。比如，五十年前的人绝对想不到，普通人也能 “拼凑出一部电影”；现在，连 “传播渠道” 都能即兴搭建 —— 只要做出东西，放到网上就行。</p><h2 id="Inappropriate"><a href="#Inappropriate" class="headerlink" title="Inappropriate"></a><strong>Inappropriate</strong></h2><h2 id="“不合时宜”"><a href="#“不合时宜”" class="headerlink" title="“不合时宜”"></a><strong>“不合时宜”</strong></h2><p>If you really want to score big, the place to focus is the margin of the margin: the territories only recently captured from the insiders. That’s where you’ll find the juiciest projects still undone, either because they seemed too risky, or simply because there were too few insiders to explore everything.<br>如果真想取得重大突破，应该关注 “边缘的边缘”—— 那些刚刚从局内人手中 “夺取” 的领域。在那里，你能找到最有价值且尚未被开发的项目：要么是因为局内人觉得风险太高，要么就是因为局内人数量太少，无法探索所有可能性。</p><p>This is why I spend most of my time writing essays lately. The writing of essays used to be limited to those who could get them published. In principle you could have written them and just shown them to your friends; in practice that didn’t work. [6] An essayist needs the resistance of an audience, just as an engraver needs the resistance of the plate.<br>这就是我最近大部分时间都在写随笔的原因。过去，随笔写作只局限于那些能发表文章的人。理论上，你可以写完随笔只给朋友看，但实际上这种方式行不通。[6] 随笔作家需要受众的 “反馈压力”，就像版画家需要金属板的 “阻力” 一样（注：版画家需在金属板上刻制图案，金属板的硬度会形成创作阻力，反而能激发灵感）。</p><p>Up till a few years ago, writing essays was the ultimate insider’s game. Domain experts were allowed to publish essays about their field, but the pool allowed to write on general topics was about eight people who went to the right parties in New York. Now the reconquista has overrun this territory, and, not surprisingly, found it sparsely cultivated. There are so many essays yet unwritten. They tend to be the naughtier ones; the insiders have pretty much exhausted the motherhood and apple pie topics.<br>就在几年前，写随笔还是 “终极局内人游戏”。只有领域专家能发表本领域的随笔，而能写通用话题随笔的人，大概只有纽约那些能参加 “高端派对” 的八个人。如今，“重新征服” 这片领域的人越来越多，不出所料，大家发现这里几乎没被开发过 —— 还有太多随笔没被写出来，而且大多是 “更大胆、更出格” 的主题；那些 “歌颂母爱、赞美苹果派” 式的安全话题，早就被局内人写遍了。</p><p>This leads to my final suggestion: a technique for determining when you’re on the right track. You’re on the right track when people complain that you’re unqualified, or that you’ve done something inappropriate. If people are complaining, that means you’re doing something rather than sitting around, which is the first step. And if they’re driven to such empty forms of complaint, that means you’ve probably done something good.<br>这引出我的最后一条建议：一个判断自己是否走在正确道路上的方法。当人们抱怨你 “不够格”，或指责你做的事 “不合时宜” 时，你就走对了。有人抱怨，说明你在行动，而不是无所事事 —— 这本身就是第一步；如果他们只能用这种空洞的理由指责你，说明你很可能做出了有价值的事。</p><p>If you make something and people complain that it doesn’t work, that’s a problem. But if the worst thing they can hit you with is your own status as an outsider, that implies that in every other respect you’ve succeeded. Pointing out that someone is unqualified is as desperate as resorting to racial slurs. It’s just a legitimate sounding way of saying: we don’t like your type around here.<br>如果你做了某件事，别人抱怨 “它不管用”，那确实是个问题；但如果他们能用来攻击你的 “最有力武器”，只是你 “局外人” 的身份，那就说明你在其他所有方面都成功了。指责别人 “不够格”，和使用种族歧视言论一样，都是黔驴技穷的表现 —— 它只是一种听起来 “合理” 的说法，本质上是在说：“我们不喜欢你这种人在这里。”</p><p>But the best thing of all is when people call what you’re doing inappropriate. I’ve been hearing this word all my life and I only recently realized that it is, in fact, the sound of the homing beacon. “Inappropriate” is the null criticism. It’s merely the adjective form of “I don’t like it.”<br>但最棒的情况，是别人说你做的事 “不合时宜”。我这辈子总听到这个词，直到最近才意识到，它其实是 “指路明灯” 的信号。“不合时宜” 是一种 “无效批评”，它只是 “我不喜欢” 的形容词形式而已。</p><p>So that, I think, should be the highest goal for the marginal. Be inappropriate. When you hear people saying that, you’re golden. And they, incidentally, are busted.<br>因此，我认为 “边缘群体” 的最高目标应该是：做 “不合时宜” 的事。当你听到别人这么说你时，就说明你走对了；而他们，顺便说一句，已经输了。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>[1] The facts about Apple’s early history are from an interview with Steve Wozniak in Jessica Livingston’s Founders at Work.<br>[1] 关于苹果早期历史的事实，源自杰西卡・利文斯顿所著《创业者访谈录》（Founders at Work）中对史蒂夫・沃兹尼亚克的采访。</p><p>[2] As usual the popular image is several decades behind reality. Now the misunderstood artist is not a chain-smoking drunk who pours his soul into big, messy canvases that philistines see and say “that’s not art” because it isn’t a picture of anything. The philistines have now been trained that anything hung on a wall is art. Now the misunderstood artist is a coffee-drinking vegan cartoonist whose work they see and say “that’s not art” because it looks like stuff they’ve seen in the Sunday paper.<br>[2] 通常，大众对 “艺术家” 的印象会落后现实几十年。如今，“不被理解的艺术家” 不再是 “抽着烟、喝着酒，把灵魂倾注在杂乱的大画布上，却被俗人指责‘这不是艺术’（因为画里没有具体形象）” 的人 —— 现在的俗人已经被 “训练” 得认为 “挂在墙上的都是艺术”。如今，“不被理解的艺术家” 是 “喝着咖啡的素食主义漫画家”，俗人看到他们的作品会说 “这不是艺术”，因为它看起来像周日报纸上的漫画。</p><p>[3] In fact this would do fairly well as a definition of politics: what determines rank in the absence of objective tests.<br>[3] 事实上，这可以作为 “办公室政治” 的一个不错定义：在缺乏客观标准的情况下，决定一个人地位的东西。</p><p>[4] In high school you’re led to believe your whole future depends on where you go to college, but it turns out only to buy you a couple years. By your mid-twenties the people worth impressing already judge you more by what you’ve done than where you went to school.<br>[4] 高中时，有人会让你相信 “未来全看你考上哪所大学”，但事实是，大学学历只能给你 “两年优势”。到二十五六岁时，那些值得你去 “打动” 的人，评判你的标准会变成 “你做过什么”，而非 “你毕业于哪所学校”。</p><p>[5] Managers are presumably wondering, how can I make this miracle happen? How can I make the people working for me do more with less? Unfortunately the constraint probably has to be self-imposed. If you’re expected to do more with less, then you’re being starved, not eating virtuously.<br>[5] 管理者可能会想：“我怎么才能创造这种奇迹？怎么让下属用更少的资源做更多事？” 遗憾的是，这种 “资源约束” 很可能需要是 “自我施加的”。如果是别人要求你 “用更少资源做更多事”，那不是 “主动精简”，而是 “被剥夺资源”。</p><p>[6] Without the prospect of publication, the closest most people come to writing essays is to write in a journal. I find I never get as deeply into subjects as I do in proper essays. As the name implies, you don’t go back and rewrite journal entries over and over for two weeks.<br>[6] 没有发表的可能时，大多数人最接近 “写随笔” 的行为是写日记。但我发现，写日记时我永远无法像写正式随笔那样深入探讨一个话题 —— 顾名思义，你不会花两周时间反复修改一篇日记。</p><p>Thanks to Sam Altman, Trevor Blackwell, Paul Buchheit, Sarah Harlin, Jessica Livingston, Jackie McDonough, Robert Morris, Olin Shivers, and Chris Small for reading drafts of this, and to Chris Small and Chad Fowler for inviting me to speak.<br>感谢山姆・奥特曼、特雷弗・布莱克韦尔、保罗・布赫海特、萨拉・哈林、杰西卡・利文斯顿、杰姬・麦克多诺、罗伯特・莫里斯、奥林・希弗斯和克里斯・斯莫尔阅读本文初稿，也感谢克里斯・斯莫尔和查德・福勒邀请我进行相关演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么初创公司扎堆出现在美国</title>
    <link href="/2025/09/09/why-startups-condense-in-america/"/>
    <url>/2025/09/09/why-startups-condense-in-america/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-Startups-Condense-in-America"><a href="#Why-Startups-Condense-in-America" class="headerlink" title="Why Startups Condense in America"></a>Why Startups Condense in America</h1><h1 id="为什么初创公司扎堆出现在美国"><a href="#为什么初创公司扎堆出现在美国" class="headerlink" title="为什么初创公司扎堆出现在美国"></a>为什么初创公司扎堆出现在美国</h1><p>原文链接: <a href="https://paulgraham.com/america.html">https://paulgraham.com/america.html</a></p><p>May 2006</p><p>(This essay is derived from a keynote at Xtech.)<br>（本文改编自作者在 Xtech 大会上的主题演讲）</p><p>Startups happen in clusters. There are a lot of them in Silicon Valley and Boston, and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.<br>初创公司的出现呈现集群化特征。硅谷和波士顿有大量初创公司，而芝加哥或迈阿密则寥寥无几。一个希望培育初创公司的国家，或许需要先弄清楚是什么因素促成了这些集群的形成，并加以复制。</p><p>I’ve claimed that the recipe is a great university near a town smart people like. If you set up those conditions within the US, startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country, it’s clear the US is a particularly humid environment. Startups condense more easily here.<br>我曾提出，培育初创公司的关键要素是 “一所顶尖大学，坐落于一个聪明人愿意居住的城镇”。若在美国境内创造这些条件，初创公司就会像水珠在冷金属表面凝结一样必然出现。但当我思考如何在其他国家复制硅谷模式时，会发现美国的环境尤为 “湿润”—— 初创公司在这里更容易 “凝结” 成形。</p><p>It is by no means a lost cause to try to create a silicon valley in another country. There’s room not merely to equal Silicon Valley, but to surpass it. But if you want to do that, you have to understand the advantages startups get from being in America.<br>在其他国家打造 “硅谷” 绝非不可能之事。这些地区不仅有潜力与硅谷比肩，甚至可能超越它。但要实现这一目标，首先必须弄清楚初创公司在美国能获得哪些独特优势。</p><h2 id="The-US-Allows-Immigration"><a href="#The-US-Allows-Immigration" class="headerlink" title="The US Allows Immigration."></a><strong>The US Allows Immigration.</strong></h2><h2 id="美国对移民持开放态度"><a href="#美国对移民持开放态度" class="headerlink" title="美国对移民持开放态度"></a><strong>美国对移民持开放态度</strong></h2><p>For example, I doubt it would be possible to reproduce Silicon Valley in Japan, because one of Silicon Valley’s most distinctive features is immigration. Half the people there speak with accents. And the Japanese don’t like immigration. When they think about how to make a Japanese silicon valley, I suspect they unconsciously frame it as how to make one consisting only of Japanese people. This way of framing the question probably guarantees failure.<br>例如，我认为在日本复制硅谷模式几乎不可能，因为硅谷最显著的特征之一就是移民 —— 那里有一半人说话带有口音。而日本人对移民并不接纳。当他们思考如何打造 “日本硅谷” 时，恐怕会下意识地将其限定为 “只由日本人构成的硅谷”。这种思路从一开始就注定会失败。</p><p>A silicon valley has to be a mecca for the smart and the ambitious, and you can’t have a mecca if you don’t let people into it.<br>硅谷本质上是聪明人与有志者的 “圣地”，而若不允许人才流入，“圣地” 便无从谈起。</p><p>Of course, it’s not saying much that America is more open to immigration than Japan. Immigration policy is one area where a competitor could do better.<br>当然，说美国比日本对移民更开放，其实算不上什么高评价。在移民政策方面，其他国家完全有机会制定更优方案，从而在培育初创公司的竞争中占据优势。</p><h2 id="The-US-Is-a-Rich-Country"><a href="#The-US-Is-a-Rich-Country" class="headerlink" title="The US Is a Rich Country."></a><strong>The US Is a Rich Country.</strong></h2><h2 id="美国是富裕国家"><a href="#美国是富裕国家" class="headerlink" title="美国是富裕国家"></a><strong>美国是富裕国家</strong></h2><p>I could see India one day producing a rival to Silicon Valley. Obviously they have the right people: you can tell that by the number of Indians in the current Silicon Valley. The problem with India itself is that it’s still so poor.<br>我认为印度有朝一日可能孕育出能与硅谷抗衡的创业集群。显然，印度不缺合适的人才 —— 从当前硅谷中印度人的数量就能看出这一点。但印度自身的问题在于，它目前仍较为贫穷。</p><p>In poor countries, things we take for granted are missing. A friend of mine visiting India sprained her ankle falling down the steps in a railway station. When she turned to see what had happened, she found the steps were all different heights. In industrialized countries we walk down steps our whole lives and never think about this, because there’s an infrastructure that prevents such a staircase from being built.<br>在贫穷国家，许多我们习以为常的事物其实并不存在。我有个朋友去印度旅行时，在火车站下台阶时扭伤了脚踝。她回头查看原因，才发现那些台阶的高度各不相同。而在工业化国家，我们一辈子上下台阶都不会注意到这类问题，因为有一套基础设施建设标准会杜绝这种不合格台阶的出现。</p><p>The US has never been so poor as some countries are now. There have never been swarms of beggars in the streets of American cities. So we have no data about what it takes to get from the swarms-of-beggars stage to the silicon-valley stage. Could you have both at once, or does there have to be some baseline prosperity before you get a silicon valley?<br>美国从未像如今某些国家那样贫穷，其城市街头也从未出现过成群的乞丐。因此，我们没有数据能说明如何从 “街头满是乞丐” 的阶段，过渡到 “拥有硅谷式创业集群” 的阶段。这两个阶段能否同时存在？还是说，必须先达到一定的繁荣基线，才能培育出硅谷式的创业生态？</p><p>I suspect there is some speed limit to the evolution of an economy. Economies are made out of people, and attitudes can only change a certain amount per generation. [1]<br>我认为，经济体的发展速度存在某种 “上限”。经济体由人构成，而人们的观念每一代只能发生有限程度的改变。[1]</p><h2 id="The-US-Is-Not-Yet-a-Police-State"><a href="#The-US-Is-Not-Yet-a-Police-State" class="headerlink" title="The US Is Not (Yet) a Police State."></a><strong>The US Is Not (Yet) a Police State.</strong></h2><h2 id="美国（目前）并非极权国家"><a href="#美国（目前）并非极权国家" class="headerlink" title="美国（目前）并非极权国家"></a><strong>美国（目前）并非极权国家</strong></h2><p>Another country I could see wanting to have a silicon valley is China. But I doubt they could do it yet either. China still seems to be a police state, and although present rulers seem enlightened compared to the last, even enlightened despotism can probably only get you part way toward being a great economic power.<br>中国是另一个可能希望打造 “硅谷” 的国家，但我认为目前它还无法实现这一目标。中国似乎仍处于极权统治之下，尽管现任统治者相比上一届显得更为开明，但即便是 “开明的专制”，恐怕也只能让国家在成为经济强国的道路上走一段路，而无法走到底。</p><p>It can get you factories for building things designed elsewhere. Can it get you the designers, though? Can imagination flourish where people can’t criticize the government? Imagination means having odd ideas, and it’s hard to have odd ideas about technology without also having odd ideas about politics. And in any case, many technical ideas do have political implications. So if you squash dissent, the back pressure will propagate into technical fields. [2]<br>极权体制可以建立工厂，生产那些在其他地方设计好的产品。但它能培育出设计师吗？在一个人们无法批评政府的地方，想象力能蓬勃发展吗？想象力意味着产生与众不同的想法，而一个人若在技术层面能提出独特见解，很难不在政治层面也产生独立思考。更何况，许多技术理念本身就带有政治含义。因此，若压制不同意见，这种压制带来的负面影响终将蔓延到技术领域。[2]</p><p>Singapore would face a similar problem. Singapore seems very aware of the importance of encouraging startups. But while energetic government intervention may be able to make a port run efficiently, it can’t coax startups into existence. A state that bans chewing gum has a long way to go before it could create a San Francisco.<br>新加坡也面临类似问题。新加坡显然意识到了鼓励初创公司的重要性，但政府的积极干预或许能让港口高效运转，却无法 “催生” 初创公司。一个连口香糖都禁止的国家，要打造出旧金山那样的创业生态，还有很长的路要走。</p><p>Do you need a San Francisco? Might there not be an alternate route to innovation that goes through obedience and cooperation instead of individualism? Possibly, but I’d bet not. Most imaginative people seem to share a certain prickly independence, whenever and wherever they lived. You see it in Diogenes telling Alexander to get out of his light and two thousand years later in Feynman breaking into safes at Los Alamos. [3] Imaginative people don’t want to follow or lead. They’re most productive when everyone gets to do what they want.<br>一定要有旧金山这样的城市吗？难道就没有一条无需依赖个人主义、而是通过服从与合作实现创新的替代路径吗？理论上可能存在，但我认为实际行不通。大多数有想象力的人，无论身处哪个时代、哪个地方，似乎都带有一种桀骜不驯的独立性。这种特质体现在第欧根尼让亚历山大大帝 “不要挡住我的阳光” 的故事中，也体现在两千年后费曼在洛斯阿拉莫斯破解保险箱的行为里。[3] 有想象力的人既不愿追随他人，也不愿领导他人，只有当每个人都能自由做自己想做的事时，他们才能发挥最大创造力。</p><p>Ironically, of all rich countries the US has lost the most civil liberties recently. But I’m not too worried yet. I’m hoping once the present administration is out, the natural openness of American culture will reassert itself.<br>颇具讽刺意味的是，在所有富裕国家中，美国近年来丧失的公民自由最多。但我目前还不太担心，因为我希望当前政府换届后，美国文化与生俱来的开放性能够重新彰显。</p><h2 id="American-Universities-Are-Better"><a href="#American-Universities-Are-Better" class="headerlink" title="American Universities Are Better."></a><strong>American Universities Are Better.</strong></h2><h2 id="美国的大学更优质"><a href="#美国的大学更优质" class="headerlink" title="美国的大学更优质"></a><strong>美国的大学更优质</strong></h2><p>You need a great university to seed a silicon valley, and so far there are few outside the US. I asked a handful of American computer science professors which universities in Europe were most admired, and they all basically said “Cambridge” followed by a long pause while they tried to think of others. There don’t seem to be many universities elsewhere that compare with the best in America, at least in technology.<br>培育硅谷需要以顶尖大学为 “种子”，而目前美国之外这样的大学寥寥无几。我曾询问几位美国计算机科学教授，欧洲哪些大学最受推崇，他们几乎都先回答 “剑桥大学”，然后就陷入长时间的停顿，努力回想其他学校。看来，至少在技术领域，其他国家很少有大学能与美国的顶尖大学相媲美。</p><p>In some countries this is the result of a deliberate policy. The German and Dutch governments, perhaps from fear of elitism, try to ensure that all universities are roughly equal in quality. The downside is that none are especially good. The best professors are spread out, instead of being concentrated as they are in the US. This probably makes them less productive, because they don’t have good colleagues to inspire them. It also means no one university will be good enough to act as a mecca, attracting talent from abroad and causing startups to form around it.<br>在某些国家，这种情况是政策刻意为之的结果。德国和荷兰政府或许是出于对 “精英主义” 的担忧，试图确保所有大学的质量大致相当。但这种做法的弊端是，没有一所大学能达到顶尖水平。最优秀的教授分散在各个学校，而非像美国那样集中在顶尖院校。这很可能导致教授们的研究效率降低 —— 因为他们缺乏优秀同事的启发与激励。同时，这也意味着没有任何一所大学能成为 “圣地”，吸引海外人才并促使初创公司在其周边聚集。</p><p>The case of Germany is a strange one. The Germans invented the modern university, and up till the 1930s theirs were the best in the world. Now they have none that stand out. As I was mulling this over, I found myself thinking: “I can understand why German universities declined in the 1930s, after they excluded Jews. But surely they should have bounced back by now.” Then I realized: maybe not. There are few Jews left in Germany and most Jews I know would not want to move there. And if you took any great American university and removed the Jews, you’d have some pretty big gaps. So maybe it would be a lost cause trying to create a silicon valley in Germany, because you couldn’t establish the level of university you’d need as a seed. [4]<br>德国的情况颇为特殊。德国人发明了现代大学体系，直到 20 世纪 30 年代，德国的大学仍是世界顶尖水平。但如今，德国已没有一所大学能脱颖而出。我在思考这个问题时曾想：“我能理解德国大学在 20 世纪 30 年代因排斥犹太人而衰落，但它们现在肯定应该恢复元气了吧？” 随后我意识到，或许并非如此。如今德国的犹太人数量极少，而且我认识的大多数犹太人也不愿移居德国。要知道，若从美国任何一所顶尖大学中剔除犹太裔学者，都会留下巨大的人才空缺。因此，在德国打造硅谷或许是徒劳的 —— 因为这里无法建立起培育硅谷所需的顶尖大学 “种子”。[4]</p><p>It’s natural for US universities to compete with one another because so many are private. To reproduce the quality of American universities you probably also have to reproduce this. If universities are controlled by the central government, log-rolling will pull them all toward the mean: the new Institute of X will end up at the university in the district of a powerful politician, instead of where it should be.<br>美国的大学之所以能自然地相互竞争，很大程度上是因为许多大学是私立的。要复制美国大学的质量，或许也必须复制这种私立化模式。如果大学由中央政府控制，“互投赞成票” 的政治博弈会让所有大学趋于平庸：新成立的 X 研究所可能会落户在某位权势政客所在选区的大学，而非最适合它的地方。</p><h2 id="You-Can-Fire-People-in-America"><a href="#You-Can-Fire-People-in-America" class="headerlink" title="You Can Fire People in America."></a><strong>You Can Fire People in America.</strong></h2><h2 id="在美国，企业可以解雇员工"><a href="#在美国，企业可以解雇员工" class="headerlink" title="在美国，企业可以解雇员工"></a><strong>在美国，企业可以解雇员工</strong></h2><p>I think one of the biggest obstacles to creating startups in Europe is the attitude toward employment. The famously rigid labor laws hurt every company, but startups especially, because startups have the least time to spare for bureaucratic hassles.<br>我认为在欧洲培育初创公司的最大障碍之一，在于其对就业的态度。欧洲严苛的劳动法众所周知，这对所有公司都造成了不利影响，而初创公司受到的冲击尤为严重 —— 因为它们最没有时间应对繁琐的行政手续。</p><p>The difficulty of firing people is a particular problem for startups because they have no redundancy. Every person has to do their job well.<br>对初创公司而言，“难以解雇员工” 是个尤为棘手的问题，因为初创公司没有人员冗余，每个员工都必须胜任自己的工作。</p><p>But the problem is more than just that some startup might have a problem firing someone they needed to. Across industries and countries, there’s a strong inverse correlation between performance and job security. Actors and directors are fired at the end of each film, so they have to deliver every time. Junior professors are fired by default after a few years unless the university chooses to grant them tenure. Professional athletes know they’ll be pulled if they play badly for just a couple games. At the other end of the scale (at least in the US) are auto workers, New York City schoolteachers, and civil servants, who are all nearly impossible to fire. The trend is so clear that you’d have to be willfully blind not to see it.<br>但问题远不止 “初创公司可能无法解雇不称职员工” 这么简单。纵观不同行业和国家，“工作表现” 与 “工作保障” 之间存在显著的负相关关系。演员和导演在每部电影拍摄结束后就可能被 “解雇”，因此他们每次都必须拿出最佳表现；初级教授若在几年内未获得终身教职，默认就会被解聘；职业运动员知道，只要几场比赛表现不佳，就可能被替换。而在天平的另一端（至少在美国是如此），汽车工人、纽约市的教师和公务员几乎不可能被解雇。这种趋势如此明显，除非故意视而不见，否则任何人都能察觉。</p><p>Performance isn’t everything, you say? Well, are auto workers, schoolteachers, and civil servants happier than actors, professors, and professional athletes?<br>你可能会说，“工作表现并非一切”。但问题是，汽车工人、教师和公务员真的比演员、教授和职业运动员更快乐吗？</p><p>European public opinion will apparently tolerate people being fired in industries where they really care about performance. Unfortunately the only industry they care enough about so far is soccer. But that is at least a precedent.<br>显然，在欧洲民众真正关注 “表现” 的行业，他们能够接受 “解雇” 这种做法。遗憾的是，目前他们唯一足够关注的行业只有足球。但这至少是一个先例。</p><h2 id="In-America-Work-Is-Less-Identified-with-Employment"><a href="#In-America-Work-Is-Less-Identified-with-Employment" class="headerlink" title="In America Work Is Less Identified with Employment."></a><strong>In America Work Is Less Identified with Employment.</strong></h2><h2 id="在美国，“工作”-与-“受雇”-的绑定程度更低"><a href="#在美国，“工作”-与-“受雇”-的绑定程度更低" class="headerlink" title="在美国，“工作” 与 “受雇” 的绑定程度更低"></a><strong>在美国，“工作” 与 “受雇” 的绑定程度更低</strong></h2><p>The problem in more traditional places like Europe and Japan goes deeper than the employment laws. More dangerous is the attitude they reflect: that an employee is a kind of servant, whom the employer has a duty to protect. It used to be that way in America too. In 1970 you were still supposed to get a job with a big company, for whom ideally you’d work your whole career. In return the company would take care of you: they’d try not to fire you, cover your medical expenses, and support you in old age.<br>在欧洲、日本等更传统的地区，问题远不止劳动法那么简单。更危险的是这些法律背后反映的态度：员工仿佛是雇主的 “仆人”，雇主有责任保护员工。美国过去也曾是这种情况。在 1970 年，人们仍普遍认为应该进入大公司工作，理想状态是终身为其效力；作为回报，公司会 “照顾” 员工 —— 尽量不解雇他们、承担医疗费用，并为他们的退休生活提供保障。</p><p>Gradually employment has been shedding such paternalistic overtones and becoming simply an economic exchange. But the importance of the new model is not just that it makes it easier for startups to grow. More important, I think, is that it it makes it easier for people to start startups.<br>如今，雇佣关系已逐渐摆脱这种 “家长式” 色彩，转变为一种纯粹的经济交换。但这种新模式的重要性，不仅在于它让初创公司更容易发展，更重要的是，它让人们更容易开启创业之路。</p><p>Even in the US most kids graduating from college still think they’re supposed to get jobs, as if you couldn’t be productive without being someone’s employee. But the less you identify work with employment, the easier it becomes to start a startup. When you see your career as a series of different types of work, instead of a lifetime’s service to a single employer, there’s less risk in starting your own company, because you’re only replacing one segment instead of discarding the whole thing.<br>即便在美国，大多数大学毕业生仍认为自己 “应该找一份工作”，仿佛不被他人雇佣就无法创造价值。但 “工作” 与 “受雇” 的绑定程度越低，人们开启创业之路就越容易。当你将职业生涯视为一系列不同类型的工作组合，而非终身为单一雇主效力时，创办自己的公司所承担的风险会更小 —— 因为你只是替换了职业生涯中的一个片段，而非放弃整个职业生涯。</p><p>The old ideas are so powerful that even the most successful startup founders have had to struggle against them. A year after the founding of Apple, Steve Wozniak still hadn’t quit HP. He still planned to work there for life. And when Jobs found someone to give Apple serious venture funding, on the condition that Woz quit, he initially refused, arguing that he’d designed both the Apple I and the Apple II while working at HP, and there was no reason he couldn’t continue.<br>旧观念的影响力如此强大，即便最成功的初创公司创始人也不得不与之抗争。苹果公司成立一年后，史蒂夫・沃兹尼亚克仍未辞去惠普的工作，他仍计划在惠普终身任职。当乔布斯找到愿意为苹果提供大额风险投资的投资人，且对方提出 “沃兹必须辞职” 的条件时，沃兹最初拒绝了，他辩称自己在惠普工作期间就设计出了 Apple I 和 Apple II，没有理由不能继续兼顾两份工作。</p><h2 id="America-Is-Not-Too-Fussy"><a href="#America-Is-Not-Too-Fussy" class="headerlink" title="America Is Not Too Fussy."></a><strong>America Is Not Too Fussy.</strong></h2><h2 id="美国对企业的监管不那么苛刻"><a href="#美国对企业的监管不那么苛刻" class="headerlink" title="美国对企业的监管不那么苛刻"></a><strong>美国对企业的监管不那么苛刻</strong></h2><p>If there are any laws regulating businesses, you can assume larval startups will break most of them, because they don’t know what the laws are and don’t have time to find out.<br>只要存在监管企业的法律，就可以想见，初创期的公司大概率会违反其中的大部分 —— 因为它们既不清楚具体有哪些法律，也没有时间去了解。</p><p>For example, many startups in America begin in places where it’s not really legal to run a business. Hewlett-Packard, Apple, and Google were all run out of garages. Many more startups, including ours, were initially run out of apartments. If the laws against such things were actually enforced, most startups wouldn’t happen.<br>例如，美国许多初创公司的起步地点，在法律层面并不允许开展商业活动。惠普、苹果和谷歌最初都是在车库里运营的；包括我们公司在内的更多初创企业，最初则是在公寓里起步。如果禁止此类行为的法律真的被严格执行，大多数初创公司根本就不会存在。</p><p>That could be a problem in fussier countries. If Hewlett and Packard tried running an electronics company out of their garage in Switzerland, the old lady next door would report them to the municipal authorities.<br>在监管更苛刻的国家，情况就可能截然不同。如果休利特和帕卡德试图在瑞士的车库里运营一家电子公司，隔壁的老太太很可能会向市政部门举报他们。</p><p>But the worst problem in other countries is probably the effort required just to start a company. A friend of mine started a company in Germany in the early 90s, and was shocked to discover, among many other regulations, that you needed $20,000 in capital to incorporate. That’s one reason I’m not typing this on an Apfel laptop. Jobs and Wozniak couldn’t have come up with that kind of money in a company financed by selling a VW bus and an HP calculator. We couldn’t have started Viaweb either. [5]<br>但其他国家面临的最严峻问题，或许是创办公司本身所需付出的巨大努力。我的一位朋友在 20 世纪 90 年代初在德国创办公司时，震惊地发现，除了众多其他规定外，注册公司竟然需要 2 万美元的资本金。这也是我如今没有用 “苹果（Apfel，德语中 “苹果” 的拼写）笔记本电脑” 打字的原因之一 —— 乔布斯和沃兹尼亚克当年是靠卖掉一辆大众巴士和一台惠普计算器筹集的启动资金，根本拿不出 2 万美元；我们当年也不可能创办起 Viaweb 公司。[5]</p><p>Here’s a tip for governments that want to encourage startups: read the stories of existing startups, and then try to simulate what would have happened in your country. When you hit something that would have killed Apple, prune it off.<br>给那些想鼓励初创企业的政府一个建议：去读读现有初创公司的成长故事，然后模拟一下这些故事在你们国家会如何发展。当发现某个政策或规定可能会扼杀像苹果这样的公司时，就赶紧废除它。</p><p>Startups are marginal. They’re started by the poor and the timid; they begin in marginal space and spare time; they’re started by people who are supposed to be doing something else; and though businesses, their founders often know nothing about business. Young startups are fragile. A society that trims its margins sharply will kill them all.<br>初创公司本就处于 “边缘地带”：创办者可能是贫穷或胆怯的人；起步于边缘空间（如车库、公寓）和业余时间；创办者本应在做其他事情（如全职工作、求学）；而且尽管是商业实体，其创始人往往对商业一无所知。年轻的初创公司十分脆弱，一个对 “边缘事物” 严苛打压的社会，会将它们全部扼杀。</p><h2 id="America-Has-a-Large-Domestic-Market"><a href="#America-Has-a-Large-Domestic-Market" class="headerlink" title="America Has a Large Domestic Market."></a><strong>America Has a Large Domestic Market.</strong></h2><h2 id="美国拥有庞大的国内市场"><a href="#美国拥有庞大的国内市场" class="headerlink" title="美国拥有庞大的国内市场"></a><strong>美国拥有庞大的国内市场</strong></h2><p>What sustains a startup in the beginning is the prospect of getting their initial product out. The successful ones therefore make the first version as simple as possible. In the US they usually begin by making something just for the local market.<br>支撑初创公司初期发展的，是将首款产品推向市场的可能性。因此，成功的初创公司会把产品的第一个版本做得尽可能简单，在美国，它们通常会先针对本土市场开发产品。</p><p>This works in America, because the local market is 300 million people. It wouldn’t work so well in Sweden. In a small country, a startup has a harder task: they have to sell internationally from the start.<br>这种策略在美国行得通，因为其本土市场就有 3 亿人口；但在瑞典这样的国家，效果就会大打折扣。小国的初创公司面临更艰巨的任务 —— 从一开始就必须开拓国际市场。</p><p>The EU was designed partly to simulate a single, large domestic market. The problem is that the inhabitants still speak many different languages. So a software startup in Sweden is still at a disadvantage relative to one in the US, because they have to deal with internationalization from the beginning. It’s significant that the most famous recent startup in Europe, Skype, worked on a problem that was intrinsically international.<br>欧盟的建立，在一定程度上就是为了打造一个单一的庞大 “国内市场”，但问题在于，欧盟各国居民仍说着不同的语言。因此，瑞典的软件初创公司相较于美国的同行，始终处于劣势 —— 因为它们从一开始就必须处理产品国际化（如多语言适配）的问题。值得注意的是，欧洲近年来最知名的初创公司 Skype，其解决的问题（跨国通话）本身就具有国际性，这并非偶然。</p><p>However, for better or worse it looks as if Europe will in a few decades speak a single language. When I was a student in Italy in 1990, few Italians spoke English. Now all educated people seem to be expected to– and Europeans do not like to seem uneducated. This is presumably a taboo subject, but if present trends continue, French and German will eventually go the way of Irish and Luxembourgish: they’ll be spoken in homes and by eccentric nationalists.<br>然而，无论好坏，未来几十年欧洲似乎可能会形成单一通用语言。1990 年我在意大利求学时，会说英语的意大利人寥寥无几；如今，所有受过教育的欧洲人似乎都被期望会说英语 —— 而且欧洲人不喜欢显得没文化。这或许是个禁忌话题，但如果当前趋势持续，法语和德语最终可能会步爱尔兰语和卢森堡语的后尘：只在家庭内部或少数特立独行的民族主义者中使用。</p><h2 id="America-Has-Venture-Funding"><a href="#America-Has-Venture-Funding" class="headerlink" title="America Has Venture Funding."></a><strong>America Has Venture Funding.</strong></h2><h2 id="美国拥有风险投资体系"><a href="#美国拥有风险投资体系" class="headerlink" title="美国拥有风险投资体系"></a><strong>美国拥有风险投资体系</strong></h2><p>Startups are easier to start in America because funding is easier to get. There are now a few VC firms outside the US, but startup funding doesn’t only come from VC firms. A more important source, because it’s more personal and comes earlier in the process, is money from individual angel investors. Google might never have got to the point where they could raise millions from VC funds if they hadn’t first raised a hundred thousand from Andy Bechtolsheim. And he could help them because he was one of the founders of Sun. This pattern is repeated constantly in startup hubs. It’s this pattern that makes them startup hubs.<br>在美国创办初创公司更容易，因为获取资金的渠道更便捷。如今美国之外也有一些风险投资公司，但初创公司的资金并非只来自风投。一个更重要的资金来源是个人天使投资人 —— 因为这种投资更具个人属性，且介入时间更早。如果谷歌最初没有从安迪・贝托尔斯海姆那里筹集到 10 万美元，可能永远无法达到能从风投公司获得数百万美元投资的阶段。而贝托尔斯海姆之所以能帮助他们，正是因为他是太阳微系统公司（Sun）的创始人之一。这种模式在创业中心不断重复，也正是这种模式造就了创业中心。</p><p>The good news is, all you have to do to get the process rolling is get those first few startups successfully launched. If they stick around after they get rich, startup founders will almost automatically fund and encourage new startups.<br>好消息是，要启动这种资金循环，只需让最初几家初创公司成功起步。如果这些创始人在致富后仍留在当地，他们几乎会自然而然地为新初创公司提供资金支持并给予鼓励。</p><p>The bad news is that the cycle is slow. It probably takes five years, on average, before a startup founder can make angel investments. And while governments might be able to set up local VC funds by supplying the money themselves and recruiting people from existing firms to run them, only organic growth can produce angel investors.<br>坏消息是，这个循环的速度很慢。初创公司创始人通常平均需要五年时间，才具备进行天使投资的能力。尽管政府可以通过自行注资、从现有公司招募人员运营等方式建立本地风投基金，但天使投资人只能通过 “自然成长” 的方式产生，无法靠行政手段催生。</p><p>Incidentally, America’s private universities are one reason there’s so much venture capital. A lot of the money in VC funds comes from their endowments. So another advantage of private universities is that a good chunk of the country’s wealth is managed by enlightened investors.<br>顺带一提，美国的私立大学是其拥有大量风险资本的原因之一。许多风投基金的资金都来自私立大学的捐赠基金。因此，私立大学的另一大优势在于：国家财富中的很大一部分，是由具有远见的投资者（即大学捐赠基金的管理者）进行管理的。</p><h2 id="America-Has-Dynamic-Typing-for-Careers"><a href="#America-Has-Dynamic-Typing-for-Careers" class="headerlink" title="America Has Dynamic Typing for Careers."></a><strong>America Has Dynamic Typing for Careers.</strong></h2><h2 id="美国的职业生涯具有-“动态类型”-特性"><a href="#美国的职业生涯具有-“动态类型”-特性" class="headerlink" title="美国的职业生涯具有 “动态类型” 特性"></a><strong>美国的职业生涯具有 “动态类型” 特性</strong></h2><p>Compared to other industrialized countries the US is disorganized about routing people into careers. For example, in America people often don’t decide to go to medical school till they’ve finished college. In Europe they generally decide in high school.<br>与其他工业化国家相比，美国在引导人们进入职业生涯方面显得 “无序”。例如，在美国，人们通常要等到大学毕业才决定是否去读医学院；而在欧洲，人们高中时就会做出这个决定。</p><p>The European approach reflects the old idea that each person has a single, definite occupation– which is not far from the idea that each person has a natural “station” in life. If this were true, the most efficient plan would be to discover each person’s station as early as possible, so they could receive the training appropriate to it.<br>欧洲的这种模式，反映了一种旧观念：每个人都有一个单一、固定的职业 —— 这与 “人各有其天生社会地位” 的想法相差不远。如果这种观念成立，那么最高效的做法就是尽早确定每个人的 “定位”，以便他们接受与之匹配的培训。</p><p>In the US things are more haphazard. But that turns out to be an advantage as an economy gets more liquid, just as dynamic typing turns out to work better than static for ill-defined problems. This is particularly true with startups. “Startup founder” is not the sort of career a high school student would choose. If you ask at that age, people will choose conservatively. They’ll choose well-understood occupations like engineer, or doctor, or lawyer.<br>美国的情况则更随意，但事实证明，随着经济体的流动性增强（即职业选择更灵活），这种 “随意” 反而成了优势 —— 这就像在解决定义模糊的问题时，“动态类型”（编程术语，指变量类型可动态变化）比 “静态类型” 更有效。对于初创公司而言，情况尤其如此。“初创公司创始人” 并非高中生会选择的职业；在那个年龄段，人们的选择会更保守，会倾向于选择工程师、医生、律师这类认知度高、路径清晰的职业。</p><p>Startups are the kind of thing people don’t plan, so you’re more likely to get them in a society where it’s ok to make career decisions on the fly.<br>初创公司往往是 “无计划” 的产物，因此，在一个允许 “即兴做出职业决策” 的社会里，更容易涌现出初创公司。</p><p>For example, in theory the purpose of a PhD program is to train you to do research. But fortunately in the US this is another rule that isn’t very strictly enforced. In the US most people in CS PhD programs are there simply because they wanted to learn more. They haven’t decided what they’ll do afterward. So American grad schools spawn a lot of startups, because students don’t feel they’re failing if they don’t go into research.<br>例如，理论上博士项目的目的是培养科研人才，但幸运的是，在美国，这一规则并未被严格执行。美国计算机科学专业的大多数博士生，选择读博只是因为想学习更多知识，并未确定毕业后要做什么。因此，美国的研究生院孕育了大量初创公司 —— 因为学生们不会觉得不从事科研就是 “失败”。</p><p>Those worried about America’s “competitiveness” often suggest spending more on public schools. But perhaps America’s lousy public schools have a hidden advantage. Because they’re so bad, the kids adopt an attitude of waiting for college. I did; I knew I was learning so little that I wasn’t even learning what the choices were, let alone which to choose. This is demoralizing, but it does at least make you keep an open mind.<br>那些担心美国 “竞争力” 的人，常常建议增加对公立学校的投入。但或许美国糟糕的公立学校暗藏一种优势：正因为教学质量差，孩子们会抱持 “等待上大学再认真学习” 的态度。我当年就是如此 —— 我知道自己在高中阶段学到的东西太少，甚至不清楚未来有哪些选择，更别提做出选择了。这种情况固然令人沮丧，但至少能让人保持开放的心态。</p><p>Certainly if I had to choose between bad high schools and good universities, like the US, and good high schools and bad universities, like most other industrialized countries, I’d take the US system. Better to make everyone feel like a late bloomer than a failed child prodigy.<br>如果让我在两种体系中选择：一种是像美国这样 “高中差但大学好”，另一种是像大多数其他工业化国家那样 “高中好但大学差”，我肯定会选择美国的体系。让所有人都觉得自己是 “大器晚成”，总比让很多人沦为 “失败的神童” 要好。</p><h2 id="Attitudes"><a href="#Attitudes" class="headerlink" title="Attitudes"></a><strong>Attitudes</strong></h2><h2 id="态度因素"><a href="#态度因素" class="headerlink" title="态度因素"></a><strong>态度因素</strong></h2><p>There’s one item conspicuously missing from this list: American attitudes. Americans are said to be more entrepreneurial, and less afraid of risk. But America has no monopoly on this. Indians and Chinese seem plenty entrepreneurial, perhaps more than Americans.<br>在上述列表中，有一个因素明显缺失：美国人的态度。人们常说美国人更具创业精神，更不怕风险，但这种特质并非美国独有。印度人和中国人似乎同样富有创业精神，甚至可能比美国人更强。</p><p>Some say Europeans are less energetic, but I don’t believe it. I think the problem with Europe is not that they lack balls, but that they lack examples.<br>有人说欧洲人缺乏干劲，但我不这么认为。我觉得欧洲的问题不在于 “缺乏勇气”，而在于 “缺乏榜样”。</p><p>Even in the US, the most successful startup founders are often technical people who are quite timid, initially, about the idea of starting their own company. Few are the sort of backslapping extroverts one thinks of as typically American. They can usually only summon up the activation energy to start a startup when they meet people who’ve done it and realize they could too.<br>即便在美国，最成功的初创公司创始人往往是技术出身，他们最初对创办自己的公司也会感到胆怯。很少有人是那种人们印象中 “典型的美国人”—— 爱与人勾肩搭背、性格外向。通常只有当他们遇到已经成功创业的人，意识到 “自己也能做到” 时，才会鼓起勇气启动创业项目。</p><p>I think what holds back European hackers is simply that they don’t meet so many people who’ve done it. You see that variation even within the US. Stanford students are more entrepreneurial than Yale students, but not because of some difference in their characters; the Yale students just have fewer examples.<br>我认为，阻碍欧洲黑客创业的关键，仅仅是他们很少能接触到成功的创业者。即便在美国国内，这种差异也存在：斯坦福大学的学生比耶鲁大学的学生更具创业倾向，这并非因为两校学生性格不同，而是耶鲁的学生能接触到的创业榜样更少。</p><p>I admit there seem to be different attitudes toward ambition in Europe and the US. In the US it’s ok to be overtly ambitious, and in most of Europe it’s not. But this can’t be an intrinsically European quality; previous generations of Europeans were as ambitious as Americans. What happened? My hypothesis is that ambition was discredited by the terrible things ambitious people did in the first half of the twentieth century. Now swagger is out. (Even now the image of a very ambitious German presses a button or two, doesn’t it?)<br>我承认，欧洲和美国对 “野心” 的态度似乎存在差异。在美国，公开表露野心是被认可的，但在欧洲大部分地区却并非如此。不过，这绝非欧洲人天生的特质 —— 前几代欧洲人与美国人一样有野心。究竟发生了什么？我的推测是，20 世纪上半叶，那些有野心的人所犯下的可怕行径，让 “野心” 这个词声名扫地。如今，张扬的姿态早已不合时宜。（即便现在，一想到 “极具野心的德国人”，人们脑海中难道不还会浮现出其按下一两个按钮的画面吗？）</p><p>It would be surprising if European attitudes weren’t affected by the disasters of the twentieth century. It takes a while to be optimistic after events like that. But ambition is human nature. Gradually it will re-emerge. [6]<br>若说 20 世纪的灾难没有影响欧洲人的态度，那才令人意外。经历过那样的事件后，人们需要很长时间才能重新找回乐观。但野心是人的天性，它终将慢慢复苏。[6]</p><h2 id="How-To-Do-Better"><a href="#How-To-Do-Better" class="headerlink" title="How To Do Better"></a><strong>How To Do Better</strong></h2><h2 id="如何做得更好"><a href="#如何做得更好" class="headerlink" title="如何做得更好"></a><strong>如何做得更好</strong></h2><p>I don’t mean to suggest by this list that America is the perfect place for startups. It’s the best place so far, but the sample size is small, and “so far” is not very long. On historical time scales, what we have now is just a prototype.<br>我列出这些，并非想暗示美国是创业公司的完美之地。它只是目前为止最好的地方，但样本量有限，且 “目前为止” 的时间跨度也并不长。以历史的尺度来看，我们当下所拥有的模式，不过是一个雏形。</p><p>So let’s look at Silicon Valley the way you’d look at a product made by a competitor. What weaknesses could you exploit? How could you make something users would like better? The users in this case are those critical few thousand people you’d like to move to your silicon valley.<br>因此，我们不妨用审视竞争对手产品的眼光来看待硅谷：它有哪些可被利用的弱点？怎样才能打造出更受用户青睐的 “产品”？在这里，“用户” 指的是那几千名关键人才 —— 你希望能吸引他们来到你打造的 “硅谷”。</p><p>To start with, Silicon Valley is too far from San Francisco. Palo Alto, the original ground zero, is about thirty miles away, and the present center more like forty. So people who come to work in Silicon Valley face an unpleasant choice: either live in the boring sprawl of the valley proper, or live in San Francisco and endure an hour commute each way.<br>首先，硅谷距离旧金山太远。作为硅谷发源地的帕洛阿尔托，距离旧金山约 30 英里（约 48 公里），而如今硅谷的中心地带则更远，差不多有 40 英里（约 64 公里）。因此，来硅谷工作的人面临着一个两难选择：要么住在硅谷核心区那片单调乏味、漫无规划的区域，要么住在旧金山，忍受每天单程一小时的通勤。</p><p>The best thing would be if the silicon valley were not merely closer to the interesting city, but interesting itself. And there is a lot of room for improvement here. Palo Alto is not so bad, but everything built since is the worst sort of strip development. You can measure how demoralizing it is by the number of people who will sacrifice two hours a day commuting rather than live there.<br>最理想的情况是，打造的 “硅谷” 不仅要靠近充满活力的城市，其自身也应充满吸引力。而在这一点上，现有硅谷的提升空间还很大。帕洛阿尔托还算不错，但之后新建的区域都属于最糟糕的带状无序开发模式。从有多少人宁愿每天牺牲两小时通勤，也不愿住在那里，就能看出这片区域多么令人提不起劲。</p><p>Another area in which you could easily surpass Silicon Valley is public transportation. There is a train running the length of it, and by American standards it’s not bad. Which is to say that to Japanese or Europeans it would seem like something out of the third world.<br>在公共交通方面，你完全可以轻松超越硅谷。硅谷地区有一条贯穿全程的铁路，以美国的标准来看还算不错 —— 但这意味着，在日本人或欧洲人眼中，它简直像第三世界的交通设施。</p><p>The kind of people you want to attract to your silicon valley like to get around by train, bicycle, and on foot. So if you want to beat America, design a town that puts cars last. It will be a while before any American city can bring itself to do that.<br>你想要吸引到 “硅谷” 的那类人才，更倾向于通过火车、自行车或步行出行。因此，若想击败美国，就设计一座 “汽车靠边站” 的城镇吧。而美国的城市要做到这一点，还需要很长时间。</p><h2 id="Capital-Gains"><a href="#Capital-Gains" class="headerlink" title="Capital Gains"></a><strong>Capital Gains</strong></h2><h2 id="资本利得"><a href="#资本利得" class="headerlink" title="资本利得"></a><strong>资本利得</strong></h2><p>There are also a couple things you could do to beat America at the national level. One would be to have lower capital gains taxes. It doesn’t seem critical to have the lowest income taxes, because to take advantage of those, people have to move. [7] But if capital gains rates vary, you move assets, not yourself, so changes are reflected at market speeds. The lower the rate, the cheaper it is to buy stock in growing companies as opposed to real estate, or bonds, or stocks bought for the dividends they pay.<br>在国家层面，你也有几件事可以做来击败美国。其中之一就是降低资本利得税。拥有最低的所得税似乎并不关键，因为要享受低所得税的好处，人们必须迁居（到该国）[7]。但如果资本利得税率存在差异，人们只需转移资产，而非亲自迁移，因此税率变化会以市场速度体现出来。税率越低，购买成长型公司股票的成本就越低 —— 相比之下，投资房地产、债券或为获取股息而购买的股票，成本都会更高。</p><p>So if you want to encourage startups you should have a low rate on capital gains. Politicians are caught between a rock and a hard place here, however: make the capital gains rate low and be accused of creating “tax breaks for the rich,” or make it high and starve growing companies of investment capital. As Galbraith said, politics is a matter of choosing between the unpalatable and the disastrous. A lot of governments experimented with the disastrous in the twentieth century; now the trend seems to be toward the merely unpalatable.<br>因此，若想鼓励创业公司发展，就应实行低资本利得税率。然而，政客们在这一问题上陷入了两难境地：若降低资本利得税，会被指责为 “为富人提供税收优惠”；若提高税率，则会导致成长型公司面临投资资金短缺的困境。正如加尔布雷斯所言，政治就是在 “令人不快” 和 “灾难性” 之间做选择。20 世纪，许多政府尝试了 “灾难性” 的选项；如今，趋势似乎转向了 “仅仅令人不快” 的选项。</p><p>Oddly enough, the leaders now are European countries like Belgium, which has a capital gains tax rate of zero.<br>奇怪的是，如今在这方面走在前列的是比利时等欧洲国家 —— 比利时的资本利得税率为零。</p><h2 id="Immigration"><a href="#Immigration" class="headerlink" title="Immigration"></a><strong>Immigration</strong></h2><h2 id="移民"><a href="#移民" class="headerlink" title="移民"></a><strong>移民</strong></h2><p>The other place you could beat the US would be with smarter immigration policy. There are huge gains to be made here. Silicon valleys are made of people, remember.<br>另一个可以击败美国的领域是制定更明智的移民政策。这方面能带来的收益巨大，要知道，“硅谷” 终究是由人打造的。</p><p>Like a company whose software runs on Windows, those in the current Silicon Valley are all too aware of the shortcomings of the INS, but there’s little they can do about it. They’re hostages of the platform.<br>就像一家软件依赖 Windows 系统运行的公司一样，当下硅谷的从业者们非常清楚美国移民局（INS）的弊端，却几乎无能为力 —— 他们成了这个 “平台”（即美国移民体系）的 “人质”。</p><p>America’s immigration system has never been well run, and since 2001 there has been an additional admixture of paranoia. What fraction of the smart people who want to come to America can even get in? I doubt even half. Which means if you made a competing technology hub that let in all smart people, you’d immediately get more than half the world’s top talent, for free.<br>美国的移民体系从未得到过良好的管理，2001 年之后，还额外掺杂了偏执情绪。那些想来美国的优秀人才中，有多少人能真正获准入境？我怀疑连一半都不到。这意味着，若你打造一个能接纳所有优秀人才的竞争性科技中心，就能立刻免费获得全球一半以上的顶尖人才。</p><p>US immigration policy is particularly ill-suited to startups, because it reflects a model of work from the 1970s. It assumes good technical people have college degrees, and that work means working for a big company.<br>美国的移民政策尤其不适合创业公司，因为它所依据的仍是 20 世纪 70 年代的工作模式 —— 它假定优秀的技术人才都拥有大学学位，且 “工作” 就意味着为大公司效力。</p><p>If you don’t have a college degree you can’t get an H1B visa, the type usually issued to programmers. But a test that excludes Steve Jobs, Bill Gates, and Michael Dell can’t be a good one. Plus you can’t get a visa for working on your own company, only for working as an employee of someone else’s. And if you want to apply for citizenship you daren’t work for a startup at all, because if your sponsor goes out of business, you have to start over.<br>若没有大学学位，就无法获得 H1B 签证（这类签证通常发放给程序员）。但一个会将史蒂夫・乔布斯、比尔・盖茨和迈克尔・戴尔排除在外的 “筛选标准”，显然不是一个好标准。此外，你无法为了经营自己的公司而获得签证，只能以 “为他人公司工作的雇员” 身份申请。而且，若你想申请公民身份，就根本不敢在创业公司工作 —— 因为一旦你的担保方（雇主）破产，你就得重新开始申请流程。</p><p>American immigration policy keeps out most smart people, and channels the rest into unproductive jobs. It would be easy to do better. Imagine if, instead, you treated immigration like recruiting– if you made a conscious effort to seek out the smartest people and get them to come to your country.<br>美国的移民政策将大多数优秀人才拒之门外，还把其余少数人才引向了无法发挥其价值的工作岗位。要做得更好其实并不难。试想一下，若你能将移民政策当作 “招聘” 来对待 —— 有意识地寻找最优秀的人才，并吸引他们来到你的国家，情况会怎样？</p><p>A country that got immigration right would have a huge advantage. At this point you could become a mecca for smart people simply by having an immigration system that let them in.<br>一个能制定合理移民政策的国家，将拥有巨大的优势。在当前阶段，只要你的移民体系能接纳优秀人才，就能轻松成为他们向往的 “圣地”。</p><h2 id="A-Good-Vector"><a href="#A-Good-Vector" class="headerlink" title="A Good Vector"></a><strong>A Good Vector</strong></h2><h2 id="一个好的发展方向"><a href="#一个好的发展方向" class="headerlink" title="一个好的发展方向"></a><strong>一个好的发展方向</strong></h2><p>If you look at the kinds of things you have to do to create an environment where startups condense, none are great sacrifices. Great universities? Livable towns? Civil liberties? Flexible employment laws? Immigration policies that let in smart people? Tax laws that encourage growth? It’s not as if you have to risk destroying your country to get a silicon valley; these are all good things in their own right.<br>若你仔细想想，要打造一个能吸引创业公司集聚的环境，所需做的那些事，没有一件需要付出巨大牺牲。建设顶尖大学？打造宜居城镇？保障公民自由？制定灵活的劳动法？推出接纳优秀人才的移民政策？出台鼓励增长的税法？要拥有 “硅谷”，并非要冒着摧毁国家的风险 —— 这些举措本身就都是有益的事情。</p><p>And then of course there’s the question, can you afford not to? I can imagine a future in which the default choice of ambitious young people is to start their own company rather than work for someone else’s. I’m not sure that will happen, but it’s where the trend points now. And if that is the future, places that don’t have startups will be a whole step behind, like those that missed the Industrial Revolution.<br>当然，还有一个问题：你承担得起 “不行动” 的代价吗？我能想象这样一个未来：有野心的年轻人，其默认选择是创办自己的公司，而非为他人打工。我不确定这是否一定会发生，但目前的趋势确实指向了这一方向。如果未来真的如此，那么没有创业公司的地区，将会像那些错过工业革命的地区一样，被远远甩在身后。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>[1] On the verge of the Industrial Revolution, England was already the richest country in the world. As far as such things can be compared, per capita income in England in 1750 was higher than India’s in 1960.<br>[1] 工业革命前夕，英国已成为世界上最富有的国家。若以可比较的数据来看，1750 年英国的人均收入高于 1960 年印度的人均收入。</p><p>Deane, Phyllis, The First Industrial Revolution, Cambridge University Press, 1965.<br>（来源：菲利斯・迪恩，《第一次工业革命》，剑桥大学出版社，1965 年）</p><p>[2] This has already happened once in China, during the Ming Dynasty, when the country turned its back on industrialization at the command of the court. One of Europe’s advantages was that it had no government powerful enough to do that.<br>[2] 这种情况在中国历史上曾发生过一次 —— 明朝时期，朝廷下令放弃工业化进程。而欧洲的优势之一在于，当时没有任何一个政府拥有足够的权力推行此类政策。</p><p>[3] Of course, Feynman and Diogenes were from adjacent traditions, but Confucius, though more polite, was no more willing to be told what to think.<br>[3] 当然，费曼（理查德・费曼，物理学家）与第欧根尼（古希腊哲学家）源自相近的思想传统，但孔子即便更为谦和，也同样不愿被他人左右自己的思想。</p><p>[4] For similar reasons it might be a lost cause to try to establish a silicon valley in Israel. Instead of no Jews moving there, only Jews would move there, and I don’t think you could build a silicon valley out of just Jews any more than you could out of just Japanese.<br>[4] 出于类似原因，试图在以色列建立 “硅谷” 或许是徒劳之举。这里的问题并非 “没有犹太人愿意迁入”，而是 “只有犹太人会迁入”。我认为，仅靠犹太人无法打造出 “硅谷”，就像仅靠日本人也做不到一样。</p><p>(This is not a remark about the qualities of these groups, just their sizes. Japanese are only about 2% of the world population, and Jews about .2%.)<br>（这并非对这些群体的特质发表评论，仅关乎其人口规模。日本人约占世界人口的 2%，犹太人则约占 0.2%。）</p><p>[5] According to the World Bank, the initial capital requirement for German companies is 47.6% of the per capita income. Doh.<br>[5] 据世界银行数据，德国公司的初始资本要求相当于人均收入的 47.6%。真是令人无奈。</p><p>World Bank, Doing Business in 2006, <a href="http://doingbusiness.org/">http://doingbusiness.org</a><br>（来源：世界银行，《2006 年营商环境报告》，网址：<a href="http://doingbusiness.org/">http://doingbusiness.org</a>）</p><p>[6] For most of the twentieth century, Europeans looked back on the summer of 1914 as if they’d been living in a dream world. It seems more accurate (or at least, as accurate) to call the years after 1914 a nightmare than to call those before a dream. A lot of the optimism Europeans consider distinctly American is simply what they too were feeling in 1914.<br>[6] 在 20 世纪的大部分时间里，欧洲人回顾 1914 年夏天（一战爆发前）时，总觉得那是一段如梦似幻的岁月。但相较于将战前岁月称为 “梦境”，把 1914 年后的岁月称作 “噩梦” 似乎更为准确（至少同样准确）。许多欧洲人认为 “极具美国特色” 的乐观精神，其实正是他们自己在 1914 年也曾拥有的心态。</p><p>[7] The point where things start to go wrong seems to be about 50%. Above that people get serious about tax avoidance. The reason is that the payoff for avoiding tax grows hyperexponentially (x&#x2F;1-x for 0 &lt; x &lt; 1). If your income tax rate is 10%, moving to Monaco would only give you 11% more income, which wouldn’t even cover the extra cost. If it’s 90%, you’d get ten times as much income. And at 98%, as it was briefly in Britain in the 70s, moving to Monaco would give you fifty times as much income. It seems quite likely that European governments of the 70s never drew this curve.<br>[7] 问题的临界点似乎出在 50% 左右的税率上。一旦税率超过这一水平，人们就会认真考虑避税。原因在于，避税的收益会呈超指数级增长（公式为 x&#x2F;(1-x)，其中 0 &lt; x &lt; 1，x 代表税率）。若所得税率为 10%，迁居摩纳哥（低税地区）仅能让你的收入增加 11%，甚至无法覆盖迁居的额外成本；若税率为 90%，收入则会增至原来的 10 倍；而像 20 世纪 70 年代英国曾短暂实行的 98% 税率那样，迁居摩纳哥能让收入增至原来的 50 倍。20 世纪 70 年代的欧洲各国政府，似乎很可能从未绘制过这条收益曲线。</p><p>Thanks to Trevor Blackwell, Matthias Felleisen, Jessica Livingston, Robert Morris, Neil Rimer, Hugues Steinier, Brad Templeton, Fred Wilson, and Stephen Wolfram for reading drafts of this, and to Ed Dumbill for inviting me to speak.<br>感谢特雷弗・布莱克韦尔、马蒂亚斯・费莱森、杰西卡・利文斯顿、罗伯特・莫里斯、尼尔・里默、于格・施泰尼耶、布拉德・坦普尔顿、弗雷德・威尔逊以及史蒂芬・沃尔弗拉姆审阅本文初稿，同时感谢埃德・邓比尔邀请我发表相关演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硅谷的诞生</title>
    <link href="/2025/09/08/how-to-be-silicon-valley/"/>
    <url>/2025/09/08/how-to-be-silicon-valley/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-Be-Silicon-Valley"><a href="#How-to-Be-Silicon-Valley" class="headerlink" title="How to Be Silicon Valley"></a>How to Be Silicon Valley</h1><h1 id="硅谷的诞生"><a href="#硅谷的诞生" class="headerlink" title="硅谷的诞生"></a>硅谷的诞生</h1><p>原文链接: <a href="https://paulgraham.com/siliconvalley.html">https://paulgraham.com/siliconvalley.html</a></p><p>May 2006</p><p>(This essay is derived from a keynote at Xtech.)<br>（本文改编自一场 Xtech 大会的主题演讲）</p><p>Could you reproduce Silicon Valley elsewhere, or is there something unique about it?<br>硅谷能否在其他地方复刻？还是说它本身具备某种独一无二的特质？</p><p>It wouldn’t be surprising if it were hard to reproduce in other countries, because you couldn’t reproduce it in most of the US either. What does it take to make a silicon valley even here?<br>即便硅谷在其他国家难以复刻，也不足为奇 —— 因为在美国的大部分地区，你同样无法复刻它。那么，即便在本土，要打造一个硅谷都需要具备哪些条件呢？</p><p>What it takes is the right people. If you could get the right ten thousand people to move from Silicon Valley to Buffalo, Buffalo would become Silicon Valley. [1]<br>关键在于拥有 “对的人”。倘若你能让一万名合适的人从硅谷搬到布法罗，那么布法罗就会成为下一个硅谷。[1]</p><p>That’s a striking departure from the past. Up till a couple decades ago, geography was destiny for cities. All great cities were located on waterways, because cities made money by trade, and water was the only economical way to ship.<br>这与过去的城市发展逻辑截然不同。几十年前，地理位置对城市而言堪称 “命运”。所有伟大的城市都坐落于水道沿岸，因为当时城市依靠贸易盈利，而水运是唯一经济的运输方式。</p><p>Now you could make a great city anywhere, if you could get the right people to move there. So the question of how to make a silicon valley becomes: who are the right people, and how do you get them to move?<br>如今，只要能吸引合适的人迁入，在任何地方都能打造出一座繁荣的城市。因此，“如何打造硅谷” 的问题便转化为：谁是 “对的人”？又该如何吸引他们前来？</p><h2 id="Two-Types"><a href="#Two-Types" class="headerlink" title="Two Types"></a><strong>Two Types</strong></h2><h2 id="两类关键人群"><a href="#两类关键人群" class="headerlink" title="两类关键人群"></a><strong>两类关键人群</strong></h2><p>I think you only need two kinds of people to create a technology hub: rich people and nerds. They’re the limiting reagents in the reaction that produces startups, because they’re the only ones present when startups get started. Everyone else will move.<br>我认为，打造科技中心只需两类人：富人（投资者）和技术极客。在催生初创企业的 “化学反应” 中，他们是关键的 “限制试剂”—— 因为初创企业起步时，离不开这两类人的参与，而其他人群都会随之聚集而来。</p><p>Observation bears this out: within the US, towns have become startup hubs if and only if they have both rich people and nerds. Few startups happen in Miami, for example, because although it’s full of rich people, it has few nerds. It’s not the kind of place nerds like.<br>实际观察也印证了这一点：在美国，一个城市要成为初创企业中心，当且仅当它同时拥有富人和技术极客。以迈阿密为例，这里几乎没有初创企业 —— 尽管当地富人云集，却鲜有技术极客，因为迈阿密并非极客青睐的地方。</p><p>Whereas Pittsburgh has the opposite problem: plenty of nerds, but no rich people. The top US Computer Science departments are said to be MIT, Stanford, Berkeley, and Carnegie-Mellon. MIT yielded Route 128. Stanford and Berkeley yielded Silicon Valley. But Carnegie-Mellon? The record skips at that point. Lower down the list, the University of Washington yielded a high-tech community in Seattle, and the University of Texas at Austin yielded one in Austin. But what happened in Pittsburgh? And in Ithaca, home of Cornell, which is also high on the list?<br>而匹兹堡则面临相反的困境：这里技术极客众多，却缺乏富裕的投资者。美国顶尖的计算机科学系公认包括麻省理工学院（MIT）、斯坦福大学、加州大学伯克利分校以及卡内基梅隆大学。MIT 催生了 128 号公路科技走廊，斯坦福和伯克利孕育了硅谷，可卡内基梅隆呢？在这一点上，“成功记录” 戛然而止。排名稍靠后的华盛顿大学催生了西雅图的高科技社区，德克萨斯大学奥斯汀分校也带动了奥斯汀的科技产业发展。但匹兹堡为何毫无动静？康奈尔大学所在地伊萨卡同样拥有顶尖计算机系，为何也未形成科技中心？</p><p>I grew up in Pittsburgh and went to college at Cornell, so I can answer for both. The weather is terrible, particularly in winter, and there’s no interesting old city to make up for it, as there is in Boston. Rich people don’t want to live in Pittsburgh or Ithaca. So while there are plenty of hackers who could start startups, there’s no one to invest in them.<br>我在匹兹堡长大，又在康奈尔大学读了本科，因此能解释这两个地方的问题。两地的气候都很糟糕，尤其是冬天，而且不像波士顿那样有充满魅力的老城区可以弥补气候的不足。富人不愿住在匹兹堡或伊萨卡，所以尽管当地有很多能创办初创企业的技术人才，却没有人愿意为他们投资。</p><h2 id="Not-Bureaucrats"><a href="#Not-Bureaucrats" class="headerlink" title="Not Bureaucrats"></a><strong>Not Bureaucrats</strong></h2><h2 id="不能依赖官僚"><a href="#不能依赖官僚" class="headerlink" title="不能依赖官僚"></a><strong>不能依赖官僚</strong></h2><p>Do you really need the rich people? Wouldn’t it work to have the government invest in the nerds? No, it would not. Startup investors are a distinct type of rich people. They tend to have a lot of experience themselves in the technology business. This (a) helps them pick the right startups, and (b) means they can supply advice and connections as well as money. And the fact that they have a personal stake in the outcome makes them really pay attention.<br>难道真的离不开富人（私人投资者）吗？让政府给技术极客投资行不通吗？答案是行不通。初创企业投资者是一类特殊的富人，他们自身往往在科技行业拥有丰富经验。这带来两个优势：（1）帮助他们筛选出有潜力的初创企业；（2）意味着他们除了提供资金，还能提供行业建议和人脉资源。而且，由于投资结果与他们的个人利益息息相关，他们会投入足够的精力去关注项目。</p><p>Bureaucrats by their nature are the exact opposite sort of people from startup investors. The idea of them making startup investments is comic. It would be like mathematicians running Vogue– or perhaps more accurately, Vogue editors running a math journal. [2]<br>官僚的本质与初创企业投资者恰好相反。让官僚来做初创企业投资，想法本身就很滑稽。这就好比让数学家去运营《Vogue》时尚杂志 —— 或者更贴切地说，让《Vogue》的编辑去掌管一本数学期刊。[2]</p><p>Though indeed, most things bureaucrats do, they do badly. We just don’t notice usually, because they only have to compete against other bureaucrats. But as startup investors they’d have to compete against pros with a great deal more experience and motivation.<br>事实上，官僚做大多数事情都做得很糟糕。只是我们通常不会注意到，因为他们只需要和其他官僚竞争。但如果作为初创企业投资者，他们要对抗的是经验更丰富、积极性更高的专业投资者，根本毫无竞争力。</p><p>Even corporations that have in-house VC groups generally forbid them to make their own investment decisions. Most are only allowed to invest in deals where some reputable private VC firm is willing to act as lead investor.<br>即便是拥有内部风投部门的大公司，通常也不允许这些部门自主做投资决策。大多数公司的内部风投只能投资那些有知名私人风投公司牵头的项目。</p><h2 id="Not-Buildings"><a href="#Not-Buildings" class="headerlink" title="Not Buildings"></a><strong>Not Buildings</strong></h2><h2 id="不能依赖建筑"><a href="#不能依赖建筑" class="headerlink" title="不能依赖建筑"></a><strong>不能依赖建筑</strong></h2><p>If you go to see Silicon Valley, what you’ll see are buildings. But it’s the people that make it Silicon Valley, not the buildings. I read occasionally about attempts to set up “technology parks” in other places, as if the active ingredient of Silicon Valley were the office space. An article about Sophia Antipolis bragged that companies there included Cisco, Compaq, IBM, NCR, and Nortel. Don’t the French realize these aren’t startups?<br>如果你去硅谷实地考察，看到的会是一座座建筑。但造就硅谷的是 “人”，而非这些建筑。我偶尔会看到一些报道，说其他地方试图建立 “科技园区”，仿佛硅谷的核心要素是办公空间。有一篇关于法国索菲亚科技园的文章吹嘘说，那里的企业包括思科、康柏、IBM、NCR 和北电网络。法国人难道没意识到这些都不是初创企业吗？</p><p>Building office buildings for technology companies won’t get you a silicon valley, because the key stage in the life of a startup happens before they want that kind of space. The key stage is when they’re three guys operating out of an apartment. Wherever the startup is when it gets funded, it will stay. The defining quality of Silicon Valley is not that Intel or Apple or Google have offices there, but that they were started there.<br>为科技公司建造办公楼无法打造出硅谷，因为初创企业生命周期中的关键阶段，发生在它们需要办公大楼之前。这个关键阶段，往往是三个人在一间公寓里办公的时期。初创企业在哪个地方获得投资，通常就会在那里扎根。硅谷的核心特质，不在于英特尔、苹果或谷歌在那里设有办公室，而在于这些公司都是在那里起步的。</p><p>So if you want to reproduce Silicon Valley, what you need to reproduce is those two or three founders sitting around a kitchen table deciding to start a company. And to reproduce that you need those people.<br>因此，若想复刻硅谷，你需要复刻的场景是：两三位创始人围坐在餐桌旁，决定创办一家公司。而要实现这一场景，你首先需要拥有这样的人。</p><h2 id="Universities"><a href="#Universities" class="headerlink" title="Universities"></a><strong>Universities</strong></h2><h2 id="大学的作用"><a href="#大学的作用" class="headerlink" title="大学的作用"></a><strong>大学的作用</strong></h2><p>The exciting thing is, all you need are the people. If you could attract a critical mass of nerds and investors to live somewhere, you could reproduce Silicon Valley. And both groups are highly mobile. They’ll go where life is good. So what makes a place good to them?<br>令人振奋的是，打造硅谷所需的核心只有 “人”。只要能吸引足够数量的技术极客和投资者在此定居，就能复刻硅谷。而且这两类人流动性都很强，他们会去往生活条件优越的地方。那么，什么样的地方对他们有吸引力呢？</p><p>What nerds like is other nerds. Smart people will go wherever other smart people are. And in particular, to great universities. In theory there could be other ways to attract them, but so far universities seem to be indispensable. Within the US, there are no technology hubs without first-rate universities– or at least, first-rate computer science departments.<br>技术极客喜欢与同类人相聚。聪明人会去往其他聪明人聚集的地方，尤其是顶尖大学所在地。理论上，或许有其他吸引他们的方式，但迄今为止，大学似乎是不可或缺的要素。在美国，没有任何一个科技中心不依托于顶尖大学 —— 至少是依托于顶尖的计算机科学系。</p><p>So if you want to make a silicon valley, you not only need a university, but one of the top handful in the world. It has to be good enough to act as a magnet, drawing the best people from thousands of miles away. And that means it has to stand up to existing magnets like MIT and Stanford.<br>因此，若想打造硅谷，你需要的不仅是一所大学，更是一所世界顶尖的大学。它必须足够有吸引力，能从千里之外吸引最优秀的人才。这意味着它需要具备与 MIT、斯坦福等现有 “人才磁石” 抗衡的实力。</p><p>This sounds hard. Actually it might be easy. My professor friends, when they’re deciding where they’d like to work, consider one thing above all: the quality of the other faculty. What attracts professors is good colleagues. So if you managed to recruit, en masse, a significant number of the best young researchers, you could create a first-rate university from nothing overnight. And you could do that for surprisingly little. If you paid 200 people hiring bonuses of $3 million apiece, you could put together a faculty that would bear comparison with any in the world. And from that point the chain reaction would be self-sustaining. So whatever it costs to establish a mediocre university, for an additional half billion or so you could have a great one. [3]<br>这听起来难度很大，但实际上可能没那么难。我那些教授朋友在选择工作地点时，最看重的一点是：其他教职人员的水平。吸引教授的是优秀的同事。因此，如果你能大规模招募到一大批最优秀的年轻研究者，就能在一夜之间从零打造出一所顶尖大学。而且所需的成本可能低得惊人：如果给 200 人每人发放 300 万美元的聘用奖金，就能组建起一支足以与世界任何顶尖大学抗衡的师资队伍。从那时起，连锁反应便会自我维持。因此，无论建立一所普通大学需要多少成本，只需额外投入约 5 亿美元，就能将其打造成一所顶尖大学。[3]</p><h2 id="Personality"><a href="#Personality" class="headerlink" title="Personality"></a><strong>Personality</strong></h2><h2 id="城市个性"><a href="#城市个性" class="headerlink" title="城市个性"></a><strong>城市个性</strong></h2><p>However, merely creating a new university would not be enough to start a silicon valley. The university is just the seed. It has to be planted in the right soil, or it won’t germinate. Plant it in the wrong place, and you just create Carnegie-Mellon.<br>然而，仅仅创建一所新的顶尖大学，并不足以打造硅谷。大学只是 “种子”，必须将其种在合适的 “土壤” 中，否则无法生根发芽。如果种错了地方，最终也只能造就另一所 “卡内基梅隆大学”（有顶尖学科却无法带动周边科技产业）。</p><p>To spawn startups, your university has to be in a town that has attractions other than the university. It has to be a place where investors want to live, and students want to stay after they graduate.<br>要孕育初创企业，大学所在的城市必须具备除大学之外的其他吸引力。它需要成为投资者愿意定居、学生毕业后愿意留下的地方。</p><p>The two like much the same things, because most startup investors are nerds themselves. So what do nerds look for in a town? Their tastes aren’t completely different from other people’s, because a lot of the towns they like most in the US are also big tourist destinations: San Francisco, Boston, Seattle. But their tastes can’t be quite mainstream either, because they dislike other big tourist destinations, like New York, Los Angeles, and Las Vegas.<br>投资者和极客的偏好大致相同，因为大多数初创企业投资者本身就是技术极客。那么，极客在选择城市时会看重什么？他们的品味与普通人并非完全不同 —— 在美国，他们最喜欢的城市大多也是热门旅游胜地，比如旧金山、波士顿、西雅图。但他们的品味又不完全主流，因为他们不喜欢纽约、洛杉矶、拉斯维加斯这类其他热门旅游城市。</p><p>There has been a lot written lately about the “creative class.” The thesis seems to be that as wealth derives increasingly from ideas, cities will prosper only if they attract those who have them. That is certainly true; in fact it was the basis of Amsterdam’s prosperity 400 years ago.<br>最近有很多关于 “创意阶层” 的论述。其核心观点似乎是：随着财富的创造越来越依赖创意，城市只有吸引到拥有创意的人，才能实现繁荣。这一点无疑是正确的 —— 事实上，400 年前阿姆斯特丹的繁荣，正是基于这一逻辑。</p><p>A lot of nerd tastes they share with the creative class in general. For example, they like well-preserved old neighborhoods instead of cookie-cutter suburbs, and locally-owned shops and restaurants instead of national chains. Like the rest of the creative class, they want to live somewhere with personality.<br>技术极客的许多偏好与创意阶层整体一致。例如，他们喜欢保存完好的老街区，而非千篇一律的郊区；喜欢本地经营的小店和餐厅，而非全国连锁品牌。和其他创意阶层一样，他们希望生活在一个有 “个性” 的地方。</p><p>What exactly is personality? I think it’s the feeling that each building is the work of a distinct group of people. A town with personality is one that doesn’t feel mass-produced. So if you want to make a startup hub– or any town to attract the “creative class”– you probably have to ban large development projects. When a large tract has been developed by a single organization, you can always tell. [4]<br>那么，“个性” 究竟是什么？我认为，它是一种 “每栋建筑都出自不同人群之手” 的独特感。一个有个性的城市，不会给人 “批量生产” 的感觉。因此，若想打造初创企业中心 —— 或任何想要吸引 “创意阶层” 的城市 —— 或许必须禁止大型房地产开发项目。只要一片区域是由单一机构开发的，其 “批量感” 就会一目了然。[4]</p><p>Most towns with personality are old, but they don’t have to be. Old towns have two advantages: they’re denser, because they were laid out before cars, and they’re more varied, because they were built one building at a time. You could have both now. Just have building codes that ensure density, and ban large scale developments.<br>大多数有个性的城市都是老城市，但这并非绝对。老城市有两个优势：一是密度更高（因为它们在汽车普及前就已规划成型），二是建筑风格更多样（因为它们是一栋一栋逐步建造的）。如今，我们完全可以打造出兼具这两个优势的新城市：只需通过建筑法规确保城市密度，并禁止大规模开发项目即可。</p><p>A corollary is that you have to keep out the biggest developer of all: the government. A government that asks “How can we build a silicon valley?” has probably ensured failure by the way they framed the question. You don’t build a silicon valley; you let one grow.<br>由此可以推出一个结论：必须排除最大的 “开发者”—— 政府。当政府提出 “我们该如何建造硅谷” 时，其问题的表述方式或许就已经注定了失败。硅谷不是 “建造” 出来的，而是 “培育” 出来的。</p><h2 id="Nerds"><a href="#Nerds" class="headerlink" title="Nerds"></a>Nerds</h2><h2 id="技术极客群体"><a href="#技术极客群体" class="headerlink" title="技术极客群体"></a>技术极客群体</h2><p>If you want to attract nerds, you need more than a town with personality. You need a town with the right personality. Nerds are a distinct subset of the creative class, with different tastes from the rest. You can see this most clearly in New York, which attracts a lot of creative people, but few nerds. [5]<br>若想吸引技术极客，仅靠一座有个性的城市还不够，你需要的是一座拥有 “契合极客个性” 的城市。技术极客是创意阶层中一个独特的分支，其偏好与其他创意人群不同。这一点在纽约体现得最为明显：纽约能吸引大量创意人士，却鲜有技术极客驻足。[5]</p><p>What nerds like is the kind of town where people walk around smiling. This excludes LA, where no one walks at all, and also New York, where people walk, but not smiling. When I was in grad school in Boston, a friend came to visit from New York. On the subway back from the airport she asked “Why is everyone smiling?” I looked and they weren’t smiling. They just looked like they were compared to the facial expressions she was used to.<br>技术极客喜欢的是那种 “人们走路时面带笑意” 的城市。洛杉矶显然不符合 —— 那里几乎没人步行；纽约也不符合 —— 那里的人会步行，却鲜有笑容。我在波士顿读研究生时，一位纽约的朋友来拜访我。从机场坐地铁回去的路上，她问我：“为什么这里每个人都在笑？” 我看了看周围，其实人们并没有在笑，只是比起她在纽约习惯看到的表情，波士顿人的神情显得更放松罢了。</p><p>If you’ve lived in New York, you know where these facial expressions come from. It’s the kind of place where your mind may be excited, but your body knows it’s having a bad time. People don’t so much enjoy living there as endure it for the sake of the excitement. And if you like certain kinds of excitement, New York is incomparable. It’s a hub of glamour, a magnet for all the shorter half-life isotopes of style and fame.<br>如果你在纽约生活过，就会明白这种紧绷表情的来源。在纽约，你的大脑可能会因城市的活力而兴奋，但身体却能清晰地感受到不适。人们并非享受在纽约的生活，更多是为了追求那份刺激而选择忍受。当然，若你钟情于某种特定的刺激，纽约无疑是无可替代的。它是魅力的中心，吸引着所有 “半衰期短暂” 的潮流与名气。</p><p>Nerds don’t care about glamour, so to them the appeal of New York is a mystery. People who like New York will pay a fortune for a small, dark, noisy apartment in order to live in a town where the cool people are really cool. A nerd looks at that deal and sees only: pay a fortune for a small, dark, noisy apartment.<br>技术极客并不在意所谓的 “魅力”，因此纽约的吸引力对他们而言是个谜。喜欢纽约的人愿意花大价钱租一间狭小、昏暗且嘈杂的公寓，只为生活在一个 “潮人足够潮” 的城市里。但在极客眼中，这笔交易的本质只有一个：花巨款住小破屋。</p><p>Nerds will pay a premium to live in a town where the smart people are really smart, but you don’t have to pay as much for that. It’s supply and demand: glamour is popular, so you have to pay a lot for it.<br>技术极客愿意为 “聪明人足够聪明” 的城市支付溢价，但这种溢价远低于为 “魅力” 支付的成本。这是供需关系决定的：“魅力” 深受大众追捧，因此价格高昂；而 “聚集聪明人” 的需求相对小众，成本自然更低。</p><p>Most nerds like quieter pleasures. They like cafes instead of clubs; used bookshops instead of fashionable clothing shops; hiking instead of dancing; sunlight instead of tall buildings. A nerd’s idea of paradise is Berkeley or Boulder.<br>大多数技术极客偏爱安静的乐趣。他们喜欢咖啡馆而非酒吧，喜欢旧书店而非时尚服装店，喜欢徒步而非跳舞，喜欢阳光而非高楼大厦。在极客眼中，伯克利或博尔德这样的城市，才称得上是 “天堂”。</p><h2 id="Youth"><a href="#Youth" class="headerlink" title="Youth"></a>Youth</h2><h2 id="年轻群体的重要性"><a href="#年轻群体的重要性" class="headerlink" title="年轻群体的重要性"></a>年轻群体的重要性</h2><p>It’s the young nerds who start startups, so it’s those specifically the city has to appeal to. The startup hubs in the US are all young-feeling towns. This doesn’t mean they have to be new. Cambridge has the oldest town plan in America, but it feels young because it’s full of students.<br>创办初创企业的往往是年轻的技术极客，因此城市需要特别吸引这类人群。美国的所有初创企业中心，都给人 “充满年轻活力” 的感觉 —— 这并不意味着这些城市必须是新建的。例如，剑桥市拥有美国最古老的城市规划，但因其遍布学生，整体氛围依然年轻。</p><p>What you can’t have, if you want to create a silicon valley, is a large, existing population of stodgy people. It would be a waste of time to try to reverse the fortunes of a declining industrial town like Detroit or Philadelphia by trying to encourage startups. Those places have too much momentum in the wrong direction. You’re better off starting with a blank slate in the form of a small town. Or better still, if there’s a town young people already flock to, that one.<br>若想打造硅谷，绝对不能存在的情况是：当地已有大量思想僵化的居民。试图通过扶持初创企业来扭转底特律、费城等衰退工业城市的命运，无疑是浪费时间 —— 这些地方在 “衰落” 的方向上已有太强的惯性。你最好从一个 “白纸一张” 的小镇起步，或者更理想的是，选择一个年轻人本就愿意聚集的城市。</p><p>The Bay Area was a magnet for the young and optimistic for decades before it was associated with technology. It was a place people went in search of something new. And so it became synonymous with California nuttiness. There’s still a lot of that there. If you wanted to start a new fad– a new way to focus one’s “energy,” for example, or a new category of things not to eat– the Bay Area would be the place to do it. But a place that tolerates oddness in the search for the new is exactly what you want in a startup hub, because economically that’s what startups are. Most good startup ideas seem a little crazy; if they were obviously good ideas, someone would have done them already.<br>在与 “科技” 绑定之前的几十年里，旧金山湾区就已是年轻乐观人群的聚集地。人们前往那里，是为了寻找新的可能性，因此湾区也成了 “加州奇思妙想” 的代名词 —— 如今这种特质依然浓厚。如果你想发起一种新潮流（比如一种新的 “能量聚焦” 方式，或是一类新的 “禁食食物”），湾区会是最佳选择。而这种 “为追求创新而包容怪异想法” 的特质，正是初创企业中心所必需的 —— 因为从经济本质来看，初创企业本身就是 “怪异想法的实践”。大多数优秀的初创想法起初都显得有些疯狂；如果它们显而易见是好主意，早就有人付诸实践了。</p><p>(How many people are going to want computers in their houses? What, another search engine?)<br>（试想当初的质疑：有多少人会想在家里放一台电脑？什么？又一个搜索引擎？）</p><p>That’s the connection between technology and liberalism. Without exception the high-tech cities in the US are also the most liberal. But it’s not because liberals are smarter that this is so. It’s because liberal cities tolerate odd ideas, and smart people by definition have odd ideas.<br>这正是科技与自由主义之间的关联。美国所有的高科技城市，毫无例外地都是最自由的城市。但这并非因为自由主义者更聪明，而是因为自由派主导的城市更能包容 “怪异想法”—— 而聪明人的本质，就是拥有与众不同的想法。</p><p>Conversely, a town that gets praised for being “solid” or representing “traditional values” may be a fine place to live, but it’s never going to succeed as a startup hub. The 2004 presidential election, though a disaster in other respects, conveniently supplied us with a county-by-county map of such places. [6]<br>相反，那些因 “稳重” 或 “代表传统价值观” 而受称赞的城市，或许是宜居之地，却永远无法成为初创企业中心。2004 年的美国总统大选，尽管在其他方面是场灾难，却恰好为我们提供了一份 “这类传统城市的全美郡县分布图”。[6]</p><p>To attract the young, a town must have an intact center. In most American cities the center has been abandoned, and the growth, if any, is in the suburbs. Most American cities have been turned inside out. But none of the startup hubs has: not San Francisco, or Boston, or Seattle. They all have intact centers. [7] My guess is that no city with a dead center could be turned into a startup hub. Young people don’t want to live in the suburbs.<br>要吸引年轻人，城市必须拥有一个 “完整的市中心”。在美国的大多数城市，市中心已被废弃，即便有发展，也集中在郊区 —— 这些城市的发展模式仿佛 “被内外颠倒”。但所有初创企业中心都不存在这种情况：旧金山、波士顿、西雅图的市中心都保持着活力。[7] 我推测，任何一个 “市中心衰败” 的城市，都无法成为初创企业中心 —— 因为年轻人不愿住在郊区。</p><p>Within the US, the two cities I think could most easily be turned into new silicon valleys are Boulder and Portland. Both have the kind of effervescent feel that attracts the young. They’re each only a great university short of becoming a silicon valley, if they wanted to.<br>在美国，我认为最容易转型为新硅谷的两个城市是博尔德和波特兰。这两座城市都有一种吸引年轻人的 “活力氛围”。如果它们愿意，只需再拥有一所顶尖大学，就能成为新的硅谷。</p><h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><h2 id="时间的沉淀作用"><a href="#时间的沉淀作用" class="headerlink" title="时间的沉淀作用"></a>时间的沉淀作用</h2><p>A great university near an attractive town. Is that all it takes? That was all it took to make the original Silicon Valley. Silicon Valley traces its origins to William Shockley, one of the inventors of the transistor. He did the research that won him the Nobel Prize at Bell Labs, but when he started his own company in 1956 he moved to Palo Alto to do it. At the time that was an odd thing to do. Why did he? Because he had grown up there and remembered how nice it was. Now Palo Alto is suburbia, but then it was a charming college town– a charming college town with perfect weather and San Francisco only an hour away.<br>“一座有吸引力的城市附近有一所顶尖大学”—— 难道打造硅谷只需要这两个条件吗？答案是肯定的，最初的硅谷正是这样诞生的。硅谷的起源可以追溯到晶体管的发明者之一威廉・肖克利。他在贝尔实验室完成了荣获诺贝尔奖的研究，但 1956 年创办自己的公司时，却选择搬到帕洛阿尔托。在当时，这是一个反常的决定。他为何要这么做？因为他在帕洛阿尔托长大，深知这里的宜居之处。如今的帕洛阿尔托已是郊区，但在当时，它是一个迷人的大学城 —— 气候宜人，距离旧金山仅一小时车程。</p><p>The companies that rule Silicon Valley now are all descended in various ways from Shockley Semiconductor. Shockley was a difficult man, and in 1957 his top people– “the traitorous eight”– left to start a new company, Fairchild Semiconductor. Among them were Gordon Moore and Robert Noyce, who went on to found Intel, and Eugene Kleiner, who founded the VC firm Kleiner Perkins. Forty-two years later, Kleiner Perkins funded Google, and the partner responsible for the deal was John Doerr, who came to Silicon Valley in 1974 to work for Intel.<br>如今主导硅谷的企业，都以各种方式源自肖克利半导体公司。肖克利性格孤僻，1957 年，他手下的八位核心员工（即 “叛逆八人组”）离开他，创办了仙童半导体公司。这八人中，戈登・摩尔和罗伯特・诺伊斯后来共同创立了英特尔，尤金・克莱纳则创办了风投公司凯鹏华盈。42 年后，凯鹏华盈投资了谷歌，而负责这笔交易的合伙人约翰・杜尔，正是 1974 年来到硅谷、加入英特尔工作的。</p><p>So although a lot of the newest companies in Silicon Valley don’t make anything out of silicon, there always seem to be multiple links back to Shockley. There’s a lesson here: startups beget startups. People who work for startups start their own. People who get rich from startups fund new ones. I suspect this kind of organic growth is the only way to produce a startup hub, because it’s the only way to grow the expertise you need.<br>因此，尽管如今硅谷的许多新公司已不再涉足半导体业务，但它们的 “根源” 总能追溯到肖克利。这其中蕴含着一个规律：初创企业会催生新的初创企业。在初创公司工作过的人，会自己创办新公司；从初创企业中获利的人，会投资新的初创企业。我认为，这种 “有机增长” 是打造初创企业中心的唯一途径 —— 因为只有这样，才能积累起行业所需的专业经验和资源。</p><p>That has two important implications. The first is that you need time to grow a silicon valley. The university you could create in a couple years, but the startup community around it has to grow organically. The cycle time is limited by the time it takes a company to succeed, which probably averages about five years.<br>这一规律带来两个重要启示。首先，打造硅谷需要时间。你或许能在几年内建成一所顶尖大学，但围绕大学形成的初创生态必须通过有机增长慢慢培育。这个周期的长短，取决于一家初创企业走向成功所需的时间 —— 平均来看，这一过程大约需要五年。</p><p>The other implication of the organic growth hypothesis is that you can’t be somewhat of a startup hub. You either have a self-sustaining chain reaction, or not. Observation confirms this too: cities either have a startup scene, or they don’t. There is no middle ground. Chicago has the third largest metropolitan area in America. As a source of startups it’s negligible compared to Seattle, number 15.<br>其次，“有机增长” 意味着初创企业中心不存在 “半成” 状态 —— 要么形成自我维持的连锁反应，要么就无法成为中心。实际观察也证实了这一点：城市要么有活跃的初创生态，要么完全没有，不存在中间地带。例如，芝加哥是美国第三大都会区，但作为初创企业的发源地，其影响力远不及排名第 15 的西雅图。</p><p>The good news is that the initial seed can be quite small. Shockley Semiconductor, though itself not very successful, was big enough. It brought a critical mass of experts in an important new technology together in a place they liked enough to stay.<br>好消息是，启动这一过程的 “种子” 可以很小。肖克利半导体公司本身并不算成功，但它已足够 “大”—— 它将足够数量的 “关键技术专家” 聚集到了一个他们愿意长期停留的地方，为后续的生态发展埋下了伏笔。</p><h2 id="Competing"><a href="#Competing" class="headerlink" title="Competing"></a>Competing</h2><h2 id="与现有硅谷的竞争"><a href="#与现有硅谷的竞争" class="headerlink" title="与现有硅谷的竞争"></a>与现有硅谷的竞争</h2><p>Of course, a would-be silicon valley faces an obstacle the original one didn’t: it has to compete with Silicon Valley. Can that be done? Probably.<br>当然，如今想要打造 “新硅谷” 的城市，面临着当初硅谷没有的障碍：它们必须与现有的硅谷竞争。但这并非不可能。</p><p>One of Silicon Valley’s biggest advantages is its venture capital firms. This was not a factor in Shockley’s day, because VC funds didn’t exist. In fact, Shockley Semiconductor and Fairchild Semiconductor were not startups at all in our sense. They were subsidiaries– of Beckman Instruments and Fairchild Camera and Instrument respectively. Those companies were apparently willing to establish subsidiaries wherever the experts wanted to live.<br>硅谷最大的优势之一是其风投公司。但在肖克利的时代，这一优势并不存在 —— 因为当时还没有风投基金。事实上，肖克利半导体和仙童半导体，按如今的定义来看都不算初创企业，它们分别是贝克曼仪器公司和仙童相机与仪器公司的子公司。显然，当时的母公司愿意在 “专家愿意居住的任何地方” 设立子公司。</p><p>Venture investors, however, prefer to fund startups within an hour’s drive. For one, they’re more likely to notice startups nearby. But when they do notice startups in other towns they prefer them to move. They don’t want to have to travel to attend board meetings, and in any case the odds of succeeding are higher in a startup hub.<br>如今的风投投资者则更倾向于投资 “一小时车程范围内” 的初创企业。一方面，他们更容易发现周边的初创公司；另一方面，即便注意到其他城市的初创企业，他们也更希望这些公司搬到自己所在的初创中心 —— 毕竟，没人愿意为了参加董事会而长途奔波，而且在初创中心，企业成功的概率本身也更高。</p><p>The centralizing effect of venture firms is a double one: they cause startups to form around them, and those draw in more startups through acquisitions. And although the first may be weakening because it’s now so cheap to start some startups, the second seems as strong as ever. Three of the most admired “Web 2.0” companies were started outside the usual startup hubs, but two of them have already been reeled in through acquisitions.<br>风投公司的 “中心化效应” 是双重的：它们既会吸引初创企业在其周边成立，这些已成立的企业又会通过收购吸引更多初创企业前来。尽管前者的效应可能因 “部分初创企业启动成本降低” 而减弱，但后者的效应依然强劲。最受推崇的三家 “Web 2.0” 公司中，有三家是在传统初创中心之外成立的，但其中两家已通过被收购的方式 “归入” 了初创中心。</p><p>Such centralizing forces make it harder for new silicon valleys to get started. But by no means impossible. Ultimately power rests with the founders. A startup with the best people will beat one with funding from famous VCs, and a startup that was sufficiently successful would never have to move. So a town that could exert enough pull over the right people could resist and perhaps even surpass Silicon Valley.<br>这种中心化力量确实让新硅谷的起步更加困难，但绝非不可能。归根结底，主动权掌握在初创企业创始人手中。一个拥有顶尖人才的初创企业，即便没有知名风投的支持，也能击败获得风投的对手；而一个足够成功的初创企业，根本无需搬迁。因此，只要一座城市能对 “合适的人” 产生足够的吸引力，就有能力对抗甚至超越现有的硅谷。</p><p>For all its power, Silicon Valley has a great weakness: the paradise Shockley found in 1956 is now one giant parking lot. San Francisco and Berkeley are great, but they’re forty miles away. Silicon Valley proper is soul-crushing suburban sprawl. It has fabulous weather, which makes it significantly better than the soul-crushing sprawl of most other American cities. But a competitor that managed to avoid sprawl would have real leverage. All a city needs is to be the kind of place the next traitorous eight look at and say “I want to stay here,” and that would be enough to get the chain reaction started.<br>尽管硅谷实力雄厚，却存在一个巨大的缺陷：肖克利在 1956 年找到的那片 “天堂”，如今已变成一片庞大的停车场。旧金山和伯克利固然不错，但它们距离硅谷核心区域有 40 英里远。硅谷本身则是一片让人感到压抑的郊区蔓延地带。虽说这里气候极佳，使其比美国其他大多数 “压抑的蔓延郊区” 要好得多，但如果有一个竞争对手能避免这种无序扩张，就能获得真正的优势。一座城市只需成为 “下一个叛逆八人组” 看到后会说 “我想留在这里” 的地方，就足以启动打造硅谷的连锁反应。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>[1] It’s interesting to consider how low this number could be made. I suspect five hundred would be enough, even if they could bring no assets with them. Probably just thirty, if I could pick them, would be enough to turn Buffalo into a significant startup hub.<br>[1] 思考 “打造硅谷所需的关键人数下限” 是个有趣的问题。我猜测，即便这些人无法携带任何资产，500 人也足够了；如果让我来挑选，或许只需 30 人，就足以将布法罗打造成一个重要的初创企业中心。</p><p>[2] Bureaucrats manage to allocate research funding moderately well, but only because (like an in-house VC fund) they outsource most of the work of selection. A professor at a famous university who is highly regarded by his peers will get funding, pretty much regardless of the proposal. That wouldn’t work for startups, whose founders aren’t sponsored by organizations, and are often unknowns.<br>[2] 官僚在分配科研资金时，勉强能做到 “还算合理”，但这仅仅是因为他们（如同企业内部风投基金）将大部分筛选工作外包了出去。一所知名大学的教授，只要在同行中口碑良好，几乎无论其申请方案如何，都能获得资金。但这种模式对初创企业行不通 —— 初创企业的创始人没有机构赞助，而且往往名不见经传。</p><p>[3] You’d have to do it all at once, or at least a whole department at a time, because people would be more likely to come if they knew their friends were. And you should probably start from scratch, rather than trying to upgrade an existing university, or much energy would be lost in friction.<br>[3] （打造顶尖大学）必须一次性完成，至少要一次性组建好整个院系 —— 因为如果人们知道自己的朋友也会来，就更愿意加入。而且，你最好从零开始创建，而非试图改造一所现有大学，否则会在内部摩擦中消耗大量精力。</p><p>[4] Hypothesis: Any plan in which multiple independent buildings are gutted or demolished to be “redeveloped” as a single project is a net loss of personality for the city, with the exception of the conversion of buildings not previously public, like warehouses.<br>[4] 我的假设是：任何将多栋独立建筑拆除或内部清空、并作为单一项目 “重新开发” 的计划，都会导致城市个性的净流失 —— 除非是将仓库等原本不向公众开放的建筑改造为公共空间，这种情况除外。</p><p>[5] A few startups get started in New York, but less than a tenth as many per capita as in Boston, and mostly in less nerdy fields like finance and media.<br>[5] 纽约确实有一些初创企业成立，但按人均计算，数量还不到波士顿的十分之一，而且这些企业大多集中在金融、媒体等 “非极客领域”。</p><p>[6] Some blue counties are false positives (reflecting the remaining power of Democratic party machines), but there are no false negatives. You can safely write off all the red counties.<br>[6] （在 2004 年总统大选地图中）一些蓝色郡县（支持民主党）属于 “假阳性”—— 它们的蓝色仅反映了民主党机器残存的影响力，并非真正的自由派城市；但不存在 “假阴性” 情况（即红色郡县中不会有真正的自由派城市）。因此，所有红色郡县（支持共和党）都可以被排除在 “潜在初创中心” 之外。</p><p>[7] Some “urban renewal” experts took a shot at destroying Boston’s in the 1960s, leaving the area around city hall a bleak wasteland, but most neighborhoods successfully resisted them.<br>[7] 20 世纪 60 年代，一些 “城市更新” 专家曾试图破坏波士顿的市中心，导致市政厅周边区域沦为一片荒凉之地，但大多数社区都成功抵制了这种破坏行为，保住了市中心的活力。</p><p>Thanks to Chris Anderson, Trevor Blackwell, Marc Hedlund, Jessica Livingston, Robert Morris, Greg Mcadoo, Fred Wilson, and Stephen Wolfram for reading drafts of this, and to Ed Dumbill for inviting me to speak.<br>感谢克里斯・安德森、特雷弗・布莱克韦尔、马克・赫德伦德、杰西卡・利文斯顿、罗伯特・莫里斯、格雷格・麦卡杜、弗雷德・威尔逊和斯蒂芬・沃尔夫拉姆审阅本文初稿，同时感谢埃德・邓比尔邀请我进行这场演讲。</p><p>(The second part of this talk became Why Startups Condense in America.)<br>（本次演讲的第二部分内容，后来整理成了《初创企业为何聚集在美国》一文。）</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初创公司最难吸取的教训</title>
    <link href="/2025/09/08/the-hardest-lessons-for-startups-to-learn/"/>
    <url>/2025/09/08/the-hardest-lessons-for-startups-to-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Hardest-Lessons-for-Startups-to-Learn"><a href="#The-Hardest-Lessons-for-Startups-to-Learn" class="headerlink" title="The Hardest Lessons for Startups to Learn"></a>The Hardest Lessons for Startups to Learn</h1><h1 id="初创公司最难吸取的教训"><a href="#初创公司最难吸取的教训" class="headerlink" title="初创公司最难吸取的教训"></a>初创公司最难吸取的教训</h1><p>原文链接: <a href="https://paulgraham.com/startuplessons.html">https://paulgraham.com/startuplessons.html</a></p><p>April 2006</p><p>(This essay is derived from a talk at the 2006 Startup School.)<br>（本文改编自 2006 年创业学院的一次演讲内容。）</p><p>The startups we’ve funded so far are pretty quick, but they seem quicker to learn some lessons than others. I think it’s because some things about startups are kind of counterintuitive.<br>我们目前投资过的初创公司学习能力都相当强，但在某些经验教训的吸取上，它们的速度却存在差异。我认为这是因为初创公司运营中的一些道理往往与直觉相悖。</p><p>We’ve now invested in enough companies that I’ve learned a trick for determining which points are the counterintuitive ones: they’re the ones I have to keep repeating.<br>如今我们投资的公司数量已足够多，也因此摸索出一个判断 “反直觉道理” 的方法：那些我必须反复强调的内容，就是反直觉的。</p><p>So I’m going to number these points, and maybe with future startups I’ll be able to pull off a form of Huffman coding. I’ll make them all read this, and then instead of nagging them in detail, I’ll just be able to say: number four!<br>所以我会给这些道理编号，或许未来面对新投资的初创公司时，我能采用一种类似霍夫曼编码的高效方式 —— 让他们都先读完这篇文章，之后不用再详细叮嘱，只需说一句 “第四条！” 就能达到提醒效果。</p><h2 id="Release-Early"><a href="#Release-Early" class="headerlink" title="Release Early."></a><strong>Release Early.</strong></h2><h2 id="尽早发布产品"><a href="#尽早发布产品" class="headerlink" title="尽早发布产品"></a><strong>尽早发布产品</strong></h2><p>The thing I probably repeat most is this recipe for a startup: get a version 1 out fast, then improve it based on users’ reactions.<br>我重复最多的初创公司运营方法或许就是：尽快推出第一个版本的产品，然后根据用户反馈进行改进。</p><p>By “release early” I don’t mean you should release something full of bugs, but that you should release something minimal. Users hate bugs, but they don’t seem to mind a minimal version 1, if there’s more coming soon.<br>这里的 “尽早发布” 并非指推出满是漏洞的产品，而是发布一个功能精简的初始版本。用户讨厌漏洞，但如果明确知道后续会有更多功能更新，他们通常不会介意一个功能简单的 1.0 版本。</p><p>There are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write software, whether for a startup or not. I’ve been repeating that since 1993, and I haven’t seen much since to contradict it. I’ve seen a lot of startups die because they were too slow to release stuff, and none because they were too quick. [1]<br>尽快完成 1.0 版本的好处有很多。首先，无论是否针对初创公司，这本身就是开发软件的正确方式。自 1993 年起我就一直在强调这一点，至今也没发现足以反驳它的案例。我见过很多初创公司因产品发布太慢而失败，却从未见过哪家公司因发布太快而倒闭。[1]</p><p>One of the things that will surprise you if you build something popular is that you won’t know your users. Reddit now has almost half a million unique visitors a month. Who are all those people? They have no idea. No web startup does. And since you don’t know your users, it’s dangerous to guess what they’ll like. Better to release something and let them tell you.<br>如果你的产品受欢迎，有一件事会让你意外：你其实并不了解自己的用户。Reddit 目前每月的独立访客接近 50 万，但这些用户究竟是谁？Reddit 团队一无所知，所有互联网初创公司都是如此。正因为不了解用户，猜测他们的喜好是很危险的做法。不如先发布产品，让用户告诉你他们想要什么。</p><p>Wufoo took this to heart and released their form-builder before the underlying database. You can’t even drive the thing yet, but 83,000 people came to sit in the driver’s seat and hold the steering wheel. And Wufoo got valuable feedback from it: Linux users complained they used too much Flash, so they rewrote their software not to. If they’d waited to release everything at once, they wouldn’t have discovered this problem till it was more deeply wired in.<br>Wufoo 公司深刻理解了这一点，他们在底层数据库尚未完善时，就先发布了表单生成工具。当时这个工具甚至还无法正常使用，但已有 8.3 万人前来尝试。Wufoo 也从中获得了宝贵反馈：Linux 用户抱怨产品使用了过多 Flash 插件，于是他们重新编写软件，去掉了 Flash 功能。如果他们等到所有功能都完善后再一次性发布，这个问题恐怕要到深入产品架构后才会被发现，届时修复成本会高得多。</p><p>Even if you had no users, it would still be important to release quickly, because for a startup the initial release acts as a shakedown cruise. If anything major is broken– if the idea’s no good, for example, or the founders hate one another– the stress of getting that first version out will expose it. And if you have such problems you want to find them early.<br>即便暂时没有用户，尽快发布产品也依然重要，因为对初创公司而言，首次产品发布就像一次 “试航”。如果存在重大问题 —— 比如产品理念本身行不通，或是创始人之间矛盾重重 —— 推出第一个版本的压力会让这些问题暴露出来。而这类问题，越早发现越好。</p><p>Perhaps the most important reason to release early, though, is that it makes you work harder. When you’re working on something that isn’t released, problems are intriguing. In something that’s out there, problems are alarming. There is a lot more urgency once you release. And I think that’s precisely why people put it off. They know they’ll have to work a lot harder once they do. [2]<br>不过，尽早发布产品最重要的原因或许是：它能促使你更努力地工作。当你在开发一款尚未发布的产品时，遇到问题可能只会觉得有趣；但产品一旦发布，问题就变成了需要紧急处理的隐患。发布后，工作的紧迫感会大幅提升。而我认为，这正是人们迟迟不愿发布产品的原因 —— 他们清楚，一旦发布，自己就得加倍努力。[2]</p><h2 id="Keep-Pumping-Out-Features"><a href="#Keep-Pumping-Out-Features" class="headerlink" title="Keep Pumping Out Features."></a><strong>Keep Pumping Out Features.</strong></h2><h2 id="持续推出新功能"><a href="#持续推出新功能" class="headerlink" title="持续推出新功能"></a><strong>持续推出新功能</strong></h2><p>Of course, “release early” has a second component, without which it would be bad advice. If you’re going to start with something that doesn’t do much, you better improve it fast.<br>当然，“尽早发布” 还有一个配套要求，缺少这个要求，它就会变成一条糟糕的建议。如果初始发布的产品功能有限，那么后续就必须快速迭代改进。</p><p>What I find myself repeating is “pump out features.” And this rule isn’t just for the initial stages. This is something all startups should do for as long as they want to be considered startups.<br>我发现自己一直在强调 “持续推出新功能”。而且这条规则不仅适用于初创初期，只要一家公司还希望被视作 “初创公司”，就应该一直遵循。</p><p>I don’t mean, of course, that you should make your application ever more complex. By “feature” I mean one unit of hacking– one quantum of making users’ lives better.<br>当然，我并不是说要让应用程序变得越来越复杂。这里的 “功能” 指的是一次开发任务 —— 一个能切实改善用户体验的 “最小单元”。</p><p>As with exercise, improvements beget improvements. If you run every day, you’ll probably feel like running tomorrow. But if you skip running for a couple weeks, it will be an effort to drag yourself out. So it is with hacking: the more ideas you implement, the more ideas you’ll have. You should make your system better at least in some small way every day or two.<br>就像锻炼一样，持续改进会带来更多改进。如果你每天跑步，很可能第二天依然有跑步的动力；但如果连续两周不跑步，再想重新开始就需要费很大劲。产品开发也是如此：你实现的想法越多，就会产生越多新想法。你应该确保每隔一两天，就能以至少一个小的方式优化你的系统。</p><p>This is not just a good way to get development done; it is also a form of marketing. Users love a site that’s constantly improving. In fact, users expect a site to improve. Imagine if you visited a site that seemed very good, and then returned two months later and not one thing had changed. Wouldn’t it start to seem lame? [3]<br>这不仅是推进开发的好方法，也是一种营销手段。用户喜欢持续改进的网站，事实上，他们也期待网站能不断优化。试想一下：你访问了一个看起来很不错的网站，两个月后再登录，却发现没有任何变化。你会不会觉得它变得 “乏味” 了？[3]</p><p>They’ll like you even better when you improve in response to their comments, because customers are used to companies ignoring them. If you’re the rare exception– a company that actually listens– you’ll generate fanatical loyalty. You won’t need to advertise, because your users will do it for you.<br>如果你的改进是为了回应用户的反馈，他们会更喜欢你。因为用户早已习惯了被企业忽视，而如果你的公司能成为罕见的 “倾听者”，就会赢得用户的狂热忠诚。届时你甚至无需主动推广，用户会自发为你宣传。</p><p>This seems obvious too, so why do I have to keep repeating it? I think the problem here is that people get used to how things are. Once a product gets past the stage where it has glaring flaws, you start to get used to it, and gradually whatever features it happens to have become its identity. For example, I doubt many people at Yahoo (or Google for that matter) realized how much better web mail could be till Paul Buchheit showed them.<br>这一点似乎也显而易见，那我为什么还要反复强调呢？我认为问题在于人们容易 “习惯成自然”。一旦产品度过了 “漏洞百出” 的阶段，人们就会逐渐适应它，产品现有的功能也会慢慢变成它的 “固有属性”。比如，在保罗・布赫海特（Gmail 创始人）展示出更好的网页邮箱方案前，雅虎（甚至谷歌）的很多人恐怕都没意识到网页邮箱还能有这么大的改进空间。</p><p>I think the solution is to assume that anything you’ve made is far short of what it could be. Force yourself, as a sort of intellectual exercise, to keep thinking of improvements. Ok, sure, what you have is perfect. But if you had to change something, what would it be?<br>我认为解决办法是：默认你所做的任何产品都远未达到它的潜力上限。把持续思考改进方向当作一种 “思维训练”，强迫自己不断探索。就算你觉得当前产品已经很完美，也可以问自己：如果必须改一点，我会改什么？</p><p>If your product seems finished, there are two possible explanations: (a) it is finished, or (b) you lack imagination. Experience suggests (b) is a thousand times more likely.<br>如果你的产品看起来 “已经完成”，只有两种可能：（a）它真的已经无可改进；（b）你缺乏想象力。经验表明，（b）的可能性要高出（a）一千倍。</p><h2 id="Make-Users-Happy"><a href="#Make-Users-Happy" class="headerlink" title="Make Users Happy."></a><strong>Make Users Happy.</strong></h2><h2 id="让用户满意"><a href="#让用户满意" class="headerlink" title="让用户满意"></a><strong>让用户满意</strong></h2><p>Improving constantly is an instance of a more general rule: make users happy. One thing all startups have in common is that they can’t force anyone to do anything. They can’t force anyone to use their software, and they can’t force anyone to do deals with them. A startup has to sing for its supper. That’s why the successful ones make great things. They have to, or die.<br>持续改进其实是 “让用户满意” 这一通用原则的具体体现。所有初创公司都有一个共同点：它们无法强迫任何人做任何事 —— 既不能强迫用户使用自己的软件，也不能强迫他人与之合作。初创公司必须 “靠实力谋生”，这也是成功的初创公司能做出优秀产品的原因：它们要么做出好产品，要么就走向失败。</p><p>When you’re running a startup you feel like a little bit of debris blown about by powerful winds. The most powerful wind is users. They can either catch you and loft you up into the sky, as they did with Google, or leave you flat on the pavement, as they do with most startups. Users are a fickle wind, but more powerful than any other. If they take you up, no competitor can keep you down.<br>运营初创公司时，你会感觉自己像一片被强风裹挟的碎屑。而其中最强的风，就是用户。他们既能像托起谷歌那样，把你推向巅峰；也能像对待大多数初创公司那样，让你摔落在地。用户这股风或许变幻无常，但力量却远超其他任何因素。只要能得到用户的支持，没有任何竞争对手能压制你。</p><p>As a little piece of debris, the rational thing for you to do is not to lie flat, but to curl yourself into a shape the wind will catch.<br>作为这片 “碎屑”，理性的做法不是平躺不动，而是调整自己的 “形状”，让风能够托举你。</p><p>I like the wind metaphor because it reminds you how impersonal the stream of traffic is. The vast majority of people who visit your site will be casual visitors. It’s them you have to design your site for. The people who really care will find what they want by themselves.<br>我喜欢这个 “风” 的比喻，因为它能提醒你：网站的流量是 “不带个人感情” 的。访问你网站的绝大多数人都是偶然来访的普通用户，你的网站设计必须以他们为核心。而那些真正感兴趣的用户，自然会主动找到自己需要的东西。</p><p>The median visitor will arrive with their finger poised on the Back button. Think about your own experience: most links you follow lead to something lame. Anyone who has used the web for more than a couple weeks has been trained to click on Back after following a link. So your site has to say “Wait! Don’t click on Back. This site isn’t lame. Look at this, for example.”<br>普通访客打开你的网站时，手指很可能已经放在了 “后退” 按钮上。回想一下你自己的经历：你点击的大多数链接，最终指向的内容都很乏味。任何使用互联网超过两周的人，都会形成 “点击链接后随时准备后退” 的习惯。所以你的网站必须能传递出这样的信号：“等等！别点后退。这个网站不无聊，比如你可以看看这个。”</p><p>There are two things you have to do to make people pause. The most important is to explain, as concisely as possible, what the hell your site is about. How often have you visited a site that seemed to assume you already knew what they did? For example, the corporate site that says the company makes enterprise content management solutions for business that enable organizations to unify people, content and processes to minimize business risk, accelerate time-to-value and sustain lower total cost of ownership. An established company may get away with such an opaque description, but no startup can. A startup should be able to explain in one or two sentences exactly what it does. [4] And not just to users. You need this for everyone: investors, acquirers, partners, reporters, potential employees, and even current employees. You probably shouldn’t even start a company to do something that can’t be described compellingly in one or two sentences.<br>要让用户停下 “后退” 的手指，你需要做好两件事。最重要的是：用最简洁的语言，说清楚你的网站到底是做什么的。你是否经常遇到这样的网站：它们仿佛默认你已经知道它们的业务？比如某家公司的官网会写：“我们为企业提供企业内容管理解决方案，助力组织整合人员、内容与流程，降低业务风险、加快价值实现速度并维持较低的总体拥有成本。” 成熟的大公司或许能蒙混过关，但初创公司绝对不行。初创公司必须能用一两句话准确说明自己的业务 [4]，而且这不仅是说给用户听的 —— 投资者、收购方、合作伙伴、记者、潜在员工，甚至现有员工，都需要清楚了解这一点。如果一件事连一两句话都无法让人感兴趣地描述清楚，你或许根本不该为此创办公司。</p><p>The other thing I repeat is to give people everything you’ve got, right away. If you have something impressive, try to put it on the front page, because that’s the only one most visitors will see. Though indeed there’s a paradox here: the more you push the good stuff toward the front, the more likely visitors are to explore further. [5]<br>我反复强调的另一件事是：把你最好的东西立刻展示给用户。如果你的产品有亮点，尽量放在首页 —— 因为大多数访客可能只看首页。不过这里有个看似矛盾的现象：你在首页展示的亮点越多，访客就越有可能进一步浏览网站的其他内容。[5]</p><p>In the best case these two suggestions get combined: you tell visitors what your site is about by showing them. One of the standard pieces of advice in fiction writing is “show, don’t tell.” Don’t say that a character’s angry; have him grind his teeth, or break his pencil in half. Nothing will explain what your site does so well as using it.<br>最理想的情况是将这两个建议结合起来：通过实际展示，让访客明白你的网站是做什么的。小说创作中有一条经典建议是 “展示，而非告知”。不要直接说 “角色很生气”，而是描写他 “咬牙切齿” 或 “把铅笔折成两段”。对于网站而言，没有什么比让用户亲自体验更能说明它的功能了。</p><p>The industry term here is “conversion.” The job of your site is to convert casual visitors into users– whatever your definition of a user is. You can measure this in your growth rate. Either your site is catching on, or it isn’t, and you must know which. If you have decent growth, you’ll win in the end, no matter how obscure you are now. And if you don’t, you need to fix something.<br>行业内把这种转化称为 “用户转化”。无论你对 “用户” 的定义是什么，网站的核心任务就是将偶然访客转化为真正的用户。你可以通过增长率来衡量转化效果：你的网站要么正在被用户接受，要么没有，而你必须清楚自己的处境。如果能保持不错的增长率，哪怕现在默默无闻，最终也一定会成功；如果增长率不佳，就必须找出问题并解决。</p><h2 id="Fear-the-Right-Things"><a href="#Fear-the-Right-Things" class="headerlink" title="Fear the Right Things."></a><strong>Fear the Right Things.</strong></h2><h2 id="警惕该警惕的事"><a href="#警惕该警惕的事" class="headerlink" title="警惕该警惕的事"></a><strong>警惕该警惕的事</strong></h2><p>Another thing I find myself saying a lot is “don’t worry.” Actually, it’s more often “don’t worry about this; worry about that instead.” Startups are right to be paranoid, but they sometimes fear the wrong things.<br>我发现自己还经常说 “别担心”，但更准确地说，是 “别担心这件事，该担心的是那件事”。初创公司保持警惕是对的，但有时会担心错方向。</p><p>Most visible disasters are not so alarming as they seem. Disasters are normal in a startup: a founder quits, you discover a patent that covers what you’re doing, your servers keep crashing, you run into an insoluble technical problem, you have to change your name, a deal falls through– these are all par for the course. They won’t kill you unless you let them.<br>大多数显而易见的 “危机”，其实并没有表面看起来那么可怕。危机在初创公司中本就常态：创始人离职、发现自己的业务涉及专利问题、服务器频繁崩溃、遭遇无法解决的技术难题、不得不更换公司名称、重要合作告吹 —— 这些都属于正常情况。除非你自己放弃，否则这些事不会让公司走向灭亡。</p><p>Nor will most competitors. A lot of startups worry “what if Google builds something like us?” Actually big companies are not the ones you have to worry about– not even Google. The people at Google are smart, but no smarter than you; they’re not as motivated, because Google is not going to go out of business if this one product fails; and even at Google they have a lot of bureaucracy to slow them down.<br>大多数竞争对手也不会构成致命威胁。很多初创公司会担心 “如果谷歌也做一款和我们一样的产品怎么办？” 但事实上，大公司并非你需要担心的对象 —— 即便谷歌也不例外。谷歌的员工很聪明，但未必比你更聪明；他们的积极性远不如你，因为即便这款产品失败，谷歌也不会因此倒闭；而且即便是在谷歌内部，繁琐的官僚体系也会大幅拖慢项目进度。</p><p>What you should fear, as a startup, is not the established players, but other startups you don’t know exist yet. They’re way more dangerous than Google because, like you, they’re cornered animals.<br>作为初创公司，你真正应该警惕的不是那些已经站稳脚跟的行业巨头，而是那些你还不知道其存在的其他初创公司。它们比谷歌危险得多，因为和你一样，它们是 “被逼到绝境的困兽”（为了生存会拼尽全力）。</p><p>Looking just at existing competitors can give you a false sense of security. You should compete against what someone else could be doing, not just what you can see people doing. A corollary is that you shouldn’t relax just because you have no visible competitors yet. No matter what your idea, there’s someone else out there working on the same thing.<br>只盯着现有的竞争对手，会让你产生虚假的安全感。你要对抗的，不该只是眼前对手正在做的事，还包括其他人 “可能会做” 的事。由此可推出一个结论：不能因为目前没有明显的竞争对手，就放松警惕。无论你的想法多独特，总有其他人在做类似的事情。</p><p>That’s the downside of it being easier to start a startup: more people are doing it. But I disagree with Caterina Fake when she says that makes this a bad time to start a startup. More people are starting startups, but not as many more as could. Most college graduates still think they have to get a job. The average person can’t ignore something that’s been beaten into their head since they were three just because serving web pages recently got a lot cheaper.<br>初创门槛降低带来了一个弊端：做这件事的人变多了。但我并不认同卡特里娜・费克（Flickr 联合创始人）的观点 —— 她认为现在不是创办初创公司的好时机。虽然创业的人变多了，但远未达到 “饱和” 的程度。大多数大学毕业生仍认为自己必须找一份工作，普通人不会因为 “搭建网站的成本大幅降低”，就放弃从小被灌输的 “找稳定工作” 的观念。</p><p>And in any case, competitors are not the biggest threat. Way more startups hose themselves than get crushed by competitors. There are a lot of ways to do it, but the three main ones are internal disputes, inertia, and ignoring users. Each is, by itself, enough to kill you. But if I had to pick the worst, it would be ignoring users. If you want a recipe for a startup that’s going to die, here it is: a couple of founders who have some great idea they know everyone is going to love, and that’s what they’re going to build, no matter what.<br>况且，竞争对手从来都不是最大的威胁。更多初创公司是 “自我毁灭”，而非被竞争对手击垮。自我毁灭的方式有很多，但最主要的三种是：内部矛盾、停滞不前、忽视用户。每一种都足以让公司倒闭。如果非要选最致命的一种，那一定是忽视用户。若想让初创公司走向失败，只需满足一个条件：创始人坚信自己的想法 “所有人都会喜欢”，并执意按这个想法开发产品，完全不顾其他。</p><p>Almost everyone’s initial plan is broken. If companies stuck to their initial plans, Microsoft would be selling programming languages, and Apple would be selling printed circuit boards. In both cases their customers told them what their business should be– and they were smart enough to listen.<br>几乎所有公司的初始计划都是有问题的。如果微软和苹果都死守最初的计划，微软现在还在卖编程语言，苹果还在卖印刷电路板。这两家公司之所以能成功，是因为客户告诉了他们 “业务该往哪个方向走”，而他们足够聪明，选择了倾听。</p><p>As Richard Feynman said, the imagination of nature is greater than the imagination of man. You’ll find more interesting things by looking at the world than you could ever produce just by thinking. This principle is very powerful. It’s why the best abstract painting still falls short of Leonardo, for example. And it applies to startups too. No idea for a product could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users.<br>正如理查德・费曼（诺贝尔物理学奖得主）所说：“自然的想象力远胜于人类的想象力。” 观察世界所发现的有趣事物，远比仅凭思考创造的要多。这个原则极具说服力 —— 比如，再好的抽象画，也无法与达・芬奇的作品相提并论。这一原则同样适用于初创公司：没有任何产品想法，能比 “用原型与用户互动后发现的方向” 更精妙。</p><h2 id="Commitment-Is-a-Self-Fulfilling-Prophecy"><a href="#Commitment-Is-a-Self-Fulfilling-Prophecy" class="headerlink" title="Commitment Is a Self-Fulfilling Prophecy."></a><strong>Commitment Is a Self-Fulfilling Prophecy.</strong></h2><h2 id="投入度是自我实现的预言"><a href="#投入度是自我实现的预言" class="headerlink" title="投入度是自我实现的预言"></a><strong>投入度是自我实现的预言</strong></h2><p>I now have enough experience with startups to be able to say what the most important quality is in a startup founder, and it’s not what you might think. The most important quality in a startup founder is determination. Not intelligence– determination.<br>如今，凭借我在初创领域的经验，我可以明确指出创始人最重要的品质 —— 它可能和你想的不一样。创始人最重要的品质是 “决心”，而非 “智商”。</p><p>This is a little depressing. I’d like to believe Viaweb succeeded because we were smart, not merely determined. A lot of people in the startup world want to believe that. Not just founders, but investors too. They like the idea of inhabiting a world ruled by intelligence. And you can tell they really believe this, because it affects their investment decisions.<br>这个结论有点令人沮丧。我原本更愿意相信，我们创办的 Viaweb 能成功，是因为我们聪明，而非仅仅靠决心。初创圈里很多人都愿意相信 “智商决定论”，不仅是创始人，投资者也不例外。他们喜欢 “世界由智商主导” 的设定，而且这种信念会影响他们的投资决策 —— 这一点显而易见。</p><p>Time after time VCs invest in startups founded by eminent professors. This may work in biotech, where a lot of startups simply commercialize existing research, but in software you want to invest in students, not professors. Microsoft, Yahoo, and Google were all founded by people who dropped out of school to do it. What students lack in experience they more than make up in dedication.<br>风险投资家们总是不断投资那些由知名教授创办的初创公司。这种模式在生物技术领域或许可行 —— 因为该领域很多初创公司只是将现有研究商业化，但在软件行业，你更应该投资的是学生，而非教授。微软、雅虎、谷歌的创始人，都是为了创业而辍学的学生。学生在经验上的不足，完全可以通过他们的 “投入度” 来弥补，甚至绰绰有余。</p><p>Of course, if you want to get rich, it’s not enough merely to be determined. You have to be smart too, right? I’d like to think so, but I’ve had an experience that convinced me otherwise: I spent several years living in New York.<br>当然，若想致富，只靠决心是不够的，你还得聪明，对吧？我原本也这么想，但一段经历改变了我的看法 —— 我在纽约生活过几年。</p><p>You can lose quite a lot in the brains department and it won’t kill you. But lose even a little bit in the commitment department, and that will kill you very rapidly.<br>即便在 “智商” 上有所欠缺，你也未必会失败；但只要在 “投入度” 上稍有松懈，就会很快走向失败。</p><p>Running a startup is like walking on your hands: it’s possible, but it requires extraordinary effort. If an ordinary employee were asked to do the things a startup founder has to, he’d be very indignant. Imagine if you were hired at some big company, and in addition to writing software ten times faster than you’d ever had to before, they expected you to answer support calls, administer the servers, design the web site, cold-call customers, find the company office space, and go out and get everyone lunch.<br>运营初创公司就像用手走路：理论上可行，但需要付出极大的努力。如果让普通员工去做创始人该做的事，他一定会非常愤怒。试想一下：你被一家大公司录用，除了要以比以往快十倍的速度写代码，公司还要求你接听客服电话、管理服务器、设计网站、主动给客户打电话、寻找办公场地，甚至还要出去给所有人买午餐。</p><p>And to do all this not in the calm, womb-like atmosphere of a big company, but against a backdrop of constant disasters. That’s the part that really demands determination. In a startup, there’s always some disaster happening. So if you’re the least bit inclined to find an excuse to quit, there’s always one right there.<br>而且，你要做这些事的环境，并非大公司那种平静、安稳的 “温室”，而是 “危机不断” 的背景。这才是真正需要 “决心” 的地方。初创公司里，永远有各种危机在发生。所以，只要你有一丝想找借口放弃的念头，总能找到理由。</p><p>But if you lack commitment, chances are it will have been hurting you long before you actually quit. Everyone who deals with startups knows how important commitment is, so if they sense you’re ambivalent, they won’t give you much attention. If you lack commitment, you’ll just find that for some mysterious reason good things happen to your competitors but not to you. If you lack commitment, it will seem to you that you’re unlucky.<br>但如果你投入度不足，即便还没真正放弃，这种 “不足” 也早已开始伤害你。所有和初创公司打交道的人都知道投入度有多重要，所以一旦他们察觉到你态度摇摆，就不会太关注你。你会莫名觉得 “好事都发生在竞争对手身上，自己却总遇不到”，甚至会觉得自己 “运气不好”—— 其实这都是投入度不足的结果。</p><p>Whereas if you’re determined to stick around, people will pay attention to you, because odds are they’ll have to deal with you later. You’re a local, not just a tourist, so everyone has to come to terms with you.<br>相反，如果你决心坚持下去，人们就会关注你，因为他们很可能以后还需要和你打交道。你不再是 “过客”，而是 “常驻者”，所以所有人都必须正视你的存在。</p><p>At Y Combinator we sometimes mistakenly fund teams who have the attitude that they’re going to give this startup thing a shot for three months, and if something great happens, they’ll stick with it– “something great” meaning either that someone wants to buy them or invest millions of dollars in them. But if this is your attitude, “something great” is very unlikely to happen to you, because both acquirers and investors judge you by your level of commitment.<br>在 Y Combinator（创业孵化器），我们有时会误投一些团队 —— 他们的态度是 “先试三个月创业，如果有好事发生就继续”，而 “好事” 指的是有人愿意收购公司，或是有人投资数百万美元。但如果抱着这种态度，“好事” 几乎不可能发生，因为收购方和投资者都会根据你的 “投入度” 来判断是否与你合作。</p><p>If an acquirer thinks you’re going to stick around no matter what, they’ll be more likely to buy you, because if they don’t and you stick around, you’ll probably grow, your price will go up, and they’ll be left wishing they’d bought you earlier. Ditto for investors. What really motivates investors, even big VCs, is not the hope of good returns, but the fear of missing out. [6] So if you make it clear you’re going to succeed no matter what, and the only reason you need them is to make it happen a little faster, you’re much more likely to get money.<br>如果收购方认为你 “无论如何都会坚持下去”，他们收购你的意愿会更强 —— 因为如果不收购，而你继续发展壮大，公司估值就会上涨，他们会后悔 “当初没早点收购”。投资者也是如此。真正驱动投资者（甚至大型风投）的，不是对 “高回报的期待”，而是 “怕错过机会的恐惧”[6]。所以，如果你能明确传递出 “无论如何都会成功，找他们只是为了加速成功” 的信号，就更有可能拿到投资。</p><p>You can’t fake this. The only way to convince everyone that you’re ready to fight to the death is actually to be ready to.<br>这种投入度是装不出来的。要让所有人相信你 “准备好拼到最后”，唯一的办法就是你真的做好了这样的准备。</p><p>You have to be the right kind of determined, though. I carefully chose the word determined rather than stubborn, because stubbornness is a disastrous quality in a startup. You have to be determined, but flexible, like a running back. A successful running back doesn’t just put his head down and try to run through people. He improvises: if someone appears in front of him, he runs around them; if someone tries to grab him, he spins out of their grip; he’ll even run in the wrong direction briefly if that will help. The one thing he’ll never do is stand still. [7]<br>不过，你需要的是 “正确的决心”。我特意选择 “决心” 而非 “固执” 这个词，因为固执对初创公司来说是致命的。你需要有决心，但同时也要灵活，就像美式橄榄球里的跑卫（running back）。成功的跑卫不会只低着头试图冲破防守，他会随机应变：有人挡在前面就绕过去，有人要抓住他就挣脱，必要时甚至会暂时朝反方向跑。但他绝不会做一件事：原地不动 [7]。</p><h2 id="There-Is-Always-Room"><a href="#There-Is-Always-Room" class="headerlink" title="There Is Always Room."></a><strong>There Is Always Room.</strong></h2><h2 id="市场永远有空间"><a href="#市场永远有空间" class="headerlink" title="市场永远有空间"></a><strong>市场永远有空间</strong></h2><p>I was talking recently to a startup founder about whether it might be good to add a social component to their software. He said he didn’t think so, because the whole social thing was tapped out. Really? So in a hundred years the only social networking sites will be the Facebook, MySpace, Flickr, and Del.icio.us? Not likely.<br>最近我和一位初创公司创始人聊天，讨论是否应该在他们的软件中加入社交功能。他说没必要，因为 “社交领域已经没机会了”。真的是这样吗？难道一百年后，市面上还只有 Facebook、MySpace、Flickr 和 Del.icio.us 这几个社交网站？显然不可能。</p><p>There is always room for new stuff. At every point in history, even the darkest bits of the dark ages, people were discovering things that made everyone say “why didn’t anyone think of that before?” We know this continued to be true up till 2004, when the Facebook was founded– though strictly speaking someone else did think of that.<br>新事物永远有生存空间。在历史的每一个阶段，即便在中世纪最黑暗的时期，人们也总能发现一些让所有人惊呼 “为什么之前没人想到” 的东西。这种情况一直持续到 2004 年 Facebook 成立 —— 尽管严格来说，“社交网络” 的想法此前已经有人提出过。</p><p>The reason we don’t see the opportunities all around us is that we adjust to however things are, and assume that’s how things have to be. For example, it would seem crazy to most people to try to make a better search engine than Google. Surely that field, at least, is tapped out. Really? In a hundred years– or even twenty– are people still going to search for information using something like the current Google? Even Google probably doesn’t think that.<br>我们之所以看不到身边的机会，是因为我们习惯了现状，并误以为 “现状就是唯一的可能”。比如，在大多数人看来，“做一个比谷歌更好的搜索引擎” 是天方夜谭，他们认为这个领域至少已经 “饱和” 了。但真的是这样吗？一百年后（甚至二十年后），人们还会用和现在谷歌类似的方式搜索信息吗？恐怕连谷歌自己都不这么认为。</p><p>In particular, I don’t think there’s any limit to the number of startups. Sometimes you hear people saying “All these guys starting startups now are going to be disappointed. How many little startups are Google and Yahoo going to buy, after all?” That sounds cleverly skeptical, but I can prove it’s mistaken. No one proposes that there’s some limit to the number of people who can be employed in an economy consisting of big, slow-moving companies with a couple thousand people each. Why should there be any limit to the number who could be employed by small, fast-moving companies with ten each? It seems to me the only limit would be the number of people who want to work that hard.<br>尤其要说明的是，我认为初创公司的数量不存在上限。有时会听到有人说：“现在这么多人创业，最后肯定都会失望。毕竟谷歌和雅虎能收购多少家小初创公司呢？” 这种质疑听起来似乎很有见地，但事实并非如此。没人会说，在一个由数千人规模、发展迟缓的大公司构成的经济体里，就业人数存在上限。那为什么由 10 人左右规模、灵活高效的小公司创造的就业岗位，就该有上限呢？在我看来，唯一的限制或许只是 “愿意为之拼命工作的人数”。</p><p>The limit on the number of startups is not the number that can get acquired by Google and Yahoo– though it seems even that should be unlimited, if the startups were actually worth buying– but the amount of wealth that can be created. And I don’t think there’s any limit on that, except cosmological ones.<br>限制初创公司数量的，从来不是谷歌或雅虎能收购的公司数量 —— 即便单看收购这件事，只要初创公司确实有收购价值，收购数量理论上也可以是无限的 —— 真正的限制是 “可创造的财富总量”。但除了宇宙规律带来的客观限制，我认为财富创造本身不存在上限。</p><p>So for all practical purposes, there is no limit to the number of startups. Startups make wealth, which means they make things people want, and if there’s a limit on the number of things people want, we are nowhere near it. I still don’t even have a flying car.<br>因此，从实际角度出发，初创公司的数量没有上限。初创公司创造财富的本质，是生产人们需要的东西。即便 “人们需要的东西” 存在数量上限，我们目前也远未达到那个程度 —— 毕竟，我至今还没拥有一辆会飞的汽车呢。</p><h2 id="Don’t-Get-Your-Hopes-Up"><a href="#Don’t-Get-Your-Hopes-Up" class="headerlink" title="Don’t Get Your Hopes Up."></a><strong>Don’t Get Your Hopes Up.</strong></h2><h2 id="别抱过高期望"><a href="#别抱过高期望" class="headerlink" title="别抱过高期望"></a><strong>别抱过高期望</strong></h2><p>This is another one I’ve been repeating since long before Y Combinator. It was practically the corporate motto at Viaweb.<br>早在创立 Y Combinator（创业孵化器）之前，我就一直在强调这一点。它甚至可以说是 Viaweb 公司（作者此前创办的公司）的 “企业座右铭”。</p><p>Startup founders are naturally optimistic. They wouldn’t do it otherwise. But you should treat your optimism the way you’d treat the core of a nuclear reactor: as a source of power that’s also very dangerous. You have to build a shield around it, or it will fry you.<br>初创公司创始人天生乐观 —— 若非如此，他们也不会选择创业。但你对待乐观的态度，应该像对待核反应堆的核心一样：它是强大的动力来源，同时也极具危险性。你必须为它筑起 “防护盾”，否则它会 “灼伤” 你。</p><p>The shielding of a reactor is not uniform; the reactor would be useless if it were. It’s pierced in a few places to let pipes in. An optimism shield has to be pierced too. I think the place to draw the line is between what you expect of yourself, and what you expect of other people. It’s ok to be optimistic about what you can do, but assume the worst about machines and other people.<br>核反应堆的防护盾并非完全密不透风 —— 如果完全封闭，反应堆就无法正常运转了。防护盾会预留孔洞让管道接入，“乐观防护盾” 也需要这样的 “开口”。我认为，这个 “开口” 应该划在 “对自己的期望” 和 “对他人的期望” 之间：你可以对自己能做到的事保持乐观，但对机器和他人，最好做最坏的打算。</p><p>This is particularly necessary in a startup, because you tend to be pushing the limits of whatever you’re doing. So things don’t happen in the smooth, predictable way they do in the rest of the world. Things change suddenly, and usually for the worse.<br>这一点对初创公司尤其重要，因为初创公司往往在 “突破现有边界”—— 无论是技术、产品还是市场。因此，事情不会像在其他领域那样 “按部就班、可预测”，反而常常突然发生变故，且大多是坏消息。</p><p>Shielding your optimism is nowhere more important than with deals. If your startup is doing a deal, just assume it’s not going to happen. The VCs who say they’re going to invest in you aren’t. The company that says they’re going to buy you isn’t. The big customer who wants to use your system in their whole company won’t. Then if things work out you can be pleasantly surprised.<br>在 “合作交易” 这件事上，为乐观装上防护盾尤为关键。如果你的初创公司正在推进一项交易，先默认 “这笔交易不会成”：那些说要投资你的风投，最终可能不会投；那些说要收购你的公司，最终可能不会收；那些说要在全公司使用你系统的大客户，最终可能不会用。这样一来，若交易真的成功，你反而会收获意外的惊喜。</p><p>The reason I warn startups not to get their hopes up is not to save them from being disappointed when things fall through. It’s for a more practical reason: to prevent them from leaning their company against something that’s going to fall over, taking them with it.<br>我提醒初创公司 “别抱过高期望”，并非为了让它们在交易失败时避免失望，而是出于更实际的考量：防止它们把公司的 “重心” 寄托在一件随时可能 “崩塌” 的事情上，最终被拖垮。</p><p>For example, if someone says they want to invest in you, there’s a natural tendency to stop looking for other investors. That’s why people proposing deals seem so positive: they want you to stop looking. And you want to stop too, because doing deals is a pain. Raising money, in particular, is a huge time sink. So you have to consciously force yourself to keep looking.<br>比如，若有人表示 “想投资你”，你很自然会倾向于停止寻找其他投资者。这正是提出交易的人会表现得无比积极的原因 —— 他们希望你停止寻找其他机会。而你自己也会想停下来，因为推进交易本身就很麻烦，尤其是融资，更是极其耗费时间。因此，你必须有意识地强迫自己 “继续寻找其他可能性”。</p><p>Even if you ultimately do the first deal, it will be to your advantage to have kept looking, because you’ll get better terms. Deals are dynamic; unless you’re negotiating with someone unusually honest, there’s not a single point where you shake hands and the deal’s done. There are usually a lot of subsidiary questions to be cleared up after the handshake, and if the other side senses weakness– if they sense you need this deal– they will be very tempted to screw you in the details.<br>即便你最终还是和第一个提出交易的人合作，“继续寻找其他机会” 也会让你占据优势 —— 你能争取到更有利的条款。交易是动态变化的：除非你面对的是极其坦诚的谈判对象，否则绝不会 “握个手就算达成交易”。握手之后，通常还有大量细节问题需要解决。如果对方察觉到你的 “弱势”—— 比如察觉到你 “非常需要这笔交易”—— 他们就很可能在细节上 “算计” 你。</p><p>VCs and corp dev guys are professional negotiators. They’re trained to take advantage of weakness. [8] So while they’re often nice guys, they just can’t help it. And as pros they do this more than you. So don’t even try to bluff them. The only way a startup can have any leverage in a deal is genuinely not to need it. And if you don’t believe in a deal, you’ll be less likely to depend on it.<br>风投和企业发展部门（corp dev）的人都是专业的谈判者，他们受过 “利用对方弱点” 的训练 [8]。即便他们本身是好人，也难免会这么做 —— 毕竟这是他们的职业本能，而且他们在这方面比你更有经验。所以，别试图在他们面前 “虚张声势”。初创公司在交易中能拥有谈判筹码的唯一方式，就是 “真心不需要这笔交易”。而如果你不对某笔交易抱过高期望，就不太可能对它产生依赖。</p><p>So I want to plant a hypnotic suggestion in your heads: when you hear someone say the words “we want to invest in you” or “we want to acquire you,” I want the following phrase to appear automatically in your head: don’t get your hopes up. Just continue running your company as if this deal didn’t exist. Nothing is more likely to make it close.<br>因此，我想给你们植入一个 “心理暗示”：当你听到别人说 “我们想投资你” 或 “我们想收购你” 时，脑海里要自动蹦出一句话 ——“别抱过高期望”。继续运营公司，就当这笔交易根本不存在。这样做，反而最有可能让交易最终达成。</p><p>The way to succeed in a startup is to focus on the goal of getting lots of users, and keep walking swiftly toward it while investors and acquirers scurry alongside trying to wave money in your face.<br>初创公司的成功之道，在于专注于 “获取大量用户” 这个目标，然后朝着这个目标稳步快速前进。当你做到这一点时，投资者和收购方自然会主动围上来，在你身边争先恐后地递出橄榄枝。</p><h2 id="Speed-not-Money"><a href="#Speed-not-Money" class="headerlink" title="Speed, not Money"></a>Speed, not Money</h2><h2 id="速度至上，而非金钱至上"><a href="#速度至上，而非金钱至上" class="headerlink" title="速度至上，而非金钱至上"></a>速度至上，而非金钱至上</h2><p>The way I’ve described it, starting a startup sounds pretty stressful. It is. When I talk to the founders of the companies we’ve funded, they all say the same thing: I knew it would be hard, but I didn’t realize it would be this hard.<br>按照我之前的描述，创业听起来压力很大 —— 事实确实如此。每当我和我们投资过的公司创始人交流时，他们都会说同样一句话：“我知道创业会很难，但没想到会这么难。”</p><p>So why do it? It would be worth enduring a lot of pain and stress to do something grand or heroic, but just to make money? Is making money really that important?<br>那为什么还要创业呢？为了做一件伟大或崇高的事，承受再多痛苦和压力都值得，但如果只是为了赚钱，值得吗？赚钱真的有那么重要吗？</p><p>No, not really. It seems ridiculous to me when people take business too seriously. I regard making money as a boring errand to be got out of the way as soon as possible. There is nothing grand or heroic about starting a startup per se.<br>其实，赚钱没那么重要。在我看来，把商业看得太重的人很可笑。我把赚钱视为一件 “乏味的差事”，只想尽快完成。单就 “创业” 这件事本身而言，并没有什么伟大或崇高之处。</p><p>So why do I spend so much time thinking about startups? I’ll tell you why. Economically, a startup is best seen not as a way to get rich, but as a way to work faster. You have to make a living, and a startup is a way to get that done quickly, instead of letting it drag on through your whole life. [9]<br>那我为什么还要花这么多时间研究创业呢？我来告诉你原因。从经济角度看，创业最好的定位不是 “致富手段”，而是 “加速工作的方式”。人总得谋生，而创业能让你快速完成 “谋生” 这个任务，不至于让它拖累你的一生 [9]。</p><p>We take it for granted most of the time, but human life is fairly miraculous. It is also palpably short. You’re given this marvellous thing, and then poof, it’s taken away. You can see why people invent gods to explain it. But even to people who don’t believe in gods, life commands respect. There are times in most of our lives when the days go by in a blur, and almost everyone has a sense, when this happens, of wasting something precious. As Ben Franklin said, if you love life, don’t waste time, because time is what life is made of.<br>大多数时候，我们都把生命视为理所当然，但其实生命既神奇又短暂。你刚拥有这份奇妙的馈赠，转眼它就会消失。这也难怪人们会创造 “神明” 来解释生命的奥秘。即便对不信仰神明的人来说，生命也值得敬畏。我们大多数人都有过 “日子浑浑噩噩溜走” 的经历，而每当这时，几乎所有人都会觉得 “浪费了宝贵的东西”。正如本杰明・富兰克林所说：“若热爱生命，就别浪费时间，因为生命由时间构成。”</p><p>So no, there’s nothing particularly grand about making money. That’s not what makes startups worth the trouble. What’s important about startups is the speed. By compressing the dull but necessary task of making a living into the smallest possible time, you show respect for life, and there is something grand about that.<br>因此，赚钱本身并没有什么特别崇高的地方，也不是创业 “值得为之吃苦” 的原因。创业真正重要的是 “速度”—— 它能把 “谋生” 这件枯燥却必要的事，压缩到最短时间内完成。这种对生命的敬畏，才是创业真正崇高的地方。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p><strong>注释</strong></p><p>[1] Startups can die from releasing something full of bugs, and not fixing them fast enough, but I don’t know of any that died from releasing something stable but minimal very early, then promptly improving it.<br>[1] 初创公司可能会因发布满是漏洞的产品，且未能及时修复而倒闭，但据我所知，没有任何一家初创公司是因为 “过早发布功能精简但稳定的产品，随后迅速迭代改进” 而失败的。</p><p>[2] I know this is why I haven’t released Arc. The moment I do, I’ll have people nagging me for features.<br>[2] 我很清楚自己迟迟未发布 Arc（作者开发的编程语言）的原因：一旦发布，就会有人不断催促我添加新功能。</p><p>[3] A web site is different from a book or movie or desktop application in this respect. Users judge a site not as a single snapshot, but as an animation with multiple frames. Of the two, I’d say the rate of improvement is more important to users than where you currently are.<br>[3] 网站在这一点上与书籍、电影或桌面应用不同。用户评判一个网站，不会将其视为 “单一快照”，而是看作 “多帧构成的动态画面”。在我看来，对用户而言，“改进速度” 比 “当前产品水平” 更重要。</p><p>[4] It should not always tell this to users, however. For example, MySpace is basically a replacement mall for mallrats. But it was wiser for them, initially, to pretend that the site was about bands.<br>[4] 不过，公司并非总要向用户直白地说明自身业务。例如，MySpace 本质上是 “青少年替代商场的社交场所”，但在初期，他们明智地将网站定位伪装成 “围绕乐队展开的平台”。</p><p>[5] Similarly, don’t make users register to try your site. Maybe what you have is so valuable that visitors should gladly register to get at it. But they’ve been trained to expect the opposite. Most of the things they’ve tried on the web have sucked– and probably especially those that made them register.<br>[5] 同理，不要让用户 “必须注册才能试用你的网站”。或许你的产品确实极具价值，访客本应乐意注册体验，但用户的过往经历让他们形成了相反的预期：他们在网上尝试过的大多数产品都很糟糕，尤其是那些强制要求注册的产品。</p><p>[6] VCs have rational reasons for behaving this way. They don’t make their money (if they make money) off their median investments. In a typical fund, half the companies fail, most of the rest generate mediocre returns, and one or two “make the fund” by succeeding spectacularly. So if they miss just a few of the most promising opportunities, it could hose the whole fund.<br>[6] 风投之所以会有 “怕错过机会” 的心态，是有合理原因的。他们的收益（即便能赚到钱）并非来自 “中等水平的投资项目”：在一只典型的风投基金中，一半的投资公司会失败，其余大部分公司只能产生平庸的回报，而一两家 “爆款公司” 的辉煌成功才能让整个基金实现盈利。因此，若错过少数几个最具潜力的机会，可能会导致整个基金亏损。</p><p>[7] The attitude of a running back doesn’t translate to soccer. Though it looks great when a forward dribbles past multiple defenders, a player who persists in trying such things will do worse in the long term than one who passes.<br>[7] 美式橄榄球跑卫的 “灵活应变” 态度，不能直接套用到足球运动中。虽然前锋连续突破多名防守队员的画面很精彩，但长期来看，执着于这种打法的球员，表现会不如擅长传球的球员。</p><p>[8] The reason Y Combinator never negotiates valuations is that we’re not professional negotiators, and don’t want to turn into them.<br>[8] Y Combinator（创业孵化器）从不就估值进行谈判，原因是我们并非专业谈判者，也不想成为这样的角色。</p><p>[9] There are two ways to do work you love: (a) to make money, then work on what you love, or (b) to get a job where you get paid to work on stuff you love. In practice the first phases of both consist mostly of unedifying schleps, and in (b) the second phase is less secure.<br>[9] 有两种方式能让你从事热爱的工作：（a）先赚钱，再用赚来的钱做自己热爱的事；（b）找一份 “做热爱的事就能获得报酬” 的工作。但实际上，两种方式的 “初期阶段” 大多充斥着乏味且无成就感的苦差事，而方式（b）的 “后期阶段”（即持续从事热爱的工作）稳定性更低。</p><p>Thanks to Sam Altman, Trevor Blackwell, Beau Hartshorne, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢萨姆・奥尔特曼、特雷弗・布莱克韦尔、博・哈茨霍恩、杰西卡・利文斯顿和罗伯特・莫里斯审阅本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看待随机性</title>
    <link href="/2025/09/06/see-randomness/"/>
    <url>/2025/09/06/see-randomness/</url>
    
    <content type="html"><![CDATA[<h1 id="See-Randomness"><a href="#See-Randomness" class="headerlink" title="See Randomness"></a>See Randomness</h1><p><strong>看待随机性</strong></p><p>原文链接:<a href="https://paulgraham.com/randomness.html">https://paulgraham.com/randomness.html</a></p><p>April 2006, rev August 2009</p><p>Plato quotes Socrates as saying “the unexamined life is not worth living.” Part of what he meant was that the proper role of humans is to think, just as the proper role of anteaters is to poke their noses into anthills.<br>柏拉图引用苏格拉底的话说：“未经省察的人生不值得过。” 他想表达的部分含义是，人类的恰当职责在于思考，就像食蚁兽的恰当职责是把鼻子伸进蚁丘里一样。</p><p>A lot of ancient philosophy had the quality — and I don’t mean this in an insulting way — of the kind of conversations freshmen have late at night in common rooms:<br>许多古代哲学都带有一种特质 —— 我这么说绝无冒犯之意 —— 就像大学新生深夜在公共休息室里进行的那些交谈：</p><p>What is our purpose? Well, we humans are as conspicuously different from other animals as the anteater. In our case the distinguishing feature is the ability to reason. So obviously that is what we should be doing, and a human who doesn’t is doing a bad job of being human — is no better than an animal.<br>我们的人生目的是什么？嗯，人类与其他动物的区别，就像食蚁兽与其他动物的区别一样显著。对人类而言，这种区别性特征就是推理能力。所以很显然，思考推理正是我们应该做的事；一个不这样做的人，就没有尽到做人的本分 —— 其境界无异于动物。</p><p>Now we’d give a different answer. At least, someone Socrates’s age would. We’d ask why we even suppose we have a “purpose” in life. We may be better adapted for some things than others; we may be happier doing things we’re adapted for; but why assume purpose?<br>如今，我们会给出不同的答案。至少，像苏格拉底那个年纪的人会给出不同答案。我们会反问：为何我们会认为人生必然存在 “目的”？我们或许在某些事情上比在其他事情上更具适应性；做自己擅长的事时，我们可能会更快乐；但为什么一定要假定人生存在某种目的呢？</p><p>The history of ideas is a history of gradually discarding the assumption that it’s all about us. No, it turns out, the earth is not the center of the universe — not even the center of the solar system. No, it turns out, humans are not created by God in his own image; they’re just one species among many, descended not merely from apes, but from microorganisms. Even the concept of “me” turns out to be fuzzy around the edges if you examine it closely.<br>思想发展史，本质上是一部逐步摒弃 “万物皆围绕人类” 这一假设的历史。事实证明，地球并非宇宙的中心 —— 甚至连太阳系的中心都不是。事实也证明，人类并非上帝按照自己的形象创造出来的；人类只是众多物种中的一员，其祖先不仅有类人猿，更可追溯至微生物。即便深入审视 “自我” 这一概念，也会发现它的边界其实模糊不清。</p><p>The idea that we’re the center of things is difficult to discard. So difficult that there’s probably room to discard more. Richard Dawkins made another step in that direction only in the last several decades, with the idea of the selfish gene. No, it turns out, we’re not even the protagonists: we’re just the latest model vehicle our genes have constructed to travel around in. And having kids is our genes heading for the lifeboats. Reading that book snapped my brain out of its previous way of thinking the way Darwin’s must have when it first appeared.<br>“人类是万物中心” 这一观念难以根除，其难度之大，以至于我们或许仍有很大的摒弃空间。在过去几十年里，理查德・道金斯提出的 “自私的基因” 理论，又在这一方向上迈出了一步。事实证明，我们甚至都不是生命的主角：我们不过是基因构建出来用于生存繁衍的最新 “载体” 而已。而生儿育女，不过是基因在为自己寻找 “救生艇”。阅读那本书时，我的思维方式发生了彻底转变，这种转变想必与《物种起源》刚问世时，达尔文的理论给人们带来的思维冲击如出一辙。</p><p>(Few people can experience now what Darwin’s contemporaries did when The Origin of Species was first published, because everyone now is raised either to take evolution for granted, or to regard it as a heresy. No one encounters the idea of natural selection for the first time as an adult.)<br>（如今，很少有人能体会到达尔文同时代的人在《物种起源》刚出版时的感受，因为现在的人在成长过程中，要么把进化论视为理所当然，要么将其视作异端邪说。没有人会在成年后才第一次接触到自然选择的概念。）</p><p>So if you want to discover things that have been overlooked till now, one really good place to look is in our blind spot: in our natural, naive belief that it’s all about us. And expect to encounter ferocious opposition if you do.<br>因此，若你想发现至今仍被忽视的事物，一个绝佳的切入点便是我们的认知盲区：即我们本能且天真地认为 “万物皆围绕人类” 的信念。而一旦你这么做，就必然会遭遇强烈的反对。</p><p>Conversely, if you have to choose between two theories, prefer the one that doesn’t center on you.<br>相反，若你必须在两种理论中做出选择，应优先选择那种不将人类置于中心地位的理论。</p><p>This principle isn’t only for big ideas. It works in everyday life, too. For example, suppose you’re saving a piece of cake in the fridge, and you come home one day to find your housemate has eaten it. Two possible theories:<br>这一原则不仅适用于宏大的思想理论，也适用于日常生活。例如，假设你在冰箱里留了一块蛋糕，某天回家却发现室友把它吃了。对此有两种可能的解释：</p><p>a) Your housemate did it deliberately to upset you. He knew you were saving that piece of cake.<br>a）室友是故意吃了蛋糕来惹你生气，他明明知道你特意留了那块蛋糕。</p><p>b) Your housemate was hungry.<br>b）室友只是饿了。</p><p>I say pick b. No one knows who said “never attribute to malice what can be explained by incompetence,” but it is a powerful idea. Its more general version is our answer to the Greeks:<br>我会选择 b。没人知道是谁提出了 “能用无能解释的，就别归咎于恶意” 这句话，但这一观点极具说服力。将其推广到更普遍的层面，便是我们对古希腊人 “人生目的论” 的回应：</p><p>Don’t see purpose where there isn’t.<br>不存在目的之处，切勿强行寻找目的。</p><p>Or better still, the positive version:<br>或者更积极的表述是：</p><p>See randomness.<br>要看到随机性。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何做你所热爱的事</title>
    <link href="/2025/09/04/how-to-do-what-you-love/"/>
    <url>/2025/09/04/how-to-do-what-you-love/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-Do-What-You-Love"><a href="#How-to-Do-What-You-Love" class="headerlink" title="How to Do What You Love"></a>How to Do What You Love</h1><h1 id="如何做自己热爱的事"><a href="#如何做自己热爱的事" class="headerlink" title="如何做自己热爱的事"></a>如何做自己热爱的事</h1><p>Want to start a startup? Get funded by Y Combinator.<br>想创办一家初创公司？来获取 Y Combinator 的投资吧。</p><p>January 2006<br>2006 年 1 月</p><p>To do something well you have to like it. That idea is not exactly novel. We’ve got it down to four words: “Do what you love.” But it’s not enough just to tell people that. Doing what you love is complicated.<br>要把一件事做好，你就得热爱它。这个道理并不算新鲜，我们甚至把它浓缩成了四个字：“做你所爱”。但仅仅告诉人们这句话是远远不够的，因为做自己热爱的事，其实是一件很复杂的事。</p><p>The very idea is foreign to what most of us learn as kids. When I was a kid, it seemed as if work and fun were opposites by definition. Life had two states: some of the time adults were making you do things, and that was called work; the rest of the time you could do what you wanted, and that was called playing. Occasionally the things adults made you do were fun, just as, occasionally, playing wasn’t — for example, if you fell and hurt yourself. But except for these few anomalous cases, work was pretty much defined as not-fun.<br>“做你所爱” 这个理念，和我们大多数人小时候学到的东西格格不入。我小时候总觉得，工作和乐趣从定义上就是对立的。生活只有两种状态：有时候大人们逼着你做一些事，那叫工作；剩下的时间你可以随心所欲做自己想做的事，那叫玩耍。偶尔，大人们让你做的事可能会很有趣；同样，玩耍也未必总有乐趣 —— 比如你摔倒受伤的时候。但除了这些极少数的特殊情况，工作基本上就等同于 “无趣”。</p><p>And it did not seem to be an accident. School, it was implied, was tedious because it was preparation for grownup work.<br>而且，这似乎并非偶然。人们默认学校之所以枯燥乏味，是因为它是为成年后的工作所做的准备。</p><p>The world then was divided into two groups, grownups and kids. Grownups, like some kind of cursed race, had to work. Kids didn’t, but they did have to go to school, which was a dilute version of work meant to prepare us for the real thing. Much as we disliked school, the grownups all agreed that grownup work was worse, and that we had it easy.<br>那时候的世界被分成两类人：成年人和孩子。成年人就像被下了诅咒一样，必须要工作。孩子不用工作，但得上学 —— 学校里的 “任务” 就像是稀释版的工作，为我们将来面对真正的工作做准备。尽管我们都讨厌上学，但所有成年人都一致认为，成年后的工作只会更糟，我们现在的日子已经算轻松了。</p><p>Teachers in particular all seemed to believe implicitly that work was not fun. Which is not surprising: work wasn’t fun for most of them. Why did we have to memorize state capitals instead of playing dodgeball? For the same reason they had to watch over a bunch of kids instead of lying on a beach. You couldn’t just do what you wanted.<br>尤其是老师们，似乎都心照不宣地认为工作本身毫无乐趣。这也不足为奇，因为对大多数老师来说，工作确实没什么乐趣。为什么我们非要背各州首府，而不能玩躲避球？原因和老师们不得不看着一群孩子，而不能躺在沙滩上晒太阳是一样的 —— 你不能随心所欲地做自己想做的事。</p><p>I’m not saying we should let little kids do whatever they want. They may have to be made to work on certain things. But if we make kids work on dull stuff, it might be wise to tell them that tediousness is not the defining quality of work, and indeed that the reason they have to work on dull stuff now is so they can work on more interesting stuff later. [1]<br>我并不是说应该让小孩子随心所欲、为所欲为。有时候确实需要让他们去做一些必须做的事。但如果我们让孩子去做枯燥的事情，明智的做法或许是告诉他们：枯燥并非工作的本质属性，而现在之所以要做这些乏味的事，正是为了将来能有机会做更有趣的事。[1]</p><p>Once, when I was about 9 or 10, my father told me I could be whatever I wanted when I grew up, so long as I enjoyed it. I remember that precisely because it seemed so anomalous. It was like being told to use dry water. Whatever I thought he meant, I didn’t think he meant work could literally be fun — fun like playing. It took me years to grasp that.<br>记得我大概九、十岁的时候，父亲曾告诉我，长大后我可以成为任何我想成为的人，只要我喜欢就行。我对这句话印象格外深刻，正是因为它在当时听上去太反常了，就像有人告诉你 “要去用干的水” 一样荒谬。不管我当时怎么理解他的话，我都没觉得他是在说 “工作真的可以像玩耍一样有趣”。我花了好多年才真正明白这一点。</p><h2 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a><strong>Jobs</strong></h2><p><strong>工作</strong></p><p>By high school, the prospect of an actual job was on the horizon. Adults would sometimes come to speak to us about their work, or we would go to see them at work. It was always understood that they enjoyed what they did. In retrospect I think one may have: the private jet pilot. But I don’t think the bank manager really did.<br>上了高中，真正要面对工作的前景开始浮现。有时候会有成年人来学校跟我们聊他们的工作，我们也会去他们的工作场所参观。大家似乎都默认这些成年人是热爱自己工作的。现在回想起来，其中或许真有一个人是这样的 —— 那个私人飞机驾驶员。但我觉得那位银行经理肯定不是。</p><p>The main reason they all acted as if they enjoyed their work was presumably the upper-middle class convention that you’re supposed to. It would not merely be bad for your career to say that you despised your job, but a social faux-pas.<br>他们之所以都装作热爱自己的工作，最主要的原因可能是中上层社会的一种惯例 —— 你 “应该” 表现出热爱工作的样子。如果说自己鄙视这份工作，不仅对职业生涯不利，在社交场合也是一种失礼的行为。</p><p>Why is it conventional to pretend to like what you do? The first sentence of this essay explains that. If you have to like something to do it well, then the most successful people will all like what they do. That’s where the upper-middle class tradition comes from. Just as houses all over America are full of chairs that are, without the owners even knowing it, nth-degree imitations of chairs designed 250 years ago for French kings, conventional attitudes about work are, without the owners even knowing it, nth-degree imitations of the attitudes of people who’ve done great things.<br>为什么人们会习惯性地装作喜欢自己的工作呢？这篇文章的第一句话其实就给出了答案：要把一件事做好，你就得热爱它。那么，最成功的人自然都会热爱自己所做的事。中上层社会的那套惯例正是由此而来。就像全美国的家庭里都摆着各式各样的椅子，主人或许都没意识到，这些椅子其实是 250 年前为法国国王设计的椅子经过无数次模仿后的产物；人们对工作的固有看法也是如此，主人自己可能都不知道，这些看法其实是对那些成就非凡者态度的无数次模仿。</p><p>What a recipe for alienation. By the time they reach an age to think about what they’d like to do, most kids have been thoroughly misled about the idea of loving one’s work. School has trained them to regard work as an unpleasant duty. Having a job is said to be even more onerous than schoolwork. And yet all the adults claim to like what they do. You can’t blame kids for thinking “I am not like these people; I am not suited to this world.”<br>这简直是制造隔阂的 “良方”。当大多数孩子长到开始思考自己想做什么的年纪时，他们对 “热爱工作” 这个概念已经被彻底误导了。学校让他们养成了把工作视为令人不快的义务的习惯，而大人们又说工作比上学更繁重。可与此同时，所有成年人又都声称自己热爱工作。难怪孩子们会想：“我和这些人不一样，我不适合这个世界。”</p><p>Actually they’ve been told three lies: the stuff they’ve been taught to regard as work in school is not real work; grownup work is not (necessarily) worse than schoolwork; and many of the adults around them are lying when they say they like what they do.<br>事实上，他们听到了三个谎言：第一，学校里教他们把某些事当成 “工作”，但那并非真正的工作；第二，成年后的工作未必比上学更糟；第三，身边很多成年人说自己热爱工作，其实是在撒谎。</p><p>The most dangerous liars can be the kids’ own parents. If you take a boring job to give your family a high standard of living, as so many people do, you risk infecting your kids with the idea that work is boring. [2] Maybe it would be better for kids in this one case if parents were not so unselfish. A parent who set an example of loving their work might help their kids more than an expensive house. [3]<br>最危险的说谎者可能是孩子的父母。就像很多人那样，如果你为了给家人提供高质量的生活而从事一份枯燥的工作，你就可能会让孩子产生 “工作就是枯燥的” 这种想法。[2] 在这种情况下，或许父母不那么 “无私”，对孩子反而更好。一个能以身作则、热爱工作的父母，给孩子带来的帮助可能比一套昂贵的房子更大。[3]</p><p>It was not till I was in college that the idea of work finally broke free from the idea of making a living. Then the important question became not how to make money, but what to work on. Ideally these coincided, but some spectacular boundary cases (like Einstein in the patent office) proved they weren’t identical.<br>直到上了大学，我才终于把 “工作” 的概念从 “谋生” 的概念中剥离出来。从那以后，重要的问题不再是 “如何赚钱”，而是 “要做什么工作”。理想情况下，两者是一致的，但一些极具代表性的特例（比如在专利局工作的爱因斯坦）证明，它们并非一回事。</p><p>The definition of work was now to make some original contribution to the world, and in the process not to starve. But after the habit of so many years my idea of work still included a large component of pain. Work still seemed to require discipline, because only hard problems yielded grand results, and hard problems couldn’t literally be fun. Surely one had to force oneself to work on them.<br>那时，我对工作的定义变成了 “为世界做出一些原创性的贡献，同时保证自己不至于饿死”。但多年的固有观念难以改变，我对工作的认知中仍包含着很大一部分 “痛苦” 的成分。我依然觉得工作需要靠自制力来推动，因为只有解决困难的问题才能取得重大成果，而困难的问题按理说不可能是有趣的。显然，人必须强迫自己去攻克这些难题。</p><p>If you think something’s supposed to hurt, you’re less likely to notice if you’re doing it wrong. That about sums up my experience of graduate school.<br>如果你认定某件事本该是痛苦的，那么当你用错误的方式去做它时，你反而不太可能察觉。这句话大致概括了我读研究生时的经历。</p><h2 id="Bounds"><a href="#Bounds" class="headerlink" title="Bounds"></a><strong>Bounds</strong></h2><p><strong>界限</strong></p><p>How much are you supposed to like what you do? Unless you know that, you don’t know when to stop searching. And if, like most people, you underestimate it, you’ll tend to stop searching too early. You’ll end up doing something chosen for you by your parents, or the desire to make money, or prestige — or sheer inertia.<br>你应该有多热爱自己所做的事呢？如果不知道答案，你就不知道该在什么时候停止寻找。而如果像大多数人那样，你低估了 “热爱” 的程度，就很容易过早停止寻找。最终，你可能会从事一份父母为你选的工作，或者为了赚钱、为了声望，又或者仅仅是因为惰性而选择一份工作。</p><p>Here’s an upper bound: Do what you love doesn’t mean, do what you would like to do most this second. Even Einstein probably had moments when he wanted to have a cup of coffee, but told himself he ought to finish what he was working on first.<br>先来说说上限：“做你所爱” 并不意味着 “做此刻你最想做的事”。即便是爱因斯坦，或许也有过想先喝杯咖啡，但又告诉自己应该先完成手头工作的时刻。</p><p>It used to perplex me when I read about people who liked what they did so much that there was nothing they’d rather do. There didn’t seem to be any sort of work I liked that much. If I had a choice of (a) spending the next hour working on something or (b) be teleported to Rome and spend the next hour wandering about, was there any sort of work I’d prefer? Honestly, no.<br>以前，当我读到有些人因为太热爱自己的工作，以至于再也找不到更想做的事时，我总是感到困惑。因为在我看来，似乎没有任何一种工作能让我热爱到那种程度。如果让我选择：（a）接下来一小时继续工作；（b）瞬间转移到罗马，接下来一小时四处闲逛 —— 我会选择前者吗？说实话，不会。</p><p>But the fact is, almost anyone would rather, at any given moment, float about in the Caribbean, or have sex, or eat some delicious food, than work on hard problems. The rule about doing what you love assumes a certain length of time. It doesn’t mean, do what will make you happiest this second, but what will make you happiest over some longer period, like a week or a month.<br>但事实是，在任何一个特定时刻，几乎所有人都会更愿意在加勒比海漂流、享受性生活、吃美味的食物，而不是去攻克难题。“做你所爱” 这个原则，是基于一个特定的时间跨度而言的。它不是指 “做此刻能让你最快乐的事”，而是指 “在更长的时间段里 —— 比如一周或一个月 —— 能让你最快乐的事”。</p><p>Unproductive pleasures pall eventually. After a while you get tired of lying on the beach. If you want to stay happy, you have to do something.<br>毫无产出的享乐终会让人厌倦。过不了多久，你就会对躺在沙滩上感到乏味。如果你想一直保持快乐，就必须做点什么（有意义的事）。</p><p>As a lower bound, you have to like your work more than any unproductive pleasure. You have to like what you do enough that the concept of “spare time” seems mistaken. Which is not to say you have to spend all your time working. You can only work so much before you get tired and start to screw up. Then you want to do something else — even something mindless. But you don’t regard this time as the prize and the time you spend working as the pain you endure to earn it.<br>再来说说下限：你对工作的热爱，必须超过对任何无产出享乐的喜爱。你必须足够热爱自己所做的事，以至于觉得 “业余时间” 这个概念本身都是多余的。这并不是说你要把所有时间都花在工作上 —— 人在工作到一定程度后会感到疲惫，进而出错，这时你就需要做点别的事，哪怕是毫无意义的事。但你不会把这些 “休息时间” 当成奖励，也不会把工作时间当成 “为了获得奖励而必须忍受的痛苦”。</p><p>I put the lower bound there for practical reasons. If your work is not your favorite thing to do, you’ll have terrible problems with procrastination. You’ll have to force yourself to work, and when you resort to that the results are distinctly inferior.<br>我设定这样一个下限，是出于实际考虑。如果工作不是你最喜欢做的事，你就会陷入严重的拖延。你不得不强迫自己去工作，而一旦这样做，工作成果往往会大打折扣。</p><p>To be happy I think you have to be doing something you not only enjoy, but admire. You have to be able to say, at the end, wow, that’s pretty cool. This doesn’t mean you have to make something. If you learn how to hang glide, or to speak a foreign language fluently, that will be enough to make you say, for a while at least, wow, that’s pretty cool. What there has to be is a test.<br>我认为，要想获得快乐，你所做的事不仅要能让你享受，还要能让你引以为傲。最终，你要能说出 “哇，这太酷了” 这样的话。这并不意味着你必须创造出某种东西 —— 如果你学会了滑翔翼，或者能流利地说一门外语，至少在一段时间内，这就足以让你发出 “哇，这太酷了” 的赞叹。关键在于，这件事必须有一个 “检验标准”（能让你看到成果或进步）。</p><p>So one thing that falls just short of the standard, I think, is reading books. Except for some books in math and the hard sciences, there’s no test of how well you’ve read a book, and that’s why merely reading books doesn’t quite feel like work. You have to do something with what you’ve read to feel productive.<br>在我看来，有一件事就刚好达不到这个标准，那就是读书。除了数学和硬科学领域的一些书籍，大多数书都没有一个 “检验你读得好不好” 的标准，这就是为什么单纯读书不太会让人产生 “在工作” 的感觉。你必须把从书中学到的东西用起来，才能感受到 “有产出”。</p><p>I think the best test is one Gino Lee taught me: to try to do things that would make your friends say wow. But it probably wouldn’t start to work properly till about age 22, because most people haven’t had a big enough sample to pick friends from before then.<br>我觉得最好的检验标准是吉诺・李（Gino Lee）教我的：努力去做那些能让朋友发出 “哇” 的赞叹的事。但这个标准大概要到 22 岁左右才真正管用，因为在此之前，大多数人还没有足够多的社交样本，来找到能真正理解并认可自己的朋友。</p><h2 id="Sirens"><a href="#Sirens" class="headerlink" title="Sirens"></a>Sirens</h2><p><strong>诱惑（警示信号）</strong></p><p>What you should not do, I think, is worry about the opinion of anyone beyond your friends. You shouldn’t worry about prestige. Prestige is the opinion of the rest of the world. When you can ask the opinions of people whose judgement you respect, what does it add to consider the opinions of people you don’t even know? [4]<br>我认为，你不应该做的事，是在意朋友之外任何人的看法，更不该在意所谓的 “声望”。声望本质上是外界的评价。既然你能向那些你尊重其判断力的人征求意见，那么再去考虑素不相识之人的看法，又有什么意义呢？[4]</p><p>This is easy advice to give. It’s hard to follow, especially when you’re young. [5] Prestige is like a powerful magnet that warps even your beliefs about what you enjoy. It causes you to work not on what you like, but what you’d like to like.<br>这样的建议说起来容易，做起来却很难，尤其是在你年轻的时候。[5] 声望就像一块强力磁铁，甚至会扭曲你对 “自己喜欢什么” 的认知。它会让你不再去做自己真正热爱的事，而是去做 “你希望自己喜欢” 的事。</p><p>That’s what leads people to try to write novels, for example. They like reading novels. They notice that people who write them win Nobel prizes. What could be more wonderful, they think, than to be a novelist? But liking the idea of being a novelist is not enough; you have to like the actual work of novel-writing if you’re going to be good at it; you have to like making up elaborate lies.<br>比如，这就是为什么有些人会试图写小说。他们喜欢读小说，又看到写小说的人能获得诺贝尔奖，于是就觉得 “成为小说家还有比这更棒的事吗？” 但仅仅是 “喜欢成为小说家的这个想法” 是远远不够的 —— 如果你想把小说写好，就必须热爱 “写小说” 这件事本身，必须热爱去编织那些复杂精巧的 “谎言”（虚构故事）。</p><p>Prestige is just fossilized inspiration. If you do anything well enough, you’ll make it prestigious. Plenty of things we now consider prestigious were anything but at first. Jazz comes to mind — though almost any established art form would do. So just do what you like, and let prestige take care of itself.<br>声望不过是 “固化的灵感”。无论你做什么事，只要做得足够好，自然就能为它赢得声望。现在很多我们认为 “有声望” 的事物，最初根本与声望无关。爵士乐就是一个例子 —— 其实几乎所有成熟的艺术形式都是如此。所以，你只需专注于做自己喜欢的事，声望自然会随之而来（如果它该来的话）。</p><p>Prestige is especially dangerous to the ambitious. If you want to make ambitious people waste their time on errands, the way to do it is to bait the hook with prestige. That’s the recipe for getting people to give talks, write forewords, serve on committees, be department heads, and so on. It might be a good rule simply to avoid any prestigious task. If it didn’t suck, they wouldn’t have had to make it prestigious.<br>声望对有野心的人来说尤其危险。如果你想让有野心的人把时间浪费在琐事上，只需用 “声望” 作为诱饵就行。这就是为什么有人会同意去做演讲、写序言、在委员会任职、当部门主管等等。或许有个简单的原则值得遵循：避开所有带有 “声望光环” 的任务。如果一件事本身不枯燥乏味，人们根本没必要用 “声望” 来包装它。</p><p>Similarly, if you admire two kinds of work equally, but one is more prestigious, you should probably choose the other. Your opinions about what’s admirable are always going to be slightly influenced by prestige, so if the two seem equal to you, you probably have more genuine admiration for the less prestigious one.<br>同理，如果你对两种工作的好感度看似相同，但其中一种更有声望，那么你或许应该选择另一种。你对 “什么事值得钦佩” 的判断，总会或多或少受到声望的影响。所以当两种选择在你眼中 “看起来一样好” 时，实际上你对那个 “声望较低” 的选项，很可能怀有更真实的喜爱。</p><p>The other big force leading people astray is money. Money by itself is not that dangerous. When something pays well but is regarded with contempt, like telemarketing, or prostitution, or personal injury litigation, ambitious people aren’t tempted by it. That kind of work ends up being done by people who are “just trying to make a living.” (Tip: avoid any field whose practitioners say this.) The danger is when money is combined with prestige, as in, say, corporate law, or medicine. A comparatively safe and prosperous career with some automatic baseline prestige is dangerously tempting to someone young, who hasn’t thought much about what they really like.<br>另一个让人误入歧途的重要因素是金钱。金钱本身并没有那么危险。如果一份工作薪水很高，但却受人轻视 —— 比如电话营销、性交易、人身伤害诉讼代理 —— 有野心的人是不会被它诱惑的。这类工作最终往往由那些 “只是想谋生” 的人来做。（小贴士：避开所有从业者常说这句话的领域。）真正的危险在于 “金钱与声望的结合”，比如公司法务、医学行业等。一份相对稳定、收入丰厚，还自带基础声望的职业，对那些尚未认真思考自己真正热爱什么的年轻人来说，具有极大的诱惑性，而这种诱惑是危险的。</p><p>The test of whether people love what they do is whether they’d do it even if they weren’t paid for it — even if they had to work at another job to make a living. How many corporate lawyers would do their current work if they had to do it for free, in their spare time, and take day jobs as waiters to support themselves?<br>判断一个人是否真正热爱自己的工作，有一个检验标准：即便没有报酬，即便需要做另一份工作来谋生，他是否还会坚持做这件事？如果公司法务必须无偿地在业余时间做现在的工作，同时还要靠当服务员来维持生计，那么有多少人还会继续做这份工作呢？</p><p>This test is especially helpful in deciding between different kinds of academic work, because fields vary greatly in this respect. Most good mathematicians would work on math even if there were no jobs as math professors, whereas in the departments at the other end of the spectrum, the availability of teaching jobs is the driver: people would rather be English professors than work in ad agencies, and publishing papers is the way you compete for such jobs. Math would happen without math departments, but it is the existence of English majors, and therefore jobs teaching them, that calls into being all those thousands of dreary papers about gender and identity in the novels of Conrad. No one does that kind of thing for fun.<br>这个检验标准在选择不同学术领域的工作时尤其有用，因为不同领域在这一点上差异巨大。大多数优秀的数学家，即便没有数学教授的职位，也依然会钻研数学；而在另一些学术领域，“是否有教职空缺” 才是核心驱动力 —— 人们选择做英语教授，只是因为比起在广告公司工作，他们更倾向于这个选择，而发表论文不过是竞争教职的手段。即便没有数学系，数学研究依然会存在；但正是因为有英语专业的存在，有教授英语专业的教职需求，才催生了成千上万篇关于康拉德小说中 “性别与身份” 的枯燥论文。没人会为了乐趣去做这种事。</p><p>The advice of parents will tend to err on the side of money. It seems safe to say there are more undergrads who want to be novelists and whose parents want them to be doctors than who want to be doctors and whose parents want them to be novelists. The kids think their parents are “materialistic.” Not necessarily. All parents tend to be more conservative for their kids than they would for themselves, simply because, as parents, they share risks more than rewards. If your eight year old son decides to climb a tall tree, or your teenage daughter decides to date the local bad boy, you won’t get a share in the excitement, but if your son falls, or your daughter gets pregnant, you’ll have to deal with the consequences.<br>父母的建议往往会偏向 “金钱”。可以肯定地说，想当小说家却被父母要求当医生的本科生，远多于想当医生却被父母要求当小说家的本科生。孩子们可能会觉得父母 “太物质”，但事实未必如此。所有父母在为孩子做选择时，都会比为自己做选择时更保守 —— 原因很简单，作为父母，他们要承担的风险远多于能享受到的收益。如果八岁的儿子想爬高树，或者十几岁的女儿想和当地的 “坏小子” 约会，你无法分享他们从中获得的兴奋感，但如果儿子摔下来了，或者女儿怀孕了，你却必须承担后果。</p><h2 id="Discipline"><a href="#Discipline" class="headerlink" title="Discipline"></a>Discipline</h2><p><strong>自律</strong></p><p>With such powerful forces leading us astray, it’s not surprising we find it so hard to discover what we like to work on. Most people are doomed in childhood by accepting the axiom that work &#x3D; pain. Those who escape this are nearly all lured onto the rocks by prestige or money. How many even discover something they love to work on? A few hundred thousand, perhaps, out of billions.<br>既然有如此强大的力量让我们误入歧途，那么我们难以找到自己热爱的工作，也就不足为奇了。大多数人在童年时期就接受了 “工作 &#x3D; 痛苦” 的公理，从此便被这个认知束缚；而那些摆脱了这个认知的人，又几乎都会被声望或金钱诱惑，最终碰壁。在数十亿人中，能真正找到自己热爱的工作的人，或许只有几十万吧。</p><p>It’s hard to find work you love; it must be, if so few do. So don’t underestimate this task. And don’t feel bad if you haven’t succeeded yet. In fact, if you admit to yourself that you’re discontented, you’re a step ahead of most people, who are still in denial. If you’re surrounded by colleagues who claim to enjoy work that you find contemptible, odds are they’re lying to themselves. Not necessarily, but probably.<br>找到热爱的工作很难 —— 既然能做到的人如此之少，那就说明这件事一定不容易。所以，不要低估这个任务，也不要因为尚未成功而沮丧。事实上，如果你能坦诚地承认自己对现状的不满，就已经比大多数仍在 “自欺欺人” 的人领先一步了。如果你身边的同事都声称热爱一份你觉得很糟糕的工作，那么他们很可能是在自欺欺人。虽然不能完全肯定，但大概率是这样。</p><p>Although doing great work takes less discipline than people think — because the way to do great work is to find something you like so much that you don’t have to force yourself to do it — finding work you love does usually require discipline. Some people are lucky enough to know what they want to do when they’re 12, and just glide along as if they were on railroad tracks. But this seems the exception. More often people who do great things have careers with the trajectory of a ping-pong ball. They go to school to study A, drop out and get a job doing B, and then become famous for C after taking it up on the side.<br>尽管做好一份伟大的工作所需的自律，比人们想象的要少 —— 因为做好伟大工作的关键，是找到一份你热爱到无需强迫自己就能投入的事 —— 但 “找到这份热爱的工作”，通常还是需要自律的。有些人很幸运，12 岁就知道自己想做什么，之后的人生就像沿着铁轨平稳前行一样顺利，但这只是特例。更多做出伟大成就的人，他们的职业轨迹就像乒乓球一样飘忽不定：他们上学时学的是 A 专业，中途辍学去做 B 工作，后来在业余时间开始做 C 事，最后却因为 C 而声名鹊起。</p><p>Sometimes jumping from one sort of work to another is a sign of energy, and sometimes it’s a sign of laziness. Are you dropping out, or boldly carving a new path? You often can’t tell yourself. Plenty of people who will later do great things seem to be disappointments early on, when they’re trying to find their niche.<br>有时候，从一份工作跳到另一份工作，可能是 “精力充沛、勇于探索” 的表现，也可能是 “懒惰、逃避” 的借口。你自己往往无法分辨：你是在逃避，还是在勇敢地开辟新道路？很多后来做出伟大成就的人，在早期寻找自己定位的时候，看起来都像是 “失败者”。</p><p>Is there some test you can use to keep yourself honest? One is to try to do a good job at whatever you’re doing, even if you don’t like it. Then at least you’ll know you’re not using dissatisfaction as an excuse for being lazy. Perhaps more importantly, you’ll get into the habit of doing things well.<br>有没有什么方法能让你保持清醒、不欺骗自己呢？有一个方法是：无论你现在做的是什么，哪怕不喜欢，也要尽全力把它做好。这样一来，你至少能确定自己没有把 “对现状的不满” 当作懒惰的借口。或许更重要的是，你能借此养成 “把事情做好” 的习惯。</p><p>Another test you can use is: always produce. For example, if you have a day job you don’t take seriously because you plan to be a novelist, are you producing? Are you writing pages of fiction, however bad? As long as you’re producing, you’ll know you’re not merely using the hazy vision of the grand novel you plan to write one day as an opiate. The view of it will be obstructed by the all too palpably flawed one you’re actually writing.<br>另一个检验方法是：坚持 “产出”。比如，如果你有一份日常工作，但因为计划成为小说家而不认真对待这份工作，那么你是否在 “产出”（小说相关的内容）呢？你是否在写小说草稿，哪怕写得很糟糕？只要你在持续产出，就会知道自己没有把 “某天要写一部伟大小说” 的模糊幻想当作麻醉自己的借口 —— 因为你正在写的、充满明显缺陷的草稿，会让那个 “伟大小说” 的幻想变得不再虚无缥缈（或让你看清幻想与现实的差距）。</p><p>“Always produce” is also a heuristic for finding the work you love. If you subject yourself to that constraint, it will automatically push you away from things you think you’re supposed to work on, toward things you actually like. “Always produce” will discover your life’s work the way water, with the aid of gravity, finds the hole in your roof.<br>“坚持产出” 也是找到热爱工作的一种 “启发式方法”。如果你给自己设定 “必须产出” 的约束，它会自动把你从 “你认为自己应该做的事” 推向 “你真正喜欢做的事”。“坚持产出” 能帮你找到人生的事业，就像水在重力作用下总能找到屋顶的漏洞一样（自然而然地导向本质）。</p><p>Of course, figuring out what you like to work on doesn’t mean you get to work on it. That’s a separate question. And if you’re ambitious you have to keep them separate: you have to make a conscious effort to keep your ideas about what you want from being contaminated by what seems possible. [6]<br>当然，弄清楚自己喜欢做什么，并不意味着你就能去做。这是两个独立的问题。如果你有野心，就必须把这两个问题分开：你必须有意识地努力，不让 “你想做什么” 的想法，被 “什么看起来可行” 的现实所干扰。[6]</p><p>It’s painful to keep them apart, because it’s painful to observe the gap between them. So most people pre-emptively lower their expectations. For example, if you asked random people on the street if they’d like to be able to draw like Leonardo, you’d find most would say something like “Oh, I can’t draw.” This is more a statement of intention than fact; it means, I’m not going to try. Because the fact is, if you took a random person off the street and somehow got them to work as hard as they possibly could at drawing for the next twenty years, they’d get surprisingly far. But it would require a great moral effort; it would mean staring failure in the eye every day for years. And so to protect themselves people say “I can’t.”<br>把 “想做的事” 和 “能做的事” 分开是痛苦的，因为直面两者之间的差距本身就很痛苦。所以大多数人会提前降低自己的期望。比如，如果你随便问一个路人 “是否想拥有达・芬奇那样的绘画水平”，大多数人会说 “哦，我不会画画”。这句话更多是 “不想尝试” 的表态，而非事实陈述。事实上，如果你随便找一个路人，想办法让他在接下来的二十年里尽全力学习绘画，他能达到的水平会让人惊讶。但这需要极大的精神毅力 —— 意味着多年来每天都要直面失败的可能。所以，为了保护自己，人们会说 “我不行”。</p><p>Another related line you often hear is that not everyone can do work they love — that someone has to do the unpleasant jobs. Really? How do you make them? In the US the only mechanism for forcing people to do unpleasant jobs is the draft, and that hasn’t been invoked for over 30 years. All we can do is encourage people to do unpleasant work, with money and prestige.<br>你还经常听到另一种说法：“不是每个人都能做自己热爱的工作 —— 总得有人做那些不愉快的工作。” 真的是这样吗？你怎么 “让” 人去做呢？在美国，唯一能强迫人做不愉快工作的机制是 “征兵制”，而这个制度已经 30 多年没启用了。我们能做的，只是用金钱和声望来 “鼓励” 人们去做那些不愉快的工作。</p><p>If there’s something people still won’t do, it seems as if society just has to make do without. That’s what happened with domestic servants. For millennia that was the canonical example of a job “someone had to do.” And yet in the mid twentieth century servants practically disappeared in rich countries, and the rich have just had to do without.<br>如果有些事人们仍然不愿意做，那么社会似乎也只能 “没有它也照样运转”。家庭佣人就是一个例子。几千年来，“家庭佣人” 一直被视为 “总得有人做” 的典型工作。但在 20 世纪中期，富裕国家的佣人几乎消失了，而富人也只能适应 “没有佣人” 的生活。</p><p>So while there may be some things someone has to do, there’s a good chance anyone saying that about any particular job is mistaken. Most unpleasant jobs would either get automated or go undone if no one were willing to do them.<br>因此，尽管或许确实存在一些 “总得有人做” 的事，但如果有人说某份特定的工作 “非有人做不可”，那他大概率是错的。如果没人愿意做那些令人不快的工作，它们要么会被自动化取代，要么就会被搁置不做。</p><h2 id="Two-Routes"><a href="#Two-Routes" class="headerlink" title="Two Routes"></a>Two Routes</h2><p><strong>两条路径</strong></p><p>There’s another sense of “not everyone can do work they love” that’s all too true, however. One has to make a living, and it’s hard to get paid for doing work you love. There are two routes to that destination:<br>不过，“并非所有人都能做自己热爱的工作” 还有另一种解读，这种解读在很大程度上是正确的。人总得谋生，而靠做自己热爱的事赚钱，往往并不容易。要实现 “靠热爱的事谋生” 这个目标，有两条路径可选：</p><p>The organic route: as you become more eminent, gradually to increase the parts of your job that you like at the expense of those you don’t.<br>“自然演进路径”：随着你在行业内逐渐积累声望，逐步增加工作中自己喜欢的部分，同时减少不喜欢的部分。</p><p>The two-job route: to work at things you don’t like to get money to work on things you do.<br>“双工作路径”：做一份自己不喜欢的工作来赚钱，用赚来的钱支撑自己去做热爱的事。</p><p>The organic route is more common. It happens naturally to anyone who does good work. A young architect has to take whatever work he can get, but if he does well he’ll gradually be in a position to pick and choose among projects. The disadvantage of this route is that it’s slow and uncertain. Even tenure is not real freedom.<br>“自然演进路径” 更为常见，任何工作出色的人都可能自然而然地走上这条路。比如一位年轻的建筑师，起初只能接受能找到的任何工作，但如果他做得好，慢慢就会拥有在不同项目中挑选的主动权。这条路径的缺点是进程缓慢且结果不确定 —— 即便获得了（如大学教职的）终身职位，也并非真正的自由。</p><p>The two-job route has several variants depending on how long you work for money at a time. At one extreme is the “day job,” where you work regular hours at one job to make money, and work on what you love in your spare time. At the other extreme you work at something till you make enough not to have to work for money again.<br>“双工作路径” 有几种不同形式，具体取决于你为赚钱而工作的时间长度。一种极端情况是 “日常工作模式”：你在一份固定工作中按点上下班赚钱，利用业余时间做热爱的事；另一种极端情况则是 “集中赚钱模式”：专注做某件事直到赚够钱，之后便无需再为谋生工作。</p><p>The two-job route is less common than the organic route, because it requires a deliberate choice. It’s also more dangerous. Life tends to get more expensive as you get older, so it’s easy to get sucked into working longer than you expected at the money job. Worse still, anything you work on changes you. If you work too long on tedious stuff, it will rot your brain. And the best paying jobs are most dangerous, because they require your full attention.<br>“双工作路径” 比 “自然演进路径” 少见，因为它需要人们做出刻意的选择，且风险更高。随着年龄增长，生活成本往往会不断上升，你很容易在 “赚钱的工作” 中投入比预期更长的时间。更糟糕的是，你所从事的工作会改变你 —— 如果长时间做枯燥的事，你的思维会逐渐僵化。而且薪水最高的工作往往风险最大，因为这类工作需要你全身心投入（从而更难抽身去做热爱的事）。</p><p>The advantage of the two-job route is that it lets you jump over obstacles. The landscape of possible jobs isn’t flat; there are walls of varying heights between different kinds of work. [7] The trick of maximizing the parts of your job that you like can get you from architecture to product design, but not, probably, to music. If you make money doing one thing and then work on another, you have more freedom of choice.<br>“双工作路径” 的优势在于它能让你跨越障碍。不同工作领域的 “地形” 并非平坦无阻，不同类型的工作之间存在着高低不一的 “墙”。[7] 通过 “扩大工作中热爱部分的占比” 这种方式，你或许能从建筑行业转向产品设计行业，但大概率无法直接转向音乐行业。而如果你通过一份工作赚钱、再用这些钱去做另一份热爱的事，就能拥有更多选择自由。</p><p>Which route should you take? That depends on how sure you are of what you want to do, how good you are at taking orders, how much risk you can stand, and the odds that anyone will pay (in your lifetime) for what you want to do. If you’re sure of the general area you want to work in and it’s something people are likely to pay you for, then you should probably take the organic route. But if you don’t know what you want to work on, or don’t like to take orders, you may want to take the two-job route, if you can stand the risk.<br>你该选择哪条路径？这取决于四个因素：你对 “自己想做什么” 的确定程度、你对 “服从指令” 的接受程度、你能承受的风险水平，以及 “在你有生之年，有人愿意为你热爱的事付费” 的可能性。如果你清楚自己想从事的大致领域，且这个领域大概率能让你赚到钱，那么 “自然演进路径” 或许更适合你；但如果你不确定自己想做什么，或者不喜欢服从指令，且能承受风险，那么可以考虑 “双工作路径”。</p><p>Don’t decide too soon. Kids who know early what they want to do seem impressive, as if they got the answer to some math question before the other kids. They have an answer, certainly, but odds are it’s wrong.<br>不要过早做决定。那些早早知道自己想做什么的孩子，看起来似乎很厉害，就像在数学题上比其他孩子先算出答案一样。他们确实有了一个 “答案”，但这个答案大概率是错的。</p><p>A friend of mine who is a quite successful doctor complains constantly about her job. When people applying to medical school ask her for advice, she wants to shake them and yell “Don’t do it!” (But she never does.) How did she get into this fix? In high school she already wanted to be a doctor. And she is so ambitious and determined that she overcame every obstacle along the way — including, unfortunately, not liking it.<br>我有一个朋友，她是一位非常成功的医生，却总是抱怨自己的工作。当有学生向她咨询申请医学院的建议时，她真想抓住对方大喊 “别做这行！”（但她从来没这么做过）。她怎么会陷入这种困境？因为她在高中时就确定自己想当医生，而且她极具野心、意志坚定，克服了求学和从业路上的所有障碍 —— 不幸的是，“不喜欢这份工作” 这个障碍，也被她一并 “克服” 了。</p><p>Now she has a life chosen for her by a high-school kid.<br>如今，她过着的人生，是由一个高中生（过去的自己）决定的。</p><p>When you’re young, you’re given the impression that you’ll get enough information to make each choice before you need to make it. But this is certainly not so with work. When you’re deciding what to do, you have to operate on ridiculously incomplete information. Even in college you get little idea what various types of work are like. At best you may have a couple internships, but not all jobs offer internships, and those that do don’t teach you much more about the work than being a batboy teaches you about playing baseball.<br>年轻时，你会产生一种错觉：在需要做选择之前，你总能获得足够的信息来支撑决策。但在 “选择工作” 这件事上，情况绝非如此。当你决定自己要做什么时，往往只能依靠极不完整的信息。即便在大学里，你也很难真正了解不同工作的实际情况。充其量，你可能有过几次实习经历，但并非所有工作都提供实习机会；而且即便有实习，你从中学到的关于工作的本质内容，也不过像 “棒球队球童” 能学到的 “打球技巧” 一样有限。</p><p>In the design of lives, as in the design of most other things, you get better results if you use flexible media. So unless you’re fairly sure what you want to do, your best bet may be to choose a type of work that could turn into either an organic or two-job career. That was probably part of the reason I chose computers. You can be a professor, or make a lot of money, or morph it into any number of other kinds of work.<br>设计人生就像设计大多数事物一样，使用 “灵活的载体” 往往能得到更好的结果。因此，除非你非常确定自己想做什么，否则最稳妥的选择或许是挑一份 “既能走自然演进路径，也能兼容双工作路径” 的工作。这可能也是我当初选择计算机行业的部分原因 —— 在这个领域，你可以成为教授，可以赚很多钱，也可以将其转型为其他多种类型的工作。</p><p>It’s also wise, early on, to seek jobs that let you do many different things, so you can learn faster what various kinds of work are like. Conversely, the extreme version of the two-job route is dangerous because it teaches you so little about what you like. If you work hard at being a bond trader for ten years, thinking that you’ll quit and write novels when you have enough money, what happens when you quit and then discover that you don’t actually like writing novels?<br>在职业生涯早期，寻找能让你接触多种事务的工作也很明智，这样你能更快了解不同类型工作的特点。相反，“双工作路径” 的极端形式（如集中赚钱模式）存在风险，因为它几乎无法让你了解自己真正喜欢什么。试想，如果你努力做了十年债券交易员，一心想着赚够钱就辞职去写小说，但辞职后却发现自己其实并不喜欢写小说，那该怎么办？</p><p>Most people would say, I’d take that problem. Give me a million dollars and I’ll figure out what to do. But it’s harder than it looks. Constraints give your life shape. Remove them and most people have no idea what to do: look at what happens to those who win lotteries or inherit money. Much as everyone thinks they want financial security, the happiest people are not those who have it, but those who like what they do. So a plan that promises freedom at the expense of knowing what to do with it may not be as good as it seems.<br>大多数人可能会说：“我倒希望有这种‘烦恼’，给我一百万，我总能想出该做什么。” 但事情比看起来难得多。约束为人生赋予了 “形状”，一旦失去约束，大多数人会变得不知所措 —— 看看那些中了彩票或继承大笔遗产的人就知道了。尽管每个人都觉得自己渴望经济保障，但最幸福的人并非拥有经济保障的人，而是热爱自己所做之事的人。因此，一个 “以‘不知道该做什么’为代价换取自由” 的计划，或许并没有看起来那么好。</p><p>Whichever route you take, expect a struggle. Finding work you love is very difficult. Most people fail. Even if you succeed, it’s rare to be free to work on what you want till your thirties or forties. But if you have the destination in sight you’ll be more likely to arrive at it. If you know you can love work, you’re in the home stretch, and if you know what work you love, you’re practically there.<br>无论选择哪条路径，都要做好 “奋斗” 的准备。找到自己热爱的工作难度极大，大多数人都会失败。即便你成功了，也很少有人能在三四十岁之前就拥有 “自由做热爱之事” 的条件。但只要你能看到目标，就更有可能抵达它。如果你知道 “工作是可以被热爱的”，就已经进入了最后冲刺阶段；而如果你知道 “自己热爱的工作是什么”，那你几乎就已经成功了。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p><strong>注释</strong></p><p>[1] Currently we do the opposite: when we make kids do boring work, like arithmetic drills, instead of admitting frankly that it’s boring, we try to disguise it with superficial decorations.<br>[1] 如今我们却在做相反的事：当我们让孩子做算术练习这类枯燥的任务时，我们没有坦诚地承认它很无聊，反而试图用一些表面的 “包装” 来掩盖这种枯燥。</p><p>[2] One father told me about a related phenomenon: he found himself concealing from his family how much he liked his work. When he wanted to go to work on a saturday, he found it easier to say that it was because he “had to” for some reason, rather than admitting he preferred to work than stay home with them.<br>[2] 有位父亲曾跟我说起一个相关现象：他发现自己会向家人隐瞒自己有多热爱工作。比如周六想去工作时，他觉得说自己 “因为某种原因不得不去” 会更容易，而不愿承认 “比起在家陪家人，自己更想工作”。</p><p>[3] Something similar happens with suburbs. Parents move to suburbs to raise their kids in a safe environment, but suburbs are so dull and artificial that by the time they’re fifteen the kids are convinced the whole world is boring.<br>[3] 郊区生活也存在类似问题。父母搬到郊区，本是想让孩子在安全的环境中成长，但郊区的生活既枯燥又刻意，以至于孩子长到 15 岁时，会坚信 “整个世界都是无聊的”。</p><p>[4] I’m not saying friends should be the only audience for your work. The more people you can help, the better. But friends should be your compass.<br>[4] 我并非说朋友应该是你工作的唯一受众 —— 能帮助的人越多越好。但朋友应该是你判断方向的 “指南针”。</p><p>[5] Donald Hall said young would-be poets were mistaken to be so obsessed with being published. But you can imagine what it would do for a 24 year old to get a poem published in The New Yorker. Now to people he meets at parties he’s a real poet. Actually he’s no better or worse than he was before, but to a clueless audience like that, the approval of an official authority makes all the difference. So it’s a harder problem than Hall realizes. The reason the young care so much about prestige is that the people they want to impress are not very discerning.<br>[5] 唐纳德・霍尔（Donald Hall）曾说，年轻的准诗人如此执着于发表作品是错误的。但你可以想象，一个 24 岁的年轻人若能在《纽约客》上发表一首诗，会带来怎样的改变：在派对上认识的人眼中，他成了 “真正的诗人”。实际上，他的诗歌水平并未因此变好或变差，但对那样一群缺乏判断力的人来说，官方权威的认可足以改变一切。因此，这个问题比霍尔意识到的更复杂。年轻人之所以如此在意声望，是因为他们想要取悦的对象，本身就不是很有辨别力。</p><p>[6] This is isomorphic to the principle that you should prevent your beliefs about how things are from being contaminated by how you wish they were. Most people let them mix pretty promiscuously. The continuing popularity of religion is the most visible index of that.<br>[6] 这与 “应避免‘事物实际如何’的认知，被‘你希望事物如何’的想法所干扰” 的原则是相通的。大多数人会任由这两种认知随意混淆，而宗教的持续流行，就是这种混淆最明显的体现。</p><p>[7] A more accurate metaphor would be to say that the graph of jobs is not very well connected.<br>[7] 更准确的比喻应该是：不同工作领域构成的 “关系图”，连接性并不强（即不同领域间难以直接跨越）。</p><p>Thanks to Trevor Blackwell, Dan Friedman, Sarah Harlin, Jessica Livingston, Jackie McDonough, Robert Morris, Peter Norvig, David Sloo, and Aaron Swartz for reading drafts of this.<br>感谢特雷弗・布莱克威尔（Trevor Blackwell）、丹・弗里德曼（Dan Friedman）、萨拉・哈林（Sarah Harlin）、杰西卡・利文斯顿（Jessica Livingston）、杰姬・麦克多诺（Jackie McDonough）、罗伯特・莫里斯（Robert Morris）、彼得・诺维格（Peter Norvig）、大卫・斯卢（David Sloo）和亚伦・斯沃茨（Aaron Swartz）审阅本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拖延的好与坏</title>
    <link href="/2025/09/04/good-and-bad-procrastination/"/>
    <url>/2025/09/04/good-and-bad-procrastination/</url>
    
    <content type="html"><![CDATA[<h1 id="Good-and-Bad-Procrastination"><a href="#Good-and-Bad-Procrastination" class="headerlink" title="Good and Bad Procrastination"></a>Good and Bad Procrastination</h1><h1 id="拖延的好与坏"><a href="#拖延的好与坏" class="headerlink" title="拖延的好与坏"></a>拖延的好与坏</h1><p>原文链接: <a href="https://paulgraham.com/procrastination.html">https://paulgraham.com/procrastination.html</a></p><p>December 2005</p><p>The most impressive people I know are all terrible procrastinators. So could it be that procrastination isn’t always bad?<br>我认识的那些最令人钦佩的人，全都是严重的拖延者。这么说来，拖延或许并非总是坏事？</p><p>Most people who write about procrastination write about how to cure it. But this is, strictly speaking, impossible. There are an infinite number of things you could be doing. No matter what you work on, you’re not working on everything else. So the question is not how to avoid procrastination, but how to procrastinate well.<br>大多数探讨拖延的文章，都在讲述如何 “治愈” 拖延。但严格来说，这根本不可能。因为你能做的事有无数件，无论你当下在做什么，必然会搁置其他所有事。所以问题的关键不在于如何避免拖延，而在于如何 “好好拖延”。</p><p>There are three variants of procrastination, depending on what you do instead of working on something: you could work on (a) nothing, (b) something less important, or (c) something more important. That last type, I’d argue, is good procrastination.<br>根据你搁置该做的事时所选择的替代行为，拖延可分为三种类型：（a）什么都不做；（b）做更不重要的事；（c）做更重要的事。我认为，最后一种就是 “良性拖延”。</p><p>That’s the “absent-minded professor,” who forgets to shave, or eat, or even perhaps look where he’s going while he’s thinking about some interesting question. His mind is absent from the everyday world because it’s hard at work in another.<br>这就像人们常说的 “心不在焉的教授”—— 他们在思考某个有趣的问题时，会忘记刮胡子、吃饭，甚至可能连走路都不看路。他们的思绪之所以脱离日常琐事，是因为正全神贯注地沉浸在另一个领域的工作中。</p><p>That’s the sense in which the most impressive people I know are all procrastinators. They’re type-C procrastinators: they put off working on small stuff to work on big stuff.<br>我认识的那些杰出人士，正是在这个意义上成为拖延者的。他们属于 “C 型拖延者”：为了去做更重要的事，而刻意搁置琐事。</p><p>What’s “small stuff?” Roughly, work that has zero chance of being mentioned in your obituary. It’s hard to say at the time what will turn out to be your best work (will it be your magnum opus on Sumerian temple architecture, or the detective thriller you wrote under a pseudonym?), but there’s a whole class of tasks you can safely rule out: shaving, doing your laundry, cleaning the house, writing thank-you notes—anything that might be called an errand.<br>什么是 “琐事”？大致来说，就是那些在你的讣告里绝无可能被提及的事。当下很难判断哪件事最终会成为你最杰出的成就（会是你关于苏美尔神庙建筑的鸿篇巨制，还是用笔名写的侦探惊悚小说？），但有一类任务你完全可以排除在外：刮胡子、洗衣服、打扫房间、写感谢信 —— 所有可被归为 “日常杂务” 的事。</p><p>Good procrastination is avoiding errands to do real work.<br>良性拖延，就是为了做真正重要的工作而避开日常杂务。</p><p>Good in a sense, at least. The people who want you to do the errands won’t think it’s good. But you probably have to annoy them if you want to get anything done. The mildest seeming people, if they want to do real work, all have a certain degree of ruthlessness when it comes to avoiding errands.<br>至少在某种意义上是 “好” 的。那些希望你去做杂务的人，肯定不会觉得这是好事。但如果你想做成点事，或许难免会让他们不快。即便是看起来性格最温和的人，若想专注于真正重要的工作，在拒绝杂务这件事上，也都带着几分 “冷酷”。</p><p>Some errands, like replying to letters, go away if you ignore them (perhaps taking friends with them). Others, like mowing the lawn, or filing tax returns, only get worse if you put them off. In principle it shouldn’t work to put off the second kind of errand. You’re going to have to do whatever it is eventually. Why not (as past-due notices are always saying) do it now?<br>有些杂务，比如回复信件，只要你置之不理，它们或许就会自行消失（可能还会带走朋友）；但另一些杂务，比如修剪草坪、申报纳税，拖延只会让问题越来越糟。理论上，推迟第二类杂务是不明智的 —— 反正最终还是要做，为什么不正如催缴通知上常写的那样 “现在就做” 呢？</p><p>The reason it pays to put off even those errands is that real work needs two things errands don’t: big chunks of time, and the right mood. If you get inspired by some project, it can be a net win to blow off everything you were supposed to do for the next few days to work on it. Yes, those errands may cost you more time when you finally get around to them. But if you get a lot done during those few days, you will be net more productive.<br>即便如此，推迟这类杂务仍有价值，原因在于：真正重要的工作需要两样杂务不具备的条件 —— 大块的完整时间，以及合适的状态。如果某个项目让你灵感迸发，那么接下来几天推掉所有计划好的事，专心投入这个项目，最终结果会是 “净收益”。诚然，等你回头处理那些杂务时，可能要花更多时间，但如果这几天你在重要工作上取得了重大进展，整体效率反而会更高。</p><p>In fact, it may not be a difference in degree, but a difference in kind. There may be types of work that can only be done in long, uninterrupted stretches, when inspiration hits, rather than dutifully in scheduled little slices. Empirically it seems to be so. When I think of the people I know who’ve done great things, I don’t imagine them dutifully crossing items off to-do lists. I imagine them sneaking off to work on some new idea.<br>事实上，这或许不只是程度上的差异，而是本质上的不同。有些工作只能在灵感来临时，通过长时间、不受干扰的专注才能完成，而非在预先安排好的零碎时间里敷衍了事。经验来看，情况确实如此。当我想到那些做出杰出成就的人时，我脑海里浮现的不是他们按部就班地划掉待办清单上的事项，而是他们偷偷抽身，去钻研某个新想法的样子。</p><p>Conversely, forcing someone to perform errands synchronously is bound to limit their productivity. The cost of an interruption is not just the time it takes, but that it breaks the time on either side in half. You probably only have to interrupt someone a couple times a day before they’re unable to work on hard problems at all.<br>相反，强迫一个人同步处理杂务，必然会限制他的效率。干扰带来的代价不只是消耗的时间本身，更在于它会把干扰前后的完整时间切成两半。或许一天只需干扰某人几次，他就完全无法再专注于解决难题了。</p><p>I’ve wondered a lot about why startups are most productive at the very beginning, when they’re just a couple guys in an apartment. The main reason may be that there’s no one to interrupt them yet. In theory it’s good when the founders finally get enough money to hire people to do some of the work for them. But it may be better to be overworked than interrupted. Once you dilute a startup with ordinary office workers—with type-B procrastinators—the whole company starts to resonate at their frequency. They’re interrupt-driven, and soon you are too.<br>我一直很好奇，为什么初创公司在最早期 —— 只有几个人挤在公寓里的时候 —— 效率最高？主要原因或许是，那时还没有人会干扰他们。理论上，当创始人终于有足够资金雇人分担工作时，是件好事。但或许，过度忙碌比被干扰要好得多。一旦公司里加入了普通的办公室职员 —— 也就是 “B 型拖延者”—— 整个公司的节奏都会被他们带偏。他们习惯被杂务驱动，而你很快也会变成这样。</p><p>Errands are so effective at killing great projects that a lot of people use them for that purpose. Someone who has decided to write a novel, for example, will suddenly find that the house needs cleaning. People who fail to write novels don’t do it by sitting in front of a blank page for days without writing anything. They do it by feeding the cat, going out to buy something they need for their apartment, meeting a friend for coffee, checking email. “I don’t have time to work,” they say. And they don’t; they’ve made sure of that.<br>杂务对重要项目的 “杀伤力” 极强，以至于很多人会刻意用杂务来逃避重要工作。比如，某个决定写小说的人，会突然发现家里需要打扫；那些没能写出小说的人，并非是因为连续几天坐在空白稿纸前一字未写，而是把时间花在了喂猫、出门给公寓买东西、和朋友喝咖啡、查邮件上。他们说 “我没时间写作”，确实如此 —— 他们刻意让自己没时间。</p><p>(There’s also a variant where one has no place to work. The cure is to visit the places where famous people worked, and see how unsuitable they were.)<br>（还有一种情况是 “找不到合适的工作地点”。解决办法是去看看那些名人的工作场所，你会发现它们其实都很 “不适合工作”。）</p><p>I’ve used both these excuses at one time or another. I’ve learned a lot of tricks for making myself work over the last 20 years, but even now I don’t win consistently. Some days I get real work done. Other days are eaten up by errands. And I know it’s usually my fault: I let errands eat up the day, to avoid facing some hard problem.<br>这两种借口我以前都用过。过去 20 年里，我学会了很多督促自己工作的技巧，但即便现在，也无法保证每天都能专注。有些日子我能完成重要工作，有些日子却被杂务占满。而我很清楚，这通常是我的错 —— 我用杂务填满一整天，只为逃避某个难题。</p><p>The most dangerous form of procrastination is unacknowledged type-B procrastination, because it doesn’t feel like procrastination. You’re “getting things done.” Just the wrong things.<br>最危险的拖延类型，是未被察觉的 “B 型拖延”—— 因为它看起来根本不像拖延。你确实在 “完成事情”，但都是些无关紧要的事。</p><p>Any advice about procrastination that concentrates on crossing things off your to-do list is not only incomplete, but positively misleading, if it doesn’t consider the possibility that the to-do list is itself a form of type-B procrastination. In fact, possibility is too weak a word. Nearly everyone’s is. Unless you’re working on the biggest things you could be working on, you’re type-B procrastinating, no matter how much you’re getting done.<br>任何关于拖延的建议，如果只强调 “划掉待办清单上的事项”，却不考虑待办清单本身可能就是一种 B 型拖延，那么这种建议不仅不完整，甚至具有误导性。事实上，“可能” 这个词都太保守了 —— 几乎所有人的待办清单都是如此。除非你正在做自己能力范围内最重要的事，否则无论你完成了多少任务，都是在进行 B 型拖延。</p><p>In his famous essay You and Your Research (which I recommend to anyone ambitious, no matter what they’re working on), Richard Hamming suggests that you ask yourself three questions:<br>What are the most important problems in your field?</p><p>Are you working on one of them?</p><p>Why not?<br>理查德・哈明（Richard Hamming）在他著名的文章《你和你的研究》（我向所有有抱负的人推荐这篇文章，无论他们从事什么领域）中，建议人们问自己三个问题：</p><ol><li>你所在领域最重要的问题是什么？</li><li>你正在研究其中一个吗？</li><li>为什么没有？</li></ol><p>Hamming was at Bell Labs when he started asking such questions. In principle anyone there ought to have been able to work on the most important problems in their field. Perhaps not everyone can make an equally dramatic mark on the world; I don’t know; but whatever your capacities, there are projects that stretch them. So Hamming’s exercise can be generalized to:<br>What’s the best thing you could be working on, and why aren’t you?<br>哈明在贝尔实验室工作时，就开始问身边人这些问题。理论上，那里的每个人都应该有能力去研究自己领域最重要的问题。或许不是每个人都能给世界留下同样深远的影响（这一点我不确定），但无论你的能力如何，总有能让你充分发挥潜力的项目。因此，哈明的问题可以概括为：<br>你能做的最重要的事是什么？为什么你没在做？</p><p>Most people will shy away from this question. I shy away from it myself; I see it there on the page and quickly move on to the next sentence. Hamming used to go around actually asking people this, and it didn’t make him popular. But it’s a question anyone ambitious should face.<br>大多数人都会回避这个问题。我自己也会 —— 看到这个问题，我会赶紧跳过读下一句。哈明过去常常主动问别人这个问题，这让他不太受欢迎。但对于任何有抱负的人来说，这都是一个必须面对的问题。</p><p>The trouble is, you may end up hooking a very big fish with this bait. To do good work, you need to do more than find good projects. Once you’ve found them, you have to get yourself to work on them, and that can be hard. The bigger the problem, the harder it is to get yourself to work on it.<br>问题在于，这个问题可能会让你 “钓上一条大鱼”—— 也就是找到真正重要的目标。要做出出色的成果，光找到好项目还不够，找到之后，你还得督促自己去做，而这往往很难。问题越重要，就越难让自己着手去做。</p><p>Of course, the main reason people find it difficult to work on a particular problem is that they don’t enjoy it. When you’re young, especially, you often find yourself working on stuff you don’t really like– because it seems impressive, for example, or because you’ve been assigned to work on it. Most grad students are stuck working on big problems they don’t really like, and grad school is thus synonymous with procrastination.<br>当然，人们难以着手解决某个问题，最主要的原因是不喜欢它。尤其是年轻时，你常常会被迫做自己不喜欢的事 —— 比如因为这件事看起来很 “厉害”，或者因为这是分配给你的任务。大多数研究生都被困在自己并不喜欢的重大课题里，因此 “读研” 几乎成了 “拖延” 的代名词。</p><p>But even when you like what you’re working on, it’s easier to get yourself to work on small problems than big ones. Why? Why is it so hard to work on big problems? One reason is that you may not get any reward in the forseeable future. If you work on something you can finish in a day or two, you can expect to have a nice feeling of accomplishment fairly soon. If the reward is indefinitely far in the future, it seems less real.<br>但即便你喜欢自己正在做的事，着手解决小问题也比大问题容易。为什么？为什么解决大问题如此困难？原因之一是，在可预见的未来，你可能得不到任何回报。如果某个任务一两天就能完成，你很快就能获得成就感；但如果回报遥遥无期，它就会显得不那么 “真实”。</p><p>Another reason people don’t work on big projects is, ironically, fear of wasting time. What if they fail? Then all the time they spent on it will be wasted. (In fact it probably won’t be, because work on hard projects almost always leads somewhere.)<br>讽刺的是，人们不做重大项目的另一个原因，是害怕浪费时间。万一失败了怎么办？那投入的所有时间不就白费了吗？（但事实上，这些时间几乎不会白费 —— 因为攻克难题的过程，总会带你走向新的方向。）</p><p>But the trouble with big problems can’t be just that they promise no immediate reward and might cause you to waste a lot of time. If that were all, they’d be no worse than going to visit your in-laws. There’s more to it than that. Big problems are terrifying. There’s an almost physical pain in facing them. It’s like having a vacuum cleaner hooked up to your imagination. All your initial ideas get sucked out immediately, and you don’t have any more, and yet the vacuum cleaner is still sucking.<br>但大问题的棘手之处，绝不仅仅是 “没有即时回报” 和 “可能浪费时间”。如果仅此而已，它们也不会比去见岳父母更糟糕。真正的问题在于，大问题本身很 “可怕”。面对它们时，你会感到一种近乎生理上的痛苦 —— 就像你的想象力被接上了一台吸尘器，所有初步想法都被瞬间吸走，再也想不出新东西，但吸尘器还在不停地吸。</p><p>You can’t look a big problem too directly in the eye. You have to approach it somewhat obliquely. But you have to adjust the angle just right: you have to be facing the big problem directly enough that you catch some of the excitement radiating from it, but not so much that it paralyzes you. You can tighten the angle once you get going, just as a sailboat can sail closer to the wind once it gets underway.<br>你不能过于直接地 “直视” 大问题，而要稍微迂回地接近它。但角度必须恰到好处：既要足够贴近问题，能感受到它所散发的吸引力，又不能太近，以免被它吓住而无法行动。一旦开始推进，你就可以慢慢调整角度、逐步靠近 —— 就像帆船一旦起航，就能逐渐驶得更贴近风向。</p><p>If you want to work on big things, you seem to have to trick yourself into doing it. You have to work on small things that could grow into big things, or work on successively larger things, or split the moral load with collaborators. It’s not a sign of weakness to depend on such tricks. The very best work has been done this way.<br>若你想专注于重大事业，似乎总得 “骗过自己” 才能行动起来。你可以从可能发展成大事的小事做起，或是逐步挑战规模更大的任务，亦或是与合作者分担心理压力。依靠这些方法绝非软弱的表现 —— 最杰出的成就，往往就是这样实现的。</p><p>When I talk to people who’ve managed to make themselves work on big things, I find that all blow off errands, and all feel guilty about it. I don’t think they should feel guilty. There’s more to do than anyone could. So someone doing the best work they can is inevitably going to leave a lot of errands undone. It seems a mistake to feel bad about that.<br>当我与那些成功投入重大事业的人交流时发现，他们都会推掉日常杂务，且都会为此感到愧疚。但我认为他们无需愧疚。要做的事多到任何人都无法穷尽，因此，一个人若在尽全力做好最重要的事，就必然会留下许多杂务未完成。为此而懊恼，实在是不必要的。</p><p>I think the way to “solve” the problem of procrastination is to let delight pull you instead of making a to-do list push you. Work on an ambitious project you really enjoy, and sail as close to the wind as you can, and you’ll leave the right things undone.<br>在我看来，“解决” 拖延问题的方法，是让热爱引领你，而非让待办清单推着你。投身于一个你真正热爱的宏伟项目，尽己所能地向目标靠近，如此一来，你自然会忽略那些本就该放下的琐事。</p><p>Thanks to Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢特雷弗・布莱克威尔（Trevor Blackwell）、杰西卡・利文斯顿（Jessica Livingston）和罗伯特・莫里斯（Robert Morris）审阅本文初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何为初创公司融资</title>
    <link href="/2025/09/02/how-to-fund-a-startup/"/>
    <url>/2025/09/02/how-to-fund-a-startup/</url>
    
    <content type="html"><![CDATA[<h1 id="How-to-Fund-a-Startup"><a href="#How-to-Fund-a-Startup" class="headerlink" title="How to Fund a Startup"></a>How to Fund a Startup</h1><h1 id="如何为初创企业融资"><a href="#如何为初创企业融资" class="headerlink" title="如何为初创企业融资"></a>如何为初创企业融资</h1><p>原文链接: <a href="https://paulgraham.com/startupfunding.html">https://paulgraham.com/startupfunding.html</a></p><p>November 2005</p><p>Venture funding works like gears. A typical startup goes through several rounds of funding, and at each round you want to take just enough money to reach the speed where you can shift into the next gear.<br>风险融资的运作方式如同齿轮传动。一家典型的初创企业会经历多轮融资，而在每一轮融资中，你所需筹集的资金数额，只需足够让企业发展到能够 “切换到下一个齿轮” 的速度即可。</p><p>Few startups get it quite right. Many are underfunded. A few are overfunded, which is like trying to start driving in third gear.<br>很少有初创企业能完全把握好融资节奏。许多企业面临资金不足的问题，也有少数企业存在过度融资的情况 —— 这就好比刚启动汽车就想挂三挡行驶一样不切实际。</p><p>I think it would help founders to understand funding better—not just the mechanics of it, but what investors are thinking. I was surprised recently when I realized that all the worst problems we faced in our startup were due not to competitors, but investors. Dealing with competitors was easy by comparison.<br>我认为，创始人若能更深入地理解融资 —— 不仅要了解融资的运作机制，还要知晓投资者的想法 —— 将会大有裨益。最近我猛然意识到，我们初创企业遇到的所有最棘手的问题，并非源于竞争对手，而是来自投资者，这让我颇为意外。相比之下，应对竞争对手反而简单得多。</p><p>I don’t mean to suggest that our investors were nothing but a drag on us. They were helpful in negotiating deals, for example. I mean more that conflicts with investors are particularly nasty. Competitors punch you in the jaw, but investors have you by the balls.<br>我并非想说我们的投资者完全是企业的拖累。比如，在谈判交易时，他们确实提供了不少帮助。我想表达的是，与投资者之间的冲突往往更为棘手。竞争对手的打击如同挥拳打在你的下巴上，而投资者却能牢牢牵制住你的要害。</p><p>Apparently our situation was not unusual. And if trouble with investors is one of the biggest threats to a startup, managing them is one of the most important skills founders need to learn.<br>显然，我们的情况并非个例。如果说与投资者之间的矛盾是初创企业面临的最大威胁之一，那么学会与投资者打交道，便是创始人必须掌握的最重要技能之一。</p><p>Let’s start by talking about the five sources of startup funding. Then we’ll trace the life of a hypothetical (very fortunate) startup as it shifts gears through successive rounds.<br>首先，我们来探讨初创企业融资的五大渠道。之后，我们将以一家假设的（且非常幸运的）初创企业为例，追踪其在一轮又一轮融资中 “换挡前行” 的发展历程。</p><h2 id="Friends-and-Family"><a href="#Friends-and-Family" class="headerlink" title="Friends and Family"></a>Friends and Family</h2><h2 id="亲友融资"><a href="#亲友融资" class="headerlink" title="亲友融资"></a>亲友融资</h2><p>A lot of startups get their first funding from friends and family. Excite did, for example: after the founders graduated from college, they borrowed $15,000 from their parents to start a company. With the help of some part-time jobs they made it last 18 months.<br>许多初创企业的第一笔资金都来自亲友。例如，Excite（美国早期搜索引擎公司）的创始人在大学毕业后，从父母那里借了 1.5 万美元创办了公司。再加上他们做兼职的收入，这笔资金支撑企业运营了 18 个月。</p><p>If your friends or family happen to be rich, the line blurs between them and angel investors. At Viaweb we got our first $10,000 of seed money from our friend Julian, but he was sufficiently rich that it’s hard to say whether he should be classified as a friend or angel. He was also a lawyer, which was great, because it meant we didn’t have to pay legal bills out of that initial small sum.<br>如果你的亲友恰好家境富裕，那么他们与天使投资者之间的界限就会变得模糊。以 Viaweb（作者创办的公司）为例，我们的第一笔 1 万美元种子资金来自朋友朱利安，但他非常富有，以至于很难界定他究竟该被归为亲友还是天使投资者。此外，他还是一名律师，这对我们来说十分有利 —— 这意味着我们无需从那笔微薄的初始资金中支出法律费用。</p><p>The advantage of raising money from friends and family is that they’re easy to find. You already know them. There are three main disadvantages: you mix together your business and personal life; they will probably not be as well connected as angels or venture firms; and they may not be accredited investors, which could complicate your life later.<br>向亲友融资的优势在于，他们很容易接触到 —— 毕竟你本来就认识他们。但这种融资方式也存在三大主要劣势：一是会将你的商业生活与个人生活搅在一起；二是亲友的人脉资源通常不如天使投资者或风投公司广泛；三是他们可能并非 “合格投资者”，这会给你日后的企业运营带来麻烦。</p><p>The SEC defines an “accredited investor” as someone with over a million dollars in liquid assets or an income of over $200,000 a year. The regulatory burden is much lower if a company’s shareholders are all accredited investors. Once you take money from the general public you’re more restricted in what you can do. [1]<br>美国证券交易委员会（SEC）将 “合格投资者” 定义为流动资产超过 100 万美元，或年收入超过 20 万美元的个人。如果一家公司的所有股东均为合格投资者，其面临的监管压力会小得多。一旦你从普通公众那里筹集资金，企业的运营活动就会受到更多限制。[1]</p><p>A startup’s life will be more complicated, legally, if any of the investors aren’t accredited. In an IPO, it might not merely add expense, but change the outcome. A lawyer I asked about it said:<br>从法律层面来看，如果企业的投资者中存在非合格投资者，初创企业的运营会变得更加复杂。在首次公开募股（IPO）阶段，这不仅可能增加额外成本，甚至可能改变 IPO 的最终结果。我就此咨询过一位律师，他表示：</p><p>When the company goes public, the SEC will carefully study all prior issuances of stock by the company and demand that it take immediate action to cure any past violations of securities laws. Those remedial actions can delay, stall or even kill the IPO.<br>“当公司准备上市时，美国证券交易委员会会仔细审查公司以往所有的股票发行情况，并要求公司立即采取措施纠正过去可能存在的违反证券法的行为。这些补救措施可能会导致 IPO 延迟、停滞，甚至彻底失败。”</p><p>Of course the odds of any given startup doing an IPO are small. But not as small as they might seem. A lot of startups that end up going public didn’t seem likely to at first. (Who could have guessed that the company Wozniak and Jobs started in their spare time selling plans for microcomputers would yield one of the biggest IPOs of the decade?) Much of the value of a startup consists of that tiny probability multiplied by the huge outcome.<br>当然，对任何一家初创企业而言，成功实现 IPO 的概率都很小，但这一概率并非像人们想象中那般渺茫。许多最终成功上市的初创企业，起初看起来并无上市的可能。（谁能想到，沃兹尼亚克和乔布斯利用业余时间创办、靠售卖微型计算机设计图纸起家的公司，后来会成为十年间规模最大的 IPO 案例之一呢？）初创企业的价值，很大程度上就来源于这种 “小概率乘以大回报” 的可能性。</p><p>It wasn’t because they weren’t accredited investors that I didn’t ask my parents for seed money, though. When we were starting Viaweb, I didn’t know about the concept of an accredited investor, and didn’t stop to think about the value of investors’ connections. The reason I didn’t take money from my parents was that I didn’t want them to lose it.<br>不过，我当初没有向父母寻求种子资金，并非因为他们不是合格投资者。在创办 Viaweb 时，我甚至不知道 “合格投资者” 这个概念，也未曾考虑过投资者人脉资源的价值。我之所以不向父母要钱，纯粹是不想让他们承担资金损失的风险。</p><h2 id="Consulting"><a href="#Consulting" class="headerlink" title="Consulting"></a>Consulting</h2><h2 id="咨询服务融资"><a href="#咨询服务融资" class="headerlink" title="咨询服务融资"></a>咨询服务融资</h2><p>Another way to fund a startup is to get a job. The best sort of job is a consulting project in which you can build whatever software you wanted to sell as a startup. Then you can gradually transform yourself from a consulting company into a product company, and have your clients pay your development expenses.<br>为初创企业融资的另一种方式是先找一份工作，而最佳选择是承接咨询项目 —— 在这类项目中，你可以开发自己原本计划作为初创企业核心产品来销售的软件。之后，你便可以逐步将公司从咨询服务模式转型为产品销售模式，同时让客户为你的产品开发费用买单。</p><p>This is a good plan for someone with kids, because it takes most of the risk out of starting a startup. There never has to be a time when you have no revenues. Risk and reward are usually proportionate, however: you should expect a plan that cuts the risk of starting a startup also to cut the average return. In this case, you trade decreased financial risk for increased risk that your company won’t succeed as a startup.<br>对于有孩子的创业者来说，这是一个不错的方案，因为它能大大降低初创企业的风险 —— 企业永远不会陷入没有收入的境地。然而，风险与回报通常是成正比的：一种能降低创业风险的方案，往往也会降低平均预期回报。具体而言，在这种模式下，你虽然降低了财务风险，却增加了公司无法成功转型为初创企业（即产品型公司）的风险。</p><p>But isn’t the consulting company itself a startup? No, not generally. A company has to be more than small and newly founded to be a startup. There are millions of small businesses in America, but only a few thousand are startups. To be a startup, a company has to be a product business, not a service business. By which I mean not that it has to make something physical, but that it has to have one thing it sells to many people, rather than doing custom work for individual clients. Custom work doesn’t scale. To be a startup you need to be the band that sells a million copies of a song, not the band that makes money by playing at individual weddings and bar mitzvahs.<br>但咨询公司本身不就是一家初创企业吗？通常情况下，答案是否定的。一家公司不能仅仅因为规模小、成立时间短就被称为初创企业。在美国，小型企业有数百万家，但初创企业仅有几千家。要成为初创企业，公司必须是产品型企业，而非服务型企业。这里的 “产品型” 并非指必须生产实体产品，而是指公司拥有一款可面向大量用户销售的核心产品，而非为单个客户提供定制化服务。定制化服务无法实现规模化发展。打个比方，初创企业应当像那些能卖出一百万张唱片的乐队，而不是靠在婚礼或成人礼上表演赚钱的乐队。</p><p>The trouble with consulting is that clients have an awkward habit of calling you on the phone. Most startups operate close to the margin of failure, and the distraction of having to deal with clients could be enough to put you over the edge. Especially if you have competitors who get to work full time on just being a startup.<br>咨询业务的问题在于，客户总会不合时宜地给你打电话。大多数初创企业的运营都处于 “濒临失败” 的边缘，而处理客户需求带来的精力分散，很可能会让企业彻底陷入困境。尤其是当你的竞争对手能全身心投入初创业务（即产品开发）时，这种劣势会更加明显。</p><p>So you have to be very disciplined if you take the consulting route. You have to work actively to prevent your company growing into a “weed tree,” dependent on this source of easy but low-margin money. [2]<br>因此，如果你选择通过咨询业务来为初创企业铺路，就必须具备极强的自律性。你需要主动采取措施，防止公司变成一棵 “杂树”—— 即过度依赖咨询这种 “来钱快但利润低” 的业务模式。[2]</p><p>Indeed, the biggest danger of consulting may be that it gives you an excuse for failure. In a startup, as in grad school, a lot of what ends up driving you are the expectations of your family and friends. Once you start a startup and tell everyone that’s what you’re doing, you’re now on a path labelled “get rich or bust.” You now have to get rich, or you’ve failed.<br>事实上，咨询业务最大的风险或许在于，它会成为你逃避失败的借口。在初创企业中，就像在研究生院一样，家人和朋友的期望往往是你前进的重要动力。一旦你启动初创项目并告知所有人，你就走上了一条 “要么成功致富，要么彻底失败” 的道路 —— 你必须取得成功，否则就是失败。</p><p>Fear of failure is an extraordinarily powerful force. Usually it prevents people from starting things, but once you publish some definite ambition, it switches directions and starts working in your favor. I think it’s a pretty clever piece of jiujitsu to set this irresistible force against the slightly less immovable object of becoming rich. You won’t have it driving you if your stated ambition is merely to start a consulting company that you will one day morph into a startup.<br>对失败的恐惧是一种极其强大的力量。通常情况下，它会阻止人们开启新的尝试，但一旦你公开了明确的目标，这种恐惧就会转向，开始为你所用。我认为，将这种 “无法抗拒的恐惧” 与 “渴望致富” 这一 “稍弱的目标” 相互制衡，是一种非常巧妙的策略。但如果你的公开目标仅仅是 “先开一家咨询公司，日后再转型为初创企业”，那么这种对失败的恐惧就无法成为推动你前进的动力。</p><p>An advantage of consulting, as a way to develop a product, is that you know you’re making something at least one customer wants. But if you have what it takes to start a startup you should have sufficient vision not to need this crutch.<br>当然，将咨询业务作为产品开发的铺垫也有一个优势：你能明确知道自己开发的产品至少有一个客户（即咨询项目的客户）需要。但如果你具备创办初创企业的潜质，就应当拥有足够的洞察力，无需依赖这种 “拐杖”。</p><h2 id="Angel-Investors"><a href="#Angel-Investors" class="headerlink" title="Angel Investors"></a>Angel Investors</h2><h2 id="天使投资者"><a href="#天使投资者" class="headerlink" title="天使投资者"></a>天使投资者</h2><p>Angels are individual rich people. The word was first used for backers of Broadway plays, but now applies to individual investors generally. Angels who’ve made money in technology are preferable, for two reasons: they understand your situation, and they’re a source of contacts and advice.<br>天使投资者指的是富有的个人投资者。“天使” 一词最初用于指代百老汇戏剧的资助人，如今则泛指各类个人投资者。其中，在科技行业发家的天使投资者是更优选择，原因有二：一是他们更能理解初创企业的处境；二是他们能提供宝贵的人脉资源和建议。</p><p>The contacts and advice can be more important than the money. When del.icio.us took money from investors, they took money from, among others, Tim O’Reilly. The amount he put in was small compared to the VCs who led the round, but Tim is a smart and influential guy and it’s good to have him on your side.<br>人脉资源和建议往往比资金本身更重要。例如，社交书签网站 del.icio.us 在融资时，就曾获得蒂姆・奥莱利（Tim O’Reilly）的投资。尽管他的投资金额远低于主导该轮融资的风投公司，但蒂姆是一位极具智慧和影响力的人物，能得到他的支持对企业而言大有裨益。</p><p>You can do whatever you want with money from consulting or friends and family. With angels we’re now talking about venture funding proper, so it’s time to introduce the concept of exit strategy. Younger would-be founders are often surprised that investors expect them either to sell the company or go public. The reason is that investors need to get their capital back. They’ll only consider companies that have an exit strategy—meaning companies that could get bought or go public.<br>从咨询业务或亲友那里获得的资金，你可以自由支配。但当天使投资者介入时，我们所讨论的就属于正式的风险融资了，因此有必要引入 “退出策略” 这一概念。许多年轻的潜在创始人常会感到惊讶：投资者竟然期望他们要么将公司出售，要么推动公司上市。原因很简单：投资者需要收回他们的资本。他们只会投资那些有明确退出策略的公司 —— 即那些有可能被收购或实现上市的公司。</p><p>This is not as selfish as it sounds. There are few large, private technology companies. Those that don’t fail all seem to get bought or go public. The reason is that employees are investors too—of their time—and they want just as much to be able to cash out. If your competitors offer employees stock options that might make them rich, while you make it clear you plan to stay private, your competitors will get the best people. So the principle of an “exit” is not just something forced on startups by investors, but part of what it means to be a startup.<br>这并非听起来那么自私。在科技行业，大型私有企业并不多见。那些没有失败的科技公司，最终似乎不是被收购，就是选择上市。背后的原因是：员工也是投资者 —— 他们投入了自己的时间 —— 因此他们同样希望有机会 “套现”（即通过股票变现）。如果你的竞争对手能为员工提供可能让他们致富的股票期权，而你却明确表示公司计划长期保持私有状态，那么优秀的人才就会流向竞争对手。因此，“退出策略” 并非只是投资者强加给初创企业的要求，而是初创企业属性的一部分。</p><p>Another concept we need to introduce now is valuation. When someone buys shares in a company, that implicitly establishes a value for it. If someone pays $20,000 for 10% of a company, the company is in theory worth $200,000. I say “in theory” because in early stage investing, valuations are voodoo. As a company gets more established, its valuation gets closer to an actual market value. But in a newly founded startup, the valuation number is just an artifact of the respective contributions of everyone involved.<br>现在我们需要引入的另一个概念是 “估值”。当有人购买一家公司的股份时，这就隐含地确定了该公司的价值。例如，如果有人花 2 万美元购买了一家公司 10% 的股份，那么理论上这家公司的估值就是 20 万美元。我之所以说 “理论上”，是因为在早期投资中，估值更像是一种 “玄学”。随着公司逐渐成熟，其估值会更接近实际市场价值。但对于新成立的初创企业而言，估值数字不过是所有相关方（创始人、投资者等）各自贡献的一种体现。</p><p>Startups often “pay” investors who will help the company in some way by letting them invest at low valuations. If I had a startup and Steve Jobs wanted to invest in it, I’d give him the stock for $10, just to be able to brag that he was an investor. Unfortunately, it’s impractical (if not illegal) to adjust the valuation of the company up and down for each investor. Startups’ valuations are supposed to rise over time. So if you’re going to sell cheap stock to eminent angels, do it early, when it’s natural for the company to have a low valuation.<br>对于那些能以某种方式帮助公司的投资者，初创企业往往会通过允许他们以低估值投资的方式来 “回报”。要是我有一家初创公司，而史蒂夫・乔布斯有意投资，我甚至愿意以 10 美元的价格给他股份 —— 只为能对外炫耀他是公司的投资者。可惜的是，为每位投资者随意调整公司估值既不现实（甚至可能不合法）。初创企业的估值本应随着时间推移而上升，因此，若想以低价向知名天使投资者出售股份，就应在早期进行 —— 此时公司估值较低是合乎常理的。</p><p>Some angel investors join together in syndicates. Any city where people start startups will have one or more of them. In Boston the biggest is the Common Angels. In the Bay Area it’s the Band of Angels. You can find groups near you through the Angel Capital Association. [3] However, most angel investors don’t belong to these groups. In fact, the more prominent the angel, the less likely they are to belong to a group.<br>部分天使投资者会联合组成 “天使投资联盟”。任何有初创企业活动的城市，通常都至少有一个这样的联盟。在波士顿，规模最大的是 Common Angels；在旧金山湾区，则是 Band of Angels。你可以通过天使资本协会（Angel Capital Association）找到所在地附近的联盟 [3]。但大多数天使投资者并不隶属于这类联盟，事实上，投资者名气越大，加入联盟的可能性就越低。</p><p>Some angel groups charge you money to pitch your idea to them. Needless to say, you should never do this.<br>有些天使投资联盟会向创业者收取费用，才允许其进行项目路演。毋庸置疑，绝对不要参与这类付费路演。</p><p>One of the dangers of taking investment from individual angels, rather than through an angel group or investment firm, is that they have less reputation to protect. A big-name VC firm will not screw you too outrageously, because other founders would avoid them if word got out. With individual angels you don’t have this protection, as we found to our dismay in our own startup. In many startups’ lives there comes a point when you’re at the investors’ mercy—when you’re out of money and the only place to get more is your existing investors. When we got into such a scrape, our investors took advantage of it in a way that a name-brand VC probably wouldn’t have.<br>相较于通过天使联盟或投资机构融资，向个人天使投资者融资存在一个风险：个人投资者需要维护的声誉成本更低。知名风投公司不会过分压榨创业者，因为一旦负面消息传开，其他创始人就会对其敬而远之。但个人天使投资者则没有这种约束 —— 这一点，我们在自己的初创公司经历中深有体会，且倍感沮丧。许多初创企业都会陷入一个境地：资金耗尽，只能向现有投资者寻求更多资金，此时便完全受制于投资者。我们曾遭遇过这样的困境，当时投资者趁机谋取利益，而这种情况在知名风投公司身上大概率不会发生。</p><p>Angels have a corresponding advantage, however: they’re also not bound by all the rules that VC firms are. And so they can, for example, allow founders to cash out partially in a funding round, by selling some of their stock directly to the investors. I think this will become more common; the average founder is eager to do it, and selling, say, half a million dollars worth of stock will not, as VCs fear, cause most founders to be any less committed to the business.<br>不过，天使投资者也有相应的优势：他们不像风投公司那样受诸多规则束缚。例如，他们可以允许创始人在融资轮次中通过直接向投资者出售部分股份来实现 “部分套现”。我认为这种做法会变得越来越普遍 —— 多数创始人都渴望这样做，而且正如风投公司所担忧的那样，出售价值 50 万美元的股份，并不会降低大多数创始人对企业的投入度。</p><p>The same angels who tried to screw us also let us do this, and so on balance I’m grateful rather than angry. (As in families, relations between founders and investors can be complicated.)<br>那些曾试图压榨我们的天使投资者，也允许我们进行部分套现。因此，总体而言，我更多的是感激而非愤怒。（就像家庭关系一样，创始人与投资者之间的关系也可能十分复杂。）</p><p>The best way to find angel investors is through personal introductions. You could try to cold-call angel groups near you, but angels, like VCs, will pay more attention to deals recommended by someone they respect.<br>寻找天使投资者的最佳方式是通过熟人引荐。你或许可以尝试给附近的天使联盟 “冷打电话”，但和风投公司一样，天使投资者对自己信任之人推荐的项目会更加关注。</p><p>Deal terms with angels vary a lot. There are no generally accepted standards. Sometimes angels’ deal terms are as fearsome as VCs’. Other angels, particularly in the earliest stages, will invest based on a two-page agreement.<br>与天使投资者的交易条款差异极大，不存在普遍认可的标准。有时，天使投资者的条款和风投公司一样苛刻；而有些天使投资者（尤其是在投资早期阶段时），仅通过一份两页纸的协议就能完成投资。</p><p>Angels who only invest occasionally may not themselves know what terms they want. They just want to invest in this startup. What kind of anti-dilution protection do they want? Hell if they know. In these situations, the deal terms tend to be random: the angel asks his lawyer to create a vanilla agreement, and the terms end up being whatever the lawyer considers vanilla. Which in practice usually means, whatever existing agreement he finds lying around his firm. (Few legal documents are created from scratch.)<br>那些偶尔进行投资的天使投资者，可能自己都不清楚想要什么样的条款 —— 他们只是单纯想投资这家初创公司。至于想要何种反稀释保护？他们根本一无所知。在这种情况下，交易条款往往很随意：天使投资者会让自己的律师起草一份 “标准协议”，最终条款就是律师眼中的 “标准内容”，而实际上，这通常意味着律师只是从律所里找一份现成的协议模板套用而已（极少有法律文件是从零开始起草的）。</p><p>These heaps o’ boilerplate are a problem for small startups, because they tend to grow into the union of all preceding documents. I know of one startup that got from an angel investor what amounted to a five hundred pound handshake: after deciding to invest, the angel presented them with a 70-page agreement. The startup didn’t have enough money to pay a lawyer even to read it, let alone negotiate the terms, so the deal fell through.<br>这些繁杂的模板协议对小型初创企业来说是个麻烦，因为协议条款往往会叠加之前所有文件的内容，变得越来越冗长。我知道有一家初创公司就遭遇了这种 “沉重的握手”：一位天使投资者在决定投资后，向其出具了一份 70 页的协议。该初创公司根本没钱请律师来审阅这份协议，更别提协商条款了，最终这笔交易不了了之。</p><p>One solution to this problem would be to have the startup’s lawyer produce the agreement, instead of the angel’s. Some angels might balk at this, but others would probably welcome it.<br>解决这一问题的方法之一是：由初创公司的律师而非天使投资者的律师来起草协议。有些天使投资者可能会对此表示反对，但也有不少人或许会乐于接受。</p><p>Inexperienced angels often get cold feet when the time comes to write that big check. In our startup, one of the two angels in the initial round took months to pay us, and only did after repeated nagging from our lawyer, who was also, fortunately, his lawyer.<br>缺乏经验的天使投资者在需要开出大额支票时，往往会临阵退缩。在我们初创公司的首轮融资中，两位天使投资者中有一位拖延了数月才支付投资款，而且还是在我们的律师（幸运的是，这位律师同时也是他的律师）反复催促后才付款的。</p><p>It’s obvious why investors delay. Investing in startups is risky! When a company is only two months old, every day you wait gives you 1.7% more data about their trajectory. But the investor is already being compensated for that risk in the low price of the stock, so it is unfair to delay.<br>投资者拖延付款的原因显而易见：初创企业投资风险极高！当一家公司仅成立两个月时，每多等一天，投资者就能多获得 1.7% 关于公司发展趋势的信息。但投资者已经通过低价认购股份获得了风险补偿，因此拖延付款是不公平的。</p><p>Fair or not, investors do it if you let them. Even VCs do it. And funding delays are a big distraction for founders, who ought to be working on their company, not worrying about investors. What’s a startup to do? With both investors and acquirers, the only leverage you have is competition. If an investor knows you have other investors lined up, he’ll be a lot more eager to close– and not just because he’ll worry about losing the deal, but because if other investors are interested, you must be worth investing in. It’s the same with acquisitions. No one wants to buy you till someone else wants to buy you, and then everyone wants to buy you.<br>无论公平与否，只要你纵容，投资者就会拖延 —— 甚至风投公司也会这么做。而融资拖延会严重分散创始人的精力，他们本应专注于公司运营，而非为投资者的付款问题焦虑。初创企业该如何应对？无论是面对投资者还是收购方，你唯一的筹码就是 “竞争”。如果投资者知道你还有其他备选投资者，他就会更急切地完成交易 —— 这不仅是因为担心失去投资机会，还因为其他投资者的兴趣本身就证明了你公司的投资价值。收购也是如此：在没有其他公司有意收购你之前，没人会想买你；而一旦有公司表现出兴趣，其他公司也会纷纷跟进。</p><p>The key to closing deals is never to stop pursuing alternatives. When an investor says he wants to invest in you, or an acquirer says they want to buy you, don’t believe it till you get the check. Your natural tendency when an investor says yes will be to relax and go back to writing code. Alas, you can’t; you have to keep looking for more investors, if only to get this one to act. [4]<br>完成交易的关键在于：永远不要停止寻找备选方案。当投资者表示愿意投资，或收购方表示愿意收购时，在收到款项之前都不要轻信。当投资者给出肯定答复时，你很自然地会想放松下来，回到代码编写工作中。但遗憾的是，你不能这样做 —— 你必须继续寻找更多投资者，哪怕只是为了促使当前这位投资者采取行动。[4]</p><h2 id="Seed-Funding-Firms"><a href="#Seed-Funding-Firms" class="headerlink" title="Seed Funding Firms"></a>Seed Funding Firms</h2><h2 id="种子投资公司"><a href="#种子投资公司" class="headerlink" title="种子投资公司"></a>种子投资公司</h2><p>Seed firms are like angels in that they invest relatively small amounts at early stages, but like VCs in that they’re companies that do it as a business, rather than individuals making occasional investments on the side.<br>种子投资公司与天使投资者的相似之处在于，它们都在初创企业早期投入相对较少的资金；而与风投公司的相似之处在于，它们是以投资为业务的公司，而非偶尔进行投资的个人。</p><p>Till now, nearly all seed firms have been so-called “incubators,” so Y Combinator gets called one too, though the only thing we have in common is that we invest in the earliest phase.<br>迄今为止，几乎所有种子投资公司都被称为 “孵化器”，因此 Y Combinator（简称 YC，美国知名创业孵化器）也被归为此类 —— 尽管我们与传统孵化器的唯一共同点，只是都在企业最早阶段进行投资。</p><p>According to the National Association of Business Incubators, there are about 800 incubators in the US. This is an astounding number, because I know the founders of a lot of startups, and I can’t think of one that began in an incubator.<br>根据美国国家企业孵化器协会（National Association of Business Incubators）的数据，美国约有 800 家孵化器。这个数字令人震惊，因为我认识很多初创企业的创始人，却想不出有哪一家是从孵化器里起步的。</p><p>What is an incubator? I’m not sure myself. The defining quality seems to be that you work in their space. That’s where the name “incubator” comes from. They seem to vary a great deal in other respects. At one extreme is the sort of pork-barrel project where a town gets money from the state government to renovate a vacant building as a “high-tech incubator,” as if it were merely lack of the right sort of office space that had till now prevented the town from becoming a startup hub. At the other extreme are places like Idealab, which generates ideas for new startups internally and hires people to work for them.<br>什么是孵化器？我自己也没有确切答案。它最显著的特征似乎是 “创业者需在其提供的场地内办公”——“孵化器” 这个名字也正源于此。但在其他方面，不同孵化器的差异极大。其中一个极端是 “政绩工程式孵化器”：某城镇从州政府获得资金，将一栋空置建筑翻新成 “高科技孵化器”，仿佛该城镇未能成为创业中心，仅仅是因为缺少合适的办公空间。另一个极端则是以 Idealab（美国知名创业孵化公司）为代表的模式：内部自主生成新创业项目的想法，并招聘人员来运营这些项目。</p><p>The classic Bubble incubators, most of which now seem to be dead, were like VC firms except that they took a much bigger role in the startups they funded. In addition to working in their space, you were supposed to use their office staff, lawyers, accountants, and so on.<br>互联网泡沫时期的典型孵化器（如今大多已不复存在）与风投公司类似，但它们在所投资的初创企业中扮演的角色要重要得多。除了必须在其场地办公外，创业者还得使用它们提供的行政人员、律师、会计师等资源。</p><p>Whereas incubators tend (or tended) to exert more control than VCs, Y Combinator exerts less. And we think it’s better if startups operate out of their own premises, however crappy, than the offices of their investors. So it’s annoying that we keep getting called an “incubator,” but perhaps inevitable, because there’s only one of us so far and no word yet for what we are. If we have to be called something, the obvious name would be “excubator.” (The name is more excusable if one considers it as meaning that we enable people to escape cubicles.)<br>传统孵化器往往（或曾经）比风投公司更倾向于掌控初创企业，而 Y Combinator 则相反，我们对企业的干预更少。我们认为，初创企业即使在条件简陋的自有场地办公，也比在投资者提供的场地办公更好。因此，我们总被称为 “孵化器” 确实令人困扰，但这或许难以避免 —— 因为目前像我们这样的机构仅此一家，还没有专门的名称来定义我们。如果非要给我们起个名字，“excubator”（“脱离孵化器”，由 “escape” 和 “incubator” 组合而成）会是很贴切的选择。（若将其理解为 “帮助人们逃离格子间”，这个名字就更说得通了。）</p><p>Because seed firms are companies rather than individual people, reaching them is easier than reaching angels. Just go to their web site and send them an email. The importance of personal introductions varies, but is less than with angels or VCs.<br>由于种子投资公司是机构而非个人，与它们建立联系比联系天使投资者更容易：只需访问其官网并发送邮件即可。熟人引荐的重要性因情况而异，但总体而言，低于在联系天使投资者或风投公司时的重要性。</p><p>The fact that seed firms are companies also means the investment process is more standardized. (This is generally true with angel groups too.) Seed firms will probably have set deal terms they use for every startup they fund. The fact that the deal terms are standard doesn’t mean they’re favorable to you, but if other startups have signed the same agreements and things went well for them, it’s a sign the terms are reasonable.<br>种子投资公司作为机构，其投资流程也更标准化（天使联盟通常也是如此）。它们可能会为所有投资的初创企业设定统一的交易条款。条款标准化并不意味着对你有利，但如果其他初创企业签署了相同协议且发展顺利，就说明这些条款是合理的。</p><p>Seed firms differ from angels and VCs in that they invest exclusively in the earliest phases—often when the company is still just an idea. Angels and even VC firms occasionally do this, but they also invest at later stages.<br>种子投资公司与天使投资者、风投公司的区别在于，它们只投资企业的最早阶段 —— 通常是公司还仅有一个想法的时候。天使投资者甚至风投公司偶尔也会投资早期阶段，但它们同时也会参与后期融资。</p><p>The problems are different in the early stages. For example, in the first couple months a startup may completely redefine their idea. So seed investors usually care less about the idea than the people. This is true of all venture funding, but especially so in the seed stage.<br>初创企业早期面临的问题独具特殊性。例如，在成立后的最初几个月里，初创企业可能会彻底重新定义其核心业务理念。因此，种子投资者通常更看重团队而非想法。虽然所有风险投资都在一定程度上重视团队，但在种子阶段，这一点尤为突出。</p><p>Like VCs, one of the advantages of seed firms is the advice they offer. But because seed firms operate in an earlier phase, they need to offer different kinds of advice. For example, a seed firm should be able to give advice about how to approach VCs, which VCs obviously don’t need to do; whereas VCs should be able to give advice about how to hire an “executive team,” which is not an issue in the seed stage.<br>与风投公司一样，种子投资公司的优势之一是能为创业者提供建议。但由于种子投资公司聚焦于更早阶段，它们需要提供不同类型的建议。例如，种子投资公司应能指导创业者如何与风投公司对接（这显然不是风投公司需要提供的建议）；而风投公司则应能指导企业如何组建 “高管团队”（这在种子阶段尚不是重点问题）。</p><p>In the earliest phases, a lot of the problems are technical, so seed firms should be able to help with technical as well as business problems.<br>在初创企业的最早阶段，许多问题都与技术相关，因此种子投资公司不仅应能提供商业层面的帮助，还需具备解决技术问题的能力。</p><p>Seed firms and angel investors generally want to invest in the initial phases of a startup, then hand them off to VC firms for the next round. Occasionally startups go from seed funding direct to acquisition, however, and I expect this to become increasingly common.<br>种子投资公司和天使投资者通常倾向于在初创企业的初始阶段投资，之后将其 “移交” 给风投公司进行下一轮融资。不过，也有初创企业在获得种子轮融资后直接被收购，我预计这种情况会变得越来越普遍。</p><p>Google has been aggressively pursuing this route, and now Yahoo is too. Both now compete directly with VCs. And this is a smart move. Why wait for further funding rounds to jack up a startup’s price? When a startup reaches the point where VCs have enough information to invest in it, the acquirer should have enough information to buy it. More information, in fact; with their technical depth, the acquirers should be better at picking winners than VCs.<br>谷歌一直积极采用这种 “直接收购种子轮企业” 的策略，如今雅虎也开始效仿。这两家公司现在都与风投公司形成了直接竞争，而这无疑是明智之举。为何要等到企业经过多轮融资、估值上涨后再收购呢？当一家初创企业发展到风投公司认为 “信息足够、可进行投资” 的阶段时，收购方掌握的信息也已足够支撑其做出收购决策 —— 实际上，收购方掌握的信息可能更多。凭借深厚的技术底蕴，收购方在筛选有潜力的企业方面，理应比风投公司更具优势。</p><h2 id="Venture-Capital-Funds"><a href="#Venture-Capital-Funds" class="headerlink" title="Venture Capital Funds"></a>Venture Capital Funds</h2><h2 id="风险投资基金"><a href="#风险投资基金" class="headerlink" title="风险投资基金"></a>风险投资基金</h2><p>VC firms are like seed firms in that they’re actual companies, but they invest other people’s money, and much larger amounts of it. VC investments average several million dollars. So they tend to come later in the life of a startup, are harder to get, and come with tougher terms.<br>风投公司与种子投资公司的相似之处在于，二者均为正规机构；但不同的是，风投公司使用他人资金进行投资，且投资规模远大于种子投资 —— 风投单次投资金额通常平均达数百万美元。因此，风投融资往往出现在初创企业发展的后期阶段，不仅更难获取，附带的条款也更为苛刻。</p><p>The word “venture capitalist” is sometimes used loosely for any venture investor, but there is a sharp difference between VCs and other investors: VC firms are organized as funds, much like hedge funds or mutual funds. The fund managers, who are called “general partners,” get about 2% of the fund annually as a management fee, plus about 20% of the fund’s gains.<br>“风险投资家” 一词有时会被宽泛地用于指代所有风险投资者，但风投公司与其他投资者存在显著区别：风投公司以基金形式运作，与对冲基金或共同基金的组织模式类似。基金管理者被称为 “普通合伙人”（general partners），他们每年会收取基金规模约 2% 的管理费，并获得基金收益约 20% 的分成。</p><p>There is a very sharp dropoff in performance among VC firms, because in the VC business both success and failure are self-perpetuating. When an investment scores spectacularly, as Google did for Kleiner and Sequoia, it generates a lot of good publicity for the VCs. And many founders prefer to take money from successful VC firms, because of the legitimacy it confers. Hence a vicious (for the losers) cycle: VC firms that have been doing badly will only get the deals the bigger fish have rejected, causing them to continue to do badly.<br>风投公司之间的业绩差距极大，因为在风投行业，成功与失败都具有 “自我延续性”。当一项投资取得辉煌成果（例如谷歌为凯鹏华盈和红杉资本带来的回报）时，会为相关风投公司带来大量正面曝光。而许多创始人更愿意接受成功风投公司的投资，因为这能为企业带来 “合法性背书”。由此形成了一个对业绩不佳者不利的恶性循环：表现糟糕的风投公司只能拿到头部公司拒绝的项目，进而导致业绩持续低迷。</p><p>As a result, of the thousand or so VC funds in the US now, only about 50 are likely to make money, and it is very hard for a new fund to break into this group.<br>因此，在如今美国约 1000 家风投基金中，仅有约 50 家可能实现盈利，新基金要跻身这一行列更是难上加难。</p><p>In a sense, the lower-tier VC firms are a bargain for founders. They may not be quite as smart or as well connected as the big-name firms, but they are much hungrier for deals. This means you should be able to get better terms from them.<br>从某种意义上说，对创始人而言，二线风投公司可能是更划算的选择。虽然它们可能不如知名风投公司那般睿智、人脉资源那般广泛，但对投资机会的渴望更为强烈。这意味着你有机会从它们那里获得更优厚的交易条款。</p><p>Better how? The most obvious is valuation: they’ll take less of your company. But as well as money, there’s power. I think founders will increasingly be able to stay on as CEO, and on terms that will make it fairly hard to fire them later.<br>“更优厚” 体现在哪些方面？最明显的是估值 —— 它们会要求持有更少的公司股份。此外，除了资金，还涉及 “控制权” 问题。我认为，创始人将越来越有可能继续担任 CEO，且条款设置会让后续解雇他们变得相当困难。</p><p>The most dramatic change, I predict, is that VCs will allow founders to cash out partially by selling some of their stock direct to the VC firm. VCs have traditionally resisted letting founders get anything before the ultimate “liquidity event.” But they’re also desperate for deals. And since I know from my own experience that the rule against buying stock from founders is a stupid one, this is a natural place for things to give as venture funding becomes more and more a seller’s market.<br>我预测，最显著的变化将是：风投公司会允许创始人通过直接向其出售部分股份来实现 “部分套现”。传统上，风投公司坚决反对创始人在最终 “流动性事件”（如上市、被收购）前获得任何收益。但如今，它们也迫切需要优质投资项目。根据我的亲身经历，“禁止从创始人手中购买股份” 这一规则本身就不合理，因此随着风险融资市场逐渐转向 “卖方市场”，这一规则自然会被打破。</p><p>The disadvantage of taking money from less known firms is that people will assume, correctly or not, that you were turned down by the more exalted ones. But, like where you went to college, the name of your VC stops mattering once you have some performance to measure. So the more confident you are, the less you need a brand-name VC. We funded Viaweb entirely with angel money; it never occurred to us that the backing of a well known VC firm would make us seem more impressive. [5]<br>接受不知名风投公司投资的劣势在于，无论事实如何，人们都会默认你是被知名风投拒绝后才选择它们的。但就像 “你毕业于哪所大学” 一样，一旦你的企业有了可衡量的业绩，风投公司的名气就不再重要了。因此，你对企业的信心越足，就越不需要依赖知名风投的背书。我们创办的 Viaweb 完全依靠天使投资融资，当时从未想过，获得知名风投支持能让我们 “更有面子”。[5]</p><p>Another danger of less known firms is that, like angels, they have less reputation to protect. I suspect it’s the lower-tier firms that are responsible for most of the tricks that have given VCs such a bad reputation among hackers. They are doubly hosed: the general partners themselves are less able, and yet they have harder problems to solve, because the top VCs skim off all the best deals, leaving the lower-tier firms exactly the startups that are likely to blow up.<br>不知名风投公司的另一个风险是：与天使投资者类似，它们需要维护的声誉成本更低。我怀疑，正是这些二线风投公司的种种不当手段，让风投行业在技术创业者（黑客）群体中留下了坏名声。它们陷入了双重困境：一方面，普通合伙人的能力相对较弱；另一方面，它们面临的挑战更为艰巨 —— 因为头部风投公司已经抢走了所有优质项目，留给二线公司的往往是那些风险极高、容易失败的初创企业。</p><p>For example, lower-tier firms are much more likely to pretend to want to do a deal with you just to lock you up while they decide if they really want to. One experienced CFO said:<br>The better ones usually will not give a term sheet unless they really want to do a deal. The second or third tier firms have a much higher break rate—it could be as high as 50%.<br>例如，二线风投公司更有可能假意与你达成投资意向，目的是 “锁定” 你，以便它们有时间考虑是否真的要投资。一位经验丰富的首席财务官（CFO）表示：<br>“头部风投公司通常只有在真心想投资时才会出具投资条款清单；而二线或三线风投公司的‘毁约率’要高得多，可能高达 50%。”</p><p>It’s obvious why: the lower-tier firms’ biggest fear, when chance throws them a bone, is that one of the big dogs will notice and take it away. The big dogs don’t have to worry about that.<br>原因显而易见：当二线风投公司偶然获得一个优质项目时，它们最担心的是头部公司会注意到这个项目并将其抢走；而头部公司则完全无需担心这一点。</p><p>Falling victim to this trick could really hurt you. As one VC told me:<br>If you were talking to four VCs, told three of them that you accepted a term sheet, and then have to call them back to tell them you were just kidding, you are absolutely damaged goods.<br>沦为这种伎俩的受害者，会对你的企业造成严重伤害。正如一位风投人士所说：<br>“如果你同时与四家风投公司沟通，告诉其中三家你已接受了某家的投资条款清单，之后却不得不回电告知他们‘只是玩笑’，那么你的企业在风投眼中就会彻底沦为‘劣质标的’。”</p><p>Here’s a partial solution: when a VC offers you a term sheet, ask how many of their last 10 term sheets turned into deals. This will at least force them to lie outright if they want to mislead you.<br>有一个部分有效的应对方法：当风投公司向你出具投资条款清单时，询问他们 “过去 10 份条款清单中有多少最终达成了交易”。这样一来，即便他们想误导你，也至少需要公然撒谎才能做到。</p><p>Not all the people who work at VC firms are partners. Most firms also have a handful of junior employees called something like associates or analysts. If you get a call from a VC firm, go to their web site and check whether the person you talked to is a partner. Odds are it will be a junior person; they scour the web looking for startups their bosses could invest in. The junior people will tend to seem very positive about your company. They’re not pretending; they want to believe you’re a hot prospect, because it would be a huge coup for them if their firm invested in a company they discovered. Don’t be misled by this optimism. It’s the partners who decide, and they view things with a colder eye.<br>并非所有在风投公司工作的人都是合伙人。大多数风投公司还会有一些初级员工，头衔可能是 “投资经理”（associates）或 “分析师”（analysts）。如果你接到风投公司的电话，不妨访问其官网，确认与你沟通的人是否为合伙人。大概率情况下，与你对接的会是初级员工 —— 他们负责在网络上搜寻潜在项目，供老板参考投资。这些初级员工往往会对你的公司表现出极高的热情，这并非伪装：他们真心希望你的公司是 “热门标的”，因为如果自己发掘的项目能被公司投资，对他们而言将是极大的业绩突破。但不要被这种乐观情绪误导，最终的投资决策权掌握在合伙人手中，而他们看待项目的眼光会冷静得多。</p><p>Because VCs invest large amounts, the money comes with more restrictions. Most only come into effect if the company gets into trouble. For example, VCs generally write it into the deal that in any sale, they get their investment back first. So if the company gets sold at a low price, the founders could get nothing. Some VCs now require that in any sale they get 4x their investment back before the common stock holders (that is, you) get anything, but this is an abuse that should be resisted.<br>由于风投公司的投资金额巨大，其提供的资金会附带更多限制条款，且多数条款仅在公司陷入困境时才生效。例如，风投公司通常会在协议中规定：若公司被出售，他们有权优先收回全部投资。因此，如果公司以低价出售，创始人可能分不到任何收益。如今，部分风投公司甚至要求：在普通股股东（即创始人）获得任何收益前，他们必须先收回 4 倍于初始投资的回报 —— 这种不合理的条款应当被抵制。</p><p>Another difference with large investments is that the founders are usually required to accept “vesting”—to surrender their stock and earn it back over the next 4-5 years. VCs don’t want to invest millions in a company the founders could just walk away from. Financially, vesting has little effect, but in some situations it could mean founders will have less power. If VCs got de facto control of the company and fired one of the founders, he’d lose any unvested stock unless there was specific protection against this. So vesting would in that situation force founders to toe the line.<br>大规模投资的另一个不同之处在于，创始人通常需要接受 “股权兑现”（vesting）条款 —— 即暂时交出全部股份，并在未来 4-5 年内通过工作逐步 “赚回” 这些股份。风投公司不希望将数百万美元投资于一家创始人可能随时抽身离开的企业。从财务角度看，股权兑现条款影响不大，但在某些情况下，它可能导致创始人的控制权被削弱。如果风投公司获得了公司的实际控制权并解雇某位创始人，除非有专门的条款保护，否则该创始人将失去所有未兑现的股份。因此，在这种情况下，股权兑现条款会迫使创始人 “服从管理”。</p><p>The most noticeable change when a startup takes serious funding is that the founders will no longer have complete control. Ten years ago VCs used to insist that founders step down as CEO and hand the job over to a business guy they supplied. This is less the rule now, partly because the disasters of the Bubble showed that generic business guys don’t make such great CEOs.<br>初创企业获得大规模风投后，最显著的变化是创始人不再拥有完全控制权。十年前，风投公司通常会坚持要求创始人辞去 CEO 职务，并由他们推荐的 “职业经理人” 接任。如今，这种情况已不再是常态，部分原因是互联网泡沫时期的惨痛教训表明，泛泛的职业经理人未必能胜任初创企业的 CEO 一职。</p><p>But while founders will increasingly be able to stay on as CEO, they’ll have to cede some power, because the board of directors will become more powerful. In the seed stage, the board is generally a formality; if you want to talk to the other board members, you just yell into the next room. This stops with VC-scale money. In a typical VC funding deal, the board of directors might be composed of two VCs, two founders, and one outside person acceptable to both. The board will have ultimate power, which means the founders now have to convince instead of commanding.<br>不过，尽管创始人越来越有可能继续担任 CEO，他们仍需让出部分权力，因为董事会的话语权会显著增强。在种子轮阶段，董事会通常只是 “形式上的存在”—— 如果你想与其他董事沟通，可能只需 “朝隔壁房间喊一声”。但当风投资金注入后，情况就完全不同了。在典型的风投融资协议中，董事会可能由两名风投代表、两名创始人以及一名双方都认可的外部人士组成。董事会拥有最终决策权，这意味着创始人如今必须通过 “说服” 而非 “命令” 来推动决策。</p><p>This is not as bad as it sounds, however. Bill Gates is in the same position; he doesn’t have majority control of Microsoft; in principle he also has to convince instead of commanding. And yet he seems pretty commanding, doesn’t he? As long as things are going smoothly, boards don’t interfere much. The danger comes when there’s a bump in the road, as happened to Steve Jobs at Apple.<br>然而，这并非听起来那么糟糕。比尔・盖茨就处于类似境地 —— 他并不拥有微软的多数控制权，理论上也必须通过说服而非命令来推动事务。但他似乎仍拥有极强的掌控力，不是吗？只要公司运营顺利，董事会通常不会过多干预。风险往往出现在公司发展遇挫时，就像史蒂夫・乔布斯曾在苹果遭遇的情况那样。</p><p>Like angels, VCs prefer to invest in deals that come to them through people they know. So while nearly all VC funds have some address you can send your business plan to, VCs privately admit the chance of getting funding by this route is near zero. One recently told me that he did not know a single startup that got funded this way.<br>与天使投资者类似，风投公司更倾向于投资 “经熟人引荐” 的项目。因此，尽管几乎所有风投基金都提供了可接收商业计划书的地址，但风投人士私下承认，通过这种 “主动投递” 方式获得融资的概率几乎为零。最近有一位风投人士告诉我，他从未见过有任何初创企业通过这种方式成功融资。</p><p>I suspect VCs accept business plans “over the transom” more as a way to keep tabs on industry trends than as a source of deals. In fact, I would strongly advise against mailing your business plan randomly to VCs, because they treat this as evidence of laziness. Do the extra work of getting personal introductions. As one VC put it:<br>I’m not hard to find. I know a lot of people. If you can’t find some way to reach me, how are you going to create a successful company?<br>我怀疑，风投公司接收 “主动投递” 的商业计划书，更多是为了跟踪行业趋势，而非将其作为寻找投资项目的渠道。事实上，我强烈建议不要随意向风投公司邮寄商业计划书 —— 因为这会被他们视为 “懒惰” 的证明。你应当多花功夫争取熟人引荐。正如一位风投人士所言：<br>“找到我并不难，我的人脉很广。如果你连联系我的办法都找不到，又怎么能打造一家成功的公司呢？”</p><p>One of the most difficult problems for startup founders is deciding when to approach VCs. You really only get one chance, because they rely heavily on first impressions. And you can’t approach some and save others for later, because (a) they ask who else you’ve talked to and when and (b) they talk among themselves. If you’re talking to one VC and he finds out that you were rejected by another several months ago, you’ll definitely seem shopworn.<br>对初创企业创始人而言，最棘手的问题之一是 “何时接触风投公司”。你实际上只有一次机会 —— 因为风投公司非常看重第一印象。而且你不能 “分批接触” 风投（先找一部分，把另一部分留到以后），原因有二：（1）风投会询问你 “还和哪些风投谈过、谈过多久”；（2）风投之间会相互沟通。如果你正在和某家风投接触，而对方得知你几个月前曾被另一家拒绝，那么你的企业在他们眼中必然会显得 “缺乏吸引力”。</p><p>So when do you approach VCs? When you can convince them. If the founders have impressive resumes and the idea isn’t hard to understand, you could approach VCs quite early. Whereas if the founders are unknown and the idea is very novel, you might have to launch the thing and show that users loved it before VCs would be convinced.<br>那么，到底该何时接触风投？答案是：当你有能力说服他们的时候。如果创始人履历亮眼，且项目理念易于理解，你可以较早地接触风投；但如果创始人名气不大，且项目理念非常新颖，你可能需要先推出产品，用 “用户喜爱” 的实际数据来打动风投。</p><p>If several VCs are interested in you, they will sometimes be willing to split the deal between them. They’re more likely to do this if they’re close in the VC pecking order. Such deals may be a net win for founders, because you get multiple VCs interested in your success, and you can ask each for advice about the other. One founder I know wrote:<br>Two-firm deals are great. It costs you a little more equity, but being able to play the two firms off each other (as well as ask one if the other is being out of line) is invaluable.<br>如果多家风投都对你的项目感兴趣，它们有时会愿意 “拆分投资份额”（共同投资）。当这些风投在行业内的层级相近时，这种情况更有可能发生。对创始人而言，这类联合投资往往是 “净收益”—— 因为你能获得多家风投对企业成功的关注，还可以就其中一家的情况向另一家咨询建议。我认识的一位创始人曾写道：<br>“两家风投联合投资太棒了。虽然你可能要多出让一点股份，但能让两家互相牵制（还能咨询其中一家‘另一家是否越界’），这种价值是无法估量的。”</p><p>When you do negotiate with VCs, remember that they’ve done this a lot more than you have. They’ve invested in dozens of startups, whereas this is probably the first you’ve founded. But don’t let them or the situation intimidate you. The average founder is smarter than the average VC. So just do what you’d do in any complex, unfamiliar situation: proceed deliberately, and question anything that seems odd.<br>当你与风投谈判时，要记住：他们做这种事的经验远比你丰富 —— 他们可能投资过数十家初创企业，而这或许是你第一次创办公司。但不要被他们或当下的局面吓倒：普通创始人的智慧通常优于普通风投人士。因此，你只需像面对任何复杂、陌生的情况时那样做：谨慎推进，对任何看似不合理的条款提出质疑。</p><p>It is, unfortunately, common for VCs to put terms in an agreement whose consequences surprise founders later, and also common for VCs to defend things they do by saying that they’re standard in the industry. Standard, schmandard; the whole industry is only a few decades old, and rapidly evolving. The concept of “standard” is a useful one when you’re operating on a small scale (Y Combinator uses identical terms for every deal because for tiny seed-stage investments it’s not worth the overhead of negotiating individual deals), but it doesn’t apply at the VC level. On that scale, every negotiation is unique.<br>遗憾的是，风投在协议中加入 “事后会让创始人感到意外的条款” 是常见现象；而风投用 “这是行业标准” 来为自己的行为辩护，也同样常见。但所谓 “标准”，根本算不上真正的标准：整个风投行业只有几十年历史，且仍在快速发展。“标准条款” 的概念只在小规模交易中有用（例如 Y Combinator 对所有交易都使用相同条款，因为对小额种子投资而言，为单个交易谈判的成本过高），但在风投层面完全不适用 —— 在这个层级，每一次谈判都是独一无二的。</p><p>Most successful startups get money from more than one of the preceding five sources. [6] And, confusingly, the names of funding sources also tend to be used as the names of different rounds. The best way to explain how it all works is to follow the case of a hypothetical startup.<br>大多数成功的初创企业都会从上述五大融资渠道中的至少两个获取资金 [6]。而且，令人困惑的是，融资渠道的名称往往也被用作不同融资轮次的名称。要解释清楚这一切是如何运作的，最佳方式是通过一个假设的初创企业案例来展开。</p><h2 id="Stage-1-Seed-Round"><a href="#Stage-1-Seed-Round" class="headerlink" title="Stage 1: Seed Round"></a>Stage 1: Seed Round</h2><h2 id="第一阶段：种子轮融资"><a href="#第一阶段：种子轮融资" class="headerlink" title="第一阶段：种子轮融资"></a>第一阶段：种子轮融资</h2><p>Our startup begins when a group of three friends have an idea– either an idea for something they might build, or simply the idea “let’s start a company.” Presumably they already have some source of food and shelter. But if you have food and shelter, you probably also have something you’re supposed to be working on: either classwork, or a job. So if you want to work full-time on a startup, your money situation will probably change too.<br>我们假设的这家初创企业，始于三位朋友产生的一个想法 —— 可能是 “想开发某样产品” 的具体想法，也可能只是 “我们开家公司吧” 的模糊念头。想必他们此时已有基本的衣食住行保障，但有了这些保障，通常也意味着他们正有该做的事：要么是学业，要么是工作。因此，若想全职投入初创企业，他们的经济状况很可能会发生变化。</p><p>A lot of startup founders say they started the company without any idea of what they planned to do. This is actually less common than it seems: many have to claim they thought of the idea after quitting because otherwise their former employer would own it.<br>很多初创企业创始人会说，自己创办公司时根本不知道要做什么。但实际上，这种情况比表面看起来少见：许多人之所以这么说，是因为他们必须声称 “想法是辞职后才有的”—— 否则，他们的前雇主可能会拥有该想法的所有权。</p><p>The three friends decide to take the leap. Since most startups are in competitive businesses, you not only want to work full-time on them, but more than full-time. So some or all of the friends quit their jobs or leave school. (Some of the founders in a startup can stay in grad school, but at least one has to make the company his full-time job.)<br>这三位朋友决定放手一搏。由于大多数初创企业所处的行业竞争激烈，你不仅需要全职投入，甚至需要超全职投入。因此，他们中的部分人或全部人会辞职或退学。（初创企业的创始人中，有些人可以继续读研究生，但至少要有一人将公司作为全职工作。）</p><p>They’re going to run the company out of one of their apartments at first, and since they don’t have any users they don’t have to pay much for infrastructure. Their main expenses are setting up the company, which costs a couple thousand dollars in legal work and registration fees, and the living expenses of the founders.<br>起初，他们会在其中一人的公寓里运营公司。由于还没有用户，他们在基础设施上的开销很小。主要支出包括两部分：一是公司注册相关费用（法律咨询和注册费约几千美元），二是创始人的生活开支。</p><p>The phrase “seed investment” covers a broad range. To some VC firms it means $500,000, but to most startups it means several months’ living expenses. We’ll suppose our group of friends start with $15,000 from their friend’s rich uncle, who they give 5% of the company in return. There’s only common stock at this stage. They leave 20% as an options pool for later employees (but they set things up so that they can issue this stock to themselves if they get bought early and most is still unissued), and the three founders each get 25%.<br>“种子投资” 的范围很广：对某些风投公司而言，种子投资意味着 50 万美元；但对大多数初创企业来说，种子投资只是 “能覆盖几个月生活开支” 的资金。我们假设这三位朋友的启动资金是 1.5 万美元，来自他们一位朋友的富有的叔叔，作为回报，他们向这位叔叔出让了公司 5% 的股份。此阶段公司仅发行普通股：他们预留了 20% 的股份作为 “员工期权池”（供未来招聘员工使用，但同时也设置了条款 —— 若公司早期被收购，而期权池大部分股份仍未发行，他们可以将这些股份分配给自己），剩余 75% 的股份由三位创始人平分，每人各持 25%。</p><p>By living really cheaply they think they can make the remaining money last five months. When you have five months’ runway left, how soon do you need to start looking for your next round? Answer: immediately. It takes time to find investors, and time (always more than you expect) for the deal to close even after they say yes. So if our group of founders know what they’re doing they’ll start sniffing around for angel investors right away. But of course their main job is to build version 1 of their software.<br>他们认为，通过极度节俭的生活方式，这笔钱能支撑五个月。当你的 “资金跑道”（现金流可维持的时间）还剩五个月时，该何时开始寻找下一轮融资？答案是：立即开始。寻找投资者需要时间，即便投资者同意投资，完成交易也需要时间（且往往比你预期的更长）。因此，若这几位创始人懂行，他们会立刻开始物色天使投资者 —— 但当然，他们的核心任务仍是开发软件的第一个版本。</p><p>The friends might have liked to have more money in this first phase, but being slightly underfunded teaches them an important lesson. For a startup, cheapness is power. The lower your costs, the more options you have—not just at this stage, but at every point till you’re profitable. When you have a high “burn rate,” you’re always under time pressure, which means (a) you don’t have time for your ideas to evolve, and (b) you’re often forced to take deals you don’t like.<br>或许这几位朋友希望在第一阶段能有更多资金，但 “略有资金不足” 的状况却给他们上了重要一课：对初创企业而言，“节俭就是力量”。成本越低，你拥有的选择就越多 —— 不仅在当前阶段如此，在企业实现盈利前的每一个阶段都是如此。如果你的 “资金消耗率”（每月烧钱金额）很高，就会始终面临时间压力，这意味着：（1）你没有时间让产品理念逐步迭代完善；（2）你常常被迫接受自己不喜欢的交易条款。</p><p>Every startup’s rule should be: spend little, and work fast.<br>所有初创企业都应遵循一条准则：少花钱，快干活。</p><p>After ten weeks’ work the three friends have built a prototype that gives one a taste of what their product will do. It’s not what they originally set out to do—in the process of writing it, they had some new ideas. And it only does a fraction of what the finished product will do, but that fraction includes stuff that no one else has done before.<br>经过十周的工作，这三位朋友开发出了一个产品原型，足以让人初步了解他们产品的功能。这个原型并非他们最初计划的样子 —— 在开发过程中，他们产生了新的想法。而且，原型仅实现了最终产品功能的一小部分，但这一小部分中包含了 “他人从未实现过” 的创新点。</p><p>They’ve also written at least a skeleton business plan, addressing the five fundamental questions: what they’re going to do, why users need it, how large the market is, how they’ll make money, and who the competitors are and why this company is going to beat them. (That last has to be more specific than “they suck” or “we’ll work really hard.”)<br>他们还撰写了一份至少是框架性的商业计划书，回答了五个核心问题：（1）公司要做什么；（2）用户为何需要这款产品；（3）市场规模有多大；（4）公司将如何盈利；（5）竞争对手是谁，以及本公司为何能击败他们。（关于最后一点，答案必须具体 —— 不能只说 “对手很烂” 或 “我们会努力工作”。）</p><p>If you have to choose between spending time on the demo or the business plan, spend most on the demo. Software is not only more convincing, but a better way to explore ideas.<br>如果必须在 “打磨产品演示原型” 和 “完善商业计划书” 之间分配时间，应将大部分时间投入到原型上。软件原型不仅更有说服力，也是探索产品理念的更佳方式。</p><h2 id="Stage-2-Angel-Round"><a href="#Stage-2-Angel-Round" class="headerlink" title="Stage 2: Angel Round"></a>Stage 2: Angel Round</h2><h2 id="第二段：天使轮融资"><a href="#第二段：天使轮融资" class="headerlink" title="第二段：天使轮融资"></a>第二段：天使轮融资</h2><p>While writing the prototype, the group has been traversing their network of friends in search of angel investors. They find some just as the prototype is demoable. When they demo it, one of the angels is willing to invest. Now the group is looking for more money: they want enough to last for a year, and maybe to hire a couple friends. So they’re going to raise $200,000.</p><p>在开发原型的过程中，团队一直在梳理自己的人脉网络，寻找天使投资人。就在原型可以进行演示时，他们找到了几位潜在投资人。演示结束后，其中一位天使投资人表示愿意投资。此时团队希望筹集更多资金：他们需要足够支撑公司运营一年的资金，或许还能借此聘请两三位朋友。因此，他们计划筹集 20 万美元。</p><p>The angel agrees to invest at a pre-money valuation of $1 million. The company issues $200,000 worth of new shares to the angel; if there were 1000 shares before the deal, this means 200 additional shares. The angel now owns 200&#x2F;1200 shares, or a sixth of the company, and all the previous shareholders’ percentage ownership is diluted by a sixth. After the deal, the capitalization table looks like this:</p><p>该天使投资人同意以 100 万美元的投前估值进行投资。公司将向其发行价值 20 万美元的新股；假设交易前公司总股本为 1000 股，那么此次需新增 200 股。至此，该天使投资人持有 200&#x2F;1200 的股份，即公司 1&#x2F;6 的股权，而所有原有股东的持股比例均被稀释了 1&#x2F;6。交易完成后，公司的股权结构表如下：</p><p>shareholder shares percent</p><hr><p>angel 200 16.7<br>uncle 50 4.2<br>each founder 250 20.8<br>option pool 200 16.7</p><hr><p>total 1200 100</p><table><thead><tr><th>股东</th><th>持股数量</th><th>持股比例（%）</th></tr></thead><tbody><tr><td>天使投资人</td><td>200</td><td>16.7</td></tr><tr><td>富有的叔叔</td><td>50</td><td>4.2</td></tr><tr><td>每位创始人</td><td>250</td><td>20.8</td></tr><tr><td>期权池</td><td>200</td><td>16.7</td></tr><tr><td>合计</td><td>1200</td><td>100</td></tr></tbody></table><p>To keep things simple, I had the angel do a straight cash for stock deal. In reality the angel might be more likely to make the investment in the form of a convertible loan. A convertible loan is a loan that can be converted into stock later; it works out the same as a stock purchase in the end, but gives the angel more protection against being squashed by VCs in future rounds.</p><p>为简化说明，我假设这位天使投资人采用了直接的 “现金换股权” 模式。但在实际情况中，天使投资人更可能以可转换贷款的形式进行投资。可转换贷款是一种可在未来转换为股权的贷款，最终结果虽与直接购买股权一致，但能为天使投资人提供更多保护，避免其在后续融资轮次中被风险投资机构（VC）“挤压” 权益。</p><p>Who pays the legal bills for this deal? The startup, remember, only has a couple thousand left. In practice this turns out to be a sticky problem that usually gets solved in some improvised way. Maybe the startup can find lawyers who will do it cheaply in the hope of future work if the startup succeeds. Maybe someone has a lawyer friend. Maybe the angel pays for his lawyer to represent both sides. (Make sure if you take the latter route that the lawyer is representing you rather than merely advising you, or his only duty is to the investor.)</p><p>这笔交易的法律费用由谁承担？要知道，初创公司此时可能只剩几千美元资金了。实际上，这是一个颇为棘手的问题，通常需要通过临时变通的方式解决。比如，初创公司可能会找到愿意低价承接业务的律师 —— 这些律师希望若公司未来成功，能获得更多合作机会；也可能团队中有人认识律师朋友；还有可能由天使投资人出资聘请自己的律师，同时代表双方处理事务。（若选择最后一种方式，务必确认该律师是在为你提供代理服务，而非仅提供咨询，否则他的法定义务可能仅对投资人负责。）</p><p>An angel investing $200k would probably expect a seat on the board of directors. He might also want preferred stock, meaning a special class of stock that has some additional rights over the common stock everyone else has. Typically these rights include vetoes over major strategic decisions, protection against being diluted in future rounds, and the right to get one’s investment back first if the company is sold.</p><p>投资 20 万美元的天使投资人，通常会要求获得一个董事会席位。他还可能希望获得优先股 —— 即一种特殊类别的股票，相比其他股东持有的普通股，拥有额外权利。这类权利通常包括：对重大战略决策的否决权、后续融资轮次中的防稀释保护，以及公司被出售时优先收回投资本金的权利。</p><p>Some investors might expect the founders to accept vesting for a sum this size, and others wouldn’t. VCs are more likely to require vesting than angels. At Viaweb we managed to raise $2.5 million from angels without ever accepting vesting, largely because we were so inexperienced that we were appalled at the idea. In practice this turned out to be good, because it made us harder to push around.</p><p>对于 20 万美元这样规模的投资，部分投资人可能会要求创始人接受股权兑现条款（vesting），但也有投资人不会提出此类要求。相比天使投资人，风险投资机构（VC）更倾向于强制要求股权兑现。在 Viaweb（注：一家早期互联网公司），我们曾从天使投资人那里筹集到 250 万美元，且未接受任何股权兑现条款 —— 这在很大程度上是因为当时我们经验不足，对股权兑现的概念感到震惊。但事后证明，这是一件好事，因为这让我们在后续合作中更难被随意摆布。</p><p>Our experience was unusual; vesting is the norm for amounts that size. Y Combinator doesn’t require vesting, because (a) we invest such small amounts, and (b) we think it’s unnecessary, and that the hope of getting rich is enough motivation to keep founders at work. But maybe if we were investing millions we would think differently.</p><p>我们的经历其实并不常见；对于这个规模的投资，股权兑现才是行业常态。Y Combinator（注：知名创业孵化器）不要求创始人接受股权兑现，原因有二：（1）我们的投资金额相对较小；（2）我们认为股权兑现并非必要，创始人对财富的渴望本身就足以激励他们专注工作。但如果我们的投资规模达到数百万美元，或许想法会有所不同。</p><p>I should add that vesting is also a way for founders to protect themselves against one another. It solves the problem of what to do if one of the founders quits. So some founders impose it on themselves when they start the company.</p><p>我还需补充一点：股权兑现也是创始人之间相互保护的一种机制。它能解决 “若某位创始人中途退出，该如何处理其股权” 的问题。因此，有些创始人在公司成立之初就会主动给自己设定股权兑现条款。</p><p>The angel deal takes two weeks to close, so we are now three months into the life of the company.</p><p>这笔天使轮交易耗时两周完成，此时公司已成立三个月。</p><p>The point after you get the first big chunk of angel money will usually be the happiest phase in a startup’s life. It’s a lot like being a postdoc: you have no immediate financial worries, and few responsibilities. You get to work on juicy kinds of work, like designing software. You don’t have to spend time on bureaucratic stuff, because you haven’t hired any bureaucrats yet. Enjoy it while it lasts, and get as much done as you can, because you will never again be so productive.</p><p>获得第一笔大额天使投资后，通常是初创公司生命周期中最快乐的阶段。这很像做博士后研究：没有迫在眉睫的财务压力，承担的责任也较少。你可以专注于那些有价值的核心工作，比如软件设计。而且，由于尚未聘请行政人员，你无需在繁琐的行政事务上花费时间。好好享受这段时光，尽可能多完成工作 —— 因为你再也不会有如此高的工作效率了。</p><p>With an apparently inexhaustible sum of money sitting safely in the bank, the founders happily set to work turning their prototype into something they can release. They hire one of their friends—at first just as a consultant, so they can try him out—and then a month later as employee #1. They pay him the smallest salary he can live on, plus 3% of the company in restricted stock, vesting over four years. (So after this the option pool is down to 13.7%). [7] They also spend a little money on a freelance graphic designer.</p><p>看着银行账户里这笔看似 “用之不竭” 的资金，创始人们兴致勃勃地投入工作，将原型打磨成可正式发布的产品。他们聘请了一位朋友：起初先以顾问身份合作，以便考察其能力；一个月后，正式聘请他为公司的第一名员工。他们向这位员工支付其维持基本生活所需的最低薪资，同时授予其公司 3% 的限制性股票，分四年兑现。（至此，期权池剩余比例降至 13.7%。）[7] 此外，他们还花费少量资金聘请了一名自由平面设计师。</p><p>How much stock do you give early employees? That varies so much that there’s no conventional number. If you get someone really good, really early, it might be wise to give him as much stock as the founders. The one universal rule is that the amount of stock an employee gets decreases polynomially with the age of the company. In other words, you get rich as a power of how early you were. So if some friends want you to come work for their startup, don’t wait several months before deciding.</p><p>应该给早期员工多少股权？这个问题没有统一标准，差异极大。如果能在公司极早期就招到一位非常优秀的人才，给予其与创始人相当的股权可能是明智之举。但有一条通用规则：员工获得的股权数量会随着公司成立时间的增长呈多项式递减。换句话说，你能获得多少财富，与你加入公司的早晚呈指数相关。因此，若有朋友邀请你加入其初创公司，不要拖延数月才做决定。</p><p>A month later, at the end of month four, our group of founders have something they can launch. Gradually through word of mouth they start to get users. Seeing the system in use by real users—people they don’t know—gives them lots of new ideas. Also they find they now worry obsessively about the status of their server. (How relaxing founders’ lives must have been when startups wrote VisiCalc.)</p><p>一个月后，也就是公司成立满四个月时，创始团队终于推出了可上线的产品。通过口碑传播，他们逐渐积累了第一批用户。看到陌生的真实用户在使用自己开发的系统，创始团队获得了许多新的灵感。同时，他们也开始不由自主地担忧服务器的运行状态。（想想初创公司当年开发 VisiCalc（注：首款电子表格软件）时，创始人的生活该有多轻松啊。）</p><p>By the end of month six, the system is starting to have a solid core of features, and a small but devoted following. People start to write about it, and the founders are starting to feel like experts in their field.</p><p>到公司成立六个月时，产品已具备扎实的核心功能，拥有了一小批忠诚度高的用户。开始有人撰写关于这款产品的文章，创始人们也逐渐觉得自己成了所在领域的专家。</p><p>We’ll assume that their startup is one that could put millions more to use. Perhaps they need to spend a lot on marketing, or build some kind of expensive infrastructure, or hire highly paid salesmen. So they decide to start talking to VCs. They get introductions to VCs from various sources: their angel investor connects them with a couple; they meet a few at conferences; a couple VCs call them after reading about them.</p><p>我们假设这家初创公司有能力运用数百万美元的额外资金。或许他们需要在营销上投入大量资金，或许需要搭建昂贵的基础设施，又或许需要聘请高薪销售人员。因此，他们决定开始与风险投资机构（VC）接触。他们通过多种渠道获得了与 VC 对接的机会：天使投资人帮他们联系了几家；在行业会议上结识了几位 VC；还有几家 VC 在看到关于他们公司的报道后主动联系了他们。</p><h2 id="Stage-3-Series-A-Round"><a href="#Stage-3-Series-A-Round" class="headerlink" title="Stage 3: Series A Round"></a>Stage 3: Series A Round</h2><h2 id="第三段：A-轮融资"><a href="#第三段：A-轮融资" class="headerlink" title="第三段：A 轮融资"></a>第三段：A 轮融资</h2><p>Armed with their now somewhat fleshed-out business plan and able to demo a real, working system, the founders visit the VCs they have introductions to. They find the VCs intimidating and inscrutable. They all ask the same question: who else have you pitched to? (VCs are like high school girls: they’re acutely aware of their position in the VC pecking order, and their interest in a company is a function of the interest other VCs show in it.)</p><p>此时，创始团队不仅有了相对完善的商业计划，还能演示真实可用的产品系统。他们带着这些准备，拜访了那些通过介绍对接上的 VC。在他们眼中，VC 们既令人敬畏，又难以捉摸。所有 VC 都会问同一个问题：“你还向其他哪些机构推介过？”（VC 们的心态有点像高中女生：他们非常在意自己在 VC 行业层级中的地位，对某家公司的兴趣程度，很大程度上取决于其他 VC 对该公司的关注程度。）</p><p>One of the VC firms says they want to invest and offers the founders a term sheet. A term sheet is a summary of what the deal terms will be when and if they do a deal; lawyers will fill in the details later. By accepting the term sheet, the startup agrees to turn away other VCs for some set amount of time while this firm does the “due diligence” required for the deal. Due diligence is the corporate equivalent of a background check: the purpose is to uncover any hidden bombs that might sink the company later, like serious design flaws in the product, pending lawsuits against the company, intellectual property issues, and so on. VCs’ legal and financial due diligence is pretty thorough, but the technical due diligence is generally a joke. [8]</p><p>其中一家 VC 表示愿意投资，并向创始团队出具了一份投资条款清单（term sheet）。投资条款清单是对 “若双方达成交易，交易条款将包含哪些内容” 的概要说明，具体细节后续将由律师补充完善。初创公司一旦接受这份条款清单，就需在约定时间内拒绝与其他 VC 接触，以便该 VC 完成交易所需的 “尽职调查”。尽职调查相当于企业层面的背景调查，其目的是排查可能导致公司未来陷入危机的 “隐形炸弹”，例如产品存在严重设计缺陷、公司面临未决诉讼、知识产权存在争议等。VC 在法律和财务方面的尽职调查通常相当详尽，但技术层面的尽职调查往往形同虚设。[8]</p><p>The due diligence discloses no ticking bombs, and six weeks later they go ahead with the deal. Here are the terms: a $2 million investment at a pre-money valuation of $4 million, meaning that after the deal closes the VCs will own a third of the company (2 &#x2F; (4 + 2)). The VCs also insist that prior to the deal the option pool be enlarged by an additional hundred shares. So the total number of new shares issued is 750, and the cap table becomes:</p><p>尽职调查未发现任何潜在 “定时炸弹”，六周后，双方正式推进交易。交易条款如下：风险投资机构以 400 万美元的投前估值，向公司投资 200 万美元。这意味着交易完成后，该风险投资机构将持有公司三分之一的股权（计算方式：200 万 ÷（400 万 + 200 万））。此外，风险投资机构还要求在交易完成前，将期权池额外增加 100 股。因此，此次发行的新股总数为 750 股，股权结构表更新如下：</p><p>shareholder shares percent</p><hr><p>VCs 650 33.3<br>angel 200 10.3<br>uncle 50 2.6<br>each founder 250 12.8<br>employee 36* 1.8 *unvested<br>option pool 264 13.5</p><hr><p>total 1950 100</p><table><thead><tr><th>股东</th><th>持股数量</th><th>持股比例（%）</th><th>备注</th></tr></thead><tbody><tr><td>风险投资机构</td><td>650</td><td>33.3</td><td></td></tr><tr><td>天使投资人</td><td>200</td><td>10.3</td><td></td></tr><tr><td>富有的叔叔</td><td>50</td><td>2.6</td><td></td></tr><tr><td>每位创始人</td><td>250</td><td>12.8</td><td></td></tr><tr><td>员工</td><td>36</td><td>1.8</td><td>股权未兑现</td></tr><tr><td>期权池</td><td>264</td><td>13.5</td><td></td></tr><tr><td>合计</td><td>1950</td><td>100</td><td></td></tr></tbody></table><p>This picture is unrealistic in several respects. For example, while the percentages might end up looking like this, it’s unlikely that the VCs would keep the existing numbers of shares. In fact, every bit of the startup’s paperwork would probably be replaced, as if the company were being founded anew. Also, the money might come in several tranches, the later ones subject to various conditions—though this is apparently more common in deals with lower-tier VCs (whose lot in life is to fund more dubious startups) than with the top firms.</p><p>这个股权结构表在几个方面与现实不符。例如，尽管最终的持股比例可能大致如此，但风险投资机构几乎不可能保留公司原有的股权数量计数方式。实际上，初创公司的所有法律文件很可能会全部重新拟定，仿佛公司是全新成立的一样。此外，投资资金可能会分多期注入，后续资金的发放需满足各种条件 —— 不过，这种情况在与二线风险投资机构（这类机构通常不得不投资更多前景不明的初创公司）的交易中更为常见，一线顶级机构则较少采用这种模式。</p><p>And of course any VCs reading this are probably rolling on the floor laughing at how my hypothetical VCs let the angel keep his 10.3 of the company. I admit, this is the Bambi version; in simplifying the picture, I’ve also made everyone nicer. In the real world, VCs regard angels the way a jealous husband feels about his wife’s previous boyfriends. To them the company didn’t exist before they invested in it. [9]</p><p>当然，任何看到这段内容的风险投资从业者，很可能会觉得我假设中的风险投资机构 “允许天使投资人保留 10.3% 股权” 的情节十分可笑。我承认，这是经过 “美化” 的版本；在简化说明的同时，我也让所有角色都显得更 “友善” 了。在现实中，风险投资机构看待天使投资人的态度，就像爱吃醋的丈夫看待妻子的前男友一样 —— 在他们看来，自己投资之前，这家公司根本不算 “真正存在”。[9]</p><p>I don’t want to give the impression you have to do an angel round before going to VCs. In this example I stretched things out to show multiple sources of funding in action. Some startups could go directly from seed funding to a VC round; several of the companies we’ve funded have.</p><p>我不想给大家造成 “对接风险投资机构前必须先完成天使轮融资” 的误解。在这个例子中，我特意拆分出多轮融资，是为了展示不同资金来源的运作方式。有些初创公司可以直接从种子轮融资过渡到风险投资轮融资；我们（Y Combinator）投资过的多家公司就是这样操作的。</p><p>The founders are required to vest their shares over four years, and the board is now reconstituted to consist of two VCs, two founders, and a fifth person acceptable to both. The angel investor cheerfully surrenders his board seat.</p><p>根据要求，创始人的股权需在四年内逐步兑现。同时，公司董事会进行重组，新董事会由两名风险投资机构代表、两名创始人，以及一名双方都认可的独立人士组成。此前持有董事会席位的天使投资人则愉快地放弃了自己的席位。</p><p>At this point there is nothing new our startup can teach us about funding—or at least, nothing good. [10] The startup will almost certainly hire more people at this point; those millions must be put to work, after all. The company may do additional funding rounds, presumably at higher valuations. They may if they are extraordinarily fortunate do an IPO, which we should remember is also in principle a round of funding, regardless of its de facto purpose. But that, if not beyond the bounds of possibility, is beyond the scope of this article.</p><p>到这里，这家初创公司在融资方面已没有新的内容可让我们探讨 —— 至少没有更多有价值的新信息了。[10] 此时，初创公司几乎必然会扩大招聘规模；毕竟，那数百万美元的投资必须投入使用。公司未来可能还会进行更多轮融资，且估值大概率会更高。如果运气极佳，他们或许能实现首次公开募股（IPO）—— 需要记住的是，无论 IPO 的实际目的是什么，从本质上来说，它也是一轮融资。但即便 IPO 并非完全不可能，也已超出本文的讨论范围。</p><h2 id="Deals-Fall-Through"><a href="#Deals-Fall-Through" class="headerlink" title="Deals Fall Through"></a>Deals Fall Through</h2><h2 id="交易告吹"><a href="#交易告吹" class="headerlink" title="交易告吹"></a>交易告吹</h2><p>Anyone who’s been through a startup will find the preceding portrait to be missing something: disasters. If there’s one thing all startups have in common, it’s that something is always going wrong. And nowhere more than in matters of funding.</p><p>任何有过初创公司经历的人都会发现，前面的描述遗漏了一个关键元素：危机。所有初创公司都有一个共同点 —— 总会有麻烦不断出现，而融资领域的麻烦尤为突出。</p><p>For example, our hypothetical startup never spent more than half of one round before securing the next. That’s more ideal than typical. Many startups—even successful ones—come close to running out of money at some point. Terrible things happen to startups when they run out of money, because they’re designed for growth, not adversity.</p><p>例如，我们假设中的这家初创公司，在获得下一轮融资前，从未花掉上一轮融资的一半以上资金。这种情况更偏向理想状态，而非行业常态。许多初创公司 —— 即便最终成功的那些 —— 在某个阶段也险些陷入资金耗尽的困境。对初创公司而言，资金耗尽会引发严重后果，因为初创公司的商业模式是为 “增长” 设计的，而非为 “应对困境” 设计的。</p><p>But the most unrealistic thing about the series of deals I’ve described is that they all closed. In the startup world, closing is not what deals do. What deals do is fall through. If you’re starting a startup you would do well to remember that. Birds fly; fish swim; deals fall through.</p><p>但在我描述的这一系列融资交易中，最不现实的一点是 “所有交易都成功完成了”。在初创行业，交易的常态不是 “达成”，而是 “告吹”。如果你正在创办一家初创公司，最好记住这一点：鸟会飞，鱼会游，融资交易则常会告吹。</p><p>Why? Partly the reason deals seem to fall through so often is that you lie to yourself. You want the deal to close, so you start to believe it will. But even correcting for this, startup deals fall through alarmingly often—far more often than, say, deals to buy real estate. The reason is that it’s such a risky environment. People about to fund or acquire a startup are prone to wicked cases of buyer’s remorse. They don’t really grasp the risk they’re taking till the deal’s about to close. And then they panic. And not just inexperienced angel investors, but big companies too.</p><p>为什么会这样？一方面，融资交易看似频繁告吹，部分原因在于你会 “自我欺骗”。你渴望交易达成，于是开始相信它一定会达成。但即便排除这种主观因素，初创公司融资交易告吹的概率依然高得惊人 —— 远高于房地产交易等其他领域。根源在于初创行业的高风险性：那些准备投资或收购初创公司的人，很容易陷入严重的 “买家懊悔” 情绪。在交易即将完成前，他们才真正意识到自己要承担的风险，随后便会陷入恐慌。这种情况不仅发生在缺乏经验的天使投资人身上，大型企业也不例外。</p><p>So if you’re a startup founder wondering why some angel investor isn’t returning your phone calls, you can at least take comfort in the thought that the same thing is happening to other deals a hundred times the size.</p><p>因此，如果你是初创公司创始人，正困惑于某位天使投资人为何不回你的电话，至少可以稍感安慰的是：即便规模是你当前交易 100 倍的融资项目，也可能遭遇同样的情况。</p><p>The example of a startup’s history that I’ve presented is like a skeleton—accurate so far as it goes, but needing to be fleshed out to be a complete picture. To get a complete picture, just add in every possible disaster.</p><p>我所描述的这家初创公司的发展历程，就像一副骨架 —— 在现有范围内是准确的，但要形成完整的图景，还需补充更多细节。而要得到完整图景，只需在其中加入所有可能发生的危机即可。</p><p>A frightening prospect? In a way. And yet also in a way encouraging. The very uncertainty of startups frightens away almost everyone. People overvalue stability—especially young people, who ironically need it least. And so in starting a startup, as in any really bold undertaking, merely deciding to do it gets you halfway there. On the day of the race, most of the other runners won’t show up.</p><p>这种前景是否令人畏惧？在某种程度上是的。但从另一个角度看，它也颇具激励意义。初创行业的不确定性本身就吓跑了几乎所有人。人们过度看重 “稳定性”—— 尤其是年轻人，讽刺的是，他们其实最不需要稳定性。因此，创办初创公司就像从事任何一项真正大胆的事业：仅仅是下定决心去做，就已经成功了一半。到了 “比赛” 那天，大多数原本可能参与的人，根本不会出现。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>[1] The aim of such regulations is to protect widows and orphans from crooked investment schemes; people with a million dollars in liquid assets are assumed to be able to protect themselves. The unintended consequence is that the investments that generate the highest returns, like hedge funds, are available only to the rich.</p><p>[1] 此类监管政策的初衷是保护寡妇和孤儿等弱势群体免受欺诈性投资计划的侵害；监管方认为，拥有 100 万美元流动资产的人群有能力自我保护。然而，这一政策带来了意外后果：对冲基金等能产生最高回报的投资产品，最终只对富人开放。</p><p>[2] Consulting is where product companies go to die. IBM is the most famous example. So starting as a consulting company is like starting out in the grave and trying to work your way up into the world of the living.</p><p>[2] 咨询业务是产品公司的 “坟墓”，IBM 就是最著名的例子。因此，以咨询公司的模式起步，无异于从坟墓里出发，试图挣扎着回到现实世界。</p><p>[3] If “near you” doesn’t mean the Bay Area, Boston, or Seattle, consider moving. It’s not a coincidence you haven’t heard of many startups from Philadelphia.</p><p>[3] 如果你所说的 “身边” 并非指旧金山湾区、波士顿或西雅图，那么不妨考虑搬家。你很少听说费城有知名初创公司，这绝非偶然。</p><p>[4] Investors are often compared to sheep. And they are like sheep, but that’s a rational response to their situation. Sheep act the way they do for a reason. If all the other sheep head for a certain field, it’s probably good grazing. And when a wolf appears, is he going to eat a sheep in the middle of the flock, or one near the edge?</p><p>[4] 投资者常被比作羊群。他们确实像羊群，但这是对自身处境的理性反应。羊群的行为模式背后是有原因的：如果其他羊都涌向某片草地，那片草地很可能水草丰美；而当狼出现时，它会攻击羊群中间的羊，还是边缘的羊？</p><p>[5] This was partly confidence, and partly simple ignorance. We didn’t know ourselves which VC firms were the impressive ones. We thought software was all that mattered. But that turned out to be the right direction to be naive in: it’s much better to overestimate than underestimate the importance of making a good product.</p><p>[5] 我们当时的做法，一部分源于自信，另一部分则是单纯的无知。我们自己也不知道哪些风险投资机构算得上 “知名”，只认为做好软件才是重中之重。但事实证明，这种 “天真” 找对了方向：高估打造优质产品的重要性，远好过低估它。</p><p>[6] I’ve omitted one source: government grants. I don’t think these are even worth thinking about for the average startup. Governments may mean well when they set up grant programs to encourage startups, but what they give with one hand they take away with the other: the process of applying is inevitably so arduous, and the restrictions on what you can do with the money so burdensome, that it would be easier to take a job to get the money.</p><p>[6] 我遗漏了一种资金来源：政府补贴。对于普通初创公司而言，我认为这种方式甚至不值得考虑。政府设立补贴项目以鼓励初创企业，初衷或许是好的，但往往 “一手给予，一手收回”：申请流程必然繁琐不堪，资金使用限制也沉重得让人难以承受，相比之下，找份工作赚钱反而更轻松。</p><p>You should be especially suspicious of grants whose purpose is some kind of social engineering– e.g. to encourage more startups to be started in Mississippi. Free money to start a startup in a place where few succeed is hardly free.</p><p>对于以 “社会工程” 为目的的补贴，你更应保持警惕 —— 例如，鼓励在密西西比州创办更多初创公司的补贴。在一个鲜有初创公司成功的地方，所谓 “免费” 的创业资金，其实一点也不 “免费”。</p><p>Some government agencies run venture funding groups, which make investments rather than giving grants. For example, the CIA runs a venture fund called In-Q-Tel that is modelled on private sector funds and apparently generates good returns. They would probably be worth approaching—if you don’t mind taking money from the CIA.</p><p>部分政府机构会运营风险投资团队，这些团队以投资而非发放补贴的方式支持企业。例如，美国中央情报局（CIA）就运营着一家名为 “In-Q-Tel” 的风险投资基金，该基金仿照私营部门基金模式运作，且显然能产生不错的回报。如果你不介意接受 CIA 的投资，或许值得与他们接触。</p><p>[7] Options have largely been replaced with restricted stock, which amounts to the same thing. Instead of earning the right to buy stock, the employee gets the stock up front, and earns the right not to have to give it back. The shares set aside for this purpose are still called the “option pool.”</p><p>[7] 股票期权在很大程度上已被限制性股票取代，二者本质上并无区别。员工不再是 “逐步获得购买股票的权利”，而是提前获得股票，再逐步获得 “无需归还股票的权利”。为这类激励预留的股份，仍被称为 “期权池”。</p><p>[8] First-rate technical people do not generally hire themselves out to do due diligence for VCs. So the most difficult part for startup founders is often responding politely to the inane questions of the “expert” they send to look you over.</p><p>[8] 一流的技术人才通常不会受雇于风险投资机构，为其做技术尽职调查。因此，对初创公司创始人来说，最困难的事情往往是礼貌地回应那些被派来考察公司的 “专家” 提出的无聊问题。</p><p>[9] VCs regularly wipe out angels by issuing arbitrary amounts of new stock. They seem to have a standard piece of casuistry for this situation: that the angels are no longer working to help the company, and so don’t deserve to keep their stock. This of course reflects a willful misunderstanding of what investment means; like any investor, the angel is being compensated for risks he took earlier. By a similar logic, one could argue that the VCs should be deprived of their shares when the company goes public.</p><p>[9] 风险投资机构常会通过随意发行新股的方式，稀释天使投资人的股权，使其权益近乎归零。对此，他们似乎有一套标准的说辞：天使投资人不再为公司提供帮助，因此不配保留股权。这显然是对 “投资” 本质的故意曲解 —— 和所有投资者一样，天使投资人持有的股权，是对其早期承担风险的补偿。按照这种逻辑，甚至可以说，当公司上市时，风险投资机构的股权也应被剥夺。</p><p>[10] One new thing the company might encounter is a down round, or a funding round at valuation lower than the previous round. Down rounds are bad news; it is generally the common stock holders who take the hit. Some of the most fearsome provisions in VC deal terms have to do with down rounds—like “full ratchet anti-dilution,” which is as frightening as it sounds.</p><p>[10] 公司未来可能遇到的一种新情况是 “降价融资轮”（down round），即新一轮融资的估值低于上一轮。降价融资是坏消息，通常由普通股股东承担损失。风险投资交易条款中，最可怕的部分往往与降价融资相关 —— 例如 “完全棘轮反稀释条款”（full ratchet anti-dilution），其可怕程度正如其名。</p><p>Founders are tempted to ignore these clauses, because they think the company will either be a big success or a complete bust. VCs know otherwise: it’s not uncommon for startups to have moments of adversity before they ultimately succeed. So it’s worth negotiating anti-dilution provisions, even though you don’t think you need to, and VCs will try to make you feel that you’re being gratuitously troublesome.</p><p>创始人往往倾向于忽视这些条款，因为他们认为公司要么大获成功，要么彻底失败。但风险投资机构却清楚另一种可能：初创公司在最终成功前遭遇困境，其实是很常见的事。因此，即便你认为自己不需要，也值得就反稀释条款进行谈判 —— 尽管风险投资机构会试图让你觉得，你是在无中生有地找麻烦。</p><p>Thanks to Sam Altman, Hutch Fishman, Steve Huffman, Jessica Livingston, Sesha Pratap, Stan Reiss, Andy Singleton, Zak Stone, and Aaron Swartz for reading drafts of this.</p><p>感谢萨姆・奥尔特曼（Sam Altman）、哈奇・菲什曼（Hutch Fishman）、史蒂夫・赫夫曼（Steve Huffman）、杰西卡・利文斯顿（Jessica Livingston）、塞莎・普拉塔普（Sesha Pratap）、斯坦・赖斯（Stan Reiss）、安迪・辛格尔顿（Andy Singleton）、扎克・斯通（Zak Stone）和亚伦・斯沃茨（Aaron Swartz）阅读本文初稿并提出意见。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格雷戈里・奥尔德雷特访谈实录：罗马帝国（二）</title>
    <link href="/2025/09/01/gregory-aldrete-the-roman-empire-ii/"/>
    <url>/2025/09/01/gregory-aldrete-the-roman-empire-ii/</url>
    
    <content type="html"><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a><strong>Table of Contents</strong></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><p>Here are the loose “chapters” in the conversation. Click link to jump approximately to that part in the transcript:<br>以下是对话的大致 “章节” 划分。点击链接可大致跳转至实录的对应部分：</p><p>一</p><p>0:00 – Ancient vs modern world<br>0:00 – 古代世界与现代世界</p><p>6:28 – Romans’ relationship to the past<br>6:28 – 罗马人对历史的态度</p><p>15:40 – Three phases of Roman history<br>15:40 – 罗马历史的三个阶段</p><p>18:30 – Rome’s expansion<br>18:30 – 罗马的扩张</p><p>30:10 – Punic wars<br>30:10 – 布匿战争</p><p>38:55 – Conquering Greece<br>38:55 – 征服希腊</p><p>40:34 – Scipio vs Hannibal<br>40:34 – 西庇阿对决汉尼拔</p><p>43:40 – Heavy infantry vs Cavalry<br>43:40 – 重步兵与骑兵</p><p>47:17 – Armor<br>47:17 – 盔甲</p><p>1:00:10 – Alexander the Great<br>1:00:10 – 亚历山大大帝</p><p>二</p><p>1:06:11 – Roman law<br>1:06:11 – 罗马法</p><p>1:15:51 – Slavery<br>1:15:51 – 奴隶制</p><p>1:24:11 – Fall of the Roman Empire<br>1:24:11 – 罗马帝国的衰落</p><p>1:27:56 – Julius Caesar<br>1:27:56 – 尤利乌斯・凯撒</p><p>1:32:35 – Octavian’s rise<br>1:32:35 – 屋大维的崛起</p><p>1:42:28 – Cleopatra<br>1:42:28 – 克利奥帕特拉</p><p>1:47:57 – Musa of Parthia<br>1:47:57 – 帕提亚的穆萨</p><p>1:50:50 – Augustus’ political system<br>1:50:50 – 奥古斯都的政治体系</p><p>三</p><p>2:03:19 – Cicero<br>2:03:19 – 西塞罗</p><p>2:09:21 – Gestures<br>2:09:21 – 肢体动作</p><p>2:19:32 – Religion in Rome<br>2:19:32 – 罗马的宗教</p><p>2:45:08 – Emperors<br>2:45:08 – 罗马皇帝</p><p>2:49:24 – The greatest Roman<br>2:49:24 – 最伟大的罗马人</p><p>2:52:18 – Marcus Aurelius<br>2:52:18 – 马可・奥勒留</p><p>2:59:33 – Taxes<br>2:59:33 – 税收</p><p>3:02:41 – Division of the Roman Empire<br>3:02:41 – 罗马帝国的分裂</p><p>3:22:37 – Decisive battles<br>3:22:37 – 决定性战役</p><p>3:47:08 – Hope<br>3:47:08 – 希望</p><h2 id="Roman-law"><a href="#Roman-law" class="headerlink" title="Roman law"></a>Roman law</h2><h2 id="罗马法"><a href="#罗马法" class="headerlink" title="罗马法"></a>罗马法</h2><p>Lex Fridman<br>(01:06:34) One of the most influential developments from the Roman Republic was their legal system. And as you mentioned, it’s one of the things that still lasted to this day in many of its elements. So it started with the Twelve Tables in 451 BC. Can you just speak to this legal system and the Twelve Tables?</p><p>Roman law<br>Lex Fridman<br>(01:06:34) 罗马共和国最具影响力的成就之一就是其法律体系。正如您所说，它的很多元素至今仍在沿用。罗马法律体系始于公元前 451 年的《十二铜表法》（Twelve Tables）。您能讲讲这个法律体系和《十二铜表法》吗？</p><p>Gregory Aldrete<br>(01:06:51) Yeah. I mean, Roman law is one of their most significant, maybe the most significant legacy they have on the modern world. So I mean, just to start at that end of it, something like 90% of the world uses a legal system, which is either directly or indirectly derived from the Roman one. So even countries that you wouldn’t think are really using Roman law, kind of are, because all the terminology, all that comes from Roman law. And the Romans, their first law code was this thing, the Twelve Tables. So this is way back in the middle republic and it was a typical early law code. So most of the stuff it concerns are agricultural concerns. So if I have a tree and its fruit drops onto your property, who owns the fruit? If my cow wanders into your field and eats your grain, am I responsible? I mean, I love these early law codes that are all about this farmer problems.</p><p>Gregory Aldrete<br>(01:06:51) 好的。罗马法是罗马留给现代世界最重要的遗产之一，甚至可能是最重要的遗产。首先，世界上约 90% 的国家所使用的法律体系，要么直接源自罗马法，要么间接受到罗马法影响。即便有些国家你觉得和罗马法没关系，其实也受其影响 —— 因为法律术语等核心元素都来自罗马法。而罗马的第一部成文法典就是《十二铜表法》，诞生于罗马共和国中期，是典型的早期法典。法典内容大多与农业相关，比如 “我的树结的果子掉到你的土地上，这果子归谁？”“我的牛跑到你的田里吃了庄稼，我要不要负责？”—— 我很喜欢这类早期法典，全是农民日常会遇到的问题。</p><p>(01:07:45) But law codes are hugely important because you need a law code to enable people to live in groups. So they’re the transitional thing that lets human beings live together without just resorting to anarchy. And most of the early law codes are agricultural, like Hammurabi’s Code in Mesopotamia. Most of them are retaliatory, meaning eye for an eye type justice. So you do something to me, it gets done to you. But they’re this necessary precondition for civilization, I would say, and the Twelve Tables is that. It’s a crude law code. It has a lot of goofy stuff in it. It has things about if you use magic, this is the punishment, but it’s that basic agrarian society law code. Now, that’s typical in many societies. Where the Romans are different is, they keep going. They keep developing their law code. And by the late republic, the Romans just get really into legal stuff.</p><p>(01:07:45) 但法典的意义非常重大 —— 要让人们聚居生活，就需要法典来规范行为。法典是人类摆脱无政府状态、实现有序共处的关键过渡。大多数早期法典都以农业为核心，比如美索不达米亚的《汉谟拉比法典》，而且多是 “报复性正义”，即 “以眼还眼、以牙还牙”—— 你对我做了什么，我就对你做什么。可以说，法典是文明的必要前提，《十二铜表法》也不例外。这部法典比较粗糙，里面有不少看似 “荒唐” 的条款，比如 “使用魔法会受到何种惩罚”，但它确实是适应农业社会的基础法典。很多文明的早期法典都是如此，但罗马人的不同之处在于，他们没有止步于此，而是不断发展自己的法律体系。到了共和国晚期，罗马人对法律的研究已经非常深入了。</p><p>(01:08:41) I don’t know why, but the Romans are very methodical organized people. So maybe this has something to do with it. But their law code just keeps getting more and more complicated and keeps expanding to different areas. And they start to get jurists who write sort of theoretical things about Roman law. And eventually, it becomes this huge body both of cases and comments on those cases and of actual laws. And in the 6th century AD, so the 500s, the Roman Emperor, Justinian, who is an emperor of the Eastern Roman Empire by this point, the Byzantine Empire, compiles all this together into something that today, we just loosely called Justinian’s Code of Roman law, and that survives. And so that becomes the basis for almost all the legal systems around the world and it’s very complicated. And Roman law, I think is really fun. Because on the one hand, it’s really dry, but it also preserves these wonderful little vignettes of daily life. So you get these great, just entertaining law cases.</p><p>(01:08:41) 我不知道具体原因，但罗马人确实非常有条理、爱较真，这可能和他们深耕法律有关。他们的法律体系越来越复杂，覆盖的领域也越来越广，还出现了专门研究罗马法、撰写理论著作的法学家。最终，罗马法形成了一个庞大的体系 —— 包含案例、案例注释和成文法。到了公元 6 世纪（500 年代），东罗马帝国（即拜占庭帝国）的皇帝查士丁尼（Justinian），将所有罗马法文献汇编成册，也就是我们现在所说的《查士丁尼法典》（Justinian’s Code）。这部法典保存了下来，成为世界上几乎所有法律体系的基础，内容非常复杂。我觉得罗马法很有意思：一方面它很枯燥，但另一方面，它保留了很多生动的日常生活片段，有不少案例特别有趣。</p><p>(01:09:42) One of my favorite, and this may not even be a real case, this might be a hypothetical that they would use to train Romans or law students, is one day, a man sends a slave to the barber to get a shave. And the barber shop is adjacent to an athletic field and two guys are on the athletic field throwing a ball back and forth. And one of them throws the ball badly, the other guy fails to catch it. The ball flies into the barber shop, hits the hand of the barber, cuts the slave’s throat, he dies. Who’s liable under Roman law? Is it the athlete one who threw the ball badly? Is it athlete two who failed to catch it? Is it the barber who actually cut the slave’s throat? Is it the owner of the slave for being stupid enough to send his slave to get a shave in a place adjacent to a playing field? Or is it the Roman state rezoning a barber shop next to an athletic field? What do you think?</p><p>(01:09:42) 我最喜欢的一个案例（可能不是真实案例，而是罗马人用来培训法律学生的假设案例）是这样的：有个人让奴隶去理发店刮胡子，理发店旁边是运动场，两个年轻人在运动场上扔球。其中一个人扔球没扔好，另一个人没接住，球飞进理发店，撞到了理发师的手，导致理发师的刀割破了奴隶的喉咙，奴隶死了。根据罗马法，谁该负责？是扔球没扔好的人？还是没接住球的人？是亲手割到奴隶喉咙的理发师？是那个 “蠢到把奴隶送到运动场旁边理发” 的奴隶主？还是批准在运动场旁边开理发店的罗马政府？你觉得呢？</p><p>Lex Fridman<br>(01:10:35) Well, do they resolve the complexity of that with the right answer?</p><p>Lex Fridman<br>(01:10:35) 那他们有没有给出一个明确的 “正确答案” 来解决这个复杂问题？</p><p>Gregory Aldrete<br>(01:10:39) We don’t have the answer.</p><p>Gregory Aldrete<br>(01:10:39) 没有答案。</p><p>Lex Fridman<br>(01:10:40) We don’t have the answer.</p><p>Lex Fridman<br>(01:10:40) 居然没有答案。</p><p>Gregory Aldrete<br>(01:10:41) It’s a case without the answer. We have various jurists commenting on this one, but we don’t have what was actually ruled. But it’s just a great little sort of vignette. And that’s how complicated Roman law got, that it was dealing with these weird, esoteric questions. There’s another one where a cow gets loose and runs into an apartment building, goes up onto the roof and crashes down three stories into a bar on the ground floor, and kicks open the taps to the wine jug and all the wine flows out. Who’s at fault? I mean, this seems to have happened, as crazy as it sounds. And Roman testamentary law is great. I mean, something like 20% of Roman law has to do with wills and what you do with the will and what makes a will valid. You have to have seven witnesses and you have to have a guy named, the liber [inaudible 01:11:31] to witness it, and the witnesses have to be adult men who can’t be blind and all this other stuff.</p><p>Gregory Aldrete<br>(01:10:41) 这是一个 “无答案案例”。我们能看到多位法学家对这个案例的评论，但没有记载最终的判决结果。不过这个案例特别生动，能让你感受到罗马法有多复杂 —— 它甚至会处理这种离奇、冷门的问题。还有一个案例：一头牛跑丢了，冲进一栋公寓楼，爬上屋顶后从三层楼高的地方摔下来，砸进一楼的酒吧，还踢开了酒罐的龙头，导致所有酒都流了出来。谁该负责？听起来很荒唐，但这种事似乎真的发生过。罗马的遗嘱法也很有意思，大概 20% 的罗马法都和遗嘱相关 —— 比如遗嘱该怎么写、怎样才算有效遗嘱。有效遗嘱需要 7 位证人，还需要一位叫 “liber”（发音模糊，可能指特定见证人）的人见证，而且证人必须是成年男性，不能是盲人，还有其他各种要求。</p><p>(01:11:36) So it’s just great. It’s fun to mess around in this, but it always contains these little nuggets about what happens. I mentioned I wrote a book on floods. And there were all these law cases about if a flood strikes the city and picks up my piece of furniture in my apartment building and carries it out the door and deposits it in another apartment building, does that guy now own my furniture because it’s now legally within his apartment? Or can I go in there and repossess it because the flood took it out of my apartment? This is the stuff law is handled and that’s how sophisticated Roman law got.<br>所以这非常棒。研究这些内容很有趣，但它总是包含一些关于事件如何发生的有趣细节。我提到过我写了一本关于洪水的书。其中有很多法律案例讨论，如果一场洪水袭击城市，把我公寓里的家具卷走，带出大门，然后放在另一栋公寓楼里，那么那个人是否就拥有了我的家具，因为家具现在在法律上处于他的公寓内？还是我可以进去把家具取回来，因为是洪水把它从我的公寓里带走的？法律就是这样处理问题的，罗马法也因此变得如此复杂精密。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:12:08) Did corrupt, unfair things seep into the law?<br>腐败和不公平的事情是否渗透进了法律？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:12:11) Oh, yeah. I mean, it’s biased in favor of the wealthy, obviously. And I mean, Roman law cases are interesting because they became linked to politics. So one of the way that politicians, up and coming politicians, aspiring politicians could sort of make their name or become famous was by either prosecuting or defending people in Roman law courts. And especially during the late Roman Republic, you get a lot of really sensational, what today we’d call celebrity law cases. So this is where some of the biggest politicians were accused of very melodramatic kinds of things. And I mean, the most famous Roman order of all time, Cicero, is a guy who made his entire career in the law courts. And that’s how he made his reputation, was able to parlay that into political power and eventually was elected to the highest office in the Roman government. But it’s purely because of his skill, his facility, using words at giving speeches in public.<br>哦，当然。显然，法律偏向富人。我是说，罗马的法律案件很有趣，因为它们与政治联系在一起。因此，政客、崭露头角的政客或有抱负的政客可以通过在罗马法庭上起诉或为他人辩护来树立名声或成名。尤其是在罗马共和国晚期，出现了许多轰动一时的案件，也就是今天我们所说的名人法律案件。当时一些最重要的政治人物被指控犯有非常戏剧性的罪行。比如，有史以来最著名的罗马演说家西塞罗，他的整个职业生涯都是在法庭上度过的。他正是通过这种方式建立起声誉，并将其转化为政治权力，最终当选为罗马政府的最高职位。但这完全归功于他运用语言进行公开演讲的技巧和能力。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:13:13) So they loved the puzzle and the game of law, the sort of untangling really complicated legal situations and coming up with new laws that help you tangle and untangle the situations.<br>所以他们热爱法律的谜题和游戏，喜欢梳理复杂的法律状况，并制定新法律来帮助你处理这些情况。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:13:28) Yes. And law cases, again, especially in the late republic, also became a form of public spectacle.<br>是的。而且，法律案件，尤其是在共和国晚期，也成了一种公共 spectacle（公共表演）。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:13:33) Right.<br>没错。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:13:33) So Rome did not have law courts in a building locked away. A lot of these cases were held in the Roman Forum in the open, and audiences would just come to be entertained. And the people presenting the speeches, they were playing as much to this audience as they were to let’s say, the jury or a judge. And that became a big part of the cases. So that’s all tied up in the Roman orator too.<br>因此，罗马并没有把法庭设在封闭的建筑里。许多案件都是在露天的罗马广场上举行的，观众前来只是为了娱乐。进行演讲的人，他们不仅是在向陪审团或法官陈述，同样也是在向观众表演。这成为了案件的重要组成部分。这也与罗马的演说家传统紧密相关。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:13:57) So we’re talking a bit about the details of the laws. Is there some big picture laws that are new innovations or profound things like all Roman citizens are equal before the law, founding fathers type in the United States, in the western world, these big legal ideas?<br>所以我们刚才谈了一些法律的细节。有没有一些宏观层面的法律创新或深刻理念，比如“所有罗马公民在法律面前平等”，类似于美国的“开国元勋”或西方世界的那些重大法律思想？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:14:17) I think maybe one of the things that was really stressed in Roman law early on, even as early as the Twelve Tables, is the notion of Roman citizenship. So if you were a Roman citizen, it came with a set of both privileges and obligations. So the obligations where you’re supposed to fight in the Army, you were supposed to vote in elections. The privileges were, you had the protection of Roman law. And at least in theory, if not in practice, everybody was equal under that law. Now of course, keep in mind, we’re talking about men here. And even at the height of the Roman Empire, so let’s say second century AD, there were about 50 million human beings living within the boundaries of the Roman Empire, maybe 6 million were actual citizens. So we tend to go, “Oh, it’s so great. If you’re a citizen, you have all these things.”<br>我认为，罗马法从早期，甚至早在《十二铜表法》时期，就非常强调的一个概念是罗马公民权。如果你是罗马公民，你既享有权利，也承担义务。义务包括你要在军队服役，要参加选举投票。而权利则是你受到罗马法律的保护。至少在理论上，即使在实践中未必如此，每个人在法律面前都是平等的。当然，要记住，我们这里谈论的是男性。即使在罗马帝国的鼎盛时期，比如公元二世纪，罗马帝国内约有5000万人，其中真正的公民可能只有600万。所以我们往往会说：“哦，太棒了，如果你是公民，就能拥有所有这些权利。”</p><p>(01:15:08) Well, adult free men who are not slaves, who are not resident foreigners, they have this great stuff. And that’s always a tiny minority of all the human beings who existed in this society. But still, the notion, the notion of citizenship is huge. And citizens, for example, early on, you had to be tried at Rome if you were accused of something. And there’s this very famous moment in Sicily where an abusive governor who’s corrupt is punishing a citizen arbitrarily. And this person cries out, “Civis Romanus Sum,” meaning, “I am a Roman citizen.” And it really was this hugely loaded statement that that gives me protections. It is wrong for you to do this to me. It’s wrong for you to beat me because I am a citizen and that gives me certain protections. So that notion of citizenship is something that I think, the Romans really emphasize and becomes a legacy to a lot of civilizations today, where citizenship means something. It’s a special status.<br>嗯，只有那些不是奴隶、不是外来居民的成年自由男性才能享有这些权利。而这在当时社会的所有人中始终只是极少数。但尽管如此，公民权这个概念意义重大。例如，早期如果你被指控犯罪，你必须在罗马接受审判。在西西里就有一个非常著名的场景：一位腐败的、滥用权力的总督正在随意惩罚一名公民，这个人高喊：“Civis Romanus Sum”（我是罗马公民）。这句口号承载着巨大的分量，意味着我受到保护。你这样对待我是不对的。你打我是不对的，因为我是一名公民，这赋予了我某些保护。我认为，罗马人非常强调公民权这一概念，它也成为留给今天许多文明的遗产，即公民身份意味着某种东西，它是一种特殊的地位。</p><h2 id="Slavery"><a href="#Slavery" class="headerlink" title="Slavery"></a>Slavery</h2><h2 id="奴隶制"><a href="#奴隶制" class="headerlink" title="奴隶制"></a>奴隶制</h2><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:16:13) So you mentioned slaves, slavery, that’s something that is common throughout human history. What do we know about their relationship with slavery?<br>所以你提到了奴隶和奴隶制，这是贯穿人类历史的普遍现象。我们对罗马人与奴隶制的关系了解多少？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:16:25) Well, Roman slavery, a couple of just reminders at the beginning, first of all, it’s not racial slavery. So for people in the United States, you tend to think of slavery through this racial lens. So slaves in ancient Roman society could be any color, ethnicity, gender, origin, whatever. It’s an economic status. Now, having said that, slavery is fundamentally horrific to human dignity because it is defining a human being as an object. And very famously, a Roman agricultural writer who’s writing about farms, just as a kind of side says, “On your farm, you have three types of tools. You have dumb tools.” And by dummy, means can’t speak. So that’s like shovels, picks, things like this, wagons. “You have articulate tools which are animals, and you have articulate tools which are human beings, slaves.” And for him, these are all just categories of tools. It’s so intensely dehumanizing to view people in that way.<br>关于罗马的奴隶制，首先需要提醒几点：第一，它不是种族奴隶制。对于美国人民来说，你们往往通过种族视角来看待奴隶制。但在古罗马社会，奴隶可以是任何肤色、种族、性别或出身。它是一种经济地位。话虽如此，奴隶制从根本上是对人类尊严的严重伤害，因为它将人定义为物体。一位著名的罗马农业作家在写关于农场的文章时，顺便提到：“你的农场上有三种工具。你有‘哑’工具。”所谓“哑”，就是不会说话的工具，比如铁锹、镐头、这类东西，还有马车。“你有会说话的工具，那就是动物，你还有会说话的工具，那就是人类，也就是奴隶。” 对他来说，这些都只是工具的类别。以这种方式看待人是极度非人化的。</p><p>(01:17:29) So Roman slavery is odd in that it doesn’t have this racial component. It’s horrible in the way all slavery is horrible, but the other thing about is it’s not a hard line. It’s a permeable membrane, and many people move back and forth across it. So you have many people in the Roman world who were born a slave who gained their freedom through one means or another. And you have many others who were born free and become slaves. And you have some who go back and forth. There’s a great Roman tombstone of this guy who says, “I was born a free man in Parthia. I was enslaved. Then I gained my freedom and I became a teacher or something, and I had a life, and now I’m a Roman citizen.” So it’s this whole back and forth across all these boundaries multiple times.<br>因此，罗马奴隶制的奇特之处在于它没有种族成分。它和其他所有奴隶制一样可怕，但另一个特点是它并非一条不可逾越的界限。它像一层可渗透的膜，许多人在这之间来回流动。在罗马世界，有许多人出生时是奴隶，但通过某种方式获得了自由；也有许多人出生时是自由人，后来却沦为奴隶；还有一些人在这两者之间反复转换。有一块很棒的罗马墓碑上写着一个人的生平：“我出生在帕提亚，是一名自由人。后来我被奴役了。之后我获得了自由，成为了一名教师或类似的职业，过上了生活，现在我是一名罗马公民。” 因此，人们在这些界限之间多次来回穿梭。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:18:13) Oh, so there’s probably a process like an economic transaction.<br>哦，所以可能有一个类似经济交易的过程。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:18:18) The most common source of slaves in the Roman world was war. So wherever the Roman army went, in its wake would be literally a train of slave traders. So you’re in war, you capture an enemy city, you whack the people over the head, and you turn around if you’re a soldier and you sell them to one of these slave traders that’s following the army around, literally. So that’s probably the biggest source of slaves. Another big source is just children of slaves or slaves. And some people could literally sell either themselves or their children into slavery due to economic necessity, or privation or something. So as terrible as that sounds, a father could sell a child if he needed money.<br>罗马世界最常见的奴隶来源是战争。因此，罗马军队所到之处，身后实际上会跟着一长串的奴隶贩子。你在战争中攻占了一座敌方城市，把人们打昏，然后作为士兵，你可以转身就把他们卖给那些跟着军队走的奴隶贩子。这可能是奴隶最主要的来源。另一个重要来源是奴隶的子女。还有一些人由于经济需要或贫困等原因，实际上可以把自己或自己的孩子卖为奴隶。所以尽管这听起来很可怕，但一个父亲如果需要钱，是可以卖掉孩子的。</p><p>(01:19:04) Once you were a slave though, the experience of slavery varied a lot because a lot of the slaves were agricultural slaves. So they would work like in the American South, big plantations. They might be chained. They were probably abused. That’s very similar to slavers as we think of it in let’s say, the Caribbean, South America or the United States prior to the Civil War, that kind of slavery. But a lot of Roman slaves were also some of the more skilled people. And this seems a little weird. So if you’re a rich person, you have slaves, it’s actually a good investment for you to train your slaves in a profession. So a lot of Roman doctors, scribes, accountants, sort of, all this sort of thing, barbers, were slaves. Because if you train this person, and then they produce a lot of money for you, you get that money.<br>然而，一旦成为奴隶，奴隶的经历却大不相同，因为许多奴隶是农业奴隶。他们会在大种植园里劳作，就像美国南方那样。他们可能被戴上镣铐，很可能遭受虐待。这与我们所理解的加勒比地区、南美洲或美国内战前的奴隶制非常相似。但许多罗马奴隶也是技术较为熟练的人。这看起来有点奇怪。如果你是个富人，拥有奴隶，那么投资培训你的奴隶掌握一门职业实际上对你很有利。因此，许多罗马医生、文书、会计、理发师等，都是奴隶。因为如果你培训了这个人，他为你赚了很多钱，这笔钱就归你所有。</p><p>(01:19:57) And those slaves would sometimes be given an incentive to work hard where they could… And this is just sort of an agreement between the master and the slave. If they earned a certain amount of money, X amount of money, they could then buy their own freedom from the master. So this was your incentive to work harder if you were trained let’s say, as a doctor. “I work really hard, I can buy myself out of slavery.” Or a lot of masters would free their slaves in their wills.<br>这些奴隶有时会被给予努力工作的激励……这通常是主人和奴隶之间的一种约定。如果他们赚到了一定数额的钱，比如X金额，他们就可以从主人那里买回自己的自由。所以，如果你被培训成为一名医生，这就是你努力工作的动力：“我努力工作，就能把自己从奴隶身份中赎出来。” 或者，许多主人会在遗嘱中释放他们的奴隶。</p><p>(01:20:24) So when they died, they would say, “I manumit this slave and that slave.” So it was a weird institution in that elements were just as horrible as what we think of as slavery and just as exploitative. And like I say, the overall notion of slavery is intensely dehumanizing, but yet, there was this wide range of types of slaves. And the odd thing is, in the city of Rome, many of the worst jobs, so if you’re just a laborer hauling crap around at the docks or things like that, you might well be a free person and a slave would hold a skilled job. And that seems a little strange or counterintuitive to us, but you see how in the Roman economy it sort of works.<br>所以当他们去世时，会说：“我解放这个奴隶和那个奴隶。” 因此，这是一种奇怪的制度，其中某些方面与我们所认为的奴隶制一样可怕和剥削。正如我所说，奴隶制的整体概念是极度非人化的，但同时，奴隶的类型却非常多样。奇怪的是，在罗马城，许多最糟糕的工作，比如在码头当搬运工干粗活，很可能由自由人担任，而奴隶反而担任技术性的工作。这对我们来说似乎有点奇怪或违反直觉，但你可以看到这在罗马经济中是如何运作的。</p><p>Lex Fridman<br>(01:21:08) And that could be one of the things that would be surprising to us coming from the modern day to the ancient world, is just the number of slaves. So you mentioned one of the things we don’t think about is that most of the people are farmers. And then the other thing is just the number of slaves.</p><p>莱克斯·弗里德曼<br>(01:21:08) 从现代进入古代世界，让我们感到惊讶的一件事可能就是奴隶的数量。你提到了我们通常不会想到的一点，即大多数人都是农民。而另一点就是奴隶的数量。</p><p>Gregory Aldrete<br>(01:21:24) And there’s a big debate. How many slaves were there? What percentage of the populace, let’s say in the city of Rome, were slaves? And this is something historians like to argue about a lot. And we keep coming back to this theme of sometimes it’s the little things that illustrate stuff well. And for slaves, the one that always gets me is some slaves, and these would be sort of the more abused slaves, they would literally put little bronze collars on them with a tag that said, “Hi, my name is Felix. I’m the slave of so-and-so. I’ve run away. If you catch me, return me to the temple of so-and-so, and you’ll get a reward.”</p><p>格雷戈里·阿尔德雷特<br>(01:21:24) 这是一个很大的争论话题。究竟有多少奴隶？比如，在罗马城的人口中，奴隶占了多大比例？这是历史学家们热衷于争论的问题。我们总是回到这样一个主题：有时候，正是那些小细节最能说明问题。关于奴隶，最让我震惊的是，有些奴隶——这些往往是受虐待最严重的奴隶——主人会真的给他们戴上小小的青铜项圈，上面挂着一个标签，写着：“嗨，我叫费利克斯。我是某某人的奴隶。我逃跑了。如果你抓住我，请把我送回某某神庙，你将得到奖励。”</p><p>(01:21:59) So it’s a dog tag, except this is a human being. And you can see these in museums. I mean, you can go to a museum today and see this little bronze collar with a tag on it that’s talking about a human being as if they’re this kind of animal that’s run away. And this is very telling too. We’re talking about Roman law. Under Roman law, technically, when a slave runs away, the crime that he’s committing is theft because he’s stolen himself from his master. So again, it’s this very dehumanizing view of it.</p><p>(01:21:59) 所以这就像是一个狗牌，但对象是一个人。你可以在博物馆里看到这些。我的意思是，今天你去博物馆就能看到这种带着标签的小青铜项圈，它把一个人描述得就像一只逃跑的动物。这也非常具有揭示性。我们谈到罗马法律。根据罗马法，从技术上讲，当一个奴隶逃跑时，他所犯的罪行是盗窃，因为他从主人那里偷走了自己。所以，这再次体现了对人的极度非人化看法。</p><p>Lex Fridman<br>(01:22:30) And just a reminder to people in America thinking about this, we have a certain view and picture to what slavery is, a reminder that all of human history, most of human history has had slaves of all colors, of all religions. That’s within us, to select a group of people, call them the other, use them as objects, abuse them. And I would say, as a person who believes the line between good and evil runs through the heart of every man, all of us, every person listening to this is capable of being owner of a slave if they’re put in the position, of capable of hating the other, of forming the other, of othering other people. And we should be very careful not to look ourselves in the mirror and remind ourselves that we’re human. It’s easy to think, “Okay, well, there’s these slaves and slave owners through history. And I would’ve never been one of those.” But just like as we would be farmers, we could be both. If we went back into history, we could be both slaves and slave owners, and all of those are humans.</p><p>莱克斯·弗里德曼<br>(01:22:30) 对于思考这个问题的美国人来说，这是一个提醒：我们对奴隶制有着特定的看法和画面，但请记住，整个人类历史中，大多数时期都存在各种肤色、各种宗教的奴隶。在我们内心深处，存在着选择一群人、称他们为“他者”、将他们当作物品、加以虐待的倾向。我想说，作为一个相信善与恶的界限贯穿每个人内心的人，我们所有人，每一个正在听这段话的人，如果处于那种情境下，都有可能成为奴隶主，都有可能憎恨“他者”，都有可能去构建“他者”，去排斥他人。我们应该非常小心，要照照镜子提醒自己，我们是人。很容易会想：“好吧，历史上有这些奴隶和奴隶主，我绝不会是那样的人。”但就像我们可能成为农民一样，我们也可能同时成为两者。如果我们回到历史中，我们既可能是奴隶，也可能是奴隶主，而所有这些人都是人类。</p><p>Gregory Aldrete<br>(01:23:45) I mean, just to build on that, I’d say the othering of others is a morally corrosive thing to do.</p><p>格雷戈里·阿尔德雷特<br>(01:23:45) 我的意思是，进一步说，将他人“他者化”是一种道德上具有腐蚀性的事情。</p><p>Lex Fridman<br>(01:23:52) Yeah. So this fascinating transition between the republic to the empire, can we talk about that? How does the republic fall?</p><p>莱克斯·弗里德曼<br>(01:23:52) 是的。那么，我们可以谈谈从共和国到帝国这个迷人的转变吗？共和国是如何衰落的？</p><h2 id="Fall-of-the-Roman-Empire"><a href="#Fall-of-the-Roman-Empire" class="headerlink" title="Fall of the Roman Empire"></a>Fall of the Roman Empire</h2><h2 id="罗马帝国的衰落"><a href="#罗马帝国的衰落" class="headerlink" title="罗马帝国的衰落"></a>罗马帝国的衰落</h2><p>Gregory Aldrete<br>(01:24:02) Oh, boy. Okay. So the Roman Republic on the one hand is incredibly successful. Right? In a short period of time, it’s expanded wildly. It’s conquered the Mediterranean world. It’s gained tons of wealth. The contradiction here is that Rome’s very success has made almost every group within Roman society deeply unhappy and boiling with resentment. So this is the contradiction. Enormous success on the surface, you end up with this boiling pot of resentment and unhappiness. So let’s break this down. Who’s unhappy? Well, the people fighting Rome’s wars, the common farmers who went off to fight. They joined the army. They went and fought. They’ve come back. They’ve seen Rome get wealthy. They’ve seen their generals get wealthy. They’ve conquered all these areas. All this money and stuff is flowing back to Rome. But when they’re discharged from the army, they don’t get that much. So they feel like, “I spent the best years of my life fighting for my country, I deserve a reward. I haven’t gotten it.”</p><p>格雷戈里·阿尔德雷特<br>(01:24:02) 哦，天哪。好吧。一方面，罗马共和国取得了巨大的成功，对吧？在短时间内，它疯狂扩张，征服了整个地中海世界，获得了巨额财富。这里的矛盾在于，罗马的巨大成功却使罗马社会内部几乎每一个群体都深感不满，怨恨沸腾。这就是矛盾所在：表面上取得了巨大的成功，结果却导致了一个充满怨恨和不满的沸腾局面。让我们来分析一下。谁不满意？首先是那些参加罗马战争的人，那些离家参战的普通农民。他们参军，去打仗，现在回来了。他们看到罗马变得富有，看到他们的将军变得富有。他们征服了所有这些地区，大量的金钱和物资正源源不断地流回罗马。但当他们退伍时，却得不到多少东西。所以他们觉得：“我把生命中最美好的年华献给了为国作战，我理应得到回报，但我没有得到。”</p><p>(01:25:07) So you have a lot of veterans who are now unemployed or underemployed. Many of them have sold their small family farms when they went off to join the army, and now they don’t have them. So that group’s unhappy, the veterans. You have the aristocrats who on the surface, the ones who are doing well, they’re the politicians and the generals. But as time goes on, the ones who get the plum appointments, who get the good general ships, starts coming from a smaller and smaller subset of the aristocrats. The Scipios and their friends start to dominate. So you end up where most of the aristocratic class is feeling, “Hey, I’m left out. I didn’t get what I deserved.” What about the half citizens and the allies? The Italians who have fought for Rome, who stayed loyal when Hannibal invaded, they didn’t go over to his side. Well, they feel rightfully, “We stayed loyal to Rome. We fought for them. We deserve our reward. We should be full citizens.” But the Romans are traditional. They’re conservative. They don’t like change. They don’t give them that.</p><p>(01:25:07) 因此，你看到大量退伍军人现在失业或就业不足。他们中的许多人当初参军时卖掉了自家的小农场，现在他们什么都没有了。所以这个群体——退伍军人——是不满意的。你还有贵族阶层，表面上看，那些过得好的人，他们是政治家和将军。但随着时间的推移，那些获得肥差、获得好的统帅职位的人，开始来自贵族阶层中越来越小的一部分。西庇阿家族及其朋友们开始占据主导地位。结果就是，大多数贵族阶层感到：“嘿，我被排除在外了。我没有得到我应得的东西。” 那么那些半公民和盟友呢？那些为罗马作战、在汉尼拔入侵时保持忠诚、没有投靠他的人。意大利人理所当然地感到：“我们对罗马保持了忠诚，我们为他们而战。我们理应得到回报，我们应该成为完全的公民。” 但罗马人是传统的，他们保守，不喜欢改变，他们没有给予他们这种权利。</p><p>(01:26:07) What about all the slaves? Well, they’ve conquered all these foreigners. They’ve sold them. Now, many of them are working these plantations, big plantations owned by rich people that used to be little family farms. The slaves are obviously unhappy. So you end up with a society where it’s incredibly successful by about 100 BC, but almost every group that composes it feels like, “I haven’t shared in the benefits of what’s happened or I’ve been exploited by it.” So they all end up intensely unhappy. And the next 100-year period from 133 to 31 BC is called the Late Roman Republic. And it’s a time of nearly constant internal strife, ultimately culminating in multiple rounds of civil war.</p><p>(01:26:07) 那么所有的奴隶呢？他们征服了所有这些外族人，把他们卖为奴隶。现在，他们中的许多人正在大庄园里劳作，这些大庄园由富人拥有，而这些庄园过去曾是小家庭农场。奴隶们显然很不开心。因此，你最终得到一个社会：到公元前100年左右，它取得了巨大的成功，但组成它的几乎每一个群体都感到：“我没有分享到所发生事件的成果，或者我被它剥削了。” 所以他们都变得极度不满。接下来从公元前133年到公元前31年的一百年被称为罗马共和国晚期。这是一个几乎持续不断的内部冲突时期，最终导致了多轮内战。</p><p>(01:26:51) So Roman society literally breaks apart, turns on itself, and goes to war with itself over not equitably sharing the benefits of conquest and of empire. So it’s a lesson about not sharing the benefits of something in a society, but concentrating it in one little group. And the other thing that happens is among the aristocrats, they start to get more and more ambitious. So in the past, there was a lot of ideology of, the state is more important than the person. If you were a little Roman kid, you would’ve been told these stories of Roman heroes. And they’re all about self-sacrifice, putting the state before you, about modesty, about these values. Well, by the late republic, you have a succession of strong men. And it is a chain. So it goes, Marius, Sulla, Pompey, Julius Caesar, where each one pushes the boundaries of the Roman Republic a little bit, pushes at the structures of the institutions of the Republic, and they’re motivated by personal gain. They’re putting themselves above the state.</p><p>(01:26:51) 因此，罗马社会实际上分崩离析，反目成仇，因未能公平分享征服和帝国的成果而自相残杀。这是一个教训：在社会中不分享成果，而是将其集中在一小部分人手中。另一件发生的事情是，在贵族阶层中，他们开始变得越来越有野心。过去，存在着一种意识形态，即国家比个人更重要。如果你是一个小罗马孩子，你会听到关于罗马英雄的故事。这些故事都是关于自我牺牲、将国家置于个人之前、关于谦逊以及这些价值观的。然而，到了共和国晚期，出现了一系列强势人物。这是一个链条：马略、苏拉、庞培、尤利乌斯·凯撒，他们每个人都稍微推了一下罗马共和国的边界，挑战共和国机构的结构，而他们的动机是个人利益。他们将自己置于国家之上。</p><h2 id="Julius-Caesar"><a href="#Julius-Caesar" class="headerlink" title="Julius Caesar"></a>Julius Caesar</h2><h2 id="尤利乌斯·凯撒"><a href="#尤利乌斯·凯撒" class="headerlink" title="尤利乌斯·凯撒"></a>尤利乌斯·凯撒</h2><p>(01:27:59) So at the same time, you have lots of groups unhappy in society, and you get these strong men who are now undermining the institutions, chipping away at the things that have been shared, things holding the state together. And in the end, they just become so ambitious, they’re like, “I don’t care about the state. I’m going to try and make myself ruler of Rome.” So I mean, this is going to culminate obviously in Julius Caesar who does succeed in making himself dictator for life of the Roman Republic, which is tantamount to king, and he gets assassinated for it. But he’s the end point of this progression of people who really undermine the institutions, the republic, through their own personal greed.</p><p>(01:27:59) 因此，与此同时，社会中有很多群体感到不满，而这些强势人物正在破坏制度，逐渐侵蚀那些曾经共享的、维系国家团结的东西。最终，他们变得野心勃勃，以至于他们想：“我才不在乎国家呢。我要试着让自己成为罗马的统治者。” 我的意思是，这显然会以尤利乌斯·凯撒达到顶峰，他成功地使自己成为罗马共和国的终身独裁官，这等同于国王，也因此被刺杀。但他正是这一系列通过个人贪婪真正破坏共和国制度的人的终点。</p><p>Lex Fridman<br>(01:28:43) So the resentment boils and boils and boils, and there’s this person that puts themselves above-</p><p>莱克斯·弗里德曼<br>(01:28:43) 所以怨恨不断积累、积累、再积累，然后出现了这样一个将自己置于国家之上的人——</p><p>Gregory Aldrete<br>(01:28:48) And they exploit it. They’re demagogues.</p><p>格雷戈里·阿尔德雷特<br>(01:28:48) 而且他们利用这种怨恨。他们是煽动者。</p><p>Lex Fridman<br>(01:28:49) Yeah.</p><p>莱克斯·弗里德曼<br>(01:28:49) 是的。</p><p>Gregory Aldrete<br>(01:28:50) They exploit it.</p><p>格雷戈里·阿尔德雷特<br>(01:28:50) 他们利用这种怨恨。</p><p>Lex Fridman<br>(01:28:50) But Caesar puts himself above the state. And that I guess, the Roman people also hate.</p><p>莱克斯·弗里德曼<br>(01:28:50) 但凯撒将自己置于国家之上。我想，罗马人民也憎恨这一点。</p><p>Gregory Aldrete<br>(01:28:58) Well, I mean, it’s a love-hate because Caesar is very successful at playing to the Roman people. So he becomes their hero where he says, “I’ll be your champion against the state who doesn’t care about you.” So Caesar will do things where he’ll put on big shows for the people, and it’s cynical. I mean, he’s doing this to further his own political power, but he’s presenting himself as a populist in essence, even though he aspires to be a dictator. Right? But it’s a way of winning the people’s support because that’s a tool for him and his struggle with other aristocrats.</p><p>格雷戈里·阿尔德雷特<br>(01:28:58) 嗯，我的意思是，这是一种爱恨交织的关系，因为凯撒非常善于迎合罗马人民。所以他成为了他们的英雄，宣称：“我将成为你们的捍卫者，对抗那个不关心你们的国家。” 因此，凯撒会为人民举办盛大的表演，而这是愤世嫉俗的。我的意思是，他这样做是为了进一步提升自己的政治权力，但他本质上将自己塑造成一个民粹主义者，尽管他渴望成为独裁者。对吧？但这是赢得人民支持的一种方式，因为这是他与其它贵族斗争的工具。</p><p>Lex Fridman<br>(01:29:34) So a dictator in populist clothing.</p><p>莱克斯·弗里德曼<br>(01:29:34) 所以是一个穿着民粹主义外衣的独裁者。</p><p>Gregory Aldrete<br>(01:29:37) Yes.</p><p>格雷戈里·阿尔德雷特<br>(01:29:37) 是的。</p><p>Lex Fridman<br>(01:29:39) But he gets-</p><p>莱克斯·弗里德曼<br>(01:29:39) 但他被——</p><p>Gregory Aldrete<br>(01:29:40) When convenient. Other times, he’ll play to the aristocracy.</p><p>格雷戈里·阿尔德雷特<br>(01:29:40) 在方便的时候（他会扮演民粹）。其他时候，他会迎合贵族阶层。</p><p>Lex Fridman<br>(01:29:44) And when he gets assassinated, another civil war explodes?</p><p>莱克斯·弗里德曼<br>(01:29:44) 当他被刺杀后，另一场内战爆发了吗？</p><p>Gregory Aldrete<br>(01:29:50) That’s an interesting moment, because all these things have been leading up to Caesar and it really is a chain of men. So it starts with this guy, Marius, who was one of the first to start making armies loyal to him, rather than to the state. That’s a step in the wrong direction. Right? The army should be loyal to the state, not to an individual general. They shouldn’t look for him to rewards. Marius breaks that, makes a precedent. One of his protegees is a guy named Sulla. Sulla comes along and he ends up marching on Rome with his army and taking it over. And he says, “Well, I’m just doing it for the good of the state.” But that’s another precedent. Now you’ve had someone attacking their own capital city, even if they say they’re doing it for the right reasons.</p><p>格雷戈里·阿尔德雷特<br>(01:29:50) 这是一个有趣的时刻，因为所有这些事情都指向了凯撒，这确实是一连串的人物。它始于马略这个人，他是最早开始让军队效忠于自己而非国家的人之一。这是一个错误的方向，对吧？军队应该效忠于国家，而不是某个个人将军。他们不应该指望将军给予奖励。马略打破了这一点，开创了先例。他的一个门生名叫苏拉。苏拉随后出现，最终率领军队进军罗马并夺取了控制权。他说：“嗯，我只是为了国家的利益才这么做的。” 但这又是一个先例。现在，有人攻击自己的首都，即使他们声称自己是出于正当理由。</p><p>(01:30:31) Then Pompey comes along, and Pompey just breaks all kinds of things. He starts holding offices when he’s too young to do so. He raises personal armies from his own wealth. He disobeys commands. He manipulates commands. He does all kinds of stuff. But in the end, he sides with the Senate when sort of forced. And finally, Caesar comes along and Caesar’s just shamelessly, “No, it’s about me. I’m going to push it.” And he is the one who wins a civil war against the state and Pompey, takes over Rome and says, “Now, I’m going to be dictator.” And dictator is a traditional office in the Roman state, but dictators were limited to no more than six months in power. And Caesar says, “Well, I’ll be dictator for life,” which of course, is king. He gets killed for it.</p><p>(01:30:31) 然后庞培出现了，庞培打破了各种规矩。他在年龄太小的时候就开始担任官职。他用自己的财富招募私人军队。他不服从命令，操纵命令。他做了各种各样的事情。但最终，在某种压力下，他站在了元老院一边。最后，凯撒出现了，凯撒则厚颜无耻地宣称：“不，这是关于我自己的。我要推进它。” 他是在内战中战胜国家和庞培的人，夺取了罗马，并说：“现在，我要成为独裁官。” 而独裁官是罗马国家的一个传统职位，但独裁官的权力被限制在最多六个月。而凯撒说：“嗯，我将成为终身独裁官”，这当然就是国王了。他因此被杀。</p><p>(01:31:17) So Caesar succeeded in taking over the state as one man, but he couldn’t solve the problem. How do you rule Rome as one person and not get killed for looking like a king? That’s the dilemma, the riddle that Caesar leaves behind him. He did it. He seize power as one guy, but how do you stay alive? How do you come up with something that the people will accept? And Caesar did some other things which are bad. He was arrogant. He didn’t even pretend that the Senate were his equals. He just railroaded them around. He didn’t respect them. He named a month after himself, July, Julius. He did egotistical things. So that pissed people off. They didn’t like it. And when Caesar dies, it’s this interesting moment. The Republic is sort of dead by then. You’re going to have a hard time reviving it. You’ve broken too many precedents, but there’s a power vacuum now. Caesar’s gone, what’s going to happen next?</p><p>(01:31:17) 所以凯撒成功地以一人之力夺取了国家，但他没能解决一个问题：你如何以一个人的身份统治罗马，而又不会因为看起来像国王而被杀？这就是他留下的困境和谜题。他做到了。他以一个人的身份夺取了权力，但你如何能活下来？你如何想出一个能让人民接受的东西？而且凯撒还做了一些其他不好的事情。他很傲慢。他甚至不假装元老院成员是他的同僚。他只是强行压制他们。他不尊重他们。他用自己的名字命名了一个月，即七月（July，源自Julius）。他做了很多自我膨胀的事情。这让人们很生气。他们不喜欢这样。当凯撒死后，这是一个有趣的时刻。那时共和国实际上已经死了。你很难再让它复活。你已经打破了太多的先例，但现在出现了权力真空。凯撒走了，接下来会发生什么？</p><h2 id="Octavian’s-rise"><a href="#Octavian’s-rise" class="headerlink" title="Octavian’s rise"></a>Octavian’s rise</h2><h2 id="屋大维的崛起"><a href="#屋大维的崛起" class="headerlink" title="屋大维的崛起"></a>屋大维的崛起</h2><p>(01:32:18) And you have a whole group of people who want to be the next Caesar. So the most obvious is Mark Antony, who is Caesar’s right-hand man, his lieutenant. He’s a very good general. He’s very charismatic. Everybody expects Mark Antony to just become the next Caesar. But there’s also another of Caesar’s lieutenants, a guy named Lepidus, sort of like Antony, but not quite as great as him. There’s the Senate itself, which wants to reassert its power, kind of become the dominant force in Rome again. There’s the assassins who killed Caesar, led by Brutus, and another guy, Cassius, they now want to seize control. And finally, there’s a really weird dark horse candidate to fill this power vacuum. And that’s Julius Caesar’s grandnephew, who at the time, is a 17-year-old kid named Octavian. Who cares? He’s nobody. Absolutely nobody. But when Caesar’s will is opened after his death, so posthumously read in his will, Caesar posthumously… And this is a little weird, posthumously adopts Octavian as his son. Now again, who cares? Antony gets the troops. Antony gets the money. The other people get everything.<br>奥古斯都的崛起<br>(01:32:18) 当时有一大群人想要成为下一个凯撒。最明显的是马克·安东尼，他是凯撒的得力助手和副手。他是一位非常出色的将军，极具魅力。所有人都预料安东尼会顺理成章地成为下一个凯撒。但还有另一位凯撒的副手，名叫雷必达的人，有点像安东尼，但能力稍逊一筹。元老院本身也想重新确立其权力，希望再次成为罗马的主导力量。刺杀凯撒的刺客们，由布鲁图斯和另一个人卡西乌斯领导，现在也想夺取控制权。最后，还有一个出人意料的黑马候选人，试图填补这一权力真空。他就是尤利乌斯·凯撒的外甥孙，当时只是一个名叫屋大维的17岁少年。谁在乎他呢？他什么都不是，绝对的无名之辈。但当凯撒死后遗嘱被宣读时——也就是死后在遗嘱中被宣读——凯撒死后……这有点奇怪，他死后收养屋大维为自己的儿子。可这又有什么关系呢？安东尼得到了军队，得到了金钱，其他人得到了一切。</p><p>(01:33:26) What does Octavian get? He gets to now rename himself, Gaius Julius Caesar Octavianus. Who cares? Well, around the Mediterranean, there’s about 12 legions full of hardened soldiers who are just used to following a guy named Gaius Julius Caesar. And even though it’s not quite logical, this 18-year-old, he’s now an 18-year-old kid, inherits an army overnight. So he becomes a player in this game for power. And the next 30, 40 years is going to be those groups all vying with one another. There’s another candidate too, Pompey’s son. Pompey was Caesar’s great rival. He has a couple of sons. And one of them, a guy named Sextus Pompey, basically becomes a warlord who seizes control of Sicily, one of the richest provinces, has a whole Navy. He’s vying to be one of the successors too. So for the next 40 years, it’s as you said, another civil war to see which guy emerges. Is it going to be the Senate? Is it going to be the assassins? Is it going to be Antony? Is it going to be Lepidus? Is it going to be Sextus Pompey? Is it going to be Octavian?<br>那么屋大维得到了什么？他现在可以改名为盖乌斯·尤利乌斯·凯撒·屋大维安努斯。谁在乎呢？然而，在地中海地区，有大约12个军团，里面全是身经百战的老兵，他们早已习惯追随一个名叫盖乌斯·尤利乌斯·凯撒的统帅。尽管这听起来不太合逻辑，但这个18岁的年轻人一夜之间继承了一支军队。因此，他成为了这场权力游戏中的一方势力。接下来的三四十年，这些派系将相互激烈争夺。还有一位候选人，庞培的儿子。庞培曾是凯撒的劲敌，他有几个儿子。其中一个名叫小庞培的人，基本上成为了一位军阀，控制了西西里这个最富庶的行省之一，并拥有一支完整的海军。他也试图成为凯撒的继承者之一。因此，接下来的四十年，正如你所说，又是一场内战，看谁能最终胜出。会是元老院吗？会是刺客们吗？会是安东尼吗？会是雷必达吗？会是小庞培吗？还是屋大维？</p><p>Lex Fridman<br>(01:34:31) So now, looking back at all that history, it just feels like history turns on so many interesting accidents. Because Octavian later renamed Augustus, turned out to be actually… It depends on how you define good, but a good king&#x2F;emperor, different than Caesar in terms of humility, at least being able to play, not to piss off everybody. But it could have been so many other people. That could have been the fall of Rome. So it’s a fascinating little turn of history. Maybe Caesar saw something in this individual. It’s not an accident that he was in the will.<br>莱克斯·弗里德曼<br>(01:34:31) 所以现在回望这段历史，感觉历史似乎取决于许多有趣的偶然事件。因为后来改名为奥古斯都的屋大维，最终证明……这取决于你如何定义“好”，但他确实是一位不错的国王&#x2F;皇帝，在谦逊方面与凯撒不同，至少懂得如何周旋，不至于惹怒所有人。但结果本可能由许多其他人获得。那甚至可能导致罗马的覆灭。所以这是历史上一个迷人的转折点。也许凯撒在这个人身上看到了某些特质。他出现在遗嘱中并非偶然。</p><p>Gregory Aldrete<br>(01:35:11) Yeah. I mean, Caesar clearly did see something in him. And Octavian, I mean, to cut to the end, is the one who emerges from all that as the victor. We can talk about how he does it, but he’s the one who ends up in the same position as Caesar. It takes him 30 years, but he defeats all the foes. He’s the sole guy. He now faces Caesar’s riddle. How do you rule Rome as one guy and not get killed? And Octavian, what makes him stand out, what makes him fascinating to me, is he wasn’t a good general. In fact, he was a terrible general. He lost almost every battle he commanded. But what he is, is he’s politically savvy and he’s very good at what today we would call, manipulation of your public image and propaganda. So he basically defeats Mark Antony partially by waging a propaganda war against him.<br>格雷戈里·阿尔德雷特<br>(01:35:11) 是的，凯撒显然在他身上看到了某些东西。至于屋大维，简单来说，他最终从所有竞争者中脱颖而出，成为胜利者。我们可以讨论他是如何做到的，但最终他登上了与凯撒相同的位置。这花了他三十年时间，但他击败了所有敌人，成为唯一的统治者。现在他面临凯撒的难题：如何以一人统治罗马而不被刺杀？而屋大维让我觉得与众不同、引人入胜的地方在于，他并不是一位优秀的将军。事实上，他是一位糟糕的将军。他指挥的几乎每一场战役都以失败告终。但他政治敏锐，非常擅长我们今天所说的“操纵公众形象和宣传”。因此，他基本上是通过发动一场宣传战，部分击败了马克·安东尼。</p><p>Gregory Aldrete<br>(01:36:00) Antony starts out as a legitimate rival, and there are two Romans vying for power. At the end of this war, propaganda war, Octavian has managed to portray Antony as a foreign aggressor, allied with an enemy, king or queen, in this case, Cleopatra, and who is an official enemy of the Roman state, and that’s all propaganda. So, he takes what’s a civil war and makes it look like a war against a foreign enemy. And when Octavian becomes the sole ruler, he looks at what Caesar did wrong, and he very carefully avoids the same mistakes.<br>格雷戈里·阿尔德雷特<br>(01:36:00) 安东尼最初是一位合法的对手，两位罗马人争夺权力。在这场宣传战结束时，屋大维成功地将安东尼描绘成一个外国侵略者，与一个敌人——国王或女王（即克利奥帕特拉）结盟，而她正是罗马国家的官方敌人。这一切都是宣传手段。因此，他将一场内战变成了对外敌的战争。当屋大维成为唯一统治者后，他反思了凯撒的错误，并非常谨慎地避免重蹈覆辙。</p><p>(01:36:41) So, the first thing is just how he lives his life. He’s very modest. He lives in an ordinary house like other aristocrats. He wears just a plain toga, nothing fancy. He’s respectful to the Senate.<br>(01:36:51) He treats them with respect. He eats simple foods. I mean, he’s someone who cared about the reality of power, not the external trappings. Clearly there’s some rulers who love, “I want to dress in fancy clothes. I want to be surrounded by gold.<br>(01:37:05) Everything. This is what makes me feel good.” Octavian is the opposite. He doesn’t care about any of that. He wants real power. And then, the other thing is, how is he going to rule Rome without looking like a king?<br>(01:36:41) 首先是他如何生活。他非常简朴。他住在和其他贵族一样的普通房子里。他只穿一件朴素的托加袍，没有任何华丽装饰。他对元老院表现出尊重。<br>(01:36:51) 他以礼相待。他吃简单的食物。我的意思是，他是一个关心权力实质而非外在形式的人。显然有些统治者喜欢说：“我想穿华丽的衣服，我想被黄金包围。<br>(01:37:05) 一切。这才能让我感觉良好。”屋大维恰恰相反。他根本不在乎这些。他想要的是真正的权力。然后，另一个问题是，他如何在不显得像国王的情况下统治罗马？</p><p>(01:37:16) And his solution to this is brilliant. He basically pretends to resign from all his public offices and not pretends he does. So, he holds no official office. But what he does is he manipulates so that the Roman Senate votes him the powers of the key Roman offices, but not the office itself. So, the highest office in the Roman state is the consul.<br>(01:37:40) Consuls have the power to command armies, do all sorts of things, run meetings of the Senate. Octavian gets voted the powers of a consul so he can command armies control meetings of the Senate, do all this. But he’s not one of the two consuls elected for every year. So, he’s just floating or drifting off to the side of the Roman government. He gets the power of a Tribune, which has all sorts of powers.<br>(01:37:16) 他的解决方案非常巧妙。他基本上假装辞去所有公职，而且并非假装，他确实这样做了。因此，他并不担任任何正式官职。但他操纵局势，让罗马元老院投票授予他关键罗马官职的权力，但不授予官职本身。罗马国家的最高官职是执政官。<br>(01:37:40) 执政官有权指挥军队，处理各种事务，主持元老院会议。屋大维被授予了执政官的权力，因此他可以指挥军队、控制元老院会议、处理所有这些事务。但他并不是每年选举产生的两位执政官之一。因此，他只是漂浮或游离于罗马政府的边缘。他还获得了保民官的权力，这赋予他各种权力。</p><p>(01:38:04) He can veto anything he wants, but he’s not one of the Tribunes elected for anyone. So, the state, the Republic appears to continue as it always has. Each year they hold the same elections, they elect the same number of people, notionally, those people are in charge. But floating off to the side, you have this guy Octavian, who has equivalent power, not just to any one magistrate official, but to all of them. So, any moment he can just pop up and say, “No, let’s not do this.<br>(01:38:31) Let’s do something else.” And he also keeps the army under his personal control.<br>(01:38:04) 他可以否决任何他想否决的事项，但他并不是为任何人选举产生的保民官之一。因此，国家，即共和国，表面上似乎一如既往地运行。每年他们举行相同的选举，选举相同数量的人，名义上这些人掌权。但在一旁游离的屋大维，却拥有相当于所有官员权力的总和，而不仅仅是某一位官员的权力。因此，他随时可以出现并说：“不，我们不要这样做。<br>(01:38:31) 让我们做点别的。” 他还把军队置于自己的个人控制之下。</p><p>Lex Fridman<br>(01:38:36) Isn’t this a fascinating story? What do you think is the psychology of Augustus, of Octavian?<br>莱克斯·弗里德曼<br>(01:38:36) 这难道不是一个迷人的故事吗？你觉得奥古斯都，也就是屋大维的心理是怎样的？</p><p>Gregory Aldrete<br>(01:38:41) Yeah. And he later changed his name to Augustus when he becomes the first emperor. The other thing he does is he hides his power behind all these different names.<br>格雷戈里·阿尔德雷特<br>(01:38:41) 是的。当他成为第一位皇帝后，他后来改名为奥古斯都。他做的另一件事是，用各种不同的头衔来掩盖自己的权力。</p><p>Lex Fridman<br>(01:38:47) The greatest strategy.<br>莱克斯·弗里德曼<br>(01:38:47) 最伟大的策略。</p><p>Gregory Aldrete<br>(01:38:49) Caesar called himself dictator for life, right? So, everybody knew what he was. Octavian. We even have a source that talks about it. He says he wondered what to call himself. “Do I call myself king?<br>(01:38:57) No, he can’t do that. Dictator for life. No way. Maybe I’ll call myself Romulus. That was the founder of Rome. No, no.<br>(01:39:02) Romulus was a king.” And finally, a solution is he takes a bunch of titles, which are all ambiguous, and no one of them sounds that impressive, but collectively they are. So, for example, one of the titles he gets is Augustus, which is something tied to Roman religion. Something that is Augustus in Latin has two possible meanings. One is someone who is Augustus is very pious. They respect the Gods deeply. Well, that sounds nice, doesn’t it? Well, on the other hand, an alternative meaning for Augustus is something that is itself divine. So, is he just a deeply religious, pious person, or is he himself sacred? There’s that ambiguity.<br>格雷戈里·阿尔德雷特<br>(01:38:49) 凯撒称自己为终身独裁官，对吧？所以，每个人都知道他的身份。屋大维。我们甚至有一个史料提到这一点。他说他在思考该称自己为什么。“我该称自己为国王吗？<br>(01:38:57) 不行，他不能这样做。终身独裁官？绝对不行。也许我该称自己为罗慕路斯？那是罗马的建立者。不行，不行。<br>(01:39:02) 罗慕路斯是国王。” 最终，他的解决方案是采用一系列头衔，这些头衔都含糊不清，单个听起来都不太显赫，但合在一起却极具分量。例如，他获得的头衔之一是“奥古斯都”，这与罗马宗教有关。“奥古斯都”在拉丁语中有两种可能的含义。一种是，被称为奥古斯都的人非常虔诚，他们对神祇深怀敬意。这听起来不错，对吧？但另一方面，“奥古斯都”的另一种含义是本身具有神性的事物。那么，他究竟是一个极其虔诚的宗教人士，还是他自己就是神圣的？这种模糊性就在这里。</p><p>(01:39:47) He calls himself Princeps, which means first citizen. “Okay, what the hell does that mean? Am I a citizen just like everybody else? Or am I the first citizen, which means I’m superior to all the others?” So, every title he takes has this weird ambiguity.<br>(01:39:47) 他称自己为“元首”（Princeps），意思是“第一公民”。“好吧，这到底是什么意思？我和所有人一样只是个公民吗？还是说我是第一公民，意味着我比其他所有人都优越？”因此，他采用的每一个头衔都带有这种奇怪的模糊性。</p><p>(01:40:03) He calls himself Imperator, which is traditionally something that soldiers shout at, a victorious general who’s won a battle. And now he takes this as a permanent title. So, it implies he’s a good general. And by the way, it’s from Imperator that we get the word emperor, an empire. So, originally it’s a military title, a spontaneous military acclamation.<br>(01:40:03) 他称自己为“英白拉多”（Imperator），这传统上是士兵们向赢得战役的胜利将军欢呼时喊的口号。而现在，他将其作为永久头衔。因此，这暗示他是一位优秀的将军。顺便说一句，正是从“英白拉多”这个词，我们得到了“皇帝”（emperor）和“帝国”（empire）这两个词。所以，它最初是一个军事头衔，一种自发的军事欢呼。</p><p>Lex Fridman<br>(01:40:25) It’s just fascinating that he figured out a way through public image, through branding to gain power, maintain power, and still pacify the boiling turmoil that led to the civil wars.<br>莱克斯·弗里德曼<br>(01:40:25) 他通过公众形象和品牌塑造来获取权力、维持权力，并平息导致内战的动荡局势，这真是太令人着迷了。</p><p>Gregory Aldrete<br>(01:40:44) Yeah. Well, two things I think work in his favor as well. One is he brings peace and stability. So, by this point, the Romans have experienced a hundred years almost of civil war and chaos. So, at that point, your family, maybe you’ve had family members die in these wars or been prescribed, your property has been confiscated, who knows what. And here’s a guy who brings peace and stability and doesn’t seem oppressive or cruel or whatever.<br>(01:41:12) So, you’re like, “Okay, fine, I don’t care. Maybe he’s killed the Republic, but at least we’re not dying in the streets anymore.” So, that’s a big thing he does.<br>(01:41:21) And secondly, even though Augustus always seemed sickly his constitution, he lives forever. He rules for like 50 years, and by the time he dies, there’s no one literally almost left alive who can remember the Republic. So, at that point, by the time he dies, this is the only system we know.<br>格雷戈里·阿尔德雷特<br>(01:40:44) 是的。我认为还有两点对他有利。一是他带来了和平与稳定。到这个时候，罗马人几乎经历了一百年的内战和混乱。因此，你的家庭可能有人在这些战争中死去，或被定为公敌，财产被没收，谁知道发生了什么。而这个人带来了和平与稳定，看起来既不压迫也不残忍。<br>(01:41:12) 所以你会想：“好吧，无所谓了。也许他杀死了共和国，但至少我们不会再死在街头了。” 这是他做的一件大事。<br>(01:41:21) 其次，尽管奥古斯都看起来一直体弱多病，但他却长寿无比。他统治了大约五十年，到他去世时，几乎已经没有人还活着记得共和国了。因此，到他去世时，这种体制已经成为我们唯一知道的系统。</p><p>Lex Fridman<br>(01:41:43) That’s another just fascinating accident of history, because as we talked about with Alexander the Great, who knows if he lived for another 40 years, if over time the people that hate the new thing die off and then their sons and come into power, that could be a very different story. Maybe we’ll be talking about the [inaudible 01:42:07].<br>莱克斯·弗里德曼<br>(01:41:43) 这是历史上另一个迷人的偶然事件，因为正如我们之前讨论亚历山大大帝时提到的，如果他多活四十年，随着时间推移，那些憎恨新事物的人死去，他们的后代掌权，故事可能会完全不同。也许我们现在谈论的会是[听不清 01:42:07]。</p><p>Gregory Aldrete<br>(01:42:06) That’s a fluke of fate, but it’s hugely influential on history.<br>格雷戈里·阿尔德雷特<br>(01:42:06) 这是命运的偶然，但它对历史产生了巨大影响。</p><p>Lex Fridman<br>(01:42:09) You mentioned Cleopatra. If we go back to that, what role did she play? Another fascinating human being.<br>莱克斯·弗里德曼<br>(01:42:09) 你提到了克利奥帕特拉。如果我们回到那个话题，她扮演了什么角色？她是另一个迷人的历史人物。</p><h2 id="Cleopatra"><a href="#Cleopatra" class="headerlink" title="Cleopatra"></a>Cleopatra</h2><h2 id="克利奥帕特拉"><a href="#克利奥帕特拉" class="headerlink" title="克利奥帕特拉"></a>克利奥帕特拉</h2><p>Gregory Aldrete<br>(01:42:17) Cleopatra is interesting. I mean, she was a direct descendant of one of Alexander the Great’s generals Ptolemy. When Alexander’s empire had broken up Ptolemy, this general had seized control of Egypt, made it his kingdom. And she 10 generations later, is a descendant of this Macedonian general. So, Egypt had been ruled by, in essence, foreigners, these Macedonian dynasty of kings.<br>(01:42:44) And often they literally were ruled by the same dynasty because they had a habit of marrying brothers to sisters. And Cleopatra was in fact originally married to her younger brother. But despite that, she seems to have intensely identified with Egypt. In fact, she seems to have been the first one of all these Ptolemy kings who actually bothered to learn to speak Egyptian. So, she seems to really have cared about Egypt as well.<br>格雷戈里·阿尔德雷特<br>(01:42:17) 克利奥帕特拉很有趣。她是亚历山大大帝的一位将军托勒密的直系后裔。亚历山大帝国瓦解后，这位将军夺取了埃及的控制权，将其变为自己的王国。而她，十代之后，是这位马其顿将军的后裔。因此，埃及实际上一直由外国人——这些马其顿王室——统治。<br>(01:42:44) 而且他们常常确实由同一家族统治，因为他们有兄妹通婚的习惯。克利奥帕特拉事实上最初就嫁给了她的弟弟。但尽管如此，她似乎对埃及有着强烈的认同感。事实上，她似乎是所有托勒密国王中第一个真正费心去学习说埃及语的人。因此，她似乎真的关心埃及。</p><p>(01:43:13) And she was clearly very smart, very clever. And so, she’s living at a time during the late Republic when Rome is having all these civil wars. And Egypt is really the last big independent kingdom left around the shores, the Mediterranean, everything else has been conquered by Rome. So, she is in this very precarious position where clearly she wants to maintain Egyptian independence, but Rome is this juggernaut that’s rolling over everything. She ends up meeting Julius Caesar when Caesar comes to Egypt chasing Pompey, his great rival, after he defeats Pompey, Pompey runs to Egypt thinking he’ll find sanctuary there, and the Egyptians kill him and chop off his head.<br>(01:43:54) And when Caesar lands, they hand it to him and say, “Here have a present.” And she, of course, famously ends up having a love affair with Caesar. Was that a genuine love or was she just using this as a way to try and keep Egypt independent to give it some status? We don’t know. After she does have several kids with Caesar.<br>(01:43:13) 她显然非常聪明，非常机智。她生活在罗马共和国晚期，当时罗马正经历一系列内战。而埃及实际上是地中海沿岸最后一个独立的大王国，其他地区几乎都被罗马征服了。因此，她处于一个非常危险的境地：她显然想维持埃及的独立，但罗马却像一台不可阻挡的机器碾压一切。当凯撒来到埃及追击他的劲敌庞培时，她最终与凯撒相遇。凯撒击败庞培后，庞培逃往埃及，以为能找到庇护所，但埃及人却杀死了他并砍下他的头。<br>(01:43:54) 当凯撒登陆时，他们把头颅递给他，说：“来，这是给你的礼物。” 而她，当然，后来与凯撒发展出一段著名的恋情。这是出于真爱，还是她只是利用这段关系来试图维持埃及的独立和地位？我们不得而知。她后来与凯撒生了几个孩子。</p><p>(01:44:15) After Caesar’s assassinated, and the Roman world is having another civil war between Octavian and Mark Antony. Mark Antony is basing himself in the east. He meets Cleopatra and he has a big love affair with her. And this one seems pretty genuine. I mean, Antony and Cleopatra, there’s a lot of stories about them partying together.<br>(01:44:35) They liked to cosplay and dress up as different gods. So, Cleopatra would dress up as the goddess Isis and Antony would dress up as the god Dionysus in a leopard skin, and they’d have these big parties and stuff, and they end up together fighting against Octavian. And in the end, they’re defeated by Octavian and Antony commits suicide. Cleopatra there’s differing accounts of her death. She may have also killed herself, or she may actually have been killed by Octavian to just get her out of the way.<br>(01:44:15) 凯撒被刺杀后，罗马世界再次爆发内战，这次是在屋大维和马克·安东尼之间。安东尼以东方为基地。他遇见了克利奥帕特拉，并与她展开了一场轰轰烈烈的恋情。这一次看起来相当真诚。我是说，安东尼和克利奥帕特拉，有很多关于他们一起狂欢的故事。<br>(01:44:35) 他们喜欢扮演和装扮成不同的神祇。克利奥帕特拉会打扮成女神伊西斯，而安东尼则会穿上豹皮，打扮成酒神狄俄尼索斯，他们举办盛大的派对等活动。最终，他们联手对抗屋大维。最后，他们被屋大维击败，安东尼自杀身亡。关于克利奥帕特拉的死因，有不同的说法。她可能也是自杀身亡，也可能实际上是被屋大维杀死以除掉障碍。</p><p>(01:45:10) But she’s an interesting figure because she was clearly a very smart woman who managed to keep Egypt alive as an independent state. She seemed to have actually cared about Egypt and identified with it and succeeded at a time with all these famous people in being a real mover and shaker and a force in events.<br>(01:45:10) 但她是一个有趣的人物，因为她显然是一位非常聪明的女性，成功地使埃及作为一个独立国家存续下来。她似乎真的关心埃及并认同它，在这个群星璀璨的时代，她成为了一个真正能影响局势、推动事件发展的关键人物。</p><p>Lex Fridman<br>(01:45:30) I mean, she’s probably one of the most influential women in human history.<br>莱克斯·弗里德曼<br>(01:45:30) 我的意思是，她可能是人类历史上最有影响力的女性之一。</p><p>Gregory Aldrete<br>(01:45:35) She certainly… Again, she’s someone that her image is incredibly important. And I mean, one of the interesting things, the whole question of gender in the Roman world, I mean, this gets into Roman sources, but of course it’s a heavily male dominated history. And I mean, men and women did not have equality in ancient Rome. It’s a male dominated society. It’s misogynist in many ways.<br>(01:45:57) But what I’m constantly struck by is when you start, again, delving into the sources, you always hear, “Okay, well, there was this one woman who was a philosopher, and she’s an exception to the rule. And yeah, okay, she’s fine.” And then, you start looking into, “Oh, and there’s also 60 other female philosophers. Well, it’s not so much an exception anymore. Or Cleopatra is the one queen.<br>(01:46:19) She’s this strong queen.” And then, you look, “Well, there was this other queen here. There was this queen here. There was this queen here who led armies, and here’s another one who led armies.” And again, it’s like, well, are they exceptions to the rule or is just the history that was written, which is written by men a little bit selective in how it portrays them, because the sources are all these male elites who have very definite ideas about women.<br>格雷戈里·阿尔德雷特<br>(01:45:35) 她确实……再次强调，她是一个形象极其重要的人物。我想说的是，一个有趣的问题是罗马世界中的性别问题，这涉及到罗马史料，但当然，这是一部由男性主导的历史。在古罗马，男女并不平等。这是一个男性主导的社会，在许多方面具有厌女倾向。<br>(01:45:57) 但让我一直感到震惊的是，当你再次深入研究史料时，你总是听到：“好吧，有一位女性是哲学家，她是规则的例外。嗯，好吧，她是个特例。” 然后，你开始深入研究，发现：“哦，还有另外60位女性哲学家。” 那么，这就不再是什么例外了。或者说，克利奥帕特拉是唯一的女王。<br>(01:46:19) 她是一位强大的女王。” 然后你再看，“嗯，这里还有另一位女王。这里有一位女王。这里有一位女王曾率领军队，这里还有另一位也曾率领军队。” 再次说明，她们真的是规则的例外，还是仅仅因为书写历史的人都是男性，他们在描绘女性时有所选择，因为史料都来自这些对女性有明确看法的男性精英阶层？</p><p>(01:46:41) The conventional notion has always been that business in the Roman Empire was a male field. Well, but then there’s this woman, Eumachia in Pompeii who actually had the largest building in Pompeii, right on the forum named after her with a giant statue of her. And she was a patron to a bunch of the most important guilds in Pompeii. Okay. She’s the exception to the rule.<br>(01:46:41) 传统的观念一直认为，罗马帝国的商业是男性领域。然而，庞贝的尤马基亚这位女性，实际上拥有庞贝最大的建筑，就坐落在广场上，以她的名字命名，并立有她的巨大雕像。她是庞贝一些最重要行会的赞助人。好吧。她是规则的例外。</p><p>(01:47:02) Oh, but then there’s these other four women we have from Pompeii who also were patrons of guilds. And then, there’s this woman, Plancia Magna in this other place, and she was the most important patron in the town and put up all these statues. So, at some point, when do you start to say, “Well, maybe women did play more of a role, but they just haven’t been recorded in the sources in the way that maybe they deserve to be.”<br>(01:47:02) 哦，但随后我们又发现庞贝还有另外四位女性也是行会的赞助人。然后，还有另一位女性，普兰西娅·玛格娜，在另一个地方，她是该城最重要的赞助人，并竖立了所有这些雕像。那么，在某个时刻，我们什么时候开始说：“也许女性确实扮演了更重要的角色，但她们在史料中的记载方式可能并未得到应有的体现。”</p><p>Lex Fridman<br>(01:47:24) Yeah, that’s a fascinating question. Is it the bias of society, or is it the bias of the historian?<br>莱克斯·弗里德曼<br>(01:47:24) 是的，这是一个非常有趣的问题。究竟是社会的偏见，还是历史学家本人的偏见？</p><p>Gregory Aldrete<br>(01:47:30) Yeah.<br>格雷戈里·阿尔德雷特<br>(01:47:30) 是的。</p><p>Lex Fridman<br>(01:47:31) The bias of the society that the historian is writing about, or the bias of the actual history.<br>莱克斯·弗里德曼<br>(01:47:31) 是历史学家所描述的那个社会的偏见，还是历史本身所带有的偏见？</p><p>Gregory Aldrete<br>(01:47:34) And the bias of the historians who have written history up to this point. I was just writing a lecture, which was about this woman Musa who has a crazy story, and she ties into Augustus, actually. Augustus, his biggest diplomatic triumph that he boasted about constantly was that about 50 years before him, the Romans had sent an expedition into Parthia, this neighboring kingdom led by Crassus, and they’d gotten wiped out. So, it was this big disaster, military disaster. And the standards of the Roman legions, the eagles, that each Roman legion carried, had been captured by the Parthians.<br>格雷戈里·阿尔德雷特<br>(01:47:34) 还有到目前为止撰写历史的历史学家们的偏见。我刚刚在写一堂课，是关于一位名叫穆萨的女性，她的故事非常离奇，而且她实际上与奥古斯都有关。奥古斯都最引以为傲、不断夸耀的外交成就是：大约在他50年前，罗马曾派遣一支远征军进入邻国帕提亚王国，由克拉苏率领，结果全军覆没。这是一场巨大的灾难，一场军事灾难。罗马军团每支部队所携带的军旗——鹰旗——都被帕提亚人俘获了。</p><h2 id="Musa-of-Parthia"><a href="#Musa-of-Parthia" class="headerlink" title="Musa of Parthia"></a>Musa of Parthia</h2><h2 id="帕提亚的穆萨"><a href="#帕提亚的穆萨" class="headerlink" title="帕提亚的穆萨"></a>帕提亚的穆萨</h2><p>(01:48:13) And this is the most humiliating thing that can happen to a Roman legion to have its eagles captured. And Augustus desperately wanted to negotiate with the Parthians to get these eagles returned. Okay? This was his big diplomatic thing. So, he was constantly sending these embassies to Parthia. On one of these embassies, he sent along as a gift to the Parthian King, a slave woman named Musa.<br>帕提亚的穆萨<br>(01:48:13) 对罗马军团而言，军旗被俘是最为耻辱的事情。奥古斯都迫切希望与帕提亚人谈判，取回这些鹰旗。对吧？这是他最重要的外交事务。因此，他不断派遣使团前往帕提亚。在其中一次使团中，他将一名名叫穆萨的女奴作为礼物送给帕提亚国王。</p><p>(01:48:36) Musa seems to have pleased the king of Parthia because she becomes one of his concubines, and then she gives birth to a son by the king, and eventually she becomes upgraded to the level of wife. And Musa eventually murders the Parthian king, arranges it so that her son becomes the king of Parthia, and she’s really ruling the whole empire behind the scenes as his mother. So, this is a literal rags to riches story of a slave, someone who starts out a slave and becomes the queen of an empire, almost as large and powerful as Rome. Okay. But yet, how often do we hear about Musa?<br>(01:48:36) 穆萨似乎很得帕提亚国王的欢心，她先是成为国王的妃嫔之一，后来为国王生下一个儿子，最终被提升为王后。之后，穆萨谋杀了帕提亚国王，安排她的儿子成为帕提亚国王，而她本人则作为母亲在幕后实际统治着整个帝国。因此，这真真切切是一个从奴隶到富翁的故事：一个出身为奴的女子，最终成为几乎与罗马一样庞大而强大的帝国的女王。对吧。但问题是，我们有多常听说穆萨的事迹呢？</p><p>(01:49:22) And when you look in traditional histories of Roman, Parthian relations, and I went and looked at this because I was just writing this lecture, most of those histories didn’t even mention her. They just talked about her son, like he had just come out of nowhere and become the new heir to the Parthian throne when it was all her doing clearly. Now, that’s selective editing of history by historians to downplay the role that this woman played. And there’s a lot of examples like that.<br>(01:49:22) 当你查阅关于罗马与帕提亚关系的传统历史著作时——我之所以去查，是因为我正在写这堂课——大多数历史著作甚至根本没有提到她。它们只谈论她的儿子，仿佛他是凭空出现，成为帕提亚王位的新继承人，而实际上这一切显然都是穆萨一手策划的。这就是历史学家们对历史的选择性编辑，目的是淡化这位女性所起的作用。类似这样的例子还有很多。</p><p>Lex Fridman<br>(01:49:51) That’s fascinating.<br>莱克斯·弗里德曼<br>(01:49:51) 这太有趣了。</p><p>Gregory Aldrete<br>(01:49:52) She got overthrown after a few years. There was a revolution against her, and we don’t know what happened to her then, but she’s a really interesting figure. And by the way, Augustus didn’t negotiate the return of the Parthian standards and got them back, and he was so proud of this that this is what he constantly boasted about. And the most famous statue of Augustus, the Augustus from Prima Porta, which is in the Vatican today, he’s wearing a breastplate. And on the breastplate right in the middle of the stomach is a Parthian handing over a golden eagle legionary standard to a Roman.<br>格雷戈里·阿尔德雷特<br>(01:49:52) 几年后她被推翻了。爆发了一场针对她的革命，我们不知道她后来怎么样了，但她确实是一个非常有趣的人物。顺便说一句，奥古斯都通过外交谈判成功取回了帕提亚的军旗，他对此极为自豪，以至于不断夸耀此事。最著名的奥古斯都雕像，即如今收藏于梵蒂冈的“普里马波尔塔的奥古斯都”，他身穿胸甲。而在胸甲正中央的腹部位置，刻画着一名帕提亚人将一枚金色的鹰旗军旗交给一名罗马人的场景。</p><p>(01:50:23) So, this is what Augustus thought of as his greatest achievement. And that embassy that arranged that was the one that sent Musa to Parthia.<br>(01:50:23) 因此，奥古斯都认为这是他最伟大的成就。而促成这一事件的使团，正是那个将穆萨送往帕提亚的使团。</p><p>Lex Fridman<br>(01:50:32) So, Augustus marks the start of the Roman Empire.<br>莱克斯·弗里德曼<br>(01:50:32) 所以，奥古斯都标志着罗马帝国的开始。</p><h2 id="Augustus’-political-system"><a href="#Augustus’-political-system" class="headerlink" title="Augustus’ political system"></a>Augustus’ political system</h2><h2 id="奥古斯都的政治体系"><a href="#奥古斯都的政治体系" class="headerlink" title="奥古斯都的政治体系"></a>奥古斯都的政治体系</h2><p>格雷戈里·阿尔德雷特</p><p>(01:50:37) 嗯。<br>(01:50:37) 嗯。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:50:37) You’ve written that Octavian Augustus would become Rome’s first emperor, and the political system that he created would endure for the next half a millennium. This system would become the template for countless later empires up through the present day, and he would become the model emperor against whom all subsequent ones would be measured. The culture and history of the Mediterranean Basin, the western world, and even global history itself, were all profoundly shaped and influenced by the actions and legacy of Octavian.<br>(01:50:37) 你曾写道，屋大维·奥古斯都将成为罗马的第一位皇帝，他所创建的政治制度将持续半个世纪。这一制度将成为此后无数帝国的模板，直至今日，他也成为后世所有皇帝衡量自身的标准。地中海盆地、西方世界乃至全球历史本身，都深受屋大维的行动和遗产的深刻影响。</p><p>(01:51:09) He was the founder of the Roman Empire, and we still live today in the world that he created. So, what on the political side of things and maybe beyond, what is the political system that he created?<br>(01:51:09) 他是罗马帝国的缔造者，我们今天依然生活在他所创造的世界之中。那么，在政治方面，甚至更广泛地说，他所创建的政治制度究竟是什么？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:51:24) Well, I mean, I think Octavian&#x2F;Augustus is the same guy, is one of the most influential people in the history because he did found the Roman Empire. So, he’s the one who oversaw this transition from Republic to Empire, and he sets the template which every future emperor follows. So, just in the most obvious way for the next either 500 or 1500 years, depending how long you think the Roman Empire lasted for, everyone is trying to be Augustus. They all take on the same titles. Every Roman emperor after him is Caesar, Augustus, Imperator, Pater patriae, all these titles he has, they take too.<br>(01:51:24) 嗯，我认为屋大维&#x2F;奥古斯都就是同一个人，他是历史上最具影响力的人物之一，因为他确实创立了罗马帝国。正是他主导了从共和国到帝国的过渡，并为所有后继皇帝树立了模板。因此，非常明显的是，在接下来的500年甚至1500年里，具体取决于你认为罗马帝国持续了多久，所有人都试图成为奥古斯都。他们都采用了相同的头衔。他之后的每一位罗马皇帝都称自己为凯撒（Caesar）、奥古斯都（Augustus）、统帅（Imperator）、国父（Pater patriae），这些头衔他拥有，后人也都继承了。</p><p>(01:51:59) And so, he’s hugely influential for Western civilization, all this. But beyond just that literal thing, which is already 500 years, 1500 years, he becomes the paradigm of the good ruler, so of an absolute ruler who is nevertheless just does good things, builds public works as popular. So, if we jump ahead, let’s say to the Middle Ages, the most significant ruler of the early Middle Ages is Charlemagne. He’s the guy who unites most of Europe. He becomes the paradigm for all medieval kings after him.<br>(01:51:59) 因此，他对西方文明产生了巨大的影响。但除了这持续500年或1500年的直接影响之外，他还成为了“贤明统治者”的典范，即一位绝对君主，却仍能行善事、修建公共工程、深得民心。因此，如果我们快进到中世纪，中世纪早期最重要的统治者是查理曼大帝。他统一了欧洲大部分地区，成为后世所有中世纪国王的典范。</p><p>(01:52:35) Well, what is the title that the Pope gives to Charlemagne? Because there’s this famous moment when the Pope acknowledges Charlemagne as the preeminent European king and crowns him on Christmas day of the year 800. And the title that the Pope gives to Charlemagne is Charles, that’s Charlemagne Augustus, Emperor of the Romans. He’s giving him the title of Augustus because that’s the nicest thing he can think of to say to Charlemagne is to say, “You’re the new Augustus. You’re emperor of the Romans.”<br>(01:52:35) 那么，教皇授予查理曼的头衔是什么？因为在历史上有一个著名时刻，教皇承认查理曼是欧洲最杰出的国王，并于公元800年的圣诞节为他加冕。教皇授予查理曼的头衔是“查理，即查理曼·奥古斯都，罗马人的皇帝”。他之所以授予“奥古斯都”这一头衔，是因为对查理曼来说，最好的赞美莫过于说：“你是新的奥古斯都，你是罗马人的皇帝。”</p><p>(01:53:09) So, that image is hugely powerful, and that persists on and on. I mean, even the literal names of most rulers afterwards come from this. In Russia, the Czars are Caesars. That’s where Czar comes from. Prince comes from Princeps, first citizen, one of the titles.<br>(01:53:09) 因此，这一形象极具影响力，并且持续不断。甚至后来大多数统治者的实际名称都源于此。在俄罗斯，“沙皇”（Czars）就是“凯撒”（Caesars），这正是“沙皇”一词的来源。“亲王”（Prince）一词源于“元首”（Princeps），即“第一公民”，这是奥古斯都的头衔之一。</p><p>(01:53:29) Emperor comes from Imperator, one of the titles of Augustus. When Napoleon becomes Emperor, what does he call himself? First consul, which is like Princeps, and then he calls himself emperor. I mean, everybody wants to be this kind of ruler. So, he’s the paradigm of this for the rest of history.<br>(01:53:29) “皇帝”（Emperor）一词源于奥古斯都的头衔之一“统帅”（Imperator）。当拿破仑成为皇帝时，他称自己为什么？先是“第一执政官”（First consul），类似于“元首”（Princeps），然后才称自己为皇帝。可以说，每个人都想成为这种类型的统治者。因此，他为后世树立了永恒的典范。</p><p>(01:53:48) And you can see that as both a positive and a negative legacy. It’s like Alexander. I mean, everybody wants to be the next Alexander. Now, nobody does become the next Alexander. Nobody’s as successful as him.<br>(01:53:48) 你可以从积极和消极两个角度来看待这一遗产。这就像亚历山大一样。每个人都想成为下一个亚历山大。但事实上，没有人能真正成为下一个亚历山大，没有人能像他那样成功。</p><p>(01:54:00) But a lot of people try and you can see that either as, oh, inspirational or awful, because lots of people killed lots of other people and started lots of wars trying to be the next Alexander. At least Augustus has this notion of good rulership that you’re not just a great powerful person, but you’re a good ruler somehow.<br>(01:54:00) 但许多人尝试过，你可以将其视为鼓舞人心，也可以视为灾难，因为许多人为了成为下一个亚历山大而杀害了无数人，发动了无数战争。至少奥古斯都所代表的是一种“贤明统治”的理念，即你不仅是一位强大的人物，更是一位好的统治者。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:54:23) Can you speak to the kind of political system he created? So, how did he consolidate power as you spoke to a bit already, and what role did the Senate now play? How were the laws? Who was the executive? How is power allocated and so on?<br>(01:54:23) 你能谈谈他所创建的那种政治制度吗？那么，他是如何巩固权力的——正如你之前提到的，现在元老院扮演什么角色？法律如何制定？谁是行政首脑？权力是如何分配的等等？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:54:41) Yeah, so once the empire begins, let’s say 27 BC, so in 31 BC, Octavian defeats Antony at the Battle of Actium. So, that’s the moment he becomes the sole ruler. And then, in 27 BC, a couple years later, he settles the Roman Republic is how it’s referred to, which is basically sets up his system. And in this system, on the surface, it all looks the same. You still have a Senate, each year there’s elections, all the Roman citizens vote, they elect magistrates who notionally are in charge of Rome.<br>(01:54:41) 是的，一旦帝国开始，比如说公元前27年，那么在公元前31年，屋大维在亚克兴战役中击败了安东尼。那一刻，他成为了唯一的统治者。然后，在几年后的公元前27年，他“解决了罗马共和国”（这是当时的说法），这实际上就是建立他的体系。在这个体系中，表面上一切看起来都一样。你仍然有元老院，每年都有选举，所有罗马公民投票，他们选举出名义上掌管罗马的官员。</p><p>(01:55:16) But as I mentioned off to the side, you now have this figure of Augustus who controls everything behind the scenes, and that continues. So, this political system he establishes continues. And in reality, I would say Augustus at that point is again a king. It really is one man controlling the state. Even if notionally, it’s still continuing as a republic.<br>(01:55:16) 但正如我之前提到的，现在有了奥古斯都这个人物，他在幕后控制着一切，而且这种情况持续下去。因此，他所建立的这个政治体系得以延续。实际上，我认为奥古斯都在那时又成为了一位国王。这确实是一个人控制着国家，即使名义上，它仍然以共和国的形式继续存在。</p><p>(01:55:41) They are electing magistrates, but the magistrates only do what the emperor tells them. But it’s this formal versus informal power, the formal structure as a republic, the way things really work informally is it’s a monarchy. Now, if you asked Augustus, what did he do? Did you become a king? He said, and he says this explicitly, “No, no, no.<br>(01:55:41) 他们确实在选举官员，但这些官员只做皇帝命令他们做的事。但这是一种正式权力与非正式权力的区别：正式结构是共和国，但实际运作方式是非正式的君主制。现在，如果你问奥古斯都，他做了什么？你成为国王了吗？他会说，而且他明确地说：“不，不，不。</p><p>(01:56:03) What I did is I refounded the Roman Republic.” That’s how he phrases it.<br>(01:56:03) 我所做的，是重建了罗马共和国。”他就是这样表述的。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:56:09) This guy is good at framing.<br>(01:56:09) 这家伙很擅长包装。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:56:11) He’s so good at propaganda. I’ll give you one more example that I love. Augustus actually writes his own autobiography, which is very rare and survives. So, here we have the autobiography of one of the pivotal figures in history. And if you had conquered the world, let’s say starting at the age of 18, what would you call your autobiography?<br>(01:56:11) 他太擅长宣传了。我再给你一个我非常喜欢的例子。奥古斯都实际上写了自己的自传，这非常罕见并且保存了下来。因此，我们拥有了历史上一位关键人物的自传。如果你从18岁开始征服了世界，你会如何命名你的自传？</p><p>(01:56:29) It’d be something like, “How I conquered the world,” right? Augustus calls his, derace quae feci, which the best literal translation is stuff I did. I mean, it’s the most modest title for someone who could have given the most grandiose title. And the first line of it is at the age of 18, when the liberty of the Republic was oppressed by a faction, I defended it. Now, the way I might phrase that sense is at the age of 18, I fought a civil war against another Roman and conquered the Roman state.<br>(01:56:29) 可能会是类似“我是如何征服世界的”这样的标题，对吧？奥古斯都却称他的自传为“Res Gestae Divi Augusti”（即“神之奥古斯都的功业”），最贴切的直译就是“我所做的事情”。对于一个本可以使用最宏大标题的人来说，这可以说是最谦逊的标题了。它的第一句话是：“在我18岁时，当共和国的自由受到一个派系的压迫时，我保卫了它。” 而我可能会这样表述：“在我18岁时，我与另一位罗马人进行了内战，并征服了罗马国家。”</p><p>(01:57:02) But no, he defended the liberty of the republic when it was oppressed by the tyranny of a faction. That’s propaganda, and it works.<br>(01:57:02) 但他却说，他是在一个派系的暴政压迫下保卫了共和国的自由。这就是宣传，而且它奏效了。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:57:11) It is propaganda, but is there a degree to which he also lived it? That kind of humility, establishing that humility is a standard of the way government operates. So, it’s not a literal direct balance of power, but it’s a cultural balance of power where the emperor is not supposed to be a bully and a dictator.<br>(01:57:11) 这确实是宣传，但他是否也在某种程度上践行了这一点？那种谦逊，将谦逊确立为政府运作的标准。因此，这并非字面上的直接权力平衡，而是一种文化上的权力平衡，即皇帝不应成为欺凌者和独裁者。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:57:31) I would really like to know what Romans of his time thought. If you were alive at that moment, would you honestly believe, “Oh, okay, we’ve got this guy Augustus, but he’s brought peace. He’s just keeping in charge for a while until things settle down. We’ve just had a hundred years of civil war. I think we still have a republic,” or would you say, “Nah, we have a king now.”<br>(01:57:31) 我真的很想知道他那个时代的罗马人是怎么想的。如果你生活在那个时代，你会真的相信：“哦，好吧，我们有奥古斯都这个人，但他带来了和平。他只是暂时掌权，直到局势稳定下来。我们刚刚经历了一百年的内战。我认为我们仍然拥有共和国”，还是你会说：“不，我们现在有国王了。”</p><p>(01:57:54) And I don’t know what the answer to that is. I will tell you that it takes 200 years before we have the first Roman source that bluntly calls Augustus a king. So, 200 years, it takes the Romans 200 years to admit to themselves. And that’s a guy who comes along 200 years later and says, “Hey, Augustus, he looks like a king. He acts like a king. Let’s just call him a king, because he had every aspect of a king except the patriae Title.”<br>(01:57:54) 我不知道这个问题的答案是什么。但我要告诉你的是，直到200年后，我们才有了第一个罗马史料直接称奥古斯都为国王。因此，罗马人花了200年才向自己承认这一点。而是一位200年后的家伙出现，说：“嘿，奥古斯都，他看起来像个国王，行为像个国王。我们就称他为国王吧，因为他除了没有‘国王’这个头衔外，拥有国王的一切特质。”</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:58:25) Maybe I’m buying his propaganda, and maybe I’m a sucker for humility, but I suspect that the Romans bought it, and I also suspect he himself believed it. I mean, there is such thing as good kings. There’s kings that understand the downside, the dark side of absolute power and can wield that power properly.<br>(01:58:25) 也许我被他的宣传所蒙蔽了，也许我容易被谦逊所打动，但我怀疑罗马人接受了这一点，我也怀疑他自己相信了这一点。我的意思是，确实存在好国王。有些国王理解绝对权力的弊端和阴暗面，并能恰当地运用这种权力。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:58:48) And to give both sides here, Augustus wasn’t all nice. I mean, there were moments where he was extremely cruel. So, early in his career when he’s still fighting, when he’s… for power, he goes all in on prescriptions, which is where he and Anty and other people basically post lists of their enemies and say, “It’s legal for anyone to kill these people.” And so, hundreds are massacred there, including Cicero, the Great Order is prescribed and killed. There’s moments when he’s really cruel.<br>(01:58:48) 为了公平起见，奥古斯都并非总是仁慈的。我的意思是，他也有极其残忍的时刻。例如，他职业生涯早期，当他仍在为权力而战时，他全力推行“公敌宣告”，即他与安东尼等人公开列出敌人的名单，并宣布“任何人都可以合法地杀死这些人”。因此，数百人遭到屠杀，包括西塞罗在内的“伟大秩序”成员被宣告并杀害。他确实有非常残忍的时候。</p><p>(01:59:16) One slave once gets him angry, and he has him tortured in particularly cruel manner. So, I mean, on the one hand, he had this clemency. On the other hand, he could be really hard-nosed and hard edged, and I think he was a very calculating person.<br>(01:59:16) 有一次，一个奴隶惹他生气，他就让人以极其残忍的方式折磨那个奴隶。因此，一方面，他表现出仁慈；另一方面，他又可能非常冷酷无情。我认为他是一个非常精于算计的人。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(01:59:30) Yeah. So, the thing I would love to know is what he was actually behind the mask.<br>(01:59:30) 是的。所以，我最想知道的是，面具背后的他究竟是什么样的人。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(01:59:36) Yes. I mean, that to me is one of those, if you could invite a historical person to dinner or whatever, I want to know what the real Augustus was, what he really thought he was doing, because he’s an enigma and he has this great moment when he dies. What’s his dying lines on his deathbed? He says, “If I’ve played my part, well dismiss me from the stage with applause.”<br>(01:59:36) 是的。对我来说，这正是那种问题：如果你能邀请一位历史人物共进晚餐，我想知道真正的奥古斯都是什么样的，他真正认为自己在做什么，因为他是一个谜。他临终时有一段精彩的话。他在临终时说了什么？他说：“如果我演好了我的角色，那就请以掌声送我下台吧。”</p><p>(01:59:57) So, he’s seeing himself as an actor that his whole life was acting this role, which is again, all that manipulation and public image. He was brilliant at that. But who’s the real guy? What was behind that image?<br>(01:59:57) 因此，他将自己视为一名演员，他的一生都在扮演这个角色，这再次体现了他所有的操纵和公众形象。他在这方面非常出色。但真实的他是谁？那个形象背后是什么？</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(02:00:09) And by the way, as long as we’re talking about brutality, I think you’ve mentioned in a few places that there’s a lot of brutality going on. At the time, Caesar just killing very large numbers of people brutally.<br>(02:00:09) 顺便说一句，既然我们谈到了残暴，我认为你在几个地方都提到了当时存在着大量的残暴行为。凯撒当时只是以极其残暴的方式杀死了大量的人。</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(02:00:28) I mean, Caesar, his campaigns in Gaul are interesting because for a long time they were held up as, oh, genius general. Look at the amazing things he did. But another way to view it is he provoked and he truly provoked a war with people who were not that interested in fighting Rome and just repeatedly attacked different tribes for the sole purpose of building up his career, his prestige, his status, gaining territory, making himself wealthier. And he basically conquers all of modern France and Belgium and some of Switzerland. So, this is a big chunk of Europe gets conquered.<br>(02:00:28) 我的意思是，凯撒在高卢的战役很有趣，因为长期以来，它们被奉为“天才将军”的典范。看看他所做的惊人之事。但另一种看法是，他挑起了战争，而且确实是挑起了与那些对与罗马作战并不那么感兴趣的民族的战争，并且一再攻击不同的部落，唯一目的就是提升自己的职业生涯、声望、地位，获取领土，让自己更富有。他基本上征服了现代法国、比利时的全部以及瑞士的一部分。因此，欧洲的一大块地区被征服了。</p><p>(02:01:06) Hundreds of thousands of people killed, hundreds of thousands of people enslaved to further one guy’s career. I mean, if you wanted, could call Caesar a war criminal, and I think that wouldn’t be unfair. But on the other hand, some people see him as a great hero. I mean, to talk about history and its reception, it’s quite interesting to see how Caesar has been viewed by different generations. So, at different points in time, the received wisdom on Caesar was very different.<br>(02:01:06) 数十万人被杀，数十万人被奴役，只为推进一个人的事业。我的意思是，如果你愿意，可以称凯撒为战争罪犯，我认为这并不算不公平。但另一方面，有些人将他视为伟大的英雄。谈论历史及其接受度，观察不同世代如何评价凯撒是非常有趣的。因此，在不同的历史时期，人们对凯撒的普遍看法大相径庭。</p><p>(02:01:37) So, back in the, let’s say the 1920s or ’30s, there were a number of scholarly things written which looked at Caesar as an admirable figure. He’s a strong man who knows what Rome needed and was going to give it to them. And of course, that’s the era when fascism was trendy and was seen as a positive thing. And then, you get Hitler and World War II and all of sudden fascism is not so favored anymore. And then, in that post-war generation, all of a sudden Caesar’s terrible.<br>(02:01:37) 例如，在20世纪20年代或30年代，有许多学术著作将凯撒视为一个值得钦佩的人物。他是一个知道罗马需要什么并准备给予他们的人。当然，那正是法西斯主义盛行并被视为积极事物的时代。然后，希特勒和第二次世界大战爆发，法西斯主义突然不再受欢迎。在战后的一代人中，凯撒突然变得糟糕透顶。</p><p>(02:02:05) He’s a dictator. He is destroying the Republic. So, often histories that are written tell you a lot more about the time they’re written than they do about the subject they’re written about.<br>(02:02:05) 他是一个独裁者。他正在摧毁共和国。因此，所写的历史往往更多地揭示了写作的时代，而非所写主题本身。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(02:02:17) Do we know what did Hitler or Stalin think about the Roman Empire?<br>(02:02:17) 我们知道希特勒或斯大林对罗马帝国的看法吗？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(02:02:22) I mean, certainly they borrow a lot of the trappings. I mean, Nazi, Germany borrows a lot of iconography from ancient Rome. I mean, they carry it around little military standards with eagles on them, just like the Romans. But then everybody does that. I mean, the US has eagles as their standards.<br>(02:02:22) 我的意思是，他们当然借鉴了很多外在形式。纳粹德国从古罗马借鉴了许多象征符号。例如，他们携带带有鹰标志的小型军旗，就像罗马人一样。但后来每个人都在这么做。美国也以鹰作为他们的标志。</p><p>(02:02:38) Mussolini had them. Napoleon had eagle standards for his military. So, a lot of people like that imagery.<br>(02:02:38) 墨索里尼有它们。拿破仑为他的军队使用鹰形军旗。因此，许多人都喜欢这种形象。</p><p>Lex Fridman<br>莱克斯·弗里德曼</p><p>(02:02:49) You mentioned Cicero. He’s a fascinating figure. On the topic of Roman oratory, who was Cicero?<br>(02:02:49) 你提到了西塞罗。他是一个非常有趣的人物。关于罗马雄辩术的话题，西塞罗是谁？</p><p>Gregory Aldrete<br>格雷戈里·阿尔德雷特</p><p>(02:02:56) Cicero was a new man. So, he’s someone who didn’t have famous ancestors. So, he was at a disadvantage. And I think Cicero is really interesting for a couple of reasons. One is he wrote an incredible amount.<br>(02:02:56) 西塞罗是一位“新人”。他出身于没有著名祖先的家庭，因此处于不利地位。我认为西塞罗之所以非常有趣，有几个原因。其中之一是他写下了难以置信的大量著作。</p><p>(02:03:09) I think we have almost more words from Cicero than any other author that survived, and it’s all kinds of stuff. It’s philosophical treatises, it’s books about how to be a good public speaker. He published volume after volume of his personal letters to his friends. He published these things. So, there’s tons of stuff from him.<br>(02:03:09) 我认为，我们拥有的西塞罗的文字几乎比任何其他幸存下来的作者都多，而且内容包罗万象。有哲学论著，有关于如何成为一名优秀演说家的书籍。他出版了一卷又一卷写给朋友的私人信件。他出版了这些东西。因此，关于他的资料非常丰富。</p>]]></content>
    
    
    <categories>
      
      <category>访谈翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lex Fridman</tag>
      
      <tag>格雷戈里・奥尔德雷特</tag>
      
      <tag>Gregory Aldrete</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>风险投资的困境</title>
    <link href="/2025/09/01/the-venture-capital-squeeze/"/>
    <url>/2025/09/01/the-venture-capital-squeeze/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Venture-Capital-Squeeze"><a href="#The-Venture-Capital-Squeeze" class="headerlink" title="The Venture Capital Squeeze"></a>The Venture Capital Squeeze</h1><p><strong>风险投资困境</strong></p><p>原文链接: <a href="https://paulgraham.com/vcsqueeze.html">https://paulgraham.com/vcsqueeze.html</a></p><p>November 2005</p><p>In the next few years, venture capital funds will find themselves squeezed from four directions. They’re already stuck with a seller’s market, because of the huge amounts they raised at the end of the Bubble and still haven’t invested. This by itself is not the end of the world. In fact, it’s just a more extreme version of the norm in the VC business: too much money chasing too few deals.<br>未来几年，风险投资基金将面临来自四个方面的挤压。由于在互联网泡沫末期筹集了巨额资金却仍未完成投资，它们已然陷入卖方市场的困境。就这一点本身而言，并非世界末日。事实上，这只是风险投资行业常态的极端表现：资金过多，而优质交易机会过少。</p><p>Unfortunately, those few deals now want less and less money, because it’s getting so cheap to start a startup. The four causes: open source, which makes software free; Moore’s law, which makes hardware geometrically closer to free; the Web, which makes promotion free if you’re good; and better languages, which make development a lot cheaper.<br>遗憾的是，如今即便是这些为数不多的交易，所需资金也越来越少 —— 因为创办一家初创企业的成本正变得极低。背后有四大原因：一是开源软件的出现，使得软件可以免费获取；二是摩尔定律的作用，让硬件成本呈几何级数下降，近乎免费；三是互联网的普及，只要产品足够优秀，就能实现免费推广；四是编程语言的改进，大幅降低了开发成本。</p><p>When we started our startup in 1995, the first three were our biggest expenses. We had to pay $5000 for the Netscape Commerce Server, the only software that then supported secure http connections. We paid $3000 for a server with a 90 MHz processor and 32 meg of memory. And we paid a PR firm about $30,000 to promote our launch.<br>1995 年我们创办自己的初创企业时，上述前三项是最大的开支。当时，我们花了 5000 美元购买网景商业服务器（Netscape Commerce Server）—— 这是当时唯一支持安全 HTTP 连接的软件；花 3000 美元买了一台处理器频率为 90 兆赫兹、内存仅 32 兆的服务器；还向一家公关公司支付了约 3 万美元，用于推广产品发布。</p><p>Now you could get all three for nothing. You can get the software for free; people throw away computers more powerful than our first server; and if you make something good you can generate ten times as much traffic by word of mouth online than our first PR firm got through the print media.<br>而现在，要获得这三样东西完全不用花钱。软件可以免费获取；人们丢弃的电脑，性能都比我们当初那台服务器更强；而且只要你做出好产品，通过在线口碑获得的流量，可能是我们当初那家公关公司通过平面媒体宣传获得的十倍之多。</p><p>And of course another big change for the average startup is that programming languages have improved– or rather, the median language has. At most startups ten years ago, software development meant ten programmers writing code in C++. Now the same work might be done by one or two using Python or Ruby.<br>当然，对普通初创企业而言，另一个重大变化是编程语言的进步 —— 更准确地说，是主流编程语言的进步。十年前，大多数初创企业的软件开发工作，需要十名程序员用 C++ 编写代码；而现在，一两名程序员使用 Python 或 Ruby 就能完成同样的工作。</p><p>During the Bubble, a lot of people predicted that startups would outsource their development to India. I think a better model for the future is David Heinemeier Hansson, who outsourced his development to a more powerful language instead. A lot of well-known applications are now, like BaseCamp, written by just one programmer. And one guy is more than 10x cheaper than ten, because (a) he won’t waste any time in meetings, and (b) since he’s probably a founder, he can pay himself nothing.<br>互联网泡沫时期，很多人预测初创企业会将开发工作外包到印度。但我认为，未来更优的模式是大卫・海涅迈尔・汉森（David Heinemeier Hansson）所采用的方式 —— 他没有将开发外包，而是选择了一种更高效的编程语言。如今，许多知名应用（如 BaseCamp）都仅由一名程序员编写。而且，一名程序员的成本远低于十名程序员的十分之一，原因有二：一是他不会在会议上浪费时间；二是由于他很可能是公司创始人，可以不向自己支付薪水。</p><p>Because starting a startup is so cheap, venture capitalists now often want to give startups more money than the startups want to take. VCs like to invest several million at a time. But as one VC told me after a startup he funded would only take about half a million, “I don’t know what we’re going to do. Maybe we’ll just have to give some of it back.” Meaning give some of the fund back to the institutional investors who supplied it, because it wasn’t going to be possible to invest it all.<br>由于创办初创企业的成本极低，如今风险投资家往往想给初创企业注资，但其提供的资金规模却超出了初创企业的需求。风险投资家通常倾向于一次性投资数百万美元。然而，有一位风险投资家曾告诉我，他投资的一家初创企业只接受了约 50 万美元，他说：“我不知道该怎么办了，或许我们只能把一部分资金退回去。” 这意味着要将部分基金退还给提供资金的机构投资者，因为根本无法将所有资金都投出去。</p><p>Into this already bad situation comes the third problem: Sarbanes-Oxley. Sarbanes-Oxley is a law, passed after the Bubble, that drastically increases the regulatory burden on public companies. And in addition to the cost of compliance, which is at least two million dollars a year, the law introduces frightening legal exposure for corporate officers. An experienced CFO I know said flatly: “I would not want to be CFO of a public company now.”<br>在这已然糟糕的局面下，第三个问题又接踵而至：《萨班斯 - 奥克斯利法案》（Sarbanes-Oxley Act）。该法案在互联网泡沫破灭后出台，大幅加重了上市公司的监管负担。除了每年至少 200 万美元的合规成本外，该法案还让公司高管面临极大的法律风险。我认识的一位资深首席财务官（CFO）直言不讳地说：“现在我可不想担任上市公司的 CFO。”</p><p>You might think that responsible corporate governance is an area where you can’t go too far. But you can go too far in any law, and this remark convinced me that Sarbanes-Oxley must have. This CFO is both the smartest and the most upstanding money guy I know. If Sarbanes-Oxley deters people like him from being CFOs of public companies, that’s proof enough that it’s broken.<br>你可能会认为，在负责任的公司治理方面，做得再多也不为过。但任何法律都可能存在过度干预的问题，而这位 CFO 的话让我确信，《萨班斯 - 奥克斯利法案》显然做得过了头。这位 CFO 是我认识的人中，既聪明又正直的财务专家。如果该法案能让像他这样的人都不愿担任上市公司 CFO，那就足以证明法案本身存在问题。</p><p>Largely because of Sarbanes-Oxley, few startups go public now. For all practical purposes, succeeding now equals getting bought. Which means VCs are now in the business of finding promising little 2-3 man startups and pumping them up into companies that cost $100 million to acquire. They didn’t mean to be in this business; it’s just what their business has evolved into.<br>很大程度上受《萨班斯 - 奥克斯利法案》影响，如今很少有初创企业选择上市。实际上，对现在的初创企业而言，“成功” 基本等同于 “被收购”。这意味着风险投资家如今的业务，变成了寻找有潜力的小型初创企业（通常只有 2-3 人），然后将其 “包装壮大”，使其达到能以 1 亿美元被收购的规模。他们并非有意进入这样的业务领域，这只是行业发展演变的结果。</p><p>Hence the fourth problem: the acquirers have begun to realize they can buy wholesale. Why should they wait for VCs to make the startups they want more expensive? Most of what the VCs add, acquirers don’t want anyway. The acquirers already have brand recognition and HR departments. What they really want is the software and the developers, and that’s what the startup is in the early phase: concentrated software and developers.<br>于是第四个问题出现了：收购方开始意识到，他们可以 “批量低价收购” 初创企业。何必等风险投资家介入，让自己心仪的初创企业身价上涨呢？毕竟，风险投资家为初创企业增加的大部分价值，收购方其实并不需要 —— 收购方本身已经拥有品牌知名度和人力资源部门。他们真正想要的是软件和开发团队，而初创企业在早期阶段恰好具备这两点：核心软件和精干的开发团队。</p><p>Google, typically, seems to have been the first to figure this out. “Bring us your startups early,” said Google’s speaker at the Startup School. They’re quite explicit about it: they like to acquire startups at just the point where they would do a Series A round. (The Series A round is the first round of real VC funding; it usually happens in the first year.) It is a brilliant strategy, and one that other big technology companies will no doubt try to duplicate. Unless they want to have still more of their lunch eaten by Google.<br>谷歌（Google）向来是行业先行者，似乎是最早意识到这一点的公司。在初创企业学院（Startup School）的活动中，谷歌代表表示：“尽早把你们的初创企业带过来。” 他们的意图很明确：喜欢在初创企业即将进行 A 轮融资时对其进行收购。（A 轮融资是初创企业首次获得真正意义上的风险投资，通常发生在成立后的第一年。）这是一项极具远见的策略，毫无疑问，其他大型科技公司也会纷纷效仿 —— 除非它们愿意眼睁睁看着更多市场份额被谷歌抢占。</p><p>Of course, Google has an advantage in buying startups: a lot of the people there are rich, or expect to be when their options vest. Ordinary employees find it very hard to recommend an acquisition; it’s just too annoying to see a bunch of twenty year olds get rich when you’re still working for salary. Even if it’s the right thing for your company to do.<br>当然，谷歌在收购初创企业方面有一个优势：公司里很多人要么已经很富有，要么在股票期权兑现后也将变得富有。而对普通公司的员工来说，很难主动提议收购初创企业 —— 看着一群 20 多岁的年轻人一夜暴富，自己却还在拿固定薪水，这种感觉实在令人不快，即便收购对公司而言是正确的选择。</p><p>The Solution (s)<br>解决办法</p><p>Bad as things look now, there is a way for VCs to save themselves. They need to do two things, one of which won’t surprise them, and another that will seem an anathema.<br>尽管目前形势不容乐观，但风险投资家仍有办法自救。他们需要做两件事：一件事在他们意料之中，另一件事则可能让他们难以接受。</p><p>Let’s start with the obvious one: lobby to get Sarbanes-Oxley loosened. This law was created to prevent future Enrons, not to destroy the IPO market. Since the IPO market was practically dead when it passed, few saw what bad effects it would have. But now that technology has recovered from the last bust, we can see clearly what a bottleneck Sarbanes-Oxley has become.<br>先从那件显而易见的事说起：通过游说推动《萨班斯 - 奥克斯利法案》的松绑。该法案的初衷是防止未来再出现安然（Enron）那样的财务丑闻，而非摧毁 IPO（首次公开发行）市场。法案通过时，IPO 市场本就几乎停滞，因此很少有人意识到它会带来何种负面影响。但如今，科技行业已从上次的衰退中复苏，我们能清楚地看到，《萨班斯 - 奥克斯利法案》已成为阻碍行业发展的瓶颈。</p><p>Startups are fragile plants—seedlings, in fact. These seedlings are worth protecting, because they grow into the trees of the economy. Much of the economy’s growth is their growth. I think most politicians realize that. But they don’t realize just how fragile startups are, and how easily they can become collateral damage of laws meant to fix some other problem.<br>初创企业就像脆弱的植物 —— 实际上更像是幼苗。这些幼苗值得保护，因为它们终将长成支撑经济的 “大树”。经济的增长，在很大程度上就是初创企业的成长。我认为大多数政客都明白这一点，但他们没有意识到初创企业有多脆弱，也没意识到，在旨在解决其他问题的法律面前，初创企业很容易成为 “附带受害者”。</p><p>Still more dangerously, when you destroy startups, they make very little noise. If you step on the toes of the coal industry, you’ll hear about it. But if you inadvertantly squash the startup industry, all that happens is that the founders of the next Google stay in grad school instead of starting a company.<br>更危险的是，初创企业即便被 “摧毁”，也不会发出太大声响。如果你损害了煤炭行业的利益，肯定会遭到强烈反对；但如果你无意中打压了初创企业行业，后果不过是下一个谷歌的创始人选择继续读研究生，而不是创办公司 —— 这种损失悄无声息。</p><p>My second suggestion will seem shocking to VCs: let founders cash out partially in the Series A round. At the moment, when VCs invest in a startup, all the stock they get is newly issued and all the money goes to the company. They could buy some stock directly from the founders as well.<br>我的第二个建议可能会让风险投资家感到震惊：允许创始人在 A 轮融资时部分套现。目前，当风险投资家向初创企业注资时，他们获得的所有股份都是新发行的，投入的资金也全部归入公司账户。但实际上，他们也可以直接从创始人手中购买部分股份。</p><p>Most VCs have an almost religious rule against doing this. They don’t want founders to get a penny till the company is sold or goes public. VCs are obsessed with control, and they worry that they’ll have less leverage over the founders if the founders have any money.<br>大多数风险投资家对此有一条近乎 “神圣不可侵犯” 的规定：禁止这么做。他们认为，在公司被收购或上市前，创始人不应获得任何收益。风险投资家极度看重控制权，他们担心一旦创始人有了钱，自己对创始人的影响力就会减弱。</p><p>This is a dumb plan. In fact, letting the founders sell a little stock early would generally be better for the company, because it would cause the founders’ attitudes toward risk to be aligned with the VCs’. As things currently work, their attitudes toward risk tend to be diametrically opposed: the founders, who have nothing, would prefer a 100% chance of $1 million to a 20% chance of $10 million, while the VCs can afford to be “rational” and prefer the latter.<br>这种想法很不明智。事实上，允许创始人提前出售少量股份，通常对公司更有利 —— 因为这能让创始人与风险投资家的风险态度保持一致。而目前的情况是，双方的风险态度往往截然相反：创始人通常没什么资产，他们更愿意选择有 100% 把握获得 100 万美元，而非有 20% 机会获得 1000 万美元；但风险投资家有能力承担风险，会 “理性地” 选择后者。</p><p>Whatever they say, the reason founders are selling their companies early instead of doing Series A rounds is that they get paid up front. That first million is just worth so much more than the subsequent ones. If founders could sell a little stock early, they’d be happy to take VC money and bet the rest on a bigger outcome.<br>不管风险投资家怎么说，创始人选择提前出售公司而非进行 A 轮融资，真正原因是能提前拿到钱。对创始人而言，第一笔 100 万美元的价值，远高于后续更多的资金。如果创始人能提前出售少量股份套现，他们会更愿意接受风险投资，然后将剩余赌注押在更长远、更大的回报上。</p><p>So why not let the founders have that first million, or at least half million? The VCs would get same number of shares for the money. So what if some of the money would go to the founders instead of the company?<br>那么，为什么不让创始人拿到这第一笔 100 万美元（至少 50 万美元）呢？风险投资家用同样的资金，依然能获得相同数量的股份。即便部分资金流入创始人手中而非公司账户，又有什么关系呢？</p><p>Some VCs will say this is unthinkable—that they want all their money to be put to work growing the company. But the fact is, the huge size of current VC investments is dictated by the structure of VC funds, not the needs of startups. Often as not these large investments go to work destroying the company rather than growing it.<br>一些风险投资家会说这简直不可想象 —— 他们希望所有资金都能用于公司发展。但事实是，当前风险投资的巨额规模，是由风险投资基金的结构决定的，而非初创企业的实际需求。这些大额投资往往非但不能助力公司成长，反而可能对公司造成损害。</p><p>The angel investors who funded our startup let the founders sell some stock directly to them, and it was a good deal for everyone. The angels made a huge return on that investment, so they’re happy. And for us founders it blunted the terrifying all-or-nothingness of a startup, which in its raw form is more a distraction than a motivator.<br>当初为我们初创企业提供资金的天使投资人，允许创始人直接向他们出售部分股份，这对各方都是一笔好交易。天使投资人凭借这笔投资获得了丰厚回报，十分满意；对我们创始人来说，这也缓解了初创企业 “要么大获全胜，要么一败涂地” 的巨大压力 —— 这种原始的压力更多时候是干扰，而非动力。</p><p>If VCs are frightened at the idea of letting founders partially cash out, let me tell them something still more frightening: you are now competing directly with Google.<br>如果风险投资家对允许创始人部分套现的想法感到担忧，那我要告诉他们一件更令人担忧的事：你们现在的直接竞争对手是谷歌。</p><p>Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢特雷弗・布莱克韦尔（Trevor Blackwell）、萨拉・哈林、杰西卡・利文斯顿、罗伯特・莫里斯审阅本文的初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些创业思路</title>
    <link href="/2025/09/01/ideas-for-startups/"/>
    <url>/2025/09/01/ideas-for-startups/</url>
    
    <content type="html"><![CDATA[<h1 id="Ideas-for-Startups"><a href="#Ideas-for-Startups" class="headerlink" title="Ideas for Startups"></a>Ideas for Startups</h1><p><strong>创业思路</strong></p><p>原文链接: <a href="https://paulgraham.com/ideas.html">https://paulgraham.com/ideas.html</a></p><p>October 2005</p><p>(This essay is derived from a talk at the 2005 Startup School.)<br>（本文改编自 2005 年创业学院的一次演讲内容。）</p><p>How do you get good ideas for startups? That’s probably the number one question people ask me.<br>如何找到好的创业思路？这或许是人们问我最多的问题。</p><p>I’d like to reply with another question: why do people think it’s hard to come up with ideas for startups?<br>我的回应则是另一个问题：为什么人们会觉得想出创业思路很难？</p><p>That might seem a stupid thing to ask. Why do they think it’s hard? If people can’t do it, then it is hard, at least for them. Right?<br>这个问题听起来可能有些荒唐。他们为什么会觉得难？如果人们做不到，那这件事确实难，至少对他们而言是这样，不是吗？</p><p>Well, maybe not. What people usually say is not that they can’t think of ideas, but that they don’t have any. That’s not quite the same thing. It could be the reason they don’t have any is that they haven’t tried to generate them.<br>但或许并非如此。人们通常说的不是 “想不出思路”，而是 “没有思路”，这两者可不一样。他们没有思路，可能只是因为从未尝试过去主动挖掘思路。</p><p>I think this is often the case. I think people believe that coming up with ideas for startups is very hard– that it must be very hard– and so they don’t try do to it. They assume ideas are like miracles: they either pop into your head or they don’t.<br>我认为情况往往如此。人们认定想出创业思路难度极大 —— 而且是 “必然” 难度极大 —— 于是便干脆不做尝试。他们觉得思路就像奇迹，要么突然冒出来，要么就永远不会出现。</p><p>I also have a theory about why people think this. They overvalue ideas. They think creating a startup is just a matter of implementing some fabulous initial idea. And since a successful startup is worth millions of dollars, a good idea is therefore a million dollar idea.<br>对于人们为何会有这种想法，我还有一个看法：他们把思路看得太重要了。他们觉得创办一家公司，无非就是将某个绝妙的初始思路付诸实践。而既然一家成功的公司价值数百万美元，那么一个好思路自然就是 “价值百万美元的思路”。</p><p>If coming up with an idea for a startup equals coming up with a million dollar idea, then of course it’s going to seem hard. Too hard to bother trying. Our instincts tell us something so valuable would not be just lying around for anyone to discover.<br>要是想出创业思路就等同于想出 “价值百万美元的思路”，那这件事看起来当然难，难到让人懒得去尝试。直觉告诉我们，如此珍贵的东西不可能就摆在那里，等着任何人去发现。</p><p>Actually, startup ideas are not million dollar ideas, and here’s an experiment you can try to prove it: just try to sell one. Nothing evolves faster than markets. The fact that there’s no market for startup ideas suggests there’s no demand. Which means, in the narrow sense of the word, that startup ideas are worthless.<br>但实际上，创业思路并非 “价值百万美元的思路”，你可以做个实验来验证：试着把一个创业思路卖出去。没有什么比市场变化更快的了。创业思路没有市场，这一事实说明它没有需求。从狭义上讲，这意味着创业思路本身毫无价值。</p><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h2 id="问题导向"><a href="#问题导向" class="headerlink" title="问题导向"></a>问题导向</h2><p>The fact is, most startups end up nothing like the initial idea. It would be closer to the truth to say the main value of your initial idea is that, in the process of discovering it’s broken, you’ll come up with your real idea.<br>事实上，大多数公司最终的形态与初始思路相去甚远。更接近真相的说法是：初始思路的主要价值在于，在你发现它行不通的过程中，你会找到真正适合自己的思路。</p><p>The initial idea is just a starting point– not a blueprint, but a question. It might help if they were expressed that way. Instead of saying that your idea is to make a collaborative, web-based spreadsheet, say: could one make a collaborative, web-based spreadsheet? A few grammatical tweaks, and a woefully incomplete idea becomes a promising question to explore.<br>初始思路只是一个起点 —— 它不是蓝图，而是一个问题。如果能这样看待初始思路，或许会很有帮助。与其说 “我的思路是做一款基于网页的协作式电子表格”，不如说 “我们能不能做一款基于网页的协作式电子表格？” 只需稍作语法调整，一个极不完整的思路就变成了一个值得探索的有前景的问题。</p><p>There’s a real difference, because an assertion provokes objections in a way a question doesn’t. If you say: I’m going to build a web-based spreadsheet, then critics– the most dangerous of which are in your own head– will immediately reply that you’d be competing with Microsoft, that you couldn’t give people the kind of UI they expect, that users wouldn’t want to have their data on your servers, and so on.<br>这两者有着本质区别，因为陈述句会引发质疑，而疑问句不会。如果你说 “我要做一款基于网页的电子表格”，质疑者 —— 其中最危险的就是你自己内心的声音 —— 会立刻反驳：你这是在和微软竞争；你没法做出用户期待的界面；用户不会愿意把数据存到你的服务器上，等等。</p><p>A question doesn’t seem so challenging. It becomes: let’s try making a web-based spreadsheet and see how far we get. And everyone knows that if you tried this you’d be able to make something useful. Maybe what you’d end up with wouldn’t even be a spreadsheet. Maybe it would be some kind of new spreadsheet-like collaboration tool that doesn’t even have a name yet. You wouldn’t have thought of something like that except by implementing your way toward it.<br>而疑问句就不会带来这种压迫感。它会变成：“咱们试试做一款基于网页的电子表格，看看能做到什么程度。” 而且大家都知道，只要去尝试，总能做出一些有用的东西。最终做出的可能根本不是电子表格，或许是某种类似电子表格、但还没有名字的新型协作工具。如果不是在实践过程中逐步探索，你根本不会想到这样的东西。</p><p>Treating a startup idea as a question changes what you’re looking for. If an idea is a blueprint, it has to be right. But if it’s a question, it can be wrong, so long as it’s wrong in a way that leads to more ideas.<br>把创业思路当作一个问题，会改变你追求的目标。如果思路是蓝图，那它必须是 “正确” 的；但如果思路是问题，它可以是 “错误” 的 —— 只要这种 “错误” 能引导你产生更多新思路。</p><p>One valuable way for an idea to be wrong is to be only a partial solution. When someone’s working on a problem that seems too big, I always ask: is there some way to bite off some subset of the problem, then gradually expand from there? That will generally work unless you get trapped on a local maximum, like 1980s-style AI, or C.<br>思路 “错误” 的一种有价值的形式，就是它只是一个局部解决方案。当有人在攻克一个看似庞大的问题时，我总会问：“能不能先解决这个问题的一个子集，然后再逐步扩展？” 这种方法通常很有效，除非你陷入了 “局部最优” 的陷阱，就像 20 世纪 80 年代的人工智能（AI）或者 C 语言那样。</p><h2 id="Upwind"><a href="#Upwind" class="headerlink" title="Upwind"></a>Upwind</h2><h2 id="顺势而为"><a href="#顺势而为" class="headerlink" title="顺势而为"></a>顺势而为</h2><p>So far, we’ve reduced the problem from thinking of a million dollar idea to thinking of a mistaken question. That doesn’t seem so hard, does it?<br>到目前为止，我们已经把问题从 “想出价值百万美元的思路” 简化成了 “提出一个可能错误的问题”。这看起来就没那么难了，不是吗？</p><p>To generate such questions you need two things: to be familiar with promising new technologies, and to have the right kind of friends. New technologies are the ingredients startup ideas are made of, and conversations with friends are the kitchen they’re cooked in.<br>要提出这样的问题，你需要两样东西：熟悉有前景的新技术，以及拥有合适的伙伴。新技术是构成创业思路的原材料，而与伙伴的交流则是孕育思路的 “厨房”。</p><p>Universities have both, and that’s why so many startups grow out of them. They’re filled with new technologies, because they’re trying to produce research, and only things that are new count as research. And they’re full of exactly the right kind of people to have ideas with: the other students, who will be not only smart but elastic-minded to a fault.<br>大学恰好同时具备这两个条件，这也是为什么很多创业公司都源自大学。大学里满是新技术，因为高校的核心任务是开展研究，而只有 “新事物” 才算得上研究成果；同时，大学里也满是最适合一起探讨思路的人 —— 其他学生，他们不仅聪明，思维还极具灵活性。</p><p>The opposite extreme would be a well-paying but boring job at a big company. Big companies are biased against new technologies, and the people you’d meet there would be wrong too.<br>与之相反的极端情况，就是在大公司里做一份薪水不错但枯燥乏味的工作。大公司对新技术往往带有偏见，而且你在那里遇到的人也不适合一起探索创业思路。</p><p>In an essay I wrote for high school students, I said a good rule of thumb was to stay upwind– to work on things that maximize your future options. The principle applies for adults too, though perhaps it has to be modified to: stay upwind for as long as you can, then cash in the potential energy you’ve accumulated when you need to pay for kids.<br>我曾给高中生写过一篇文章，其中提到一个实用的原则：要 “顺势而为”—— 去做那些能最大化你未来选择空间的事。这个原则对成年人同样适用，只是或许需要稍作调整：尽可能长时间地顺势而为，等到需要为家庭（比如养育孩子）承担责任时，再将积累的 “势能” 兑现。</p><p>I don’t think people consciously realize this, but one reason downwind jobs like churning out Java for a bank pay so well is precisely that they are downwind. The market price for that kind of work is higher because it gives you fewer options for the future. A job that lets you work on exciting new stuff will tend to pay less, because part of the compensation is in the form of the new skills you’ll learn.<br>我觉得人们并没有清醒地意识到这一点：像为银行编写 Java 代码这类 “逆风” 的工作薪水之所以高，恰恰是因为它们是 “逆风” 的。这类工作的市场薪资更高，是因为它会缩小你未来的选择范围。而一份能让你接触前沿新事物的工作，薪水往往较低，因为它的 “报酬” 一部分体现在你能学到的新技能上。</p><p>Grad school is the other end of the spectrum from a coding job at a big company: the pay’s low but you spend most of your time working on new stuff. And of course, it’s called “school,” which makes that clear to everyone, though in fact all jobs are some percentage school.<br>研究生院与大公司的编程工作处于两个极端：前者薪水低，但你大部分时间都在接触新事物。当然，它被称为 “学校”，这一点所有人都清楚 —— 但实际上，所有工作都在一定程度上具有 “学校” 的属性（即能让人学习）。</p><p>The right environment for having startup ideas need not be a university per se. It just has to be a situation with a large percentage of school.<br>孕育创业思路的合适环境，本质上不一定非得是大学，只要这个环境能提供大量 “学习” 的机会就行。</p><p>It’s obvious why you want exposure to new technology, but why do you need other people? Can’t you just think of new ideas yourself? The empirical answer is: no. Even Einstein needed people to bounce ideas off. Ideas get developed in the process of explaining them to the right kind of person. You need that resistance, just as a carver needs the resistance of the wood.<br>接触新技术的重要性显而易见，但为什么还需要他人呢？难道你不能独自想出新思路吗？经验告诉我们：不能。即便是爱因斯坦，也需要与人交流来碰撞思路。思路是在向合适的人阐述的过程中逐渐完善的。你需要这种 “阻力”，就像雕刻家需要木头的阻力一样。</p><p>This is one reason Y Combinator has a rule against investing in startups with only one founder. Practically every successful company has at least two. And because startup founders work under great pressure, it’s critical they be friends.<br>这也是创业孵化器 Y Combinator 不投资单人创业公司的原因之一。几乎所有成功的公司都至少有两位创始人。而且，由于创业者工作压力巨大，他们彼此是朋友这一点至关重要。</p><p>I didn’t realize it till I was writing this, but that may help explain why there are so few female startup founders. I read on the Internet (so it must be true) that only 1.7% of VC-backed startups are founded by women. The percentage of female hackers is small, but not that small. So why the discrepancy?<br>直到写这篇文章时我才意识到，这或许能解释为什么女性创业者如此之少。我在网上看到（所以应该是真的），只有 1.7% 的风投支持的创业公司由女性创办。女性程序员的比例虽然不高，但也不至于低到这个程度。那么，这种差距是怎么来的呢？</p><p>When you realize that successful startups tend to have multiple founders who were already friends, a possible explanation emerges. People’s best friends are likely to be of the same sex, and if one group is a minority in some population, pairs of them will be a minority squared. [1]<br>当你意识到，成功的创业公司往往由几位原本就是朋友的人共同创办时，一个可能的解释就浮现了：人们最好的朋友往往是同性；如果某个群体在总人口中属于少数，那么该群体中形成的朋友搭档数量，就是 “少数的平方”（比例会更低）。[1]</p><h2 id="Doodling"><a href="#Doodling" class="headerlink" title="Doodling"></a>Doodling</h2><h2 id="随心畅想"><a href="#随心畅想" class="headerlink" title="随心畅想"></a>随心畅想</h2><p>What these groups of co-founders do together is more complicated than just sitting down and trying to think of ideas. I suspect the most productive setup is a kind of together-alone-together sandwich. Together you talk about some hard problem, probably getting nowhere. Then, the next morning, one of you has an idea in the shower about how to solve it. He runs eagerly to to tell the others, and together they work out the kinks.<br>这些联合创始人团队一起做的事情，远不只是坐下来 “想思路” 那么简单。我猜最高效的模式是一种 “协作 — 独处 — 再协作” 的 “三明治” 模式：先一起讨论某个难题，很可能毫无进展；然后第二天早上，有人在洗澡时突然想到了解决办法；他急切地跑去告诉其他人，之后大家再一起完善这个思路，解决其中的问题。</p><p>What happens in that shower? It seems to me that ideas just pop into my head. But can we say more than that?<br>洗澡时到底发生了什么？在我看来，思路就是突然冒出来的。但我们能对此做出更深入的解释吗？</p><p>Taking a shower is like a form of meditation. You’re alert, but there’s nothing to distract you. It’s in a situation like this, where your mind is free to roam, that it bumps into new ideas.<br>洗澡就像是一种冥想：你保持清醒，但没有任何干扰。正是在这种大脑可以自由漫游的状态下，才会偶然碰撞出新思路。</p><p>What happens when your mind wanders? It may be like doodling. Most people have characteristic ways of doodling. This habit is unconscious, but not random: I found my doodles changed after I started studying painting. I started to make the kind of gestures I’d make if I were drawing from life. They were atoms of drawing, but arranged randomly. [2]<br>当大脑漫游时，会发生什么？这可能就像随手涂鸦。大多数人都有自己独特的涂鸦方式，这种习惯是无意识的，但并非毫无规律：我发现自己开始学习绘画后，涂鸦风格也变了。我会不自觉地做出写生时的笔触动作，这些笔触就像是绘画的 “原子”，只是排列得很随意。[2]</p><p>Perhaps letting your mind wander is like doodling with ideas. You have certain mental gestures you’ve learned in your work, and when you’re not paying attention, you keep making these same gestures, but somewhat randomly. In effect, you call the same functions on random arguments. That’s what a metaphor is: a function applied to an argument of the wrong type.<br>或许，让大脑自由漫游就像是在 “随心畅想”。你在工作中会形成特定的 “思维习惯”，当你没有刻意专注时，会继续做出这些思维动作，但会带有一定的随机性。实际上，这就像是用随机的 “参数” 去调用相同的 “函数”。隐喻其实就是这样：把一个 “函数” 应用到了一个 “错误类型” 的 “参数” 上。</p><p>Conveniently, as I was writing this, my mind wandered: would it be useful to have metaphors in a programming language? I don’t know; I don’t have time to think about this. But it’s convenient because this is an example of what I mean by habits of mind. I spend a lot of time thinking about language design, and my habit of always asking “would x be useful in a programming language” just got invoked.<br>巧合的是，我写这段文字时，大脑突然走神了：在编程语言中加入 “隐喻” 会有用吗？我不知道，也没时间去想这个问题。但这个例子恰好能说明我所说的 “思维习惯” 是什么 —— 我花了很多时间思考语言设计，所以会不自觉地触发 “X 在编程语言中是否有用” 这个思维习惯。</p><p>If new ideas arise like doodles, this would explain why you have to work at something for a while before you have any. It’s not just that you can’t judge ideas till you’re an expert in a field. You won’t even generate ideas, because you won’t have any habits of mind to invoke.<br>如果新思路像涂鸦一样产生，那就可以解释为什么你必须在某个领域深耕一段时间后，才能想出思路。这不仅仅是因为 “只有成为领域专家，才能判断思路好坏”—— 更重要的是，如果你没有形成相关的思维习惯，就根本无法产生思路。</p><p>If new ideas arise like doodles, this would explain why you have to work at something for a while before you have any. It’s not just that you can’t judge ideas till you’re an expert in a field. You won’t even generate ideas, because you won’t have any habits of mind to invoke.<br>如果新思路像涂鸦一样产生，那就能够解释为什么你必须在某个领域投入一段时间后，才能想出思路。这不仅仅是因为只有成为领域专家才能判断思路好坏 —— 更重要的是，如果你没有形成相关的思维习惯，就根本无法产生思路。</p><p>Of course the habits of mind you invoke on some field don’t have to be derived from working in that field. In fact, it’s often better if they’re not. You’re not just looking for good ideas, but for good new ideas, and you have a better chance of generating those if you combine stuff from distant fields. As hackers, one of our habits of mind is to ask, could one open-source x? For example, what if you made an open-source operating system? A fine idea, but not very novel. Whereas if you ask, could you make an open-source play? you might be onto something.<br>当然，你在某个领域调用的思维习惯，不一定源自该领域的工作经历。事实上，若思维习惯来自其他领域，往往效果更好。你要寻找的不只是好思路，更是优秀的新思路；而将不同领域的元素结合起来，产生新思路的概率会更高。比如作为程序员，我们的一个思维习惯是问 “能不能把 X 开源？”—— 要是说 “做一个开源操作系统”，这确实是个好想法，但不够新颖；可要是问 “能不能做一个开源剧本？”，或许就能找到新的突破口。</p><p>Are some kinds of work better sources of habits of mind than others? I suspect harder fields may be better sources, because to attack hard problems you need powerful solvents. I find math is a good source of metaphors– good enough that it’s worth studying just for that. Related fields are also good sources, especially when they’re related in unexpected ways. Everyone knows computer science and electrical engineering are related, but precisely because everyone knows it, importing ideas from one to the other doesn’t yield great profits. It’s like importing something from Wisconsin to Michigan. Whereas (I claim) hacking and painting are also related, in the sense that hackers and painters are both makers, and this source of new ideas is practically virgin territory.<br>是不是有些工作能更好地培养思维习惯？我认为难度更高的领域或许是更好的来源，因为攻克难题需要更强大的 “解决工具”。我发现数学是很好的隐喻来源 —— 单就这一点而言，学习数学就很有价值。相关领域也能提供思维习惯，尤其是当它们以意想不到的方式产生关联时。所有人都知道计算机科学和电气工程相关，可正因为大家都知道这一点，从一个领域向另一个领域借鉴思路，很难带来巨大突破，就像从威斯康星州向密歇根州进口商品一样（价值有限）。但我认为，编程和绘画其实也有关联 —— 因为程序员和画家都是 “创作者”，而这个领域的新思路来源几乎还是一片空白。</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h2 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发"></a>从问题出发</h2><p>In theory you could stick together ideas at random and see what you came up with. What if you built a peer-to-peer dating site? Would it be useful to have an automatic book? Could you turn theorems into a commodity? When you assemble ideas at random like this, they may not be just stupid, but semantically ill-formed. What would it even mean to make theorems a commodity? You got me. I didn’t think of that idea, just its name.<br>理论上，你可以随机组合思路，看看能得出什么结果。比如 “做一个点对点交友网站？”“自动生成书籍有没有用？”“能把定理变成商品吗？”—— 但这样随机拼凑思路，结果可能不只是荒唐，甚至在逻辑上都站不住脚。“把定理变成商品” 到底是什么意思？我也说不清楚，我只是想到了这个说法，并没有真正的思路。</p><p>You might come up with something useful this way, but I never have. It’s like knowing a fabulous sculpture is hidden inside a block of marble, and all you have to do is remove the marble that isn’t part of it. It’s an encouraging thought, because it reminds you there is an answer, but it’s not much use in practice because the search space is too big.<br>你或许能通过这种方式找到有用的思路，但我从未成功过。这就像知道一块大理石里藏着一座绝妙的雕塑，而你要做的只是凿去不属于雕塑的部分 —— 这个想法虽然鼓舞人心，提醒你答案确实存在，但在实际中没什么用，因为需要探索的范围太大了。</p><p>I find that to have good ideas I need to be working on some problem. You can’t start with randomness. You have to start with a problem, then let your mind wander just far enough for new ideas to form.<br>我发现，要想出好思路，必须先聚焦某个问题。不能从随机的想法开始，而要从问题入手，然后让思维适度漫游，直到形成新思路。</p><p>In a way, it’s harder to see problems than their solutions. Most people prefer to remain in denial about problems. It’s obvious why: problems are irritating. They’re problems! Imagine if people in 1700 saw their lives the way we’d see them. It would have been unbearable. This denial is such a powerful force that, even when presented with possible solutions, people often prefer to believe they wouldn’t work.<br>在某种程度上，发现问题比找到解决方案更难。大多数人都倾向于否认问题的存在，原因很明显：问题让人烦躁，毕竟它们是 “问题” 啊！试想一下，如果 18 世纪的人用我们现在的眼光看待他们的生活，肯定会无法忍受。这种否认的力量非常强大，即便有人提出可能的解决方案，人们也常常宁愿相信这些方案行不通。</p><p>I saw this phenomenon when I worked on spam filters. In 2002, most people preferred to ignore spam, and most of those who didn’t preferred to believe the heuristic filters then available were the best you could do.<br>我在研究垃圾邮件过滤器时就见过这种现象。2002 年，大多数人宁愿无视垃圾邮件；而那些没有无视的人，大多也认为当时已有的启发式过滤器就是最好的解决方案了。</p><p>I found spam intolerable, and I felt it had to be possible to recognize it statistically. And it turns out that was all you needed to solve the problem. The algorithm I used was ridiculously simple. Anyone who’d really tried to solve the problem would have found it. It was just that no one had really tried to solve the problem. [3]<br>我觉得垃圾邮件让人无法忍受，而且认为一定能用统计学方法识别它。结果证明，要解决这个问题，只需要这一个思路就够了。我用的算法简单得离谱 —— 只要有人真正用心去解决这个问题，肯定能发现它。问题在于，当时根本没人真正努力去解决它。[3]</p><p>Let me repeat that recipe: finding the problem intolerable and feeling it must be possible to solve it. Simple as it seems, that’s the recipe for a lot of startup ideas.<br>我再强调一下这个 “思路配方”：找到一个让你无法忍受的问题，并且坚信它一定能被解决。虽然看似简单，但很多创业思路都源于此。</p><h2 id="Wealth"><a href="#Wealth" class="headerlink" title="Wealth"></a>Wealth</h2><h2 id="创造价值（财富）"><a href="#创造价值（财富）" class="headerlink" title="创造价值（财富）"></a>创造价值（财富）</h2><p>So far most of what I’ve said applies to ideas in general. What’s special about startup ideas? Startup ideas are ideas for companies, and companies have to make money. And the way to make money is to make something people want.<br>到目前为止，我所说的大部分内容适用于所有类型的思路。但创业思路有什么特别之处呢？创业思路是创办公司的思路，而公司必须盈利，盈利的方式就是做出人们想要的东西。</p><p>Wealth is what people want. I don’t mean that as some kind of philosophical statement; I mean it as a tautology.<br>人们想要的东西，就是财富。我不是在说什么哲学观点，而是在陈述一个同义反复的事实（即 “人们想要的就是他们想要的”）。</p><p>So an idea for a startup is an idea for something people want. Wouldn’t any good idea be something people want? Unfortunately not. I think new theorems are a fine thing to create, but there is no great demand for them. Whereas there appears to be great demand for celebrity gossip magazines. Wealth is defined democratically. Good ideas and valuable ideas are not quite the same thing; the difference is individual tastes.<br>因此，创业思路就是 “做出人们想要的东西” 的思路。难道所有好思路都是人们想要的吗？可惜并非如此。比如新定理的发现是很棒的成果，但对它的需求并不大；而名人八卦杂志却有着巨大的需求。财富的定义是 “大众化” 的 —— 好思路和有价值（能带来财富）的思路不完全是一回事，区别就在于个人偏好。</p><p>But valuable ideas are very close to good ideas, especially in technology. I think they’re so close that you can get away with working as if the goal were to discover good ideas, so long as, in the final stage, you stop and ask: will people actually pay for this? Only a few ideas are likely to make it that far and then get shot down; RPN calculators might be one example.<br>但在技术领域，有价值的思路和好思路非常接近。我认为两者的关联性很强，所以你可以先以 “发现好思路” 为目标去努力，只要在最后阶段停下来问自己一句：“人们真的会为这个东西付钱吗？” 能走到这一步却被否定的思路并不多，逆波兰表示法（RPN）计算器或许就是一个例子（它是个好思路，但大众接受度低，难以盈利）。</p><p>One way to make something people want is to look at stuff people use now that’s broken. Dating sites are a prime example. They have millions of users, so they must be promising something people want. And yet they work horribly. Just ask anyone who uses them. It’s as if they used the worse-is-better approach but stopped after the first stage and handed the thing over to marketers.<br>做出人们想要的东西，一个方法是关注那些人们正在使用、但体验糟糕的产品。交友网站就是典型例子：它们拥有数百万用户，说明其承诺的东西是人们想要的，但实际体验却极差 —— 随便问一个用户就知道了。这就好像它们采用了 “差一点更好”（worse-is-better，一种软件开发理念，强调先实现核心功能再优化）的思路，却在完成第一阶段后就停下来，把产品丢给了营销人员（不再优化体验）。</p><p>Of course, the most obvious breakage in the average computer user’s life is Windows itself. But this is a special case: you can’t defeat a monopoly by a frontal attack. Windows can and will be overthrown, but not by giving people a better desktop OS. The way to kill it is to redefine the problem as a superset of the current one. The problem is not, what operating system should people use on desktop computers? but how should people use applications? There are answers to that question that don’t even involve desktop computers.<br>当然，普通电脑用户生活中最明显的 “糟糕产品” 就是 Windows 系统本身。但这是个特例：你无法通过正面攻击击败垄断者。Windows 肯定会被取代，但不是通过推出更好的桌面操作系统。要 “击败” 它，必须把问题重新定义为当前问题的 “超集”—— 问题不再是 “人们应该在台式机上使用什么操作系统？”，而是 “人们应该如何使用应用程序？”。这个问题的答案，甚至可能与台式机无关。</p><p>Everyone thinks Google is going to solve this problem, but it is a very subtle one, so subtle that a company as big as Google might well get it wrong. I think the odds are better than 50-50 that the Windows killer– or more accurately, Windows transcender– will come from some little startup.<br>所有人都认为谷歌会解决这个问题，但这个问题非常微妙，微妙到像谷歌这样的大公司也很可能搞砸。我认为，有超过 50% 的概率，“Windows 杀手”—— 更准确地说是 “超越 Windows 的产品”—— 会来自某个小型创业公司。</p><p>Another classic way to make something people want is to take a luxury and make it into a commodity. People must want something if they pay a lot for it. And it is a very rare product that can’t be made dramatically cheaper if you try.<br>另一个做出人们想要的东西的经典方法，是把奢侈品变成日用品。如果人们愿意花高价购买某样东西，说明他们肯定需要它。而且，只要肯努力，几乎所有产品都能大幅降低成本。</p><p>This was Henry Ford’s plan. He made cars, which had been a luxury item, into a commodity. But the idea is much older than Henry Ford. Water mills transformed mechanical power from a luxury into a commodity, and they were used in the Roman empire. Arguably pastoralism transformed a luxury into a commodity.<br>亨利・福特就是这么做的：他把曾经是奢侈品的汽车，变成了日用品。但这个思路比福特早得多：罗马帝国时期的水车，就把机械动力从奢侈品变成了日用品；甚至可以说，畜牧业的出现，也让某种奢侈品（如肉类）变成了日用品。</p><p>When you make something cheaper you can sell more of them. But if you make something dramatically cheaper you often get qualitative changes, because people start to use it in different ways. For example, once computers get so cheap that most people can have one of their own, you can use them as communication devices.<br>降低产品价格能让你卖出更多，但如果能大幅降价，往往会带来质的变化 —— 因为人们会开始以新的方式使用它。比如，当电脑便宜到大多数人都能拥有一台时，人们就开始把它当作通信工具来用了。</p><p>Often to make something dramatically cheaper you have to redefine the problem. The Model T didn’t have all the features previous cars did. It only came in black, for example. But it solved the problem people cared most about, which was getting from place to place.<br>要大幅降低成本，往往需要重新定义问题。福特 T 型车没有当时其他汽车的所有功能（比如它只有黑色款），但它解决了人们最关心的问题 —— 从一个地方到达另一个地方。</p><p>One of the most useful mental habits I know I learned from Michael Rabin: that the best way to solve a problem is often to redefine it. A lot of people use this technique without being consciously aware of it, but Rabin was spectacularly explicit. You need a big prime number? Those are pretty expensive. How about if I give you a big number that only has a 10 to the minus 100 chance of not being prime? Would that do? Well, probably; I mean, that’s probably smaller than the chance that I’m imagining all this anyway.<br>我从迈克尔・拉宾（Michael Rabin，计算机科学家）那里学到了一个非常有用的思维习惯：解决问题的最佳方式往往是重新定义问题。很多人都在无意识地使用这个方法，但拉宾对此非常明确。比如你需要一个大质数？生成大质数的成本很高。那如果我给你一个 “有 10 的负 100 次方概率不是质数” 的大数呢？这能满足需求吗？大概率是可以的 —— 毕竟这个概率比 “我现在是在幻想这一切” 的概率还小。</p><p>Redefining the problem is a particularly juicy heuristic when you have competitors, because it’s so hard for rigid-minded people to follow. You can work in plain sight and they don’t realize the danger. Don’t worry about us. We’re just working on search. Do one thing and do it well, that’s our motto.<br>当你有竞争对手时，“重新定义问题” 是一个特别有效的策略，因为思想僵化的人很难跟上你的步伐。你可以在他们眼皮底下行动，而他们却意识不到危险。就像（某些公司可能会想）“别担心我们，我们只是在做搜索业务。我们的宗旨是‘专注一件事，做到极致’”（而实际上你在重新定义问题，开辟新领域）。</p><p>Making things cheaper is actually a subset of a more general technique: making things easier. For a long time it was most of making things easier, but now that the things we build are so complicated, there’s another rapidly growing subset: making things easier to use.<br>“降低成本” 实际上是 “让事情变简单” 这一更通用方法的一个分支。长期以来，“降低成本” 是 “让事情变简单” 的主要形式，但如今我们打造的产品越来越复杂，另一个分支正在快速发展：“让产品更好用”（提升易用性）。</p><p>This is an area where there’s great room for improvement. What you want to be able to say about technology is: it just works. How often do you say that now?<br>在提升易用性方面，还有很大的改进空间。我们希望能对一项技术做出这样的评价：“它就是能用（体验流畅，无需折腾）”。但现在，你能有多少次这样的体验呢？</p><p>Simplicity takes effort– genius, even. The average programmer seems to produce UI designs that are almost willfully bad. I was trying to use the stove at my mother’s house a couple weeks ago. It was a new one, and instead of physical knobs it had buttons and an LED display. I tried pressing some buttons I thought would cause it to get hot, and you know what it said? “Err.” Not even “Error.” “Err.” You can’t just say “Err” to the user of a stove. You should design the UI so that errors are impossible. And the boneheads who designed this stove even had an example of such a UI to work from: the old one. You turn one knob to set the temperature and another to set the timer. What was wrong with that? It just worked.<br>实现简洁需要付出努力，甚至需要天赋。普通程序员设计的用户界面（UI），似乎总是刻意地糟糕。几周前，我试着用我妈妈家的新炉子 —— 它没有实体旋钮，只有按钮和 LED 显示屏。我按了几个我认为能让炉子加热的按钮，结果它显示了什么？“Err”（连完整的 “Error” 都不是）。对炉子用户来说，不能只显示 “Err” 就完事了。好的 UI 设计应该做到 “让错误无法发生”。而设计这个炉子的蠢货们，明明有一个好的参考案例 —— 旧炉子：转一个旋钮调温度，转另一个旋钮调时间。这有什么问题呢？它就是能用啊。</p><p>It seems that, for the average engineer, more options just means more rope to hang yourself. So if you want to start a startup, you can take almost any existing technology produced by a big company, and assume you could build something way easier to use.<br>对普通工程师来说，选项越多，似乎越容易把事情搞砸。所以，如果你想创业，几乎可以拿任何一家大公司现有的技术来参考，并且坚信自己能做出远比其易用的产品。</p><h2 id="Design-for-Exit"><a href="#Design-for-Exit" class="headerlink" title="Design for Exit"></a>Design for Exit</h2><h2 id="为-“退出”-而设计"><a href="#为-“退出”-而设计" class="headerlink" title="为 “退出” 而设计"></a>为 “退出” 而设计</h2><p>Success for a startup approximately equals getting bought. You need some kind of exit strategy, because you can’t get the smartest people to work for you without giving them options likely to be worth something. Which means you either have to get bought or go public, and the number of startups that go public is very small.<br>对创业公司而言，成功大致等同于被收购。你需要一套退出策略，因为如果不能给最优秀的员工提供有价值的期权，就无法吸引他们加入。这意味着你要么被收购，要么上市 —— 而能成功上市的创业公司数量少之又少。</p><p>If success probably means getting bought, should you make that a conscious goal? The old answer was no: you were supposed to pretend that you wanted to create a giant, public company, and act surprised when someone made you an offer. Really, you want to buy us? Well, I suppose we’d consider it, for the right price.<br>如果成功很可能意味着被收购，那你应该把它当作明确目标吗？过去的答案是否定的：你本该假装想要打造一家大型上市公司，等有人提出收购时再表现出惊讶 ——“真的吗？你们想收购我们？嗯，要是价格合适，我们或许会考虑。”</p><p>I think things are changing. If 98% of the time success means getting bought, why not be open about it? If 98% of the time you’re doing product development on spec for some big company, why not think of that as your task? One advantage of this approach is that it gives you another source of ideas: look at big companies, think what they should be doing, and do it yourself. Even if they already know it, you’ll probably be done faster.<br>但我认为情况正在改变。如果 98% 的成功案例都以被收购告终，为什么不坦诚面对这一点呢？如果 98% 的情况下，你其实是在为某家大公司 “按需求定制” 产品，为什么不直接把这当作自己的任务呢？这种思路的一个好处是，它能为你提供另一个思路来源：观察大公司，思考它们 “应该做却没做” 的事，然后自己动手去做。即便它们已经意识到了这些事，你也很可能比它们做得更快。</p><p>Just be sure to make something multiple acquirers will want. Don’t fix Windows, because the only potential acquirer is Microsoft, and when there’s only one acquirer, they don’t have to hurry. They can take their time and copy you instead of buying you. If you want to get market price, work on something where there’s competition.<br>只需确保你做的产品能吸引多家潜在收购方。别去试图 “修复 Windows”，因为潜在收购方只有微软一家；当只有一个买家时，他们没必要着急 —— 大可以慢慢模仿你的产品，而不是花钱收购。如果你想卖出合理的市场价格，就去做那些有多家公司可能感兴趣的领域。</p><p>If an increasing number of startups are created to do product development on spec, it will be a natural counterweight to monopolies. Once some type of technology is captured by a monopoly, it will only evolve at big company rates instead of startup rates, whereas alternatives will evolve with especial speed. A free market interprets monopoly as damage and routes around it.<br>如果越来越多的创业公司以 “按需求定制产品” 为目标，这将成为制衡垄断的天然力量。一旦某种技术被垄断企业掌控，其发展速度就会沦为大公司的节奏，而非创业公司的快节奏；而替代技术则会以极快的速度演进。自由市场会将垄断视为 “障碍”，并找到绕开它的路径。</p><h2 id="The-Woz-Route"><a href="#The-Woz-Route" class="headerlink" title="The Woz Route"></a>The Woz Route</h2><h2 id="“沃兹模式”"><a href="#“沃兹模式”" class="headerlink" title="“沃兹模式”"></a>“沃兹模式”</h2><p>The most productive way to generate startup ideas is also the most unlikely-sounding: by accident. If you look at how famous startups got started, a lot of them weren’t initially supposed to be startups. Lotus began with a program Mitch Kapor wrote for a friend. Apple got started because Steve Wozniak wanted to build microcomputers, and his employer, Hewlett-Packard, wouldn’t let him do it at work. Yahoo began as David Filo’s personal collection of links.<br>产生创业思路最高效的方式，听起来却最不可思议：偶然。看看那些知名创业公司的起源就会发现，很多最初根本没想过要做成公司。Lotus（莲花软件）始于米奇・卡波尔为朋友写的一个程序；苹果的诞生，是因为史蒂夫・沃兹尼亚克想做微型计算机，而他的雇主惠普不允许他在工作中做这件事；雅虎最初只是戴维・费罗个人整理的链接集合。</p><p>This is not the only way to start startups. You can sit down and consciously come up with an idea for a company; we did. But measured in total market cap, the build-stuff-for-yourself model might be more fruitful. It certainly has to be the most fun way to come up with startup ideas. And since a startup ought to have multiple founders who were already friends before they decided to start a company, the rather surprising conclusion is that the best way to generate startup ideas is to do what hackers do for fun: cook up amusing hacks with your friends.<br>这并非创业的唯一路径。你可以坐下来，有意识地构思一个公司思路 —— 我们就是这么做的。但以总市值来衡量，“为自己做东西” 的模式可能更有成效，也无疑是产生创业思路最有趣的方式。而且，鉴于创业公司最好由几位原本就是朋友的人共同创办，一个颇为意外的结论浮出水面：产生创业思路的最佳方式，就是做程序员们喜欢做的事 —— 和朋友一起捣鼓有趣的 “小项目”。</p><p>It seems like it violates some kind of conservation law, but there it is: the best way to get a “million dollar idea” is just to do what hackers enjoy doing anyway.<br>这似乎违背了某种 “守恒定律”，但事实就是如此：要获得 “价值百万美元的思路”，最好的方法就是去做程序员本来就乐在其中的事。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>[1] This phenomenon may account for a number of discrepancies currently blamed on various forbidden isms. Never attribute to malice what can be explained by math.<br>[1] 这种现象或许能解释当前许多被归咎于各类禁忌 “主义” 的差异。能用数学解释的事情，就别归咎于恶意。（注：“forbidden isms” 指社会中被视为敏感或禁忌的思想体系，此处强调用客观规律而非主观恶意解释差异）</p><p>[2] A lot of classic abstract expressionism is doodling of this type: artists trained to paint from life using the same gestures but without using them to represent anything. This explains why such paintings are (slightly) more interesting than random marks would be.<br>[2] 许多经典的抽象表现主义作品就是这类 “涂鸦”：艺术家接受过写生训练，会运用同样的绘画笔触，却不通过这些笔触表现任何具体事物。这也解释了为什么这类画作比纯粹随机的笔触（略微）更具吸引力。</p><p>[3] Bill Yerazunis had solved the problem, but he got there by another path. He made a general-purpose file classifier so good that it also worked for spam.<br>[3] 比尔・耶拉祖尼斯（Bill Yerazunis）此前已解决了（垃圾邮件识别）这一问题，但他采用了另一种方法。他开发了一款通用文件分类器，其性能非常出色，以至于同样能用于识别垃圾邮件。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格雷戈里・奥尔德雷特访谈实录：罗马帝国（一）</title>
    <link href="/2025/08/29/gregory-aldrete-the-roman-empire/"/>
    <url>/2025/08/29/gregory-aldrete-the-roman-empire/</url>
    
    <content type="html"><![CDATA[<h1 id="Transcript-for-Gregory-Aldrete-The-Roman-Empire-–-Rise-and-Fall-of-Ancient-Rome-Lex-Fridman-Podcast-443"><a href="#Transcript-for-Gregory-Aldrete-The-Roman-Empire-–-Rise-and-Fall-of-Ancient-Rome-Lex-Fridman-Podcast-443" class="headerlink" title="Transcript for Gregory Aldrete: The Roman Empire – Rise and Fall of Ancient Rome | Lex Fridman Podcast #443"></a>Transcript for Gregory Aldrete: The Roman Empire – Rise and Fall of Ancient Rome | Lex Fridman Podcast #443</h1><p>原文链接: <a href="https://lexfridman.com/gregory-aldrete-transcript">https://lexfridman.com/gregory-aldrete-transcript</a></p><p>格雷戈里・奥尔德雷特访谈实录：罗马帝国 —— 古罗马的兴衰 | 莱克斯・弗里德曼播客第 443 期</p><p>This is a transcript of Lex Fridman Podcast #443 with Gregory Aldrete. The timestamps in the transcript are clickable links that take you directly to that point in the main video. Please note that the transcript is human generated, and may have errors. Here are some useful links:<br>本实录为莱克斯・弗里德曼第 443 期播客与格雷戈里・奥尔德雷特的对话内容。实录中的时间戳为可点击链接，点击可直接跳转至主视频的对应位置。请注意，本实录由人工整理生成，可能存在误差。以下是部分实用链接：</p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a><strong>Table of Contents</strong></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><p>Here are the loose “chapters” in the conversation. Click link to jump approximately to that part in the transcript:<br>以下是对话的大致 “章节” 划分。点击链接可大致跳转至实录的对应部分：</p><p>一</p><p>0:00 – Ancient vs modern world<br>0:00 – 古代世界与现代世界</p><p>6:28 – Romans’ relationship to the past<br>6:28 – 罗马人对历史的态度</p><p>15:40 – Three phases of Roman history<br>15:40 – 罗马历史的三个阶段</p><p>18:30 – Rome’s expansion<br>18:30 – 罗马的扩张</p><p>30:10 – Punic wars<br>30:10 – 布匿战争</p><p>38:55 – Conquering Greece<br>38:55 – 征服希腊</p><p>40:34 – Scipio vs Hannibal<br>40:34 – 西庇阿对决汉尼拔</p><p>43:40 – Heavy infantry vs Cavalry<br>43:40 – 重步兵与骑兵</p><p>47:17 – Armor<br>47:17 – 盔甲</p><p>1:00:10 – Alexander the Great<br>1:00:10 – 亚历山大大帝</p><p>二</p><p>1:06:11 – Roman law<br>1:06:11 – 罗马法</p><p>1:15:51 – Slavery<br>1:15:51 – 奴隶制</p><p>1:24:11 – Fall of the Roman Empire<br>1:24:11 – 罗马帝国的衰落</p><p>1:27:56 – Julius Caesar<br>1:27:56 – 尤利乌斯・凯撒</p><p>1:32:35 – Octavian’s rise<br>1:32:35 – 屋大维的崛起</p><p>1:42:28 – Cleopatra<br>1:42:28 – 克利奥帕特拉</p><p>1:47:57 – Musa of Parthia<br>1:47:57 – 帕提亚的穆萨</p><p>1:50:50 – Augustus’ political system<br>1:50:50 – 奥古斯都的政治体系</p><p>三</p><p>2:03:19 – Cicero<br>2:03:19 – 西塞罗</p><p>2:09:21 – Gestures<br>2:09:21 – 肢体动作</p><p>2:19:32 – Religion in Rome<br>2:19:32 – 罗马的宗教</p><p>2:45:08 – Emperors<br>2:45:08 – 罗马皇帝</p><p>2:49:24 – The greatest Roman<br>2:49:24 – 最伟大的罗马人</p><p>2:52:18 – Marcus Aurelius<br>2:52:18 – 马可・奥勒留</p><p>2:59:33 – Taxes<br>2:59:33 – 税收</p><p>3:02:41 – Division of the Roman Empire<br>3:02:41 – 罗马帝国的分裂</p><p>3:22:37 – Decisive battles<br>3:22:37 – 决定性战役</p><p>3:47:08 – Hope<br>3:47:08 – 希望</p><h2 id="Ancient-vs-modern-world"><a href="#Ancient-vs-modern-world" class="headerlink" title="Ancient vs modern world"></a>Ancient vs modern world</h2><h2 id="古代世界与现代世界"><a href="#古代世界与现代世界" class="headerlink" title="古代世界与现代世界"></a>古代世界与现代世界</h2><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:00:00) Rome always wins because even if they lose battles, they go to the Italian allies and half citizens and raise new armies. So how do you beat them? He can never raise that many troops himself. And Hannibal, I think correctly, figures out the one way to maybe defeat Rome is to cut them away from their allies. Well, how do you do this? Hannibal’s plan is, “I’m not going to wait and fight the Romans in Spain or North Africa. I’m going to invade Italy. I’m going to strike at the heart of this growing Roman Empire. And my hope is that if I can win a couple big battles against Rome in Italy, the Italians will want their freedom back and they’ll rebel from Rome and maybe even join me because most people who have been conquered want their freedom back, so this is a reasonable plan.”<br>(00:00:00) 罗马总能获胜，因为即便在战役中失利，他们也能向意大利盟友和半公民征召兵力，组建新的军队。那么，该如何击败罗马呢？（汉尼拔）他自己永远无法征召到如此庞大的兵力。而汉尼拔 —— 我认为他的判断是正确的 —— 找到了或许能击败罗马的唯一方法，那就是切断罗马与盟友的联系。可该怎么做呢？汉尼拔的计划是：“我不会在西班牙或北非坐等与罗马人交战，我要入侵意大利，直击这个日益壮大的罗马帝国的核心。我希望，如果我能在意大利境内打赢几场对抗罗马的大型战役，意大利人就会渴望重获自由，进而反抗罗马，甚至可能加入我这边 —— 因为大多数被征服的民族都渴望重获自由，所以这个计划是合理的。”</p><p>(00:00:51) Hannibal famously crosses the Alps with elephants. Dramatic stuff. Nobody expects him to do this. Nobody thinks you can do this. Shows up in Northern Italy. Romans send an army. Hannibal massacres them. He is a military genius. Rome takes a year, raises a second army. We know this story, sends it against Hannibal. Hannibal wipes them out.<br>(00:00:51) 汉尼拔率领大象翻越阿尔卑斯山的事迹众所周知，极具戏剧性。没人预料到他会这么做，也没人认为这是可行的。（之后他）出现在意大利北部，罗马派去一支军队，却被汉尼拔击溃。他的确是军事天才。罗马花了一年时间组建第二支军队 —— 这个故事我们都有所耳闻 —— 派去对抗汉尼拔，结果又被汉尼拔全歼。</p><p>(00:01:12) Rome gets clever this time. They say, “Okay, Hannibal’s different. We’re going to take two years, raise two armies and send them both out at the same time against Hannibal.” They do this, and this is the Battle of Cannae, which is one of the most famous battles in history. Hannibal is facing this army of 80, 000 Romans about, and he comes up with strategy called double envelopment. I mean, we can go into it later if you want, but it’s this famous strategy where he basically sucks the Romans in, surrounds them on all sides. And in one afternoon at the Battle of Cannae, Hannibal kills about 60,000 Romans. Now, just to put that in perspective, that’s more Romans hacked to death in one afternoon with swords than Americans died in 20 years in Vietnam.<br>(00:01:12) 这一次，罗马人变得聪明了。他们认为：“好吧，汉尼拔和其他人不一样。我们要花两年时间组建两支军队，同时派去对抗他。” 他们确实这么做了，而这就引发了坎尼会战 —— 历史上最著名的战役之一。当时汉尼拔面对的是一支约 8 万人的罗马军队，他想出了一种名为 “双重包围” 的战术。当然，如果你想了解细节，我们之后可以深入探讨，但这个著名战术的核心就是：先引诱罗马军队深入，再从四面八方将其包围。在坎尼会战的那个下午，汉尼拔就歼灭了约 6 万名罗马士兵。为了让大家更直观地理解这个数字的概念：一个下午被刀剑砍杀的罗马人数量，比美国在越南战争 20 年间阵亡的人数还要多。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:02:03) The following is a conversation with Gregory Aldrete, a historian specializing in ancient Rome and military history. This is the Lex Fridman Podcast. To support it, please check out our in the description. And now, dear friends, here’s Gregory Aldrete.<br>(00:02:03) 接下来是与格雷戈里・奥尔德雷特的对话。奥尔德雷特是一位专攻古罗马史与军事史的历史学家。这里是莱克斯・弗里德曼播客。若想支持本播客，敬请查看描述中的相关信息。现在，亲爱的朋友们，让我们欢迎格雷戈里・奥尔德雷特。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:02:23) What do you think is the big difference between the ancient world and the modern world?<br>(00:02:23) 您认为古代世界和现代世界最大的区别是什么？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:02:28) Well, the easy answer, the one you often get is technology, and obviously, there’s huge differences in technology between the ancient world and today. But I think some of the more interesting stuff is a little bit more amorphous things, more structural things. I would say, first of all, childhood mortality. In the ancient world, and this is true, Greeks, Romans, Egyptians, really anybody up until about the industrial Revolution, about 30 to 40% of kids died before they hit puberty.<br>(00:02:28) 嗯，最常见也最容易想到的答案是技术 —— 显然，古代与现代的技术水平存在巨大差距。但我认为，一些更有趣的区别其实是那些更模糊、更偏向结构性的层面。首先我想说的是儿童死亡率。在古代世界，无论是希腊人、罗马人、埃及人，实际上直到工业革命之前，几乎所有地区的儿童中，约有 30% 到 40% 会在青春期前夭折。</p><p>(00:02:57) I mean, put yourself in the place of average inhabitant of the ancient world. If you were an ancient person, three or four of your kids probably would’ve died. You would’ve buried your children. And nowadays, we think of that as an unusual thing, and just psychologically, that’s a huge thing. You would’ve seen multiple of your siblings die. If you were a woman, for example, if you were lucky enough to make it to let’s say age 13, you probably would have to give birth four or five times in order just to keep the population from dying out. Those kind of grim mortality statistics, I think, are a huge difference psychologically between the ancient world and the modern.<br>(00:02:57) 试想一下，如果你是古代的普通居民会怎样？作为古人，你的三四个孩子可能都会夭折，你不得不亲手埋葬自己的孩子。而在如今，我们会认为这种事极为罕见 —— 单从心理层面来说，这就是天壤之别。你可能会目睹多个兄弟姐妹离世；如果你是女性，就算足够幸运能活到 13 岁左右，也可能需要生育四五次，才能勉强维持人口数量不减少。我认为，这类严峻的死亡率数据，正是古代与现代在心理层面存在的巨大差异。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:03:37) But fundamentally, do you think human nature changed much? Do you think the same elements of what we see today, fear, greed, love, hope, optimism and the cynicism, the underlying forces that result in war, all of that, permeates human history?<br>(00:03:37) 但从本质上来说，您认为人性发生了很大变化吗？如今我们所见的那些特质 —— 恐惧、贪婪、爱、希望、乐观与怀疑，以及引发战争的潜在驱动力 —— 您觉得这些东西是否贯穿了整个人类历史？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:03:56) Crude answer, yes. I think human nature is roughly constant. And for me, as an ancient historian, the kind of documents that I really like dealing with are not the traditional literary sources, but they’re the things that give us those little glimpse into everyday life. Stuff like tombstones or graffiti or just something that survives on a scrap of parchment that records a financial transaction. Whenever I read some of those, I’ll have this moment of feeling, ” Oh, I know exactly how that person felt.” Here across 2000 years of time, completely different cultures, I have this spark of sympathy with someone from antiquity.<br>(00:03:56) 简单来说，是的。我认为人性大致是恒定的。作为一名古代史研究者，我真正喜欢研究的文献并非传统的文学典籍，而是那些能让我们窥见古人日常生活片段的资料 —— 比如墓碑铭文、涂鸦，或是残留在羊皮纸上、记录着一笔财务交易的碎片。每当我读到这类资料时，总会有这样的瞬间：“哦，我完全能理解这个人当时的感受。” 跨越两千年的时光，身处截然不同的文化背景，我却能与古人产生一丝共鸣。</p><p>(00:04:40) I think, as a historian, the way you begin to understand an alien, a foreign culture, which is what these cultures are, is to look for those little moments of sympathy. But on the other hand, there’s ways in which ancient cultures are wildly different from us. You also look for those moments where you just think, “How the hell could these people have done that? I just don’t understand how they could have thought or acted in this way.” It’s lining up those moments of sympathy and kind of disconnection that I think is when you begin to start to understand a foreign culture or an ancient culture.<br>(00:04:40) 我认为，作为历史学家，要理解像古代文化这样 “陌生的”、“外来的” 文化，首先要寻找这些能产生共鸣的微小瞬间。但另一方面，古代文化在很多方面也与我们截然不同。你也会遇到这样的时刻：“这些人怎么会做出这种事？我完全无法理解他们的想法和行为。” 我觉得，正是通过梳理这些 “共鸣时刻” 与 “隔阂时刻”，我们才能真正开始理解一种外来文化或古代文化。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:05:14) I love the idea of assembling the big picture from the details and the little pieces, because that is the thing that makes up life. The big picture is nothing without the details.<br>(00:05:14) 我很认同从细微碎片中拼凑宏观图景的理念，因为生活本身就是由这些细节构成的。没有细节，宏观图景便毫无意义。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:05:23) Yep, yep, and those details would bring it to life. I mean, it’s not the grand sweep of things. It’s seeing those little hopes and fears. Another thing that I think is a huge difference between the modern world and the ancient is just basically everybody’s a farmer. Everybody’s a small family farmer, and we forget this.<br>(00:05:23) 没错，没错，正是这些细节让历史变得鲜活。我是说，重要的不是那些宏大的历史进程，而是看到古人那些微小的希望与恐惧。另外，我认为古代与现代的另一个巨大差异是：在古代，几乎所有人都是农民，都是小农家庭的一员 —— 而我们常常会忽略这一点。</p><p>(00:05:42) I was just writing a lecture for my next Great Courses course, and I was writing about farming in the ancient world. I was really thinking if we were to write a realistic textbook of let’s say the Roman Empire, nine out of 10 chapters should be details of what it was like to be a small-time family farmer, because that’s what 90% of the people in the ancient world did. They weren’t soldiers, they weren’t priests, they weren’t kings, they weren’t authors, they weren’t artists. They were small-town family farmers, and they lived in a little village. They never traveled 20 miles from that village. They were born there. They married somebody from there. They raised kids. They mucked around in the dirt for a couple decades and they died. They never saw a battle. They never saw a work of art. They never saw a philosopher. They never took part in any of the things we define as being history. So that’s what life should be, and that’s representative.<br>(00:05:42) 我最近正在为 “伟大课程”（Great Courses，美国知名在线课程平台）的下一门课撰写讲稿，内容涉及古代农业。我当时就在想，如果要写一本真实反映罗马帝国的教科书，那么十章里有九章都应该用来描述小农家庭的生活细节 —— 因为古代世界 90% 的人都过着这样的生活。他们不是士兵，不是祭司，不是国王，不是作家，也不是艺术家。他们是小镇上的小农，生活在一个小村庄里，一辈子都没走出过村庄 20 英里的范围：在村里出生，与同村人结婚，养育孩子，在田地里劳作几十年后离世。他们从未见过战场，从未见过艺术品，从未见过哲学家，也从未参与过任何我们定义为 “历史事件” 的事情。但这才是古代人真实的生活，也是最具代表性的生活状态。</p><h2 id="Romans’-relationship-to-the-past"><a href="#Romans’-relationship-to-the-past" class="headerlink" title="Romans’ relationship to the past"></a>Romans’ relationship to the past</h2><h2 id="罗马人对历史的态度"><a href="#罗马人对历史的态度" class="headerlink" title="罗马人对历史的态度"></a>罗马人对历史的态度</h2><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:06:37) Nevertheless, it is the emperors and the philosophers and the artists and the warriors who carve history.<br>(00:06:37) 尽管如此，终究是皇帝、哲学家、艺术家和战士们在书写历史。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:06:43) And it is the important stuff. I mean, that’s true. There’s a reason we focus on that.<br>(00:06:43) 而且这些确实是重要的内容。我的意思是，事实就是如此，我们之所以关注这些群体，是有原因的。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:06:48) That’s a good reminder though. If we want to truly empathize and understand what life was like, we have to represent it fully.<br>(00:06:48) 但您之前的话也是个很好的提醒：如果我们想真正共情并理解古人的生活，就必须全面地展现它。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:06:56) And I would say let’s not forget them. Let’s not forget what life was like for 80, 90% of the people in the ancient world, the ones we don’t talk about, because that’s important too.<br>(00:06:56) 我想说的是，我们不要忘记他们 —— 不要忘记古代世界里那 80% 到 90%、我们很少提及的人的生活，因为那同样重要。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:07:06) The Roman Empire is widely considered to be the most powerful, influential, and impactful empire in human history. What are some reasons for that?<br>(00:07:06) 罗马帝国被广泛认为是人类历史上最强大、最具影响力且影响最深远的帝国之一。您认为其中有哪些原因？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:07:18) Yeah. I mean, Rome has been hugely influential, I think, just because of the image. I mean, there’s all these practical ways. I mean, the words I’m using to speak with you today, 30% are direct from Latin. Another 30% are from Latin descended languages. Our law codes, I mean, our habits, our holidays, everything comes fairly directly from the ancient world. But the image of Rome, at least again in Western civilization, has really been the dominant image of a successful empire. I think that’s what gives it a lot of its fascination, this idea that, “Oh, it was this great, powerful, culturally influential empire,” and there’s a lot of other empires. I mean, we could talk about ancient China, which arguably was just as big as Rome, just as culturally sophisticated, lasted about the same amount of time. But at least in Western civilization, Rome is the paradigm.<br>(00:07:18) 嗯，我认为罗马之所以影响力巨大，首先是因为它的 “形象”。当然，也有很多实际层面的原因。比如，我现在和你说话所用的词汇中，30% 直接源自拉丁语，还有 30% 来自拉丁语衍生的语言。我们的法典、生活习惯、节日 —— 几乎所有事物都在相当程度上直接传承自古代罗马。而且，至少在西方文明中，罗马的形象一直是 “成功帝国” 的主流象征。我觉得正是这种 “它曾是一个伟大、强大且具有文化影响力的帝国” 的认知，让它充满了吸引力。当然，历史上还有很多其他帝国，比如古代中国 —— 可以说它的疆域和罗马相当，文化同样精深，存续时间也差不多。但至少在西方文明里，罗马是当之无愧的典范。</p><p>(00:08:14) But Rome is a little schizophrenic in that it’s both the empire when it was ruled by emperors, which is one kind of model, and it’s the Roman Republic when it was a pseudo-democracy, which is a different model. It’s interesting how some later civilizations tend to either focus on one or the other of those. The United States, Revolutionary France, they were very obsessed with the Roman Republic as a model. But other people, Mussolini, Hitler, Napoleon, they were very obsessed with the Empire. Victorian Britain as a model.<br>(00:08:14) 不过罗马的形象有点 “分裂”：它既是由皇帝统治的 “帝国”（一种模式），也曾是实行伪民主制度的 “罗马共和国”（另一种模式）。有趣的是，后世一些文明往往只侧重其中一种模式。比如美国和法国大革命时期的法国，就非常痴迷于以罗马共和国为范本；而墨索里尼、希特勒、拿破仑等人，则更痴迷于罗马帝国的模式，维多利亚时代的英国也同样如此。</p><p>(00:08:48) Rome itself has different aspects. But what I think is actually another big difference between the modern world and the ancient is our relationship with the past. One of the keys to understanding all of Roman history is to understand that this was a people who were obsessed with the past and for whom the past had power, not just as something inspirational, but it actually dictated what you would do in your daily life. Today, especially in the United States, we don’t have much of a relationship with the past. We see ourselves as free agents just floating along, not tethered to what came before.<br>(00:08:48) 罗马本身具有多面性，但我认为古代与现代的另一个重要差异，在于我们与 “历史” 的关系。理解整个罗马历史的关键之一，就是要明白：罗马人极度痴迷于历史，历史对他们而言不仅具有启发意义，更拥有实际的 “力量”—— 它甚至能决定人们在日常生活中的行为。而如今，尤其是在美国，我们与历史的关联并不紧密。我们倾向于将自己视为 “自由个体”，仿佛可以不受过去的束缚，随意前行。</p><p>(00:09:28) The classical story that I sometimes tell in my classes to illustrate this is Rome started out as a monarchy. They had kings. They were kind of unhappy with their kings. Around 500 BC, they held a revolution and they kicked out the kings, and one of the guys who played a key role in this was a man named Lucius Junius Brutus. 500 years later, 500 years down the road, a guy comes along, Julius Caesar, who starts to act like a king. If you have trouble with kings in Roman society, who are you going to call? Somebody named Brutus. Now as it happens, there is a guy named Brutus in Roman society at this time, who is one of Julius Caesar’s best friends, Marcus Junius Brutus. Now, before I go further with the story, and I think you probably know where it ends, I talk about how important your ancestors are in Roman culture. I mean, if you went to an aristocratic Roman’s house and opened the front door and walked in, the first thing you would see would be a big wooden cabinet. If you open that up, what you would see would be row after row of wax death masks. When a Roman aristocrat died, they literally put hot wax on his face and made an impression of his face at that moment. They hung these in a big cabinet right inside the front door. Every time you entered your house, you were literally staring at the faces of your ancestors.<br>(00:09:28) 我在课堂上常讲一个经典故事来阐释这一点：罗马最初是君主制国家，有国王统治，但民众对国王并不满意。大约在公元前 500 年，罗马人发动革命推翻了君主制，其中起关键作用的人之一名叫卢修斯・尤尼乌斯・布鲁图。500 年后，尤利乌斯・凯撒出现了，他的行事作风开始像个国王。在罗马社会，若有人对 “国王” 不满，你会想到谁？自然是名叫 “布鲁图” 的人。巧的是，当时罗马社会恰好有个叫布鲁图的人 —— 马库斯・尤尼乌斯・布鲁图，他还是凯撒最好的朋友之一。在继续讲这个故事之前（我想你大概知道结局），我得先说说祖先在罗马文化中的重要性。比如，如果你走进一个罗马贵族的家，推开门第一眼看到的会是一个巨大的木柜。打开柜子，里面整齐排列着一排排蜡质遗容面具。每当一位罗马贵族去世，人们会用热蜡拓下他当时的面部轮廓，制成面具，然后将这些面具挂在正门内侧的木柜里。也就是说，每次你走进家门，都相当于直面祖先的面容。</p><p>(00:10:53) Every child in that family would have obsessively memorized every accomplishment of every one of those ancestors. He would’ve known their career, what offices they held, what battles they fought in, what they did. When somebody new in the family died, there would be a big funeral and they would talk about all the things their ancestors had did. The kids in the family would literally take out those masks, tie them onto their own faces, and wear them in the funeral procession. You were wearing the face of your ancestors. So you as an individual weren’t important, you were just the latest iteration of that family, and there was enormous weight, huge weight to live up to the deeds of your ancestors. The Romans were absolutely obsessed with the past, especially with your own family. Every Roman kid who is let’s say an aristocratic family could tell you every one of his ancestors back centuries. I can’t go beyond my grandparents, I don’t even know, but that’s maybe 100 years. It’s a completely different attitude towards the past.<br>(00:10:53) 这个家族的每个孩子都会执着地记住每位祖先的所有功绩 —— 他们的职业生涯、担任过的官职、参加过的战役、所做过的大事。每当家族中有新成员去世，人们会举办盛大的葬礼，在葬礼上讲述所有祖先的事迹。家族里的孩子会取出那些遗容面具，系在自己脸上，戴着它们参加送葬队伍。你相当于 “顶着” 祖先的面容前行。因此，作为个体的你并不重要，你只是这个家族的 “最新一代传承者”，而 “不辜负祖先功绩” 的压力是巨大的，大到难以想象。罗马人对历史的痴迷是真切的，尤其是对自家家族史。比如，一个罗马贵族家庭的孩子，能说出几百年前每一位祖先的名字和事迹。而我连自己曾祖父母的事迹都记不全，顶多只能追溯到祖父母那一代，也就大约 100 年的时间。可见，我们与罗马人对历史的态度截然不同。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:11:52) And the level of celebration that we have now of the ancestors, even the ones we can name, is not as intense as it was in Roman times.<br>(00:11:52) 而且现在我们对祖先的纪念 —— 即便对那些我们能叫出名字的祖先 —— 其重视程度也远不及罗马时代。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:11:59) No, no. I mean, it was obsessive and oppressive. It determined what you did.<br>(00:11:59) 确实远不及。罗马人对祖先的重视不仅是 “痴迷”，甚至带有 “压迫性”—— 它能决定你该做什么。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:12:00) Oppressive, oh.<br>(00:12:00) 压迫性？哦，这有点出人意料。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:12:05) Yes. Because there’s that weight for you to act like your ancestors did.<br>(00:12:05) 是的。因为你背负着 “要像祖先那样行事” 的沉重压力。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:12:08) Not to speak sort of philosophically, but do you think it was limiting to the way that society develops to be deeply constrained by the-<br>(00:12:08) 我不想说得太哲学化，但您觉得，被（历史）深深束缚，会不会限制社会的发展方式 ——</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:12:18) Yes. Absolutely.<br>(00:12:18) 会的，毫无疑问会。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:12:18) Limiting in a good way or a bad way, you think?<br>(00:12:18) 那您觉得这种限制是好是坏呢？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:12:21) Well, like everything, it’s a little of both. But the bad, on the one hand, it gives them enormous strength and it gives them this enormous connection. It gives them guidance. But the negative is what’s interesting, is it makes the Romans extremely traditional minded and extremely conservative, and I mean conservative in the sense of resistant to change.<br>(00:12:21) 嗯，就像所有事情一样，它既有好的一面，也有坏的一面。好的方面是，这种对历史的尊崇给了罗马人巨大的力量，让他们拥有强烈的群体归属感，也为他们的行为提供了指引。但有趣的是它的负面影响：它让罗马人思想极度传统、极度保守 —— 这里的 “保守” 指的是 “抗拒变革”。</p><p>(00:12:40) In the late Republic, which we’ll probably talk about later, Rome desperately needed to change certain things, but it was a society that did things the way the ancestors did it, and they didn’t make some obvious changes, which might have saved their Republic. That’s the downside is that it locks you into something and you can’t change.<br>(00:12:40) 比如在共和国晚期（我们之后可能会谈到这个时期），罗马迫切需要在某些方面进行改革，但这个社会坚持 “按祖先的方式行事”，不愿做出一些显而易见的改变 —— 而那些改变或许本可以挽救共和制度。这就是负面影响：它会把你困在既定模式里，让你无法变革。</p><p>(00:12:58) But to get us back to the Brutus’s, 500 years after that first Brutus got rid of kings, Julius Caesar starts to act like a king, one of his best friends is Marcus Junius Brutus. And literally, in the middle of the night, people go to Brutus’s house and write graffiti on it that says, “Remember your ancestor?” And another one is, I think, “You’re no real Brutus.” And at that point, he really has no choice. He forms a conspiracy. On the Ides of March 44 BC, he and 23 other senators take daggers, stick them in Julius Caesar, and kill him for acting like a king. The way I always pose this to my students is, “How many of you would stick a knife in your best friend because of what your great, great, great, great, great, great, great, great, great, great, great grandfather did?”<br>(00:12:58) 我们回到布鲁图的故事。第一位布鲁图推翻君主制 500 年后，尤利乌斯・凯撒的行事开始像个国王，而他最好的朋友之一就是马库斯・尤尼乌斯・布鲁图。后来，真的有人在半夜跑到布鲁图家墙上涂鸦，写着 “还记得你的祖先吗？”，还有一句我记得是 “你根本不配叫布鲁图”。到了这个时候，布鲁图其实已经别无选择了。他组织了一场阴谋，在公元前 44 年的 3 月 15 日（“ides of March”，罗马历法中 3 月、5 月等月份的 15 日），他和另外 23 位元老院议员手持匕首，刺杀了行事如国王的凯撒。我经常这样问我的学生：“你们当中有多少人会因为自己几十代前的祖先做过的事，而拿刀刺向最好的朋友？”</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:13:48) That’s commitment.<br>(00:13:48) 这真是一种极致的 “坚守”。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:13:50) That’s the power of the past. That’s a society where the past isn’t just influential, but it dictates what you do. And that concept, I think, is very alien to us today. We can’t imagine murdering our best friend because of what some incredibly distant ancestor did 500 years ago. But to Brutus, there is no choice. You have to do that.<br>(00:13:50) 这就是历史的力量。在那样的社会里，历史不仅具有影响力，更能 “命令” 你该做什么。我觉得这种观念对现在的我们来说非常陌生 —— 我们无法想象，会因为 500 年前某个远得不能再远的祖先做过的事，就去杀害最好的朋友。但对布鲁图来说，他没有选择，必须这么做。</p><p>(00:14:11) A lot of societies have this power of the past. Today, not so much, but some still do. About a decade ago, I was in Serbia and I was talking to some of the people there about the breakup of Yugoslavia and some of the wars that had taken place where people turned against their neighbors, basically murdered people they had lived next to for decades. When I was talking to them, some of them actually brought up things like, “Oh, well, it was justified because in this battle in 12 whatever, they did this.” And I was thinking, “Wow, you’re citing something from 800 years ago to justify your actions today.” That’s a modern person who still understands the power of the past, or maybe is crippled by it, is another way to view it.<br>(00:14:11) 很多社会都曾受历史的这种 “力量” 影响。如今这种情况已不多见，但仍有部分社会如此。大约十年前，我在塞尔维亚时，曾和当地一些人聊起南斯拉夫解体以及随之爆发的战争 —— 在那些战争中，人们反目成仇，甚至杀害了与自己相邻数十年的邻居。交谈中，有些人竟然提到：“哦，这是合理的，因为在 12 世纪某次战役中，他们就这么做过。” 我当时就想：“天啊，你竟然用 800 年前的事来为现在的行为辩护。” 从这个角度看，这些现代人或许仍认可历史的力量，也可能是被历史的力量所束缚。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:14:55) This is an interesting point and an interesting perspective to remember about the way the Romans thought, especially in the context of how power is transferred, whether it’s hereditary or not, which changes throughout Roman history. It’s interesting. It’s interesting to remember that, the value of the ancestors<br>(00:14:55) 这一点很有意思，也为我们理解罗马人的思维方式提供了独特视角 —— 尤其是结合罗马历史中权力传承方式的演变（无论是世袭还是非世袭）来看，更是如此。确实值得关注，尤其是祖先的价值这一点。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:15:13) Yep, and just the weight of tradition.<br>(00:15:13) 没错，还有传统带来的沉重压力。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:15:15) The weight of tradition.<br>(00:15:15) 传统的压力。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:15:16) For the Romans, the mos maiorum is this Latin term, which means the way the ancestors did it, and it’s kind of their word for tradition. For them, tradition is what your forefathers and mothers did, and you have to follow that example, and you have to live up to that.<br>(00:15:16) 对罗马人来说，“mos maiorum”（拉丁语，直译为 “祖先的习俗”）就是他们对 “传统” 的称呼。在他们眼中，传统就是先辈们的所作所为，而你必须效仿先辈，不辜负他们的典范。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:15:31) Does that mean that class mobility was difficult? If your ancestors were farmers, there was a major constraint on remaining a farmer, essentially.<br>(00:15:31) 那这是不是意味着社会阶层流动很困难？比如，如果你的祖先是农民，那你本质上也很可能被束缚在农民的身份上？</p><h2 id="Three-phases-of-Roman-history"><a href="#Three-phases-of-Roman-history" class="headerlink" title="Three phases of Roman history"></a>Three phases of Roman history</h2><h2 id="罗马历史的三个阶段"><a href="#罗马历史的三个阶段" class="headerlink" title="罗马历史的三个阶段"></a>罗马历史的三个阶段</h2><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:15:40) I mean, the Romans all like to think of themselves as farmers, even filthy rich Romans. It was just their national identity is the citizen soldier farmer thing. But it did, among the aristocrats, the people who kind of ran things, yeah, it was hard to break into that if you didn’t have famous ancestors. It was such a big deal that there was a specific term called a novus homo, a new man, for someone who was the first person in their family to get elected to a major office in the Roman government because that was a weird and different and new thing. You actually designated them by this special term. Yeah, you’re absolutely right.<br>(00:15:40) 其实，所有罗马人都喜欢把自己视为农民，哪怕是腰缠万贯的罗马人也不例外 ——“公民 - 士兵 - 农民” 本就是他们的国家身份认同。但确实，对于贵族阶层（也就是掌控权力的人）来说，如果你没有显赫的祖先，几乎不可能跻身其中。这种情况非常普遍，以至于罗马人专门创造了一个术语 “novus homo”（拉丁语，意为 “新人”），用来指代家族中首位当选罗马政府重要官职的人 —— 因为这种事在当时既罕见又特殊，所以需要用专门的词汇来界定。所以你说得完全正确。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:16:19) If we may, let us zoom out, it would help me, maybe it’ll help the audience to look at the different periods that we’ve been talking about. You mentioned the Republic. You mentioned maybe when it took a form of empire and maybe there was the age of kings. What are the different periods of this Roman, let’s call it, what? The big-<br>(00:16:19) 如果可以的话，我们不妨把视角拉远一些 —— 这样不仅能帮我理清思路，或许也能让听众更好地理解我们之前讨论过的不同时期。您提到了共和国，提到了帝国时期，还提到了君主制时代。罗马历史的不同阶段，我们该如何划分这些主要的 ——</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:16:37) Roman history.<br>(00:16:37) 罗马历史阶段。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:16:38) Roman history. And a lot of people just call that whole period Roman Empire loosely, right?<br>(00:16:38) 对，罗马历史阶段。而且很多人会笼统地把整个时期都称为 “罗马帝国”，是吧？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:16:44) Yeah.<br>(00:16:44) 是的。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:16:44) Maybe can you speak to the different periods?<br>(00:16:44) 那您能具体讲讲这些不同阶段吗？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:16:45) Yes, absolutely. Conventionally, Roman history is divided into three chronological periods. The first of those is from 773 BC to 509 BC, which is called the monarchy. All the periods get their names from the form of government. This is the earliest phase of Roman history. It’s when Rome is mostly just a fairly undistinguished little collection of mud huts, honestly, just like dozens of other cities of little mud huts in Italy. That early phase, about 750 to around 500 BC is the monarchy. They’re ruled by kings.<br>(00:16:45) 当然可以。按照传统划分，罗马历史依据时间顺序分为三个阶段。第一个阶段是公元前 773 年至公元前 509 年，称为 “君主制时期”—— 所有阶段的名称都源于当时的政府形式。这是罗马历史最早的阶段，说实话，那时的罗马还只是一个不起眼的小村落，全是泥屋，和意大利境内几十个类似的泥屋村落没什么区别。这个早期阶段（大致公元前 750 年至公元前 500 年）由国王统治，即君主制时期。</p><p>(00:17:20) Then there’s this revolution, they kick out the kings, they become a Republic. That lasts from 500 BC roughly to about either 31 or 27 BC, depending what date you pick as most important, but about 500 years. The Republic is when they have a Republican form of government. Some people idealize this as Rome’s greatest period, and the big thing in that period is Rome first expands to conquer all of Italy in the first 250 years of that 500 year stretch. And then, the second 250 years, they conquer all the Mediterranean basin roughly. This is this time of enormous successful Roman conquest and expansion.<br>(00:17:20) 之后发生了一场革命，罗马人推翻了国王，建立了共和国。共和国时期大致从公元前 500 年持续到公元前 31 年或公元前 27 年（具体年份取决于以哪个关键事件为划分节点），时长约 500 年。这一阶段罗马实行共和制政府，有些人将其视为罗马最辉煌的时期。共和国时期的重要特征是罗马的大规模扩张：在前 250 年里，罗马征服了整个意大利；在后 250 年里，又大致征服了整个地中海盆地。这是罗马征服与扩张取得巨大成功的时代。</p><p>(00:17:59) And then, you have another switch up and they become ruled by emperors. Back to the idea of one guy in charge, though the Romans try to pretend it’s not like a king, it’s something else. Anyway, we can get into that. But they’re very touchy about kings, so they have emperors. Roman Empire, the first emperor is Augustus. Starts off as Octavian, switches his name to Augustus when he becomes emperor. He kind of sets the model for what happens.<br>(00:17:59) 之后，罗马的政治体制再次转变，进入由皇帝统治的时期。虽然又回到了 “一人掌权” 的模式，但罗马人刻意避免使用 “国王” 的称呼，而是称之为 “皇帝”—— 他们对 “国王” 这个词非常敏感，这点我们之后可以深入讨论。罗马帝国的首位皇帝是奥古斯都（Augustus），他最初名叫屋大维（Octavian），登基后才改名为奥古斯都，他也为后续的帝国统治奠定了模式。</p><h2 id="Rome’s-expansion"><a href="#Rome’s-expansion" class="headerlink" title="Rome’s expansion"></a>Rome’s expansion</h2><h2 id="罗马的扩张"><a href="#罗马的扩张" class="headerlink" title="罗马的扩张"></a>罗马的扩张</h2><p>(00:18:26) And then, how long does the Roman Empire last? That’s one of those great questions. The conventional answer is usually sometime in the fifth century, so the 400s AD, so about another 500 years, let’s say. So nice kind of even division, 500 years of Republic, 500 years of empire. But you can make very good cases for lots of other dates for the end of the Roman Empire. I actually think it goes all the way through the end of the Byzantine Empire in 1453, so another 1500 years, but that’s a whole other discussion. But so that’s your three phases of Roman history,<br>(00:18:26) 那么罗马帝国持续了多久呢？这是一个颇具争议的问题。传统答案通常认为是公元 5 世纪（即公元 400 年代），也就是说帝国时期约持续了 500 年 —— 这样算下来，共和国和帝国各占 500 年，划分得相当规整。但关于罗马帝国的终结年份，还有很多合理的不同说法。我个人认为，罗马帝国的历史应延续到 1453 年拜占庭帝国灭亡，这样算下来又多了 1500 年，但这就是另一个需要深入探讨的话题了。总之，以上就是罗马历史的三个主要阶段。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:18:59) And in some fundamental way, it still persists today, given how much of its ideas define our modern life, especially in the western world.<br>(00:18:59) 而且从某种根本意义上来说，罗马的影响至今仍在 —— 它的诸多理念塑造了我们的现代生活，尤其是在西方世界。</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:19:08) Yeah.<br>(00:19:08) 没错。</p><p>Lex Fridman<br>莱克斯・弗里德曼</p><p>(00:19:09) Can you speak to the relationship between ancient Greece and Roman Empire, both in the chronological sense and in the influence sense?<br>(00:19:09) 您能从时间顺序和文化影响两个方面，讲讲古希腊和罗马帝国的关系吗？</p><p>Gregory Aldrete<br>格雷戈里・奥尔德雷特</p><p>(00:19:19) Well, I mean, ancient Greece comes… The classical era of Greek civilization is around the 500s BC. That’s when you have the great achievements of Athens. It becomes the first sort of true democracy. They defeat the Persian invasions. A lot of famous stuff happens in the 400s, let’s say. So that is contemporaneous with Rome, but the Greek civilization, in a sense, is peaking earlier. And one of the things that happens is that Greece ends up being conquered by Rome in that second half of the Roman Republic between 250 and about 30 BC. And so, Greece falls under the control of Rome and Rome is very heavily influenced by Greek culture. They themselves see the Greeks as a superior civilization, culturally more sophisticated, great art, great philosophy, all this. Another thing about the Romans is they’re super competitive. One of the engines that drives Romans is this public competitiveness, especially among the upper classes. They care more about their status and standing among their peers than they do about money or even their own life, so there’s this intense competition.<br>(00:19:19) 好的。古希腊文明的 “古典时代” 大约在公元前 500 年左右，这一时期雅典取得了辉煌成就，成为首个真正意义上的民主政体，还击败了波斯人的入侵。公元前 400 年前后，古希腊也发生了很多著名事件。从时间上看，古希腊与罗马是同期存在的，但古希腊文明的鼎盛时期更早。而在罗马共和国后半段（公元前 250 年至公元前 30 年左右），希腊被罗马征服，归入罗马统治之下 —— 此后，罗马深受希腊文化的影响。罗马人自己也认为希腊是更优越的文明，在文化上更精深，拥有伟大的艺术、哲学等成就。此外，罗马人极具竞争性，这种公开的竞争精神（尤其是在上层阶层中）是推动他们行动的核心动力之一。他们对自身在同辈中的地位和声望的重视，甚至超过了对金钱乃至生命的重视，竞争氛围非常激烈。</p><p>(00:20:36) When they conquer Greece, Greek culture just becomes one more arena of competition. Romans will start to learn Greek. They’ll start to memorize Homer. They’ll start to see who can quote more passages of Homer in Greek in their letters to one another because that increases their status. Rome absorbs Greek civilization, and then the two get fused together.<br>(00:20:36) 征服希腊后，希腊文化成了罗马人新的 “竞争领域”：罗马人开始学习希腊语，背诵荷马的史诗，甚至会在书信中比拼谁能引用更多希腊语的荷马诗句 —— 因为这能提升他们的社会地位。就这样，罗马吸收了希腊文明，两者逐渐融合。</p><p>(00:20:59) The other thing I should mention in terms of influences that’s really huge on Rome is the Etruscans, and this is one that comes along before the Greeks. The Etruscans were this kind of mysterious culture that flourished in northern Italy before the Romans, so way back 800 BC. They were much more powerful than the Romans. They were a loose confederation of states. For awhile, the Romans even seemed to have been under Etruscan control. The last of the Roman kings was really an Etruscan guy pretty clearly. But the Etruscans end up giving to Rome, or you could say Rome ends up stealing perhaps, a lot of elements of Etruscan culture. Many of the things that we today think of as distinctively Roman, our cliches of what a Roman is, actually aren’t truly Roman, they’re stuff they stole from the Etruscans. Just a couple examples, the toga. What do you think of a Roman? It’s a guy wearing a toga, and the toga is the mark of a Roman citizen. Well, that’s what Etruscan kings wore, probably.<br>(00:20:59) 另外，除了希腊，还有一个对罗马影响巨大的文明 —— 伊特鲁里亚文明（Etruscans），而且它对罗马的影响比希腊更早。伊特鲁里亚人是一个略带神秘色彩的文明，早在公元前 800 年就活跃于意大利北部，比罗马兴盛得更早，实力也远超早期罗马。他们是一个松散的城邦联盟，罗马甚至曾一度处于伊特鲁里亚人的统治之下，罗马最后几位国王显然就是伊特鲁里亚人。伊特鲁里亚文明为罗马贡献了（或者说罗马从伊特鲁里亚 “借鉴” 了）大量文化元素。如今我们认为极具 “罗马特色” 的很多事物，其实并非罗马原创，而是源自伊特鲁里亚。举几个例子：托加袍（toga）—— 提到罗马人，我们脑海里总会浮现出穿托加袍的形象，托加袍也是罗马公民的标志，但这种服饰很可能最初是伊特鲁里亚国王的穿着。</p><p>Lex Fridman<br>(00:22:33) I mean, that’s a really powerful thing. It’s a powerful aspect of a civilization to be able to, we can call it stealing which is a negative connotation, but you can also see its integration basically. Yes, steal the best stuff from the peoples you conquer or the peoples that you interact with.<br>(00:22:33) 我想说，这其实是一种非常强大的能力。一个文明能做到这一点 —— 我们可以用带有负面意味的 “窃取” 来形容，但本质上这其实是 “融合”—— 真的很了不起。没错，就是从被征服的族群或接触到的族群中，吸纳那些最优秀的东西。</p><p>(00:22:53) Not every empire does that. There’s a lot of nations and empires that when they conquer, they annihilate versus integrate. And so, it’s an interesting thing to be able to culturally… The form that the competitiveness takes is that you want to compete in the realm of ideas in culture versus compete strictly in the realm of military conquest.<br>(00:22:53) 并非所有帝国都能做到这一点。很多国家和帝国在征服后，会选择毁灭而非融合。所以，能在文化层面做到这一点很有意思…… 这种竞争方式不再局限于军事征服，而是延伸到了思想和文化领域。</p><p>Gregory Aldrete<br>(00:23:19) Yeah, and I think you’ve exactly put your finger on one of the, let’s say, secrets of Rome’s success, which is that they’re very good at integrating non-Romans or non-Roman ideas and kind of absorbing them.<br>(00:23:19) 没错，我觉得你精准地指出了罗马成功的一个关键 —— 他们非常擅长整合非罗马人或非罗马理念，并将其吸收内化。</p><p>(00:23:34) One of the things that’s absolutely crucial early in Roman history, when they’re just one of these tiny little mud hut villages fighting dozens of other mud hut villages in Italy, why does Rome emerge as the dominant one? Well, one of the things they do is when they do finally succeed in conquering somebody else, let’s say another Italianate people, they do something very unusual because the normal procedure in the ancient world is let’s say you conquer another city, you often kill most of the men, enslave the women and children, steal all the stuff, right? The Romans, at least with the Italians, conquer the other city, and sometimes they’ll do that, but sometimes they’ll also then say, “All right, we’re going to now leave you alone and we’re going to share with you a degree of Roman citizenship.” Sometimes they’d make them full citizens, more often they’d make them something we call half citizens, which is kind of what sounds like you get some of the privileges of citizenship, but not all of them. Sometimes they would just make them allies, but they would sort of incorporate them into the Roman project.<br>(00:23:34) 在罗马历史早期，当它还只是意大利众多泥屋村落中的一个、需要和几十个同类村落争斗时，有一件事至关重要：罗马为何能脱颖而出成为霸主？其中一个原因是，当他们最终征服某个族群（比如另一个意大利族群）时，会采取一种不同寻常的做法。要知道，古代世界的常规操作是：征服一座城市后，通常会杀死大部分男性，将妇女和儿童变为奴隶，再洗劫所有财物，对吧？但罗马人（至少对意大利族群）并非总是如此 —— 有时他们会说：“好，我们不会过多干涉你们，还会授予你们一定程度的罗马公民权。” 有时会给予完整公民权，但更常见的是 “半公民权”—— 顾名思义，就是能享受部分公民特权，但并非全部。有时他们会将被征服者吸纳为盟友，让其融入 “罗马事业” 之中。</p><p>(00:24:33) They wouldn’t necessarily ask for money or taxes, which is weird too. But instead, the one thing they would always, always demand from the conquered cities in Italy is that they provide troops to the Roman army. The army becomes this mechanism of Romanization where you pull in foreigners, you make them like you, and then they end up fighting for you. Early on, the secret to Rome’s military success is not that they have better generals. It’s not that they have better equipment. It’s not that they have better strategy or tactics. It’s that they have limitless manpower, relatively speaking. They lose a war and they just come back and fight again, and they lose again, and they come back and they fight again, and eventually they just wear down their enemies because their key thing of their policy is we incorporate the conquered people.<br>(00:24:33) 而且他们未必会索要钱财或赋税，这点也很特别。但有一点是罗马对意大利境内被征服城市的硬性要求 —— 必须为罗马军队提供兵力。军队由此成为 “罗马化” 的工具：吸纳外族人，让他们逐渐认同罗马，最终为罗马而战。在早期，罗马军事成功的秘诀并非拥有更优秀的将领、更精良的装备，也不是更出色的战略战术，而是相对而言 “取之不尽的人力”。他们输掉一场战争，会卷土重来；再输一场，依然会重新集结 —— 最终靠这种韧性拖垮敌人。而这一切的核心政策，就是 “融合被征服者”。</p><p>(00:25:25) The great moment that just exemplifies this is pretty late in this process. They’ve been doing this for 250 years just about, and they’ve gotten down to the toe of Italy, they’re conquering the very last cities down there. One of the last cities is actually a Greek city. It’s a Greek colony. It’s a wealthy city, and so when the Romans show up on the doorstep and are about to attack them, they do what any rich Greek colony or city does, they go out and hire the best mercenaries they can. They hire this guy who thinks of himself as the new Alexander the Great, a man named Pyrrhus of Epirus. He’s a mercenary. He is actually related to Alexander distantly. He has a terrific army, top-notch army. He’s got elephants. He’s got all the latest military technology. The Romans come and fight a battle against him, and Pyrrhus knows what he’s doing. He wipes out the Romans.<br>(00:25:25) 最能体现这一点的经典案例，发生在这个扩张过程的后期。当时罗马已经用这种策略经营了约 250 年，一路打到意大利最南端，正征服那里最后几座城市。其中一座是希腊殖民地，相当富有。当罗马大军兵临城下时，这座城市像所有富裕的希腊殖民地一样，重金招募了最精锐的雇佣兵 —— 这个人自视 “新亚历山大大帝”，名叫伊庇鲁斯的皮洛士（Pyrrhus of Epirus）。他是一名雇佣兵，与亚历山大大帝有远亲关系，手下有一支精锐之师，配备了大象和当时最先进的军事装备。罗马出兵与之交战，皮洛士战术娴熟，击溃了罗马军队。</p><p>(00:26:12) He thinks, “Okay, now we’ll have a peace treaty. We’ll negotiate something. I can go home.” But the Romans won’t even talk. They go to their Italian allies and half-citizens, they raise a second army, they send it against Pyrrhus. Pyrrhus says, ‘Okay, these guys are slow learners. Fine.” He fights them again, wipes them out, thinks, “Now we’ll have a peace treaty.” But the Romans go back to the allies, raise a third army and send it after Pyrrhus. When he sees that third army coming, he says, “I can’t afford to win another battle. I win these battles, but each time I lose some of my troops and I can’t replace them, and the Romans just keep sprouting new armies.” So he gives up and goes home.<br>(00:26:12) 皮洛士心想：“好了，现在该签订和平协议了，协商一下条件，我就能撤军回国了。” 但罗马人根本不愿谈判。他们转而向意大利盟友和半公民征召兵力，组建了第二支军队，再次迎战皮洛士。皮洛士说：“好吧，这些人真是不撞南墙不回头。” 他再次击败罗马军队，又以为 “这次该谈和了”。可罗马人又去征召盟友，组建了第三支军队。当皮洛士看到这支新军队逼近时，他意识到：“我再也承受不起‘胜利’的代价了。虽然每场仗我都赢了，但每次都会损失兵力，且无法补充；而罗马人总能不断组建新的军队。” 于是他放弃作战，撤军回国。</p><p>(00:26:55) Rome kind of loses every battle, but wins the war. Pyrrhus one of, actually, his officers has a great line as they’re going back to Greece. He says, “Fighting the Romans is like fighting a hydra,” and a hydra is this mythological monster that when you cut off one head, two more grow in its place, so you can just never win.<br>(00:26:55) 罗马虽然输掉了每一场战役，却赢得了整场战争。皮洛士的一名军官在撤军返回希腊时说过一句名言：“与罗马人作战，就像与九头蛇作战。” 九头蛇是神话中的怪兽，砍掉一个头，就会再长出两个 —— 你永远无法真正战胜它。</p><p>Lex Fridman<br>(00:27:17) That’s fascinating.<br>(00:27:17) 这太有意思了。</p><p>Gregory Aldrete<br>(00:27:18) So that’s the secret to Rome’s early success.<br>(00:27:18) 这就是罗马早期成功的秘诀。</p><p>Lex Fridman<br>(00:27:21) It’s not the military strategy. It’s not some technological asymmetry of power. It’s literally just manpower.<br>(00:27:21) 不是靠军事战略，也不是靠某种技术层面的实力优势，本质上就是靠人力。</p><p>Gregory Aldrete<br>(00:27:28) Mm-hm. Early on.<br>(00:27:28) 嗯，早期确实是这样。</p><p>Lex Fridman<br>(00:27:28) Early on.<br>(00:27:28) 早期是这样。</p><p>Gregory Aldrete<br>(00:27:30) And later, the Romans get very good… We’re into the empire phase now. Once they have emperors into the AD era of kind of doing the same thing by drawing in the best and the brightest and the most ambitious and the most talented local leaders of the people they conquer. When they go someplace, let’s say they conquer tribe of what to them as barbarians, they’ll often take the sons of the barbarian chiefs, bring them to Rome and raise them as Romans.<br>(00:27:30) 到了后来 —— 也就是帝国时期，罗马人在这方面做得更出色了。公元后的帝国时代，他们延续了类似策略，不过是吸纳被征服族群中最优秀、最有智慧、最有野心且最具才能的地方领袖。比如，当他们征服某个在他们看来是 “蛮族” 的部落时，常会把蛮族首领的儿子带到罗马，按照罗马人的方式抚养。</p><p>Lex Fridman<br>(00:28:02) Damn.<br>(00:28:02) 天呐。</p><p>Gregory Aldrete<br>(00:28:02) And so, it’s that whole way of turning your enemies into your own strength. The Romans start giving citizenship to areas they conquer. Once they move out of Italy, they aren’t as free with the citizenship, but eventually they do. They make Spain, lots of cities in Spain, they make all citizens and other places. And soon enough, the Roman emperors and the Roman senators are not Italians, they’re coming from Spain or North Africa or Germany or wherever.<br>(00:28:02) 这就是把敌人转化为自身力量的策略。罗马人开始向被征服地区授予公民权 —— 虽然走出意大利后，他们在公民权授予上不再像之前那样宽松，但最终还是推行了。比如在西班牙，很多城市的居民都获得了完整公民权。没过多久，罗马皇帝和元老院议员中就出现了非意大利人，他们来自西班牙、北非、德国等地。</p><p>(00:28:32) As early as the second century AD of the Roman Empire, so the first set of emperors, the first 100 years were all Italians, but right away at the beginning of the second century AD you have Trajan, who’s from Spain. The next guy, Hadrian’s from Spain, and then a century later, you have Septimius Severus, who’s from North Africa. You would later get guys from Syria. I mean, the actual leaders of the Roman Empire are coming from the provinces.<br>(00:28:32) 早在罗马帝国的 2 世纪（公元后），情况就已经如此了：帝国最初 100 年的皇帝都是意大利人，但到了 2 世纪初，图拉真（Trajan）成为首位西班牙出身的皇帝；他之后的哈德良（Hadrian）也来自西班牙；一个世纪后，又出现了北非出身的塞普蒂米乌斯・塞维鲁（Septimius Severus）；后来还有叙利亚出身的皇帝。也就是说，罗马帝国的实际统治者已经来自各个行省了。</p><p>Lex Fridman<br>(00:28:56) That’s brilliant.<br>(00:28:56) 这太精妙了。</p><p>Gregory Aldrete<br>(00:28:57) And it’s that openness to incorporating foreigners, making them work for you, making them want to be part of your empire, that I think is one of Rome’s strengths.<br>(00:28:57) 我认为，这种愿意接纳外族人、让他们为罗马效力、让他们主动渴望成为帝国一员的开放性，正是罗马的优势之一。</p><p>Lex Fridman<br>(00:29:07) Taking the sons is a brilliant idea and bringing them to Rome, because a kind of generational integration.<br>(00:29:07) 把首领的儿子带到罗马抚养，这真是个高招，相当于实现了代际层面的融合。</p><p>Gregory Aldrete<br>(00:29:15) The Roman military, later in the empire, is this giant machine of half a million people that takes in foreigners and churns out Romans. The army is composed of two groups. You have the Roman Legionaries who are all citizens, but then you have another group that’s just as large, about 250,000 of each, 250,000 Legionaries, 250,000 of the second group called Auxiliaries. Auxiliaries tend to be newly conquered warlike people that the Romans enlist as Auxiliaries to fight with them. They serve side by side with the Roman legions for 25 years. At the end of that time, when they’re discharged, what do they get? They get Roman citizenship, and their kids then tend to become Roman Legionaries.<br>(00:29:15) 到了帝国后期，罗马军队已经成为一台拥有 50 万人的庞大机器 —— 吸纳外族人，将他们培养成罗马人。军队分为两部分：一是 “罗马军团士兵”（Legionaries），全部由公民担任；二是规模相当的 “辅助部队”（Auxiliaries），两者各约 25 万人。辅助部队成员通常是新征服地区的好战族群，罗马招募他们并肩作战。他们要和罗马军团一起服役 25 年，退役时能获得什么？罗马公民权。而他们的后代，往往会成为新的罗马军团士兵。</p><h2 id="Punic-wars"><a href="#Punic-wars" class="headerlink" title="Punic wars"></a>Punic wars</h2><h2 id="布匿战争"><a href="#布匿战争" class="headerlink" title="布匿战争"></a>布匿战争</h2><p>(00:30:04) Again, you’re taking the most warlike and potentially dangerous of your enemies, kind of absorbing them, putting through this thing for 25 years where they learn Latin, they learn Roman customs, they maybe marry someone who’s already a Roman or a Latin woman. They have kids within the system, their kids become Roman Legionaries, and you’ve thoroughly integrated what could have been your biggest enemies, right? Your greatest threat.<br>(00:30:04) 你看，罗马就是这样：把敌人中最尚武、最具潜在威胁的群体吸纳进来，让他们在 25 年的服役期里学习拉丁语、熟悉罗马习俗，或许还会与罗马人或拉丁人通婚。他们在这个体系内成家生子，后代再成为罗马军团士兵 —— 就这样，原本可能成为最大威胁的群体，被彻底融入了罗马。</p><p>Lex Fridman<br>(00:30:28) That’s just brilliant, brilliant process of integration. Is that what explains the rapid expansion during the late Republic?<br>(00:30:28) 这真是一套绝妙的融合流程。共和国后期的快速扩张，是不是就得益于这个原因？</p><p>Gregory Aldrete<br>(00:30:36) No. There it’s more the indigenous Italians who are in the army at that point. They haven’t really expanded the Auxiliaries yet. That’s more something that happens in the Empire. Yeah, so back it up. We have that first 250 years of the Roman Republic, from about 500 to let’s say 250 BC. And in that period, they gradually expand throughout Italy, conquer the other Italian cities, who are pretty much like them. They’re people who already speak similar languages or the same language, have the same gods. It’s easy to integrate them. That’s the ones they make the half citizens and allies.</p><p>Gregory Aldrete<br>(00:30:36) 不是的。共和国后期军队的主力，更多是意大利本地人。当时辅助部队制度还没有真正推广开来，辅助部队更多是帝国时期的产物。我们回溯一下历史：罗马共和国的前 250 年（约公元前 500 年至公元前 250 年），罗马逐步征服了意大利全境，而被征服的意大利城邦与罗马本身非常相似 —— 他们语言相近甚至相通，信奉相同的神明，因此很容易融入罗马体系。这些族群就是罗马授予 “半公民权” 或吸纳为盟友的对象。</p><p>(00:31:13) Then in the second half of that period, from about 250 to let’s say 30 BC, Rome goes outside of Italy, and this is a new world because now they’re encountering people who are really fundamentally different. So, true others. They do not have the same gods. They don’t speak the same language. They have fundamentally different systems of economy, everything.</p><p>(00:31:13) 到了共和国后半段（约公元前 250 年至公元前 30 年），罗马的扩张范围超出了意大利，进入了一个全新的世界 —— 他们开始接触与自己差异极大的族群，真正的 “外来者”。这些族群信奉不同的神明，说着完全不同的语言，经济体系和社会结构也与罗马截然不同。</p><p>(00:31:34) Rome first expands in the Western Mediterranean, and there their big rival is the city state of Carthage, which is another city founded almost the same time as Rome that has also been a young, vigorously expanding aggressive empire. In the Western Empire at this time, you have two sort of rival groups, and they’re very different because the Romans are these citizen soldier farmers…</p><p>(00:31:34) 罗马首先向地中海西部扩张，而当地的主要竞争对手是迦太基城邦（Carthage）。迦太基与罗马几乎同时建立，当时也是一个年轻、极具扩张性的强势政权。彼时地中海西部有两个相互竞争的势力，且二者差异巨大 —— 罗马是 “公民 - 士兵 - 农民” 型社会，而迦太基则完全不同……</p><p>Gregory Aldrete<br>(00:32:00) Because the Romans are these citizen soldier farmers, so the Romans are all these small farmers, that’s the basis of their economy, and it’s the Romans who serve in the army. So the person who is a citizen, is also really by main profession, a farmer, and then in times of war, becomes a soldier.</p><p>Gregory Aldrete<br>(00:32:00) 之所以说罗马是 “公民 - 士兵 - 农民” 型社会，是因为罗马的核心群体是小农，农业是经济基础，而公民同时也是军队的主体。也就是说，一名罗马公民的主要职业是农民，战时则应征入伍成为士兵。</p><p>(00:32:19) Carthage is an oligarchy of merchants, so it’s a very small citizen body. They make their money through maritime trade, so they have ships that go all over the Mediterranean. They don’t have a large army of Carthaginians. Instead, they hire mercenaries mostly to fight for them, so it’s almost these two rival systems. It’s different philosophies, different economies, everything.</p><p>(00:32:19) 迦太基则是由商人寡头统治的城邦，公民群体规模很小。他们通过海上贸易积累财富，商船遍布地中海；但迦太基没有大规模的本族军队，打仗主要依赖雇佣军。所以，罗马和迦太基是两种截然不同的体系 —— 理念、经济模式，方方面面都存在差异。</p><p>(00:32:45) Rome is strong on land. Carthage is strong at sea. So there’s this dichotomy, but they’re both looking to expand and they repeatedly come into conflict as they expand. So Carthage is on the coast of North Africa, Rome’s in Central Italy. What’s right between them? The island of Sicily. So the first big war is fought purely dictated by geography. Who gets Sicily, Rome or Carthage? And Rome wins in the end, they get it, but Carthage is still strong. They’re not weakened. So Carthage is now looking to expand.</p><p>(00:32:45) 罗马的优势在陆地，迦太基的优势在海上，双方形成了这种 “陆海对立” 的格局。但两者都在扩张，扩张过程中不可避免地多次爆发冲突。迦太基位于北非海岸，罗马位于意大利中部，两者之间的关键地带是什么？是西西里岛。因此，第一次大规模战争的爆发完全由地理因素决定：西西里岛该归罗马还是迦太基？最终罗马获胜，夺取了西西里岛，但迦太基实力未损，仍在寻求扩张。</p><p>(00:33:16) The next place to go is Spain. So they go and take Spain. Rome, meanwhile, is moving along the coast of what today’s France. Where are they going to meet up? On the border of Spain and France. And there’s a city, at this point in time called Saguntum. The second big war between Rome and Carthage is over. Who gets Saguntum?</p><p>(00:33:16) 迦太基接下来的扩张目标是西班牙，他们成功控制了西班牙地区。与此同时，罗马正沿着如今法国的海岸向北扩张。双方的下一个冲突点在哪里？就在西班牙与法国的边境地带，当时那里有一座名为萨贡托（Saguntum）的城市。于是，罗马与迦太基的第二次大规模战争，就围绕 “萨贡托归属权” 展开。</p><p>(00:33:34) So, I mean, you can just look at a map and see this stuff coming. Sometimes geography is inevitability, and I think in the course of the wars between Rome and Carthage called the Punic Wars, there is this geographic inevitability to them.</p><p>(00:33:34) 其实只要看看地图，就能预见到这些冲突的发生。有时候地理因素会决定历史的走向，我认为罗马与迦太基之间的 “布匿战争”（Punic Wars），就带有这种地理必然性。</p><p>Lex Fridman<br>(00:33:47) Can you speak to the Punic Wars? There’s so many levels on which we can talk about this, but why was Rome victorious?</p><p>Lex Fridman<br>(00:33:47) 您能详细讲讲布匿战争吗？我们可以从很多角度讨论这个话题，但罗马最终获胜的原因是什么？</p><p>Gregory Aldrete<br>(00:33:56) Well, the Punic Wars really almost always comes down to the second Punic War. There’s three. There’s three Punic Wars. The first is over Sicily, Rome wins. The second is the big one, and it’s the big one because Carthage at this point in time, just by sheer luck, coughs up one of the greatest military geniuses in all of history.</p><p>Gregory Aldrete<br>(00:33:56) 布匿战争的核心，其实几乎都集中在第二次布匿战争上。布匿战争总共打了三次：第一次是为争夺西西里岛，罗马获胜；第二次是规模最大、影响最深远的一次 —— 因为当时的迦太基恰巧出了一位人类历史上最伟大的军事天才之一。</p><p>(00:34:15) This guy, Hannibal Barca, he was actually the son of the Carthaginian general who fought Rome for Sicily. Hamilcar was his father, but Hannibal is this just genius, just absolute military genius. He goes to Spain. He’s the one who kind of organizes stuff there, and now he knows the second war with Rome is inevitable. And so, the question is how do you take down Rome? He’s smart. He’s seen Rome’s strength. He knows it’s the Italian allies.</p><p>(00:34:15) 这个人就是汉尼拔・巴卡（Hannibal Barca），他其实是曾与罗马争夺西西里岛的迦太基将领哈米尔卡（Hamilcar）的儿子。但汉尼拔本人是真正的军事奇才，绝对的天才。他前往西班牙，在当地整合势力，并且清楚地知道，与罗马的第二次战争已不可避免。于是问题来了：如何击败罗马？汉尼拔很聪明，他看清了罗马的核心优势 —— 意大利盟友。</p><p>(00:34:45) So Rome always wins because even if they lose battles, they go to the Italian allies and half citizens and raise new armies. So how do you beat them? He can never raise that many troops himself. And Hannibal, I think correctly figures out the one way to maybe defeat Rome is to cut them away from their allies. Well, how do you do this?</p><p>(00:34:45) 罗马之所以总能赢，是因为即便输掉几场战役，他们也能从意大利盟友和半公民中征召兵力，组建新的军队。那么，该如何打破这种循环？汉尼拔自己无法征召足够多的兵力，所以他准确地判断出：击败罗马的唯一办法，或许是切断罗马与盟友的联系。但该怎么做呢？</p><p>(00:35:06) Hannibal’s plan is, I’m not going to wait and fight the Romans in Spain or North Africa. I’m going to invade Italy. So I’m going to strike at the heart of this growing Roman Empire, and my hope is that if I can win a couple big battles against Rome in Italy, the Italians will want their freedom back and they’ll rebel from Rome and maybe even join me, because most people who have been conquered want their freedom back, so this is a reasonable plan.</p><p>(00:35:06) 汉尼拔的计划是：不被动等待在西班牙或北非与罗马交战，而是主动入侵意大利 —— 直击这个崛起中罗马帝国的核心。他的设想是：如果能在意大利境内打赢几场大仗，意大利各城邦就会渴望重获自由，进而反抗罗马，甚至可能加入自己的阵营。毕竟，大多数被征服者都希望摆脱控制，这个计划在当时是合理的。</p><p>(00:35:37) So Hannibal famously crosses the Alps with elephants, dramatic stuff. Nobody expects him to do this. Nobody thinks you can do this. Shows up in Northern Italy. Romans send an army. Hannibal massacres them. He is a military genius. Rome takes a year, raises a second army. We know this story, sends it against Hannibal. Hannibal wipes them out.</p><p>(00:35:37) 于是就有了汉尼拔著名的 “翻越阿尔卑斯山” 行动，场面极具戏剧性。没人想到他会这么做，也没人认为这可行。但他成功抵达了意大利北部，罗马随即派遣一支军队迎战，结果被汉尼拔击溃 —— 他的军事才能确实超凡。罗马花了一年时间组建第二支军队，再次派去对抗汉尼拔，又被全歼。</p><p>(00:35:57) Rome gets clever this time. They say, okay, Hannibal’s different. We’re going to take two years, raise two armies and send them both out at the same time against Hannibal. So they do this, and this is the Battle of Cannae, which is one of the most famous battles in history, Hannibal’s facing this army of 80,000 Romans about, and he comes up with a strategy called double envelopment. I mean, we can go into it later if you want, but it’s this famous strategy where he basically sucks the Romans in, surrounds them on all sides, and in one afternoon at the Battle of Cannae, Hannibal kills about 60,000 Romans.</p><p>(00:35:57) 这次罗马学聪明了，他们意识到汉尼拔与以往的对手不同。于是他们花了两年时间组建了两支军队，同时派往战场对抗汉尼拔。这场战役就是历史上著名的 “坎尼会战”（Battle of Cannae）。当时汉尼拔面对的罗马军队约有 8 万人，他想出了 “双重包围” 战术 —— 如果之后你想深入了解，我们可以再细聊，但简单来说，这是一种经典战术：先引诱罗马军队深入，再从四面八方将其包围。在坎尼会战的一个下午，汉尼拔就歼灭了约 6 万名罗马士兵。</p><p>(00:36:36) Now, just to put that in perspective, that’s more Romans hacked to death in one afternoon with swords than Americans died in 20 years in Vietnam. I mean, the Battle of Gettysburg, which lasted three days and was one of the bloodiest battles of civil war, I think the actual deaths at that were maybe like 15,000. So this is a bloodshed of an almost unimaginable scale.</p><p>(00:36:36) 我们可以对比一下，感受这场屠杀的规模：一个下午被刀剑砍杀的罗马人数量，比美国在越南战争 20 年间阵亡的人数还多；美国南北战争中最惨烈的葛底斯堡战役持续了三天，阵亡人数大概也只有 1.5 万。所以坎尼会战的血腥程度，在当时是难以想象的。</p><p>Lex Fridman<br>(00:37:01) It’s also brutal…</p><p>Lex Fridman<br>(00:37:01) 这也太残酷了……</p><p>Gregory Aldrete<br>(00:37:02) Yes.</p><p>Gregory Aldrete<br>(00:37:02) 确实如此。</p><p>Lex Fridman<br>(00:37:03) … just to slaughter.</p><p>Lex Fridman<br>(00:37:03) … 简直是屠杀。</p><p>Gregory Aldrete<br>(00:37:03) I mean, it’s just mind boggling to think of that. So now, this is Rome’s darkest hour. This is why the second Punic War is important, because there’s that Nietzsche phrase, “What doesn’t kill you makes you stronger,” this is the closest Rome comes to death in the history of the Republic. Hannibal almost kills Rome, but no, it’s not much of a spoiler.</p><p>Gregory Aldrete<br>(00:37:03) 现在回想起来，依然觉得不可思议。坎尼会战之后，罗马陷入了历史上最黑暗的时刻 —— 这也是第二次布匿战争如此重要的原因。尼采有句名言：“那些杀不死你的，会让你更强大”，而此时的罗马，正处于共和国历史上最接近 “死亡” 的时刻。汉尼拔几乎摧毁了罗马，但（说出来不算剧透）罗马最终还是挺了过来。</p><p>(00:37:28) Rome’s going to survive, and from this point on, they’re going to be unbeatable, but this is the crisis. This is the crucible. This is the furnace that Rome passes through, that is the dividing point between when they’re one more up and coming empire and when they’re clearly the dominant power in the Mediterranean.</p><p>(00:37:28) 罗马不仅活了下来，而且从这一刻起，几乎变得不可战胜。这场危机就像一座熔炉，罗马在其中淬炼重生 —— 这是罗马从 “又一个崛起中的帝国” 转变为 “地中海绝对霸主” 的分水岭。</p><p>(00:37:44) So what do they do about Hannibal? Well, they’re smart. We’re not going to fight Hannibal. We’re not going to give Hannibal the chance to kill more Romans. So they adopt a strategy that they’ll follow Hannibal, when they raise a couple more armies, follow Hannibal round, but whenever Hannibal turns and tries to attack them, the Romans just back off. No, thank you. We’re not going to let you give you a chance.</p><p>(00:37:44) 那么罗马是如何应对汉尼拔的呢？他们采取了一个聪明的策略：不再与汉尼拔正面交战，避免更多罗马士兵阵亡。在组建了几支新军队后，他们只是跟在汉尼拔的军队后面，但每当汉尼拔转身试图进攻，罗马军队就撤退 ——“不，谢谢，我们不会给你交战的机会。”</p><p>(00:38:07) Meanwhile though, they’re not scared of other Carthaginians, so they raise a couple more armies and they send these to Spain, for example, and start attacking the Carthaginian holdings there. And by luck or necessity, Rome comes up with its own brilliant commander at this point, a guy named Scipio, and he wins victories in Spain, conquers Spain. Then, he crosses into North Africa and starts to conquer that and ends up threatening Carthage directly.</p><p>(00:38:07) 但与此同时，罗马并不惧怕其他迦太基军队。他们又组建了几支军队，派往西班牙等地，开始攻击迦太基在当地的据点。或许是运气，或许是必然，罗马此时也涌现出了一位杰出的将领 —— 西庇阿（Scipio）。他在西班牙取得胜利，征服了西班牙地区，随后率军渡过地中海进入北非，开始征服迦太基本土，直接威胁到迦太基城的安全。</p><p>(00:38:34) And poor Hannibal, undefeated in Italy, has now been walking up and down Italy or marching up and down Italy for 12 years looking for another fight, and the Romans won’t give it to them. They’ve been attacking all these other areas and chipping away at Carthaginian power.</p><p>(00:38:34) 而汉尼拔呢？他在意大利境内未尝一败，却在意大利土地上转战了 12 年，始终找不到与罗马正面决战的机会。与此同时，罗马通过攻击其他地区，不断削弱迦太基的实力。</p><h2 id="Conquering-Greece"><a href="#Conquering-Greece" class="headerlink" title="Conquering Greece"></a><strong>Conquering Greece</strong></h2><h2 id="征服希腊"><a href="#征服希腊" class="headerlink" title="征服希腊"></a><strong>征服希腊</strong></h2><p>(00:38:52) So finally, after more than a decade in Italy, Hannibal is called back to defend the homeland, defend Carthage from Scipio. The two meet in a big battle. This should be one of the great battles of all times the Battle of Zama, but Hannibal’s guys are kind of old by this point. Scipio has all the advantages. He wins. Carthage is defeated. So that’s pretty much the end of Carthage.</p><p>Conquering Greece<br>(00:38:52) 最终，在意大利征战了十多年后，汉尼拔被召回迦太基本土，抵御西庇阿的进攻。两位名将在北非展开决战 —— 这场 “扎马会战”（Battle of Zama）本应成为历史上最伟大的战役之一，但此时汉尼拔的军队已显老态，西庇阿则占据了所有优势，最终西庇阿获胜，迦太基被击败。至此，迦太基的辉煌基本落幕。</p><p>(00:39:15) The city survives, and then 50 years later, the Romans wipe it out, but that’s not much of a war. But from this moment on, from the second Punic War, which ends in 201 BC, Rome is undisputably the most powerful force nation in the Mediterranean world, and having conquered the West, they’re now going to turn to the East, which is the Greek world, and the Greek world is older. It’s richer, it’s the rich part, half of the Mediterranean, it’s culturally more sophisticated. It’s the world left by Alexander the Great, that’s ruled by the descendants of his generals.</p><p>(00:39:15) 迦太基城虽然在当时得以留存，但 50 年后还是被罗马彻底摧毁 —— 不过那已经算不上一场真正的战争了。而从第二次布匿战争（公元前 201 年结束）开始，罗马已成为地中海世界无可争议的最强力量。征服了西部后，罗马将目光转向了东部 —— 希腊世界。当时的希腊世界历史更悠久、更富庶（占据了地中海一半的富庶地区），文化也更精深，是亚历山大大帝留下的遗产，由他的将领后代统治。</p><p>(00:39:50) And the Greeks kind of view themselves as superior to the Romans. I mean, to the Greeks, the Romans are these uncouth sort of savage barbarians, but they’re going to get a real shock because the Roman army now has gotten really good to beat Hannibal. And when they go East, they’re going to just defeat the Greeks relatively easily, one after the other.</p><p>(00:39:50) 希腊人当时多少有些看不起罗马人 —— 在他们眼中，罗马人是粗鲁的 “野蛮部落”。但希腊人很快就要迎来巨大的冲击：为了击败汉尼拔，罗马军队的战斗力已大幅提升，当他们进军东部时，击败希腊各邦的过程相对轻松，一个接一个地征服了希腊世界。</p><p>(00:40:11) And there’s a famous historian named Polybius who is a Greek whose city was captured by the Romans. He later becomes a friend to the Scipio family. He actually teaches some of the Scipio children about Greek culture. And he writes a history of Rome and his motivation for writing this is he says, at the beginning of this book, he says, “Surely there can be no one so incurious as to not want to understand how the Romans could have conquered the entire Greek world in 53 years,” because that seems unimaginable to him.</p><p>(00:40:11) 当时有一位著名的历史学家叫波里比阿（Polybius），他是希腊人，家乡被罗马攻陷。后来他成为西庇阿家族的朋友，甚至教西庇阿的孩子学习希腊文化。波里比阿撰写了一部罗马史，他在书的开头就说明了自己的写作动机：“想必不会有人如此缺乏好奇心，不想知道罗马人是如何在 53 年内征服整个希腊世界的吧？”—— 因为在他看来，这简直是不可思议的事情。</p><h2 id="Scipio-vs-Hannibal"><a href="#Scipio-vs-Hannibal" class="headerlink" title="Scipio vs Hannibal"></a>Scipio vs Hannibal</h2><h2 id="西庇阿对决汉尼拔"><a href="#西庇阿对决汉尼拔" class="headerlink" title="西庇阿对决汉尼拔"></a>西庇阿对决汉尼拔</h2><p>(00:40:46) So he’s writing this entire history as a way to try and understand how did the Romans do it? We were these wonderful superior people, and they came around in 50 years, bang, that’s the end of us. So that’s his motivation.</p><p>Scipio vs Hannibal<br>(00:40:46) 所以他撰写整部史书，就是为了弄明白一个问题：罗马人是怎么做到的？我们希腊人如此优秀，却在 50 年间就被罗马人征服，这到底是为什么？这就是他写作的核心动力。</p><p>Lex Fridman<br>(00:40:59) Could you maybe speak to any interesting details of the military genius of Hannibal or Scipio? At that time, what are some interesting aspects this double envelopment idea?</p><p>Lex Fridman<br>(00:40:59) 您能讲讲汉尼拔或西庇阿军事才能中的一些有趣细节吗？比如当时的 “双重包围” 战术，有哪些值得关注的特点？</p><p>Gregory Aldrete<br>(00:41:10) I mean, Hannibal is good because he understood how to use different troop types and to play to their strengths and how to use terrain. So I mean, this is basic military stuff, but he did it really well. So one is his victories against the Romans, for example, is when the Romans are marching along the edge of a lake and their army is strung out in marching formations.</p><p>Gregory Aldrete<br>(00:41:10) 汉尼拔的厉害之处，在于他懂得如何运用不同类型的部队，发挥每种部队的优势，并且善于利用地形。这些虽然是基础的军事原则，但他执行得极为出色。比如，他在某次对罗马的胜利中，就是利用了地形优势：当时罗马军队正沿着湖边行军，队伍呈行军阵型拉长排列。</p><p>(00:41:32) They’re not kind of in combat formation, but they’re strung out along the edge of this lake. It’s misty. There’s not good visibility, and he ambushes them along this lakeside, so Lake Trasimene, and it’s just using the terrain, understanding this. Again, Hannibal is very much outnumbered, but he’s able to use the terrain and to take the enemy by surprise.</p><p>(00:41:32) 罗马军队当时并没有排成作战阵型，只是沿着湖边一字长蛇阵行进。当时雾气很重，能见度低，汉尼拔就在湖边设伏 —— 这场战役就是 “特拉西梅诺湖战役”（Battle of Lake Trasimene）。他正是通过对地形的利用和出其不意的战术，以少胜多击败了罗马军队。</p><p>(00:41:51) At Cannae, he’s working against the expectations. So the traditional thing you do in the ancient world is the two armies would line up on opposite sides of a field, you’d put your best troops in the middle, you’d put your cavalry on the sides, you’d put your lightly armed skirmishers beyond those, and then the two sides kind of smack together, and the good troops fight the good, and you see who wins.</p><p>(00:41:51) 而在坎尼会战中，汉尼拔则打破了当时的战术常规。在古代世界，传统的作战方式是：两支军队在战场两端列队，将最精锐的部队部署在中路，骑兵部署在两翼，轻装散兵则在更外侧；之后双方正面冲锋，精锐部队对撞，最终看哪一方获胜。</p><p>(00:42:15) Now, Hannibal is hugely outnumbered by this giant phalanx of heavy infantry, which is what the Romans specialized in. They’re very good at sort of heavily armed foot soldiers. So he knows I don’t want to go up against that. I don’t have that many of that troop type. My guys aren’t as good as the Romans anyway.</p><p>(00:42:15) 当时，罗马军队的核心是重装步兵方阵，在兵力上远超汉尼拔 —— 重装步兵正是罗马的专长，他们的重装步兵战斗力极强。汉尼拔很清楚，自己不能与罗马正面硬拼：一方面他没有足够多的重装步兵，另一方面他的步兵战斗力也不如罗马。</p><p>(00:42:33) So he lines up some of his less good troops in the center against the big menacing Roman phalanx, and he tells them, “Okay, when the Romans come, you’re not really trying to win, just hold them up. Just delay them,” and even tells them you can give ground, so you can retreat and sort of let the line form a big kind of C-shaped crescents, let the Romans sort of advance into you, but just hold that line.</p><p>(00:42:33) 于是，他将己方战斗力较弱的部队部署在中路，正面应对罗马极具威慑力的重装方阵，并下令：“罗马人进攻时，你们不用想着获胜，只要拖住他们、拖延时间就行”—— 他甚至允许这些部队后撤，让战线形成一个巨大的 “C” 形新月状，引诱罗马军队深入，但必须守住这条防线。</p><p>(00:42:58) And meanwhile, he puts his cavalry and his good troops on the side, and so on the sides, those good troops defeat the Romans, and then they kind of circle in behind the Romans and attack that big menacing Roman phalanx from the rear where it’s very vulnerable. And so, Hannibal catches the Romans in this sort of giant cauldron just with people closing in from both sides, and they get pressed together. They can’t fight properly, they panic, and they’re all slaughtered.</p><p>(00:42:58) 与此同时，他将骑兵和精锐部队部署在两翼。战斗开始后，两翼的精锐部队先击败了罗马的侧翼兵力，随后绕到罗马军队后方，攻击罗马重装方阵最薄弱的后背。就这样，汉尼拔把罗马军队困在了一个 “大熔炉” 里 —— 敌军从两侧和后方不断逼近，罗马士兵被挤在一起，无法正常作战，陷入恐慌，最终几乎被全歼。</p><h2 id="Heavy-infantry-vs-Cavalry"><a href="#Heavy-infantry-vs-Cavalry" class="headerlink" title="Heavy infantry vs Cavalry"></a>Heavy infantry vs Cavalry</h2><h2 id="重步兵与骑兵"><a href="#重步兵与骑兵" class="headerlink" title="重步兵与骑兵"></a>重步兵与骑兵</h2><p>(00:43:27) And that strategy of double envelopment, of sort of going around both sides becomes the model for all kinds of military strategies throughout the rest of history. I mean, the Germans use this in their Blitzkrieg in World War II, a lot of it was kind of that go around the sides and envelop the enemy. On the eastern front, they had a bunch of these cauldron battles where they would go around and try to encircle huge chunks of the Soviet, the Russian army, and do the same thing.</p><p>Heavy infantry vs Cavalry<br>(00:43:27) 这种 “双重包围” 战术 —— 即从两翼包抄敌军的策略，在此后的整个军事史上成为了各类战术的范本。比如二战时期，德国在 “闪电战” 中就运用了类似思路，核心就是从侧翼迂回、包围敌军；在东线战场，德军还打了多场 “围歼战”，绕到苏军后方，试图包围大规模苏军部队，用的正是这种战术。</p><p>(00:43:54) Supposedly even in the Gulf War, it was part of the US strategy for the invasion of Iraq to do this kind double envelopment maneuver. So it’s something that for the rest of military history, has been an inspiration to other armies.</p><p>(00:43:54) 据说在海湾战争中，美军入侵伊拉克的战略里，也包含了这种双重包围战术。可见在整个军事史上，汉尼拔的这一战术一直为其他军队提供着灵感。</p><p>Lex Fridman<br>(00:44:06) Can you speak to maybe, the difference between heavy infantry and cavalry, the usefulness of it in the ancient world?</p><p>Lex Fridman<br>(00:44:06) 您能讲讲重装步兵和骑兵的区别，以及它们在古代战场上的作用吗？</p><p>Gregory Aldrete<br>(00:44:12) The ancient world, sort of from the Greeks through the Romans, there’s this consistent line of focusing on heavy infantry. So going back to Greece when they’re fighting, let’s say Persia, which at the time, was the superpower of the ancient world and vastly richer, vastly larger than Ancient Greece, tons more men, but the Persians tended to be archers, tended to be light horsemen tended to be light infantry.</p><p>Gregory Aldrete<br>(00:44:12) 在古代世界，从希腊到罗马，有一个一贯的战术核心 —— 重视重装步兵。回溯到希腊与波斯作战的时代：当时波斯是古代世界的超级大国，比古希腊富有得多、疆域辽阔得多、兵力也多得多，但波斯军队的主力多是弓箭手、轻骑兵和轻装步兵。</p><p>(00:44:40) Whereas the Greeks specialized in what are called hop lights, which is a kind of infantrymen with very heavy body armor, a helmet, a spear, and a really big heavy shield. And they would get in that formation where you kind of make the shields overlap and just form this solid mass bristling with spear points and just slowly kind of march forward and grind up your enemy in front of you. And so, that’s that sort of block of heavy infantry.</p><p>(00:44:40) 而希腊则专注于培养 “重装步兵”（hoplites）—— 这类步兵装备着厚重的盔甲、头盔、长矛和巨大的重型盾牌。他们会排成 “方阵”（phalanx）：士兵们将盾牌相互重叠，形成一个密集的 “盾墙”，矛尖朝外，然后缓慢向前推进，碾压前方的敌人。这就是重装步兵方阵的作战方式。</p><p>(00:45:07) The advantage is head on against other things, they tend to win. The disadvantage is it’s slow moving. It’s vulnerable from the sides and the rear, so you got to protect those, but if you can keep frontally faced, it’s pretty much invincible. And that’s taken even further by Alexander the Great who comes up with the idea, well, what if we even give them a longer spear? So Greek spears were six to eight feet long. Alexander the Great, arms his armies with the sarissa, which is this 15 foot, almost a pike, this extra long spear.</p><p>(00:45:07) 重装步兵的优势在于：正面作战时几乎所向披靡；劣势则是移动缓慢，且侧翼和后方防御薄弱，必须专门派人保护 —— 但只要能保持正面迎敌，他们就几乎不可战胜。亚历山大大帝进一步强化了这一战术：他想，“如果给重装步兵配备更长的矛会怎样？” 希腊传统长矛长 6 到 8 英尺，而亚历山大为军队配备了 “萨里萨长矛”（sarissa）—— 这种长矛长达 15 英尺，几乎相当于一支长枪，长度远超传统长矛。</p><p>(00:45:41) And so, when the spear is that long, you don’t even hardly need the shields anymore. So it’s just this incredibly powerful thing in frontal attack, and that’s what he uses to make himself ruler of the known world. He goes and conquers the Persian Empire and makes himself the Persian king of kings with this phalanx of troops armed with the sarissa. So that’s very powerful.</p><p>(00:45:41) 长矛变长后，士兵甚至几乎不需要盾牌了 —— 这种重装方阵在正面进攻时威力惊人，亚历山大正是依靠这支装备萨里萨长矛的方阵，征服了波斯帝国，成为 “万王之王”，统治了当时已知的世界。可见这种战术的威力有多强。</p><p>(00:46:03) The Romans go a little bit different route. They have heavy infantry, but they focus more on fighting with short swords, so it’s get up close and kind of stab. And the other thing the Romans do is they focus on flexibility and subdividing their army. So Alexander’s phalanx was a mass of let’s say, 5,000 guys and it was one unit.</p><p>(00:46:03) 罗马则走了一条略有不同的路。他们也有重装步兵，但更注重用短剑作战 —— 也就是近距离刺杀。此外，罗马军队的核心特点是 “灵活性” 和 “部队细分”。比如亚历山大的方阵是一个由 5000 人组成的单一作战单位，整体性强但不够灵活。</p><p>(00:46:27) The Roman army is organized in an ever decreasing number of subunits. So you have a group of eight guys who are a contubernia, the men who share a tent, you take 10 of those and they form a century of 80 men. You take a bunch of those and you form a cohort. If you forget a bunch of those, you form a legion.</p><p>(00:46:27) 而罗马军队则被划分为层层递减的小型作战单位：8 名士兵组成一个 “帐篷队”（contubernia，即共同住一顶帐篷的士兵群体）；10 个帐篷队组成一个 “百人队”（century，共 80 人）；若干个百人队组成一个 “大队”（cohort）；若干个大队再组成一个 “军团”（legion）。</p><p>(00:46:44) So the Romans are able to subdivide their army, and the big sticking point comes at 197 BC at the Battle of Cynoscephalae, when the Roman Legion goes up against one of the descendants of Alexander the Great, who’s using his military system. So this is the new Roman system with flexibility versus the old invincible Alexander system with the heavily armed sarissa with those long 15-foot poles.</p><p>(00:46:44) 这种细分让罗马军队具备了灵活调度的能力。公元前 197 年的 “库诺斯克法莱战役”（Battle of Cynoscephalae）就是关键转折点：罗马军团对阵亚历山大将领后代统领的军队 —— 对方沿用了亚历山大的战术体系（即装备 15 英尺萨里萨长矛的重装方阵），而罗马则用的是灵活的新型战术体系。</p><h2 id="Armor"><a href="#Armor" class="headerlink" title="Armor"></a>Armor</h2><h2 id="盔甲"><a href="#盔甲" class="headerlink" title="盔甲"></a>盔甲</h2><p>(00:47:10) And the key moment in the battle is where they lock together And in a head-on clash, the Macedonians are going to win, but the Romans have the flexibility to break off a little section of their army, run around to the side, and attack that formation from the side, and they win the battle. So they prove tactically superior because of their flexibility. So it’s always development and counter development in military history.</p><p>Armor<br>(00:47:10) 战役的关键转折点出现在双方正面交锋时：若纯粹正面硬碰硬，马其顿军队本可获胜，但罗马军队凭借灵活性，抽调出一小支兵力绕到马其顿方阵侧翼，从侧面发起进攻，最终赢得了战役。由此可见，正是灵活性让罗马在战术上占据了优势。军事史上的发展，向来都是 “一方创新、另一方应对” 的循环过程。</p><p>Lex Fridman<br>(00:47:34) A fascinating, brutal testing, ground of tactics and technology</p><p>Lex Fridman<br>(00:47:34) 古代战场真是个既迷人又残酷的地方，堪称战术与技术的 “试验场”。</p><p>Gregory Aldrete<br>(00:47:38) Adaptation, you have to keep adapting.</p><p>Gregory Aldrete<br>(00:47:38) 核心就在于 “适应”—— 必须不断调整、不断适应。</p><p>Lex Fridman<br>(00:47:41) That’s, I think, the key thing. One of the fascinating things about your work, you study Roman life life in the ancient world, but also the details, like we mentioned, you are an expert in armor. So what kind of, maybe you could speak to weapons and most importantly, armor that were used by the Romans or by people in the ancient world.</p><p>Lex Fridman<br>(00:47:41) 我觉得这正是关键所在。您的研究有一点特别吸引人：您不仅研究罗马人的生活、古代社会的全貌，还关注很多细节 —— 比如我们之前提到的，您是盔甲领域的专家。所以想请您讲讲罗马人或古代人使用的武器，尤其是盔甲有哪些种类？</p><p>Gregory Aldrete<br>(00:48:05) I do military history. So I mean, the Romans specialized in, I mean, early on they have pretty random armor, and it’s not standardized. I mean, remember, there’s no factories in the ancient world, so nobody’s cranking out 10,000 units of exactly the same armor. Each one is handmade. Now, there can be a degree of standardization, even as early as Alexander, there was a certain amount of standardization, but each one is still handmade, and that’s important to keep in mind, each weapon, each piece of armor.</p><p>Gregory Aldrete<br>(00:48:05) 我主要研究军事史。罗马人的盔甲在早期其实很随意，没有统一标准。要知道，古代没有工厂，没人能批量生产出 1 万件完全一样的盔甲 —— 每一件都是手工制作的。当然，古代也存在一定程度的标准化，比如早在亚历山大时代就有了初步的标准，但即便如此，每件装备依然是手工打造。这一点很重要，无论是武器还是盔甲，都要记住这个背景。</p><p>(00:48:34) Armor develops over time to fit the tactics. So the Greek hoplites, are very heavy armor. The Roman infantrymen early in the public is lighter. Eventually they get this typical sort of chain mail shirt, helmet shield, the classic sort of Roman legionary, I would say, is the one of the first and second centuries AD, so the early Roman Empire, and this is the guy who wore bands of steel arranged in sort of bands around their body. So it looks almost like a lobster’s shell, right? And this is a thing called the lorica segmentata.</p><p>(00:48:34) 盔甲的发展始终是为了适配战术。比如希腊重装步兵（hoplites）的盔甲非常厚重；而罗马共和国早期的步兵盔甲则更轻便。到了罗马帝国早期（公元 1 至 2 世纪），罗马军团士兵的装备逐渐定型：他们会穿锁子甲，戴头盔，持盾牌 —— 最具代表性的是一种 “分段式钢甲”（lorica segmentata），钢片像环带一样环绕在身上，看起来几乎像龙虾壳。</p><p>(00:49:06) So it’s solid steel, which is very good protection, but it’s flexible because it has these individual bands that provide a lot of movement. And then, you have a helmet, you have a square shield that’s kind of curved, and you have the short sword, the Roman gladius and that’s the classic Roman legionary. Later, more things develop.</p><p>(00:49:06) 这种盔甲用实心钢打造，防护性极强，但又因为是分段式设计，灵活性很高，士兵活动起来不受限。再加上头盔、带弧度的方形盾牌，以及罗马短剑（gladius）—— 这就是我们印象中经典的罗马军团士兵形象。之后，盔甲技术还在不断发展。</p><p>(00:49:26) My personal relationship with armor is I got, really by accident, involved in this project to try to reconstruct this mysterious type of armor that was used, especially by the Greeks and Alexander the Great called the linothorax, which apparently was made only out of linen and glue. So this seems a little odd that that’s not the sort of material once you want metal or something, but we had clear literary references that people, including Alexander, and the most famous image of Alexander is this Alexander mosaic found at Pompeii that shows him wearing one of these funny types of armor.</p><p>(00:49:26) 我个人与盔甲的渊源，其实是偶然卷入了一个项目 —— 复原一种神秘的盔甲 “亚麻甲”（linothorax）。这种盔甲曾被希腊人，尤其是亚历山大大帝使用，材质显然只有亚麻和胶水。用亚麻和胶水做盔甲，听起来可能有点奇怪，毕竟大家通常会想到金属。但有明确的文献记载（包括提到亚历山大使用），而且庞贝古城发现的《亚历山大马赛克镶嵌画》中，亚历山大穿的就是这种特别的盔甲，图像证据很清晰。</p><p>(00:50:05) The catch is none survived. It’s organic materials. So we don’t have any of them and archaeologists like to study things that survive. So we have nice typologies of Greek armor made of bronze, Roman armor made of steel or sort of proto steel, but this thing, this linothorax was a mystery. And one of my undergraduate students, a guy named Scott Bartel, had a real, well, an Alexander obsession. He really loved Alexander.</p><p>(00:50:05) 问题在于，亚麻甲没有一件留存下来 —— 因为它是有机材质，早就腐烂了。考古学家通常研究能留存的文物，所以我们对希腊青铜甲、罗马钢甲（或原始钢甲）的分类很清晰，但亚麻甲始终是个谜。我的一个本科生斯科特・巴特尔（Scott Bartel）是个 “亚历山大迷”，特别痴迷于他。</p><p>Lex Fridman<br>(00:50:34) As one should.</p><p>Lex Fridman<br>(00:50:34) 确实，谁会不痴迷呢。</p><p>Gregory Aldrete<br>(00:50:35) He had Alexandros tattooed on his arm in Greek, and he was a smart student. He was really smart. And so, he, one summer, made himself an imitation of this thing of Alexander just for fun. And he said, “Can you give me some articles so I could do a better job?” So he used some scholarly articles about this armor, and with typical academic arrogance, I said, “Why, Scott, of course I will. I’ll give you some references,” and I went and looked and there weren’t any. So at that point, I was like, “Huh, tell you what, why don’t you and I look into this and try to do a reconstruction using only the materials they would’ve had in the ancient world?” And little did I know at the time, I thought, maybe I’ll get an article out of this, I mean, it ended up being a tenure project involving 150 students, a couple dozen other faculty members, and having three documentaries made out of it. And Scott and I ended up writing a scholarly book on this. So this is how, you never know where your next project’s going to come from.</p><p>Gregory Aldrete<br>(00:50:35) 他手臂上还纹了希腊文的 “亚历山大”（Alexandros），而且他很聪明，是个尖子生。有一年夏天，他出于兴趣，自己仿做了一件亚麻甲，然后问我：“能不能给我些相关论文，让我做得更专业点？” 我当时还带着学者常见的自负，说：“当然可以，斯科特，我给你找些参考文献。” 结果我翻遍资料，发现根本没有相关论文。这时候我就想：“不如我们一起研究吧，试着只用古代能获取的材料来复原它？” 当时我以为顶多能写篇论文，没想到最后这成了我的终身教职项目 —— 参与的学生有 150 人，还有几十位其他教职人员加入，甚至拍了三部纪录片。我和斯科特最后还合著了一本关于亚麻甲的学术著作。所以说，你永远不知道下一个研究项目会从哪里冒出来。</p><p>(00:51:34) So it started with this undergraduate turned into this huge thing, but it’s what we did. We first said, “All right, what are all the sources for this armor?” And in the end, we found 65 accounts of it in ancient literature by 40 different authors. So we have literary descriptions, and then we looked at ancient art, and we were able to identify about a thousand images in ancient art, in vase paintings, pottery, bronze sculpture, tomb paintings, all these different things showing this armor.</p><p>(00:51:34) 就这样，一个始于本科生兴趣的小想法，变成了一个大项目。我们首先做的是梳理亚麻甲的史料：最终在 40 位古代作者的文献中，找到了 65 处关于它的记载，有详细的文字描述。然后我们研究古代艺术作品，在花瓶彩绘、陶器、青铜雕塑、墓室壁画等不同载体上，识别出了约 1000 幅描绘亚麻甲的图像。</p><p>(00:52:05) And then, using those two things, we tried to backwards engineer a pattern to say, “Well, if this is what the end product look like, what does it have to look like when you make it?” And then we tried to reconstruct one of these things using only the glue and materials. So we had to use animal glues, rabbit glue. We had to end up sort of making our own linen, which comes from the flax plant. So we had to grow flax, harvest it, using only techniques in the ancient world, so modern flax goes through chemical processes. No, we had to do this the old-fashioned way, spin it into thread, so the thread into fabric, glue it all together.</p><p>(00:52:05) 基于这些文字和图像资料，我们尝试 “逆向推导” 制作方法：“既然成品是这个样子，制作过程中应该是什么步骤？” 然后我们开始复原 —— 只用古代的材料和胶水。我们用的是动物胶（比如兔胶）；亚麻布也得自己做：亚麻来自亚麻植物，我们要按古代方法种植、收割（现代亚麻会经过化学处理，我们完全不用），然后用传统方式纺线、织布，最后用胶水把布料粘合起来。</p><p>(00:52:41) And then, the fun part was once we made these things, we subjected them to ballistics testing. So we shot them with arrows, which again were wooden reconstruction arrows, using bronze arrowheads that were based on arrowheads found on ancient battlefields to determine how good protection would this thing have been. And of course, the kind of fun one that everyone always likes and that the documentaries always want is at one point they’re like, “Well, can you put Scott in one of these and shoot him?” And we’re like, “Okay.” I mean, at that point, we’ve done about a thousand test shots. I grew up shooting bows and arrows. I knew exactly how far that was going to go. So it’s one of these, don’t do this at home kids.</p><p>(00:52:41) 最有意思的环节是复原完成后的弹道测试。我们用仿制的古代木箭（箭头是根据古战场出土文物复刻的青铜箭头）射击亚麻甲，测试它的防护效果。当然，大家（包括纪录片团队）最感兴趣的是：“能不能让斯科特穿上亚麻甲，然后射他？” 我们说 “可以”—— 毕竟当时已经做了上千次射击测试，我从小就射箭，很清楚箭的射程和威力。不过还是要提醒：小朋友千万别在家模仿。</p><p>Lex Fridman<br>(00:53:19) So there’s a million questions to ask here, but in general, how well, in terms of ballistics, does it work? Can it withstand arrows or direct strikes from swords and axes and stuff like that?</p><p>Lex Fridman<br>(00:53:19) 这里有太多问题想问了，但总的来说，亚麻甲的弹道防护效果怎么样？能挡住箭吗？或者能承受剑、斧这类武器的直接攻击吗？</p><p>Gregory Aldrete<br>(00:53:30) Bottom line is a one centimeter thick linothorax, laminated, or even sewn. It doesn’t have to be laminated. Layer of linen is about as good protection as two millimeters of bronze, which was the thickest, comparable, body armor of bronze at the time. And we’re talking fourth century, fifth century BC here, so classical and Hellenistic Greece, and that would’ve protected you from, let’s say, random arrow strikes on the battlefield. So you could have gotten hit by arrows and they simply wouldn’t have gone through.</p><p>Gregory Aldrete<br>(00:53:30) 简单说，1 厘米厚的亚麻甲（无论是层压粘合的，还是纯缝制的 —— 其实不一定需要层压），防护效果相当于 2 毫米厚的青铜甲。而 2 毫米已经是当时青铜甲能达到的最厚厚度了（我们讨论的是公元前 4 至 5 世纪，即古典时期和希腊化时期的希腊）。在战场上，这种亚麻甲能挡住普通的箭矢攻击 —— 就算被箭射中，箭也穿不透。</p><p>Lex Fridman<br>(00:54:06) What are the benefits? Is there a major weight difference?</p><p>Lex Fridman<br>(00:54:06) 那它的优势是什么？重量上有明显差别吗？</p><p>Gregory Aldrete<br>(00:54:09) Yes. So the benefits of this are, it’s much lighter than metal armor. So the linothorax is about 11 pounds. A bronze cuirass of comparable protection would’ve been about 24 to 6 pounds. The chain mail shirt would be about 28, 27 pounds. It’s cooler. I mean, the Mediterranean is a hot place with the hot sun. Even today, a linen shirt is something you wear when you want to be cool. So it’s much lighter, that gives your troops greater endurance on the battlefield. They can run farther, fight longer. It’s cheaper. You don’t need a blacksmith who’s a specialist to make it.</p><p>Gregory Aldrete<br>(00:54:09) 优势很明显。首先是轻得多：一件亚麻甲约 11 磅（约 5 公斤），防护效果相当的青铜胸甲（cuirass）重 24 到 26 磅（约 11-11.8 公斤），锁子甲则有 27 到 28 磅（约 12.2-12.7 公斤）。其次是更凉爽：地中海地区阳光灼热，就算现在，亚麻材质也是避暑的选择。重量轻意味着士兵在战场上耐力更强 —— 能跑得更远，战斗更久。而且亚麻甲更便宜，不需要专业铁匠就能制作。</p><p>(00:54:46) In fact, probably, this is interesting, any woman in the ancient world could have made one of these because they were the ones who spun thread and sewed it into fabric. So I can easily see in a household a mother making this for her son, a wife making it for her husband. So it’s a form of armor you could have made domestically that would’ve been maybe not the greatest armor, but pretty good, pretty comparable to bronze armor.</p><p>(00:54:46) 有意思的是，古代的女性其实都能做亚麻甲 —— 因为纺线、织布本就是她们的日常工作。很容易想象这样的场景：一个家庭里，母亲为儿子做亚麻甲，妻子为丈夫做亚麻甲。所以这是一种 “家庭自制” 的盔甲，或许不是最顶级的，但防护效果很好，能和青铜甲媲美。</p><p>Lex Fridman<br>(00:55:14) And it’s amazing that you used all the materials they had at the time and none of the modern techniques, but I should probably say, maybe you can speak to that, they were probably much better at doing that than you are, right? Because again, generational, it’s a skill. It’s a skill that probably has practiced across decades, across centuries [inaudible 00:55:32].</p><p>Lex Fridman<br>(00:55:14) 你们完全用古代材料、不借助任何现代技术来复原，这太厉害了。但我想，古代人做这个肯定比你们熟练得多，对吧？毕竟这是代代相传的手艺，经过了几百年、上千年的实践……（音频模糊）</p><p>Gregory Aldrete<br>(00:55:32) I mean, in terms of producing the fabric, I’m sure they could do it 10 times faster than we could just, that’s a speed thing, but it’s still incredibly labor-intensive where I think there’s a big difference between our reconstruction and ancient ones is in the glue. So we ended up using a kind of least common denominator glue. We used rabbit glue because it would’ve been available anywhere and it’s cheap.</p><p>Gregory Aldrete<br>(00:55:32) 比如织布，古代人的速度肯定是我们的 10 倍 —— 这只是效率问题，但即便如此，织布依然非常耗费人力。不过我觉得，我们复原的亚麻甲和古代原版最大的差距在胶水上。我们最终用的是 “最基础款” 胶水 —— 兔胶，因为这种胶水在古代随处可得，而且成本低。</p><p>(00:55:55) But in the ancient world, they did have basically the equivalent of super glues. I mean, we found, for example, a helmets that were fished out river in Germany that had metal parts glued together that after 2,000 years of immersion and water were still glued together. So they had some great glues. We just don’t know what the recipes for them were. So we went the opposite tack and said, “Well, we’re just going to make something that we know they could have made.” So it was at least this good, you know what I’m saying?</p><p>(00:55:55) 但古代其实有类似 “超级胶水” 的东西。比如在德国的一条河里，我们发现了一个古代头盔，它的金属部件是用胶水粘在一起的 —— 在水里泡了 2000 年，这些部件居然还粘得很牢。可见他们的胶水质量极好，只是我们不知道具体配方。所以我们换了个思路：“我们只做古代人肯定能做出的版本”，也就是说，我们复原的亚麻甲，防护效果至少不会比古代的差。</p><p>Lex Fridman<br>(00:56:22) But actually, this is a materials thing, but I think glue, aside from helping glue things together, it can also be a thing that serves as armor. So if you glue things correctly, the way it permeates the material that is gluing, can strengthen the material…</p><p>Lex Fridman<br>(00:56:22) 不过这其实涉及材料学 —— 我觉得胶水除了粘合，本身也能起到防护作用。如果涂胶方法得当，胶水渗透到材料里，就能增强材料的……</p><p>Gregory Aldrete<br>(00:56:44) Yes.</p><p>Gregory Aldrete<br>(00:56:44) 没错。</p><p>Lex Fridman<br>(00:56:44) … the integrity of the material. That’s an art and the size probably that they understood deeply.</p><p>Lex Fridman<br>(00:56:44) … 材料强度。这其实是门手艺，古代人肯定对此深有研究。</p><p>Gregory Aldrete<br>(00:56:48) The process of lamination did add something. So there’s actually a huge debate among scholars and actually a sort of amateur archeologist that was this linothorax thing glued together or was it simply sewn together? Was it composite, partially linen, partially leather, or other materials? And my honest answer is I think it’s all of the above, because again, every piece of armor in the ancient world was an individual creation.</p><p>Gregory Aldrete<br>(00:56:48) 层压工艺（用胶水将多层材料粘合）确实能提升防护性。不过学者和业余考古爱好者之间有个很大的争议：亚麻甲到底是用胶水粘的，还是单纯缝的？它是不是复合材料 —— 比如部分用亚麻、部分用皮革或其他材料？说实话，我觉得以上情况都有可能，因为古代的每一件盔甲都是独一无二的手工制品。</p><p>(00:57:11) So I think if you had some spare leather, you put that in. If you wanted to make one that was just sewn together, or even quilted stuffed with stuff you do that, maybe you were good at gluing stuff, you use that. So I think there’s no one answer. We investigated one possibility because we just had limited time and money and resources, but I think all these other things existed at the same time and we’re variants of it.</p><p>(00:57:11) 比如家里有多余的皮革，就会加进去；想做纯缝制的，或者填点东西做成绗缝款，也可以；如果擅长用胶水，就用胶水粘合。所以没有唯一答案。我们只研究了其中一种可能性，因为时间、资金和资源都有限，但我相信其他制作方式在当时也存在，都是亚麻甲的不同变体。</p><p>Lex Fridman<br>(00:57:34) Just as a small aside, I just think this is a fascinating journey you went on. I love it. Sort of answering really important questions about, in this case, armor about military equipment and technology that archeologists can’t answer by using all the literary, so all the sources you can to understand what it looked like, what were the materials, using the materials at the time, and actually doing ballistic testing. It’s really cool. It’s really cool that you see that there’s a hole in the literature and nobody studied it, and going hard and doing it the right way to sort of uncover this. I don’t know, I think it’s an amazing mystery about the ancient world.</p><p>Lex Fridman<br>(00:57:34) 插句题外话，我觉得您这段研究经历太迷人了。考古学家可能无法解答关于盔甲、军事装备和技术的这类关键问题，但您通过梳理所有文献资料，弄清楚它的外观、材料，再用古代材料复原，还做了弹道测试 —— 这种方式太酷了。您发现文献里有空白，没人研究过这个领域，就全力以赴用科学的方法去探索，揭开古代的谜团。我觉得这真的很了不起。</p><p>Gregory Aldrete<br>(00:58:18) I mean, shifting from just sort of Roman history in general to my research that I’ve done as a scholar, the theme that runs throughout my scholarship is practical stuff. I’m interested, how did this actually work in the ancient world? So there’s people who are much more theoretical, who look at the symbolic meaning of something. I’m simpler. I just want to know how did this work? So almost all of my books that I’ve written, have started with some just how did something work, and I’m trying to just figure out that aspect of it, and that’s just, maybe it’s a personality thing.</p><p>Gregory Aldrete<br>(00:58:18) 从泛泛的罗马史研究，到我作为学者的专项研究，我所有研究的核心都是 “实用性”—— 我想知道这些东西在古代到底是怎么用的。有些人更侧重理论，会研究事物的象征意义，但我比较直接，就想弄明白 “它的运作原理是什么”。我写的几乎每本书，都是从 “某个东西怎么用” 这个问题开始的，然后专注于解答这个问题。可能这和我的性格有关吧。</p><p>(00:58:48) I also have a sciency background, so I think I’ve used a lot of that. Even though I’m a humanist and a historian, I’ve used a lot of hard science in my work. I did a book on floods where I had to get really heavy into vectors of disease and hydraulics and engineering and all that stuff, and I think, again, having that sort of hard science combined with a humanist background, helps with those sorts of projects.</p><p>(00:58:48) 我还有理科背景，所以在研究中会经常用到理科知识。虽然我是人文领域的学者、历史学家，但我的研究里融入了很多硬核科学。比如我写过一本关于洪水的书，里面就涉及疾病传播途径、水力学、工程学等内容。我觉得，理科背景加上人文视角，对这类研究很有帮助。</p><p>Lex Fridman<br>(00:59:12) Well, like you said, I think the details help you understand deeply the big picture of history. And I mean, Alexander the Great wore this thing.</p><p>Lex Fridman<br>(00:59:12) 就像您说的，这些细节能帮我们更深刻地理解历史全貌。而且，亚历山大大帝当年就穿这种亚麻甲啊。</p><p>Gregory Aldrete<br>(00:59:19) Yeah.</p><p>Gregory Aldrete<br>(00:59:19) 没错。</p><p>Lex Fridman<br>(00:59:19) This is-</p><p>Lex Fridman<br>(00:59:19) 这太……</p><p>Gregory Aldrete<br>(00:59:20) And I should say by the way, it does drop out of use around Roman times. And I think what’s going on there is technology that with bronze, it’s hard to keep a sharp edge on things, but once you get into metals, which approximate steel, you can get sharper, and a key factor to penetrating fabric is the edge on the arrowhead.</p><p>Gregory Aldrete<br>(00:59:20) 不过顺便说一句，亚麻甲在罗马时期逐渐被淘汰了。我觉得原因和技术发展有关：青铜武器很难保持锋利，但到了接近钢的金属武器时代，刀刃能做得更锋利 —— 而能否穿透织物，箭头的锋利度是关键因素。</p><p>(00:59:43) So as soon as you start to get something more like a razor edge, it’s going to go through it more easily. Also, there’s changes in the bows that are being used. You start to get eastern horse archers showing up with composite bows, which are much more powerful. And so, it just becomes outdated as frontline military equipment. What’s interesting is by the Roman period, people are still wearing it, but it’s now things like when I go hunting, if I’m hunting lions, I wear this. There’s an actual source that says, “It’s really good for hunting dangerous big cats because it catches their teeth and stops them from penetrating. One emperor wears one of these under his toga. It’s kind of like a, not bulletproof vest, but stab proof vest. So again…</p><p>(00:59:43) 所以一旦武器有了类似剃刀的锋利边缘，就更容易穿透亚麻甲。另外，弓箭技术也在变化 —— 东方的骑兵弓箭手开始使用复合弓，威力大得多。因此，亚麻甲作为前线军事装备就过时了。但有趣的是，罗马时期人们还在穿它，只是用途变了：比如打猎时，尤其是猎狮子，会穿亚麻甲。有文献明确记载，“亚麻甲对付危险的大型猫科动物很有用，能缠住它们的牙齿，防止被咬穿”。还有一位罗马皇帝把亚麻甲穿在托加袍（toga）里面，相当于现在的防刺背心（不是防弹背心）。所以说……</p><h2 id="Alexander-the-Great"><a href="#Alexander-the-Great" class="headerlink" title="Alexander the Great"></a>Alexander the Great</h2><h2 id="亚历山大大帝"><a href="#亚历山大大帝" class="headerlink" title="亚历山大大帝"></a>亚历山大大帝</h2><p>(01:00:22) Awesome.</p><p>Alexander the Great<br>(01:00:22) 太厉害了。</p><p>Gregory Aldrete<br>(01:00:22) … it’s not to fight in the frontline of legions, but it’ll protect him from somebody trying to assassinate him. So it still has those uses where you’re not up against top line military equipment</p><p>Gregory Aldrete<br>(01:00:22) … 它不再用于军团前线作战，但能防刺杀。在不需要对抗顶级军事装备的场景下，它依然有用。</p><p>Lex Fridman<br>(01:00:33) To honor aforementioned undergraduate student who loves Alexander the Great, we must absolutely talk about Alexander the Great for a little bit. Why was he successful, do you think, as a conqueror, probably one of the greatest conquerors in the history of humanity?</p><p>Lex Fridman<br>(01:00:33) 为了致敬那位喜欢亚历山大大帝的本科生，我们一定要聊聊亚历山大。您觉得他作为征服者为何能如此成功？他大概是人类历史上最伟大的征服者之一了。</p><p>Gregory Aldrete<br>(01:00:49) Yeah, and I mean, that is then he one of the greatest heroes or one of the greatest villains in humanity, too. It’s like Julius Caesar. He’s famous for conquering Gaul. Well, about a million people were killed and a million enslaved in that. So does it make him a horrible person or one of our heroes?</p><p>Gregory Aldrete<br>(01:00:49) 没错，而且他既是人类历史上最伟大的英雄之一，也可能是最可怕的反派之一 —— 就像尤利乌斯・凯撒。凯撒因征服高卢闻名，但在征服过程中，约有 100 万人被杀，100 万人被奴役。那么，这会让他成为可怕的暴君，还是人们眼中的英雄？</p><p>(01:01:04) But Alexander is a combination of two things, one is he really just was a skilled individual, and he was one of those guys who had it all. He was smart, he was athletic, and he was supremely charismatic. I mean, it’s obviously one of these people that would walk into a room and everyone just kind of gravitates to him. He had that magic that made him an effective leader.</p><p>(01:01:04) 但亚历山大的成功源于两点：首先，他个人能力极强，堪称 “全才”—— 聪明、体格健壮，还极具魅力。显然，他属于那种 “一进房间，所有人的目光都会被他吸引” 的人，拥有成为优秀领导者的 “魔力”。</p><p>(01:01:25) And secondly, he was lucky because it wasn’t all him. He inherited a system created by his father, Philip II. So he was in the right time at the right place and had this instrument placed in his hands, and then he had the intelligence and the charisma to go use it. So it’s one of these coming together of different things, but often his father’s contribution, I think, is not recognized as much as it is.</p><p>(01:01:25) 其次，他很幸运 —— 成功不全是他自己的功劳。他继承了父亲腓力二世（Philip II）建立的体系。可以说，他生逢其时、占据地利，手中握有现成的 “工具”（即父亲改革后的军队），而他又有智慧和魅力去运用这个工具。这是多种因素的结合，但我觉得他父亲的贡献往往没有得到足够认可。</p><p>(01:01:52) It’s his father who reformed the Macedonian army, who came up with that system of equipping them with the sarissa, this extra long spear that made them really effective, created the mixed army. So one of the keys to Alexander’s successes, in a tactical sense, is that his army was composed of different elements: heavy cavalry, light cavalry, heavy infantry, light infantry, missile troops, and he understand that he can use these in different and flexible ways on the battlefield; whereas a lot of warfare before then had just been, you line up, two sides smashed together.</p><p>(01:01:52) 是他父亲改革了马其顿军队，发明了给士兵配备 “萨里萨长矛”（超长矛）的战术体系，让军队战斗力大幅提升，还创建了 “混合兵种军队”。从战术角度看，亚历山大成功的关键之一，就是他的军队包含多种兵种：重骑兵、轻骑兵、重装步兵、轻装步兵、投射部队 —— 他知道如何在战场上灵活运用这些兵种；而在此之前，很多战争的模式都是 “双方列队，正面硬拼”。</p><p>(01:02:25) So he did clever things with this army that was a better tool than others did. And then, he was just supremely ambitious. I mean, he cared about his fame, which I guess his ego, but he clearly cared about that more than he did about things like money. He was indifferent to that, and he did have a grand vision. So he did have this vision of trying to unite the world, both politically under his control, but also culturally, and this is an interesting thing.</p><p>(01:02:25) 他用这支 “更精良的工具”（军队）打出了很多精妙的战役。而且他极具野心 —— 他很在乎名声（或许可以说是 ego 强），但显然他对名声的重视远超过金钱，对财富毫不在意。他还有宏大的愿景：不仅想在政治上统一世界、置于自己统治之下，还想在文化上实现融合。这一点很有意思。</p><p>(01:02:55) So he was very open, in fact, insistent of trying to meld together the best elements of all the different cultures. So he, himself, was a Macedonian, but he admired Greek culture. So he pretty much adopted Greek culture as his own. When he conquers Persia, he starts adapting elements of Persian culture. He dresses in Persian clothing. He marries a Persian woman. He sort of forces thousands of his troops to marry local women. He appoints Persians to positions of power. He integrates Persian units into his military. He really wanted to fuse all these things together. And some people see this as a very enlightened vision that, “Oh, he’s not just, I want to conquer people and now they’re my slaves,” that he was really trying to create this one culture that was sort of the best of everything. Others see it, of course, as a form of cultural imperialism. You’re destroying other cultures and trying to warp or twist them into something, but what I think is interesting is that this vision he had of uniting cultures creates very problematic tensions among his own followers because the-</p><p>(01:02:55) 他非常开放，甚至极力主张融合不同文化的精华。他本身是马其顿人，但推崇希腊文化，几乎把希腊文化当成自己的文化。征服波斯后，他又开始吸收波斯文化元素：穿波斯服饰、娶波斯女子，还强迫数千名士兵与当地女性通婚，任命波斯人担任要职，将波斯部队编入自己的军队。他真的想把这些文化融合在一起。有人认为这是非常开明的愿景 ——“他不只是想征服别人、把他们变成奴隶，而是真的想创造一种集众家之长的统一文化”；但也有人认为，这本质上是 “文化帝国主义”—— 摧毁其他文化，再将其扭曲成自己想要的样子。不过我觉得最有意思的是，他这种文化融合的愿景，在自己的追随者中引发了巨大矛盾，因为……</p><p>Gregory Aldrete<br>(01:04:00) Tensions among his own followers, because the Macedonians, his original troops, did not like this on the whole. They wanted the old model where we conquer you, you’re our slaves. We don’t want to share stuff with you. We don’t want you joining us in the army. We don’t want you appointed to positions of power. We are your conquerors and that’s it. And so, Alexander had to deal with a lot of friction from his own oldest, most loyal elements at the way he was being in their eyes, too generous to the conquered.</p><p>Gregory Aldrete<br>(01:04:00) … 这种矛盾主要来自他的追随者 —— 他的核心力量马其顿士兵，总体上不认同这种做法。他们想要的是 “传统模式”：我们征服你们，你们就是我们的奴隶；我们不想和你们分享权力，不想让你们加入军队，更不想让你们担任要职 —— 我们是征服者，仅此而已。因此，亚历山大不得不面对来自最资深、最忠诚部下的不满：在他们看来，亚历山大对被征服者实在太 “宽容” 了。</p><p>(01:04:31) So Alexander is one of these interesting personalities because every generation sees him in a new light and focuses on different things. So for some, he’s this enlightened visionary who was taught by Aristotle, the Greek philosopher, and they say, “Well, this influenced him.” Others see him as an egomaniacal warmonger, just I’m out to kill and gain glory. There was a book a couple of decades ago, it says, “Oh, he’s just an alcoholic,” which he probably was. Yeah. So you get all these competing images, and the great thing is, we don’t really know what the true Alexander was or what his motivations were. It’s a mixed message.</p><p>(01:04:31) 所以亚历山大是个极具争议的人物 —— 每一代人都会用新的视角看待他，关注他不同的侧面。对一些人来说，他是受希腊哲学家亚里士多德教导的 “开明远见者”，亚里士多德的思想影响了他；对另一些人来说，他是 “自大的好战分子”，满脑子只有杀戮和荣耀。几十年前还有一本书说 “他就是个酒鬼”—— 这或许也是事实。总之，关于他的形象众说纷纭，而最关键的是，我们其实根本不知道 “真实的亚历山大” 是什么样的，也不知道他的真实动机。他留给我们的，是一个复杂矛盾的形象。</p><p>Lex Fridman<br>(01:05:09) Why do you think the Roman Empire lasted while the Greek Empire as the Alexander expanded, did not?</p><p>Lex Fridman<br>(01:05:09) 您觉得为什么罗马帝国能长久存在，而亚历山大建立的希腊帝国却没能延续下去？</p><p>Gregory Aldrete<br>(01:05:21) That’s a clear answer. So Alexander’s Empire fragmented the moment he died. And so his empire was all about personal loyalty. It was his charisma holding it together, his personality. And he completely failed to create a structure so that it would continue after his death. And of course, he died young. He didn’t think he would die when he did, but still, you should put something in place.</p><p>Gregory Aldrete<br>(01:05:21) 答案其实很明确。亚历山大一去世，他的帝国就分崩离析了。因为他的帝国完全建立在 “个人忠诚” 之上 —— 是他的魅力、他的个人特质在维系着整个帝国。他根本没有建立一个能在自己死后延续帝国的制度。当然，他去世时很年轻，可能没料到自己会这么早离世，但即便如此，他也应该提前做好制度安排。</p><p>(01:05:44) So his was a flash in the pan. It was, he had this spectacular conquest in 10 years. He conquered what was then most of the known world, but he had no permanent structure in place. He didn’t really deal with the issue of succession. It fell apart instantly. The Romans are much more about building a structure. I mean, as we talked about a little, they were very good about incorporating the people they conquered into the Roman project. I mean, they’re oppressive, they’re imperialistic as well. Let’s not whitewash them. I mean, they had moments when they would just wipe out entire cities. But on the whole, they were much more about trying to bring people into the Roman world. And I think that was one of their strengths, is that they were open to integration and bringing in different people to keep rejuvenating themselves.</p><p>(01:05:44) 所以他的帝国只是 “昙花一现”：他用 10 年时间完成了惊人的征服，占领了当时已知世界的大部分地区，但没有建立任何持久的制度，也没有解决 “继承问题”，所以一死帝国就垮了。而罗马人则更注重 “制度建设”。就像我们之前聊到的，他们很擅长将被征服者纳入 “罗马体系”。当然，罗马人也有压迫性，也是帝国主义者 —— 我们不能美化他们，比如他们也曾彻底摧毁过整座城市。但总体而言，他们更倾向于 “让被征服者融入罗马世界”。我认为这是罗马的核心优势之一：他们愿意接纳不同群体，通过融合来保持自身的活力。</p>]]></content>
    
    
    <categories>
      
      <category>访谈翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lex Fridman</tag>
      
      <tag>格雷戈里・奥尔德雷特</tag>
      
      <tag>Gregory Aldrete</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今年夏天我做了什么</title>
    <link href="/2025/08/29/what-i-did-this-summer/"/>
    <url>/2025/08/29/what-i-did-this-summer/</url>
    
    <content type="html"><![CDATA[<h1 id="What-I-Did-this-Summer"><a href="#What-I-Did-this-Summer" class="headerlink" title="What I Did this Summer"></a>What I Did this Summer</h1><p>原文链接: <a href="https://paulgraham.com/sfp.html">https://paulgraham.com/sfp.html</a></p><p>October 2005</p><p>The first Summer Founders Program has just finished. We were surprised how well it went. Overall only about 10% of startups succeed, but if I had to guess now, I’d predict three or four of the eight startups we funded will make it.<br>首届夏季创始人计划刚刚结束。我们惊讶于它进行得如此顺利。总体而言，只有大约10%的初创企业能成功，但若我现在要猜测，我会预测我们资助的八家初创企业中有三到四家会成功。</p><p>Of the startups that needed further funding, I believe all have either closed a round or are likely to soon. Two have already turned down (lowball) acquisition offers.<br>对于那些需要进一步融资的初创企业，我相信它们要么已经完成了新一轮融资，要么很可能即将完成。其中两家已经拒绝了（报价过低的）收购要约。</p><p>We would have been happy if just one of the eight seemed promising by the end of the summer. What’s going on? Did some kind of anomaly make this summer’s applicants especially good? We worry about that, but we can’t think of one. We’ll find out this winter.<br>如果到夏天结束时，这八家初创企业中只有一家看起来有前景，我们也会感到满意。到底发生了什么？是不是某种异常情况使得今年夏天的申请者特别优秀？我们对此感到担忧，但想不出原因。我们将在今年冬天找到答案。</p><p>The whole summer was full of surprises. The best was that the hypothesis we were testing seems to be correct. Young hackers can start viable companies. This is good news for two reasons: (a) it’s an encouraging thought, and (b) it means that Y Combinator, which is predicated on the idea, is not hosed.<br>整个夏天充满了惊喜。最好的是，我们正在测试的假设似乎得到了证实：年轻的黑客可以创办可行的公司。这有两个好消息：（a）这是一个令人鼓舞的想法；（b）这意味着以这一理念为基础的Y Combinator并没有失败。</p><h2 id="Age"><a href="#Age" class="headerlink" title="Age"></a><strong>Age</strong></h2><p><strong>年龄</strong></p><p>More precisely, the hypothesis was that success in a startup depends mainly on how smart and energetic you are, and much less on how old you are or how much business experience you have. The results so far bear this out. The 2005 summer founders ranged in age from 18 to 28 (average 23), and there is no correlation between their ages and how well they’re doing.<br>更准确地说，这个假设是：创业成功主要取决于你的聪明程度和活力，而与你的年龄或商业经验关系不大。目前的结果证实了这一点。2005年夏季的创始人们年龄在18到28岁之间（平均23岁），他们的年龄与表现好坏没有相关性。</p><p>This should not really be surprising. Bill Gates and Michael Dell were both 19 when they started the companies that made them famous. Young founders are not a new phenomenon: the trend began as soon as computers got cheap enough for college kids to afford them.<br>这其实并不奇怪。比尔·盖茨和迈克尔·戴尔都是19岁时创办了让他们成名的公司。年轻的创始人并不是新现象：这种趋势在计算机变得便宜到大学生都能买得起时就开始了。</p><p>Another of our hypotheses was that you can start a startup on less money than most people think. Other investors were surprised to hear the most we gave any group was $20,000. But we knew it was possible to start on that little because we started Viaweb on $10,000.<br>我们的另一个假设是：创业所需的资金比大多数人想象的要少。其他投资者听到我们给任何团队的最高资助额仅为20,000美元时都感到惊讶。但我们知道用这么少的钱创业是可能的，因为我们当初创办Viaweb时只用了10,000美元。</p><p>And so it proved this summer. Three months’ funding is enough to get into second gear. We had a demo day for potential investors ten weeks in, and seven of the eight groups had a prototype ready by that time. One, Reddit, had already launched, and were able to give a demo of their live site.<br>今年夏天的情况也证明了这一点。三个月的资金足以让创业项目进入正轨。我们在第十周为潜在投资者举办了一场演示日活动，当时八组中有七组已经准备好了原型。其中一组Reddit已经上线，并能够演示其真实网站。</p><p>A researcher who studied the SFP startups said the one thing they had in common was that they all worked ridiculously hard. People this age are commonly seen as lazy. I think in some cases it’s not so much that they lack the appetite for work, but that the work they’re offered is unappetizing.<br>一位研究SFP初创企业的研究人员说，他们共同的特点是都工作得异常努力。这个年龄段的人通常被认为很懒惰。我认为在某些情况下，问题不在于他们缺乏工作热情，而在于提供给他们的工作本身令人索然无味。</p><p>The experience of the SFP suggests that if you let motivated people do real work, they work hard, whatever their age. As one of the founders said “I’d read that starting a startup consumed your life, but I had no idea what that meant until I did it.”<br>SFP的经验表明，如果你让有动力的人去做真正的工作，他们会努力工作，无论年龄大小。正如一位创始人所说：“我读到过创业会吞噬你的生活，但直到我自己做了才知道这意味着什么。”</p><p>I’d feel guilty if I were a boss making people work this hard. But we’re not these people’s bosses. They’re working on their own projects. And what makes them work is not us but their competitors. Like good athletes, they don’t work hard because the coach yells at them, but because they want to win.<br>如果我是一个让别人如此努力工作的老板，我会感到内疚。但我们不是这些人的老板。他们是在做自己的项目。促使他们努力工作的不是我们，而是他们的竞争对手。就像优秀的运动员一样，他们努力工作不是因为教练的吼叫，而是因为他们想赢。</p><p>We have less power than bosses, and yet the founders work harder than employees. It seems like a win for everyone. The only catch is that we get on average only about 5-7% of the upside, while an employer gets nearly all of it. (We’re counting on it being 5-7% of a much larger number.)<br>我们的权力比老板小，但创始人们却比普通员工工作更努力。这似乎对每个人都是好事。唯一的缺点是，我们平均只能获得大约5-7%的收益，而雇主几乎能得到全部。（我们指望的是这5-7%的基数会大得多。）</p><p>As well as working hard, the groups all turned out to be extraordinarily responsible. I can’t think of a time when one failed to do something they’d promised to, even by being late for an appointment. This is another lesson the world has yet to learn. One of the founders discovered that the hardest part of arranging a meeting with executives at a big cell phone carrier was getting a rental company to rent him a car, because he was too young.<br>除了努力工作外，这些团队还表现出非凡的责任感。我想不出有哪一次他们没有兑现承诺，甚至包括准时赴约。这是世界尚未吸取的另一个教训。一位创始人发现，安排与大型手机运营商高管会面最难的部分，竟然是因为自己太年轻，租车公司不愿意租给他车。</p><p>I think the problem here is much the same as with the apparent laziness of people this age. They seem lazy because the work they’re given is pointless, and they act irresponsible because they’re not given any power. Some of them, anyway. We only have a sample size of about twenty, but it seems so far that if you let people in their early twenties be their own bosses, they rise to the occasion.<br>我认为这里的问题与这个年龄段的人表面上的懒惰很相似。他们看起来懒惰，是因为给他们的工作毫无意义；他们表现得不负责任，是因为他们没有被赋予任何权力。至少对其中一些人是这样。我们的样本量大约只有二十人，但到目前为止，似乎如果你让二十出头的年轻人做自己的老板，他们就能承担起责任。</p><h2 id="Morale"><a href="#Morale" class="headerlink" title="Morale"></a><strong>Morale</strong></h2><p><strong>士气</strong></p><p>The summer founders were as a rule very idealistic. They also wanted very much to get rich. These qualities might seem incompatible, but they’re not. These guys want to get rich, but they want to do it by changing the world. They wouldn’t (well, seven of the eight groups wouldn’t) be interested in making money by speculating in stocks. They want to make something people use.<br>这些夏季创始人通常都非常理想主义。他们也非常渴望致富。这些品质看似矛盾，但其实不然。这些人想致富，但他们想通过改变世界来实现。他们不会（或者说，八组中有七组不会）对通过股票投机赚钱感兴趣。他们想创造人们会使用的东西。</p><p>I think this makes them more effective as founders. As hard as people will work for money, they’ll work harder for a cause. And since success in a startup depends so much on motivation, the paradoxical result is that the people likely to make the most money are those who aren’t in it just for the money.<br>我认为这使他们作为创始人更有效率。人们为了金钱会努力工作，但为了一个事业会工作得更努力。由于创业的成功在很大程度上取决于动机，因此出现了一个矛盾的结果：最有可能赚大钱的人，恰恰不是那些仅仅为了金钱而创业的人。</p><p>The founders of Kiko, for example, are working on an Ajax calendar. They want to get rich, but they pay more attention to design than they would if that were their only motivation. You can tell just by looking at it.<br>例如，Kiko的创始人正在开发一个Ajax日历。他们想致富，但如果致富是他们唯一的动机，他们就不会如此关注设计。你只需看一眼就能分辨出来。</p><p>I never considered it till this summer, but this might be another reason startups run by hackers tend to do better than those run by MBAs. Perhaps it’s not just that hackers understand technology better, but that they’re driven by more powerful motivations. Microsoft, as I’ve said before, is a dangerously misleading example. Their mean corporate culture only works for monopolies. Google is a better model.<br>直到这个夏天我才想到，这可能是由黑客经营的初创企业往往比由MBA经营的初创企业表现更好的另一个原因。也许不仅仅是因为黑客更懂技术，而是因为他们有更强大的动力。正如我之前所说，微软是一个危险的误导性例子。他们苛刻的企业文化只适用于垄断企业。谷歌才是更好的榜样。</p><p>Considering that the summer founders are the sharks in this ocean, we were surprised how frightened most of them were of competitors. But now that I think of it, we were just as frightened when we started Viaweb. For the first year, our initial reaction to news of a competitor was always: we’re doomed.<br>考虑到这些夏季创始人是这片海洋中的鲨鱼，我们惊讶于他们中的大多数对竞争对手如此恐惧。但仔细想想，我们当初创办Viaweb时也是一样害怕。在第一年里，我们一听到竞争对手的消息，最初的反应总是：我们完蛋了。</p><p>Just as a hypochondriac magnifies his symptoms till he’s convinced he has some terrible disease, when you’re not used to competitors you magnify them into monsters.<br>就像一个疑病症患者会夸大自己的症状，直到确信自己患上了某种可怕的疾病一样，当你不习惯竞争对手时，你会把他们夸大成怪物。</p><p>Here’s a handy rule for startups: competitors are rarely as dangerous as they seem. Most will self-destruct before you can destroy them. And it certainly doesn’t matter how many of them there are, any more than it matters to the winner of a marathon how many runners are behind him.<br>这里有一个对初创企业有用的规则：竞争对手很少像看起来那么危险。大多数会在你摧毁他们之前自我毁灭。而且竞争对手的数量根本无关紧要，就像马拉松冠军并不在乎身后有多少名跑者一样。</p><p>“It’s a crowded market,” I remember one founder saying worriedly.<br>“这是一个竞争激烈的市场，”我记得一位创始人担忧地说。</p><p>“Are you the current leader?” I asked.<br>“你是目前的领先者吗？”我问。</p><p>“Yes.”<br>“是的。”</p><p>“Is anyone able to develop software faster than you?”<br>“有没有人能比你更快地开发软件？”</p><p>“Probably not.”<br>“大概没有。”</p><p>“Well, if you’re ahead now, and you’re the fastest, then you’ll stay ahead. What difference does it make how many others there are?”<br>“那么，如果你现在领先，而且你又是最快的，你就会保持领先。其他有多少人又有什么关系呢？”</p><p>Another group was worried when they realized they had to rewrite their software from scratch. I told them it would be a bad sign if they didn’t. The main function of your initial version is to be rewritten.<br>另一组在意识到他们必须从头重写软件时感到担忧。我告诉他们，如果他们不用重写，那才是个坏兆头。你初始版本的主要功能就是被重写。</p><p>That’s why we advise groups to ignore issues like scalability, internationalization, and heavy-duty security at first. [1] I can imagine an advocate of “best practices” saying these ought to be considered from the start. And he’d be right, except that they interfere with the primary function of software in a startup: to be a vehicle for experimenting with its own design.<br>这就是为什么我们建议团队在初期忽略可扩展性、国际化和高强度安全等问题。[1] 我可以想象“最佳实践”的支持者会说，这些应该从一开始就考虑。他说得没错，但问题是这些做法会干扰初创企业软件的主要功能：即作为实验其自身设计的载体。</p><p>Having to retrofit internationalization or scalability is a pain, certainly. The only bigger pain is not needing to, because your initial version was too big and rigid to evolve into something users wanted.<br>不得不事后增加国际化或可扩展性确实很痛苦。但更大的痛苦是根本不需要这么做，因为你的初始版本过于庞大和僵化，无法演变成用户想要的东西。</p><p>I suspect this is another reason startups beat big companies. Startups can be irresponsible and release version 1s that are light enough to evolve. In big companies, all the pressure is in the direction of over-engineering.<br>我怀疑这是初创企业胜过大公司的另一个原因。初创企业可以“不负责任”地发布足够轻量、便于演化的1.0版本。而在大公司里，所有压力都指向过度设计。</p><h2 id="What-Got-Learned"><a href="#What-Got-Learned" class="headerlink" title="What Got Learned"></a><strong>What Got Learned</strong></h2><p><strong>学到了什么</strong></p><p>One thing we were curious about this summer was where these groups would need help. That turned out to vary a lot. Some we helped with technical advice– for example, about how to set up an application to run on multiple servers. Most we helped with strategy questions, like what to patent, and what to charge for and what to give away. Nearly all wanted advice about dealing with future investors: how much money should they take and what kind of terms should they expect?<br>今年夏天我们好奇的一件事是，这些团队会在哪些方面需要帮助。结果发现需求差异很大。有些我们提供了技术建议——例如，如何设置应用程序以在多台服务器上运行。大多数我们帮助解决了战略问题，比如该申请哪些专利，哪些功能收费、哪些免费。几乎所有团队都希望得到关于如何应对未来投资者的建议：他们应该接受多少钱，以及能期望什么样的条款？</p><p>However, all the groups quickly learned how to deal with stuff like patents and investors. These problems aren’t intrinsically difficult, just unfamiliar.<br>然而，所有团队都很快学会了如何处理专利和投资者等问题。这些问题本身并不难，只是不熟悉而已。</p><p>It was surprising– slightly frightening even– how fast they learned. The weekend before the demo day for investors, we had a practice session where all the groups gave their presentations. They were all terrible. We tried to explain how to make them better, but we didn’t have much hope. So on demo day I told the assembled angels and VCs that these guys were hackers, not MBAs, and so while their software was good, we should not expect slick presentations from them.<br>他们学习的速度之快令人惊讶——甚至有点吓人。在投资者演示日前的那个周末，我们举行了一场练习会，所有团队都进行了演示。结果都很糟糕。我们试图解释如何改进，但没抱太大希望。因此在演示日那天，我告诉在场的天使投资人和风投们，这些家伙是黑客，不是MBA，所以尽管他们的软件很好，但我们不应期望他们有华丽的演示。</p><p>The groups then proceeded to give fabulously slick presentations. Gone were the mumbling recitations of lists of features. It was as if they’d spent the past week at acting school. I still don’t know how they did it.<br>但随后这些团队却做出了极其流畅的演示。那些含糊不清地罗列功能的演讲不见了。仿佛他们过去一周都在表演学校学习。我至今仍不知道他们是怎么做到的。</p><p>Perhaps watching each others’ presentations helped them see what they’d been doing wrong. Just as happens in college, the summer founders learned a lot from one another– maybe more than they learned from us. A lot of the problems they face are the same, from dealing with investors to hacking Javascript.<br>也许观看彼此的演示帮助他们看清了自己之前的错误。就像在大学里一样，这些夏季创始人从彼此身上学到了很多东西——也许比从我们这里学到的还多。他们面临的问题很多是相同的，从应对投资者到编写JavaScript代码。</p><p>I don’t want to give the impression there were no problems this summer. A lot went wrong, as usually happens with startups. One group got an “exploding term-sheet” from some VCs. Pretty much all the groups who had dealings with big companies found that big companies do everything infinitely slowly. (This is to be expected. If big companies weren’t incapable, there would be no room for startups to exist.) And of course there were the usual nightmares associated with servers.<br>我不想给人留下这个夏天没有问题的印象。很多事情出了差错，这在初创企业中很常见。有一组从一些风投那里收到了“爆炸性条款清单”（有严格时间限制的条款）。几乎所有与大公司打交道的团队都发现，大公司做事慢得无限。 （这是可以预料的。如果大公司不是无能，初创企业就没有存在的空间了。）当然，还有与服务器相关的常见噩梦。</p><p>In short, the disasters this summer were just the usual childhood diseases. Some of this summer’s eight startups will probably die eventually; it would be extraordinary if all eight succeeded. But what kills them will not be dramatic, external threats, but a mundane, internal one: not getting enough done.<br>总之，今年夏天的灾难只是常见的“成长痛”。今年这八家初创企业中，有些最终可能会倒闭；如果八家都成功了，那才真是非同寻常。但真正导致它们失败的，不会是戏剧性的外部威胁，而是一个平凡的内部问题：做得不够多。</p><p>So far, though, the news is all good. In fact, we were surprised how much fun the summer was for us. The main reason was how much we liked the founders. They’re so earnest and hard-working. They seem to like us too. And this illustrates another advantage of investing over hiring: our relationship with them is way better than it would be between a boss and an employee. Y Combinator ends up being more like an older brother than a parent.<br>不过到目前为止，消息都是好的。事实上，我们惊讶于这个夏天对我们来说是多么有趣。最主要的原因是我们非常喜欢这些创始人。他们非常真诚和勤奋。他们似乎也喜欢我们。这说明了投资相对于雇佣的另一个优势：我们与他们的关系远比老板与员工的关系要好。Y Combinator最终更像是一个兄长，而不是父母。</p><p>I was surprised how much time I spent making introductions. Fortunately I discovered that when a startup needed to talk to someone, I could usually get to the right person by at most one hop. I remember wondering, how did my friends get to be so eminent? and a second later realizing: shit, I’m forty.<br>我惊讶于自己花了大量时间做引荐。幸运的是，我发现当一家初创企业需要与某人交谈时，我通常最多通过一个人就能联系到正确的人。我记得当时在想，我的朋友们怎么都变得如此杰出？然后下一秒意识到：该死，我四十岁了。</p><p>Another surprise was that the three-month batch format, which we were forced into by the constraints of the summer, turned out to be an advantage. When we started Y Combinator, we planned to invest the way other venture firms do: as proposals came in, we’d evaluate them and decide yes or no. The SFP was just an experiment to get things started. But it worked so well that we plan to do all our investing this way, one cycle in the summer and one in winter. It’s more efficient for us, and better for the startups too.<br>另一个惊喜是，由于夏季的限制而被迫采用的三个月批次模式，结果却成了一个优势。当我们创立Y Combinator时，我们计划像其他风投公司一样投资：有提案进来，我们就评估并决定是否投资。SFP（夏季创始人计划）只是一个启动实验。但它效果如此之好，以至于我们计划以后都这样投资，每年夏天和冬天各一个周期。这对我们更高效，对初创企业也更好。</p><p>Several groups said our weekly dinners saved them from a common problem afflicting startups: working so hard that one has no social life. (I remember that part all too well.) This way, they were guaranteed a social event at least once a week.<br>几个团队说，我们每周的晚餐让他们避免了困扰初创企业的常见问题：工作太努力以至于没有社交生活。（我对这一点记忆犹新。）这样一来，他们每周至少能保证有一次社交活动。</p><h2 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a><strong>Independence</strong></h2><p><strong>独立性</strong></p><p>I’ve heard Y Combinator described as an “incubator.” Actually we’re the opposite: incubators exert more control than ordinary VCs, and we make a point of exerting less. Among other things, incubators usually make you work in their office– that’s where the word “incubator” comes from. That seems the wrong model. If investors get too involved, they smother one of the most powerful forces in a startup: the feeling that it’s your own company.<br>我曾听人把Y Combinator描述为“孵化器”。实际上我们恰恰相反：孵化器比普通风投施加更多的控制，而我们则刻意减少控制。例如，孵化器通常要求你在他们的办公室工作——这正是“孵化器”一词的由来。这似乎是个错误的模式。如果投资者介入太深，就会扼杀初创企业中最强大的力量之一：公司是“自己的”这种感觉。</p><p>Incubators were conspicuous failures during the Bubble. There’s still debate about whether this was because of the Bubble, or because they’re a bad idea. My vote is they’re a bad idea. I think they fail because they select for the wrong people. When we were starting a startup, we would never have taken funding from an “incubator.” We can find office space, thanks; just give us the money. And people with that attitude are the ones likely to succeed in startups.<br>在互联网泡沫时期，孵化器是明显的失败者。关于这是否是因为泡沫，还是因为它们本身是个坏主意，至今仍有争论。我投后者一票。我认为它们失败是因为它们筛选了错误的人。当我们创办初创企业时，我们绝不会接受“孵化器”的资金。谢谢，我们自己能找到办公空间；只给我们钱就好。而持有这种态度的人，才更有可能在创业中成功。</p><p>Indeed, one quality all the founders shared this summer was a spirit of independence. I’ve been wondering about that. Are some people just a lot more independent than others, or would everyone be this way if they were allowed to?<br>事实上，今年夏天所有创始人共同拥有的一个品质就是独立精神。我一直在思考这个问题。是不是有些人天生就比别人更独立，还是说如果被允许，每个人都会如此？</p><p>As with most nature&#x2F;nurture questions, the answer is probably: some of each. But my main conclusion from the summer is that there’s more environment in the mix than most people realize. I could see that from how the founders’ attitudes changed during the summer. Most were emerging from twenty or so years of being told what to do. They seemed a little surprised at having total freedom. But they grew into it really quickly; some of these guys now seem about four inches taller (metaphorically) than they did at the beginning of the summer.<br>对于大多数“先天与后天”的问题，答案可能是两者兼有。但我从这个夏天得出的主要结论是，环境因素的影响比大多数人意识到的要大。我从创始人态度在夏天的变化中就能看出这一点。大多数人刚从大约二十年被告诉该做什么的状态中走出来。他们对自己拥有完全自由似乎有点惊讶。但他们很快就适应了；现在其中一些人看起来（比喻意义上）比夏天开始时高了大约四英寸。</p><p>When we asked the summer founders what surprised them most about starting a company, one said “the most shocking thing is that it worked.”<br>当我们问这些夏季创始人，创业最让他们惊讶的是什么时，一人说：“最令人震惊的是，它竟然奏效了。”</p><p>It will take more experience to know for sure, but my guess is that a lot of hackers could do this– that if you put people in a position of independence, they develop the qualities they need. Throw them off a cliff, and most will find on the way down that they have wings.<br>需要更多经验才能确定，但我猜测很多黑客都能做到这一点——如果你把人们置于独立的位置，他们会发展出所需的品质。把他们从悬崖上推下去，大多数人在下落的过程中会发现自己有翅膀。</p><p>The reason this is news to anyone is that the same forces work in the other direction too. Most hackers are employees, and this molds you into someone to whom starting a startup seems impossible as surely as starting a startup molds you into someone who can handle it.<br>这对任何人来说都是新闻，因为同样的力量也在反方向起作用。大多数黑客是雇员，这会把你塑造成一个觉得创业不可能的人，就像创业会把你塑造成一个能应对挑战的人一样。</p><p>If I’m right, “hacker” will mean something different in twenty years than it does now. Increasingly it will mean the people who run the company. Y Combinator is just accelerating a process that would have happened anyway. Power is shifting from the people who deal with money to the people who create technology, and if our experience this summer is any guide, this will be a good thing.<br>如果我没错的话，二十年后“黑客”这个词的含义将与现在不同。它将越来越多地指代那些经营公司的人。Y Combinator只是在加速一个本来就会发生的过程。权力正在从处理金钱的人转向创造技术的人，如果今年夏天我们的经验有任何指导意义的话，这将是一件好事。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h2><p><strong>注释</strong></p><p>[1] By heavy-duty security I mean efforts to protect against truly determined attackers.<br>[1] 所谓高强度安全，我指的是防范真正决心坚定的攻击者的努力。</p><p>The image shows us, the 2005 summer founders, and Smartleaf co-founders Mark Nitzberg and Olin Shivers at the 30-foot table Kate Courteau designed for us. Photo by Alex Lewin.<br>照片显示了我们、2005年的夏季创始人以及Smartleaf的联合创始人Mark Nitzberg和Olin Shivers，坐在Kate Courteau为我们设计的30英尺长的桌子旁。照片由Alex Lewin拍摄。</p><p>Thanks to Sarah Harlin, Steve Huffman, Jessica Livingston, Zak Stone, and Aaron Swartz for reading drafts of this.<br>感谢Sarah Harlin、Steve Huffman、Jessica Livingston、Zak Stone和Aaron Swartz阅读本文草稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不平等与风险</title>
    <link href="/2025/08/29/inequality-and-risk/"/>
    <url>/2025/08/29/inequality-and-risk/</url>
    
    <content type="html"><![CDATA[<h1 id="Inequality-and-Risk"><a href="#Inequality-and-Risk" class="headerlink" title="Inequality and Risk"></a>Inequality and Risk</h1><p>原文链接: <a href="https://paulgraham.com/inequality.html">https://paulgraham.com/inequality.html</a></p><p>August 2005 2005年8月</p><p>(This essay is derived from a talk at Defcon 2005.) （本文改编自作者在2005年Defcon大会上的演讲。）</p><p>Suppose you wanted to get rid of economic inequality. There are two ways to do it: give money to the poor, or take it away from the rich. But they amount to the same thing, because if you want to give money to the poor, you have to get it from somewhere. You can’t get it from the poor, or they just end up where they started. You have to get it from the rich. </p><p>假设你想消除经济不平等。有两种方法可以做到：把钱给穷人，或者从富人那里拿走钱。但这两者本质上是一回事，因为如果你想把钱给穷人，就必须从某个地方获取资金。你不能从穷人那里拿钱，否则他们最终还是处于原点。你必须从富人那里拿钱。</p><p>There is of course a way to make the poor richer without simply shifting money from the rich. You could help the poor become more productive — for example, by improving access to education. Instead of taking money from engineers and giving it to checkout clerks, you could enable people who would have become checkout clerks to become engineers. </p><p>当然，有一种方法可以在不简单地从富人那里转移金钱的情况下让穷人变得更富有。你可以帮助穷人提高生产力——例如，通过改善教育机会。与其从工程师那里拿钱给收银员，不如帮助那些本可能成为收银员的人成为工程师。</p><p>This is an excellent strategy for making the poor richer. But the evidence of the last 200 years shows that it doesn’t reduce economic inequality, because it makes the rich richer too. If there are more engineers, then there are more opportunities to hire them and to sell them things. Henry Ford couldn’t have made a fortune building cars in a society in which most people were still subsistence farmers; he would have had neither workers nor customers. </p><p>这是让穷人更富有的极佳策略。但过去200年的证据表明，这并不能减少经济不平等，因为它也让富人变得更富。如果有更多工程师，就会有更多雇佣他们和向他们销售产品的机会。亨利·福特不可能在一个大多数人仍是自给自足的农民的社会里靠造车致富；他既没有工人，也没有顾客。</p><p>If you want to reduce economic inequality instead of just improving the overall standard of living, it’s not enough just to raise up the poor. What if one of your newly minted engineers gets ambitious and goes on to become another Bill Gates? Economic inequality will be as bad as ever. If you actually want to compress the gap between rich and poor, you have to push down on the top as well as pushing up on the bottom. </p><p>如果你想减少经济不平等，而不仅仅是提高整体生活水平，仅仅提升穷人是不够的。如果你培养出的新工程师变得雄心勃勃，最终成为另一个比尔·盖茨怎么办？经济不平等状况将依旧严重。如果你真的想缩小贫富差距，你必须同时压低顶层和提升底层。</p><p>How do you push down on the top? You could try to decrease the productivity of the people who make the most money: make the best surgeons operate with their left hands, force popular actors to overeat, and so on. But this approach is hard to implement. The only practical solution is to let people do the best work they can, and then (either by taxation or by limiting what they can charge) to confiscate whatever you deem to be surplus. </p><p>如何压低顶层？你可以尝试降低那些收入最高的人的生产力：让最好的外科医生用左手做手术，强迫受欢迎的演员暴饮暴食，等等。但这种方法很难实施。唯一可行的解决方案是让人们尽可能做好工作，然后（通过征税或限制收费）没收你认为多余的收入。</p><p>So let’s be clear what reducing economic inequality means. It is identical with taking money from the rich. </p><p>因此，让我们明确一下减少经济不平等意味着什么。它等同于从富人那里拿钱。</p><p>When you transform a mathematical expression into another form, you often notice new things. So it is in this case. Taking money from the rich turns out to have consequences one might not foresee when one phrases the same idea in terms of “reducing inequality.” </p><p>当你将一个数学表达式转换成另一种形式时，你常常会注意到新的东西。这种情况也是如此。从富人那里拿钱，结果会带来一些意想不到的后果，而这些后果在你用“减少不平等”来表述同一想法时可能不会预见。</p><p>The problem is, risk and reward have to be proportionate. A bet with only a 10% chance of winning has to pay more than one with a 50% chance of winning, or no one will take it. So if you lop off the top of the possible rewards, you thereby decrease people’s willingness to take risks. </p><p>问题是，风险和回报必须成比例。一个只有10%胜算的赌注，其回报必须高于一个有50%胜算的赌注，否则没人会接受。因此，如果你削减了可能回报的上限，就会降低人们承担风险的意愿。</p><p>Transposing into our original expression, we get: decreasing economic inequality means decreasing the risk people are willing to take. </p><p>转换回我们最初的表达方式，我们得到：减少经济不平等意味着减少人们愿意承担的风险。</p><p>There are whole classes of risks that are no longer worth taking if the maximum return is decreased. One reason high tax rates are disastrous is that this class of risks includes starting new companies. </p><p>如果最大回报降低，那么有一整类风险就不再值得承担。高税率之所以是灾难性的，原因之一就是这类风险包括创办新公司。</p><h2 id="Investors-投资者"><a href="#Investors-投资者" class="headerlink" title="Investors 投资者"></a><strong>Investors 投资者</strong></h2><p>Startups are intrinsically risky. A startup is like a small boat in the open sea. One big wave and you’re sunk. A competing product, a downturn in the economy, a delay in getting funding or regulatory approval, a patent suit, changing technical standards, the departure of a key employee, the loss of a big account — any one of these can destroy you overnight. It seems only about 1 in 10 startups succeeds. [1] 初创企业本质上是高风险的。一家初创企业就像海上的一叶小舟。一个大浪打来，你就沉没了。一个竞争产品、经济衰退、融资或监管审批延迟、专利诉讼、技术标准变更、关键员工离职、失去一个大客户——这些中的任何一个都可能在一夜之间摧毁你。似乎只有大约十分之一的初创企业能成功。[1]</p><p>Our startup paid its first round of outside investors 36x. Which meant, with current US tax rates, that it made sense to invest in us if we had better than a 1 in 24 chance of succeeding. That sounds about right. That’s probably roughly how we looked when we were a couple of nerds with no business experience operating out of an apartment. 我们的初创企业给第一轮外部投资者带来了36倍的回报。这意味着，按照当前美国的税率，只要我们成功的几率超过1&#x2F;24，投资我们就是合理的。这听起来差不多。这大概就是我们当时的样子：两个没有商业经验的书呆子，在一间公寓里运营。</p><p>If that kind of risk doesn’t pay, venture investing, as we know it, doesn’t happen. 如果这种风险得不到相应的回报，我们所熟知的风险投资就不会发生。</p><p>That might be ok if there were other sources of capital for new companies. Why not just have the government, or some large almost-government organization like Fannie Mae, do the venture investing instead of private funds? 如果新公司有其他资本来源，这也许没问题。为什么不干脆让政府，或像房利美这样的大型准政府机构，代替私人基金进行风险投资呢？</p><p>I’ll tell you why that wouldn’t work. Because then you’re asking government or almost-government employees to do the one thing they are least able to do: take risks. 我来告诉你为什么这行不通。因为这等于要求政府或准政府的雇员去做他们最不擅长的一件事：承担风险。</p><p>As anyone who has worked for the government knows, the important thing is not to make the right choices, but to make choices that can be justified later if they fail. If there is a safe option, that’s the one a bureaucrat will choose. But that is exactly the wrong way to do venture investing. The nature of the business means that you want to make terribly risky choices, if the upside looks good enough. 任何在政府工作过的人家都知道，重要的不是做出正确的选择，而是做出失败后也能被合理解释的选择。如果有安全选项，官僚就会选择它。但这恰恰是风险投资最错误的方式。这种业务的性质决定了，如果潜在回报足够好，你就必须做出极其冒险的选择。</p><p>VCs are currently paid in a way that makes them focus on the upside: they get a percentage of the fund’s gains. And that helps overcome their understandable fear of investing in a company run by nerds who look like (and perhaps are) college students. 风险投资家目前的报酬方式使他们关注潜在的高回报：他们获得基金收益的一部分。这有助于克服他们对投资由看起来像（甚至就是）大学生的书呆子运营的公司的合理恐惧。</p><p>If VCs weren’t allowed to get rich, they’d behave like bureaucrats. Without hope of gain, they’d have only fear of loss. And so they’d make the wrong choices. They’d turn down the nerds in favor of the smooth-talking MBA in a suit, because that investment would be easier to justify later if it failed. 如果风险投资家不被允许致富，他们就会像官僚一样行事。没有获得收益的希望，他们就只剩下对损失的恐惧。因此他们会做出错误的选择。他们会拒绝书呆子，而选择穿着西装、口才流利的MBA，因为如果投资失败，后者更容易事后解释。</p><h2 id="Founders-创始人"><a href="#Founders-创始人" class="headerlink" title="Founders 创始人"></a><strong>Founders 创始人</strong></h2><p>But even if you could somehow redesign venture funding to work without allowing VCs to become rich, there’s another kind of investor you simply cannot replace: the startups’ founders and early employees. 但即使你能够以某种方式重新设计风险投资机制，使其在不允许风险投资家致富的情况下也能运作，还有一种投资者是你根本无法替代的：初创企业的创始人和早期员工。</p><p>What they invest is their time and ideas. But these are equivalent to money; the proof is that investors are willing (if forced) to treat them as interchangeable, granting the same status to “sweat equity” and the equity they’ve purchased with cash. 他们投入的是时间和想法。但这些等同于金钱；证据是，投资者愿意（如果被迫的话）将它们视为可互换的，给予“汗水股权”与用现金购买的股权同等的地位。</p><p>The fact that you’re investing time doesn’t change the relationship between risk and reward. If you’re going to invest your time in something with a small chance of succeeding, you’ll only do it if there is a proportionately large payoff. [2] 你投入的是时间，这一事实并不改变风险与回报之间的关系。如果你打算将时间投入到一个成功几率很小的项目中，你只会这样做，前提是存在相应巨大的回报。[2]</p><p>If large payoffs aren’t allowed, you may as well play it safe. 如果巨大的回报不被允许，你最好还是选择稳妥的道路。</p><p>Like many startup founders, I did it to get rich. But not because I wanted to buy expensive things. What I wanted was security. I wanted to make enough money that I didn’t have to worry about money. If I’d been forbidden to make enough from a startup to do this, I would have sought security by some other means: for example, by going to work for a big, stable organization from which it would be hard to get fired. Instead of busting my ass in a startup, I would have tried to get a nice, low-stress job at a big research lab, or tenure at a university. 和许多初创企业创始人一样，我这样做是为了致富。但不是因为我想要买昂贵的东西。我想要的是安全感。我想赚足够的钱，这样就不用再为钱发愁。如果我被禁止通过初创企业赚到足够的钱来实现这一点，我就会通过其他方式寻求安全感：例如，去一家大而稳定的组织工作，很难被解雇。我不会在初创企业里拼命，而是会努力在一家大型研究实验室或大学里找一份轻松、低压力的工作。</p><p>That’s what everyone does in societies where risk isn’t rewarded. If you can’t ensure your own security, the next best thing is to make a nest for yourself in some large organization where your status depends mostly on seniority. [3] 这就是在那些风险得不到回报的社会里，每个人都会做的事。如果你无法确保自己的安全，次优的选择就是在某个大型组织中为自己筑一个巢，你的地位主要取决于资历。[3]</p><p>Even if we could somehow replace investors, I don’t see how we could replace founders. Investors mainly contribute money, which in principle is the same no matter what the source. But the founders contribute ideas. You can’t replace those. 即使我们能够以某种方式替代投资者，我也看不出我们如何能替代创始人。投资者主要贡献的是金钱，原则上无论来源如何，金钱都是一样的。但创始人贡献的是想法。这些是无法替代的。</p><p>Let’s rehearse the chain of argument so far. I’m heading for a conclusion to which many readers will have to be dragged kicking and screaming, so I’ve tried to make each link unbreakable. Decreasing economic inequality means taking money from the rich. Since risk and reward are equivalent, decreasing potential rewards automatically decreases people’s appetite for risk. Startups are intrinsically risky. Without the prospect of rewards proportionate to the risk, founders will not invest their time in a startup. Founders are irreplaceable. So eliminating economic inequality means eliminating startups. 让我们回顾一下到目前为止的论证链条。我正走向一个许多读者可能需要被强行拖拽才能接受的结论，因此我试图让每一个环节都无懈可击。减少经济不平等意味着从富人那里拿钱。由于风险与回报是等价的，降低潜在回报会自动降低人们承担风险的意愿。初创企业本质上是高风险的。如果没有与风险相称的回报前景，创始人就不会将时间投入到初创企业中。创始人是不可替代的。因此，消除经济不平等就意味着消除初创企业。</p><p>Economic inequality is not just a consequence of startups. It’s the engine that drives them, in the same way a fall of water drives a water mill. People start startups in the hope of becoming much richer than they were before. And if your society tries to prevent anyone from being much richer than anyone else, it will also prevent one person from being much richer at t2 than t1. 经济不平等不仅仅是初创企业的结果。它是驱动初创企业的引擎，就像瀑布驱动水车一样。人们创办初创企业，是希望变得比以前富有得多。如果你的社会试图阻止任何人比其他人富有得多，它也会阻止一个人在t2时刻比t1时刻富有得多。</p><h2 id="Growth-增长"><a href="#Growth-增长" class="headerlink" title="Growth 增长"></a><strong>Growth 增长</strong></h2><p>This argument applies proportionately. It’s not just that if you eliminate economic inequality, you get no startups. To the extent you reduce economic inequality, you decrease the number of startups. [4] Increase taxes, and willingness to take risks decreases in proportion. 这个论点是成比例适用的。不仅仅是说，如果你消除经济不平等，你就没有初创企业。你在多大程度上减少经济不平等，你就相应地减少初创企业的数量。[4] 提高税收，承担风险的意愿就会成比例下降。</p><p>And that seems bad for everyone. New technology and new jobs both come disproportionately from new companies. Indeed, if you don’t have startups, pretty soon you won’t have established companies either, just as, if you stop having kids, pretty soon you won’t have any adults. 这对每个人来说似乎都是坏事。新技术和新工作主要来自新公司。事实上，如果你没有初创企业，很快你也不会有成熟的企业，就像如果你停止生育孩子，很快你也不会有成年人一样。</p><p>It sounds benevolent to say we ought to reduce economic inequality. When you phrase it that way, who can argue with you? Inequality has to be bad, right? It sounds a good deal less benevolent to say we ought to reduce the rate at which new companies are founded. And yet the one implies the other. 说我们应该减少经济不平等，听起来很仁慈。当你这样表述时，谁能反对你呢？不平等一定是坏事，对吧？说我们应该降低新公司成立的速率，听起来就远没有那么仁慈了。然而，前者意味着后者。</p><p>Indeed, it may be that reducing investors’ appetite for risk doesn’t merely kill off larval startups, but kills off the most promising ones especially. Startups yield faster growth at greater risk than established companies. Does this trend also hold among startups? That is, are the riskiest startups the ones that generate most growth if they succeed? I suspect the answer is yes. And that’s a chilling thought, because it means that if you cut investors’ appetite for risk, the most beneficial startups are the first to go. 事实上，降低投资者承担风险的意愿，可能不仅仅是扼杀那些尚在萌芽状态的初创企业，更是特别地扼杀那些最有前途的企业。与成熟公司相比，初创企业以更高的风险换取更快的增长。这种趋势在初创企业内部也成立吗？也就是说，风险最高的初创企业，如果成功，是否也是带来最多增长的企业？我怀疑答案是肯定的。这是一个令人不寒而栗的想法，因为它意味着，如果你削减了投资者承担风险的意愿，最先消失的将是那些最有益的初创企业。</p><p>Not all rich people got that way from startups, of course. What if we let people get rich by starting startups, but taxed away all other surplus wealth? Wouldn’t that at least decrease inequality? 当然，并非所有富人都是通过初创企业致富的。如果我们允许人们通过创办初创企业致富，但对所有其他形式的剩余财富征税，会怎样？这难道不会至少减少不平等吗？</p><p>Less than you might think. If you made it so that people could only get rich by starting startups, people who wanted to get rich would all start startups. And that might be a great thing. But I don’t think it would have much effect on the distribution of wealth. People who want to get rich will do whatever they have to. If startups are the only way to do it, you’ll just get far more people starting startups. (If you write the laws very carefully, that is. More likely, you’ll just get a lot of people doing things that can be made to look on paper like startups.) 效果可能比你想象的要小。如果你让人们只能通过创办初创企业致富，那么想致富的人就都会去创办初创企业。这可能是一件好事。但我不认为这会对财富分配产生太大影响。想致富的人会不惜一切代价。如果创办初创企业是唯一的途径，那么你会看到更多人创办初创企业。（当然，前提是你把法律写得非常仔细。更可能的情况是，你会看到很多人做一些在纸面上看起来像初创企业但实际上不是的事。）</p><p>If we’re determined to eliminate economic inequality, there is still one way out: we could say that we’re willing to go ahead and do without startups. What would happen if we did? 如果我们决心消除经济不平等，仍然有一种出路：我们可以说，我们愿意放弃初创企业。如果我们这样做，会发生什么？</p><p>At a minimum, we’d have to accept lower rates of technological growth. If you believe that large, established companies could somehow be made to develop new technology as fast as startups, the ball is in your court to explain how. (If you can come up with a remotely plausible story, you can make a fortune writing business books and consulting for large companies.) [5] 至少，我们必须接受更低的技术发展速度。如果你相信大型成熟公司可以以某种方式做到像初创企业一样快速开发新技术，那么现在轮到你来解释如何实现了。（如果你能想出一个勉强说得通的故事，你就能通过写商业书籍和为大公司咨询而发大财。）[5]</p><p>Ok, so we get slower growth. Is that so bad? Well, one reason it’s bad in practice is that other countries might not agree to slow down with us. If you’re content to develop new technologies at a slower rate than the rest of the world, what happens is that you don’t invent anything at all. Anything you might discover has already been invented elsewhere. And the only thing you can offer in return is raw materials and cheap labor. Once you sink that low, other countries can do whatever they like with you: install puppet governments, siphon off your best workers, use your women as prostitutes, dump their toxic waste on your territory — all the things we do to poor countries now. The only defense is to isolate yourself, as communist countries did in the twentieth century. But the problem then is, you have to become a police state to enforce it. 好吧，所以我们发展得更慢了。这有那么糟糕吗？嗯，一个实际原因是，其他国家可能不会同意和我们一起放慢脚步。如果你满足于以比世界其他地方更慢的速度发展新技术，结果就是你根本不会发明任何东西。你可能发现的任何东西，都已经在其他地方被发明了。你能提供的回报只有原材料和廉价劳动力。一旦你陷入这种境地，其他国家就可以对你为所欲为：安插傀儡政府、吸走你最优秀的工人、把你的女性当作妓女、在你的领土上倾倒有毒废物——所有我们现在对贫穷国家做的事。唯一的防御方式就是自我隔离，就像二十世纪的共产主义国家那样。但问题是，你必须成为一个警察国家才能维持这种隔离。</p><h2 id="Wealth-and-Power-财富与权力"><a href="#Wealth-and-Power-财富与权力" class="headerlink" title="Wealth and Power 财富与权力"></a><strong>Wealth and Power 财富与权力</strong></h2><p>I realize startups are not the main target of those who want to eliminate economic inequality. What they really dislike is the sort of wealth that becomes self-perpetuating through an alliance with power. For example, construction firms that fund politicians’ campaigns in return for government contracts, or rich parents who get their children into good colleges by sending them to expensive schools designed for that purpose. But if you try to attack this type of wealth through economic policy, it’s hard to hit without destroying startups as collateral damage. 我意识到，那些想消除经济不平等的人，其主要目标并非初创企业。他们真正厌恶的是那种通过与权力结盟而自我延续的财富。例如，建筑公司资助政客的竞选活动以换取政府合同，或富裕的父母将孩子送入昂贵的学校，以便让他们进入好大学。但如果你试图通过经济政策来打击这种财富，很难在不把初创企业作为附带损害摧毁的情况下击中目标。</p><p>The problem here is not wealth, but corruption. So why not go after corruption? 这里的问题不是财富，而是腐败。那么为什么不直接打击腐败呢？</p><p>We don’t need to prevent people from being rich if we can prevent wealth from translating into power. And there has been progress on that front. Before he died of drink in 1925, Commodore Vanderbilt’s wastrel grandson Reggie ran down pedestrians on five separate occasions, killing two of them. By 1969, when Ted Kennedy drove off the bridge at Chappaquiddick, the limit seemed to be down to one. Today it may well be zero. But what’s changed is not variation in wealth. What’s changed is the ability to translate wealth into power. 如果我们能阻止财富转化为权力，我们就不需要阻止人们致富。在这方面已经取得了进展。1925年，科尼利厄斯·范德比尔特的败家孙子雷吉因酗酒而死，他曾五次驾车撞倒行人，导致两人死亡。到了1969年，当泰德·肯尼迪在查帕奎迪克驾车坠桥时，似乎上限已经降到了一人。如今，这个上限可能已经是零。但发生变化的不是财富的差异，而是将财富转化为权力的能力。</p><p>How do you break the connection between wealth and power? Demand transparency. Watch closely how power is exercised, and demand an account of how decisions are made. Why aren’t all police interrogations videotaped? Why did 36% of Princeton’s class of 2007 come from prep schools, when only 1.7% of American kids attend them? Why did the US really invade Iraq? Why don’t government officials disclose more about their finances, and why only during their term of office? 如何打破财富与权力之间的联系？要求透明度。密切关注权力的行使方式，并要求对决策过程做出解释。为什么不是所有警察审讯都被录像？当只有1.7%的美国孩子上预科学校时，为什么普林斯顿大学2007届学生中有36%来自预科学校？美国真正入侵伊拉克的原因是什么？为什么政府官员不披露更多关于他们财务状况的信息，而且只在任职期间披露？</p><p>A friend of mine who knows a lot about computer security says the single most important step is to log everything. Back when he was a kid trying to break into computers, what worried him most was the idea of leaving a trail. He was more inconvenienced by the need to avoid that than by any obstacle deliberately put in his path. 一位精通计算机安全的朋友告诉我，最重要的一步是记录一切。当他小时候试图入侵计算机时，最让他担心的就是留下痕迹。避免留下痕迹的需求给他带来的不便，超过了任何人为设置的障碍。</p><p>Like all illicit connections, the connection between wealth and power flourishes in secret. Expose all transactions, and you will greatly reduce it. Log everything. That’s a strategy that already seems to be working, and it doesn’t have the side effect of making your whole country poor. 像所有非法联系一样，财富与权力的联系在秘密中滋生。公开所有交易，你就能大大减少这种联系。记录一切。这是一种似乎已经在奏效的策略，而且它不会让你整个国家变穷。</p><p>I don’t think many people realize there is a connection between economic inequality and risk. I didn’t fully grasp it till recently. I’d known for years of course that if one didn’t score in a startup, the other alternative was to get a cozy, tenured research job. But I didn’t understand the equation governing my behavior. Likewise, it’s obvious empirically that a country that doesn’t let people get rich is headed for disaster, whether it’s Diocletian’s Rome or Harold Wilson’s Britain. But I did not till recently understand the role risk played. 我认为很多人没有意识到经济不平等与风险之间的联系。直到最近我才完全理解这一点。当然，多年来我一直知道，如果在初创企业中没有成功，另一种选择就是找一份舒适、有终身职位的研究工作。但我没有理解支配我行为的方程式。同样，从经验上看，一个不允许人们致富的国家注定会走向灾难，无论是戴克里先时期的罗马还是哈罗德·威尔逊时期的英国。但直到最近，我才理解了风险所扮演的角色。</p><p>If you try to attack wealth, you end up nailing risk as well, and with it growth. If we want a fairer world, I think we’re better off attacking one step downstream, where wealth turns into power. 如果你试图打击财富，你最终也会扼杀风险，以及随之而来的增长。如果我们想要一个更公平的世界，我认为我们最好在下游一步采取行动，即在财富转化为权力的地方进行打击。</p><h2 id="Notes-注释"><a href="#Notes-注释" class="headerlink" title="Notes 注释"></a><strong>Notes 注释</strong></h2><p>[1] Success here is defined from the initial investors’ point of view: either an IPO, or an acquisition for more than the valuation at the last round of funding. The conventional 1 in 10 success rate is suspiciously neat, but conversations with VCs suggest it’s roughly correct for startups overall. Top VC firms expect to do better. [1] 这里的“成功”是从最初投资者的角度定义的：要么是首次公开募股（IPO），要么是以高于上一轮融资估值的价格被收购。传统的十分之一成功率看起来过于整齐，但与风险投资家的交谈表明，这对所有初创企业总体而言大致正确。顶级风险投资公司期望表现更好。</p><p>[2] I’m not claiming founders sit down and calculate the expected after-tax return from a startup. They’re motivated by examples of other people who did it. And those examples do reflect after-tax returns. [2] 我并不是说创始人会坐下来计算初创企业的税后预期回报。他们受到其他人成功案例的激励。而这些案例确实反映了税后回报。</p><p>[3] Conjecture: The variation in wealth in a (non-corrupt) country or organization will be inversely proportional to the prevalence of systems of seniority. So if you suppress variation in wealth, seniority will become correspondingly more important. So far, I know of no counterexamples, though in very corrupt countries you may get both simultaneously. (Thanks to Daniel Sobral for pointing this out.) [3] 猜想：在一个（非腐败的）国家或组织中，财富的差异与资历制度的普遍程度成反比。因此，如果你压制财富差异，资历就会相应地变得更加重要。到目前为止，我不知道有反例，尽管在非常腐败的国家，你可能同时看到两者。（感谢丹尼尔·索布拉尔指出这一点。）</p><p>[4] In a country with a truly feudal economy, you might be able to redistribute wealth successfully, because there are no startups to kill. [4] 在一个真正具有封建经济的国家，你或许能够成功地重新分配财富，因为那里没有初创企业可以被扼杀。</p><p>[5] The speed at which startups develop new techology is the other reason they pay so well. As I explained in “How to Make Wealth”, what you do in a startup is compress a lifetime’s worth of work into a few years. It seems as dumb to discourage that as to discourage risk-taking. [5] 初创企业开发新技术的速度是它们报酬如此之高的另一个原因。正如我在《如何创造财富》中所解释的，在初创企业中，你把一生的工作压缩到几年内完成。阻止这种行为，就像阻止承担风险一样愚蠢。</p><p>Thanks to Chris Anderson, Trevor Blackwell, Dan Giffin, Jessica Livingston, and Evan Williams for reading drafts of this essay, and to Langley Steinert, Sangam Pant, and Mike Moritz for information about venture investing. 感谢克里斯·安德森、特雷弗·布莱克威尔、丹·吉芬、杰西卡·利文斯顿和埃文·威廉姆斯阅读本文草稿，以及感谢兰利·斯坦特、桑甘·潘特和迈克·莫里茨提供有关风险投资的信息。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阶梯之后</title>
    <link href="/2025/08/29/after-the-ladder/"/>
    <url>/2025/08/29/after-the-ladder/</url>
    
    <content type="html"><![CDATA[<h1 id="After-the-Ladder"><a href="#After-the-Ladder" class="headerlink" title="After the Ladder"></a>After the Ladder</h1><p>原文链接: <a href="https://paulgraham.com/ladder.html">https://paulgraham.com/ladder.html</a></p><p>August 2005</p><p>Thirty years ago, one was supposed to work one’s way up the corporate ladder. That’s less the rule now. Our generation wants to get paid up front. Instead of developing a product for some big company in the expectation of getting job security in return, we develop the product ourselves, in a startup, and sell it to the big company. At the very least we want options.<br>30 年前，人们本应沿着企业阶梯一步步往上爬。如今，这已不再是普遍规则。我们这一代人希望提前获得回报。我们不会为了换取工作保障而替某家大公司开发产品，相反，我们会在初创公司里自主开发产品，再将其卖给大公司。至少，我们希望拥有多种选择。</p><p>Among other things, this shift has created the appearance of a rapid increase in economic inequality. But really the two cases are not as different as they look in economic statistics.<br>除其他影响外，这种转变造成了经济不平等现象迅速加剧的表象。但实际上，这两种情况在经济统计数据中的差异并不像表面看起来那么大。</p><p>Economic statistics are misleading because they ignore the value of safe jobs. An easy job from which one can’t be fired is worth money; exchanging the two is one of the commonest forms of corruption. A sinecure is, in effect, an annuity. Except sinecures don’t appear in economic statistics. If they did, it would be clear that in practice socialist countries have nontrivial disparities of wealth, because they usually have a class of powerful bureaucrats who are paid mostly by seniority and can never be fired.<br>经济统计数据具有误导性，因为它们忽略了稳定工作的价值。一份轻松且不会被解雇的工作本身就具有经济价值，用权力换取这样的工作是最常见的腐败形式之一。实际上，闲职相当于一笔年金。只是闲职并未体现在经济统计数据中。若数据中包含闲职，就会明显发现，现实中社会主义国家也存在不小的财富差距 —— 因为这些国家通常存在一个有权势的官僚阶层，他们的薪酬主要依据资历发放，且永远不会被解雇。</p><p>While not a sinecure, a position on the corporate ladder was genuinely valuable, because big companies tried not to fire people, and promoted from within based largely on seniority. A position on the corporate ladder had a value analogous to the “goodwill” that is a very real element in the valuation of companies. It meant one could expect future high paying jobs.<br>尽管企业阶梯上的职位并非闲职，但它确实具有实际价值：大公司会尽量避免裁员，且内部晋升在很大程度上依据资历。企业阶梯上的职位价值，类似于企业估值中真实存在的 “商誉” 要素。拥有这样的职位，意味着未来有望获得高薪工作。</p><p>One of main causes of the decay of the corporate ladder is the trend for takeovers that began in the 1980s. Why waste your time climbing a ladder that might disappear before you reach the top?<br>20 世纪 80 年代兴起的企业收购潮，是企业阶梯逐渐衰落的主要原因之一。若阶梯可能在你登顶前就消失，何必浪费时间去攀爬呢？</p><p>And, by no coincidence, the corporate ladder was one of the reasons the early corporate raiders were so successful. It’s not only economic statistics that ignore the value of safe jobs. Corporate balance sheets do too. One reason it was profitable to carve up 1980s companies and sell them for parts was that they hadn’t formally acknowledged their implicit debt to employees who had done good work and expected to be rewarded with high-paying executive jobs when their time came.<br>无独有偶，企业阶梯也是早期企业掠夺者能大获成功的原因之一。不仅经济统计数据忽略稳定工作的价值，企业资产负债表亦是如此。20 世纪 80 年代，拆分企业并分块出售能获利的原因之一在于：这些企业并未正式承认对员工的隐性债务 —— 那些工作出色的员工本期望到了一定年限后，能获得高薪管理职位作为回报。</p><p>In the movie Wall Street, Gordon Gekko ridicules a company overloaded with vice presidents. But the company may not be as corrupt as it seems; those VPs’ cushy jobs were probably payment for work done earlier.<br>在电影《华尔街》中，戈登・盖柯嘲讽一家公司副总裁泛滥。但这家公司或许并非表面那般腐败：那些副总裁的安逸职位，很可能是对他们早年工作的一种回报。</p><p>I like the new model better. For one thing, it seems a bad plan to treat jobs as rewards. Plenty of good engineers got made into bad managers that way. And the old system meant people had to deal with a lot more corporate politics, in order to protect the work they’d invested in a position on the ladder.<br>我更青睐这种新模式。一方面，将职位当作奖励并非良策 —— 许多优秀的工程师就是这样被塑造成了糟糕的管理者。另一方面，在旧体系下，人们为了保住自己在企业阶梯上投入心血获得的职位，不得不应付更多的公司内部斗争。</p><p>The big disadvantage of the new system is that it involves more risk. If you develop ideas in a startup instead of within a big company, any number of random factors could sink you before you can finish. But maybe the older generation would laugh at me for saying that the way we do things is riskier. After all, projects within big companies were always getting cancelled as a result of arbitrary decisions from higher up. My father’s entire industry (breeder reactors) disappeared that way.<br>新模式的一大劣势在于风险更高。若你在初创公司而非大公司里开发创意，无数偶然因素都可能让你在项目完成前遭遇失败。但或许老一辈人会嘲笑我，认为我们如今的做法并非更具风险。毕竟，大公司内部的项目也常常因上级的武断决策而被取消。我父亲所在的整个行业（增殖反应堆领域）就是这样消失的。</p><p>For better or worse, the idea of the corporate ladder is probably gone for good. The new model seems more liquid, and more efficient. But it is less of a change, financially, than one might think. Our fathers weren’t that stupid.<br>无论好坏，企业阶梯的概念或许已一去不复返。新模式似乎流动性更强、效率更高。但从财务角度来看，它带来的变化或许不如人们想象中那么大。我们的父辈并非那么愚笨。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>企业能从开源中学到什么</title>
    <link href="/2025/08/29/what-business-can-learn-from-open-source/"/>
    <url>/2025/08/29/what-business-can-learn-from-open-source/</url>
    
    <content type="html"><![CDATA[<h1 id="What-Business-Can-Learn-from-Open-Source"><a href="#What-Business-Can-Learn-from-Open-Source" class="headerlink" title="What Business Can Learn from Open Source"></a>What Business Can Learn from Open Source</h1><p>原文链接: <a href="https://paulgraham.com/opensource.html">https://paulgraham.com/opensource.html</a></p><p>August 2005</p><p>(This essay is derived from a talk at Oscon 2005.)<br>（本文改编自 2005 年在开源大会 Oscon 上的一次演讲。）</p><p>Lately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52% of companies are replacing Windows servers with Linux servers. [1]<br>最近，企业对开源的关注度越来越高。十年前，微软似乎真的有可能将其垄断地位延伸到服务器领域。如今可以肯定地说，是开源阻止了这一情况的发生。一项近期调查显示，52% 的企业正在用 Linux 服务器替换 Windows 服务器。[1]</p><p>More significant, I think, is which 52% they are. At this point, anyone proposing to run Windows on servers should be prepared to explain what they know about servers that Google, Yahoo, and Amazon don’t.<br>但在我看来，更重要的是这 52% 的企业具体是哪些。时至今日，任何提议在服务器上运行 Windows 系统的人，都应当准备好解释：在服务器领域，他们掌握了哪些谷歌、雅虎和亚马逊都不知道的知识。</p><p>But the biggest thing business has to learn from open source is not about Linux or Firefox, but about the forces that produced them. Ultimately these will affect a lot more than what software you use.<br>然而，企业能从开源中学到的最重要的东西，并非 Linux 或火狐浏览器本身，而是催生它们的那些力量。归根结底，这些力量对企业的影响，远不止于选择使用何种软件。</p><p>We may be able to get a fix on these underlying forces by triangulating from open source and blogging. As you’ve probably noticed, they have a lot in common.<br>我们或许可以通过对比开源和博客这两种现象，来理清这些潜在力量的脉络。想必你已经发现，二者之间存在诸多共性。</p><p>Like open source, blogging is something people do themselves, for free, because they enjoy it. Like open source hackers, bloggers compete with people working for money, and often win. The method of ensuring quality is also the same: Darwinian. Companies ensure quality through rules to prevent employees from screwing up. But you don’t need that when the audience can communicate with one another. People just produce whatever they want; the good stuff spreads, and the bad gets ignored. And in both cases, feedback from the audience improves the best work.<br>和开源一样，写博客也是人们自愿且无偿去做的事，只因乐在其中。就像开源程序员一样，博主们与那些拿薪水的从业者竞争，且往往能胜出。二者确保质量的方式也如出一辙：遵循达尔文式的优胜劣汰法则。企业靠制定规则防止员工出错来保证质量，但当受众之间能够相互交流时，这种规则就不再必要了。人们只需创作自己想做的内容，优质内容会自然传播，劣质内容则会被忽略。而且在这两种场景下，受众的反馈都能让优秀的作品变得更出色。</p><p>Another thing blogging and open source have in common is the Web. People have always been willing to do great work for free, but before the Web it was harder to reach an audience or collaborate on projects.<br>博客与开源的另一个共同点在于它们都依赖互联网。其实人们一直愿意无偿地创作优秀作品，但在互联网出现之前，想要触达受众或开展项目协作要困难得多。</p><h2 id="Amateurs"><a href="#Amateurs" class="headerlink" title="Amateurs"></a><strong>Amateurs</strong></h2><p><strong>业余爱好者</strong></p><p>I think the most important of the new principles business has to learn is that people work a lot harder on stuff they like. Well, that’s news to no one. So how can I claim business has to learn it? When I say business doesn’t know this, I mean the structure of business doesn’t reflect it.<br>我认为企业必须学习的新原则中，最重要的一条是：人们在自己喜欢的事情上会投入多得多的精力。当然，这并非什么新鲜事。那我为何还说企业需要学习呢？因为当我说企业 “不懂” 这一点时，指的是企业的组织结构并未体现出这一原则。</p><p>Business still reflects an older model, exemplified by the French word for working: travailler. It has an English cousin, travail, and what it means is torture. [2]<br>企业的运作模式仍带有陈旧的印记，法语中表示 “工作” 的单词 “travailler” 就是一个例证。它在英语中有个同源词 “travail”，意思是 “折磨”。[2]</p><p>This turns out not to be the last word on work, however. As societies get richer, they learn something about work that’s a lot like what they learn about diet. We know now that the healthiest diet is the one our peasant ancestors were forced to eat because they were poor. Like rich food, idleness only seems desirable when you don’t get enough of it. I think we were designed to work, just as we were designed to eat a certain amount of fiber, and we feel bad if we don’t.<br>然而，这种 “工作即折磨” 的观念并非对工作的最终定论。随着社会日益富裕，人们对工作的认知，与对饮食的认知发生了相似的转变。如今我们知道，最健康的饮食方式，正是我们的农民祖先因贫穷而被迫采用的饮食方式。就像油腻的美食一样，只有当人们得不到足够休息时，才会觉得无所事事是件惬意的事。我认为，人类天生就需要工作，就像天生需要摄入一定量的膳食纤维一样，若不工作，我们就会感到不适。</p><p>There’s a name for people who work for the love of it: amateurs. The word now has such bad connotations that we forget its etymology, though it’s staring us in the face. “Amateur” was originally rather a complimentary word. But the thing to be in the twentieth century was professional, which amateurs, by definition, are not.<br>为热爱而工作的人有一个称呼：业余爱好者（amateurs）。如今这个词带有强烈的负面含义，以至于我们都忘了它的词源 —— 尽管答案近在眼前。“Amateur” 一词最初其实是个褒义词。但在 20 世纪，“专业人士”（professional）才是人们追求的身份，而根据定义，业余爱好者显然不属于这一范畴。</p><p>That’s why the business world was so surprised by one lesson from open source: that people working for love often surpass those working for money. Users don’t switch from Explorer to Firefox because they want to hack the source. They switch because it’s a better browser.<br>这也解释了为何商界会对开源带来的一个启示感到震惊：为热爱而工作的人，往往能超越为金钱而工作的人。用户从 IE 浏览器转向火狐，并非因为他们想修改源代码，而是因为火狐是一款更优秀的浏览器。</p><p>It’s not that Microsoft isn’t trying. They know controlling the browser is one of the keys to retaining their monopoly. The problem is the same they face in operating systems: they can’t pay people enough to build something better than a group of inspired hackers will build for free.<br>并非微软没有努力。他们很清楚，掌控浏览器是维持其垄断地位的关键之一。但他们面临的问题与在操作系统领域如出一辙：无论支付多少薪水，都无法让员工打造出比一群充满热情的程序员无偿开发的产品更优秀的东西。</p><p>I suspect professionalism was always overrated– not just in the literal sense of working for money, but also connotations like formality and detachment. Inconceivable as it would have seemed in, say, 1970, I think professionalism was largely a fashion, driven by conditions that happened to exist in the twentieth century.<br>我怀疑 “专业性” 的价值一直被高估了 —— 这不仅指 “为钱工作” 这一字面含义，还包括其附带的 “正式化”“疏离感” 等隐含意义。尽管在 1970 年左右，这种观点可能显得不可思议，但我认为，“专业性” 在很大程度上只是一种潮流，是由 20 世纪特定的时代背景催生的。</p><p>One of the most powerful of those was the existence of “channels.” Revealingly, the same term was used for both products and information: there were distribution channels, and TV and radio channels.<br>其中一个最关键的时代背景，就是 “渠道” 的存在。值得注意的是，“渠道” 一词既用于描述产品流通，也用于描述信息传播：既有产品的 “分销渠道”，也有电视和广播的 “频道”。</p><p>It was the narrowness of such channels that made professionals seem so superior to amateurs. There were only a few jobs as professional journalists, for example, so competition ensured the average journalist was fairly good. Whereas anyone can express opinions about current events in a bar. And so the average person expressing his opinions in a bar sounds like an idiot compared to a journalist writing about the subject.<br>正是这些渠道的稀缺性，让专业人士看似比业余爱好者更胜一筹。例如，专业记者的岗位数量有限，竞争机制确保了普通记者的水平也相当不错。而在酒吧里，任何人都能对时事发表看法。因此，与撰写相关话题的记者相比，酒吧里发表观点的普通人听起来就像个傻瓜。</p><p>On the Web, the barrier for publishing your ideas is even lower. You don’t have to buy a drink, and they even let kids in. Millions of people are publishing online, and the average level of what they’re writing, as you might expect, is not very good. This has led some in the media to conclude that blogs don’t present much of a threat– that blogs are just a fad.<br>在互联网上，发表观点的门槛更低。你无需买酒，甚至连孩子都能参与。数百万的人在网上创作，正如你所料，这些内容的平均质量并不高。这使得一些媒体从业者认为，博客不会构成太大威胁，只是一种短暂的潮流。</p><p>Actually, the fad is the word “blog,” at least the way the print media now use it. What they mean by “blogger” is not someone who publishes in a weblog format, but anyone who publishes online. That’s going to become a problem as the Web becomes the default medium for publication. So I’d like to suggest an alternative word for someone who publishes online. How about “writer?”<br>但事实上，“博客” 这个词本身才是潮流 —— 至少在平面媒体当前的使用语境下是如此。他们口中的 “博主”，并非指用博客格式发布内容的人，而是泛指所有在网上发表内容的人。随着互联网逐渐成为主流发布媒介，这种叫法会带来问题。因此，我想为网上创作者提议一个替代称呼：“作家”（writer）如何？</p><p>Those in the print media who dismiss the writing online because of its low average quality are missing an important point: no one reads the average blog. In the old world of channels, it meant something to talk about average quality, because that’s what you were getting whether you liked it or not. But now you can read any writer you want. So the average quality of writing online isn’t what the print media are competing against. They’re competing against the best writing online. And, like Microsoft, they’re losing.<br>平面媒体中那些因网上内容平均质量低而轻视其价值的人，忽略了一个重要事实：没人会去读 “平均水平” 的博客。在过去的渠道时代，讨论 “平均质量” 是有意义的，因为无论你是否愿意，能接触到的都只有平均水平的内容。但现在，你可以自由选择阅读任何一位作家的作品。因此，平面媒体真正的竞争对手并非网上内容的平均质量，而是网上最优质的内容。而和微软一样，他们正在这场竞争中落败。</p><p>I know that from my own experience as a reader. Though most print publications are online, I probably read two or three articles on individual people’s sites for every one I read on the site of a newspaper or magazine.<br>作为一名读者，我的个人经历印证了这一点。尽管大多数平面媒体都有了线上版本，但我在个人网站上阅读的文章数量，大概是在报纸或杂志官网阅读数量的两到三倍。</p><p>And when I read, say, New York Times stories, I never reach them through the Times front page. Most I find through aggregators like Google News or Slashdot or Delicious. Aggregators show how much better you can do than the channel. The New York Times front page is a list of articles written by people who work for the New York Times. Delicious is a list of articles that are interesting. And it’s only now that you can see the two side by side that you notice how little overlap there is.<br>而且，比如当我阅读《纽约时报》的文章时，我从来不会通过其首页进入。大多数文章都是我通过 Google 新闻、Slashdot 或 Delicious 等聚合平台找到的。聚合平台的存在，证明了人们能获得比传统 “渠道” 好得多的体验。《纽约时报》的首页是其员工撰写的文章列表，而 Delicious 的列表则是 “有趣的文章” 集合。只有当你将两者并列对比时，才会发现它们的重合度有多低。</p><p>Most articles in the print media are boring. For example, the president notices that a majority of voters now think invading Iraq was a mistake, so he makes an address to the nation to drum up support. Where is the man bites dog in that? I didn’t hear the speech, but I could probably tell you exactly what he said. A speech like that is, in the most literal sense, not news: there is nothing new in it. [3]<br>平面媒体上的大多数文章都很乏味。例如，总统发现大多数选民认为入侵伊拉克是个错误，于是发表全国讲话以争取支持。这样的事情有什么新闻价值可言？我甚至没听那场演讲，却能准确说出他讲了些什么。从最字面的意义上来说，这样的演讲根本不是 “新闻”—— 因为其中没有任何新内容。[3]</p><p>Nor is there anything new, except the names and places, in most “news” about things going wrong. A child is abducted; there’s a tornado; a ferry sinks; someone gets bitten by a shark; a small plane crashes. And what do you learn about the world from these stories? Absolutely nothing. They’re outlying data points; what makes them gripping also makes them irrelevant.<br>同样，大多数关于 “负面事件” 的 “新闻”，除了人名和地名不同外，也没有任何新意。比如儿童被绑架、龙卷风灾害、渡轮沉没、有人被鲨鱼咬伤、小型飞机坠毁等。从这些新闻中，你能对世界有什么新的认知吗？答案是完全没有。它们只是极端个案，那些让它们引人入胜的特质，恰恰也让它们与大多数人的生活无关。</p><p>As in software, when professionals produce such crap, it’s not surprising if amateurs can do better. Live by the channel, die by the channel: if you depend on an oligopoly, you sink into bad habits that are hard to overcome when you suddenly get competition. [4]<br>就像在软件领域一样，当专业人士产出的内容如此劣质时，业余爱好者能做得更好也就不足为奇了。“成也渠道，败也渠道”：如果一个行业依赖垄断地位生存，就会养成不良习惯，而当竞争突然来临时，这些习惯就难以改变。[4]</p><h2 id="Workplaces"><a href="#Workplaces" class="headerlink" title="Workplaces"></a><strong>Workplaces</strong></h2><p><strong>工作场所</strong></p><p>Another thing blogs and open source software have in common is that they’re often made by people working at home. That may not seem surprising. But it should be. It’s the architectural equivalent of a home-made aircraft shooting down an F-18. Companies spend millions to build office buildings for a single purpose: to be a place to work. And yet people working in their own homes, which aren’t even designed to be workplaces, end up being more productive.<br>博客与开源软件的另一个共同点是，它们的创作者往往是在家工作的人。这看似不足为奇，但实际上本应令人震惊。这就好比一架自制飞机击落了一架 F-18 战斗机 —— 从 “硬件配置” 上看完全不匹配。企业花费数百万美元建造办公楼，唯一目的就是提供一个工作场所。然而，在连 “工作场所” 设计都算不上的自己家里工作的人，最终产出效率却更高。</p><p>This proves something a lot of us have suspected. The average office is a miserable place to get work done. And a lot of what makes offices bad are the very qualities we associate with professionalism. The sterility of offices is supposed to suggest efficiency. But suggesting efficiency is a different thing from actually being efficient.<br>这证实了许多人一直以来的猜测：普通办公室是一个极其不利于完成工作的地方。而让办公室变得糟糕的诸多因素，恰恰是我们所认为的 “专业性” 的体现。办公室的刻板与单调本应象征效率，但 “象征效率” 和 “实际高效” 完全是两码事。</p><p>The atmosphere of the average workplace is to productivity what flames painted on the side of a car are to speed. And it’s not just the way offices look that’s bleak. The way people act is just as bad.<br>普通工作场所的氛围对生产力的作用，就像画在车身上的火焰对车速的作用一样 —— 毫无实际意义。而且，办公室的糟糕之处不仅在于其外观，人们在其中的行为方式同样糟糕。</p><p>Things are different in a startup. Often as not a startup begins in an apartment. Instead of matching beige cubicles they have an assortment of furniture they bought used. They work odd hours, wearing the most casual of clothing. They look at whatever they want online without worrying whether it’s “work safe.” The cheery, bland language of the office is replaced by wicked humor. And you know what? The company at this stage is probably the most productive it’s ever going to be.<br>初创公司的情况则完全不同。初创公司往往从一间公寓起步，没有统一的米色隔间，只有各式各样的二手家具。员工工作时间不固定，穿着极其随意，上网浏览内容时无需担心是否 “适合工作场合”。办公室里那种虚伪的客套话被犀利的幽默取代。而你知道吗？在这个阶段，公司的生产力很可能达到了其整个生命周期中的峰值。</p><p>Maybe it’s not a coincidence. Maybe some aspects of professionalism are actually a net lose.<br>这或许并非巧合。或许 “专业性” 的某些方面，实际上是弊大于利的。</p><p>To me the most demoralizing aspect of the traditional office is that you’re supposed to be there at certain times. There are usually a few people in a company who really have to, but the reason most employees work fixed hours is that the company can’t measure their productivity.</p><p>对我而言，传统办公室最让人泄气的一点在于，你必须在特定时间待在那里。公司里通常只有少数人确实有这样的必要，但大多数员工需要固定工时工作，根本原因是公司无法衡量他们的工作效率。</p><p>The basic idea behind office hours is that if you can’t make people work, you can at least prevent them from having fun. If employees have to be in the building a certain number of hours a day, and are forbidden to do non-work things while there, then they must be working. In theory. In practice they spend a lot of their time in a no-man’s land, where they’re neither working nor having fun.</p><p>固定办公时间背后的核心逻辑是：既然无法强迫人们工作，至少能阻止他们寻欢作乐。要是员工每天必须在办公楼里待够一定时长，而且在这段时间内不准做与工作无关的事，那他们按理说就该在工作了。但这只是理论上的情况。实际中，他们大量时间都处于一种 “无人地带”—— 既没在工作，也没在享受生活。</p><p>If you could measure how much work people did, many companies wouldn’t need any fixed workday. You could just say: this is what you have to do. Do it whenever you like, wherever you like. If your work requires you to talk to other people in the company, then you may need to be here a certain amount. Otherwise we don’t care.</p><p>要是能衡量出人们实际完成的工作量，很多公司就没必要设定固定工作日了。完全可以直接告知员工：这是你要完成的任务，你想什么时候做、在哪里做都可以。如果你的工作需要和公司里的其他人沟通，那你可能需要在特定时间待在办公室；除此之外，公司无需干涉。</p><p>That may seem utopian, but it’s what we told people who came to work for our company. There were no fixed office hours. I never showed up before 11 in the morning. But we weren’t saying this to be benevolent. We were saying: if you work here we expect you to get a lot done. Don’t try to fool us just by being here a lot.</p><p>这听起来可能有些乌托邦，但我们公司招聘员工时就是这么告知他们的。我们没有固定办公时间，我自己早上 11 点前也从不到岗。但我们这么做并非出于善意，而是想传递一个信息：既然来这里工作，就要完成大量任务，别想靠 “长时间待在办公室” 这种方式蒙混过关。</p><p>The problem with the facetime model is not just that it’s demoralizing, but that the people pretending to work interrupt the ones actually working. I’m convinced the facetime model is the main reason large organizations have so many meetings. Per capita, large organizations accomplish very little. And yet all those people have to be on site at least eight hours a day. When so much time goes in one end and so little achievement comes out the other, something has to give. And meetings are the main mechanism for taking up the slack.</p><p>“刷存在感” 模式（按在办公室的时长衡量工作）的问题不仅在于让人泄气，更在于那些装样子工作的人会干扰真正在干活的人。我坚信，这种模式是大型机构会议繁多的主要原因。按人均计算，大型机构的成果少得可怜，但所有员工每天还得在现场待至少 8 小时。当投入大量时间却产出寥寥时，总得有东西来填补空缺，而会议就是填补这种空缺的主要方式。</p><p>For one year I worked at a regular nine to five job, and I remember well the strange, cozy feeling that comes over one during meetings. I was very aware, because of the novelty, that I was being paid for programming. It seemed just amazing, as if there was a machine on my desk that spat out a dollar bill every two minutes no matter what I did. Even while I was in the bathroom! But because the imaginary machine was always running, I felt I always ought to be working. And so meetings felt wonderfully relaxing. They counted as work, just like programming, but they were so much easier. All you had to do was sit and look attentive.</p><p>我曾做过一年朝九晚五的常规工作，至今仍清楚记得开会时那种奇怪又惬意的感觉。由于这种工作模式很新鲜，我敏锐地意识到，自己拿薪水本是为了做编程工作，却仿佛 desk 上有台 “印钞机”—— 不管我做什么，每两分钟就会吐出一张美元，哪怕我在洗手间时也是如此！但正因为这台 “假想的印钞机” 一直在运转，我总觉得自己 “应该在工作”。所以开会就成了无比放松的时刻：它和编程一样算工作，但容易得多，只需坐着装出专注的样子就行。</p><p>Meetings are like an opiate with a network effect. So is email, on a smaller scale. And in addition to the direct cost in time, there’s the cost in fragmentation– breaking people’s day up into bits too small to be useful.</p><p>会议就像一种具有网络效应的鸦片，邮件在较小程度上也是如此。除了直接的时间成本，它们还会造成 “碎片化成本”—— 把人们的一天分割成无数细碎的片段，以至于无法开展有意义的工作。</p><p>You can see how dependent you’ve become on something by removing it suddenly. So for big companies I propose the following experiment. Set aside one day where meetings are forbidden– where everyone has to sit at their desk all day and work without interruption on things they can do without talking to anyone else. Some amount of communication is necessary in most jobs, but I’m sure many employees could find eight hours worth of stuff they could do by themselves. You could call it “Work Day.”</p><p>突然移除某样东西，就能看出自己对它的依赖程度。因此，我给大公司提个实验建议：专门留出一天禁止开会，让所有人整天坐在办公桌前，不受干扰地做那些无需与人沟通就能完成的工作。大多数工作确实需要一定沟通，但我相信很多员工都能找到足够 8 小时去做的独立工作。可以把这一天叫做 “工作日”（与常规的 “上班日” 区分）。</p><p>The other problem with pretend work is that it often looks better than real work. When I’m writing or hacking I spend as much time just thinking as I do actually typing. Half the time I’m sitting drinking a cup of tea, or walking around the neighborhood. This is a critical phase– this is where ideas come from– and yet I’d feel guilty doing this in most offices, with everyone else looking busy.</p><p>“假装工作” 还有一个问题：它看起来往往比真正的工作更像 “工作”。我写作或编程时，花在思考上的时间和实际打字的时间一样多。有一半时间我要么坐着喝茶，要么在附近散步 —— 这是个关键阶段，灵感正是在这时产生的。但在大多数办公室里，看着其他人都一副忙碌的样子，我要是这么做就会感到内疚。</p><p>It’s hard to see how bad some practice is till you have something to compare it to. And that’s one reason open source, and even blogging in some cases, are so important. They show us what real work looks like.</p><p>除非有参照物，否则很难看清某种做法有多糟糕。这就是开源（甚至某些情况下的博客）如此重要的原因之一 —— 它们向我们展示了真正的工作是什么样子。</p><p>We’re funding eight new startups at the moment. A friend asked what they were doing for office space, and seemed surprised when I said we expected them to work out of whatever apartments they found to live in. But we didn’t propose that to save money. We did it because we want their software to be good. Working in crappy informal spaces is one of the things startups do right without realizing it. As soon as you get into an office, work and life start to drift apart.</p><p>目前我们正在投资 8 家新创公司。有个朋友问这些公司的办公场地怎么解决，当我告诉他我们希望他们就在自己租的公寓里工作时，他显得很惊讶。但我们这么建议并非为了省钱，而是希望他们能做出好软件。在简陋、非正式的空间里工作，是初创公司无意间做到的正确选择之一。一旦搬进正规办公室，工作和生活就开始脱节了。</p><p>That is one of the key tenets of professionalism. Work and life are supposed to be separate. But that part, I’m convinced, is a mistake.</p><p>“工作与生活应该分开”，这是职业精神的核心信条之一，但我坚信这一点是错误的。</p><h2 id="Bottom-Up"><a href="#Bottom-Up" class="headerlink" title="Bottom-Up"></a><strong>Bottom-Up</strong></h2><p><strong>自下而上</strong></p><p>The third big lesson we can learn from open source and blogging is that ideas can bubble up from the bottom, instead of flowing down from the top. Open source and blogging both work bottom-up: people make what they want, and the best stuff prevails.</p><p>我们能从开源和博客中吸取的第三个重要教训是：创意可以自下而上涌现，而非自上而下传递。开源和博客都遵循 “自下而上” 的模式：人们创造自己想要的东西，最终优秀的作品会脱颖而出。</p><p>Does this sound familiar? It’s the principle of a market economy. Ironically, though open source and blogs are done for free, those worlds resemble market economies, while most companies, for all their talk about the value of free markets, are run internally like communist states.</p><p>这听起来是不是很熟悉？这正是市场经济的原则。颇具讽刺意味的是，尽管开源和博客都是无偿创作，但它们的生态更接近市场经济；而大多数公司嘴上说着自由市场的价值，内部运作却像集权国家一样。</p><p>There are two forces that together steer design: ideas about what to do next, and the enforcement of quality. In the channel era, both flowed down from the top. For example, newspaper editors assigned stories to reporters, then edited what they wrote.</p><p>有两种力量共同主导 “设计”（此处泛指创作、规划）：一是 “下一步该做什么” 的创意，二是 “质量把控”。在 “渠道为王” 的时代（如传统媒体时代），这两种力量都是自上而下的。比如报社编辑给记者分配选题，再对他们写的内容进行修改。</p><p>Open source and blogging show us things don’t have to work that way. Ideas and even the enforcement of quality can flow bottom-up. And in both cases the results are not merely acceptable, but better. For example, open source software is more reliable precisely because it’s open source; anyone can find mistakes.</p><p>开源和博客向我们证明，事情未必非得这样。创意乃至质量把控都可以自下而上进行，而且两种情况下的结果不仅合格，还会更出色。比如开源软件之所以更可靠，恰恰因为它是开源的 —— 任何人都能发现其中的漏洞。</p><p>The same happens with writing. As we got close to publication, I found I was very worried about the essays in Hackers &amp; Painters that hadn’t been online. Once an essay has had a couple thousand page views I feel reasonably confident about it. But these had had literally orders of magnitude less scrutiny. It felt like releasing software without testing it.</p><p>写作也是如此。在《黑客与画家》一书即将出版时，我特别担心那些从未在网上发布过的文章。一篇文章只要有几千次浏览量，我对它的质量就有相当的把握；但这些未发布的文章所受的审视，数量级上要少得多，感觉就像发布未经测试的软件一样。</p><p>That’s what all publishing used to be like. If you got ten people to read a manuscript, you were lucky. But I’d become so used to publishing online that the old method now seemed alarmingly unreliable, like navigating by dead reckoning once you’d gotten used to a GPS.</p><p>这就是过去所有出版行业的常态：要是能有 10 个人读手稿，就算很幸运了。但我已经习惯了在线发布的模式，以至于传统出版方式如今看起来极其不可靠 —— 就像习惯了 GPS 导航后，突然要靠 “航位推算”（一种原始导航方式）辨别方向一样。</p><p>The other thing I like about publishing online is that you can write what you want and publish when you want. Earlier this year I wrote something that seemed suitable for a magazine, so I sent it to an editor I know. As I was waiting to hear back, I found to my surprise that I was hoping they’d reject it. Then I could put it online right away. If they accepted it, it wouldn’t be read by anyone for months, and in the meantime I’d have to fight word-by-word to save it from being mangled by some twenty five year old copy editor. [5]</p><p>我喜欢在线发布的另一个原因是：可以写自己想写的内容，想什么时候发就什么时候发。今年早些时候，我写了一篇似乎适合杂志发表的文章，于是发给了一位认识的编辑。等待回复的过程中，我惊讶地发现自己居然希望他们拒绝这篇文章 —— 这样我就能立刻把它发到网上了。如果文章被录用，几个月内都不会有人读到，而且在此期间，我还得逐字逐句地抗争，防止它被某个 25 岁的文字编辑改得面目全非。[5]</p><p>Many employees would like to build great things for the companies they work for, but more often than not management won’t let them. How many of us have heard stories of employees going to management and saying, please let us build this thing to make money for you– and the company saying no? The most famous example is probably Steve Wozniak, who originally wanted to build microcomputers for his then-employer, HP. And they turned him down. On the blunderometer, this episode ranks with IBM accepting a non-exclusive license for DOS. But I think this happens all the time. We just don’t hear about it usually, because to prove yourself right you have to quit and start your own company, like Wozniak did.</p><p>很多员工想为自己所在的公司创造优秀的成果，但管理层往往不允许。我们中多少人听过这样的故事：员工找到管理层说 “请让我们做这个项目，能为公司赚钱”，却被公司拒绝？最著名的例子可能是史蒂夫・沃兹尼亚克 —— 他最初想为当时的雇主惠普公司研发微型计算机，却遭到了拒绝。从 “失误程度” 来看，这件事堪比 IBM 接受 DOS 系统的非独家授权（为微软崛起埋下伏笔）。但我认为这种事一直在发生，只是我们通常听不到 —— 因为要证明自己是对的，你就得像沃兹尼亚克那样辞职，自己创办公司。</p><h2 id="Startups"><a href="#Startups" class="headerlink" title="Startups"></a><strong>Startups</strong></h2><p><strong>初创公司</strong></p><p>So these, I think, are the three big lessons open source and blogging have to teach business: (1) that people work harder on stuff they like, (2) that the standard office environment is very unproductive, and (3) that bottom-up often works better than top-down.</p><p>因此，我认为开源和博客能给商业领域带来三个重要启示：（1）人们在自己喜欢的事情上会更努力；（2）标准的办公室环境效率极低；（3）自下而上的模式往往比自上而下更有效。</p><p>I can imagine managers at this point saying: what is this guy talking about? What good does it do me to know that my programmers would be more productive working at home on their own projects? I need their asses in here working on version 3.2 of our software, or we’re never going to make the release date.</p><p>我能想象到，此时管理者们会说：这家伙在胡说八道什么？知道我的程序员在家做自己的项目效率更高，对我有什么用？我需要他们待在这里开发软件 3.2 版本，否则我们绝对赶不上发布日期。</p><p>And it’s true, the benefit that specific manager could derive from the forces I’ve described is near zero. When I say business can learn from open source, I don’t mean any specific business can. I mean business can learn about new conditions the same way a gene pool does. I’m not claiming companies can get smarter, just that dumb ones will die.</p><p>确实，上述这些趋势能给某个特定管理者带来的好处几乎为零。当我说 “商业领域能从开源中学习” 时，并非指某家具体的公司能学到什么，而是指商业生态会像基因库一样，在演变中适应新环境。我并不是说公司能变得更 “聪明”，而是说那些 “愚蠢” 的公司会被淘汰。</p><p>So what will business look like when it has assimilated the lessons of open source and blogging? I think the big obstacle preventing us from seeing the future of business is the assumption that people working for you have to be employees. But think about what’s going on underneath: the company has some money, and they pay it to the employee in the hope that he’ll make something worth more than they paid him. Well, there are other ways to arrange that relationship. Instead of paying the guy money as a salary, why not give it to him as investment? Then instead of coming to your office to work on your projects, he can work wherever he wants on projects of his own.</p><p>那么，当商业领域吸收了开源和博客的启示后，会呈现出怎样的形态？我认为，阻碍我们看清商业未来的最大障碍，是 “为你工作的人必须是员工” 这一固有假设。但不妨想想这种关系的本质：公司有资金，把钱付给员工，希望员工创造出比工资更有价值的东西。其实，这种关系还有其他安排方式 —— 与其给这个人发薪水，不如把钱作为投资给他；这样一来，他就不用来你的办公室做你安排的项目，而是可以在任何地方做自己的项目。</p><p>Because few of us know any alternative, we have no idea how much better we could do than the traditional employer-employee relationship. Such customs evolve with glacial slowness. Our employer-employee relationship still retains a big chunk of master-servant DNA. [6]</p><p>由于很少有人知道其他可能性，我们根本不清楚自己能比传统雇佣关系做得好多少。这类惯例的演变极其缓慢，如今的雇佣关系中，仍保留着大量 “主仆关系” 的基因。[6]</p><p>I dislike being on either end of it. I’ll work my ass off for a customer, but I resent being told what to do by a boss. And being a boss is also horribly frustrating; half the time it’s easier just to do stuff yourself than to get someone else to do it for you. I’d rather do almost anything than give or receive a performance review.</p><p>我讨厌处于这种关系的任何一端：我愿意为客户拼命工作，但反感老板对我指手画脚；而当老板也同样令人沮丧 —— 很多时候，自己做事比让别人做更容易。我宁愿做几乎任何事，也不愿进行或接受绩效评估。</p><p>On top of its unpromising origins, employment has accumulated a lot of cruft over the years. The list of what you can’t ask in job interviews is now so long that for convenience I assume it’s infinite. Within the office you now have to walk on eggshells lest anyone say or do something that makes the company prey to a lawsuit. And God help you if you fire anyone.</p><p>除了其本身不尽如人意的起源，雇佣关系多年来还积累了大量 “冗余规则”。如今招聘面试中 “禁止提问的内容” 清单长得离谱，为图方便，我干脆默认它是无限长的。在办公室里，你必须如履薄冰，生怕有人说的话或做的事让公司陷入诉讼风险。要是你解雇了某个人，那更是得求老天保佑。</p><p>Nothing shows more clearly that employment is not an ordinary economic relationship than companies being sued for firing people. In any purely economic relationship you’re free to do what you want. If you want to stop buying steel pipe from one supplier and start buying it from another, you don’t have to explain why. No one can accuse you of unjustly switching pipe suppliers. Justice implies some kind of paternal obligation that isn’t there in transactions between equals.</p><p>没有什么比 “公司因解雇员工而被起诉” 更能说明雇佣关系并非普通经济关系了。在纯粹的经济关系中，你可以自由行事：若你想停止从某个供应商那里购买钢管，转而选择另一家，无需解释原因，也没人会指责你 “不公正地更换供应商”。“公正” 一词隐含着某种家长式的义务，而这种义务在平等主体之间的交易中并不存在。</p><p>Most of the legal restrictions on employers are intended to protect employees. But you can’t have action without an equal and opposite reaction. You can’t expect employers to have some kind of paternal responsibility toward employees without putting employees in the position of children. And that seems a bad road to go down.</p><p>大多数针对雇主的法律限制旨在保护员工，但有行动就必然有对等的反作用。你不能既要求雇主对员工承担家长式责任，又不把员工置于类似 “孩子” 的被动地位 —— 这显然是一条不可取的道路。</p><p>Next time you’re in a moderately large city, drop by the main post office and watch the body language of the people working there. They have the same sullen resentment as children made to do something they don’t want to. Their union has exacted pay increases and work restrictions that would have been the envy of previous generations of postal workers, and yet they don’t seem any happier for it. It’s demoralizing to be on the receiving end of a paternalistic relationship, no matter how cozy the terms. Just ask any teenager.</p><p>下次你在中等规模的城市时，不妨去主邮局看看那里工作人员的肢体语言：他们脸上那种闷闷不乐的抵触情绪，和被逼着做不想做的事的孩子如出一辙。他们的工会争取到了加薪和工作限制条款，这些待遇足以让前几代邮政员工羡慕，但他们似乎并未因此更快乐。无论条件多优厚，处于家长式关系的被动一方都会感到泄气 —— 问问任何一个青少年，你就会明白。</p><p>I see the disadvantages of the employer-employee relationship because I’ve been on both sides of a better one: the investor-founder relationship. I wouldn’t claim it’s painless. When I was running a startup, the thought of our investors used to keep me up at night. And now that I’m an investor, the thought of our startups keeps me up at night. All the pain of whatever problem you’re trying to solve is still there. But the pain hurts less when it isn’t mixed with resentment.</p><p>我能看清雇佣关系的弊端，是因为我经历过一种更优的关系（且身处过其两端）：投资者与创始人的关系。我不会说这种关系毫无痛苦 —— 当年我运营初创公司时，一想到投资者就彻夜难眠；如今我成为投资者，一想到旗下的初创公司也会辗转反侧。无论你试图解决什么问题，其中的痛苦都不会消失，但当痛苦中不夹杂抵触情绪时，就不会那么难熬。</p><p>I had the misfortune to participate in what amounted to a controlled experiment to prove that. After Yahoo bought our startup I went to work for them. I was doing exactly the same work, except with bosses. And to my horror I started acting like a child. The situation pushed buttons I’d forgotten I had.</p><p>我不幸参与过一场堪称 “对照实验” 的经历，恰好印证了这一点。雅虎收购我们的初创公司后，我去了雅虎工作 —— 我做的工作和之前完全一样，唯一的区别是多了 “老板”。让我震惊的是，我开始表现得像个孩子，这种环境触发了我早已忘记的 “被动情绪按钮”。</p><p>The big advantage of investment over employment, as the examples of open source and blogging suggest, is that people working on projects of their own are enormously more productive. And a startup is a project of one’s own in two senses, both of them important: it’s creatively one’s own, and also economically ones’s own.</p><p>正如开源和博客的例子所表明的，“投资关系” 相对于 “雇佣关系” 的最大优势在于：为自己的项目工作的人， productivity 会高得多。而初创公司在两个重要层面上都属于 “自己的项目”：创意上的自主，以及经济上的自主。</p><p>Google is a rare example of a big company in tune with the forces I’ve described. They’ve tried hard to make their offices less sterile than the usual cube farm. They give employees who do great work large grants of stock to simulate the rewards of a startup. They even let hackers spend 20% of their time on their own projects.</p><p>谷歌是少数与上述趋势接轨的大公司之一：他们努力让办公室摆脱常规 “格子间农场” 的刻板感；给表现出色的员工大量股票奖励，模拟初创公司的回报模式；甚至允许程序员将 20% 的工作时间用于自己的项目。</p><p>Why not let people spend 100% of their time on their own projects, and instead of trying to approximate the value of what they create, give them the actual market value? Impossible? That is in fact what venture capitalists do.</p><p>既然如此，为什么不允许人们把 100% 的时间投入自己的项目，并且不刻意估算他们创造的价值，而是直接给予其实际市场价值呢？这听起来不可能？但风险投资家实际上就是这么做的。</p><p>So am I claiming that no one is going to be an employee anymore– that everyone should go and start a startup? Of course not. But more people could do it than do it now. At the moment, even the smartest students leave school thinking they have to get a job. Actually what they need to do is make something valuable. A job is one way to do that, but the more ambitious ones will ordinarily be better off taking money from an investor than an employer.</p><p>那么，我是不是在说 “以后没人会当员工了，所有人都该去创办初创公司”？当然不是。但有能力这么做的人，比现在实际去做的人要多。目前，即便是最聪明的学生，毕业后也会觉得 “必须找份工作”。但实际上，他们需要做的是 “创造有价值的东西”—— 工作只是实现这一目标的一种方式，而对更有抱负的人来说，从投资者那里获得资金支持，通常比受雇于雇主更好。</p><p>Hackers tend to think business is for MBAs. But business administration is not what you’re doing in a startup. What you’re doing is business creation. And the first phase of that is mostly product creation– that is, hacking. That’s the hard part. It’s a lot harder to create something people love than to take something people love and figure out how to make money from it.</p><p>黑客（此处指程序员）往往认为 “商业是 MBA 的事”，但在初创公司里，你做的不是 “企业管理”，而是 “创造商业”。而这一过程的第一阶段，主要是 “创造产品”—— 也就是编程。这才是最难的部分：创造人们喜爱的东西，远比拿着已有的热门产品去琢磨 “如何赚钱” 要难得多。</p><p>Another thing that keeps people away from starting startups is the risk. Someone with kids and a mortgage should think twice before doing it. But most young hackers have neither.</p><p>阻碍人们创办初创公司的另一个因素是风险：有孩子、有房贷的人确实需要三思，但大多数年轻程序员既没有孩子，也没有房贷。</p><p>And as the example of open source and blogging suggests, you’ll enjoy it more, even if you fail. You’ll be working on your own thing, instead of going to some office and doing what you’re told. There may be more pain in your own company, but it won’t hurt as much.</p><p>而且，正如开源和博客的例子所示，即便失败了，你也会更享受这个过程 —— 因为你在做自己的事，而不是去某个办公室听人指挥。自己的公司可能会有更多困难，但这些困难带来的痛苦会轻得多。</p><p>That may be the greatest effect, in the long run, of the forces underlying open source and blogging: finally ditching the old paternalistic employer-employee relationship, and replacing it with a purely economic one, between equals.</p><p>从长远来看，开源和博客背后的这些趋势，可能会带来一个最重大的影响：最终摒弃陈旧的家长式雇佣关系，取而代之的是平等主体之间纯粹的经济关系。</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>[1] Survey by Forrester Research reported in the cover story of Business Week, 31 Jan 2005. Apparently someone believed you have to replace the actual server in order to switch the operating system.<br>[1] 弗雷斯特研究公司（Forrester Research）的一项调查，见于《商业周刊》（Business Week）2005 年 1 月 31 日的封面报道。显然，当时有人认为，要更换操作系统，就必须更换实际的服务器。</p><p>[2] It derives from the late Latin tripalium, a torture device so called because it consisted of three stakes. I don’t know how the stakes were used. “Travel” has the same root.<br>[2] 该词源自晚期拉丁语 “tripalium”，指一种刑具，之所以叫这个名字，是因为它由三根木桩构成。我不知道这些木桩具体是如何使用的。“travel”（旅行）一词与它同源。</p><p>[3] It would be much bigger news, in that sense, if the president faced unscripted questions by giving a press conference.<br>[3] 从这个意义上说，如果总统能通过召开新闻发布会来回答无脚本的提问，那才会是更大的新闻。</p><p>[4] One measure of the incompetence of newspapers is that so many still make you register to read stories. I have yet to find a blog that tried that.<br>[4] 衡量报纸行业能力欠缺的一个表现是，至今仍有许多报纸要求读者注册才能阅读文章。而我至今尚未发现有哪个博客会这么做。</p><p>[5] They accepted the article, but I took so long to send them the final version that by the time I did the section of the magazine they’d accepted it for had disappeared in a reorganization.<br>[5] 他们当时接受了这篇文章，但我迟迟没有把最终版本发给他们。等我终于发过去的时候，这本杂志原本计划刊登该文章的栏目，已经在一次机构重组中被取消了。</p><p>[6] The word “boss” is derived from the Dutch baas, meaning “master.”<br>[6] “boss”（老板）一词源自荷兰语 “baas”，意为 “主人”。</p><p>Thanks to Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢萨拉・哈林（Sarah Harlin）、杰西卡・利文斯顿（Jessica Livingston）和罗伯特・莫里斯（Robert Morris）审阅了本文的初稿。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>唐纳德・特朗普访谈实录</title>
    <link href="/2025/08/28/donald-trump-interview-lex-fridman/"/>
    <url>/2025/08/28/donald-trump-interview-lex-fridman/</url>
    
    <content type="html"><![CDATA[<h1 id="Transcript-for-Donald-Trump-Interview-Lex-Fridman-Podcast-442"><a href="#Transcript-for-Donald-Trump-Interview-Lex-Fridman-Podcast-442" class="headerlink" title="Transcript for Donald Trump Interview | Lex Fridman Podcast #442"></a>Transcript for Donald Trump Interview | Lex Fridman Podcast #442</h1><h1 id="唐纳德・特朗普访谈实录-《莱克斯・弗里德曼播客》第-442-期"><a href="#唐纳德・特朗普访谈实录-《莱克斯・弗里德曼播客》第-442-期" class="headerlink" title="唐纳德・特朗普访谈实录 | 《莱克斯・弗里德曼播客》第 442 期"></a>唐纳德・特朗普访谈实录 | 《莱克斯・弗里德曼播客》第 442 期</h1><p>原文链接: <a href="https://lexfridman.com/donald-trump-transcript">https://lexfridman.com/donald-trump-transcript</a></p><p>Sep 4, 2024</p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>Here are the loose “chapters” in the conversation. Click link to jump approximately to that part in the transcript:<br>以下是访谈中的大致 “章节” 划分。点击链接可大致跳转至实录对应部分：</p><p>0:00 – Introduction<br>0:00—— 引言<br>1:09 – Psychology of winning and losing<br>1:09—— 输赢心理<br>3:51 – Politics is a dirty game<br>3:51—— 政治是场肮脏的游戏<br>5:28 – Business vs politics<br>5:28—— 商界与政界<br>8:04 – War in Ukraine<br>8:04—— 乌克兰战争<br>9:53 – Kamala Harris interview on CNN<br>9:53—— 卡玛拉・哈里斯的 CNN 采访<br>10:36 – Trump-Harris debate<br>10:36—— 特朗普与哈里斯的辩论<br>13:33 – China<br>13:33—— 中国<br>15:47 – 2020 election<br>15:47——2020 年大选<br>24:03 – Project 2025<br>24:03——2025 计划<br>24:52 – Marijuana<br>24:52—— 大麻<br>27:13 – Joe Rogan<br>27:13—— 乔・罗根<br>30:54 – Division<br>30:54—— 社会分裂<br>38:00 – Communism and fascism<br>38:00—— 共产主义与法西斯主义<br>41:36 – Power<br>41:36—— 权力<br>43:36 – UFOs &amp; JFK<br>43:36—— 不明飞行物（UFO）与肯尼迪遇刺案<br>44:16 – Jeffrey Epstein<br>44:16—— 杰弗里・爱泼斯坦<br>45:55 – Mortality and religion<br>45:55—— 死亡与宗教<br>47:25 – Lex AMA<br>47:25—— 莱克斯答疑（AMA，Ask Me Anything）</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:00) I don’t know if you know this, but some people call you a fascist.<br>(00:00:00) 不知道你是否知情，有些人说你是法西斯分子。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:03) Yeah, they do. So I figure it’s all right to call them a communist. Yeah, they call me a lot worse than I call them.<br>(00:00:03) 是啊，他们确实这么说。那我觉得，我称他们为共产主义者也没什么问题。而且，他们对我的称呼可比我对他们的难听多了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:08) A lot of people listening to this, myself included, that doesn’t think that Kamala is a communist.<br>(00:00:08) 很多听这期播客的人 —— 包括我在内 —— 并不认为哈里斯是共产主义者。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:15) I believe you have to fight fire with fire.<br>(00:00:15) 我认为就得以牙还牙。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:17) Politics is a dirty game.<br>(00:00:17) 政治真是场肮脏的游戏。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:19) It is a dirty game. That’s certainly true.<br>(00:00:19) 确实是场肮脏的游戏，这一点毋庸置疑。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:21) How do you win at that game?<br>(00:00:21) 那要怎么在这场游戏中获胜呢？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:24) They suffer from massive Trump derangement syndrome, TDS, and I don’t know if it’s curable from their standpoint.<br>(00:00:24) 他们都患上了严重的 “特朗普失调症”（TDS，Trump Derangement Syndrome），而且在我看来，他们这病可能治不好了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:35) I think we would probably have a better world if everybody in Congress took some mushrooms perhaps?<br>(00:00:35) 我在想，如果国会议员们都吃点致幻蘑菇（这里指裸盖菇素类致幻剂），或许世界会变得更好？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:41) First of all, medical marijuana has been amazing. I’ve had friends and I’ve had others and doctors telling me that it’s been absolutely amazing.<br>(00:00:41) 首先，医用大麻的效果确实很棒。我的一些朋友、其他人，还有医生都跟我说，医用大麻的作用简直太显著了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:00:53) The list of clients that went to the island has not been made public.<br>(00:00:53) 去过那座岛（指爱泼斯坦的私人岛）的客户名单还没公开。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:00:57) Yeah, it’s very interesting, isn’t it?<br>(00:00:57) 是啊，这事儿确实很有意思，不是吗？</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:01:03) The following is a conversation with Donald Trump on this, the Lex Friedman Podcast.<br>(00:01:03) 接下来是本期《莱克斯・弗里德曼播客》中，我与唐纳德・特朗普的对话。</p><h2 id="Psychology-of-winning-and-losing"><a href="#Psychology-of-winning-and-losing" class="headerlink" title="Psychology of winning and losing"></a>Psychology of winning and losing</h2><h2 id="输赢心理"><a href="#输赢心理" class="headerlink" title="输赢心理"></a>输赢心理</h2><p>Donald Trump<br>唐纳德・特朗普<br>(00:01:09) They’re getting smaller and smaller.<br>(00:01:09) 他们（指对手或反对者）的声势越来越小了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:01:11) They’re getting smaller.<br>(00:01:11) 确实越来越小了。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:01:11) Right?<br>(00:01:11) 对吧？</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:01:13) People do respect you more when you have a big camera for some reason.<br>(00:01:13) 不知为何，当你身边有大型摄像机时，人们似乎会更尊重你。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:01:15) No, it’s cool. And about 20 guys that you pay a fortune to. Right?<br>(00:01:15) 也不是，其实就是场面事儿。而且还得雇大概 20 个人，花一大笔钱，不是吗？</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:01:18) All right. Okay. You said that you love winning. And you have won a lot in life, in real estate, in business, in TV and politics. So let me start with a mindset, a psychology question. What drives you more, the love of winning or the hate of losing?<br>(00:01:18) 好的。你之前说过自己热爱胜利，而且你这辈子确实赢了很多 —— 在房地产、商界、电视行业，还有政界都取得了成功。那我先从心态和心理层面问一个问题：对你来说，驱动力更强的是对胜利的热爱，还是对失败的厌恶？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:01:41) Maybe equally, maybe both. I don’t like losing and I do like winning. I’ve never thought of it as to which is more of a driving force.<br>(00:01:41) 可能两者一样强，或者说两者都很重要。我不喜欢失败，同时也热爱胜利。我从来没琢磨过哪一个驱动力更强。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:01:51) You’ve been close with a lot of the greats in sport. You think about Tiger Woods, Muhammad Ali, you have people like Michael Jordan, who I think hate losing more than anybody. So what do you learn from those guys?<br>(00:01:51) 你和很多体育界的传奇人物关系都很好，比如泰格・伍兹、穆罕默德・阿里，还有迈克尔・乔丹 —— 我觉得乔丹比任何人都更痛恨失败。你从这些人身上学到了什么？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:02:06) Well, they do have something different. The great champions have something very different, the sports champions. And you have champions in other fields, but you see it more readily in sports. You see it over a weekend or you see it during a game. And you see that certain people stand out and they keep standing out. But it’s there for you, it doesn’t take a lifetime to find out that somebody was a winner or a loser. And so the sports thing is very interesting. But I play golf with different people and there’s a different mindset among champions. There’s really a very different mindset. There’s a different thought process.<br>(00:02:06) 他们身上确实有与众不同的特质。那些伟大的冠军 —— 尤其是体育界的冠军 —— 都有着极其特别的地方。其他领域也有冠军，但体育界的冠军特质更容易被看到：可能一个周末的比赛，或者一场赛事中，你就能发现有些人脱颖而出，而且能一直保持领先。这种特质很直观，不用花一辈子时间去判断一个人是赢家还是输家。所以体育界的这些现象很有意思。我和不同的人打高尔夫，发现冠军们的心态确实不一样，真的非常不一样，他们的思维方式也截然不同。</p><p>(00:02:50) Talent wise, sometimes you can’t tell the difference in talent. But at the end of a weekend, they seem to win and it’s very interesting. As an example, Tiger or Jack Nicklaus, he was a phenomenal winner and he does have a different way about him and Tiger has a different way about him and Michael Jordan. There’s never one, you would think that there’d be one way. Arnold Palmer was the nicest guy you’d ever meet. And then you have some champions that aren’t really nice, they’re just focused on doing their job. So there’s not one type of person. But the one thing I would say that everybody seems to have in common is they’re very driven. They’re driven beyond.<br>(00:02:50) 单论天赋，有时候你看不出谁更胜一筹。但到了周末比赛结束时，赢的往往是他们，这一点很有意思。比如泰格（・伍兹），还有杰克・尼克劳斯 —— 尼克劳斯是个极其厉害的赢家，他身上有种独特的气质；泰格和乔丹也各有各的特质。你可能会觉得冠军都有统一的 “模板”，但其实没有。阿诺德・帕尔默（高尔夫传奇）是你能遇到的最友善的人，但有些冠军就没那么和善，他们只专注于做好自己的事。所以冠军没有固定的 “类型”，但有一点是所有人的共同点：他们都有着极强的驱动力，超乎常人的驱动力。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:03:39) They don’t seem to give up easily.<br>(00:03:39) 他们似乎都不轻易放弃。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:03:41) They don’t give up. They don’t give up, but they do seem to be, they have a passion that’s maybe more than people that don’t do as well.<br>(00:03:41) 对，他们从不放弃。而且他们身上似乎有一种热情，这种热情可能比那些成绩没那么好的人要强烈得多。</p><h2 id="Politics-is-a-dirty-game"><a href="#Politics-is-a-dirty-game" class="headerlink" title="Politics is a dirty game"></a>Politics is a dirty game</h2><h2 id="政治是场肮脏的游戏"><a href="#政治是场肮脏的游戏" class="headerlink" title="政治是场肮脏的游戏"></a>政治是场肮脏的游戏</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:03:51) You’ve said that politics is a dirty game-<br>(00:03:51) 你之前说过，政治是场肮脏的游戏 ——</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:03:54) Yeah.<br>(00:03:54) 没错。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:03:54) … in the past.<br>(00:03:54) … 你以前就这么说过。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:03:56) It is a dirty game. That’s certainly true.<br>(00:03:56) 它就是场肮脏的游戏，这一点毫无疑问。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:03:59) So if it is a game, how do you win at that game?<br>(00:03:59) 那如果它是一场游戏，要怎么赢呢？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:04:02) Well, you win at that game by getting the word out and by using sense. You have to have a feeling where it’s going. You also have to have a feeling of what’s right. You can’t necessarily just go what’s popular, you have to do what’s good for a country if you’re talking about countries. But you have to get the word out and you have to just continuously, like for instance, you have a great show, you have a great podcast, it’s very well watched. And I’m sitting here and I do this, a lot of people see it and I do other things and a lot of people see that. And I go traditional also, you have traditional television, which is getting a little bit older and maybe less significant, could be less significant, I don’t know. But it’s changing a lot.<br>(00:04:02) 要赢，就得传播自己的主张，而且要讲道理。你得能预判趋势，还得清楚什么是对的。不能只跟风做受欢迎的事 —— 如果是关乎国家的事，就必须做对国家有利的事。但首先得让人们知道你的主张，而且要持续不断地传播。比如你这档播客就很棒，关注度很高。我现在坐在这里接受采访，很多人会看到；我做其他事，也会有很多人关注。我也会用传统媒体，比如传统电视 —— 虽然它现在受众年龄偏大，影响力可能不如以前了，不确定，但确实变化很大。</p><p>(00:04:48) The whole plane of platform is changing a lot. It’s changed a lot in the last two, three years. But from a political standpoint, you have to find out what people are doing, what they’re watching and you have to get on. I just see that these platforms are starting to dominate, they’re getting very big numbers. I did Spaces with Elon and they got numbers like nobody’s ever heard before. So you wouldn’t do that on radio, you wouldn’t do those numbers, no matter how good a show, you wouldn’t do those numbers on radio, you wouldn’t do on television.<br>(00:04:48) 整个平台领域的变化太大了，过去两三年里变化尤其明显。但从政治角度来说，你得知道人们在关注什么、在看什么，然后跟上这些趋势。我能看出来，这些新平台正在占据主导地位，用户量非常大。我和埃隆（・马斯克）一起做过 X 平台的 Spaces 直播，观看人数是以前从未有过的。这种数据在广播上根本不可能达到，不管节目多好，广播或电视都做不到这个量级。</p><h2 id="Business-vs-politics"><a href="#Business-vs-politics" class="headerlink" title="Business vs politics"></a>Business vs politics</h2><h2 id="商界与政界"><a href="#商界与政界" class="headerlink" title="商界与政界"></a>商界与政界</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:05:28) You’ve been successful in business, you’ve been successful in politics. What do you think is the difference between gaining success between the two different disparate worlds?<br>(00:05:28) 你在商界和政界都取得了成功，你觉得在这两个截然不同的领域取得成功，最大的区别是什么？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:05:37) Yeah, and they’re different, very different. I have a lot of people that are in business that are successful and they’d like to go over to politics and then you realize they can’t speak, they choke. It’s hard to make a speech in front of, let’s say you’re talking about a big audience, but I get very big audiences. And for many people it’s virtually impossible to get up and speak for an hour and a half and have nobody leave. It’s not an easy thing to do. And it’s an ability. But I have many people that are very, very successful in business, would love to do what I did. And yet, they can’t pull the trigger. And in many cases, I don’t think it would work. Almost for everybody, it’s not going to work. It’s a very tough thing to do. It’s a big transition.<br>(00:05:37) 确实，这两个领域天差地别。我认识很多商界成功人士，他们想进入政界，但最后发现自己根本不敢说话，会怯场。比如在很多人面前演讲就很难 —— 我经常面对非常庞大的听众，但对很多人来说，站起来演讲一个半小时还能让听众全程不走，几乎是不可能的事。这可不简单，是一种能力。很多商界非常成功的人，都想做我做过的事（进入政界），但他们就是不敢行动。而且很多情况下，就算行动了也不会成功，对绝大多数人来说都不会成功。这太难了，是一个巨大的转变。</p><p>(00:06:35) Now, if you talked about people in the business and politics going into business, likewise, that wouldn’t generally work out so well either. It’s different talents, it’s different. I have somebody that wants to go into politics so bad, but he’s got a little problem, he’s got stage fright. Now, he’s a total killer, but if he gets up onto a stage in front of people, he doesn’t do well, to put it mildly actually. He does badly.<br>(00:06:35) 反过来，政界的人想进入商界，通常也不会太顺利。因为需要的才能不一样。我认识一个人，特别想进入政界，但他有个小问题 —— 有舞台恐惧症。他在商界是个狠角色，但一上台面对人群，说得委婉点是表现不好，其实是表现得很糟糕。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:07:03) So you have to be able to make hard decisions like you do in business, but also be able to captivate an audience.<br>(00:07:03) 所以，你既要有商界那样做艰难决策的能力，还得有吸引听众的能力？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:07:09) Look, if you’re a politician, you have to be able to speak in front of large crowds. There are a lot of people who can’t do that. I’ve seen it. They can’t even think about doing it and they don’t. There are many people in business right now, I could name them, but I don’t want to embarrass anybody, they’ve been talking about running for president for 15 years. And they’re very big in business, very well known actually, but it takes guts to run. For president, I can tell you it takes guts to run. It’s also a very dangerous profession if you want to know the truth, but dangerous in a different sense too. But it takes a lot of courage to run for president. It’s not easy. But you have and you know the same people as I do, there are a lot of people that would like to run for president that are very, very successful in business, but they don’t have the guts to do it and they have to give up a lot.<br>(00:07:09) 是这样的，如果你是政客，就必须能在大批人群面前演讲。很多人做不到这一点，我见过不少。他们甚至连想都不敢想，更别说真的去做了。现在有很多商界人士 —— 我能说出他们的名字，但不想让他们难堪 ——15 年来一直说要竞选总统。他们在商界地位很高，也很有名，但竞选需要勇气。我可以告诉你，竞选总统真的需要勇气。而且说实话，这也是个危险的职业，只是危险的层面不一样。竞选总统需要极大的勇气，不容易。你也认识和我一样的人，很多商界非常成功的人都想竞选总统，但他们没那个勇气，而且竞选还需要放弃很多东西。</p><h2 id="War-in-Ukraine"><a href="#War-in-Ukraine" class="headerlink" title="War in Ukraine"></a>War in Ukraine</h2><h2 id="乌克兰战争"><a href="#乌克兰战争" class="headerlink" title="乌克兰战争"></a>乌克兰战争</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:08:05) One of the great things about people from the business world is they’re often great deal makers and you’re a great deal maker and you’ve talked about the war in Ukraine and that you would be able to find a deal that both Putin and Zelenskyy would accept. What do you think that deal looks like?<br>(00:08:05) 商界人士的一大优势是他们通常很会促成交易，你就是个谈判高手。你之前提到过乌克兰战争，说你能找到一个普京和泽连斯基都能接受的解决方案。你觉得这个方案会是什么样的？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:08:24) I think the deal and I wouldn’t talk about it too much because I think I can make a deal if I win as president-elect, I’ll have a deal made guaranteed. That’s a war that shouldn’t have happened. It’s terrible. Look, Biden is the worst president in the history of our country and she’s probably worse than him. That’s something that should have never happened, but it did happen. And now it’s a much tougher deal to make than it would’ve been before it started. Millions of people, I think the number’s going to be a lot higher when you see this all at some point to iron out, I think the numbers are going to be, the death numbers are going to be a lot higher than people think. When you take a look at the destruction and the buildings coming down all over the place in Ukraine, I think those numbers are going to be a lot higher.<br>(00:08:24) 这个方案嘛，我不会说太多细节，因为我相信如果我当选总统，一定能促成这个方案，这是肯定的。这场战争本不该发生，太可怕了。你看，拜登是我们国家历史上最糟糕的总统，而她（指哈里斯）可能比他还糟。这场战争本不该发生，但它还是发生了。现在要达成解决方案，比战争刚开始时难多了。伤亡人数方面，我觉得等事情尘埃落定后，真实数字会比现在人们认为的高得多。看看乌克兰各地的破坏情况，那么多建筑倒塌，死亡人数肯定比想象中多很多。</p><p>(00:09:12) They lie about the numbers. They try and keep them low. They knock down a building that’s two blocks long, these are big buildings and they say one person was mildly injured. No, no, a lot of people were killed. And there are people in those buildings and they have no chance. Once they start coming down, there’s no chance. So that’s a war that absolutely has to get done. And then you have Israel and then you have a lot of other places that are talking war. The world is a rough place right now and a lot of it’s because of the fact that America has no leadership. And I believe that she’ll be probably worse than Biden. I watched the interview the other night, it was just a softball interview.<br>(00:09:12) 他们在数字上撒谎，试图把伤亡人数压低。比如一栋两个街区长的大楼倒塌了 —— 那些都是很大的建筑 —— 他们却说只有一个人受了轻伤。根本不是这样，肯定有很多人丧生。大楼里有人，但大楼一倒，他们就没救了。所以这场战争必须结束。而且现在以色列（局势紧张），还有很多其他地方都有战争的苗头。现在的世界太不太平了，很大程度上是因为美国没有像样的领导力。而且我觉得她（哈里斯）可能会比拜登还糟。前几天晚上我看了她的采访，那根本就是场 “软球采访”（指提问温和、不具挑战性）。</p><h2 id="Kamala-Harris-interview-on-CNN"><a href="#Kamala-Harris-interview-on-CNN" class="headerlink" title="Kamala Harris interview on CNN"></a>Kamala Harris interview on CNN</h2><h2 id="卡玛拉・哈里斯的-CNN-采访"><a href="#卡玛拉・哈里斯的-CNN-采访" class="headerlink" title="卡玛拉・哈里斯的 CNN 采访"></a>卡玛拉・哈里斯的 CNN 采访</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:09:59) So you would like to see her do more interviews, challenged more.<br>(00:09:59) 所以你希望她多接受采访，而且接受更有挑战性的提问？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:10:03) I don’t know. I can’t believe the whole thing is happening. We had a man in there that should have never been in there. They kept him in a basement. They used COVID. They cheated, but they used COVID to cheat. Then they cheated without COVID too. But you had somebody in there and now we have a woman that is not, she couldn’t do an interview. This was a really soft interview. This is an interview where they’re giving her multiple choice questions, multiple guess, I call it multiple guess. And I don’t think she did well. I think she did very poorly.<br>(00:10:03) 不好说。我都不敢相信会发生这种事。我们之前有个本不该当总统的人（指拜登）在白宫，他们把他关在地下室里，还利用新冠疫情做文章。他们舞弊，而且用新冠当借口舞弊，后来没新冠了也照样舞弊。现在换成了她（哈里斯），她根本没法接受采访。之前那场采访太水了，提问都跟选择题似的，我管那叫 “猜谜式提问”。而且就算这样，她表现得也不好，非常差。</p><h2 id="Trump-Harris-debate"><a href="#Trump-Harris-debate" class="headerlink" title="Trump-Harris debate"></a>Trump-Harris debate</h2><h2 id="特朗普与哈里斯的辩论"><a href="#特朗普与哈里斯的辩论" class="headerlink" title="特朗普与哈里斯的辩论"></a>特朗普与哈里斯的辩论</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:10:36) How do you think you’ll do in the debate coming up, that’s in a few days?<br>(00:10:36) 几天后就要举行辩论了，你觉得自己会表现得怎么样？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:10:39) So I’ve done a lot of debating, only as a politician. I never debated. My first debate was the Rosie O’Donnell debate, the famous Rosie O’Donnell debate, the answer. But I’ve done well with debates. I became president. Then the second time, I got millions more votes than I got the first time. I was told if I got 63 million, which is what I got the first time, you would win, you can’t not when. And I got millions of more votes on that and lost by a whisker. And look what happened to the world with all of the wars and all of the problems. And look what happened with inflation because inflation is just eating up our country, eating it up. So it’s too bad. But there are a lot of things that could happen. We have to get those wars settled. I’ll tell you, you have to get Ukraine done. That could end up in a third world war. So could the Middle East. So could the Middle East.<br>(00:10:39) 我作为政客参加过很多场辩论，但以前从没辩论过。我的第一场辩论是和罗西・奥唐纳（美国主持人）的那场，就是那场很有名的辩论。但我辩论表现一直不错，不然也当不上总统。第二次竞选时，我比第一次多得了几百万票。有人告诉我，第一次我得 6300 万票就能赢，结果第二次得票更多，却以微弱差距输了。你看看现在的世界，到处都是战争和问题，通胀也快把我们国家 “吞噬” 了。太可惜了。但未来还有很多可能，我们必须解决那些战争问题。我跟你说，乌克兰问题必须解决，不然可能会引发第三次世界大战，中东问题也一样，随时可能升级。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:11:39) So maybe let’s talk about what it takes to negotiate with somebody like Putin or Zelenskyy. Do you think Putin would be willing to give up any of the regions that are already captured?<br>(00:11:39) 那我们聊聊和普京或泽连斯基这样的人谈判需要什么条件吧。你觉得普京会愿意放弃已经占领的地区吗？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:11:49) I don’t know. I can tell you that all of this would’ve never happened and it would’ve been very easy because you don’t have, that question wouldn’t be asked. That’s a tougher question. Once that starts happening because he has taken over a lot of territory, now I guess they’re insurgents now too. Right? So it’s a little bit interesting that that’s happening and that it can happen. And it’s interesting that Putin has allowed that to happen. Look, that’s one that should have never started. We have to get it stopped. Ukraine is being demolished. They’re destroying a great culture that’s largely destroyed.<br>(00:11:49) 不好说。但我可以告诉你，如果当初（拜登政府）处理得当，这一切都不会发生，问题也会很容易解决，根本不会有 “普京是否放弃占领区” 这种问题。现在问题难多了，因为他已经占领了很多领土，而且现在似乎还有叛乱分子，对吧？这种情况的发生和持续挺有意思的，普京居然允许这种情况出现。这场战争本不该开始，我们必须阻止它。乌克兰正在被摧毁，一个伟大的文化也快被彻底毁灭了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:12:32) What do you think works better in those kinds of negotiations? Leverage of let’s say friendship, the carrot or the stick, friendship or sort of the threat of using the economic and military power?<br>(00:12:32) 你觉得在这种谈判中，哪种方式更有效？是靠 “友谊” 这种筹码，还是 “胡萝卜加大棒”—— 比如靠友谊，或者靠经济、军事力量的威胁？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:12:46) So it depends on who the person is. Everyone’s different. Negotiation is interesting because it depends on who the person is. And then you have to guess or know through certain knowledge, which is more important, the carrot or the stick. And with some people, it’s the stick. And with some people, it’s the carrot. I think the stick probably is generally more successful in that we’re talking about war. But the kind of destruction that we’re witnessing now, nobody’s ever seen. It’s a terrible thing. And we’re witnessing it all over. We’re witnessing it in all parts of the world and a lot of things are going to get started. Look what’s going on with China. Look at Japan, they’re starting to rearm now. They’re starting to rearm because China’s taken over certain islands and there’s a lot of danger in the war right now, in the world.<br>(00:12:46) 这得看对方是谁，每个人都不一样。谈判的有意思之处就在于，它取决于谈判对象是谁。你得通过观察或了解，判断 “胡萝卜” 和 “大棒” 哪个更重要。对有些人来说，“大棒” 管用；对另一些人来说，“胡萝卜” 更有效。就战争谈判而言，我觉得 “大棒” 通常更有效。但我们现在看到的破坏程度，是前所未有的，太可怕了。而且这种破坏在世界各地都在发生，很多地方的局势都可能升级。你看看中国的情况，日本现在也开始重新武装了 —— 因为中国占领了某些岛屿，现在世界上的战争风险太高了。</p><h2 id="China"><a href="#China" class="headerlink" title="China"></a>China</h2><h2 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h2><p>(00:13:46) And there’s a great possibility of World War III and we better get this thing done fast because five months with people like her and him, he’s checked out, he just goes to the beach and thinks he looks good in a bathing suit, which he doesn’t, he’s sort of checked out. Hey look, you can’t blame him. That was a coup, they took it over. They took over the presidential deal. The whole presidential thing was taken over in a coup. He had 14 million votes. He had no votes, not one. And nobody thought it was going to be her. Nobody wanted it to be her. She was a joke until six weeks ago when they said we’re going to have to, politically, they felt they had to pick her. And if they didn’t pick her, they thought there would be a problem. I don’t know if that’s right or not. I actually don’t think it’s right, but they thought it was right. And now, immediately the press comes to their aid.<br>(00:13:46) 第三次世界大战的可能性很大，我们必须尽快解决这些问题，因为让她（哈里斯）和他（拜登）再执政五个月，后果不堪设想。拜登已经 “摆烂” 了，整天去海滩，还觉得自己穿泳衣好看 —— 其实一点都不好看，他就是不管事了。不过也不能全怪他，因为那场选举就是一场 “政变”，他们夺走了政权，整个总统职位都是他们通过 “政变” 抢来的。他（拜登）根本没得到那么多选票，1400 万票都是假的，他一票都没得到。而且没人想到会是她（哈里斯）接班，也没人想让她接班。六周前，她还像个笑话，后来他们（民主党）出于政治考虑，觉得必须选她，不然会出问题。我不知道他们的想法对不对，其实我觉得不对，但他们自己觉得对。现在媒体马上就站出来支持他们了。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:14:48) If we can go back to China, on negotiation, how do we avoid war with China in the 21st century?<br>(00:14:48) 我们再回到中国的话题，从谈判角度来说，21 世纪我们该如何避免和中国发生战争？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:14:56) Well, there are ways. Now here’s the problem. If I tell you how and I’d love to do it, but if I give you a plan, I have a very exacting plan how to stop Ukraine and Russia. And I have a certain idea, maybe not a plan, but an idea for China. Because we do, we’re in a lot of trouble. They’ll be in a lot of trouble too, but we’re in a lot of trouble. But I can’t give you those plans because if I give you those plans, I’m not going to be able to use them, they’ll be very unsuccessful. Part of it is surprise, right?<br>(00:14:56) 有办法的。但问题是，如果我现在告诉你方法 —— 我其实很想告诉你 —— 但如果我把方案说出来，就没法用了，肯定会失败。我有一个非常具体的方案来解决俄乌问题，对中国也有一些想法（虽然可能算不上完整方案）。因为我们现在处境很困难，中国也一样，但我们的麻烦确实很大。但我不能透露这些方案，因为一旦透露，就没法实施了。谈判的关键之一就是出其不意，对吧？</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:15:31) Right.<br>(00:15:31) 对。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:15:31) But they won’t be able to help us much.<br>(00:15:31) 而且（提前透露）对我们也没什么好处。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:15:35) So you have a plan of what to say to Putin when you take office?<br>(00:15:35) 所以你上任后，知道该跟普京说些什么？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:15:39) Yeah, I know [inaudible 00:15:40]. No, I had a very good relationship with him and I had a good relationship with Zelenskyy too, but had a very good relationship with Putin.<br>(00:15:39) 是啊，我知道该说什么 [此处音频不清晰]。而且我以前和他（普京）关系很好，和泽连斯基关系也不错，但和普京的关系确实非常好。</p><h2 id="2020-election"><a href="#2020-election" class="headerlink" title="2020 election"></a>2020 election</h2><h2 id="2020-年大选"><a href="#2020-年大选" class="headerlink" title="2020 年大选"></a>2020 年大选</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:15:47) Tough topic, but important. You said lost by whisker. I’m an Independent, I have a lot of friends who are Independent, many of whom like your policies, like the fact that you’re a dealmaker, like the fact that you can end wars, but they are troubled by what happened in the 2020 election and statements about widespread fraud and this kind of stuff, fake election scheme. What can you say to those Independent voters to help them decide who to vote for?<br>(00:15:47) 这是个敏感但重要的话题。你说上次是以微弱差距输了。我是无党派人士，有很多无党派的朋友，他们中很多人喜欢你的政策，认可你擅长谈判、能结束战争的能力，但他们对 2020 年大选的情况，以及你所说的 “大规模舞弊”“虚假选举阴谋” 感到不安。你想对这些无党派选民说些什么，帮助他们决定投票给谁？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:16:24) Right. I think the fraud was on the other side. I think the election was a fraud. And many people felt it was that and they wanted answers. And when you can’t challenge an election, you have to be able to challenge it, otherwise it’s going to get worse, not better. And there are lots of ways to solve this problem. Go to paper ballots. Do it easy way, I mean the paper ballots and you have voter ID and you have same day voting and you have proof of citizenship, which is very important because we have people voting that are not citizens. They just came in and they’re loading up the…<br>(00:16:24) 是这样的，我认为舞弊是对方（民主党）搞的，那场选举就是一场舞弊。很多人都这么觉得，他们想知道真相。如果选举不能被质疑，那问题只会越来越糟，不会好转。解决这个问题有很多办法，比如采用纸质选票 —— 这很简单，就是用纸质选票，同时要求选民身份证、当天投票，还要提供公民身份证明。公民身份证明很重要，因为现在有非公民在投票，他们刚入境就去投票……</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:17:00) They just came in and they’re loading up the payrolls, they’re loading up everything. They’re putting students in schools. They don’t speak a word of English, and they’re taking the seats of people that are citizens of our country. So look, we have the worst border in the history of the world. We have coming into our country right now, millions and millions of people at levels that nobody’s ever seen. I don’t believe any country’s ever seen it. And they would use sticks and stones not to make it happen, not to let it happen. We don’t do anything. And we have a person who was the border czar, who now said she wasn’t really the border czar, but she was, she was the border czar, but she was in charge of the border. And we have her and she’s saying very strongly, “Oh, I did such a good job.” She was horrible, horrible. The harm she’s done…<br>(00:17:00) … 他们刚入境，就占用我们的福利资源，占用各种资源，还把孩子送进学校 —— 这些孩子连一句英语都不会说，却占了我们本国公民孩子的学位。你看，我们现在的边境是历史上最糟糕的，每天有数百万人涌入，规模前所未有，我觉得没有任何一个国家经历过这种情况。换作其他国家，肯定会想尽办法阻止，但我们什么都不做。之前有个 “边境沙皇”（负责边境事务的官员），现在她却说自己不是真的 “边境沙皇”，但她明明就是，她负责边境事务，现在还大言不惭地说 “我做得很好”。她做得糟透了，太糟糕了，她造成的危害……</p><p>(00:17:56) But we have people coming in from other countries all over the world, not just South America, and they’re coming in from prisons and jails. They’re coming in from mental institutions and insane asylums and they’re street criminals right off the street. They take them and they’re being given to our country, drug dealers, human traffickers. We’re destroying our country. This is a sin what’s been allowed to take place over the last four years. We’re our country. And we’ll see how that all works out, but it’s not even believable. And now you see, you saw in Aurora, Colorado, a group of very tough young thugs from Venezuela taking over big areas including buildings. They’re taking over buildings. They have their big rifles, but they’re taking over buildings.<br>(00:17:56) 而且涌入的人来自世界各地，不只是南美 —— 他们中有监狱里出来的囚犯、精神病院的病人，还有街头混混。他们（其他国家）把这些人送到我们国家，还有毒贩、人贩子。我们的国家正在被摧毁，过去四年发生的这些事简直是罪过。我们的国家啊…… 不知道最后会怎样，但这一切太离谱了。你看科罗拉多州奥罗拉市，一群来自委内瑞拉的凶狠年轻暴徒占领了大片区域，包括一些建筑。他们拿着大口径步枪，就这么占领了建筑。</p><p>(00:18:52) We’re not going to let this happen. We’re not going to let them destroy a country. And in those countries,, crime is way down, they’re taking them out of their prisons, which is good because good for them. I do the same thing. By the way, if I ran one of those countries, any country in the world, I would make sure that America has every one of our prisoners, every one of our criminals would be here. I can’t believe they’re going so slowly, but some are. But they all are doing it and we can’t let that happen. They’re emptying out their prisons and their mental institutions into the United States of America. We can’t let that happen.<br>(00:18:52) 我们不会让这种事继续下去，不会让他们摧毁我们的国家。那些国家把囚犯送走后，犯罪率大幅下降，对他们来说当然是好事。换作我，如果我是某个国家的领导人，我肯定也会把所有囚犯、罪犯都送到美国来。真不敢相信他们动作这么慢，但确实有国家在这么做，而且所有国家都在这么做，我们不能让这种事发生。他们把监狱和精神病院的人都清空，送到美国来，我们绝不能容忍。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:19:29) So a lot of people believe that there was some shady stuff that went on with the election, whether it’s media bias or big tech, but still the claim of widespread fraud is the thing that bothers people.<br>(00:19:29) 很多人认为选举中确实有猫腻，比如媒体偏见、大型科技公司干预，但 “大规模舞弊” 这种说法还是让很多人不安。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:19:42) Well, I don’t focus on the past. I focus on the future. I mean, I talk about how bad the economy is, how bad inflation is now, bad things like… Which is important. Afghanistan was, in my opinion, the most embarrassing thing that’s ever happened to our country. And because of that, I think Putin went in when he said how stupid we were. Putin went in, but it was the most embarrassing moment in the history of our country. I really believe that. But we left 13 dead soldiers, think of it, 13 dead soldiers, many soldiers horrifically hurt, with arms and legs and everything else gone. We left hostages behind. We left Americans behind. We left military equipment, the likes of which nobody’s ever left behind before. Billions and billions of dollars of equipment. They’re now selling the equipment. They’re one of the largest arms dealers in the world.<br>(00:19:42) 我其实不怎么关注过去，我更关注未来。我会说现在经济多糟、通胀多严重，这些才是重要的事。在我看来，阿富汗撤军是我们国家历史上最丢人的事。正因为我们撤军那么狼狈，普京才会说 “美国人真蠢”，然后趁机行动（指进攻乌克兰）。那真的是我们国家历史上最丢人的时刻，我对此深信不疑。我们留下了 13 名阵亡士兵 —— 想想看，13 个人，还有很多士兵受了重伤，缺胳膊少腿。我们还留下了人质、美国公民，还有价值数十亿美元的军事装备，规模前所未有。现在塔利班在卖这些装备，他们都成了世界上最大的军火商之一。</p><p>(00:20:45) And very sad, very sad. And we were there for a long time. I was going to get out. We were getting ready to get out. Then we got interrupted by the election, but we would’ve been out with dignity and strength. We were having very little problem with the Taliban when I was there, because they knew it was going to be tough. I dealt with Abdul. Abdul was the leader, and we got along fine. He understood, but they were shooting, they were killing a lot of our people before I came down. And when I got there, I spoke to him, I said, “You can’t do it. Don’t do it anymore.” We went 18 months before this happened, this horrible day happened. We went 18 months and nobody was shot at or killed.<br>(00:20:45) 太令人难过了。我们在阿富汗待了那么久，我本来计划体面撤军，当时已经在准备了，结果被选举打断了。如果是我，我们会带着尊严和实力撤军。我执政时，我们和塔利班几乎没什么冲突，因为他们知道我不好惹。我和阿卜杜勒（塔利班领导人）打过交道，我们关系还不错，他明白我的意思。但在我上任前，塔利班经常开枪，杀了我们很多人。我上任后跟他说：“你不能再这么做了，别再这么干了。” 在那场可怕的撤军事件发生前，我们有 18 个月没有一名士兵遭到枪击或阵亡。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:21:33) What do you think that was? The carrot or the stick, in that case, in Afghanistan?<br>(00:21:33) 你觉得那时候在阿富汗，是 “胡萝卜” 还是 “大棒” 起了作用？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:21:37) The stick, definitely the stick.<br>(00:21:37) 肯定是 “大棒”。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:21:38) So the threat of military force.<br>(00:21:38) 也就是军事力量的威胁？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:21:40) That was the stick, yeah. It doesn’t have to be, but that was the stick.<br>(00:21:40) 对，就是 “大棒”。不一定非要用这个，但当时确实是靠这个。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:21:44) Well, let me just linger on the election a little bit more. For this election, it might be a close one. What can we do to avoid the insanity and division of the previous election, whether you win or lose?<br>(00:21:44) 那我再多问一点关于选举的事。这次选举可能会很胶着，不管你赢还是输，我们该怎么做才能避免上次选举那种混乱和分裂？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:21:58) Well, I hope it’s not a close one. I mean, I don’t know how people can vote for somebody that has destroyed our country, the inflation, the bad economy. But to me, in a way, the worst is what they’ve allowed to happen at our border where they’ve allowed millions of people to come and hear from places that you don’t want to know about. And I can’t believe that there’s going to be a close election. We’re leading in the polls and it looks close, but I think in the end it’s not going to be a close election.<br>(00:21:58) 我希望不会胶着。我真的不明白，怎么会有人投票给那个摧毁了我们国家的人（指拜登）—— 看看通胀、看看糟糕的经济。而且对我来说，最糟糕的是他们放任边境失控，让数百万来自不明地方的人涌入。我真不敢相信这次选举会胶着，我们在民调中领先，虽然看起来接近，但我觉得最后不会胶着。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:22:29) What do you think is the right way to solve the immigration crisis? Is mass deportation one of the solutions you would think about?<br>(00:22:29) 你觉得解决移民危机的正确方法是什么？大规模驱逐非法移民是你会考虑的方案之一吗？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:22:35) Well, you’ve got to get the criminals out of here fast, right? The people from mental institutions, you got to get them back into their mental institution. No country can afford this. It’s just too much money. You look at what’s happening in New York and Chicago and LA and lots of places, and you take a look at what’s happening. There’s no country can afford this. We can’t afford it, and we’ve got to get the bad ones out immediately and the rest have to be worked on. It’s happened before. Dwight Eisenhower was sort of a moderate president, moderate type person, but he hated when he saw people pouring into the country, and they were nothing like. Now, I probably got elected in 2016, because of the border, and I told people what was happening and they understood it. And I won the election.<br>(00:22:35) 首先，必须尽快把罪犯驱逐出去，对吧？还有那些从精神病院出来的人，得把他们送回精神病院。没有哪个国家能承受这种情况，太费钱了。你看看纽约、芝加哥、洛杉矶这些地方的情况，没有哪个国家能扛得住。我们也扛不住，所以必须立刻把坏人赶走，其他人的问题再慢慢解决。以前也有过类似情况，德怀特・艾森豪威尔（美国前总统）算是温和派，但他看到有人涌入美国就很反感，而且那时候的移民规模根本没法和现在比。2016 年我能当选，很可能就是因为边境问题 —— 我告诉人们边境的真实情况，他们理解了，然后选了我。</p><p>(00:23:25) And I won the election, I think because of the border. Our border is 25 times worse right now than it was in 2016. I had it fixed too. I had it the last week of the famous chart that I put up was exactly that, you know the chart. When I looked to the right, I said, “There’s the chart.” Bing. That was not a pleasant experience, but the chart that I put up said, and that was done by border patrol. That was the lowest number that we’ve ever had come into our country in recorded history and we have to get it back to that again. We will.<br>(00:23:25) 我觉得 2016 年当选就是因为边境问题。现在的边境情况比 2016 年糟 25 倍，但我以前已经把边境问题解决了。我执政最后一周公布的那张著名图表 —— 你应该见过 —— 就是证明。那张图表是边境巡逻队做的，显示当时的非法移民数量是有记录以来最低的。我们必须再回到那个水平，而且我们一定能做到。</p><h2 id="Project-2025"><a href="#Project-2025" class="headerlink" title="Project 2025"></a>Project 2025</h2><h2 id="2025-计划"><a href="#2025-计划" class="headerlink" title="2025 计划"></a>2025 计划</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:24:04) Let me ask you about Project 2025. So you’ve publicly said that you don’t have any direct connection to-<br>(00:24:04) 我想问问关于 “2025 计划” 的事。你之前公开说过，你和这个计划没有直接关联 ——</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:24:09) Nothing. I know nothing about it. And they know that too. Democrats know that. And I purposely haven’t read it, because I want to say to you, I have no idea what it’s all about. It’s easier, than saying I read it and all of the things. No, I purposely haven’t read it and I’ve heard about it. I’ve heard about things that are in there that I don’t like, and there’s some things in there that everybody would like, but there are things that I don’t like at all. And I think it’s unfortunate that they put it out, but it doesn’t mean anything, because it has nothing to do with me. Project 25 has absolutely nothing to do with me.<br>(00:24:09) 一点关系都没有，我对此一无所知。民主党人也知道这一点。我故意没去看这个计划，就是为了能坦诚地说 “我完全不知道这是怎么回事”。说 “没看过” 比说 “看过但不认同某些内容” 简单多了。我确实没看，只是听说过一些。听说里面有些内容我不喜欢，也有些内容大家可能会喜欢，但确实有很多我完全不认同的东西。他们公布这个计划挺可惜的，但这和我没关系，“2025 计划” 和我一点关系都没有。</p><h2 id="Marijuana"><a href="#Marijuana" class="headerlink" title="Marijuana"></a>Marijuana</h2><h2 id="大麻"><a href="#大麻" class="headerlink" title="大麻"></a>大麻</h2><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:24:52) You posted recently about marijuana and that you are okay with it being legalized, but it has to be done safely. Can you explain your policy there?<br>(00:24:52) 你最近发文谈到大麻，说你支持大麻合法化，但必须以安全的方式推进。能说说你的具体政策想法吗？</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:25:03) Well, I just put out a paper and first of all, medical marijuana has been amazing. I’ve had friends and I’ve had others and doctors telling me that it’s been absolutely amazing, the medical marijuana. And we put out a statement that we can live with the marijuana. It’s got to be a certain age, got to be a certain age to buy it. It’s got to be done in a very concerted, lawful way. And the way they’re doing in Florida, I think is going to be actually good. It’s going to be very good, but it’s got to be done in a good way. It’s got to be done in a clean way. You go into some of these places, like in New York, it smells all marijuana. You’ve got to have a system where there’s control. And I think the way they’ve done it in Florida is very good.<br>(00:25:03) 我最近刚发布了一份文件，首先，医用大麻的效果非常好。我的朋友、其他人还有医生都跟我说，医用大麻的作用简直太棒了。我们已经发表声明，支持大麻相关政策，但必须有年龄限制 —— 购买大麻得达到一定年龄，而且必须以协调、合法的方式推进。佛罗里达州的做法我觉得很好，会很有效，但关键是要规范、有序。比如在纽约，有些地方到处都是大麻味，这就不行，必须有管控机制。佛罗里达的管控方式就很好。</p><p>Lex Fridman<br>莱克斯・弗里德曼<br>(00:25:59) Do you know anything about psychedelics? So I’m not a drug guy, but I recently did Ayahuasca and there’s a lot of people that speak to the health benefits and the spiritual benefits of these different psychedelics. I think we would probably have a better world if everybody in Congress took some mushrooms perhaps. Now I know you don’t. You stay away from all of that stuff. I know also veterans use it for dealing with PTSD and all that kind of stuff. So it’s great. And it’s interesting that you’re thinking about being more accepting of some of these drugs, which don’t just have a recreational purpose, but a medical purpose, a treatment purpose.<br>(00:25:59) 你了解致幻剂吗？我不是 “瘾君子”，但最近尝试了死藤水（Ayahuasca）。很多人说不同的致幻剂对健康和精神有好处，我甚至觉得，如果国会议员都吃点致幻蘑菇（裸盖菇素），世界可能会更好。我知道你不会碰这些东西，一直远离它们。我也知道退伍军人用致幻剂治疗创伤后应激障碍（PTSD）之类的问题，效果很好。你现在对这类药物（不仅有娱乐用途，还有医疗、治疗用途）持更开放的态度，这挺有意思的。</p><p>Donald Trump<br>唐纳德・特朗普<br>(00:26:44) So we put out a statement today, we’re going to put out another one probably next week, be more specific, although I think it’s pretty specific and we’ll see how that all goes. That’s a referendum coming up in some states, but it’s coming up and we’ll see how it does. I will say it’s been very hard to beat it. You take a look at the numbers, it’s been very hard to beat it. So I think it’ll generally pass, but you want to do it in a safe way.<br>(00:26:44) 我们今天刚发表了一份声明，下周可能还会再发一份更具体的 —— 虽然现在这份已经挺具体了，看看后续情况吧。有些州会就这个问题举行公投，快开始了，看看结果如何。我得说，支持这类药物合法化的声音很难被反驳，从数据来看，反对的声音越来越弱，所以我觉得公投可能会通过，但关键还是要以安全的方式推进。</p><h2 id="Joe-Rogan"><a href="#Joe-Rogan" class="headerlink" title="Joe Rogan"></a>Joe Rogan</h2><h2 id="乔・罗根"><a href="#乔・罗根" class="headerlink" title="乔・罗根"></a>乔・罗根</h2><p>Lex Fridman</p><p>(00:27:14) Speaking of marijuana, let me ask you about my good friend, Joe Rogan. So you had a bit of tension with him. So when he said nice things about RFK Junior, I think you’ve said some not so nice things about Joe, and I think that was a bit unfair. And as a fan of Joe, I would love to see you do his podcast, because he is legit the greatest conversationalist in the world. So what’s the story behind the tension?<br>(00:27:14) 说到大麻，我想问问关于我的好朋友乔・罗根的事。你和他之间似乎有点矛盾。之前他称赞小罗伯特・肯尼迪（RFK Junior）时，我记得你对乔说过一些不太友好的话，我觉得那样有点不公平。作为乔的粉丝，我很希望看到你去参加他的播客节目，因为他确实是世界上最厉害的对话者。所以，你们之间的矛盾到底是怎么回事呢？</p><p>Donald Trump</p><p>(00:27:42) Well, I don’t think there was any tension. And I’ve always liked him, but I don’t know him. I only see him when I walk into the arena with Dana and I shake his hand. I see him there and I think he’s good at what he does, but I don’t know about doing his podcast. I guess I’d do it, but I haven’t been asked and I’m not asking them. I’m not asking anybody.<br>(00:27:42) 嗯，我觉得根本没什么矛盾。我一直挺欣赏他的，但我并不了解他。我只在和达纳走进竞技场的时候见过他，跟他握过手。我觉得他很擅长自己的工作，但至于要不要去他的播客节目，我还不确定。如果邀请我，我或许会去，但目前没人邀请我，我也不会主动去求他们 —— 我不会求任何人。</p><p>Lex Fridman</p><p>(00:28:09) It sounds like a challenging negotiation situation.<br>(00:28:09) 这听起来像是个棘手的谈判局面啊。</p><p>Donald Trump</p><p>(00:28:11) No, it’s not really a negotiation. And he’s sort of a liberal guy, I guess, from what I understand. But he likes Kennedy. This was before I found this out, before Kennedy came in with us. He’s going to be great. Bobby’s going to be great. But I like that he likes Kennedy. I do too. He is a different kind of a guy, but he’s got some great things going. And I think he’s going to be beyond politics. I think he could be quite influential and taking care of some situations that you probably would agree should be taken care of.<br>(00:28:11) 不，这算不上什么谈判。据我所知，他大概是个自由派人士。但他很欣赏肯尼迪，我是后来才知道这件事的，那时候肯尼迪还没和我们站在一起。肯尼迪会很出色的，鲍比（肯尼迪的昵称）会很厉害。不过我挺认可他欣赏肯尼迪这一点 —— 我也很欣赏肯尼迪。肯尼迪是个与众不同的人，而且他正在做一些很棒的事。我觉得他的影响力会超越政治领域，他或许能在一些你也认为需要解决的问题上发挥重要作用。</p><p>Lex Fridman</p><p>(00:28:45) The Joe Rogan post is an example. I would love to get your psychology about behind the tweets and the post on truth. Are you sometimes being intentionally provocative or are you just speaking your mind and are there times where you regret some of the truths you’ve posted?<br>(00:28:45) 乔・罗根的帖子就是个例子。我很想了解你发推文和在 “Truth” 平台发帖时的想法 —— 你有时候是故意挑衅，还是只是在说出自己的真实想法？有没有过后悔自己发过的帖子的时候？</p><p>Donald Trump</p><p>(00:29:04) Yeah, I do, but not that often, honestly. I do a lot of re-posting. The ones you get in trouble with are the re-posts, because you find down deep, they’re into some group that you’re not supposed to be re-posting. You don’t even know if those groups are good, bad or indifferent. But the re-posts are the ones that really get you in trouble. When you do your own words, it’s sort of easier. But the re-posts go very, and if you’re going to check every single little symbol, and I don’t know, it’s worked out pretty well for me. I mean, I tell you, truth is very powerful, truth. And it’s my platform and it’s been very powerful, very, very powerful. Goes everywhere. I call it my typewriter. That’s actually my typewriter.<br>(00:29:04) 有过，但说实话，不常后悔。我转发过很多内容，而惹麻烦的往往就是转发 —— 因为到最后你会发现，那些内容可能来自一些你本不该转发的团体。你甚至不知道那些团体是好是坏，或者无关紧要。但转发确实很容易让你陷入麻烦，相比之下，发自己写的内容就简单多了。不过转发的传播力很强，而且要是逐字逐句检查每个细节，也不太现实。但总的来说，这个平台对我来说效果很好。我跟你说，“Truth” 这个平台非常强大，它是我的平台，影响力大得很，真的非常大，内容一发出去就能传遍各地。我把它称作我的 “打字机”，它确实就像我的打字机一样。</p><p>Lex Fridman</p><p>(00:29:54) What are you doing usually when you’re composing a truth, are you chilling back on a couch?<br>(00:29:54) 你写 “Truth” 帖子的时候，通常在做什么？是躺在沙发上放松的时候写吗？</p><p>Donald Trump</p><p>(00:30:00) Couches, beds.<br>(00:30:00) 沙发上、床上都有可能。</p><p>Lex Fridman</p><p>(00:30:01) Okay.<br>(00:30:01) 好的。</p><p>Donald Trump</p><p>(00:30:02) A lot of different things. I mean-<br>(00:30:02) 很多时候是在不同的状态下写的。我是说 ——</p><p>Lex Fridman</p><p>(00:30:03) Late at night and just-<br>(00:30:03) 比如深夜的时候，就只是 ——</p><p>Donald Trump</p><p>(00:30:06) I’d like to do something late at night. I’m not a huge sleeper, but whenever I do, I’m past three o’clock, they criticize you the next day. Trump was up. True thing. Okay. Trump was true thing at three o’clock in the morning and there should be no problem with that. And then when you think about time zones, how do they know that you are in a time zone, like an Eastern Zone, but every time I do it after 2:00 or three o’clock, it’s like, “Why is he doing that?” But it’s gotten… Truth has become a very successful platform, and I like doing it and it goes everywhere. As soon as I do it, it goes everywhere.<br>(00:30:06) 我喜欢在深夜发内容。我不是很能睡的人，但每次过了凌晨三点发，第二天就会有人批评我，说 “特朗普又熬夜了”。但这有什么问题呢？而且考虑到时区，他们怎么知道我在哪个时区？比如我在东部时区，但每次我两点或三点以后发，总有人问 “他为什么要这么做？” 不过现在也无所谓了……“Truth” 已经成了一个非常成功的平台，我喜欢在上面发内容，而且内容一出去就能传遍各地，我一发，马上就扩散开了。</p><h2 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h2><h2 id="社会分裂"><a href="#社会分裂" class="headerlink" title="社会分裂"></a>社会分裂</h2><p>Lex Fridman</p><p>(00:30:54) The country seems more divided than ever. What can you do to help alleviate some of that division?<br>(00:30:54) 现在这个国家似乎比以往任何时候都更分裂。你能做些什么来缓解这种分裂呢？</p><p>Donald Trump</p><p>(00:30:59) Well, you can get rid of these two people. They’re terrible. They’re terrible. You don’t want to have them running this country. They’re not equipped to run it. Joe, just Joe, it’s a disaster. And Kamala, I think she’ll end up being worse than him. We’ll see. I think a lot’s now, the convention’s over with, and I see I’m leading and just about all the polls now. They had their little honeymoon period as they call it, and we’ll see how that all goes. Who knows?<br>(00:30:59) 嗯，首先得把那两个人换掉。他们太糟糕了，真的太糟糕了。你不会希望让他们来管理这个国家的，他们根本没能力胜任。乔（拜登）一个人就已经是场灾难了，而卡玛拉（哈里斯），我觉得她最后会比他更糟。咱们走着瞧。现在党代会已经结束了，我看几乎所有民调里我都领先。他们所谓的 “蜜月期” 已经过了，接下来会怎么样，谁也说不准。</p><p>Lex Fridman</p><p>(00:31:31) From my personal opinion, I think you are at your best when you’re talking about a positive vision of the future versus criticizing the other side.<br>(00:31:31) 以我个人的看法，我觉得你谈论对未来的积极愿景时，比批评对手时更有说服力。</p><p>Donald Trump</p><p>(00:31:40) Yeah, I think you have to criticize though. I think they’re nasty. They came up with a story that I looked down and I called soldiers that died in World War I, suckers and losers. Okay. Now number one, who would say that? Number two, who would say it to military people? Nobody. It was a made-up story. It was just a made-up story. And they like to repeat it over again. They know it was made up. I have 26 witnesses that nothing was said. They don’t want to hear about that. She lied on McDonald’s. She said that she worked at McDonald’s. It’s not a big lie, but it’s a big lie. So they just went and they checked and unless she can show something, they don’t talk about the presses are going to follow up with it, but I’ll keep hammering it. But she never worked at McDonald’s. It was just sort of a cool thing to say, “Hey, I worked at McDonald’s.”<br>(00:31:40) 话是这么说，但我觉得批评是必要的，因为他们太恶劣了。他们编造谣言说，我看不起一战中阵亡的士兵，还称他们是 “蠢货” 和 “失败者”。你想想，首先，谁会说这种话？其次，谁会对军人说这种话？根本没人会这么做。这完全是捏造的故事，他们就是故意反复传播。他们明明知道这是假的，我有 26 个证人可以证明我从没说过那种话，但他们根本不想听。还有卡玛拉，她在麦当劳工作的事上撒谎了 —— 她说自己曾在麦当劳工作过。这或许不算什么大谎言，但性质很恶劣。他们去查证过了，除非她能拿出证据，否则这事就不了了之了，但我会一直追究下去。她根本没在麦当劳工作过，她说那句话只是为了显得 “接地气”，就像在说 “嘿，我也在麦当劳打过工呢”。</p><p>(00:32:41) But one of the worst was two days ago. I went to Arlington at the request of people that lost their children. They’ll always be children to those people. You understand that. That’s not politically incorrect thing to say. The mother comes up, “I lost my child,” but the child is a soldier. And lost the child, because of Biden and because of Kamala, just as though they had the gun in their hand, because it was so badly handled. It should have been done at Bagram, which is the big air base. It shouldn’t have been done at a small little airport right in the middle of town where people stormed it. It was a true disaster and they asked me if I’d come and celebrate with them. Three years. Three years. They died three years ago.<br>(00:32:41) 但最过分的是两天前的事。我应一些失去孩子的家庭的邀请去了阿灵顿国家公墓。对这些家庭来说，他们的孩子永远是孩子，你能理解吧？这么说并不是政治不正确。有位母亲过来对我说 “我失去了我的孩子”，而她的孩子是一名士兵。这些孩子之所以牺牲，都是因为拜登和卡玛拉 —— 就像他们亲手扣动了扳机一样，因为他们把事情办得一塌糊涂。撤军本应该在巴格拉姆那个大型空军基地进行，而不是在市中心的一个小机场，结果那里遭到了袭击，简直是一场灾难。这些家庭邀请我去参加纪念活动，因为他们的孩子已经牺牲三年了，整整三年啊。</p><p>(00:33:37) And I said, “I’m going to try.” I got to know them, because I brought them here, actually. One night they almost all came here and they said, “I wonder if Trump will actually come and see us?” I heard they were here. I came. We stayed for four hours listening to music up on a deck, right upstairs. Beautiful. And they were great people. So they called me over the last couple of weeks and they said, “We’re going to have a reunion, our three-year reunion.”<br>(00:33:37) 我对他们说 “我会尽量去”。其实我早就认识这些家庭了，因为是我把他们邀请到这里来的。有天晚上他们几乎都来了，还在议论 “不知道特朗普会不会真的来见我们”。我听说他们来了，就过去和他们见面。我们在楼上的露台上听了四个小时的音乐，那场面很温馨，他们都是很好的人。所以过去几周他们给我打电话，说 “我们要办一个团聚活动，纪念孩子牺牲三周年”。</p><p>Donald Trump</p><p>(00:34:00) … couple of weeks and they said, “We’re going to have a reunion, our three year, would you be able to come?” And it was very hard for me to do it logistically, but I said, “I’ll get it done.” And I got there and we had a beautiful time. I didn’t run away. I didn’t just walk in, shake hands and walk out like people do. And I wasn’t looking at my watch like Joe Biden does. And it was amazing. I did it for them. I didn’t do it for me. I don’t need the publicity. I get more publicity probably than anybody. You would know that better than me, but I think maybe more than anybody, maybe more than anybody that’s ever lived, I don’t know. But I don’t think anyone could have anymore. Every time you turn on the television, there’s like nine different stories all on different topics in the world.<br>(00:34:00) …… 几周前他们打电话说 “我们要办三周年团聚活动，你能来吗？” 从行程安排上来说，我去参加其实很困难，但我还是说 “我会想办法去”。最后我去了，和他们度过了一段很愉快的时光。我没有敷衍了事，没有像有些人那样进去握个手就走，也没有像乔・拜登那样一直看手表。那感觉很棒，我是为他们去的，不是为了自己。我不需要靠这个博眼球，我的曝光度可能比任何人都高。这一点你或许比我更清楚，我甚至觉得我的曝光度可能比有史以来任何人都高 —— 我也不确定，但肯定没人能比我更高了。你每次打开电视，几乎都能看到九个不同的新闻，全是关于我的各种话题。</p><p>(00:34:48) As an example, you interview a lot of people, good people, successful people. Let’s see how you do with this interview versus them. I can tell you right now you’re going to get the highest numbers you’ve ever had by sometimes a factor of 10. But when a Gold Star Family asks me to come in and spend time with them, and then they said, sir… We did a ceremony. And then we went down to the graves, which was quite a distance away. They said, “Sir, would you come to the grave?” And then they said, when we were there… It’s very sad actually because these people shouldn’t have died. They shouldn’t have died. They died because of Biden and because of Kamala, they died because just like if they pulled the trigger. Now, I don’t know if that’s controversial to say, but I don’t think it is.<br>(00:34:48) 举个例子，你采访过很多人，都是优秀的、成功的人。咱们可以看看这次采访和你之前的采访相比，数据会怎么样。我现在就能告诉你，这次采访的观看量会是你有史以来最高的，有时候甚至能达到十倍。但当金星家庭（美国对牺牲军人家庭的称呼）邀请我去陪伴他们时，我还是去了。我们举行了纪念仪式，然后去了墓地 —— 离得还挺远。他们说 “先生，您能去墓前看看吗？” 我们到了那里之后…… 其实真的很令人难过，因为这些人本不该死的。他们不该死，他们的牺牲都是拜拜登和卡玛拉所赐，就像他们亲手杀了这些士兵一样。我不知道这么说会不会有争议，但我觉得没有。</p><p>(00:35:47) Afghanistan was the most incompetently run operation I think I’ve ever seen. Military or otherwise, they’re incompetent. But the families asked me if I’d go, I did go. Then the families said, “Could we have a picture at the tombstone of my son?” And we did. Son or daughter. There was a daughter too. And I took numerous pictures with the families. I don’t know of anybody else that was in the pictures, but they were mostly families, I guess. That was it. And then I left. I spent a lot of time with them. Then I left and I get home that night and I get a call that the Biden administration with Kamala is accusing me of using Arlington for publicity. I was in the news. Just the opposite. Just the opposite. And actually, did you see, it just came out? The families actually put out a very strong statement defending me. They said, “We asked them to be there.”<br>(00:35:47) 阿富汗撤军是我见过的最无能的行动，不管是从军事角度还是其他角度看，他们（拜登政府）都太无能了。但既然那些家庭邀请我，我就去了。之后他们说 “能和我儿子的墓碑合张影吗？” 我就和他们拍了照 —— 有儿子也有女儿，其中还有一个牺牲的女兵。我和这些家庭拍了很多照片，照片里应该只有他们家人，我猜是这样。之后我就离开了，我陪了他们很久。结果那天晚上我回到家，就接到电话说，拜登政府和卡玛拉在指责我利用阿灵顿公墓博眼球。这简直是颠倒黑白，完全是反过来的。而且你看到了吗？刚出的消息 —— 那些家庭其实发了一份措辞强烈的声明为我辩护，他们说 “是我们邀请他去的”。</p><p>Lex Fridman</p><p>(00:36:44) Well, politicians and the media can play those games. And you’re right, your name gets a lot of views. You’re probably legit the most famous person in the world. But on the previous thing, in the spirit of unity, you used to be a Democrat. Setting the politicians aside, what do you respect most about people who lean left, who are Democrats themselves or of that persuasion, progressives liberals, and so on?<br>(00:36:44) 唉，政客和媒体就是会搞这种把戏。而且你说得对，你的名字自带很高的关注度，你或许真的是世界上最有名的人。但回到之前的话题，从团结的角度来说，你以前是民主党人。抛开政客不谈，对于那些左倾人士、民主党人，或者持进步主义、自由主义立场的人，你最尊重他们哪一点呢？</p><p>Donald Trump</p><p>(00:37:15) Well, look, I respect the fact that everybody’s in there, and to a certain extent, life is what you do while you’re waiting to die, so you might as well do a good job. I think in terms of what’s happening now, I think we have a chance to save the country. This country’s going down and I called it with Venezuela, I called it with a lot of different countries. And this country’s going down if we don’t win this election, the election coming up on November 5th is the most important election this country’s ever had because if we don’t win it, I don’t know that there’ll be another election and it’s going to be a communist country or close.<br>(00:37:15) 嗯，是这样，我尊重每个人都有自己的立场这一点。而且在某种程度上，人生就是在等待死亡的过程中做些事，所以不如把事做好。但就目前的情况来看，我认为我们还有机会拯救这个国家。这个国家正在走下坡路，我之前说过委内瑞拉会这样，也说过很多其他国家会这样，现在美国也一样。如果我们赢不了这次选举，这个国家就完了。11 月 5 日的这次选举是美国有史以来最重要的一次选举，因为如果我们输了，我不知道还会不会有下一次选举，这个国家可能会变成一个共产主义国家，或者接近共产主义国家。</p><h2 id="Communism-and-fascism"><a href="#Communism-and-fascism" class="headerlink" title="Communism and fascism"></a>Communism and fascism</h2><h2 id="共产主义与法西斯主义"><a href="#共产主义与法西斯主义" class="headerlink" title="共产主义与法西斯主义"></a>共产主义与法西斯主义</h2><p>Lex Fridman</p><p>(00:38:01) There’s a lot of people listening to this, myself included, that doesn’t think that Kamala is a communist.<br>(00:38:01) 现在有很多人在听这次采访，包括我在内，都不认为卡玛拉是共产主义者。</p><p>Donald Trump</p><p>(00:38:09) Well, she’s a Marxist.<br>(00:38:09) 好吧，那她是个马克思主义者。</p><p>Lex Fridman</p><p>(00:38:11) Her father’s a Marxist.<br>(00:38:11) 她父亲是马克思主义者。</p><p>Donald Trump</p><p>(00:38:12) That’s right.<br>(00:38:12) 没错。</p><p>Lex Fridman</p><p>(00:38:13) And she’s advocating-<br>(00:38:13) 而且她在倡导 ——</p><p>Donald Trump</p><p>(00:38:13) That’s a little unusual.<br>(00:38:13) 这就有点不寻常了。</p><p>Lex Fridman</p><p>(00:38:15) She’s advocating for some policies that are towards the direction of democratic socialism, let’s say. But there’s a lot of people that know the way government works and they say, well, none of those policies are going to actually come to reality. It’s just being used during the campaign to… Groceries are too expensive. We need them cheaper, so let’s talk about price controls. And that’s never going to come to reality.<br>(00:38:15) 这么说吧，她在倡导一些朝着民主社会主义方向的政策。但很多了解政府运作方式的人都说，这些政策根本不可能实现，只是竞选期间用来拉选票的 —— 比如食品价格太贵，大家希望降价，所以就提价格管制，但这根本不可能实现。</p><p>Donald Trump</p><p>(00:38:39) It could come to reality. Look, she came out with price control. It’s been tried like 121 different times at different places over the years, and it’s never worked once. It leads to communism, it leads to socialism, it leads to having no food on the shelves, and it leads to tremendous inflation.<br>(00:38:39) 它有可能实现。你看，她都明确提出价格管制了。这么多年来，世界各地尝试过 121 次价格管制，没有一次成功的。这会导致共产主义，导致社会主义，会让货架上空空如也，还会引发严重的通货膨胀。</p><p>Lex Fridman</p><p>(00:39:00) It’s just-<br>(00:39:00) 只是 ——</p><p>Donald Trump</p><p>(00:39:01) A bad idea.<br>(00:39:01) 这是个糟糕的主意。</p><p>Lex Fridman</p><p>(00:39:02) … whenever we use terms like communism for her, and I don’t know if you know this, but some people call you a fascist.<br>(00:39:02) …… 但当我们用 “共产主义者” 这样的词形容她时，不知道你有没有意识到，也有人称你为 “法西斯主义者”。</p><p>Donald Trump</p><p>(00:39:08) Yeah, they do, so I figure it’s all right to call them a communist. They call me a lot worse than I call them.<br>(00:39:08) 是啊，他们是这么叫我，所以我觉得我称他们为共产主义者也没什么问题。他们对我的称呼比我对他们的难听多了。</p><p>Lex Fridman</p><p>(00:39:14) They do indeed. It is just sometimes-<br>(00:39:14) 确实是这样。只是有时候 ——</p><p>Donald Trump</p><p>(00:39:16) It’s interesting though, they’ll call me something that’s terrible and then I’ll hit them back and they’ll say, “Isn’t it terrible what Trump said?” I said, “Well, wait a minute. They just called me…” I believe you have to fight fire with fire. I believe they’re very evil people. These are evil people. We have an enemy from the outside and we have an enemy from within. And in my opinion, the enemy from within are radical left lunatics. And I think you have to fight back.<br>(00:39:16) 但有意思的是，他们先用很难听的词骂我，我反击之后，他们又说 “特朗普说的话多难听啊”。我就会说 “等等，是他们先这么骂我的……” 我认为必须以牙还牙。他们是很邪恶的人，真的很邪恶。我们有外部敌人，也有内部敌人，在我看来，内部敌人就是那些激进的左翼疯子，必须反击他们。</p><p>Lex Fridman</p><p>(00:39:44) Whenever there’s a lot of fighting fire with fire, it’s too easy to forget that there is a middle of America that’s moderate and sees the good in both sides and just likes one side more than the other in terms of policies. Like I said, there’s a lot of people that like your policies, that like your skill in being able to negotiate and end wars and they don’t see the impending destruction of America.<br>(00:39:44) 但当大家都在以牙还牙的时候，很容易忘记美国还有很多温和的中间派 —— 他们能看到两派的优点，只是在政策层面更倾向于其中一方。就像我之前说的，很多人喜欢你的政策，欣赏你谈判和结束战争的能力，而且他们并不认为美国正面临即将到来的毁灭。</p><p>Donald Trump</p><p>(00:40:15) We had no wars when I was president. That’s a big thing. Not since 78 years as that happened, but we had no wars When I was president, we defeated ISIS, but that was a war that was started that we weren’t anywhere near defeating. But think of it, I had no wars and Viktor Orban, the prime minister of Hungary said, “The world has to have Trump back because everybody was afraid of Trump.” Now that’s what he said, so I’m not using that term, but I think they respected me. But he said, “China was afraid. Russia was afraid. Everybody was afraid.” And I don’t care what word they use, it probably that’s even a better word if you want to know the truth, but let’s use the word respect.<br>(00:40:15) 我当总统的时候，美国没有发动过战争，这是很重要的一点。78 年来都没有过这样的情况。而且我们还击败了 ISIS—— 那是一场早就开始的战争，之前根本没人能打赢。你想想，我任内没有发动战争，匈牙利总理欧尔班・维克托也说过 “世界需要特朗普回来，因为所有人都怕特朗普”。这是他说的，我不会用 “怕” 这个词，但我觉得他们是尊重我。不过他确实说 “中国怕，俄罗斯怕，所有人都怕”。说实话，不管他们用什么词，“怕” 可能比 “尊重” 更贴切，但咱们还是用 “尊重” 吧。</p><p>(00:40:56) They had respect for me. They had respect for the country. I ended the Nord Stream 2 pipeline, the Russian pipeline. Nobody else could have done that. I ended it. It was done. Then Biden comes in and he approved it, so we are defending Germany in these other countries for peanuts compared to what it’s worth, and they’re paying the person we’re defending them against billions and billions of dollars for energy. I said, “How does that work?” And we had it out with them and it worked out good. And they paid hundreds of billions of dollars. Or you wouldn’t even have a NATO right now. You wouldn’t have NATO if it wasn’t for me.<br>(00:40:56) 他们尊重我，也尊重美国这个国家。是我叫停了 “北溪 2 号” 天然气管道项目，就是那条俄罗斯的管道，没人能做到这一点，但我做到了。结果拜登一上台就批准了这个项目，现在我们在保护德国等国家，而他们给我们的军费却少得可怜，反而给我们要保护他们免受其害的俄罗斯支付数十亿美元的能源费用。我就想问 “这合理吗？” 我之前和他们摊牌谈过，效果很好，他们后来交了数千亿美元的军费。而且说实在的，现在北约能存在，全靠我，没有我就没有北约了。</p><h2 id="Power"><a href="#Power" class="headerlink" title="Power"></a>Power</h2><h2 id="权力"><a href="#权力" class="headerlink" title="权力"></a>权力</h2><p>Lex Fridman</p><p>(00:41:36) As the leader of the United States, you were the most powerful man in the world. As you mentioned, not only the most famous, but the most powerful. And if you become leader again, you’ll have unprecedented power. Just on your own personal psychology, what does that power do to you? Is there any threat of it corrupting how you see the world?<br>(00:41:36) 作为美国总统，你曾是世界上最有权势的人。正如你所说，你不仅最有名，也最有权势。如果能再次当选，你将拥有前所未有的权力。从你的个人心理层面来说，这种权力会对你产生什么影响？它是否存在扭曲你世界观的风险？</p><p>Donald Trump</p><p>(00:41:56) No, I don’t think so. Look, I’ve been there for four years. I could have done a big number on Hillary Clinton. I thought it looked terrible to take the president’s wife and put her in prison. She’s so lucky I didn’t do anything. She’s so lucky. Hillary is a lucky woman because I had a lot of people pushing me too. They wanted to see something, but… I could have done something very bad. I thought it looked so bad. Think of it, you have the President of the United States, and you also had Secretary of State, she was, but you’re going to put the president’s wife in prison. And yet when I got out, they have all these hoaxes.<br>(00:41:56) 不，我觉得不会。你看，我已经担任过四年总统了。我本可以对希拉里・克林顿采取强硬措施，但我认为把前总统的妻子送进监狱，样子太难看了。她很幸运，我什么都没做，真的太幸运了。希拉里是个幸运的女人，当时还有很多人催我对她采取行动，他们想看到一些结果，但我还是没做。我本可以采取一些很严厉的手段，但那样实在太不像话了。你想想，她曾是国务卿，而我作为美国总统，把前总统的妻子送进监狱，这像话吗？可结果呢，我卸任后，他们却用各种骗局来针对我。</p><p>(00:42:37) They’re all hoaxes, but they have all these dishonest hoaxes just like they did in the past with, Russia, Russia, Russia. That was a hoax. The 51 different agencies or agents, that was a hoax. The whole thing was a hoax. There were so many hoaxes and scams. But I didn’t want to put her in jail, and I didn’t. And I explained it to people. They say, “Lock her up. Lock her up.” We won. I said, “We don’t want to put her in jail. We want to bring the country together. I want to bring the country together. You don’t bring the country together by putting her in jail.” But then when I got out, they went to work on me. It’s amazing. And they suffer from massive Trump derangement syndrome, TDS, and I don’t know if it’s curable from their standpoint.<br>(00:42:37) 那些全是骗局，全是不诚实的鬼把戏，就像之前的 “通俄门” 一样 —— 那就是个骗局。还有所谓 51 个机构或特工的指控，也全是骗局，整件事就是一场骗局。类似的骗局和阴谋还有很多。但我当时不想把她送进监狱，也确实没那么做。我跟大家解释过，当时人们都喊 “把她关起来！把她关起来！”，我们赢了选举，可我说 “我们不该把她关起来，我们要团结国家，我想让国家团结起来。把她关起来根本不利于国家团结”。结果我一卸任，他们就开始针对我，真是不可思议。他们都得了严重的 “特朗普失调症”（TDS），而且在我看来，这种病对他们来说可能治不好了。</p><h2 id="UFOs-JFK"><a href="#UFOs-JFK" class="headerlink" title="UFOs &amp; JFK"></a>UFOs &amp; JFK</h2><h2 id="不明飞行物（UFO）与肯尼迪遇刺案"><a href="#不明飞行物（UFO）与肯尼迪遇刺案" class="headerlink" title="不明飞行物（UFO）与肯尼迪遇刺案"></a>不明飞行物（UFO）与肯尼迪遇刺案</h2><p>Lex Fridman</p><p>(00:43:36) A lot of people are very interested in the footage of UFOs. The Pentagon has released a few videos, and there’s been anecdotal reports from fighter pilots, so a lot of people want to know, will you help push the Pentagon to release more footage, which a lot of people claim is available.<br>(00:43:36) 很多人对不明飞行物（UFO）的影像资料非常感兴趣。五角大楼已经公布了几段视频，还有战斗机飞行员的轶事报告，所以很多人想知道，你是否会推动五角大楼公布更多据称已存在的影像资料？</p><p>Donald Trump</p><p>(00:43:57) Oh yeah, sure, I’ll do that. I would do that. I’d love to do that. I have to do that. But they also are pushing me on Kennedy, and I did release a lot, but I had people come to me and beg me not to do it. But I’ll be doing that very early on. Yeah, no. But I would do that.<br>(00:43:57) 哦，当然，我会的。我愿意这么做，也很想这么做，我必须这么做。不过还有人催我公布肯尼迪遇刺案的相关资料，我之前已经公布了很多，但有人来求我别再公布了。不过我很快还会继续公布的。总之，关于 UFO 影像，我肯定会推动公布的。</p><h2 id="Jeffrey-Epstein"><a href="#Jeffrey-Epstein" class="headerlink" title="Jeffrey Epstein"></a>Jeffrey Epstein</h2><h2 id="杰弗里・爱泼斯坦"><a href="#杰弗里・爱泼斯坦" class="headerlink" title="杰弗里・爱泼斯坦"></a>杰弗里・爱泼斯坦</h2><p>Lex Fridman</p><p>(00:44:16) There’s a moment where you had some hesitation about Epstein releasing some of the documents on Epstein. Why the hesitation?<br>(00:44:16) 之前在公布爱泼斯坦（Jeffrey Epstein）相关文件时，你似乎有些犹豫。为什么会犹豫呢？</p><p>Donald Trump</p><p>(00:44:23) I don’t think… I’m not involved. I never went to his island, fortunately, but a lot of people did.<br>(00:44:23) 我觉得…… 我和这事没关系。幸运的是，我从没去过他的那个岛，但很多人去过。</p><p>Lex Fridman</p><p>(00:44:33) Why do you think so many smart, powerful people allowed him to get so close?<br>(00:44:33) 你觉得为什么那么多聪明、有权势的人会让他如此接近自己？</p><p>Donald Trump</p><p>(00:44:42) He was a good salesman. He was a hailing, hearty type of guy. He had some nice assets that he’d throw around like islands, but a lot of big people went to that island. But fortunately, I was not one of them.<br>(00:44:42) 他很会 “推销” 自己，是个很会活跃气氛、显得热情大方的人。他有不少像样的资产，比如那个岛，还总拿这些东西炫耀。确实有很多大人物去过那个岛，但幸运的是，我不在其中。</p><p>Lex Fridman</p><p>(00:44:59) It’s just very strange for a lot of people, that the list of clients that went to the island has not been made public.<br>(00:44:59) 对很多人来说，去过那个岛的客户名单至今没有公开，这实在很奇怪。</p><p>Donald Trump</p><p>(00:45:08) It’s very interesting, isn’t it? It probably will be, by the way, probably.<br>(00:45:08) 确实很有意思，是吧？不过我觉得这份名单最终可能会公布的，很可能会。</p><p>Lex Fridman</p><p>(00:45:13) If you’re able to, you’ll be-<br>(00:45:13) 如果有能力的话，你会 ——</p><p>Donald Trump</p><p>(00:45:15) Yeah, I’d certainly take a look at it. Now, Kennedy’s interesting because it’s so many years ago. They do that for danger too, because it endangers certain people, et cetera, et cetera, so Kennedy is very different from the Epstein thing but I’d be inclined to do the Epstein. I’d have no problem with it.<br>(00:45:15) 对，我肯定会关注这件事。肯尼迪案之所以特殊，是因为已经过去很多年了，而且公布相关资料可能会有风险，比如危及某些人等等，所以肯尼迪案和爱泼斯坦案不太一样。但对于爱泼斯坦案的文件，我倾向于推动公布，这对我来说没什么问题。</p><p>Lex Fridman</p><p>(00:45:36) That’s great to hear. What gives you strength when you’re getting attacked? You’re one of the most attacked people in the world.<br>(00:45:36) 很高兴听到你这么说。你是世界上被攻击最多的人之一，当受到攻击时，是什么给了你力量？</p><p>Donald Trump</p><p>(00:45:43) I think you can’t care that much. I know people that care so much about everything, like what people are saying, you can’t care too much because you end up choking.<br>(00:45:43) 我觉得不能太在意别人的看法。我认识一些人，对所有事都太敏感，别人说什么都往心里去，这样是不行的，只会让自己束手束脚。</p><h2 id="Mortality-and-religion"><a href="#Mortality-and-religion" class="headerlink" title="Mortality and religion"></a>Mortality and religion</h2><h2 id="死亡与宗教"><a href="#死亡与宗教" class="headerlink" title="死亡与宗教"></a>死亡与宗教</h2><p>Lex Fridman</p><p>(00:45:55) One of the tragic things about life is that it ends. How often do you think about your death? Are you afraid of it?<br>(00:45:55) 生命的悲剧之一在于它终有尽头。你多久会想一次自己的死亡？你害怕死亡吗？</p><p>Donald Trump</p><p>(00:46:02) I have a friend who’s very, very successful, and he’s in his 80s, mid 80s, and he asked me that exact same question. I turned it around and I said, “Well, what about you?” He said, “I think about it every minute of every day.” And then a week later, he called me to tell me something. And he starts off the conversation by going, “Tick tock, tick tock.” This is dark person in a sense, but it is what it is. If you’re religious, you have I think a better feeling toward it. You’re supposed to go to heaven, ideally, not hell, but you’re supposed to go to heaven if you’re good. I think our country’s missing a lot of religion. I think it really was a much better place with religion. It was almost a guide. To a certain extent it was a guide. You want to be good to people. Without religion there are no guardrails. I’d love to see us get back to religion, more religion in this country.<br>(00:46:02) 我有个非常成功的朋友，已经 80 多岁了，快 85 岁了，他也问过我完全一样的问题。我反问他 “那你呢？”，他说 “我每分钟都在想这件事”。一周后他给我打电话，一开口就说 “滴答，滴答（指时间流逝）”。从某种角度来说，他是个比较悲观的人，但事实就是这样。我觉得有宗教信仰的人对死亡的心态会更好一些 —— 理想情况下，好人应该上天堂，而不是下地狱。我认为我们国家现在太缺乏宗教信仰了，有宗教信仰的时候，这个国家要美好得多。宗教几乎就像一个指引，在某种程度上确实能指引人向善，让人愿意对别人好。没有宗教，就没有了道德约束。我希望我们能重拾宗教信仰，让这个国家有更多的宗教氛围。</p><p>Lex Fridman</p><p>(00:47:09) Well, Mr. President, thank you for putting yourself out there, and thank you for talking today.<br>(00:47:09) 总统先生，感谢你愿意坦诚交流，也感谢你今天抽出时间对话。</p><p>Donald Trump</p><p>(00:47:13) Look, I love the country. I want to see the country be great, and we have a real chance at doing it, but it’s our last chance and I appreciate it very much.<br>(00:47:13) 是这样，我热爱这个国家，我希望看到它变得伟大，我们现在确实有机会做到，但这可能是我们最后的机会了。非常感谢你的邀请。</p><p>Lex Fridman</p><p>(00:47:22) Thank you.<br>(00:47:22) 谢谢。</p><p>Donald Trump</p><p>(00:47:23) Thank you.<br>(00:47:23) 谢谢。</p><h2 id="Lex-AMA"><a href="#Lex-AMA" class="headerlink" title="Lex AMA"></a>Lex AMA</h2><h2 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h2><p>Lex Fridman</p><p>(00:47:25) Thanks for listening to this conversation with Donald Trump. To support this podcast, please check out our sponsors in the description. And now, as I’ve started doing here at the end of some episodes, let me make a few comments and answer a few questions. If you would like to submit questions, including in audio and video form, go to <a href="https://lexfridman.com/ama">lexfridman.com&#x2F;ama</a> or get in touch with me for whatever other reason at <a href="https://lexfridman.com/contact">lexfridman.com&#x2F;contact</a>. I usually do this on a T-shirt, but I figured for this episode, I’ll keep my suit and tie on, so first, this might be a good moment to look back a bit. I’ve been doing this podcast for over six years, and I first and foremost have to say thank you. I’m truly grateful for the support and the love I’ve gotten along the way. It’s been, I would say, the most unlikely journey.<br>(00:47:25) 感谢收听本期与唐纳德・特朗普的对话。若想支持本播客，请查看简介中的赞助商信息。现在，就像我在部分节目结尾开始做的那样，我会做一些评论并回答几个问题。如果大家想提交问题（包括音频和视频形式），可以访问<a href="https://lexfridman.com/ama">lexfridman.com&#x2F;ama</a>；若有其他事宜想联系我，可访问<a href="https://lexfridman.com/contact">lexfridman.com&#x2F;contact</a>。通常做这段环节时我会穿 T 恤，但本期我决定还是穿着西装领带。首先，或许现在是个回顾的好时机 —— 我做这个播客已经六年多了，首先必须说声谢谢。非常感谢大家一路走来的支持与喜爱，这段旅程真的充满了意外与惊喜。</p><p>(00:48:16) And on most days, I barely feel like I know what I’m doing. But I wanted to talk a bit about how I approach these conversations. Now, each conversation is its own unique puzzle, so I can’t speak generally to how I approach these, but here it may be useful to describe how I approach conversations with world leaders, of which I hope to have many more and do a better job every time. I read a lot of history and I admire the historian perspective. As an example, I admire William Shirer, the author of many books on Hitler, including The Rise and Fall of the Third Reich. He was there and lived through it and covered it objectively to the degree that one could. Academic historians, by the way, criticize him for being a poor historian because he editorialized a little too much. I think those same folks criticized Dan Carlin and his Hardcore History podcast.<br>(00:48:16) 大多数时候，我都觉得自己好像并不知道在做什么。但我想聊聊我是如何准备这类对话的。每一次对话都是独一无二的难题，所以我无法一概而论，但或许可以说说我如何与世界领导人对话 —— 我希望能有更多这样的对话，并且每次都能做得更好。我读了很多历史书，也很欣赏历史学家的视角。比如，我很敬佩威廉・夏伊勒（William Shirer），他写了很多关于希特勒的书，包括《第三帝国的兴亡》。他亲身经历过那个时代，并且尽可能客观地记录了那段历史。不过，学术派历史学家批评他算不上优秀的历史学家，因为他加入了太多个人评论。我想，这些人也批评过丹・卡林（Dan Carlin）和他的《硬核历史》播客。</p><p>(00:49:15) I respect their criticism, but I fundamentally disagree, so in these conversations with world leaders, I try to put on my historian hat. I think in the realm of truth and public discourse, there’s a spectrum between the ephemeral and the eternal. The outraged mob and clickbait journalists are often focused on the ephemeral, the current thing, the current viral shitstormer of mockery and derision. But when the battle of the day is done, most of it will be forgotten. A few true ideas will remain, and those the historian hopes to capture. Now, this is much easier said than done. It’s not just about having the right ideals and the integrity to stick by them. It’s not even just about having the actual skill of talking, which I still think I suck at, but let’s say it’s a work in progress. You also have to make the scheduling work and set up the entirety of the environment in a way that is conducive to such a conversation.<br>(00:49:15) 我尊重他们的批评，但从根本上我并不认同。所以在与世界领导人对话时，我会试着以历史学家的视角去切入。我认为在真相与公共讨论的领域，存在 “短暂” 与 “永恒” 两个极端。愤怒的民众和标题党记者往往关注短暂的热点 —— 当下的事件、当下 viral 的嘲讽与挖苦。但当当天的争议过去后，这些大多会被遗忘，只有少数真实的观点会留存下来，而历史学家希望捕捉的正是这些。当然，说起来容易做起来难。这不仅需要正确的理念和坚守理念的正直，甚至不仅需要对话的技巧（我至今仍觉得自己在这方面很糟糕，只能说还在进步中），还需要协调时间安排，并营造一个有利于这类对话的整体环境。</p><p>(00:50:19) This is hard, really hard with political and business leaders. They are usually super busy and in some cases super nervous because, well, they’ve been screwed over so many times with clickbait got you journalism, so to convince them and their team to talk for two, three, four, five hours is hard. And I do think a good conversation requires that kind of duration. And I’ve been thinking a lot about why. I don’t think it’s just about needing the actual time of three hours to cover all the content. I think the longer form with a hypothetical skilled conversationalist, relaxes things and allows people to go on tangents and to banter about the details because I-<br>(00:50:19) 这很难，尤其是和政界、商界领导人对话时，难度极大。他们通常非常忙，有时还会非常紧张 —— 因为他们已经被标题党新闻坑过太多次了。所以要说服他们和团队花两、三、四、五个小时对话，难度很大。但我确实认为，一场好的对话需要这样的时长。我也一直在思考原因：这不仅仅是因为需要三小时来覆盖所有内容，更因为在有经验的对话者引导下，长时间的交流能让人放松，允许人们偏离主线、聊聊细节，因为我 ——</p><p>Lex Fridman</p><p>(00:51:00) … agents and to banter about the details, because I think it’s in the details that the beautiful complexity of the person is brought to light. Anyway, I look forward to talking to more world leaders and doing a better job every time as I said. I would love to do interviews with Kamala Harris and some other political figures on the left and right, including Tim Walz, AOC, Bernie, Barack Obama, Bill and Hillary. And on the right, J.D. Vance, Vivek, George W. and so on. And on the topic of politics, let me say, as an immigrant, I love this country, the United States of America. I do believe it is the greatest nation on earth, and I’m grateful for the people on the left and the right who step into the arena of politics to fight for this country that I do believe they all love as well.<br>(00:51:00) …… 聊聊细节，因为我认为正是在这些细节中，一个人美好而复杂的特质才能被展现出来。总之，正如我所说，我期待能与更多世界领导人对话，并且每次都能做得更好。我很想采访卡玛拉・哈里斯，以及其他左右派政治人物 —— 左翼包括蒂姆・瓦尔兹（Tim Walz）、亚历山大・奥卡西奥 - 科尔特斯（AOC）、伯尼・桑德斯（Bernie）、巴拉克・奥巴马、比尔・克林顿和希拉里・克林顿；右翼包括 J・D・万斯（J.D. Vance）、维韦克・拉马斯瓦米（Vivek）、乔治・W・布什等。说到政治，作为一名移民，我想表达：我爱美国这个国家，我坚信它是世界上最伟大的国家。我也很感谢那些无论左翼还是右翼、愿意踏入政坛为这个国家奋斗的人 —— 我相信他们也都热爱这个国家。</p><p>(00:51:52) I have reached out to Kamala Harris, but not many of the others. I probably should do a better job with that, but I’ve been doing most of this myself, all the reach out, scheduling, research prep, recording and so on. And on top of that, I very much have been suffering from imposter syndrome with a voice in my head constantly pointing out when I’m doing a shitty job. Plus a few folks graciously remind me on the internet, the very same sentiment of this aforementioned voice. All of this, while I have the option of just hiding away at MIT, programming robots and doing some cool AI research with a few grad students, or maybe joining an AI company or maybe starting my own, all these options make me truly happy. But like I said, on most days I barely know what I’m doing, so who knows what the future holds. Most importantly, I’m forever grateful for all of you for your patience and your support throughout this rollercoaster of the life I’ve been on. I love you all.<br>(00:51:52) 我已经联系过卡玛拉・哈里斯，但还没联系过其他大多数人。或许我应该在这方面做得更好，但目前大部分工作都是我自己做的 —— 联系嘉宾、安排时间、准备研究资料、录制等等。除此之外，我还深受 “冒名顶替综合征”（imposter syndrome）困扰，脑子里总有人在说 “你做得真差”。而且网上也有人 “好心” 提醒我，说的话和我脑子里的声音如出一辙。其实我本可以选择躲在麻省理工学院（MIT）里，编程机器人、和研究生一起做有趣的人工智能研究，或者加入一家 AI 公司，甚至自己创业 —— 这些选择都能让我真正开心。但就像我说的，大多数时候我都不知道自己在做什么，所以未来会怎样谁也说不准。最重要的是，感谢大家在我这段跌宕起伏的人生旅程中给予我的耐心和支持，我爱你们所有人。</p><p>(00:52:51) Okay, now let me go on to some of the questions that people had. I was asked by a few people to comment on Pavel Durov’s arrest and on X being banned in Brazil. Let me first briefly comment on the Durov arrest. Basic facts, Pavel Durov is CEO of Telegram, which is a messenger app that has end-to-end encryption mode. It’s not on by default, and most people don’t use the end-to-end encryption, but some do. Pavel was arrested in France on a long list of charges related to “criminal activity” carried out on the Telegram platform, and for “providing unlicensed cryptology services.” I think Telegram is indeed used for criminal activity by a small minority of its users, for example, by terrorist groups to communicate. And I think we all agree that terrorism is bad.<br>(00:52:51) 好的，现在来回答大家的一些问题。有人让我评论帕维尔・杜罗夫（Pavel Durov）被捕和 X（原 Twitter）在巴西被禁的事。先简单说说杜罗夫被捕事件：基本情况是，帕维尔・杜罗夫是即时通讯应用 Telegram 的 CEO，该应用有端到端加密模式 —— 默认不开启，大多数人也不用，但确实有人使用。杜罗夫在法国被捕，指控罪名很多，包括 “Telegram 平台上存在犯罪活动” 以及 “提供未经授权的加密服务”。我认为，Telegram 确实被少数用户用于犯罪活动，比如恐怖组织用它通信，而我们都认同恐怖主义是邪恶的。</p><p>(00:53:47) But here’s the problem. As the old saying goes, one man’s terrorist is another man’s freedom fighter. And there are many cases in which the world unilaterally agrees who the terrorists are, but there are other cases when governments, especially authoritarian inclined governments, tend to propagandize and just call whoever’s in the opposition, whoever opposes them, terrorists. There is some room for nuance here, but, to me at this time, it seems to obviously be a power grab by government wanting to have backdoor access into every platform so they can have censorship power against the opposition. I think generally governments should stay out of censoring or even pressuring social media platforms, and I think arresting a CEO of a tech company for the things said on the platform he built is just nuts. It has a chilling effect on him, on people working at Telegram and on people working at every social media company, and also people thinking of launching a new social media company.<br>(00:53:47) 但问题在于，正如老话所说 “一个人的恐怖分子是另一个人的自由战士”。有些情况下，国际社会对 “谁是恐怖分子” 有共识，但在另一些情况下，某些政府（尤其是倾向威权的政府）会通过宣传，把所有反对者都称为 “恐怖分子”。这里确实存在细微差别，但在我看来，目前这件事显然是政府在争夺权力 —— 他们想获得每个平台的 “后门访问权”，以便能审查反对声音。我认为，政府通常不应干预甚至施压社交媒体平台，更不该因为平台上有人发表了某些言论，就逮捕该平台的 CEO—— 这太荒唐了。这不仅会让杜罗夫、Telegram 员工感到寒心，还会影响所有社交媒体公司的员工，以及那些想创办新社交媒体公司的人。</p><p>(00:54:50) Same as the case of X being banned in Brazil. It’s, I think, a power grab by Alexandre de Moraes, a Supreme Court justice in Brazil. He ordered X to block certain accounts that are spreading “misinformation.” Elon and X denied the request, then de Moraes threatened to arrest X representatives in Brazil, and in response to that X pulled the representatives out of Brazil obviously to protect them. And now X, having no representatives in Brazil, apparently violates the law. Based on this de Moraes banned X in Brazil. Once again, it’s an authoritarian figure seeking censorship power over the channels of communication.<br>(00:54:50) X 在巴西被禁的情况也类似。我认为这是巴西最高法院大法官亚历山大・德莫赖斯（Alexandre de Moraes）在争夺权力。他下令 X 封禁某些传播 “虚假信息” 的账户，埃隆・马斯克（Elon Musk）和 X 拒绝了这一要求，随后德莫赖斯威胁要逮捕 X 在巴西的代表。为保护员工，X 显然撤走了在巴西的代表。但现在，“X 在巴西没有代表” 又被指违法，德莫赖斯据此封禁了 X 在巴西的服务。这再次表明，威权人物在试图掌控通信渠道的审查权。</p><p>(00:55:34) I understand that this is complicated because there are evil people in the world and part of the role of government is to protect us from those evil people. But as Benjamin Franklin said, “Those who can give up essential liberty to obtain a little temporary safety deserve neither liberty nor safety.” It’s a trade-off, but I think in many places in the world, many governments have leaned too far away at this time from liberty.<br>(00:55:34) 我明白这事很复杂 —— 世界上确实有坏人，而政府的部分职责就是保护我们免受坏人伤害。但正如本杰明・富兰克林所说：“为了获得暂时的安全而放弃基本自由的人，既不配拥有自由，也不配拥有安全。” 这是一种权衡，但我认为目前世界上很多地方的政府都在过度偏离 “自由” 的方向。</p><p>(00:56:02) Okay, next up I got a question on AI, which I emotionally connected with. I’ll condense it as follows. “Hello, Lex. I’m a programmer and I have a deep fear of slipping into irrelevance because I am worried that AI will soon exceed my programming skills.”<br>(00:56:02) 好的，下一个问题和人工智能（AI）有关，我对此深有共鸣。我把问题精简一下：“莱克斯你好，我是一名程序员，非常害怕自己会变得无关紧要，因为我担心 AI 很快就会超越我的编程技能。”</p><p>(00:56:23) Let me first say that I relate to your fear. It’s scary to have a thing that gives you a career and gives you meaning to be taken away. For me, programming is a passion, and if not for this podcast, it would probably at least in part be my profession so I get an uncomfortable feeling every time, Claude, the LLM I use for coding at this time just writes a lot of excellent approximately correct code. I think you can make a good case that it already exceeds the skill of many programmers, at least in the same way that the collective intelligence of stack overflow exceeds the skill of many individual programmers, but in many ways it still does not. But I think eventually more and more the task, the professional programming will be one of writing natural language prompts. I think the right thing to do, and what I’m at least doing is to ride the wave of the ever improving code generating LLMs and keep transforming myself into a big picture designer versus low-level tinkerer. What I’m doing and what I recommend you do is continually switch to whatever state-of-the-art tool is for generating code. For me, currently I recently switched from VS Code to Cursor, and before that it was Emacs to VS Code switch. Cursor is this editor that’s based on VS Code that leans heavily on LLMs and integrates the co-generation really nicely into the editing process. It makes it super easy to continually use the LLMs. What I would advise and what I’m trying to do myself is to learn how to use it and to master its co-generation capabilities. I, personally, try to now allocate a significant amount of time to designing with natural language first versus writing code from scratch, so using my understanding of programming to edit the code that’s generated by the LLM versus writing it from scratch and then using the LLM to generate small parts of the code. I see it as a skill that I should develop in parallel to my programming skill.<br>(00:56:23) 首先我想说，我很理解你的恐惧。当一份能给你职业、给你人生意义的技能可能被夺走时，那种感觉确实很可怕。对我来说，编程是一种热爱，如果不是做这个播客，编程很可能至少是我职业的一部分。所以每次我用 Claude（我现在用来编程的大语言模型）写代码时，看到它写出大量优秀且基本正确的代码，我都会感到不安。可以说，它已经超越了很多程序员的技能 —— 至少就像 Stack Overflow 的集体智慧超越很多个体程序员一样，但在很多方面它还做不到。不过我认为，最终专业编程的核心任务会越来越偏向 “写自然语言提示词”。我认为正确的做法（也是我正在做的）是：跟上代码生成大语言模型不断进步的浪潮，把自己从 “底层调试者” 转变为 “全局设计者”。我建议你也这样做：不断切换到最先进的代码生成工具。比如我最近就从 VS Code 换成了 Cursor（之前是从 Emacs 换成 VS Code）。Cursor 是基于 VS Code 的编辑器，非常依赖大语言模型，能很好地将代码协同生成融入编辑过程，让使用大语言模型变得超级简单。我的建议是，你要学习并掌握这类工具的协同生成能力 —— 我自己现在就会花大量时间先用自然语言设计，而不是从零写代码；我会用自己的编程知识去修改大语言模型生成的代码，而不是先从零写，再让模型生成小部分代码。我认为这是一种需要和编程技能并行发展的能力。</p><p>(00:58:34) I think this applies to many other careers too. Don’t compete with AI for your job, learn to use the AI to do that job better. But yes, it is scary in some deep human level, the threat of being replaced. But at least I think we’ll be okay.<br>(00:58:34) 我认为这也适用于很多其他职业：不要和 AI 争夺工作，而要学会用 AI 把工作做得更好。当然，从人类深层情感来说，被替代的威胁确实很可怕，但至少我认为我们最终会没事的。</p><p>(00:58:55) All right, next up, I got a very nice audio message and question from a gentleman who is 27 and feeling a lot of anxiety about the future. Just recently he graduated with a bachelor’s degree and he’s thinking about going to grad school for biomedical engineering, but there is a lot of anxiety. He mentioned anxiety many times in the message. It took him an extra while to get his degree, so he mentioned he would be 32 by the time he’s done with his PhD, so it’s a big investment. But he said in his heart he feels like he’s a scientist. I think that’s the most important part of his message, of your message. By the way, I’ll figure out how to best include audio and video messages in future episodes.<br>(00:58:55) 好的，下一个问题来自一位 27 岁的男士，他发来一段语音，说自己对未来充满焦虑。他最近刚拿到学士学位，在考虑去读生物医学工程的研究生，但焦虑感很重 —— 他在留言里多次提到 “焦虑”。他拿到学士学位花了比别人更长的时间，所以他说如果读博，毕业时就 32 岁了，这是一笔很大的投入。但他说 “在心里，我觉得自己是个科学家”—— 我认为这是他留言里最重要的一点。顺便说一句，我会想办法在未来的节目中更好地融入音频和视频留言。</p><p>(00:59:37) Now onto the question. Thank you for telling me your story and for submitting the question. My own life story is similar to yours. I went to Drexel University for my bachelor’s, master’s, and doctorate degrees, and I took a while just as you’re doing. I did a lot of non-standard things that weren’t any good for some hypothetical career I’m supposed to have. I trained and competed in Judo and Jiu Jitsu for my entire 20s, got a black belt from it. I wrote a lot, including a lot of really crappy poetry. I read a large amount of non-technical books, history, philosophy, and literature. I took courses on literature and philosophy that weren’t at all required for my computer science and electrical engineering degrees, like a course on James Joyce. I played guitar in bars around town. I took a lot of technical classes, many, for example, on theoretical computer science that were way more than were needed for the degree. I did a lot of research and I coded up a bunch of projects that didn’t directly contribute to my dissertation. It was pure curiosity and the joy of exploring.<br>(00:59:37) 现在来回答这个问题。感谢你分享自己的故事并提问，我的人生经历其实和你很像。我在德雷塞尔大学（Drexel University）读了本科、硕士和博士，也像你一样花了很长时间。我做了很多 “不按常理” 的事，这些事对我 “本该有的” 职业规划毫无帮助：20 多岁的整个十年，我都在训练和参加柔道、柔术比赛，还拿到了黑带；我写了很多东西，包括一堆很糟糕的诗；我读了大量非技术类书籍 —— 历史、哲学、文学；我选了很多计算机科学和电气工程专业不需要的文学、哲学课程，比如一门关于詹姆斯・乔伊斯（James Joyce）的课；我还在镇上的酒吧弹吉他；我选了很多超出学位要求的技术课，比如很多理论计算机科学的课；我做了很多研究，编了很多和论文无关的项目 —— 这一切都只是出于纯粹的好奇心和探索的乐趣。</p><p>(01:00:54) Like you, I took the long way home, as they say, and I regret none of it. Throughout that, people around me and even people who love me wanted me to hurry up and to focus, especially because I had very little money, and so I had a sense like time was running out for me to take the needed steps towards a reasonable career. And just like you, I was filled with anxiety and I still am filled with anxiety to this day, but I think the right thing to do is not to run away from the anxiety, but to lean into it and channel it into pursuing with everything you got, the things you’re passionate about.<br>(01:00:54) 就像你一样，我走了一条 “绕远路” 的人生，但我一点也不后悔。那段时间里，身边的人甚至爱我的人都希望我能快点 “步入正轨”、专注于学业，尤其是因为我当时没什么钱，总觉得自己要赶紧为 “合理的职业” 做准备，否则时间就来不及了。和你一样，我当时充满了焦虑，直到现在也依然有焦虑，但我认为正确的做法不是逃避焦虑，而是直面它，把它转化为动力，全力以赴去追求自己热爱的事情。</p><p>(01:01:36) As you said, very importantly, in your heart you know you’re a scientist, so that’s it. You know exactly what to do. Pursue the desire to be a scientist with everything you got. Get to a good grad school, find a good advisor and do epic shit with them. And it may turn out in the end that your life will have unexpected chapters, but as long as you’re chasing dreams and goals with absolute unwavering dedication, good stuff will come of it. And also try your best to be a good person. This might be a good place to read the words If by Roger Kipling that I often return to when I feel lost and I’m looking for guidance on how to be a better man.<br>(01:01:36) 最重要的是，正如你所说，“在心里，你知道自己是个科学家”—— 这就够了。你很清楚自己该做什么：全力以赴去追求成为科学家的愿望。申请一所好的研究生院，找一位好导师，和他们一起做了不起的研究。或许最终你的人生会有意外的篇章，但只要你坚定不移地追逐梦想和目标，好事就一定会发生。另外，也要尽力做个好人。或许在这里，我可以读一段拉迪亚德・吉卜林（Roger Kipling）的《如果》（If）—— 每当我感到迷茫、想知道如何成为更好的人时，我都会读这首诗。</p><p>(01:02:18) “If you can keep your head when all about your losing theirs and blaming it on you. If you can trust yourself when all men doubt you, but make allowance for their doubting too. If you can wait and not be tired by waiting or being lied about, don’t deal in lies or being hated, don’t give weight to hating and yet don’t look too good nor talk too wise. If you can dream and not make dreams your master. If you can think and not make thoughts your aim. If you can meet with triumph and disaster and treat those two imposters just the same. If you can bear to hear the truth you’ve spoken twisted by knaves to make a trap for fools or watch the things you gave your life to broken and stoop and build them up with worn out tools. If you can make one heap of all your winnings and risk it on one turn of pitch-and-toss and lose and start again at your beginnings and never breathe a word about your loss. If you can force your heart and nerve and sinew to serve your turn long after they’re gone and so hold on when there’s nothing in you except the will, which says to them, hold on. If you can talk with crowds and keep your virtue or walk with kings nor lose the common touch. If neither foes, nor loving friends can hurt you. If all men count with you, but none too much. If you can fill the unforgiving minute with 60 seconds worth of distance run, yours is the earth and everything that’s in it. And which is more, you’ll be a man, my son.”<br>(01:02:18) “如果所有人都失去理智，咒骂你，你仍能保持头脑清醒；如果所有人都怀疑你，你仍能坚信自己，同时宽容他们的怀疑；如果你等待，不要因此厌烦，为人所骗，不要因此骗人，为人所恨，不要因此抱恨，不要太乐观，也不要自以为是；如果你有梦想，不要让梦想控制你；如果你有思想，不要让思想成为你的目标；如果你遇到胜利和灾难，要把两者都当作骗子看待；如果你能忍受，你曾讲过的真理被恶棍扭曲，用于蒙骗傻子，或者看着你用毕生去追求的东西被破坏，然后俯身，用破旧的工具把它修补；如果你能把所有赢来的筹码都押在一把赌注上，输光后仍能重新开始，且绝口不提自己的损失；如果你能强迫自己，在身体疲惫不堪时，仍能咬牙坚持，只因心中的意志在说‘坚持’；如果你能与平民交谈而不失风度，与国王同行而不忘谦逊；如果敌人和挚友都无法伤害你；如果所有人都对你重要，但没有人过于重要；如果你能把每一分钟都当作 60 秒来利用，填满这无情的时光，那么，世界和它的一切都属于你，更重要的是，我的孩子，你将成为一个真正的人。”</p><p>(01:04:05) Thank you for listening and see you next time.<br>(01:04:05) 感谢收听，我们下期再见。</p>]]></content>
    
    
    <categories>
      
      <category>访谈翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>唐纳德・特朗普</tag>
      
      <tag>Lex Fridman</tag>
      
      <tag>Donald Trump</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2005年斯坦福大学毕业典礼演讲-乔布斯</title>
    <link href="/2025/08/28/find-what-you-love/"/>
    <url>/2025/08/28/find-what-you-love/</url>
    
    <content type="html"><![CDATA[<h2 id="‘You’ve-got-to-find-what-you-love-’-Jobs-says"><a href="#‘You’ve-got-to-find-what-you-love-’-Jobs-says" class="headerlink" title="‘You’ve got to find what you love,’ Jobs says"></a><strong>‘You’ve got to find what you love,’ Jobs says</strong></h2><p>原文链接: <a href="https://news.stanford.edu/stories/2005/06/youve-got-find-love-jobs-says">https://news.stanford.edu/stories/2005/06/youve-got-find-love-jobs-says</a></p><p>2005</p><p>Steve Jobs’ 2005 Stanford Commencement Address. | Stanford University</p><p>This is a prepared text of the Commencement Address delivered by Steve Jobs, CEO of Apple Computer and of Pixar Animation Studios, on June 12, 2005.</p><p>这是苹果电脑公司及皮克斯动画工作室首席执行官史蒂夫・乔布斯于 2005 年 6 月 12 日发表的毕业典礼演讲全文。</p><p>I’m honored to be with you today for your commencement from one of the finest universities in the world. Truth be told, I never graduated from college. And this is the closest I’ve ever gotten to a college graduation.<br>今天，能和你们一起参加这所世界顶尖大学的毕业典礼，我感到十分荣幸。说实话，我从未大学毕业，这是我离大学毕业典礼最近的一次。</p><p>Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.<br>今天，我想和大家分享我生命中的三个故事。仅此而已，没有什么宏大的主题，就三个小故事。</p><h3 id="First"><a href="#First" class="headerlink" title="First"></a><strong>First</strong></h3><p><strong>The first story</strong> is about connecting the dots. I dropped out of Reed College after the first six months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why’d I drop out?<br>第一个故事，关于<strong>串联生命中的点滴</strong>。我在里德学院读了六个月就辍学了，但之后并没有立刻离开，而是以旁听生的身份又待了大约 18 个月，才最终彻底离开。那么，我为什么要辍学呢？</p><p>It started before I was born. My biological mother was a young, unwed graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife.<br>这要从我出生前说起。我的生母是一位年轻的未婚研究生，她决定将我送给别人收养。她非常坚定地认为，我应该被大学毕业生收养，所以一切都安排好了 —— 我刚出生就会被一对律师夫妇收养。</p><p>Except that when I popped out, they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking, “We’ve got an unexpected baby boy. Do you want him?” They said, “Of course.”<br>可就在我出生后，那对律师夫妇却在最后一刻改变了主意 —— 他们其实想要一个女孩。于是，我的养父母（他们当时在收养等待名单上）半夜接到了一个电话：“我们这儿有个意外出生的男婴，你们愿意收养他吗？” 他们回答：“当然愿意。”</p><p>My biological mother found out later that my mother had never graduated from college, and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later, when my parents promised that I would go to college. This was the start in my life.<br>后来，我的生母发现我的养母从未大学毕业，养父甚至连高中都没毕业，她拒绝签署最终的收养文件。直到几个月后，我的养父母承诺 “一定会让我上大学”，她才松了口。这就是我生命的开端。</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford. And all of my working class parents’ savings were being spent on my college tuition.<br>17 年后，我确实上了大学。但我当时太天真，选了一所学费几乎和斯坦福一样昂贵的学校。而我出身工薪阶层的父母，把他们一辈子的积蓄都花在了我的学费上。</p><p>After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life, and no idea how college was going to help me figure it out. And here I was, spending all of the money my parents had saved their entire life.<br>六个月后，我实在看不到这所大学的价值 —— 我完全不知道自己这辈子想做什么，也不知道大学能帮我找到答案。可我却在挥霍父母一辈子攒下的积蓄。</p><p>So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made.<br>于是，我决定辍学，并且相信一切都会好起来。当时这个决定让我非常害怕，但现在回头看，这是我这辈子做过的最正确的决定之一。</p><p>The minute I dropped out, I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked far more interesting.<br>从我辍学的那一刻起，我就不用再去上那些我不感兴趣的必修课，而是可以去旁听那些看起来更有意思的课。</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms. I returned Coke bottles for the five-cent deposits to buy food with. And I would walk the seven miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it.<br>当然，这段日子并不全是浪漫的。我没有宿舍，只能睡在朋友房间的地板上；我会退掉可乐瓶，用换来的五美分押金买吃的；每个周日晚上，我都会步行七英里穿过小镇，去 Hare Krishna 寺庙吃一周里唯一一顿像样的饭。但我喜欢那样的生活。</p><p>And much of what I stumbled into, by following my curiosity and intuition, turned out to be priceless later on. Let me give you one example.<br>而我那些因为好奇和直觉而偶然接触的东西，后来都变得无比珍贵。我给大家举个例子吧。</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus, every poster, every label on every drawer, was beautifully hand-calligraphed. Because I had dropped out, and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and sans-serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle, in a way that science can’t capture. And I found it fascinating.<br>当时的里德学院，或许开设着全美国最好的书法课程。校园里的每一张海报、每一个抽屉上的标签，都是用漂亮的手写书法制作的。因为我辍学了，不用上常规课程，所以我决定去上书法课，学习怎么写书法。我学到了衬线字体和无衬线字体的区别，学到了如何调整不同字母组合之间的间距，也明白了是什么让优秀的排版变得出色。那种美、那种历史感、那种艺术上的细腻，是科学无法诠释的。我深深被它吸引了。</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it’s likely that no personal computer would have them.<br>当时我完全没想到，这些东西在我的生活中会有任何实际用途。但十年后，当我们设计第一台麦金塔（Macintosh）电脑时，这些知识突然涌上心头。我们把这些书法设计都融入了麦金塔电脑 —— 它成了第一台拥有精美排版的电脑。如果我当时没有旁听那门书法课，麦金塔电脑就不会有多种字体，也不会有比例间距字体；而因为 Windows 系统只是复制了麦金塔的设计，很可能所有个人电脑都不会有这些功能。</p><p>If I had never dropped out, I would have never dropped in on that calligraphy class, and personal computers might not have the wonderful typography that they do. Of course, it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards, ten years later. Again, you can’t connect the dots looking forward. You can only connect them looking backwards, so you have to trust that the dots will somehow connect in your future.<br>如果我没有辍学，就不会去旁听那门书法课，个人电脑也可能不会有如今这么棒的排版。当然，在大学的时候，我不可能 “向前看” 并串联起这些点滴；但十年后 “回头看”，一切就无比清晰了。再强调一次：你无法在展望未来时串联起生命的点滴，只能在回顾过去时才看清它们的联系。所以，你必须相信，这些点滴在未来的某一天总会以某种方式串联起来。</p><p>You have to trust in something: your gut, destiny, life, karma, whatever. Because believing that the dots will connect down the road will give you the confidence to follow your heart, even when it leads you off the well-worn path. And that will make all the difference.<br>你必须相信某些东西 —— 你的直觉、命运、生活、因果报应，无论是什么。因为相信 “点滴终将串联”，会给你跟随内心的勇气，即使它会带你偏离常走的道路。而这，将彻底改变你的人生。</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a><strong>Second</strong></h3><p><strong>My second story</strong> is about love and loss. I was lucky. I found what I loved to do early in life. Woz and I started Apple in my parents’ garage when I was 20. We worked hard, and in ten years Apple had grown from just the two of us in a garage into a $2 billion company with over 4,000 employees.<br>第二个故事，关于<strong>热爱与失去</strong>。我很幸运，在年轻时就找到了自己热爱的事业。20 岁那年，我和沃兹（史蒂夫・沃兹尼亚克）在我父母的车库里创办了苹果公司。我们努力工作，十年后，苹果从车库里的两个人，成长为一家市值 20 亿美元、拥有 4000 多名员工的公司。</p><p>We just released our finest creation—the Macintosh—a year earlier, and I’d just turned 30. And then I got fired. How can you get fired from a company you started?<br>一年前，我们刚推出了我们最棒的产品 —— 麦金塔电脑，而我也刚满 30 岁。就在这时，我被解雇了。一个人怎么会被自己创办的公司解雇呢？</p><p>Well, as Apple grew, we hired someone—who I thought was very talented—to run the company with me. And for the first year or so, things went well. But then our visions of the future began to diverge. And eventually we had a falling out. When we did, our board of directors sided with him. And so at 30 I was out, and very publicly out.<br>事情是这样的：随着苹果的发展，我们聘请了一位我认为非常有才华的人，和我一起管理公司。最初的一年左右，一切都很顺利。但后来，我们对公司未来的愿景开始出现分歧，最终闹得不欢而散。当矛盾爆发时，董事会选择支持他。就这样，30 岁的我出局了，而且是非常公开地出局。</p><p>What had been the focus of my entire adult life was gone, and it was devastating. I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down, that I had dropped the baton as it was being passed to me.<br>我成年后生活的全部重心突然消失了，这对我打击巨大。有好几个月，我完全不知道该做什么。我觉得自己让上一代的创业者失望了，就像接力赛中，我把传递给我的接力棒掉在了地上。</p><p>I met with David Packard and Bob Noyce, and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the Valley.<br>我见了戴维・帕卡德（惠普联合创始人）和鲍勃・诺伊斯（英特尔联合创始人），试图为自己的 “搞砸” 道歉。我成了一个公开的失败者，甚至想过逃离硅谷。</p><p>But something slowly began to dawn on me: I still loved what I did. The turn of events at Apple had not changed that one bit. I’d been rejected, but I was still in love.<br>但慢慢地，我意识到一件事：我依然热爱我所做的事情。苹果的变故丝毫没有改变这一点。我被拒绝了，但我的热爱没有消失。</p><p>And so I decided to start over.<br>于是，我决定重新开始。</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.<br>当时我并没有意识到，但后来证明，被苹果解雇是我这辈子遇到的最好的事情。曾经作为成功者的沉重感，被重新做回初学者的轻松感所取代 —— 对一切都不再那么确定，却也因此获得了自由，进入了我生命中最具创造力的时期之一。</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the world’s first computer-animated feature film, Toy Story, and is now the most successful animation studio in the world.<br>在接下来的五年里，我创办了一家叫 NeXT 的公司，另一家叫皮克斯（Pixar）的公司，还爱上了一位了不起的女性，她后来成了我的妻子。皮克斯推出了世界上第一部全电脑动画电影《玩具总动员》，现在已经是全球最成功的动画工作室。</p><p>In a remarkable turn of events, Apple bought NeXT, and I returned to Apple. And the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.<br>后来发生了一件不可思议的事：苹果收购了 NeXT，我也回到了苹果。而我们在 NeXT 开发的技术，成了苹果后来复兴的核心。我和劳伦（乔布斯的妻子）也拥有了一个幸福的家庭。</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful-tasting medicine, but I guess the patient needed it.<br>我很确定，如果我没有被苹果解雇，这一切都不会发生。那次解雇就像一剂难以下咽的苦药，但我想，当时的我 “这个病人” 确实需要它。</p><p>Sometimes life’s gonna hit you in the head with a brick. Don’t lose faith.<br>有时候，生活会给你当头一棒。但请不要失去信念。</p><p>I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love—and that is as true for work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do.<br>我坚信，支撑我走下去的唯一动力，就是我对自己所做之事的热爱。你必须找到自己热爱的东西 —— 无论是工作还是爱情，道理都是如此。工作将占据你生活的很大一部分，而要获得真正的满足，唯一的途径就是去做你认为 “伟大的工作”；而要做伟大的工作，唯一的方法就是热爱你所做的事。</p><p>If you haven’t found it yet, keep looking—and don’t settle. As with all matters of the heart, you’ll know when you find it. And like any great relationship, it just gets better and better as the years roll on. So keep looking. Don’t settle.<br>如果你还没找到它，请继续寻找，不要将就。就像所有与内心相关的事一样，当你找到它时，你自然会明白。而且，就像一段美好的感情，它会随着岁月的流逝变得越来越好。所以，请继续寻找，不要将就。</p><h3 id="Third"><a href="#Third" class="headerlink" title="Third"></a><strong>Third</strong></h3><p><strong>My third story</strong> is about death. When I was 17, I read a quote that went something like, “If you live each day as if it was your last, someday you’ll most certainly be right.”<br>第三个故事，关于<strong>死亡</strong>。17 岁时，我读到过一句话，大概是：“如果你把每一天都当作生命中的最后一天来过，那么总有一天你会发现自己是对的。”</p><p>It made an impression on me. And since then, for the past 33 years, I have looked in the mirror every morning and asked myself, “If today were the last day of my life, would I wanna do what I am about to do today?” And whenever the answer has been no for too many days in a row, I know I need to change something.<br>这句话给我留下了深刻的印象。从那以后，在过去的 33 年里，我每天早上都会对着镜子问自己：“如果今天是我生命的最后一天，我还会想做今天要做的事吗？” 如果连续多天答案都是 “不”，我就知道，我需要做出改变了。</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything, all external expectations, all pride, all fear of embarrassment or failure—these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.<br>“记住自己终将死去”，是我所知道的、帮助我做出人生重大选择的最重要的方法。因为几乎所有事情 —— 所有外界的期待、所有的骄傲、所有对尴尬或失败的恐惧 —— 在死亡面前都会烟消云散，只留下真正重要的东西。记住自己终将死去，也是我所知的避免 “认为自己有所失去” 这种陷阱的最好方法。你本就一无所有，没有理由不跟随自己的内心。</p><p>About a year ago, I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was.<br>大约一年前，我被诊断出癌症。早上 7 点半，我做了一次扫描，结果清楚地显示我的胰腺上有一个肿瘤。我当时甚至不知道胰腺是什么。</p><p>The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctors’ code for “Prepare to die.”<br>医生告诉我，这几乎可以肯定是一种无法治愈的癌症，我很可能只剩下 3 到 6 个月的生命。医生建议我回家 “料理后事”—— 这是医生们对 “准备好死亡” 的委婉说法。</p><p>It means to try and tell your kids everything you thought you’d have the next ten years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.<br>“料理后事” 意味着，你要在短短几个月里，把原本想在未来十年里告诉孩子的话都讲完；意味着，你要把所有事情都安排妥当，让家人以后的生活尽可能轻松；意味着，你要和所有人告别。</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach, and into my intestines, put a needle into my pancreas, and got a few cells from the tumor.<br>那一天，我满脑子都是这个诊断结果。当天晚上，我做了活检：医生把内窥镜从我的喉咙伸进去，穿过胃，进入肠道，然后用一根针穿刺我的胰腺，从肿瘤上取了一些细胞样本。</p><p>I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope, the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery, and thankfully I’m fine now.<br>我当时被麻醉了，但在场的妻子告诉我，当医生在显微镜下观察那些细胞时，他们都哭了 —— 因为那是一种非常罕见的胰腺癌，通过手术可以治愈。我接受了手术，幸运的是，现在我已经没事了。</p><p>This was the closest I’ve been to facing death, and I hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept.<br>这是我离死亡最近的一次，我希望未来几十年里，这都是我离死亡最近的一次。经历过这件事之后，我现在可以更确定地对你们说这些话 —— 而不再是把死亡当作一个 “有用但抽象的概念”。</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet, death is the destination we all share. No one has ever escaped it. And that is as it should be, because death is very likely the single best invention of life. It’s life’s change agent. It clears out the old to make way for the new.<br>没有人想死。即使是那些想上天堂的人，也不想通过死亡的方式到达那里。然而，死亡是我们所有人共同的终点，没有人能逃脱。而事情本就该如此，因为死亡很可能是生命最伟大的发明 —— 它是生命的 “变革推动者”，清除旧的事物，为新的事物腾出空间。</p><p>Right now, the new is you. But someday, not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it’s quite true.<br>现在，“新的事物” 就是你们。但总有一天，不用太久，你们也会逐渐变成 “旧的事物”，被生命清除。抱歉说得这么沉重，但这是事实。</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma, which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice.<br>你们的时间是有限的，所以不要浪费时间去过别人的生活。不要被教条束缚 —— 教条不过是别人思考结果的 “复制品”。不要让别人的意见淹没你内心的声音。</p><p>And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.<br>最重要的是，要有勇气跟随自己的内心和直觉。它们冥冥中已经知道你真正想成为什么样的人，其他所有事情都无关紧要。</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand, not far from here in Menlo Park. And he brought it to life with his poetic touch.<br>我年轻时，有一本很棒的杂志叫《全球概览》（The Whole Earth Catalog），它是我们那一代人的 “圣经” 之一。杂志的创始人是斯图尔特・布兰德，他就住在离这里不远的门洛帕克。他用充满诗意的方式，让这本杂志变得鲜活。</p><p>This was in the late sixties, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and Polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along. It was idealistic, overflowing with neat tools and great notions.<br>那是在 60 年代末，当时还没有个人电脑和桌面出版技术，所以这本杂志完全是用打字机、剪刀和宝丽来相机制作的。它有点像 “纸质版的谷歌”，比谷歌出现早了 35 年。它充满理想主义色彩，里面全是好用的工具和很棒的想法。</p><p>Stewart and his team put out several issues of The Whole Earth Catalog. And then, when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age.<br>斯图尔特和他的团队出版了好几期《全球概览》。当它完成了自己的使命后，他们推出了最后一期。那是在 70 年代中期，当时我和你们现在一样大。</p><p>On the back cover of their final issue was a photograph of an early-morning country road—the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words “Stay hungry. Stay foolish.” It was their farewell message as they signed off.<br>最后一期的封底，是一张清晨乡间小路的照片 —— 如果你足够大胆，可能会在这条路上搭便车。照片下方写着一句话：“Stay hungry. Stay foolish.”（求知若渴，虚怀若愚）。这是他们的告别语，也是杂志的终刊寄语。</p><p>“Stay hungry. Stay foolish.” And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you. Stay hungry. Stay foolish. Thank you all very much.<br>“求知若渴，虚怀若愚。” 我一直以此来勉励自己。现在，在你们毕业、即将开启人生新旅程之际，我也把这句话送给你们。求知若渴，虚怀若愚。非常感谢大家。</p>]]></content>
    
    
    <categories>
      
      <category>演讲翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>史蒂夫・乔布斯</tag>
      
      <tag>Steve Jobs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>招聘已过时</title>
    <link href="/2025/08/27/hiring-is-obsolete/"/>
    <url>/2025/08/27/hiring-is-obsolete/</url>
    
    <content type="html"><![CDATA[<h2 id="Hiring-is-Obsolete"><a href="#Hiring-is-Obsolete" class="headerlink" title="Hiring is Obsolete"></a>Hiring is Obsolete</h2><p>原文链接: <a href="https://paulgraham.com/hiring.html">https://paulgraham.com/hiring.html</a></p><p>May 2005</p><p>(This essay is derived from a talk at the Berkeley CSUA.)<br>（本文改编自在加州大学伯克利分校计算机科学本科生协会（CSUA）的一次演讲。）</p><p>The three big powers on the Internet now are Yahoo, Google, and Microsoft. Average age of their founders: 24. So it is pretty well established now that grad students can start successful companies. And if grad students can do it, why not undergrads?<br>如今互联网领域的三大巨头是雅虎（Yahoo）、谷歌（Google）和微软（Microsoft）。它们创始人的平均年龄仅 24 岁。由此可见，研究生能创办成功的公司这一点已得到充分印证。既然研究生能做到，本科生为何不能呢？</p><p>Like everything else in technology, the cost of starting a startup has decreased dramatically. Now it’s so low that it has disappeared into the noise. The main cost of starting a Web-based startup is food and rent. Which means it doesn’t cost much more to start a company than to be a total slacker. You can probably start a startup on ten thousand dollars of seed funding, if you’re prepared to live on ramen.<br>与科技领域的其他所有事物一样，创办初创公司的成本已大幅下降。如今，这一成本低到几乎可以忽略不计。创办一家基于网络的初创公司，主要成本不过是衣食住行。这意味着，创办公司的成本与当个彻底的闲人相比，并没有高多少。只要你愿意靠吃拉面度日，或许有一万美元的种子资金就能启动一家初创公司。</p><p>The less it costs to start a company, the less you need the permission of investors to do it. So a lot of people will be able to start companies now who never could have before.<br>创办公司的成本越低，你创办公司所需获得的投资人许可就越少。因此，如今许多以前没能力创办公司的人，现在都有机会开启自己的创业之路了。</p><p>The most interesting subset may be those in their early twenties. I’m not so excited about founders who have everything investors want except intelligence, or everything except energy. The most promising group to be liberated by the new, lower threshold are those who have everything investors want except experience.<br>其中最值得关注的群体或许是二十出头的年轻人。对于那些除了智慧外具备投资人所需一切条件，或是除了精力外无所不有的人，我并不觉得有多振奋。而在创业门槛降低这一新趋势下，最有潜力获得机遇的群体，是那些除了经验外，拥有投资人所需全部特质的人。</p><h3 id="Market-Rate"><a href="#Market-Rate" class="headerlink" title="Market Rate"></a><strong>Market Rate</strong></h3><p><strong>市场估值</strong></p><p>I once claimed that nerds were unpopular in secondary school mainly because they had better things to do than work full-time at being popular. Some said I was just telling people what they wanted to hear. Well, I’m now about to do that in a spectacular way: I think undergraduates are undervalued.<br>我曾提出，书呆子在中学不受欢迎，主要是因为他们有更有意义的事要做，而非把全部精力放在追求受欢迎上。有人说我不过是在说人们爱听的话。好吧，现在我要更 “语出惊人” 地说一句：我认为本科生的价值被低估了。</p><p>Or more precisely, I think few realize the huge spread in the value of 20 year olds. Some, it’s true, are not very capable. But others are more capable than all but a handful of 30 year olds. [1]<br>更准确地说，我认为很少有人意识到，20 岁左右年轻人的能力差异极大。诚然，有些 20 岁的年轻人能力并不突出，但也有一些 20 岁的年轻人，能力远超除少数 30 岁人士之外的大多数人。[1]</p><p>Till now the problem has always been that it’s difficult to pick them out. Every VC in the world, if they could go back in time, would try to invest in Microsoft. But which would have then? How many would have understood that this particular 19 year old was Bill Gates?<br>时至今日，核心问题始终是难以甄别出那些能力出众的年轻人。如果能回到过去，世界上每一位风险投资人（VC）都会试图投资微软。但在当时，谁会这么做呢？又有多少人能意识到，那个 19 岁的年轻人就是比尔・盖茨？</p><p>It’s hard to judge the young because (a) they change rapidly, (b) there is great variation between them, and (c) they’re individually inconsistent. That last one is a big problem. When you’re young, you occasionally say and do stupid things even when you’re smart. So if the algorithm is to filter out people who say stupid things, as many investors and employers unconsciously do, you’re going to get a lot of false positives.<br>评判年轻人之所以困难，原因有三：（1）他们成长变化迅速；（2）彼此之间能力差异巨大；（3）个人表现不稳定。最后一点尤为关键。即便本身很聪明，年轻人偶尔也会说蠢话、做蠢事。因此，若像许多投资人和雇主下意识所做的那样，采用 “过滤掉说蠢话的人” 这种筛选逻辑，必然会出现大量 “误判”（即错过真正有能力的人）。</p><p>Most organizations who hire people right out of college are only aware of the average value of 22 year olds, which is not that high. And so the idea for most of the twentieth century was that everyone had to begin as a trainee in some entry-level job. Organizations realized there was a lot of variation in the incoming stream, but instead of pursuing this thought they tended to suppress it, in the belief that it was good for even the most promising kids to start at the bottom, so they didn’t get swelled heads.<br>大多数招聘应届毕业生的机构，只看到了 22 岁年轻人的平均价值，而这一平均价值并不算高。因此，在 20 世纪的大部分时间里，主流观念是：所有人都必须从基层实习生或入门级岗位做起。这些机构固然意识到新入职者能力参差不齐，但并未重视这一差异，反而倾向于压制它 —— 他们认为，即便最有潜力的年轻人，也该从底层起步，这样才不会自视甚高、骄傲自满。</p><p>The most productive young people will always be undervalued by large organizations, because the young have no performance to measure yet, and any error in guessing their ability will tend toward the mean.<br>在大型机构中，能力最强的年轻人往往始终被低估。因为年轻人尚无过往业绩可作评判依据，而在预估他们能力时，任何判断偏差最终都会趋向于 “平均水平”（即默认其能力处于中等）。</p><p>What’s an especially productive 22 year old to do? One thing you can do is go over the heads of organizations, directly to the users. Any company that hires you is, economically, acting as a proxy for the customer. The rate at which they value you (though they may not consciously realize it) is an attempt to guess your value to the user. But there’s a way to appeal their judgement. If you want, you can opt to be valued directly by users, by starting your own company.<br>对于一位能力极强的 22 岁年轻人而言，该如何做呢？有一种选择是绕过机构，直接面向用户。从经济角度来看，任何雇佣你的公司，本质上都是在充当用户的 “代理人”。公司对你的估值（即便他们可能并未有意识地意识到这一点），其实是在试图预估你对用户的价值。但你有办法 “反驳” 这种估值 —— 如果你愿意，完全可以通过创办自己的公司，让用户直接对你进行价值评判。</p><p>The market is a lot more discerning than any employer. And it is completely non-discriminatory. On the Internet, nobody knows you’re a dog. And more to the point, nobody knows you’re 22. All users care about is whether your site or software gives them what they want. They don’t care if the person behind it is a high school kid.<br>市场比任何雇主都更具洞察力，而且完全不带偏见。正如互联网上流传的说法：“没人知道你是一条狗”，更重要的是，没人知道你只有 22 岁。用户唯一关心的，是你的网站或软件能否满足他们的需求，至于背后的创作者是高中生还是资深人士，他们毫不在意。</p><p>If you’re really productive, why not make employers pay market rate for you? Why go work as an ordinary employee for a big company, when you could start a startup and make them buy it to get you?<br>如果你确实能力出众，为何不让雇主按市场价值为你付费呢？既然你可以创办一家初创公司，让大公司为了招揽你而收购这家公司，那又何必去大公司做一名普通员工呢？</p><p>When most people hear the word “startup,” they think of the famous ones that have gone public. But most startups that succeed do it by getting bought. And usually the acquirer doesn’t just want the technology, but the people who created it as well.<br>大多数人听到 “初创公司” 一词时，想到的都是那些成功上市的知名企业。但实际上，大多数成功的初创公司，是通过被收购实现 “成功” 的。而且通常情况下，收购方想要的不只是技术，还有创造出这些技术的团队。</p><p>Often big companies buy startups before they’re profitable. Obviously in such cases they’re not after revenues. What they want is the development team and the software they’ve built so far. When a startup gets bought for 2 or 3 million six months in, it’s really more of a hiring bonus than an acquisition.<br>大公司常常会在初创公司盈利前就将其收购。显然，在这种情况下，它们追求的不是营收，而是初创公司的开发团队以及其已开发的软件。如果一家初创公司成立仅半年就以 200 万或 300 万美元的价格被收购，这本质上更像是一笔 “招聘奖金”，而非单纯的企业收购。</p><p>I think this sort of thing will happen more and more, and that it will be better for everyone. It’s obviously better for the people who start the startup, because they get a big chunk of money up front. But I think it will be better for the acquirers too. The central problem in big companies, and the main reason they’re so much less productive than small companies, is the difficulty of valuing each person’s work. Buying larval startups solves that problem for them: the acquirer doesn’t pay till the developers have proven themselves. Acquirers are protected on the downside, but still get most of the upside.<br>我认为这类收购会越来越普遍，而且对所有人都更有利。对初创公司创始人而言，这显然是好事，因为他们能提前获得一大笔资金。但我认为这对收购方同样有益。大公司面临的核心问题 —— 也是它们效率远低于小公司的主要原因 —— 是难以评估每位员工的工作价值。收购处于 “萌芽阶段” 的初创公司，恰好能为它们解决这一问题：只有当开发团队证明了自身价值后，收购方才需要支付费用。这样一来，收购方既能规避下行风险，又能享受大部分潜在收益。</p><h3 id="Product-Development"><a href="#Product-Development" class="headerlink" title="Product Development"></a><strong>Product Development</strong></h3><p><strong>产品开发</strong></p><p>Buying startups also solves another problem afflicting big companies: they can’t do product development. Big companies are good at extracting the value from existing products, but bad at creating new ones.<br>收购初创公司还能解决困扰大公司的另一个问题：它们不擅长产品开发。大公司擅长从现有产品中挖掘价值，却不擅长打造新产品。</p><p>Why? It’s worth studying this phenomenon in detail, because this is the raison d’etre of startups.<br>为何会这样？这一现象值得深入研究，因为这正是初创公司存在的核心意义。</p><p>To start with, most big companies have some kind of turf to protect, and this tends to warp their development decisions. For example, Web-based applications are hot now, but within Microsoft there must be a lot of ambivalence about them, because the very idea of Web-based software threatens the desktop. So any Web-based application that Microsoft ends up with, will probably, like Hotmail, be something developed outside the company.<br>首先，大多数大公司都有自己的 “地盘” 要守护，这往往会扭曲它们的产品开发决策。例如，如今基于网络的应用程序（Web 应用）十分热门，但微软内部对此必然态度矛盾 —— 因为网络软件的理念本身就对桌面软件构成了威胁。因此，微软最终推出的网络应用（如 Hotmail 邮箱），很可能都是源自公司外部的开发成果。</p><p>Another reason big companies are bad at developing new products is that the kind of people who do that tend not to have much power in big companies (unless they happen to be the CEO). Disruptive technologies are developed by disruptive people. And they either don’t work for the big company, or have been outmaneuvered by yes-men and have comparatively little influence.<br>大公司不擅长开发新产品的另一个原因是：擅长创新的人，在大公司里往往没有太多话语权（除非他们恰好是 CEO）。颠覆性技术是由具有颠覆性思维的人创造的，而这类人要么根本不在大公司任职，要么被只会阿谀奉承的人排挤，影响力微乎其微。</p><p>Big companies also lose because they usually only build one of each thing. When you only have one Web browser, you can’t do anything really risky with it. If ten different startups design ten different Web browsers and you take the best, you’ll probably get something better.<br>大公司的劣势还在于，它们通常对同类型产品只开发一款。如果你只有一款网页浏览器，就不敢在它身上尝试任何真正有风险的创新。但如果有十家不同的初创公司分别设计十款不同的网页浏览器，你从中挑选最优的那一款，最终得到的产品很可能会更出色。</p><p>The more general version of this problem is that there are too many new ideas for companies to explore them all. There might be 500 startups right now who think they’re making something Microsoft might buy. Even Microsoft probably couldn’t manage 500 development projects in-house.<br>这个问题更普遍的体现是：新想法数量太多，大公司根本无法全部探索。目前可能有 500 家初创公司认为，自己开发的产品会被微软收购。但即便强大如微软，也不可能在公司内部同时推进 500 个开发项目。</p><p>Big companies also don’t pay people the right way. People developing a new product at a big company get paid roughly the same whether it succeeds or fails. People at a startup expect to get rich if the product succeeds, and get nothing if it fails. [2] So naturally the people at the startup work a lot harder.<br>大公司的薪酬体系也存在问题。在大公司开发新产品的人，无论产品成功与否，薪酬都相差不大；而初创公司的员工则清楚：产品成功，自己就能致富；产品失败，自己则一无所获。[2] 因此，初创公司的员工自然会更加努力地工作。</p><p>The mere bigness of big companies is an obstacle. In startups, developers are often forced to talk directly to users, whether they want to or not, because there is no one else to do sales and support. It’s painful doing sales, but you learn much more from trying to sell people something than reading what they said in focus groups.<br>大公司的 “大” 本身就是一种障碍。在初创公司，无论开发人员是否愿意，他们往往都得直接与用户沟通 —— 因为没人能替代他们做销售和客服工作。销售工作固然痛苦，但通过尝试向用户推销产品所学到的东西，远比阅读焦点小组的反馈报告要多得多。</p><p>And then of course, big companies are bad at product development because they’re bad at everything. Everything happens slower in big companies than small ones, and product development is something that has to happen fast, because you have to go through a lot of iterations to get something good.<br>当然，还有一个显而易见的原因：大公司不擅长产品开发，是因为它们在所有事情上都效率低下。大公司做任何事都比小公司慢，而产品开发恰恰需要快速推进 —— 因为要打造出优质产品，必须经过大量的迭代优化。</p><h3 id="Trend"><a href="#Trend" class="headerlink" title="Trend"></a><strong>Trend</strong></h3><p><strong>趋势</strong></p><p>I think the trend of big companies buying startups will only accelerate. One of the biggest remaining obstacles is pride. Most companies, at least unconsciously, feel they ought to be able to develop stuff in house, and that buying startups is to some degree an admission of failure. And so, as people generally do with admissions of failure, they put it off for as long as possible. That makes the acquisition very expensive when it finally happens.<br>我认为大公司收购初创公司的趋势只会加速。目前尚存的最大障碍之一，是 “面子问题”。大多数公司（至少是下意识地）认为，自己应该有能力在内部开发产品，而收购初创公司在某种程度上相当于承认自己的失败。因此，就像人们通常会拖延承认失败一样，公司也会尽可能推迟收购，这就导致最终收购时，成本变得非常高昂。</p><p>What companies should do is go out and discover startups when they’re young, before VCs have puffed them up into something that costs hundreds of millions to acquire. Much of what VCs add, the acquirer doesn’t need anyway.<br>公司真正应该做的，是在初创公司尚处于早期阶段、尚未被风险投资人炒到数亿美元估值之前，就主动发掘它们。毕竟，风险投资人给初创公司附加的很多价值，收购方其实并不需要。</p><p>Why don’t acquirers try to predict the companies they’re going to have to buy for hundreds of millions, and grab them early for a tenth or a twentieth of that? Because they can’t predict the winners in advance? If they’re only paying a twentieth as much, they only have to predict a twentieth as well. Surely they can manage that.<br>为什么收购方不提前预判那些未来可能需要花数亿美元收购的公司，在早期就以十分之一或二十分之一的价格将其拿下呢？是因为他们无法提前预测赢家吗？但如果只需支付二十分之一的成本，那么他们的预判准确率只需达到二十分之一即可，这显然是可以做到的。</p><p>I think companies that acquire technology will gradually learn to go after earlier stage startups. They won’t necessarily buy them outright. The solution may be some hybrid of investment and acquisition: for example, to buy a chunk of the company and get an option to buy the rest later.<br>我认为，那些需要通过收购获取技术的公司，会逐渐学会关注更早期的初创公司。它们未必会直接全额收购，而是可能采用 “投资 + 收购” 的混合模式：例如，先收购初创公司的一部分股权，同时获得日后收购剩余股权的选择权。</p><p>When companies buy startups, they’re effectively fusing recruiting and product development. And I think that’s more efficient than doing the two separately, because you always get people who are really committed to what they’re working on.<br>公司收购初创公司，本质上是将 “招聘” 与 “产品开发” 这两件事融合在了一起。我认为这种模式比分开做这两件事更高效，因为通过这种方式招到的人，必然是对自己所做的工作充满热忱和投入的。</p><p>Plus this method yields teams of developers who already work well together. Any conflicts between them have been ironed out under the very hot iron of running a startup. By the time the acquirer gets them, they’re finishing one another’s sentences. That’s valuable in software, because so many bugs occur at the boundaries between different people’s code.<br>此外，这种方式还能获得一支已经磨合良好的开发团队。在运营初创公司的高压环境下，团队成员之间可能存在的矛盾早已化解。当收购方接手这支团队时，他们已经达到了 “心有灵犀” 的默契程度 —— 一个人没说完的话，另一个人能接下去。这在软件开发领域极具价值，因为很多程序漏洞恰恰出现在不同人编写的代码衔接处。</p><h3 id="Investors"><a href="#Investors" class="headerlink" title="Investors"></a><strong>Investors</strong></h3><p><strong>投资人</strong></p><p>The increasing cheapness of starting a company doesn’t just give hackers more power relative to employers. It also gives them more power relative to investors.<br>创办公司的成本越来越低，不仅让技术开发者（黑客）相对于雇主拥有了更多话语权，也让他们相对于投资人的话语权有所提升。</p><p>The conventional wisdom among VCs is that hackers shouldn’t be allowed to run their own companies. The founders are supposed to accept MBAs as their bosses, and themselves take on some title like Chief Technical Officer. There may be cases where this is a good idea. But I think founders will increasingly be able to push back in the matter of control, because they just don’t need the investors’ money as much as they used to.<br>风险投资人中的传统观点认为，技术开发者不应掌控自己的公司。他们认为创始人应该接受拥有 MBA 学位的人作为上司，自己则担任首席技术官（CTO）之类的职位。或许在某些情况下，这种安排是合理的。但我认为，创始人在公司控制权问题上会越来越有底气拒绝这种安排，因为他们对投资人资金的依赖程度，已远不如过去。</p><p>Startups are a comparatively new phenomenon. Fairchild Semiconductor is considered the first VC-backed startup, and they were founded in 1959, less than fifty years ago. Measured on the time scale of social change, what we have now is pre-beta. So we shouldn’t assume the way startups work now is the way they have to work.<br>初创公司是一种相对较新的现象。仙童半导体（Fairchild Semiconductor）被认为是第一家由风险投资支持的初创公司，它成立于 1959 年，距今还不到 50 年。若以社会变革的时间尺度来衡量，当前初创公司的运作模式仍处于 “测试前期”（pre-beta）阶段。因此，我们不应想当然地认为，现在初创公司的运作方式就是唯一可行的方式。</p><p>Fairchild needed a lot of money to get started. They had to build actual factories. What does the first round of venture funding for a Web-based startup get spent on today? More money can’t get software written faster; it isn’t needed for facilities, because those can now be quite cheap; all money can really buy you is sales and marketing. A sales force is worth something, I’ll admit. But marketing is increasingly irrelevant. On the Internet, anything genuinely good will spread by word of mouth.<br>仙童半导体当年创办时需要大量资金，因为他们必须建造实体工厂。而如今，一家基于网络的初创公司，其第一轮风险投资会用在什么地方呢？更多的资金并不能让软件开发速度加快；办公设施也无需太多投入，因为现在的办公成本已经很低；资金真正能买到的，其实只有销售团队和市场营销。我承认销售团队有其价值，但市场营销的重要性正日益下降。在互联网上，任何真正优质的产品，都会通过口碑传播开来。</p><p>Investors’ power comes from money. When startups need less money, investors have less power over them. So future founders may not have to accept new CEOs if they don’t want them. The VCs will have to be dragged kicking and screaming down this road, but like many things people have to be dragged kicking and screaming toward, it may actually be good for them.<br>投资人的权力源于资金。当初创公司对资金的需求减少时，投资人对它们的掌控力也会随之减弱。因此，未来的创始人如果不愿意，就不必接受投资人派来的新 CEO。风险投资人或许会不情愿地被推向这条道路，但就像许多人们起初抗拒、最终却受益的事情一样，这对他们其实可能是件好事。</p><p>Google is a sign of the way things are going. As a condition of funding, their investors insisted they hire someone old and experienced as CEO. But from what I’ve heard the founders didn’t just give in and take whoever the VCs wanted. They delayed for an entire year, and when they did finally take a CEO, they chose a guy with a PhD in computer science.<br>谷歌的例子预示了未来的趋势。当年在获取投资时，投资人要求谷歌聘请一位年长且经验丰富的人担任 CEO。但据我所知，创始人并没有轻易妥协、接受投资人推荐的任何人选。他们拖延了整整一年，最终选定的 CEO，是一位拥有计算机科学博士学位的人（指埃里克・施密特）。</p><p>It sounds to me as if the founders are still the most powerful people in the company, and judging by Google’s performance, their youth and inexperience doesn’t seem to have hurt them. Indeed, I suspect Google has done better than they would have if the founders had given the VCs what they wanted, when they wanted it, and let some MBA take over as soon as they got their first round of funding.<br>在我看来，谷歌的创始人依然是公司最有权力的人。从谷歌的业绩来看，他们的年轻和缺乏经验似乎并未对公司造成负面影响。事实上，我甚至认为，如果谷歌创始人当初按照投资人的要求，早早让某个 MBA 接手 CEO 职位，谷歌的发展未必会像现在这么好。</p><p>I’m not claiming the business guys installed by VCs have no value. Certainly they have. But they don’t need to become the founders’ bosses, which is what that title CEO means. I predict that in the future the executives installed by VCs will increasingly be COOs rather than CEOs. The founders will run engineering directly, and the rest of the company through the COO.<br>我并非认为投资人派来的商务人士毫无价值 —— 他们当然有其作用。但他们不必成为创始人的上司，而 CEO 这个头衔本身就意味着 “上司”。我预测，未来投资人派往初创公司的高管，将更多地担任首席运营官（COO）而非 CEO。创始人将直接负责技术研发，并通过 COO 管理公司的其他业务。</p><h3 id="The-Open-Cage"><a href="#The-Open-Cage" class="headerlink" title="The Open Cage"></a><strong>The Open Cage</strong></h3><p><strong>打开的牢笼</strong></p><p>With both employers and investors, the balance of power is slowly shifting towards the young. And yet they seem the last to realize it. Only the most ambitious undergrads even consider starting their own company when they graduate. Most just want to get a job.<br>无论是相对于雇主还是投资人，权力的天平都在缓慢地向年轻人倾斜。然而，年轻人自己似乎是最后才意识到这一点的群体。只有极少数极具野心的本科生，会在毕业时考虑创办自己的公司，大多数人还是只想找一份工作。</p><p>Maybe this is as it should be. Maybe if the idea of starting a startup is intimidating, you filter out the uncommitted. But I suspect the filter is set a little too high. I think there are people who could, if they tried, start successful startups, and who instead let themselves be swept into the intake ducts of big companies.<br>或许这也合乎情理。或许正是因为创办初创公司的想法令人却步，才筛选掉了那些不够坚定的人。但我怀疑，这个 “筛选门槛” 设置得有些过高了。我相信，有不少人如果尝试创业，是能够创办成功的初创公司的，但他们最终却选择进入大公司，成为其中的一员。</p><p>Have you ever noticed that when animals are let out of cages, they don’t always realize at first that the door’s open? Often they have to be poked with a stick to get them out. Something similar happened with blogs. People could have been publishing online in 1995, and yet blogging has only really taken off in the last couple years. In 1995 we thought only professional writers were entitled to publish their ideas, and that anyone else who did was a crank. Now publishing online is becoming so popular that everyone wants to do it, even print journalists. But blogging has not taken off recently because of any technical innovation; it just took eight years for everyone to realize the cage was open.<br>你是否注意过，当动物被放出笼子时，它们起初往往意识不到笼门已经打开，常常需要被人用棍子戳一下才会走出来？博客的兴起也经历了类似的过程。早在 1995 年，人们就可以在网上发布内容，但博客真正流行起来，却是在最近几年。1995 年时，我们认为只有专业作家才有资格发表自己的观点，其他人若这么做，就会被视为怪人。如今，在线发布内容变得如此普及，几乎人人都想尝试，甚至纸质媒体的记者也不例外。但博客近年来的兴起，并非源于任何技术革新，只是人们花了八年时间才意识到，“发表观点的牢笼” 早已打开。</p><p>I think most undergrads don’t realize yet that the economic cage is open. A lot have been told by their parents that the route to success is to get a good job. This was true when their parents were in college, but it’s less true now. The route to success is to build something valuable, and you don’t have to be working for an existing company to do that. Indeed, you can often do it better if you’re not.<br>我认为，大多数本科生尚未意识到，“经济层面的牢笼” 也已经打开。很多人从小就被父母告知，成功的道路是找到一份好工作。在他们父母上大学的年代，这或许是正确的，但如今这一说法已不再那么成立。成功的道路，是创造出有价值的事物，而你不必为现有公司工作才能做到这一点。事实上，若不依附于现有公司，你往往能做得更好。</p><p>When I talk to undergrads, what surprises me most about them is how conservative they are. Not politically, of course. I mean they don’t seem to want to take risks. This is a mistake, because the younger you are, the more risk you can take.<br>在与本科生交流时，最让我惊讶的是他们的保守 —— 当然，我指的不是政治立场上的保守，而是他们似乎不愿承担风险。这其实是一个错误，因为越年轻，就越有资本承担风险。</p><h3 id="Risk"><a href="#Risk" class="headerlink" title="Risk"></a><strong>Risk</strong></h3><p><strong>风险</strong></p><p>Risk and reward are always proportionate. For example, stocks are riskier than bonds, and over time always have greater returns. So why does anyone invest in bonds? The catch is that phrase “over time.” Stocks will generate greater returns over thirty years, but they might lose value from year to year. So what you should invest in depends on how soon you need the money. If you’re young, you should take the riskiest investments you can find.<br>风险与回报始终是成正比的。例如，股票比债券风险更高，但长期来看，股票的回报率也必然更高。那为什么还会有人投资债券呢？关键在于 “长期来看” 这个前提。股票在 30 年的周期内会带来更高回报，但可能在某几年出现贬值。因此，你应该投资什么，取决于你多久后需要用到这笔钱。如果你年轻，就应该选择你能找到的风险最高的投资方式。</p><p>All this talk about investing may seem very theoretical. Most undergrads probably have more debts than assets. They may feel they have nothing to invest. But that’s not true: they have their time to invest, and the same rule about risk applies there. Your early twenties are exactly the time to take insane career risks.<br>这些关于投资的讨论，听起来可能有些理论化。大多数本科生或许负债多于资产，可能会觉得自己没什么可投资的。但事实并非如此：他们可以投资自己的时间，而风险与回报的法则在这里同样适用。二十出头的年纪，正是承担 “疯狂” 职业风险的最佳时期。</p><p>The reason risk is always proportionate to reward is that market forces make it so. People will pay extra for stability. So if you choose stability– by buying bonds, or by going to work for a big company– it’s going to cost you.<br>风险与回报之所以始终成正比，是市场规律作用的结果。人们愿意为 “稳定性” 支付额外成本。因此，如果你选择追求稳定 —— 无论是通过购买债券，还是去大公司工作 —— 都需要为此付出代价（即放弃更高的潜在回报）。</p><p>Riskier career moves pay better on average, because there is less demand for them. Extreme choices like starting a startup are so frightening that most people won’t even try. So you don’t end up having as much competition as you might expect, considering the prizes at stake.<br>平均而言，风险更高的职业选择能带来更高回报，因为愿意选择这类职业的人更少。像创办初创公司这样的极端选择，因风险过高而让大多数人望而却步。因此，尽管潜在回报丰厚，但你面临的竞争，并不会像你想象的那么激烈。</p><p>The math is brutal. While perhaps 9 out of 10 startups fail, the one that succeeds will pay the founders more than 10 times what they would have made in an ordinary job. [3] That’s the sense in which startups pay better “on average.”<br>其中的数学逻辑很直白：或许 10 家初创公司中有 9 家会失败，但成功的那 1 家，能给创始人带来的收益，将是他们从事普通工作的 10 倍以上。[3] 这就是 “从平均水平来看，初创公司回报更高” 的含义。</p><p>Remember that. If you start a startup, you’ll probably fail. Most startups fail. It’s the nature of the business. But it’s not necessarily a mistake to try something that has a 90% chance of failing, if you can afford the risk. Failing at 40, when you have a family to support, could be serious. But if you fail at 22, so what? If you try to start a startup right out of college and it tanks, you’ll end up at 23 broke and a lot smarter. Which, if you think about it, is roughly what you hope to get from a graduate program.<br>请记住这一点：如果你创办初创公司，很可能会失败。大多数初创公司都会失败，这是行业的常态。但如果你的风险承受能力允许，尝试一件有 90% 失败概率的事，未必是错误的。40 岁时失败，可能会很严重，因为你要养家糊口；但 22 岁时失败，又有什么关系呢？如果大学刚毕业就尝试创业，即便失败了，到 23 岁时，你可能身无分文，但会变得更加成熟睿智。仔细想想，这与你从研究生项目中期望获得的成长，其实相差无几。</p><p>Even if your startup does tank, you won’t harm your prospects with employers. To make sure I asked some friends who work for big companies. I asked managers at Yahoo, Google, Amazon, Cisco and Microsoft how they’d feel about two candidates, both 24, with equal ability, one who’d tried to start a startup that tanked, and another who’d spent the two years since college working as a developer at a big company. Every one responded that they’d prefer the guy who’d tried to start his own company. Zod Nazem, who’s in charge of engineering at Yahoo, said:<br>即便你的初创公司失败了，也不会影响你未来找工作的前景。为了确认这一点，我询问了几位在大公司工作的朋友。我问雅虎、谷歌、亚马逊、思科和微软的管理者：面对两位 24 岁、能力相当的求职者，一位曾尝试创办初创公司但失败了，另一位大学毕业后在大公司做了两年开发，他们会更倾向于录用谁？所有人的回答都是，更愿意录用那位尝试过创业的人。雅虎负责工程部门的佐德・纳泽姆（Zod Nazem）说：</p><p>I actually put more value on the guy with the failed startup. And you can quote me!<br>“事实上，我更看重那个创业失败的人。这句话你可以引用！”</p><p>So there you have it. Want to get hired by Yahoo? Start your own company.<br>所以结论很明确：想被雅虎录用吗？先创办一家自己的公司吧。</p><h3 id="The-Man-is-the-Customer"><a href="#The-Man-is-the-Customer" class="headerlink" title="The Man is the Customer"></a><strong>The Man is the Customer</strong></h3><p><strong>“甲方” 是用户</strong></p><p>If even big employers think highly of young hackers who start companies, why don’t more do it? Why are undergrads so conservative? I think it’s because they’ve spent so much time in institutions.<br>既然连大公司的雇主都高度认可那些尝试创业的年轻技术开发者，为什么没有更多年轻人这么做呢？为什么本科生如此保守？我认为，这是因为他们在各类 “机构” 中待得太久了。</p><p>The first twenty years of everyone’s life consists of being piped from one institution to another. You probably didn’t have much choice about the secondary schools you went to. And after high school it was probably understood that you were supposed to go to college. You may have had a few different colleges to choose between, but they were probably pretty similar. So by this point you’ve been riding on a subway line for twenty years, and the next stop seems to be a job.<br>每个人人生的前 20 年，基本都是在 “机构” 之间被 “输送”：你上哪所中学，很可能没有太多选择；高中毕业后，似乎理所当然要去上大学；你或许能在几所大学中选择，但这些大学本质上都大同小异。因此，到大学毕业时，你就像在一条地铁线路上坐了 20 年，而下一站似乎自然而然就是 “找份工作”。</p><p>Actually college is where the line ends. Superficially, going to work for a company may feel like just the next in a series of institutions, but underneath, everything is different. The end of school is the fulcrum of your life, the point where you go from net consumer to net producer.<br>但实际上，大学就是这条 “地铁线路” 的终点。表面上看，去公司工作似乎只是进入了另一个 “机构”，但本质上，一切都变了。学业的结束，是你人生的一个支点 —— 从这一刻起，你从 “纯消费者” 转变为 “纯生产者”。</p><p>The other big change is that now, you’re steering. You can go anywhere you want. So it may be worth standing back and understanding what’s going on, instead of just doing the default thing.<br>另一个重大变化是：现在，你掌握了 “方向盘”，可以去任何你想去的地方。因此，或许你应该停下来，弄清楚当下的处境，而不是盲目地按 “默认选项” 行事。</p><p>All through college, and probably long before that, most undergrads have been thinking about what employers want. But what really matters is what customers want, because they’re the ones who give employers the money to pay you.<br>在整个大学期间，甚至更早之前，大多数本科生都在思考 “雇主想要什么”。但真正重要的，是 “用户想要什么”—— 因为正是用户给了雇主钱，雇主才能给你发工资。</p><p>So instead of thinking about what employers want, you’re probably better off thinking directly about what users want. To the extent there’s any difference between the two, you can even use that to your advantage if you start a company of your own. For example, big companies like docile conformists. But this is merely an artifact of their bigness, not something customers need.<br>因此，与其思考雇主想要什么，不如直接思考用户想要什么。如果这两者之间存在差异，那么创办自己的公司，就能将这种差异转化为你的优势。例如，大公司喜欢顺从听话的员工，但这只是大公司的 “组织特性”，并非用户的需求。</p><h3 id="Grad-School"><a href="#Grad-School" class="headerlink" title="Grad School"></a><strong>Grad School</strong></h3><p><strong>研究生阶段</strong></p><p>I didn’t consciously realize all this when I was graduating from college– partly because I went straight to grad school. Grad school can be a pretty good deal, even if you think of one day starting a startup. You can start one when you’re done, or even pull the ripcord part way through, like the founders of Yahoo and Google.<br>我大学毕业时，并没有清醒地认识到这些 —— 部分原因是我直接去读了研究生。即便你有朝一日想创办初创公司，研究生阶段也可能是个不错的选择。你可以在毕业后创业，甚至可以像雅虎和谷歌的创始人那样，在研究生就读期间就 “中途退出” 去创业。</p><p>Grad school makes a good launch pad for startups, because you’re collected together with a lot of smart people, and you have bigger chunks of time to work on your own projects than an undergrad or corporate employee would. As long as you have a fairly tolerant advisor, you can take your time developing an idea before turning it into a company. David Filo and Jerry Yang started the Yahoo directory in February 1994 and were getting a million hits a day by the fall, but they didn’t actually drop out of grad school and start a company till March 1995.<br>研究生阶段是创业的绝佳跳板：你身边聚集了许多聪明人，而且相比本科生或公司员工，你有更完整的大块时间来做自己的项目。只要你的导师足够宽容，你就可以慢慢打磨自己的想法，再将其转化为一家公司。大卫・费罗（David Filo）和杨致远（Jerry Yang）在 1994 年 2 月推出了雅虎目录，到当年秋天，该目录的日访问量就达到了 100 万次，但他们直到 1995 年 3 月才从研究生阶段退学，正式创办公司。</p><p>You could also try the startup first, and if it doesn’t work, then go to grad school. When startups tank they usually do it fairly quickly. Within a year you’ll know if you’re wasting your time.<br>你也可以先尝试创业，如果失败了再去读研究生。初创公司即便失败，通常也会很快有结果 —— 一年内，你就能知道自己是否在浪费时间。</p><p>If it fails, that is. If it succeeds, you may have to delay grad school a little longer. But you’ll have a much more enjoyable life once there than you would on a regular grad student stipend.<br>当然，这是假设创业失败的情况。如果创业成功了，你可能需要推迟一段时间再去读研究生。但届时，你在研究生阶段的生活，会比靠普通研究生津贴度日要惬意得多。</p><h3 id="Experience"><a href="#Experience" class="headerlink" title="Experience"></a><strong>Experience</strong></h3><p><strong>经验</strong></p><p>Another reason people in their early twenties don’t start startups is that they feel they don’t have enough experience. Most investors feel the same.<br>二十岁出头的人不创办初创公司的另一个原因是，他们觉得自己经验不足。大多数投资者也持相同看法。</p><p>I remember hearing a lot of that word “experience” when I was in college. What do people really mean by it? Obviously it’s not the experience itself that’s valuable, but something it changes in your brain. What’s different about your brain after you have “experience,” and can you make that change happen faster?<br>我记得上大学时经常听到 “经验” 这个词。人们说的 “经验” 到底指什么？显然，有价值的不是经验本身，而是它给你大脑带来的某种改变。拥有 “经验” 后，你的大脑会发生哪些不同的变化？这种变化能否更快地实现？</p><p>I now have some data on this, and I can tell you what tends to be missing when people lack experience. I’ve said that every startup needs three things: to start with good people, to make something users want, and not to spend too much money. It’s the middle one you get wrong when you’re inexperienced. There are plenty of undergrads with enough technical skill to write good software, and undergrads are not especially prone to waste money. If they get something wrong, it’s usually not realizing they have to make something people want.<br>如今我有了一些相关数据，可以告诉你经验不足的人通常欠缺什么。我之前说过，每个初创公司都需要三样东西：从优秀的人才起步、打造用户想要的产品、不浪费过多资金。经验不足时，人们往往会在第二点上出错。很多本科生拥有足够的技术能力来编写优质软件，而且本科生并不特别容易浪费钱。如果他们出了问题，通常是没有意识到必须打造人们真正想要的东西。</p><p>This is not exclusively a failing of the young. It’s common for startup founders of all ages to build things no one wants.<br>这并非年轻人独有的缺点。各个年龄段的初创公司创始人，都经常会打造出无人问津的产品。</p><p>Fortunately, this flaw should be easy to fix. If undergrads were all bad programmers, the problem would be a lot harder. It can take years to learn how to program. But I don’t think it takes years to learn how to make things people want. My hypothesis is that all you have to do is smack hackers on the side of the head and tell them: Wake up. Don’t sit here making up a priori theories about what users need. Go find some users and see what they need.<br>幸运的是，这个缺陷很容易弥补。如果本科生都是糟糕的程序员，那问题就棘手多了，因为学习编程可能需要数年时间。但我认为，学会打造用户想要的产品并不需要数年。我的观点是，你只需要敲醒那些技术人员，告诉他们：醒醒吧。别坐在这儿凭空臆想用户需要什么，去找到一些用户，看看他们真正需要的是什么。</p><p>Most successful startups not only do something very specific, but solve a problem people already know they have.<br>大多数成功的初创公司不仅专注于做某件非常具体的事，还能解决人们早已意识到的自身问题。</p><p>The big change that “experience” causes in your brain is learning that you need to solve people’s problems. Once you grasp that, you advance quickly to the next step, which is figuring out what those problems are. And that takes some effort, because the way software actually gets used, especially by the people who pay the most for it, is not at all what you might expect. For example, the stated purpose of Powerpoint is to present ideas. Its real role is to overcome people’s fear of public speaking. It allows you to give an impressive-looking talk about nothing, and it causes the audience to sit in a dark room looking at slides, instead of a bright one looking at you.<br>“经验” 给大脑带来的重大改变，是让你明白需要去解决人们的问题。一旦理解了这一点，你就能快速进入下一步 —— 弄清楚这些问题具体是什么。而这需要付出一些努力，因为软件的实际使用方式，尤其是那些付费最高的用户对它的使用方式，完全可能和你预想的不一样。比如，PowerPoint 宣称的用途是展示想法，但它真正的作用是帮助人们克服公开演讲的恐惧。它能让你对着毫无实质内容的东西发表一场看似精彩的演讲，还能让听众坐在昏暗的房间里看幻灯片，而不是在明亮的环境中盯着你看。</p><p>This kind of thing is out there for anyone to see. The key is to know to look for it– to realize that having an idea for a startup is not like having an idea for a class project. The goal in a startup is not to write a cool piece of software. It’s to make something people want. And to do that you have to look at users– forget about hacking, and just look at users. This can be quite a mental adjustment, because little if any of the software you write in school even has users.<br>这类情况其实随处可见，关键在于要知道去发现它 —— 要明白，为初创公司构思想法和为课堂作业构思想法是两码事。初创公司的目标不是编写一段酷炫的软件，而是打造人们想要的产品。要做到这一点，你必须关注用户 —— 暂时忘掉编程，只专注于观察用户。这可能需要一个相当大的思维调整，因为你在学校编写的软件，即便有用户，数量也少得可怜。</p><p>A few steps before a Rubik’s Cube is solved, it still looks like a mess. I think there are a lot of undergrads whose brains are in a similar position: they’re only a few steps away from being able to start successful startups, if they wanted to, but they don’t realize it. They have more than enough technical skill. They just haven’t realized yet that the way to create wealth is to make what users want, and that employers are just proxies for users in which risk is pooled.<br>在魔方被还原的前几步，它看起来依然杂乱无章。我认为很多本科生的思维就处于类似状态：只要他们愿意，距离创办成功的初创公司其实只差几步，但他们自己却没有意识到。他们拥有的技术能力已经足够，只是还没明白创造财富的方式是打造用户想要的东西，也没意识到雇主不过是用户的 “代理人”，起到了风险集中的作用。</p><p>If you’re young and smart, you don’t need either of those. You don’t need someone else to tell you what users want, because you can figure it out yourself. And you don’t want to pool risk, because the younger you are, the more risk you should take.<br>如果你年轻又聪明，这两样东西都不需要。你不需要别人告诉你用户想要什么，因为你自己就能弄明白；你也不需要集中风险，因为越年轻，就越应该承担更多风险。</p><h3 id="A-Public-Service-Message"><a href="#A-Public-Service-Message" class="headerlink" title="A Public Service Message"></a><strong>A Public Service Message</strong></h3><p><strong>一个共同的建议</strong></p><p>I’d like to conclude with a joint message from me and your parents. Don’t drop out of college to start a startup. There’s no rush. There will be plenty of time to start companies after you graduate. In fact, it may be just as well to go work for an existing company for a couple years after you graduate, to learn how companies work.<br>最后，我想传达一个我和你们父母共同的建议：不要为了创办初创公司而辍学。不用急，毕业后有足够的时间去开公司。事实上，毕业后先去一家现有公司工作几年，了解公司的运作方式，或许也是个不错的选择。</p><p>And yet, when I think about it, I can’t imagine telling Bill Gates at 19 that he should wait till he graduated to start a company. He’d have told me to get lost. And could I have honestly claimed that he was harming his future– that he was learning less by working at ground zero of the microcomputer revolution than he would have if he’d been taking classes back at Harvard? No, probably not.<br>然而，仔细想想，我无法想象在比尔・盖茨 19 岁时，告诉他应该等毕业再开公司。他肯定会让我走开。而且，我能真诚地说他是在损害自己的未来吗？—— 说他在微型计算机革命的核心地带工作，比回到哈佛上课学到的东西更少？不，很可能不能。</p><p>And yes, while it is probably true that you’ll learn some valuable things by going to work for an existing company for a couple years before starting your own, you’d learn a thing or two running your own company during that time too.<br>诚然，在创办自己的公司之前，去现有公司工作几年可能确实能学到一些有价值的东西，但在这段时间里，经营自己的公司同样能学到不少东西。</p><p>The advice about going to work for someone else would get an even colder reception from the 19 year old Bill Gates. So I’m supposed to finish college, then go work for another company for two years, and then I can start my own? I have to wait till I’m 23? That’s four years. That’s more than twenty percent of my life so far. Plus in four years it will be way too late to make money writing a Basic interpreter for the Altair.<br>“去为别人工作” 这个建议，在 19 岁的比尔・盖茨那里肯定会遭到更冷淡的对待。“所以我得先读完大学，再去另一家公司工作两年，然后才能创办自己的公司？我得等到 23 岁？那可是四年啊，占了我目前人生的 20% 还多。而且四年后，再为阿尔泰电脑编写 Basic 解释器来赚钱，就太晚了。”</p><p>And he’d be right. The Apple II was launched just two years later. In fact, if Bill had finished college and gone to work for another company as we’re suggesting, he might well have gone to work for Apple. And while that would probably have been better for all of us, it wouldn’t have been better for him.<br>而且他说得对。两年后，Apple II 就推出了。事实上，如果比尔按照我们的建议，读完大学后去另一家公司工作，他很可能会去苹果公司。虽然这对我们所有人来说可能是件好事，但对他自己而言并非如此。</p><p>So while I stand by our responsible advice to finish college and then go work for a while before starting a startup, I have to admit it’s one of those things the old tell the young, but don’t expect them to listen to. We say this sort of thing mainly so we can claim we warned you. So don’t say I didn’t warn you.<br>因此，尽管我依然坚持那条负责任的建议 —— 读完大学，先工作一段时间再创办初创公司，但我不得不承认，这是老一辈对年轻人说的那些话之一，并不指望他们会听。我们说这类话，主要是为了日后能说 “我早就提醒过你”。所以，别说我没警告过你。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] The average B-17 pilot in World War II was in his early twenties. (Thanks to Tad Marko for pointing this out.)<br>[1] 二战期间，B-17 轰炸机飞行员的平均年龄在 20 岁出头。（感谢塔德・马尔科指出这一点。）</p><p>[2] If a company tried to pay employees this way, they’d be called unfair. And yet when they buy some startups and not others, no one thinks of calling that unfair.<br>[2] 如果一家公司试图用这种方式给员工发薪水，会被认为是不公平的。但当他们收购某些初创公司而不收购另一些时，却没人觉得这是不公平的。</p><p>[3] The 1&#x2F;10 success rate for startups is a bit of an urban legend. It’s suspiciously neat. My guess is the odds are slightly worse.<br>[3] 初创公司 1&#x2F;10 的成功率有点像都市传说，整齐得令人怀疑。我猜实际成功率可能更低一些。</p><p>Thanks to Jessica Livingston for reading drafts of this, to the friends I promised anonymity to for their opinions about hiring, and to Karen Nguyen and the Berkeley CSUA for organizing this talk.<br>感谢杰西卡・利文斯顿审阅本文初稿，感谢那些我承诺匿名的朋友提供有关招聘的看法，同时感谢凯伦・阮和加州大学伯克利分校计算机科学本科生协会（Berkeley CSUA）组织这次演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公关 “潜水艇”</title>
    <link href="/2025/08/27/the-submarine/"/>
    <url>/2025/08/27/the-submarine/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Submarine"><a href="#The-Submarine" class="headerlink" title="The Submarine"></a>The Submarine</h2><p>原文链接: <a href="https://paulgraham.com/submarine.html">https://paulgraham.com/submarine.html</a></p><p>April 2005</p><p>“Suits make a corporate comeback,” says the New York Times. Why does this sound familiar? Maybe because the suit was also back in February, September 2004, June 2004, March 2004, September 2003, November 2002, April 2002, and February 2002.<br>《纽约时报》称：“西装重回职场。” 为何这话听着如此耳熟？或许是因为 “西装回归” 的说法此前已多次出现 ——2005 年 2 月、2004 年 9 月、2004 年 6 月、2004 年 3 月、2003 年 9 月、2002 年 11 月、2002 年 4 月，还有 2002 年 2 月。</p><p>Why do the media keep running stories saying suits are back? Because PR firms tell them to. One of the most surprising things I discovered during my brief business career was the existence of the PR industry, lurking like a huge, quiet submarine beneath the news. Of the stories you read in traditional media that aren’t about politics, crimes, or disasters, more than half probably come from PR firms.<br>媒体为何总刊登 “西装回归” 的报道？因为这是公关公司让他们这么做的。在我短暂的从商经历中，最令人意外的发现之一，便是公关行业的存在 —— 它像一艘巨大而安静的潜水艇，潜伏在新闻背后。在你从传统媒体上读到的内容里，除了政治、犯罪或灾难相关报道，超过一半的内容很可能都来自公关公司。</p><p>I know because I spent years hunting such “press hits.” Our startup spent its entire marketing budget on PR: at a time when we were assembling our own computers to save money, we were paying a PR firm $16,000 a month. And they were worth it. PR is the news equivalent of search engine optimization; instead of buying ads, which readers ignore, you get yourself inserted directly into the stories. [1]<br>我之所以清楚，是因为我曾花数年时间争取这类 “媒体曝光机会”。我们的初创公司将全部营销预算都投入了公关：当时为了省钱，我们甚至自己组装电脑，却每月向一家公关公司支付 1.6 万美元。但这笔钱花得值。公关之于新闻，就好比搜索引擎优化（SEO）之于网络 —— 你无需购买读者会忽略的广告，而是能直接将自身信息植入报道中。[1]</p><p>Our PR firm was one of the best in the business. In 18 months, they got press hits in over 60 different publications. And we weren’t the only ones they did great things for. In 1997 I got a call from another startup founder considering hiring them to promote his company. I told him they were PR gods, worth every penny of their outrageous fees. But I remember thinking his company’s name was odd. Why call an auction site “eBay”?<br>我们合作的公关公司是业内顶尖的之一。18 个月里，他们帮我们在 60 多家不同刊物上获得了曝光。而且，他们并非只给我们带来了出色成果。1997 年，另一家初创公司的创始人给我打电话，他正考虑雇这家公关公司推广自己的企业。我告诉他，这些人就是 “公关之神”，哪怕收费高得离谱，每一分钱都花得值。但我记得当时觉得他公司的名字很奇怪 —— 一个拍卖网站，为什么要叫 “eBay” 呢？</p><h3 id="Symbiosis"><a href="#Symbiosis" class="headerlink" title="Symbiosis"></a><strong>Symbiosis</strong></h3><p><strong>共生关系</strong></p><p>PR is not dishonest. Not quite. In fact, the reason the best PR firms are so effective is precisely that they aren’t dishonest. They give reporters genuinely valuable information. A good PR firm won’t bug reporters just because the client tells them to; they’ve worked hard to build their credibility with reporters, and they don’t want to destroy it by feeding them mere propaganda.<br>公关并非不诚实，至少不完全是。事实上，顶尖公关公司之所以效果显著，恰恰是因为它们不搞欺骗。它们会给记者提供真正有价值的信息。一家优秀的公关公司不会只因为客户要求，就去纠缠记者；它们辛辛苦苦才在记者群体中建立起信誉，不愿因只给记者灌输宣传内容而毁掉这份信任。</p><p>If anyone is dishonest, it’s the reporters. The main reason PR firms exist is that reporters are lazy. Or, to put it more nicely, overworked. Really they ought to be out there digging up stories for themselves. But it’s so tempting to sit in their offices and let PR firms bring the stories to them. After all, they know good PR firms won’t lie to them.<br>如果说有谁不诚实，那应该是记者。公关公司之所以存在，主要原因是记者们懒惰 —— 或者说得委婉些，是过度劳累。按理说，他们本该主动出去挖掘新闻线索，但坐在办公室里等着公关公司送新闻上门，显然更省力。毕竟，他们知道优秀的公关公司不会对自己撒谎。</p><p>A good flatterer doesn’t lie, but tells his victim selective truths (what a nice color your eyes are). Good PR firms use the same strategy: they give reporters stories that are true, but whose truth favors their clients.<br>出色的奉承者不会说谎，而是会对奉承对象选择性地陈述事实（比如 “您的眼睛真好看”）。优秀的公关公司也采用同样的策略：它们给记者的报道内容是真实的，但这些 “真实” 会偏向其客户。</p><p>For example, our PR firm often pitched stories about how the Web let small merchants compete with big ones. This was perfectly true. But the reason reporters ended up writing stories about this particular truth, rather than some other one, was that small merchants were our target market, and we were paying the piper.<br>比如，我们的公关公司经常向媒体推销这样的报道角度：互联网如何帮助小商家与大公司竞争。这完全是事实。但记者们最终选择报道这个 “事实”，而非其他事实，原因在于小商家是我们的目标客户群体 —— 毕竟，是我们在为公关服务付费。</p><p>Different publications vary greatly in their reliance on PR firms. At the bottom of the heap are the trade press, who make most of their money from advertising and would give the magazines away for free if advertisers would let them. [2] The average trade publication is a bunch of ads, glued together by just enough articles to make it look like a magazine. They’re so desperate for “content” that some will print your press releases almost verbatim, if you take the trouble to write them to read like articles.<br>不同刊物对公关公司的依赖程度差异巨大。处于最底层的是行业刊物 —— 它们的收入主要来自广告，若广告商允许，它们甚至愿意免费赠送杂志。[2] 普通的行业刊物满是广告，只靠少量文章勉强串联，好让它看起来像一本正经的杂志。它们对 “内容” 的需求极其迫切，只要你费心把新闻稿写得像一篇正常文章，有些刊物甚至会几乎一字不差地刊登。</p><p>At the other extreme are publications like the New York Times and the Wall Street Journal. Their reporters do go out and find their own stories, at least some of the time. They’ll listen to PR firms, but briefly and skeptically. We managed to get press hits in almost every publication we wanted, but we never managed to crack the print edition of the Times. [3]<br>与之相反，《纽约时报》《华尔街日报》这类顶级刊物则完全不同。它们的记者至少在部分时间里，会主动外出挖掘自己的新闻线索。他们会听公关公司的推介，但往往很简短，且带着怀疑态度。我们几乎在所有想登上的刊物上都获得了曝光，却始终没能打入《纽约时报》的纸质版。[3]</p><p>The weak point of the top reporters is not laziness, but vanity. You don’t pitch stories to them. You have to approach them as if you were a specimen under their all-seeing microscope, and make it seem as if the story you want them to run is something they thought of themselves.<br>顶级记者的弱点不在于懒惰，而在于虚荣心。你不能直接向他们 “推销” 新闻线索，而必须把自己当作他们 “全知视角显微镜” 下的研究样本，让他们觉得你希望他们报道的内容，是他们自己想到的。</p><p>Our greatest PR coup was a two-part one. We estimated, based on some fairly informal math, that there were about 5000 stores on the Web. We got one paper to print this number, which seemed neutral enough. But once this “fact” was out there in print, we could quote it to other publications, and claim that with 1000 users we had 20% of the online store market.<br>我们最成功的一次公关操作分两步走。通过一些相当不正式的估算，我们认为当时网上大约有 5000 家网店。我们先让一家报社刊登了这个数字 —— 它看起来足够中立。但一旦这个 “事实” 见报，我们就能向其他刊物引用它，进而宣称：我们拥有 1000 名用户，占据了 20% 的网店市场份额。</p><p>This was roughly true. We really did have the biggest share of the online store market, and 5000 was our best guess at its size. But the way the story appeared in the press sounded a lot more definite.<br>这大致是事实 —— 我们确实在网店市场占据最大份额，而 5000 家也是我们对市场规模的最佳估算。但报道呈现这个信息的方式，听起来要确凿得多。</p><p>Reporters like definitive statements. For example, many of the stories about Jeremy Jaynes’s conviction say that he was one of the 10 worst spammers. This “fact” originated in Spamhaus’s ROKSO list, which I think even Spamhaus would admit is a rough guess at the top spammers. The first stories about Jaynes cited this source, but now it’s simply repeated as if it were part of the indictment. [4]<br>记者们喜欢绝对化的表述。比如，在报道杰里米・杰恩斯（Jeremy Jaynes）因发送垃圾邮件被定罪的新闻中，许多文章都称他是 “十大垃圾邮件发送者之一”。这个 “事实” 源自反垃圾邮件组织 Spamhaus 的 ROKSO 名单，但即便 Spamhaus 自己也会承认，这份名单只是对 “顶级垃圾邮件发送者” 的粗略估算。最初报道杰恩斯的文章还会引用这个来源，但现在，这个说法被直接反复提及，仿佛它是法庭起诉书的一部分。[4]</p><p>All you can say with certainty about Jaynes is that he was a fairly big spammer. But reporters don’t want to print vague stuff like “fairly big.” They want statements with punch, like “top ten.” And PR firms give them what they want. Wearing suits, we’re told, will make us 3.6 percent more productive.<br>关于杰恩斯，唯一能确定的是他是个 “相当大的垃圾邮件发送者”。但记者们不愿刊登 “相当大” 这种模糊的表述，他们想要有冲击力的说法，比如 “前十”。而公关公司正好能满足他们的需求 —— 就像有人告诉我们，“穿西装能让工作效率提升 3.6%” 一样。</p><h3 id="Buzz"><a href="#Buzz" class="headerlink" title="Buzz"></a><strong>Buzz</strong></h3><p><strong>造势宣传</strong></p><p>Where the work of PR firms really does get deliberately misleading is in the generation of “buzz.” They usually feed the same story to several different publications at once. And when readers see similar stories in multiple places, they think there is some important trend afoot. Which is exactly what they’re supposed to think.<br>公关公司的工作中，真正带有刻意误导性的部分，是制造 “造势宣传”（buzz）。他们通常会把同一个新闻素材同时提供给多家不同刊物。当读者在多个地方看到类似报道时，就会以为某种重要趋势正在形成 —— 而这正是公关公司希望他们产生的想法。</p><p>When Windows 95 was launched, people waited outside stores at midnight to buy the first copies. None of them would have been there without PR firms, who generated such a buzz in the news media that it became self-reinforcing, like a nuclear chain reaction.<br>Windows 95 发布时，人们会在午夜时分在商店外排队，只为抢购首批产品。若没有公关公司，这一切都不会发生 —— 它们在新闻媒体上制造的热度不断自我强化，就像核链式反应一样。</p><p>I doubt PR firms realize it yet, but the Web makes it possible to track them at work. If you search for the obvious phrases, you turn up several efforts over the years to place stories about the return of the suit. For example, the Reuters article that got picked up by USA Today in September 2004. “The suit is back,” it begins.<br>我怀疑公关公司还没意识到，互联网让追踪它们的操作变得可行。只要搜索那些明显的关键词，你就能发现多年来他们多次推动 “西装回归” 相关报道的痕迹。比如，2004 年 9 月路透社发表的一篇文章，后来被《今日美国》转载，文章一开头就写道：“西装回来了。”</p><p>Trend articles like this are almost always the work of PR firms. Once you know how to read them, it’s straightforward to figure out who the client is. With trend stories, PR firms usually line up one or more “experts” to talk about the industry generally. In this case we get three: the NPD Group, the creative director of GQ, and a research director at Smith Barney. [5] When you get to the end of the experts, look for the client. And bingo, there it is: The Men’s Wearhouse.<br>这类 “趋势报道” 几乎都是公关公司的手笔。只要你掌握了判断方法，就能轻松找出背后的客户。在推广趋势类报道时，公关公司通常会安排一位或多位 “专家” 从行业整体角度发表评论。在上述 “西装回归” 的报道中，就有三位专家出镜：NPD 集团（市场调研公司）代表、《GQ》杂志创意总监，以及美邦银行（Smith Barney）的研究总监。[5] 等专家评论结束后，你再找找客户是谁 —— 瞧，答案来了：男士服饰连锁店 “Men’s Wearhouse”。</p><p>Not surprising, considering The Men’s Wearhouse was at that moment running ads saying “The Suit is Back.” Talk about a successful press hit– a wire service article whose first sentence is your own ad copy.<br>这并不奇怪，因为当时 Men’s Wearhouse 正在投放的广告标语就是 “西装回来了”。这堪称一次极致成功的媒体曝光 —— 一篇通讯社报道的第一句话，竟然是自家的广告文案。</p><p>The secret to finding other press hits from a given pitch is to realize that they all started from the same document back at the PR firm. Search for a few key phrases and the names of the clients and the experts, and you’ll turn up other variants of this story.<br>要找出同一公关推广活动下的其他曝光报道，关键在于明白这些报道都源自公关公司的同一份原始素材。只要搜索几个关键词，再加上客户和专家的名字，你就能找到这一报道的其他版本。</p><p>Casual fridays are out and dress codes are in writes Diane E. Lewis in The Boston Globe. In a remarkable coincidence, Ms. Lewis’s industry contacts also include the creative director of GQ.<br>《波士顿环球报》的黛安・E・刘易斯（Diane E. Lewis）写道：“‘休闲星期五’已成过去，着装规范重回职场。” 巧合的是，刘易斯女士的行业人脉中，也包括《GQ》杂志的那位创意总监。</p><p>Ripped jeans and T-shirts are out, writes Mary Kathleen Flynn in US News &amp; World Report. And she too knows the creative director of GQ.<br>《美国新闻与世界报道》的玛丽・凯瑟琳・弗林（Mary Kathleen Flynn）则写道：“破洞牛仔裤和 T 恤已过时。” 她同样认识《GQ》的那位创意总监。</p><p>Men’s suits are back writes Nicole Ford in <a href="https://sexbuzz.com/">Sexbuzz.Com</a> (“the ultimate men’s entertainment magazine”).<br>“男士西装回归”—— 妮可・福特（Nicole Ford）在<a href="https://sexbuzz.com/">Sexbuzz.Com</a>（号称 “终极男士娱乐杂志”）上如此写道。</p><p>Dressing down loses appeal as men suit up at the office writes Tenisha Mercer of The Detroit News.<br>《底特律新闻报》的特尼莎・默瑟（Tenisha Mercer）则报道：“‘休闲着装’魅力不再，男士们重回办公室西装时代。”</p><p>Now that so many news articles are online, I suspect you could find a similar pattern for most trend stories placed by PR firms. I propose we call this new sport “PR diving,” and I’m sure there are far more striking examples out there than this clump of five stories.<br>如今大量新闻都已上网，我想，大多数由公关公司推动的趋势报道，都能找到类似的规律。我建议将这种 “追踪公关痕迹” 的行为称为 “公关潜水”（PR diving），而且我相信，除了这五篇报道之外，还有更多更典型的例子等着被发现。</p><h3 id="Online"><a href="#Online" class="headerlink" title="Online"></a><strong>Online</strong></h3><p><strong>网络媒体时代</strong></p><p>After spending years chasing them, it’s now second nature to me to recognize press hits for what they are. But before we hired a PR firm I had no idea where articles in the mainstream media came from. I could tell a lot of them were crap, but I didn’t realize why.<br>多年来一直在争取媒体曝光，如今我已能本能地识别出哪些报道是公关推动的。但在我们雇公关公司之前，我根本不知道主流媒体的文章是从哪来的。我能看出很多文章毫无价值，却不知道背后的原因。</p><p>Remember the exercises in critical reading you did in school, where you had to look at a piece of writing and step back and ask whether the author was telling the whole truth? If you really want to be a critical reader, it turns out you have to step back one step further, and ask not just whether the author is telling the truth, but why he’s writing about this subject at all.<br>还记得上学时做的批判性阅读练习吗？当时老师会让你读完一篇文章后退一步思考：作者是否说出了全部真相？但如果真想成为一名有批判意识的读者，你需要再退一步 —— 不仅要问作者是否在说真话，还要问他为什么要写这个主题。</p><p>Online, the answer tends to be a lot simpler. Most people who publish online write what they write for the simple reason that they want to. You can’t see the fingerprints of PR firms all over the articles, as you can in so many print publications– which is one of the reasons, though they may not consciously realize it, that readers trust bloggers more than Business Week.<br>在网络上，这个问题的答案往往简单得多。大多数网络创作者写东西，纯粹是因为自己想写。你不会像在大量纸质刊物中那样，在网络文章里看到公关公司的 “指纹”—— 这也是读者更信任博主而非《商业周刊》的原因之一，尽管读者自己可能没意识到这一点。</p><p>I was talking recently to a friend who works for a big newspaper. He thought the print media were in serious trouble, and that they were still mostly in denial about it. “They think the decline is cyclic,” he said. “Actually it’s structural.”<br>最近我和一位在大报社工作的朋友聊天，他认为纸质媒体正面临严重危机，而且大多数从业者仍在逃避现实。“他们觉得销量下滑是周期性的，” 他说，“但实际上，这是结构性的衰退。”</p><p>In other words, the readers are leaving, and they’re not coming back.<br>换句话说，读者正在流失，而且再也不会回来了。</p><p>Why? I think the main reason is that the writing online is more honest. Imagine how incongruous the New York Times article about suits would sound if you read it in a blog:<br>The urge to look corporate– sleek, commanding, prudent, yet with just a touch of hubris on your well-cut sleeve– is an unexpected development in a time of business disgrace.<br>为什么会这样？我认为主要原因是网络写作更诚实。试想，如果《纽约时报》那篇关于西装的报道出现在博客上，会显得多么不协调：<br>“在商业信誉受损的当下，人们竟渴望展现职场形象 —— 利落、威严、审慎，剪裁精良的衣袖上还带着一丝自信傲慢 —— 这着实出人意料。”</p><p>The problem with this article is not just that it originated in a PR firm. The whole tone is bogus. This is the tone of someone writing down to their audience.<br>这篇文章的问题不仅在于它源自公关公司，更在于其整体语气的虚假 —— 那是一种居高临下、迎合读者的腔调。</p><p>Whatever its flaws, the writing you find online is authentic. It’s not mystery meat cooked up out of scraps of pitch letters and press releases, and pressed into molds of zippy journalese. It’s people writing what they think.<br>无论存在多少缺陷，网络上的文字都是真实的。它们不是用公关推介信和新闻稿的边角料拼凑成的 “谜之肉糜”，也不是套着花哨新闻用语模板的产物 —— 它们是人们在写下自己真实的想法。</p><p>I didn’t realize, till there was an alternative, just how artificial most of the writing in the mainstream media was. I’m not saying I used to believe what I read in Time and Newsweek. Since high school, at least, I’ve thought of magazines like that more as guides to what ordinary people were being told to think than as sources of information. But I didn’t realize till the last few years that writing for publication didn’t have to mean writing that way. I didn’t realize you could write as candidly and informally as you would if you were writing to a friend.<br>在有了网络这个替代品之前，我从未意识到主流媒体的大部分文字竟如此虚假。我不是说我以前会相信《时代》和《新闻周刊》上的内容 —— 至少从高中起，我就觉得这类杂志更像是 “普通人被灌输何种想法” 的指南，而非信息来源。但直到最近几年我才明白，为 “发表” 而写作，不一定要用那种虚假的腔调；我才意识到，写作可以像给朋友写信一样坦诚、随意。</p><p>Readers aren’t the only ones who’ve noticed the change. The PR industry has too. A hilarious article on the site of the PR Society of America gets to the heart of the matter:<br>Bloggers are sensitive about becoming mouthpieces for other organizations and companies, which is the reason they began blogging in the first place.<br>注意到这种变化的不只是读者，公关行业也察觉到了。美国公关协会（PR Society of America）网站上有一篇有趣的文章，一语道破了核心问题：<br>“博主们对成为其他组织或公司的传声筒十分敏感 —— 而这正是他们开始写博客的初衷。”</p><p>PR people fear bloggers for the same reason readers like them. And that means there may be a struggle ahead. As this new kind of writing draws readers away from traditional media, we should be prepared for whatever PR mutates into to compensate. When I think how hard PR firms work to score press hits in the traditional media, I can’t imagine they’ll work any less hard to feed stories to bloggers, if they can figure out how.<br>公关人员害怕博主，恰恰是因为读者喜欢博主 —— 这意味着未来可能会出现一场角力。随着这种新型写作方式将读者从传统媒体吸引走，我们应当做好准备，应对公关行业为弥补损失而发生的任何 “变异”。想想公关公司在传统媒体上争取曝光时付出的努力，我敢肯定，只要找到方法，它们在向博主推送内容时，只会更卖力，不会更懈怠。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] PR has at least one beneficial feature: it favors small companies. If PR didn’t work, the only alternative would be to advertise, and only big companies can afford that.<br>[1] 公关至少有一个好处：它对小公司有利。如果公关无效，企业唯一的宣传选择就是投放广告 —— 而只有大公司才承担得起广告费用。</p><p>[2] Advertisers pay less for ads in free publications, because they assume readers ignore something they get for free. This is why so many trade publications nominally have a cover price and yet give away free subscriptions with such abandon.<br>[2] 广告商在免费刊物上投放广告时付费更低，因为他们认为读者会忽视免费获得的东西。这就是为什么许多行业刊物名义上有封面定价，却又随意赠送免费订阅的原因。</p><p>[3] Different sections of the Times vary so much in their standards that they’re practically different papers. Whoever fed the style section reporter this story about suits coming back would have been sent packing by the regular news reporters.<br>[3] 《纽约时报》不同版面的标准差异极大，几乎相当于不同的报纸。给时尚版记者提供 “西装回归” 素材的人，若去找常规新闻版的记者，肯定会被拒之门外。</p><p>[4] The most striking example I know of this type is the “fact” that the Internet worm of 1988 infected 6000 computers. I was there when it was cooked up, and this was the recipe: someone guessed that there were about 60,000 computers attached to the Internet, and that the worm might have infected ten percent of them.<br>Actually no one knows how many computers the worm infected, because the remedy was to reboot them, and this destroyed all traces. But people like numbers. And so this one is now replicated all over the Internet, like a little worm of its own.<br>[4] 这类 “绝对化事实” 中，我所知最典型的例子是 “1988 年互联网蠕虫病毒感染了 6000 台电脑”。这个数字被编造出来时我就在场，其 “炮制过程” 是这样的：有人猜测当时接入互联网的电脑约有 6 万台，而蠕虫病毒可能感染了其中的 10%。<br>事实上，没人知道病毒到底感染了多少台电脑 —— 因为解决办法是重启电脑，而重启会销毁所有感染痕迹。但人们就喜欢具体数字，于是这个数字如今在互联网上被反复引用，就像一条小小的 “数字蠕虫”。</p><p>[5] Not all were necessarily supplied by the PR firm. Reporters sometimes call a few additional sources on their own, like someone adding a few fresh vegetables to a can of soup.<br>[5] 并非所有专家都一定是公关公司安排的。记者有时会自己额外联系几个信息源，就像有人在罐头汤里加几片新鲜蔬菜一样。</p><p>Thanks to Ingrid Basset, Trevor Blackwell, Sarah Harlin, Jessica Livingston, Jackie McDonough, Robert Morris, and Aaron Swartz (who also found the PRSA article) for reading drafts of this.<br>感谢英格丽德・巴塞特（Ingrid Basset）、特雷弗・布莱克威尔（Trevor Blackwell）、萨拉・哈林（Sarah Harlin）、杰西卡・利文斯顿（Jessica Livingston）、杰姬・麦克多诺（Jackie McDonough）、罗伯特・莫里斯（Robert Morris）以及亚伦・斯沃茨（Aaron Swartz，他还找到了美国公关协会的那篇文章）审阅本文初稿。</p><p>Correction: Earlier versions used a recent Business Week article mentioning del.icio.us as an example of a press hit, but Joshua Schachter tells me it was spontaneous.<br>更正：早期版本中，曾以《商业周刊》近期一篇提及 del.icio.us（社交书签网站）的文章为例，说明其是公关推动的曝光报道，但约书亚・沙克特（Joshua Schachter，del.icio.us 创始人）告诉我，该报道是自发撰写的，与公关无关。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么聪明人会有糟糕的想法</title>
    <link href="/2025/08/26/why-smart-people-have-bad-ideas/"/>
    <url>/2025/08/26/why-smart-people-have-bad-ideas/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-Smart-People-Have-Bad-Ideas"><a href="#Why-Smart-People-Have-Bad-Ideas" class="headerlink" title="Why Smart People Have Bad Ideas"></a>Why Smart People Have Bad Ideas</h2><p>原文链接: <a href="https://paulgraham.com/bronze.html">https://paulgraham.com/bronze.html</a></p><p>April 2005</p><p>This summer, as an experiment, some friends and I are giving seed funding to a bunch of new startups. It’s an experiment because we’re prepared to fund younger founders than most investors would. That’s why we’re doing it during the summer—so even college students can participate.<br>今年夏天，作为一项实验，我和几位朋友将为一批新的初创公司提供种子资金。这之所以是一项实验，是因为我们愿意为比大多数投资者所接受的更年轻的创始人提供资金。这也是我们选择在夏天开展这项计划的原因 —— 这样即使是大学生也能参与进来。</p><p>We know from Google and Yahoo that grad students can start successful startups. And we know from experience that some undergrads are as capable as most grad students. The accepted age for startup founders has been creeping downward. We’re trying to find the lower bound.<br>从谷歌（Google）和雅虎（Yahoo）的例子中我们知道，研究生可以创办成功的初创公司。而根据我们的经验，有些本科生的能力并不亚于大多数研究生。初创公司创始人的普遍接受年龄一直在逐渐降低，我们正试图找到这个年龄的下限。</p><p>The deadline has now passed, and we’re sifting through 227 applications. We expected to divide them into two categories, promising and unpromising. But we soon saw we needed a third: promising people with unpromising ideas. [1]<br>目前申请截止日期已过，我们正在筛选 227 份申请。我们原本预计会将这些申请分为两类：有潜力的和无潜力的。但很快我们发现，还需要第三类：有潜力的人，却带着无潜力的想法。[1]</p><h3 id="The-Artix-Phase"><a href="#The-Artix-Phase" class="headerlink" title="The Artix Phase"></a><strong>The Artix Phase</strong></h3><p><strong>阿尔蒂克斯（Artix）阶段</strong></p><p>We should have expected this. It’s very common for a group of founders to go through one lame idea before realizing that a startup has to make something people will pay for. In fact, we ourselves did.<br>我们早该想到这种情况。对于一群创始人来说，在意识到 “初创公司必须做出人们愿意付费购买的东西” 之前，先经历一个蹩脚的想法是很常见的事。事实上，我们自己就有过这样的经历。</p><p>Viaweb wasn’t the first startup Robert Morris and I started. In January 1995, we and a couple friends started a company called Artix. The plan was to put art galleries on the Web. In retrospect, I wonder how we could have wasted our time on anything so stupid. Galleries are not especially excited about being on the Web even now, ten years later. They don’t want to have their stock visible to any random visitor, like an antique store. [2]<br>维亚网（Viaweb）并非我和罗伯特・莫里斯（Robert Morris）创办的第一家初创公司。1995 年 1 月，我们和另外几个朋友创办了一家名为 “阿尔蒂克斯（Artix）” 的公司，计划是帮艺术画廊搭建网站。现在回想起来，我都纳闷当时怎么会在这么愚蠢的事情上浪费时间。即便在十年后的今天，艺术画廊对于上网这件事也没多大热情。它们不想像古董店那样，让任何随机访客都能看到自己的藏品。[2]</p><p>Besides which, art dealers are the most technophobic people on earth. They didn’t become art dealers after a difficult choice between that and a career in the hard sciences. Most of them had never seen the Web before we came to tell them why they should be on it. Some didn’t even have computers. It doesn’t do justice to the situation to describe it as a hard sell; we soon sank to building sites for free, and it was hard to convince galleries even to do that.<br>此外，艺术品经销商是世界上最惧怕技术的人群。他们选择当艺术品经销商，并非是在这个职业和硬科学领域职业之间做了艰难抉择后才决定的。在我们上门劝说他们 “为何应该上网” 之前，大多数人甚至从未见过互联网，有些人连电脑都没有。把这种情况描述成 “难推销” 都算是轻的了 —— 很快我们就沦落到免费帮他们建网站，即便如此，也很难说服画廊接受。</p><p>Gradually it dawned on us that instead of trying to make Web sites for people who didn’t want them, we could make sites for people who did. In fact, software that would let people who wanted sites make their own. So we ditched Artix and started a new company, Viaweb, to make software for building online stores. That one succeeded.<br>渐渐地我们意识到，与其试图给不想要网站的人建网站，不如给真正需要网站的人提供服务。事实上，我们可以开发一款软件，让那些想要网站的人自己就能搭建。于是我们放弃了 Artix，创办了一家新公司 ——Viaweb，专门开发用于搭建在线商店的软件。这家公司最终取得了成功。</p><p>We’re in good company here. Microsoft was not the first company Paul Allen and Bill Gates started either. The first was called Traf-o-data. It does not seem to have done as well as Micro-soft.<br>有类似经历的不止我们。微软（Microsoft）也不是保罗・艾伦（Paul Allen）和比尔・盖茨（Bill Gates）创办的第一家公司。他们的第一家公司名叫 “交通数据（Traf-o-data）”，其发展似乎远不如后来的微软。</p><p>In Robert’s defense, he was skeptical about Artix. I dragged him into it. [3] But there were moments when he was optimistic. And if we, who were 29 and 30 at the time, could get excited about such a thoroughly boneheaded idea, we should not be surprised that hackers aged 21 or 22 are pitching us ideas with little hope of making money.<br>说句公道话，罗伯特当初就对 Artix 持怀疑态度，是我拉他入伙的。[3] 但他偶尔也会有乐观的时候。既然当时 29 岁和 30 岁的我们，都能对这样一个完全愚蠢的想法感到兴奋，那么对于 21、22 岁的技术达人向我们提出那些几乎没希望赚钱的想法，我们也不该感到惊讶。</p><h3 id="The-Still-Life-Effect"><a href="#The-Still-Life-Effect" class="headerlink" title="The Still Life Effect"></a><strong>The Still Life Effect</strong></h3><p><strong>静物画效应</strong></p><p>Why does this happen? Why do good hackers have bad business ideas?<br>为什么会出现这种情况？为什么优秀的技术达人会有糟糕的商业想法？</p><p>Let’s look at our case. One reason we had such a lame idea was that it was the first thing we thought of. I was in New York trying to be a starving artist at the time (the starving part is actually quite easy), so I was haunting galleries anyway. When I learned about the Web, it seemed natural to mix the two. Make Web sites for galleries—that’s the ticket!<br>先看看我们自己的例子。我们会有如此蹩脚的想法，原因之一是它是我们想到的第一个点子。当时我在纽约，试图成为一名 “穷困潦倒的艺术家”（其实 “穷困潦倒” 这部分还挺容易实现的），所以经常泡在画廊里。当我了解到互联网后，觉得把 “画廊” 和 “互联网” 结合起来是件很自然的事 —— 帮画廊建网站，这主意肯定行！</p><p>If you’re going to spend years working on something, you’d think it might be wise to spend at least a couple days considering different ideas, instead of going with the first that comes into your head. You’d think. But people don’t. In fact, this is a constant problem when you’re painting still lifes. You plonk down a bunch of stuff on a table, and maybe spend five or ten minutes rearranging it to look interesting. But you’re so impatient to get started painting that ten minutes of rearranging feels very long. So you start painting. Three days later, having spent twenty hours staring at it, you’re kicking yourself for having set up such an awkward and boring composition, but by then it’s too late.<br>如果你打算花好几年时间做一件事，按理说，至少花几天时间多考虑几个不同的想法，而不是想到第一个就着手去做，会是更明智的选择。按理说是这样，但人们往往不会这么做。事实上，这就和画静物画时总会遇到的问题一样：你把一堆东西随意摆在桌子上，或许花个五到十分钟重新摆放，让它看起来更有吸引力。但你太急于开始作画，觉得十分钟的摆放时间都格外漫长，于是就直接动笔了。三天后，在花了二十个小时盯着这幅画看之后，你会懊悔当初怎么摆出了这么别扭又乏味的构图，但此时已经为时已晚。</p><p>Part of the problem is that big projects tend to grow out of small ones. You set up a still life to make a quick sketch when you have a spare hour, and days later you’re still working on it. I once spent a month painting three versions of a still life I set up in about four minutes. At each point (a day, a week, a month) I thought I’d already put in so much time that it was too late to change.<br>部分问题在于，大型项目往往是由小型项目发展而来的。你可能只是在空闲时想快速画张静物速写，于是随意摆了个构图，可几天之后却还在对着这个构图创作。我曾经花了一个月时间，根据一个仅用四分钟摆好的静物构图，画了三个不同版本。在每个节点上（一天后、一周后、一个月后），我都觉得自己已经投入了太多时间，现在改变已经太晚了。</p><p>So the biggest cause of bad ideas is the still life effect: you come up with a random idea, plunge into it, and then at each point (a day, a week, a month) feel you’ve put so much time into it that this must be the idea.<br>因此，糟糕想法产生的最大原因就是 “静物画效应”：你偶然想到一个点子，立刻全身心投入；之后在每个节点（一天、一周、一个月后），都因为已经投入了大量时间，而坚信这个点子一定是对的。</p><p>How do we fix that? I don’t think we should discard plunging. Plunging into an idea is a good thing. The solution is at the other end: to realize that having invested time in something doesn’t make it good.<br>如何解决这个问题呢？我认为我们不该放弃 “全身心投入”—— 投入到一个想法中本身是件好事。解决方案在于另一端：要意识到，在某件事上投入了时间，并不意味着这件事本身是有价值的。</p><p>This is clearest in the case of names. Viaweb was originally called Webgen, but we discovered someone else had a product called that. We were so attached to our name that we offered him 5% of the company if he’d let us have it. But he wouldn’t, so we had to think of another. [4] The best we could do was Viaweb, which we disliked at first. It was like having a new mother. But within three days we loved it, and Webgen sounded lame and old-fashioned.<br>公司名称的例子最能说明这一点。Viaweb 最初叫 “Webgen”，但我们发现已经有人用这个名字推出了产品。当时我们对 “Webgen” 这个名字极其执着，甚至提出愿意把公司 5% 的股份给他，只求他能把这个名字让给我们。但他拒绝了，我们只好另想名字。[4] 最后我们能想到的最好的名字就是 “Viaweb”，一开始我们都很不喜欢它，那种感觉就像突然换了个新妈妈。但三天后，我们就爱上了这个名字，反而觉得 “Webgen” 又蹩脚又老气。</p><p>If it’s hard to change something so simple as a name, imagine how hard it is to garbage-collect an idea. A name only has one point of attachment into your head. An idea for a company gets woven into your thoughts. So you must consciously discount for that. Plunge in, by all means, but remember later to look at your idea in the harsh light of morning and ask: is this something people will pay for? Is this, of all the things we could make, the thing people will pay most for?<br>如果连 “改个名字” 这么简单的事都这么难，可想而知，要 “抛弃一个想法” 有多不容易。一个名字在你脑海中只有一个附着点，而一个公司的想法却会编织进你的整个思绪里。因此，你必须有意识地克服这种执念。当然，你可以全身心投入一个想法，但之后一定要冷静下来审视它，问问自己：人们会为这个东西付钱吗？在所有我们能做的事情里，这是人们最愿意花钱购买的吗？</p><h3 id="Muck"><a href="#Muck" class="headerlink" title="Muck"></a><strong>Muck</strong></h3><p><strong>脏活与回报</strong></p><p>The second mistake we made with Artix is also very common. Putting galleries on the Web seemed cool.<br>我们在 Artix 项目上犯的第二个错误也很常见：我们觉得 “帮画廊建网站” 这件事听起来很酷。</p><p>One of the most valuable things my father taught me is an old Yorkshire saying: where there’s muck, there’s brass. Meaning that unpleasant work pays. And more to the point here, vice versa. Work people like doesn’t pay well, for reasons of supply and demand. The most extreme case is developing programming languages, which doesn’t pay at all, because people like it so much they do it for free.<br>父亲教给我的最有价值的东西之一，是一句古老的约克郡俗语：“哪里有脏活，哪里就有钱赚（where there’s muck, there’s brass）”。意思是，那些没人愿意做的不体面的工作往往报酬丰厚。而更关键的一点是，反过来也成立：人们喜欢做的工作，报酬通常不高，这是供需关系决定的。最极端的例子就是开发编程语言 —— 这份工作几乎没有报酬，因为人们太喜欢做了，甚至愿意免费做。</p><p>When we started Artix, I was still ambivalent about business. I wanted to keep one foot in the art world. Big, big, mistake. Going into business is like a hang-glider launch: you’d better do it wholeheartedly, or not at all. The purpose of a company, and a startup especially, is to make money. You can’t have divided loyalties.<br>创办 Artix 的时候，我对 “做生意” 还抱有矛盾心理 —— 我既想创业，又想在艺术圈保留一席之地。这是一个天大的错误。创业就像悬挂式滑翔机起飞：你要么全身心投入，要么就别开始。公司（尤其是初创公司）的核心目标就是赚钱，你不能三心二意。</p><p>Which is not to say that you have to do the most disgusting sort of work, like spamming, or starting a company whose only purpose is patent litigation. What I mean is, if you’re starting a company that will do something cool, the aim had better be to make money and maybe be cool, not to be cool and maybe make money.<br>这并不是说你必须做最令人反感的工作，比如垃圾邮件营销，或者创办一家只靠专利诉讼盈利的公司。我的意思是，如果你要创办一家 “做很酷的事” 的公司，目标应该是 “赚钱为主，顺便很酷”，而不是 “很酷为主，顺便赚钱”。</p><p>It’s hard enough to make money that you can’t do it by accident. Unless it’s your first priority, it’s unlikely to happen at all.<br>赚钱本身就已经很难了，你不可能靠 “偶然” 赚到钱。除非把 “赚钱” 当成首要目标，否则几乎不可能成功。</p><h3 id="Hyenas"><a href="#Hyenas" class="headerlink" title="Hyenas"></a><strong>Hyenas</strong></h3><p><strong>土狼心态</strong></p><p>When I probe our motives with Artix, I see a third mistake: timidity. If you’d proposed at the time that we go into the e-commerce business, we’d have found the idea terrifying. Surely a field like that would be dominated by fearsome startups with five million dollars of VC money each. Whereas we felt pretty sure that we could hold our own in the slightly less competitive business of generating Web sites for art galleries.<br>当我审视我们创办 Artix 的动机时，发现了第三个错误：胆怯。如果当时有人提议我们进军电子商务领域，我们一定会觉得这个想法很可怕。我们会想，这样的领域肯定被那些手握 500 万美元风险投资（VC）、实力雄厚的初创公司垄断了。而在 “帮画廊建网站” 这个竞争相对较小的领域，我们却很有信心能站稳脚跟。</p><p>We erred ridiculously far on the side of safety. As it turns out, VC-backed startups are not that fearsome. They’re too busy trying to spend all that money to get software written. In 1995, the e-commerce business was very competitive as measured in press releases, but not as measured in software. And really it never was. The big fish like Open Market (rest their souls) were just consulting companies pretending to be product companies [5], and the offerings at our end of the market were a couple hundred lines of Perl scripts. Or could have been implemented as a couple hundred lines of Perl; in fact they were probably tens of thousands of lines of C++ or Java. Once we actually took the plunge into e-commerce, it turned out to be surprisingly easy to compete.<br>我们在 “追求安全” 这件事上犯了极其荒谬的错误。事实证明，有风险投资支持的初创公司并没有那么可怕 —— 它们忙着花掉那些投资来开发软件，效率并不高。1995 年的电子商务领域，若只看新闻稿，会觉得竞争异常激烈；但从实际的软件产品来看，竞争并没有那么激烈。而且实际上，这种 “表面激烈” 的情况从未改变过。像 Open Market（愿它安息）这样的大公司，其实只是伪装成产品公司的咨询公司 [5]；而当时市场上和我们定位相似的产品，本可以用几百行 Perl 脚本就能实现，可实际上它们可能用了几万行 C++ 或 Java 代码。当我们真正投身电子商务领域后才发现，竞争其实出奇地容易。</p><p>So why were we afraid? We felt we were good at programming, but we lacked confidence in our ability to do a mysterious, undifferentiated thing we called “business.” In fact there is no such thing as “business.” There’s selling, promotion, figuring out what people want, deciding how much to charge, customer support, paying your bills, getting customers to pay you, getting incorporated, raising money, and so on. And the combination is not as hard as it seems, because some tasks (like raising money and getting incorporated) are an O (1) pain in the ass, whether you’re big or small, and others (like selling and promotion) depend more on energy and imagination than any kind of special training.<br>那么我们当时为什么会害怕呢？我们知道自己擅长编程，但对于 “做生意” 这件我们认为神秘又复杂的事，却缺乏信心。可实际上，根本不存在 “做生意” 这种单一的事 —— 它包含销售、推广、弄清楚人们需要什么、定价、客户支持、支付账单、催客户付款、公司注册、融资等等。而把这些事情组合起来做，并没有看起来那么难：有些任务（比如融资和注册公司），无论公司大小，难度都是固定的（O (1) 复杂度），只是单纯的麻烦事；而另一些任务（比如销售和推广），更多依赖的是精力和想象力，而非某种特殊的专业培训。</p><p>Artix was like a hyena, content to survive on carrion because we were afraid of the lions. Except the lions turned out not to have any teeth, and the business of putting galleries online barely qualified as carrion.<br>Artix 就像一只土狼，因为害怕狮子，就满足于靠腐肉生存。可结果是，那些 “狮子” 根本没有牙齿（毫无威胁），而 “帮画廊建网站” 这个业务，甚至连 “腐肉” 都算不上（几乎没有价值）。</p><h3 id="A-Familiar-Problem"><a href="#A-Familiar-Problem" class="headerlink" title="A Familiar Problem"></a><strong>A Familiar Problem</strong></h3><p><strong>一个常见的问题</strong></p><p>Sum up all these sources of error, and it’s no wonder we had such a bad idea for a company. We did the first thing we thought of; we were ambivalent about being in business at all; and we deliberately chose an impoverished market to avoid competition.<br>综合以上这些错误原因，我们会想出如此糟糕的公司点子也就不足为奇了：我们选择了第一个想到的点子；我们对 “做生意” 本身三心二意；我们为了避开竞争，刻意选择了一个毫无前景的市场。</p><p>Looking at the applications for the Summer Founders Program, I see signs of all three. But the first is by far the biggest problem. Most of the groups applying have not stopped to ask: of all the things we could do, is this the one with the best chance of making money?<br>在夏季创始人计划（Summer Founders Program）的申请中，我看到了这三种错误的痕迹。但到目前为止，第一个错误是最严重的：大多数申请团队都没有停下来问问自己 —— 在所有我们能做的事情里，这是最有可能赚钱的吗？</p><p>If they’d already been through their Artix phase, they’d have learned to ask that. After the reception we got from art dealers, we were ready to. This time, we thought, let’s make something people want.<br>如果他们已经经历过自己的 “Artix 阶段”（即失败的尝试），就会学会问这个问题。在经历了艺术品经销商的冷遇后，我们就意识到了这一点 —— 这一次，我们要做人们真正需要的东西。</p><p>Reading the Wall Street Journal for a week should give anyone ideas for two or three new startups. The articles are full of descriptions of problems that need to be solved. But most of the applicants don’t seem to have looked far for ideas.<br>只要读一周《华尔街日报》，任何人都能从中找到两三个新的创业点子 —— 报纸上满是对 “待解决问题” 的描述。但大多数申请者似乎都没有花心思去寻找这样的点子。</p><p>We expected the most common proposal to be for multiplayer games. We were not far off: this was the second most common. The most common was some combination of a blog, a calendar, a dating site, and Friendster. Maybe there is some new killer app to be discovered here, but it seems perverse to go poking around in this fog when there are valuable, unsolved problems lying about in the open for anyone to see. Why did no one propose a new scheme for micropayments? An ambitious project, perhaps, but I can’t believe we’ve considered every alternative. And newspapers and magazines are (literally) dying for a solution.<br>我们原本预计最常见的申请方案会是多人游戏相关项目，这个猜测不算太离谱 —— 多人游戏确实是第二常见的方案。而最常见的方案是将博客、日历、约会网站和 Friendster（早期社交平台）的功能结合起来。或许在这个领域能发现新的 “杀手级应用”，但当有大量有价值、未解决的问题就摆在明面上时，却在这个模糊的领域里摸索，实在是本末倒置。为什么没人提出新的小额支付方案呢？这或许是个有挑战性的项目，但我不信所有可能的方案都已经被考虑过了。而且报纸和杂志行业（毫不夸张地说）正迫切需要这样的解决方案。</p><p>Why did so few applicants really think about what customers want? I think the problem with many, as with people in their early twenties generally, is that they’ve been trained their whole lives to jump through predefined hoops. They’ve spent 15-20 years solving problems other people have set for them. And how much time deciding what problems would be good to solve? Two or three course projects? They’re good at solving problems, but bad at choosing them.<br>为什么如此少的申请者真正思考 “客户需要什么” 呢？我认为，这和大多数二十出头的年轻人面临的问题一样：他们一生都在接受 “按既定规则做事” 的训练。他们花了 15 到 20 年的时间去解决别人为他们设定的问题，而花在 “判断哪些问题值得解决” 上的时间有多少呢？可能只有两三个课程项目的时间吧。他们擅长解决问题，却不擅长选择要解决的问题。</p><p>But that, I’m convinced, is just the effect of training. Or more precisely, the effect of grading. To make grading efficient, everyone has to solve the same problem, and that means it has to be decided in advance. It would be great if schools taught students how to choose problems as well as how to solve them, but I don’t know how you’d run such a class in practice.<br>但我坚信，这只是训练带来的结果，更准确地说，是 “评分制度” 带来的结果。为了让评分高效，所有人都必须解决同一个问题，这就意味着问题必须提前设定好。如果学校能既教学生 “如何解决问题”，也教他们 “如何选择问题”，那当然很好，但我实在想不出这样的课程在实际中该如何开展。</p><h3 id="Copper-and-Tin"><a href="#Copper-and-Tin" class="headerlink" title="Copper and Tin"></a><strong>Copper and Tin</strong></h3><p><strong>铜与锡（能力的融合）</strong></p><p>The good news is, choosing problems is something that can be learned. I know that from experience. Hackers can learn to make things customers want. [6]<br>好消息是，“选择问题” 是可以学会的。我从自身经验中深知这一点 —— 技术达人也能学会做出客户需要的东西。[6]</p><p>This is a controversial view. One expert on “entrepreneurship” told me that any startup had to include business people, because only they could focus on what customers wanted. I’ll probably alienate this guy forever by quoting him, but I have to risk it, because his email was such a perfect example of this view:<br>这个观点存在争议。一位 “创业领域” 的专家曾告诉我，任何初创公司都必须有商业人才加入，因为只有他们才能聚焦客户需求。引用他的话可能会让我永远得罪他，但我必须冒这个险，因为他的邮件完美诠释了这种观点：</p><p>80% of MIT spinoffs succeed provided they have at least one management person in the team at the start. The business person represents the “voice of the customer” and that’s what keeps the engineers and product development on track.<br>“麻省理工学院（MIT）衍生出的初创公司中，只要在成立初期团队里至少有一名管理人员，80% 都会成功。商业人才代表着‘客户的声音’，正是这种声音能让工程师和产品开发保持正确的方向。”</p><p>This is, in my opinion, a crock. Hackers are perfectly capable of hearing the voice of the customer without a business person to amplify the signal for them. Larry Page and Sergey Brin were grad students in computer science, which presumably makes them “engineers.” Do you suppose Google is only good because they had some business guy whispering in their ears what customers wanted? It seems to me the business guys who did the most for Google were the ones who obligingly flew Altavista into a hillside just as Google was getting started.<br>在我看来，这种说法纯属无稽之谈。即使没有商业人才 “放大信号”，技术达人也完全能听到 “客户的声音”。拉里・佩奇（Larry Page）和谢尔盖・布林（Sergey Brin）都是计算机科学专业的研究生，按理说他们属于 “工程师”。难道谷歌之所以成功，只是因为有某个商业人才在他们耳边低声告诉他们客户想要什么吗？在我看来，对谷歌帮助最大的 “商业人才”，是那些在谷歌刚起步时，把阿尔塔维斯特（Altavista，早期搜索引擎）搞垮的竞争对手。</p><p>The hard part about figuring out what customers want is figuring out that you need to figure it out. But that’s something you can learn quickly. It’s like seeing the other interpretation of an ambiguous picture. As soon as someone tells you there’s a rabbit as well as a duck, it’s hard not to see it.<br>弄清楚 “客户想要什么” 的难点，在于首先意识到 “你需要弄清楚客户想要什么”。但这一点是可以快速学会的，就像看一幅有歧义的画 —— 一旦有人告诉你画里既有兔子也有鸭子，你就很难再看不到其中一种形象了。</p><p>And compared to the sort of problems hackers are used to solving, giving customers what they want is easy. Anyone who can write an optimizing compiler can design a UI that doesn’t confuse users, once they choose to focus on that problem. And once you apply that kind of brain power to petty but profitable questions, you can create wealth very rapidly.<br>而且，与技术达人平时习惯解决的问题相比，“满足客户需求” 其实很简单。只要他们决定聚焦这个问题，任何能写出优化编译器的人，都能设计出一个不让用户困惑的用户界面（UI）。一旦将这种高智商用于解决那些看似琐碎但能盈利的问题，就能快速创造财富。</p><p>That’s the essence of a startup: having brilliant people do work that’s beneath them. Big companies try to hire the right person for the job. Startups win because they don’t—because they take people so smart that they would in a big company be doing “research,” and set them to work instead on problems of the most immediate and mundane sort. Think Einstein designing refrigerators. [7]<br>这就是初创公司的本质：让聪明人去做看似 “低于他们能力” 的事。大公司总想 “为岗位找到合适的人”，而初创公司的制胜之道恰恰相反 —— 它们让那些在大公司里本会从事 “研究工作” 的聪明人，转而去解决最紧迫、最普通的实际问题。就好比让爱因斯坦去设计冰箱。[7]</p><p>If you want to learn what people want, read Dale Carnegie’s How to Win Friends and Influence People. [8] When a friend recommended this book, I couldn’t believe he was serious. But he insisted it was good, so I read it, and he was right. It deals with the most difficult problem in human experience: how to see things from other people’s point of view, instead of thinking only of yourself.<br>如果你想学会理解 “人们想要什么”，可以读一读戴尔・卡耐基（Dale Carnegie）的《人性的弱点》（How to Win Friends and Influence People）。[8] 当一位朋友向我推荐这本书时，我简直不敢相信他是认真的。但他坚持说这本书很好，我就读了，结果发现他说得对。这本书解决的是人类经验中最难的问题：如何从别人的角度看问题，而不是只考虑自己。</p><p>Most smart people don’t do that very well. But adding this ability to raw brainpower is like adding tin to copper. The result is bronze, which is so much harder that it seems a different metal.<br>大多数聪明人在这方面都做得不好。但如果能在原有的高智商基础上增加这种 “换位思考” 的能力，就好比在铜里加入锡 —— 最终得到的青铜，硬度远超铜，几乎像是另一种金属。</p><p>A hacker who has learned what to make, and not just how to make, is extraordinarily powerful. And not just at making money: look what a small group of volunteers has achieved with Firefox.<br>一个技术达人如果不仅学会了 “如何做”，还学会了 “做什么”，就会拥有极强的能力。这种能力不仅能用来赚钱：看看一小群志愿者用 Firefox（火狐浏览器）取得的成就，就知道了。</p><p>Doing an Artix teaches you to make something people want in the same way that not drinking anything would teach you how much you depend on water. But it would be more convenient for all involved if the Summer Founders didn’t learn this on our dime—if they could skip the Artix phase and go right on to make something customers wanted. That, I think, is going to be the real experiment this summer. How long will it take them to grasp this?<br>经历一次 “Artix 式的失败”，能让你学会 “做人们需要的东西”，就像 “不喝水” 能让你明白自己有多依赖水一样。但如果夏季创始人计划的参与者不用 “花我们的钱” 来吸取这个教训 —— 如果他们能跳过 “Artix 阶段”，直接去做客户需要的东西，对所有人来说都会更有利。我认为，这才是今年夏天这项实验真正的意义所在：他们需要多久才能明白这一点？</p><p>We decided we ought to have T-Shirts for the SFP, and we’d been thinking about what to print on the back. Till now we’d been planning to use<br>If you can read this, I should be working.<br>but now we’ve decided it’s going to be<br>Make something people want.<br>我们决定为夏季创始人计划（SFP）定制 T 恤，并一直在思考背面该印些什么。在此之前，我们计划印的是：<br>“如果你能读到这句话，我就该去工作了（If you can read this, I should be working.）”<br>但现在我们决定改成：<br>“做出人们想要的东西（Make something people want.）”</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] SFP applicants: please don’t assume that not being accepted means we think your idea is bad. Because we want to keep the number of startups small this first summer, we’re going to have to turn down some good proposals too.<br>[1] 夏季创始人计划申请者请注意：不要认为 “未被录用” 就意味着我们觉得你的想法不好。因为今年是该计划的第一年，我们希望控制初创公司的数量，所以不得不拒绝一些优秀的申请方案。</p><p>[2] Dealers try to give each customer the impression that the stuff they’re showing him is something special that only a few people have seen, when in fact it may have been sitting in their racks for years while they tried to unload it on buyer after buyer.<br>[2] 艺术品经销商会努力让每位客户觉得，展示给他们的藏品是 “只有少数人见过的特殊珍品”，但实际上，这些藏品可能已经在货架上放了好几年，经销商一直在试图把它们推销给一个又一个买家。</p><p>[3] On the other hand, he was skeptical about Viaweb too. I have a precise measure of that, because at one point in the first couple months we made a bet: if he ever made a million dollars out of Viaweb, he’d get his ear pierced. We didn’t let him off, either.<br>[3] 不过，他最初对 Viaweb 也持怀疑态度。对此我有个确切的证据：在 Viaweb 创办初期的几个月里，我们打了个赌 —— 如果他能通过 Viaweb 赚到 100 万美元，就去打耳洞。最后我们也没让他耍赖。</p><p>[4] I wrote a program to generate all the combinations of “Web” plus a three letter word. I learned from this that most three letter words are bad: Webpig, Webdog, Webfat, Webzit, Webfug. But one of them was Webvia; I swapped them to make Viaweb.<br>[4] 我写了一个程序，生成所有 “Web” 加三个字母的组合。结果发现，大多数三个字母的组合都很糟糕，比如 Webpig（网猪）、Webdog（网狗）、Webfat（网胖）、Webzit（网渣）、Webfug（网丑）。但其中有一个组合是 Webvia，我把顺序调换了一下，就成了 Viaweb。</p><p>[5] It’s much easier to sell services than a product, just as it’s easier to make a living playing at weddings than by selling recordings. But the margins are greater on products. So during the Bubble a lot of companies used consulting to generate revenues they could attribute to the sale of products, because it made a better story for an IPO.<br>[5] 销售服务比销售产品容易得多，就像靠在婚礼上演奏谋生比靠卖唱片谋生容易一样。但产品的利润空间更大。因此，在互联网泡沫时期，很多公司会通过提供咨询服务来创造收入，却把这些收入归为 “产品销售所得”—— 因为这样能为首次公开募股（IPO）编造一个更好的故事。</p><p>[6] Trevor Blackwell presents the following recipe for a startup: “Watch people who have money to spend, see what they’re wasting their time on, cook up a solution, and try selling it to them. It’s surprising how small a problem can be and still provide a profitable market for a solution.”<br>[6] 特雷弗・布莱克韦尔（Trevor Blackwell）提出了如下创业秘诀：“观察那些有消费能力的人，看看他们在哪些事情上浪费时间，然后设计出解决方案，试着卖给他们。你会惊讶地发现，一个看似很小的问题，也能为解决方案提供一个盈利的市场。”</p><p>[7] You need to offer especially large rewards to get great people to do tedious work. That’s why startups always pay equity rather than just salary.<br>[7] 要让优秀的人去做枯燥的工作，就需要提供特别丰厚的回报。这就是为什么初创公司总是会给员工股权，而不只是支付薪水。</p><p>[8] Buy an old copy from the 1940s or 50s instead of the current edition, which has been rewritten to suit present fashions. The original edition contained a few unPC ideas, but it’s always better to read an original book, bearing in mind that it’s a book from a past era, than to read a new version sanitized for your protection.<br>[8] 建议买一本 20 世纪 40 年代或 50 年代的旧版，而不是现在的修订版 —— 现在的版本为了迎合当下潮流做了改写。原版中确实有一些不符合 “政治正确” 的观点，但读原版书（同时记住它是那个时代的产物），总比读为了 “保护你” 而经过净化的新版本要好。</p><p>Thanks to Bill Birch, Trevor Blackwell, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢比尔・伯奇（Bill Birch）、特雷弗・布莱克韦尔（Trevor Blackwell）、杰西卡・利文斯顿（Jessica Livingston）和罗伯特・莫里斯（Robert Morris）阅读了本文的初稿并提出建议。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简论写作</title>
    <link href="/2025/08/26/writing-briefly/"/>
    <url>/2025/08/26/writing-briefly/</url>
    
    <content type="html"><![CDATA[<h2 id="Writing-Briefly"><a href="#Writing-Briefly" class="headerlink" title="Writing, Briefly"></a>Writing, Briefly</h2><p>原文链接: <a href="https://paulgraham.com/writing44.html">https://paulgraham.com/writing44.html</a></p><p>March 2005</p><p>(In the process of answering an email, I accidentally wrote a tiny essay about writing. I usually spend weeks on an essay. This one took 67 minutes—23 of writing, and 44 of rewriting.)<br>（在回复一封电子邮件的过程中，我无意间写了一篇关于写作的短文。通常一篇文章我要花上几周时间，而这篇只花了 67 分钟 ——23 分钟用来写作，44 分钟用来修改。）</p><p>I think it’s far more important to write well than most people realize. Writing doesn’t just communicate ideas; it generates them. If you’re bad at writing and don’t like to do it, you’ll miss out on most of the ideas writing would have generated.<br>我认为，写好文章的重要性远超大多数人的认知。写作不只是传递观点的工具，更是产生观点的途径。如果你不擅长写作，也不喜欢写作，那么你将错失写作本可以为你催生的大部分想法。</p><p>As for how to write well, here’s the short version: Write a bad version 1 as fast as you can; rewrite it over and over; cut out everything unnecessary; write in a conversational tone; develop a nose for bad writing, so you can see and fix it in yours; imitate writers you like; if you can’t get started, tell someone what you plan to write about, then write down what you said; expect 80% of the ideas in an essay to happen after you start writing it, and 50% of those you start with to be wrong; be confident enough to cut; have friends you trust read your stuff and tell you which bits are confusing or drag; don’t (always) make detailed outlines; mull ideas over for a few days before writing; carry a small notebook or scrap paper with you; start writing when you think of the first sentence; if a deadline forces you to start before that, just say the most important sentence first; write about stuff you like; don’t try to sound impressive; don’t hesitate to change the topic on the fly; use footnotes to contain digressions; use anaphora to knit sentences together; read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading); try to tell the reader something new and useful; work in fairly big quanta of time; when you restart, begin by rereading what you have so far; when you finish, leave yourself something easy to start with; accumulate notes for topics you plan to cover at the bottom of the file; don’t feel obliged to cover any of them; write for a reader who won’t read the essay as carefully as you do, just as pop songs are designed to sound ok on crappy car radios; if you say anything mistaken, fix it immediately; ask friends which sentence you’ll regret most; go back and tone down harsh remarks; publish stuff online, because an audience makes you write more, and thus generate more ideas; print out drafts instead of just looking at them on the screen; use simple, germanic words; learn to distinguish surprises from digressions; learn to recognize the approach of an ending, and when one appears, grab it.<br>至于如何写好文章，以下是精简版建议：</p><p>尽快写出一篇粗糙的初稿；反复修改；删去所有不必要的内容；用口语化的语气写作；培养对劣质文字的敏感度，这样你就能发现并修正自己写作中的问题；模仿你喜欢的作家；如果无从下笔，就先跟别人讲讲你打算写什么，然后把你说的内容写下来；要做好心理准备 —— 一篇文章中 80% 的观点会在你开始写作后才出现，而你最初设想的观点中有 50% 是错误的；要有足够的勇气删减内容；让你信任的朋友阅读你的作品，告诉你哪些部分晦涩难懂或拖沓冗长；不要（总是）制定详细的大纲；写作前花几天时间仔细琢磨想法；随身携带一个小笔记本或便签纸；想到第一句话时就开始写作；如果截止日期迫使你在那之前动笔，就先写出最重要的句子；写你感兴趣的内容；不要刻意追求让人印象深刻的表达；随时调整主题也无需犹豫；用脚注来承载偏离主线的内容；用首语重复的手法将句子串联起来；大声朗读你的文章，以此找出（a）哪些拗口的短语让你卡顿，以及（b）哪些部分枯燥乏味（就是那些你不情愿读下去的段落）；尽量给读者传递新的、有用的信息；集中大块时间进行写作；重新开始写作时，先重读已完成的部分；完成写作后，给自己留下容易入手的后续内容；在文档末尾为计划涵盖的主题积累笔记，但不必勉强自己涵盖所有笔记内容；写作时要考虑到读者不会像你自己那样仔细阅读文章，就像流行歌曲的创作要确保在劣质汽车收音机上播放时也能听起来不错；如果发现表述有误，立即修正；问问朋友你写的哪句话日后最可能让你后悔；回头修改并缓和过于尖锐的评论；在网上发表作品，因为读者的存在会促使你写得更多，进而产生更多想法；将草稿打印出来，而不只是在屏幕上查看；使用简单的日耳曼语系词汇（注：指英语中源于德语等日耳曼语族、结构和拼写相对简单的词汇，如 “go”“eat”，而非源于拉丁语、拼写复杂的 “depart”“consume”）；学会区分有价值的意外发现和无意义的偏离主题；学会察觉文章结尾的到来，一旦感觉到，就抓住它完成收尾。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本科阶段</title>
    <link href="/2025/08/26/undergraduation/"/>
    <url>/2025/08/26/undergraduation/</url>
    
    <content type="html"><![CDATA[<h2 id="Undergraduation"><a href="#Undergraduation" class="headerlink" title="Undergraduation"></a>Undergraduation</h2><p>原文链接: <a href="https://paulgraham.com/college.html">https://paulgraham.com/college.html</a></p><p>March 2005</p><p>(Parts of this essay began as replies to students who wrote to me with questions.)<br>（本文部分内容最初是回复那些给我写信提问的学生的）</p><p>Recently I’ve had several emails from computer science undergrads asking what to do in college. I might not be the best source of advice, because I was a philosophy major in college. But I took so many CS classes that most CS majors thought I was one. I was certainly a hacker, at least.<br>最近，我收到了好几封计算机科学专业本科生的邮件，询问在大学里应该做些什么。我或许不是最理想的建议提供者，因为我大学时主修的是哲学。但我选了太多计算机科学（CS）的课程，以至于大多数计算机专业的学生都以为我是本专业的。至少，我确实是个黑客（擅长编程的人）。</p><h3 id="Hacking"><a href="#Hacking" class="headerlink" title="Hacking"></a><strong>Hacking</strong></h3><p><strong>黑客技能培养</strong></p><p>What should you do in college to become a good hacker? There are two main things you can do: become very good at programming, and learn a lot about specific, cool problems. These turn out to be equivalent, because each drives you to do the other.<br>在大学里，要成为一名优秀的黑客，应该做些什么？主要有两件事可以做：一是精通编程，二是深入了解某些特定的、有趣的问题。事实证明，这两件事是相辅相成的 —— 前者会推动你去做后者，后者也会反过来促进前者。</p><p>The way to be good at programming is to work (a) a lot (b) on hard problems. And the way to make yourself work on hard problems is to work on some very engaging project.<br>精通编程的方法是：（a）投入大量时间；（b）钻研难题。而让自己主动去钻研难题的办法，就是投身于某个极具吸引力的项目。</p><p>Odds are this project won’t be a class assignment. My friend Robert learned a lot by writing network software when he was an undergrad. One of his projects was to connect Harvard to the Arpanet; it had been one of the original nodes, but by 1984 the connection had died. [1] Not only was this work not for a class, but because he spent all his time on it and neglected his studies, he was kicked out of school for a year. [2] It all evened out in the end, and now he’s a professor at MIT. But you’ll probably be happier if you don’t go to that extreme; it caused him a lot of worry at the time.<br>很可能这个项目不会是课堂作业。我的朋友罗伯特在本科期间，通过编写网络软件学到了很多东西。他的项目之一是让哈佛大学重新接入阿帕网（Arpanet）—— 哈佛曾是阿帕网的原始节点之一，但到 1984 年，连接已经中断。[1] 这项工作不仅不是为了完成课程作业，而且因为他把所有时间都花在了上面，荒废了学业，还被学校开除了一年。[2] 最终一切都尘埃落定，现在他是麻省理工学院（MIT）的教授。不过，如果你不做得这么极端，可能会更舒心 —— 当时这件事给他带来了很多困扰。</p><p>Another way to be good at programming is to find other people who are good at it, and learn what they know. Programmers tend to sort themselves into tribes according to the type of work they do and the tools they use, and some tribes are smarter than others. Look around you and see what the smart people seem to be working on; there’s usually a reason.<br>精通编程的另一个方法是，找到其他擅长编程的人，向他们学习。程序员通常会根据自己的工作类型和使用的工具形成不同的 “圈子”，而有些圈子里的人会更聪明。观察一下身边那些聪明人似乎在钻研什么 —— 他们的选择往往是有原因的。</p><p>Some of the smartest people around you are professors. So one way to find interesting work is to volunteer as a research assistant. Professors are especially interested in people who can solve tedious system-administration type problems for them, so that is a way to get a foot in the door. What they fear are flakes and resume padders. It’s all too common for an assistant to result in a net increase in work. So you have to make it clear you’ll mean a net decrease.<br>你身边最聪明的人里，有些是教授。因此，找到有趣工作的一个途径是主动申请当科研助理。教授们尤其青睐那些能帮他们解决枯燥的系统管理类问题的人，这是一个入行的好机会。他们担心的是那些不靠谱的人，以及只为在简历上添一笔而敷衍了事的人。很多时候，雇一个助理反而会让工作量净增加，这种情况太常见了。所以你必须明确让他们知道，你能帮他们减少工作量。</p><p>Don’t be put off if they say no. Rejection is almost always less personal than the rejectee imagines. Just move on to the next. (This applies to dating too.)<br>如果他们拒绝了你，不要气馁。拒绝往往不像被拒绝者想的那样带有个人针对性。直接去找下一个目标就好（这一点在约会中也适用）。</p><p>Beware, because although most professors are smart, not all of them work on interesting stuff. Professors have to publish novel results to advance their careers, but there is more competition in more interesting areas of research. So what less ambitious professors do is turn out a series of papers whose conclusions are novel because no one else cares about them. You’re better off avoiding these.<br>但要注意，虽然大多数教授很聪明，但并非所有人都在研究有趣的课题。教授们为了职业发展，必须发表有创新性的研究成果，但在更有趣的研究领域，竞争也更激烈。因此，那些进取心不强的教授会发表一系列 “结论有创新性” 的论文 —— 之所以 “创新”，只是因为没人关心这些课题。你最好避开这类教授。</p><p>I never worked as a research assistant, so I feel a bit dishonest recommending that route. I learned to program by writing stuff of my own, particularly by trying to reverse-engineer Winograd’s SHRDLU. I was as obsessed with that program as a mother with a new baby.<br>我从来没有当过科研助理，所以推荐这个途径时，我总觉得有点不自在。我是通过编写自己的项目来学习编程的，尤其是尝试对维诺格拉德的 SHRDLU 程序（早期自然语言处理程序）进行逆向工程。当时我对那个程序的痴迷程度，就像母亲对刚出生的婴儿一样。</p><p>Whatever the disadvantages of working by yourself, the advantage is that the project is all your own. You never have to compromise or ask anyone’s permission, and if you have a new idea you can just sit down and start implementing it.<br>尽管独自做项目有种种缺点，但它的优势在于，这个项目完全属于你自己。你无需妥协，也不用征求任何人的同意，只要有了新想法，就能坐下来立刻开始实现。</p><p>In your own projects you don’t have to worry about novelty (as professors do) or profitability (as businesses do). All that matters is how hard the project is technically, and that has no correlation to the nature of the application. “Serious” applications like databases are often trivial and dull technically (if you ever suffer from insomnia, try reading the technical literature about databases) while “frivolous” applications like games are often very sophisticated. I’m sure there are game companies out there working on products with more intellectual content than the research at the bottom nine tenths of university CS departments.<br>在你自己的项目里，你不必像教授那样担心 “创新性”，也不必像企业那样顾虑 “盈利性”。唯一重要的是这个项目在技术层面有多难，而这与应用的性质毫无关系。像数据库这样的 “严肃” 应用，在技术上往往既简单又枯燥（如果你有失眠的困扰，不妨试试读数据库相关的技术文献）；而像游戏这样的 “娱乐性” 应用，技术层面往往非常复杂。我敢肯定，有些游戏公司正在开发的产品，其知识含量比大学里 90% 的计算机系研究项目还要高。</p><p>If I were in college now I’d probably work on graphics: a network game, for example, or a tool for 3D animation. When I was an undergrad there weren’t enough cycles around to make graphics interesting, but it’s hard to imagine anything more fun to work on now.<br>如果我现在上大学，我可能会研究图形学相关的项目 —— 比如一款网络游戏，或者一个 3D 动画工具。我上本科的时候，计算机运算能力不足，无法让图形学变得有趣，但现在，很难想象还有比这更有意思的研究方向了。</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a><strong>Math</strong></h3><p><strong>数学学习</strong></p><p>When I was in college, a lot of the professors believed (or at least wished) that computer science was a branch of math. This idea was strongest at Harvard, where there wasn’t even a CS major till the 1980s; till then one had to major in applied math. But it was nearly as bad at Cornell. When I told the fearsome Professor Conway that I was interested in AI (a hot topic then), he told me I should major in math. I’m still not sure whether he thought AI required math, or whether he thought AI was nonsense and that majoring in something rigorous would cure me of such stupid ambitions.<br>我上大学的时候，很多教授认为（至少是希望）计算机科学是数学的一个分支。这种观点在哈佛大学最为盛行 —— 哈佛直到 20 世纪 80 年代才设立计算机科学专业，在此之前，想学相关领域的学生只能主修应用数学。康奈尔大学的情况也差不多。当时我告诉令人敬畏的康威教授，我对人工智能（AI，当时的热门话题）感兴趣，他却告诉我应该主修数学。我至今仍不确定，他是觉得人工智能研究需要数学基础，还是认为人工智能是无稽之谈，觉得主修一门严谨的学科能让我打消这种愚蠢的念头。</p><p>In fact, the amount of math you need as a hacker is a lot less than most university departments like to admit. I don’t think you need much more than high school math plus a few concepts from the theory of computation. (You have to know what an n^2 algorithm is if you want to avoid writing them.) Unless you’re planning to write math applications, of course. Robotics, for example, is all math.<br>事实上，作为一名黑客，你需要掌握的数学知识量，远少于大多数大学院系宣称的那样。我认为，除了高中数学，再了解一些计算理论的基本概念就足够了（比如，你得知道什么是 n² 算法，才能避免写出这样的算法）。当然，除非你打算开发数学相关的应用 —— 比如机器人技术，那几乎全是数学。</p><p>But while you don’t literally need math for most kinds of hacking, in the sense of knowing 1001 tricks for differentiating formulas, math is very much worth studying for its own sake. It’s a valuable source of metaphors for almost any kind of work.[3] I wish I’d studied more math in college for that reason.<br>不过，虽然对于大多数黑客工作而言，你不需要掌握一大堆公式求导的技巧，但数学本身仍然非常值得学习。因为它几乎能为任何领域的工作提供宝贵的思维隐喻。[3] 出于这个原因，我真希望自己在大学里能多学些数学。</p><p>Like a lot of people, I was mathematically abused as a child. I learned to think of math as a collection of formulas that were neither beautiful nor had any relation to my life (despite attempts to translate them into “word problems”), but had to be memorized in order to do well on tests.<br>和很多人一样，我小时候在数学学习上有过不愉快的经历。我曾经觉得数学就是一堆公式的集合 —— 既不优美，也和我的生活毫无关系（尽管老师试图把公式转化成 “应用题”），但为了考试考好，我又必须死记硬背。</p><p>One of the most valuable things you could do in college would be to learn what math is really about. This may not be easy, because a lot of good mathematicians are bad teachers. And while there are many popular books on math, few seem good. The best I can think of are W. W. Sawyer’s. And of course Euclid. [4]<br>在大学里，你能做的最有价值的事情之一，就是弄明白数学的本质是什么。这可能并不容易，因为很多优秀的数学家其实并不擅长教学。而且，虽然市面上有很多数学科普书，但真正好的却寥寥无几。我能想到的最好的是 W. W. 索耶（W. W. Sawyer）的著作，当然还有欧几里得的《几何原本》。[4]</p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><strong>Everything</strong></h3><p><strong>广泛学习与学科选择</strong></p><p>Thomas Huxley said “Try to learn something about everything and everything about something.” Most universities aim at this ideal.<br>托马斯・赫胥黎（Thomas Huxley）曾说：“尝试对所有事物都略知一二，对某一事物则要了如指掌。” 大多数大学都以这一理念为目标。</p><p>But what’s everything? To me it means, all that people learn in the course of working honestly on hard problems. All such work tends to be related, in that ideas and techniques from one field can often be transplanted successfully to others. Even others that seem quite distant. For example, I write essays the same way I write software: I sit down and blow out a lame version 1 as fast as I can type, then spend several weeks rewriting it.<br>但 “所有事物” 究竟指什么？对我来说，它指的是人们在认真钻研难题的过程中所学到的一切。这类学习往往是相互关联的 —— 一个领域的思想和技术，常常能成功应用到其他领域，即便那些领域看起来与它相去甚远。比如，我写文章的方式和写软件的方式如出一辙：先坐下来，以最快的速度敲出一个粗糙的第一版，然后花几个星期的时间反复修改。</p><p>Working on hard problems is not, by itself, enough. Medieval alchemists were working on a hard problem, but their approach was so bogus that there was little to learn from studying it, except possibly about people’s ability to delude themselves. Unfortunately the sort of AI I was trying to learn in college had the same flaw: a very hard problem, blithely approached with hopelessly inadequate techniques. Bold? Closer to fraudulent.<br>不过，单靠钻研难题本身还不够。中世纪的炼金术士也在钻研难题，但他们的方法太荒谬了，从他们的研究中几乎学不到什么东西 —— 顶多能了解到人类自欺欺人的能力有多强。不幸的是，我大学时试图学习的那类人工智能研究也有同样的缺陷：面对一个极难的问题，却用完全不够成熟的技术轻率地去解决。这叫大胆吗？更像是自欺欺人。</p><p>The social sciences are also fairly bogus, because they’re so much influenced by intellectual fashions. If a physicist met a colleague from 100 years ago, he could teach him some new things; if a psychologist met a colleague from 100 years ago, they’d just get into an ideological argument. Yes, of course, you’ll learn something by taking a psychology class. The point is, you’ll learn more by taking a class in another department.<br>社会科学也相当 “不靠谱”，因为它们太容易受到学术潮流的影响。如果一位物理学家遇到 100 年前的同行，他能教给对方一些新知识；但如果一位心理学家遇到 100 年前的同行，他们只会陷入意识形态上的争论。当然，选一门心理学课你肯定能学到些东西，但关键是，选其他院系的课程，你能学到的会更多。</p><p>The worthwhile departments, in my opinion, are math, the hard sciences, engineering, history (especially economic and social history, and the history of science), architecture, and the classics. A survey course in art history may be worthwhile. Modern literature is important, but the way to learn about it is just to read. I don’t know enough about music to say.<br>在我看来，值得学习的院系包括数学、硬科学（指自然科学中依赖实验和定量分析的学科，如物理、化学等）、工程学、历史学（尤其是经济社会史和科学史）、建筑学以及古典学。艺术史的概论课程可能也值得一选。现代文学很重要，但学习它的方法就是直接阅读作品。至于音乐，我了解不多，不好评价。</p><p>You can skip the social sciences, philosophy, and the various departments created recently in response to political pressures. Many of these fields talk about important problems, certainly. But the way they talk about them is useless. For example, philosophy talks, among other things, about our obligations to one another; but you can learn more about this from a wise grandmother or E. B. White than from an academic philosopher.<br>你可以跳过社会科学、哲学，以及那些近年来为应对政治压力而设立的各类院系。当然，这些领域中很多都在探讨重要问题，但它们探讨问题的方式却毫无用处。比如，哲学领域会讨论人与人之间的责任义务，但在这方面，你从一位睿智的祖母或 E. B. 怀特（美国著名作家）那里学到的，会比从学院派哲学家那里学到的更多。</p><p>I speak here from experience. I should probably have been offended when people laughed at Clinton for saying “It depends on what the meaning of the word ‘is’ is.” I took about five classes in college on what the meaning of “is” is.<br>我这么说可是有亲身体验的。当年人们嘲笑克林顿说 “这取决于‘是’这个词的含义是什么” 时，我本应该感到反感 —— 因为我在大学里选了大概五门课，都是研究 “是” 这个词的含义的。</p><p>Another way to figure out which fields are worth studying is to create the dropout graph. For example, I know many people who switched from math to computer science because they found math too hard, and no one who did the opposite. People don’t do hard things gratuitously; no one will work on a harder problem unless it is proportionately (or at least log (n)) more rewarding. So probably math is more worth studying than computer science. By similar comparisons you can make a graph of all the departments in a university. At the bottom you’ll find the subjects with least intellectual content.<br>另一个判断哪些领域值得学习的方法，是绘制 “转专业图谱”。比如，我认识很多人因为觉得数学太难，从数学专业转到了计算机科学专业，但从未见过有人反着转。人们不会无缘无故去做困难的事 —— 除非回报与难度成正比（至少是对数级别的正比），否则没人会去钻研更难的领域。因此，数学可能比计算机科学更值得学习。通过类似的对比，你可以为大学里所有院系绘制一张图谱，排在最底端的，就是知识含量最低的学科。</p><p>If you use this method, you’ll get roughly the same answer I just gave.<br>如果你用这种方法，得出的结论大概会和我刚才说的一致。</p><p>Language courses are an anomaly. I think they’re better considered as extracurricular activities, like pottery classes. They’d be far more useful when combined with some time living in a country where the language is spoken. On a whim I studied Arabic as a freshman. It was a lot of work, and the only lasting benefits were a weird ability to identify semitic roots and some insights into how people recognize words.<br>语言课程是个例外。我认为它们更适合被当作课外活动，就像陶艺课一样。如果能结合在目标语言国家的生活经历，语言课程会有用得多。我大一的时候一时兴起学了阿拉伯语，为此花了很多功夫，但唯一持久的收获，就是能奇怪地辨认出闪米特语族的词根，以及对人类如何识别单词有了一些见解。</p><p>Studio art and creative writing courses are wildcards. Usually you don’t get taught much: you just work (or don’t work) on whatever you want, and then sit around offering “crits” of one another’s creations under the vague supervision of the teacher. But writing and art are both very hard problems that (some) people work honestly at, so they’re worth doing, especially if you can find a good teacher.<br>工作室艺术课和创意写作课则充满不确定性。通常情况下，老师不会教太多东西：你只是随心所欲地创作（或者不创作），然后在老师模糊的指导下，围坐在一起对彼此的作品进行 “点评”。但写作和艺术本身都是非常难的课题，而且（有些）人会认真钻研，所以这些课程值得一试，尤其是如果能找到一位好老师的话。</p><h3 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a><strong>Jobs</strong></h3><p><strong>就业准备</strong></p><p>Of course college students have to think about more than just learning. There are also two practical problems to consider: jobs, and graduate school.<br>当然，大学生要考虑的不只是学习，还有两个实际问题需要应对：就业和读研。</p><p>In theory a liberal education is not supposed to supply job training. But everyone knows this is a bit of a fib. Hackers at every college learn practical skills, and not by accident.<br>理论上，通识教育不应该以职业培训为目的，但所有人都知道这有点自欺欺人。每所大学里的黑客（擅长编程的人）都会学到实用技能，这绝非偶然。</p><p>What you should learn to get a job depends on the kind you want. If you want to work in a big company, learn how to hack Blub on Windows. If you want to work at a cool little company or research lab, you’ll do better to learn Ruby on Linux. And if you want to start your own company, which I think will be more and more common, master the most powerful tools you can find, because you’re going to be in a race against your competitors, and they’ll be your horse.<br>为了找工作，你需要学习什么，取决于你想找什么样的工作。如果你想在大公司工作，那就学习如何在 Windows 系统上用 Blub 语言编程；如果你想在有意思的小公司或研究实验室工作，学习在 Linux 系统上用 Ruby 语言编程会更有帮助；如果你想自己创业（我认为这种情况会越来越普遍），那就掌握你能找到的最强大的工具 —— 因为你将和竞争对手展开赛跑，而这些工具就是你的 “战马”。</p><p>There is not a direct correlation between the skills you should learn in college and those you’ll use in a job. You should aim slightly high in college.<br>在大学里应该学习的技能，和你在工作中会用到的技能，之间并没有直接的对应关系。在大学里，你的目标应该稍微定得高一些。</p><p>In workouts a football player may bench press 300 pounds, even though he may never have to exert anything like that much force in the course of a game. Likewise, if your professors try to make you learn stuff that’s more advanced than you’ll need in a job, it may not just be because they’re academics, detached from the real world. They may be trying to make you lift weights with your brain.<br>足球运动员在训练时可能会练习卧推 300 磅（约 136 公斤），尽管他在比赛中可能永远不需要使出这么大的力气。同样，如果你的教授让你学习一些比工作中需要的更高级的知识，这可能不只是因为他们是脱离现实的学者，还可能是因为他们在帮你 “锻炼脑力”。</p><p>The programs you write in classes differ in three critical ways from the ones you’ll write in the real world: they’re small; you get to start from scratch; and the problem is usually artificial and predetermined. In the real world, programs are bigger, tend to involve existing code, and often require you to figure out what the problem is before you can solve it.<br>你在课堂上写的程序，与在现实工作中写的程序，有三个关键区别：课堂程序规模小、从零开始写、问题通常是人为设定好的；而在现实中，程序规模更大、往往需要整合现有代码，而且通常需要先弄清楚问题是什么，才能着手解决。</p><p>You don’t have to wait to leave (or even enter) college to learn these skills. If you want to learn how to deal with existing code, for example, you can contribute to open-source projects. The sort of employer you want to work for will be as impressed by that as good grades on class assignments.<br>你不必等到毕业（甚至不必等到入学）才去学习这些技能。比如，如果你想学习如何处理现有代码，可以为开源项目做贡献。你理想中的雇主，会像看重你课堂作业的好成绩一样，看重你在开源项目中的贡献。</p><p>In existing open-source projects you don’t get much practice at the third skill, deciding what problems to solve. But there’s nothing to stop you starting new projects of your own. And good employers will be even more impressed with that.<br>在现有的开源项目中，你很难锻炼到第三个技能 —— 判断该解决什么问题。但没有什么能阻止你自己启动新项目，而优秀的雇主会对此更加印象深刻。</p><p>What sort of problem should you try to solve? One way to answer that is to ask what you need as a user. For example, I stumbled on a good algorithm for spam filtering because I wanted to stop getting spam. Now what I wish I had was a mail reader that somehow prevented my inbox from filling up. I tend to use my inbox as a todo list. But that’s like using a screwdriver to open bottles; what one really wants is a bottle opener.<br>你应该尝试解决什么样的问题？一个答案是：从用户的角度出发，思考自己需要什么。比如，我当年就是因为不想再收到垃圾邮件，才偶然发现了一个不错的垃圾邮件过滤算法。现在我希望能有一个邮件阅读器，能防止收件箱被塞满 —— 我总是把收件箱当待办事项列表用，但这就像用螺丝刀开瓶子一样，其实我真正需要的是一个开瓶器。</p><h3 id="Grad-School"><a href="#Grad-School" class="headerlink" title="Grad School"></a><strong>Grad School</strong></h3><p><strong>读研相关</strong></p><p>What about grad school? Should you go? And how do you get into a good one?<br>那读研呢？你应该去读研吗？怎样才能进入一所好的研究生院？</p><p>In principle, grad school is professional training in research, and you shouldn’t go unless you want to do research as a career. And yet half the people who get PhDs in CS don’t go into research. I didn’t go to grad school to become a professor. I went because I wanted to learn more.<br>理论上，研究生院是培养研究能力的专业教育，除非你想以研究为职业，否则不应该去读研。但事实上，计算机科学专业的博士毕业生中，有一半人并没有从事研究工作。我当年读研也不是为了成为教授，而是因为我想学到更多东西。</p><p>So if you’re mainly interested in hacking and you go to grad school, you’ll find a lot of other people who are similarly out of their element. And if half the people around you are out of their element in the same way you are, are you really out of your element?<br>因此，如果你主要对黑客技能（编程）感兴趣，却选择了读研，你会发现身边有很多人和你一样 “格格不入”。但如果身边有一半人和你有着同样的 “格格不入”，那你还算是 “格格不入” 吗？</p><p>There’s a fundamental problem in “computer science,” and it surfaces in situations like this. No one is sure what “research” is supposed to be. A lot of research is hacking that had to be crammed into the form of an academic paper to yield one more quantum of publication.<br>“计算机科学” 领域存在一个根本性问题，而这个问题在这类情况下就会凸显出来：没人能说清 “研究” 到底应该是什么。很多所谓的 “研究”，其实就是把黑客（编程）工作硬塞进学术论文的框架里，只为多发表一篇论文。</p><p>So it’s kind of misleading to ask whether you’ll be at home in grad school, because very few people are quite at home in computer science. The whole field is uncomfortable in its own skin. So the fact that you’re mainly interested in hacking shouldn’t deter you from going to grad school. Just be warned you’ll have to do a lot of stuff you don’t like.<br>因此，问自己 “在研究生院是否能如鱼得水” 其实有点误导性，因为在计算机科学领域，几乎没人能真正 “如鱼得水”—— 这个领域本身就对自己的定位感到困惑。所以，你主要对黑客技能（编程）感兴趣这件事，不应该成为你读研的阻碍。只是要提醒你，读研期间你会不得不做很多自己不喜欢的事。</p><p>Number one will be your dissertation. Almost everyone hates their dissertation by the time they’re done with it. The process inherently tends to produce an unpleasant result, like a cake made out of whole wheat flour and baked for twelve hours. Few dissertations are read with pleasure, especially by their authors.<br>其中最主要的就是博士论文。几乎所有人在完成博士论文时，都会对它感到厌烦。博士论文的写作过程，本质上就容易产生令人不愉快的结果，就像用全麦面粉烤了 12 个小时的蛋糕一样 —— 没人会喜欢吃，尤其是写论文的人自己。</p><p>But thousands before you have suffered through writing a dissertation. And aside from that, grad school is close to paradise. Many people remember it as the happiest time of their lives. And nearly all the rest, including me, remember it as a period that would have been, if they hadn’t had to write a dissertation. [5]<br>但在你之前，已经有成千上万的人熬过了写博士论文的过程。而且除了论文之外，研究生院几乎就像天堂一样。很多人把读研时光当作人生中最快乐的一段日子；而剩下的几乎所有人（包括我）都会觉得，如果不用写博士论文，那段时光本可以很快乐。[5]</p><p>The danger with grad school is that you don’t see the scary part upfront. PhD programs start out as college part 2, with several years of classes. So by the time you face the horror of writing a dissertation, you’re already several years in. If you quit now, you’ll be a grad-school dropout, and you probably won’t like that idea. When Robert got kicked out of grad school for writing the Internet worm of 1988, I envied him enormously for finding a way out without the stigma of failure.<br>读研的风险在于，你一开始看不到它可怕的一面。博士项目刚开始的时候就像 “大学 2.0 版”，有好几年的课程要上。等你意识到写博士论文有多可怕时，已经投入了好几年时间。这时候如果放弃，你就成了 “研究生辍学者”，而你很可能不喜欢这个标签。1988 年，罗伯特因为编写互联网蠕虫程序被研究生院开除，我当时特别羡慕他 —— 他找到了一条不用背负 “失败” 污名的退出之路。</p><p>On the whole, grad school is probably better than most alternatives. You meet a lot of smart people, and your glum procrastination will at least be a powerful common bond. And of course you have a PhD at the end. I forgot about that. I suppose that’s worth something.<br>总的来说，读研可能比大多数其他选择都要好。你会遇到很多聪明的人，而且你那些 “郁闷的拖延时刻” 至少会成为你们之间强有力的共同话题。当然，最终你还能拿到一个博士学位 —— 我之前忘了提这个，想来它应该还是有点价值的。</p><p>The greatest advantage of a PhD (besides being the union card of academia, of course) may be that it gives you some baseline confidence. For example, the Honeywell thermostats in my house have the most atrocious UI. My mother, who has the same model, diligently spent a day reading the user’s manual to learn how to operate hers. She assumed the problem was with her. But I can think to myself “If someone with a PhD in computer science can’t understand this thermostat, it must be badly designed.”<br>博士学位最大的优势（当然，除了它是学术界的 “入场券” 之外），可能是它能给你带来某种基本的自信。比如，我家霍尼韦尔（Honeywell）恒温器的用户界面（UI）糟糕透顶。我妈妈也用同款，她认真地花了一天时间读说明书，想学会怎么用，还觉得是自己的问题。但我会想：“如果一个拥有计算机科学博士学位的人都搞不懂这个恒温器，那肯定是它的设计太烂了。”</p><p>If you still want to go to grad school after this equivocal recommendation, I can give you solid advice about how to get in. A lot of my friends are CS professors now, so I have the inside story about admissions. It’s quite different from college. At most colleges, admissions officers decide who gets in. For PhD programs, the professors do. And they try to do it well, because the people they admit are going to be working for them.<br>如果听了我这种模棱两可的推荐后，你还是想读研，我可以给你一些切实的申请建议。我现在有很多朋友是计算机科学专业的教授，所以我知道招生的内幕。博士项目的招生和本科招生大不一样：大多数本科招生是由招生官决定的，而博士项目的招生是由教授们决定的。而且他们会认真对待招生，因为他们招进来的人，未来会为他们工作。</p><p>Apparently only recommendations really matter at the best schools. Standardized tests count for nothing, and grades for little. The essay is mostly an opportunity to disqualify yourself by saying something stupid. The only thing professors trust is recommendations, preferably from people they know. [6]<br>显然，在顶尖院校的博士招生中，只有推荐信才是真正重要的。标准化考试成绩几乎没用，本科成绩也没多大分量。个人陈述（essay）基本上只是一个 “坑”—— 如果你说些蠢话，就会被淘汰。教授们唯一信任的就是推荐信，而且最好是来自他们认识的人的推荐信。[6]</p><p>So if you want to get into a PhD program, the key is to impress your professors. And from my friends who are professors I know what impresses them: not merely trying to impress them. They’re not impressed by students who get good grades or want to be their research assistants so they can get into grad school. They’re impressed by students who get good grades and want to be their research assistants because they’re genuinely interested in the topic.<br>因此，如果你想进入博士项目，关键是给教授留下好印象。从我的教授朋友那里，我知道什么样的学生能打动他们：不是 “刻意想打动他们” 的学生。那些只是为了读研而拿好成绩、想当科研助理的学生，并不会让教授心动；真正能打动教授的，是那些既能拿好成绩，又因为真心对课题感兴趣而想当科研助理的学生。</p><p>So the best thing you can do in college, whether you want to get into grad school or just be good at hacking, is figure out what you truly like. It’s hard to trick professors into letting you into grad school, and impossible to trick problems into letting you solve them. College is where faking stops working. From this point, unless you want to go work for a big company, which is like reverting to high school, the only way forward is through doing what you love.<br>因此，无论你是想读研，还是只想精通黑客技能（编程），在大学里能做的最好的事，就是弄清楚自己真正喜欢什么。想骗教授让你读研，很难；想骗难题让你解决，更不可能。大学是 “装样子” 行不通的地方。从现在开始，除非你想进大公司工作（这有点像退回到高中时代），否则唯一的前进方向，就是去做自己热爱的事。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] No one seems to have minded, which shows how unimportant the Arpanet (which became the Internet) was as late as 1984.<br>似乎没人对此在意，这一情况足以说明，直到 1984 年，阿帕网（即后来互联网的前身）的重要性依然微乎其微。</p><p>[2] This is why, when I became an employer, I didn’t care about GPAs. In fact, we actively sought out people who’d failed out of school. We once put up posters around Harvard saying “Did you just get kicked out for doing badly in your classes because you spent all your time working on some project of your own? Come work for us!” We managed to find a kid who had been, and he was a great hacker.<br>这就是为什么当我成为雇主后，并不看重平均学分绩点（GPA）。事实上，我们还会主动寻找那些从学校退学的人。有一次，我们在哈佛大学各处张贴海报，上面写着：“你是否因为把所有时间都花在自己的某个项目上，导致课程成绩糟糕而被退学？来为我们工作吧！” 我们成功找到了一个符合这种情况的年轻人，而他后来成了一名出色的黑客。</p><p>When Harvard kicks undergrads out for a year, they have to get jobs. The idea is to show them how awful the real world is, so they’ll understand how lucky they are to be in college. This plan backfired with the guy who came to work for us, because he had more fun than he’d had in school, and made more that year from stock options than any of his professors did in salary. So instead of crawling back repentant at the end of the year, he took another year off and went to Europe. He did eventually graduate at about 26.<br>哈佛大学对本科生作出停学一年的处分时，这些学生必须去找工作。学校的初衷是想让他们见识现实世界有多糟糕，从而明白能在大学里读书是多么幸运。但这个计划在来我们这里工作的那个年轻人身上却适得其反 —— 他在这里比在学校里过得更开心，而且那一年通过股票期权赚到的钱，比他所有教授的年薪加起来还多。所以，到了年底，他并没有心怀愧疚地回到学校，反而又休了一年假去了欧洲。他最终在大约 26 岁的时候顺利毕业。</p><p>[3] Eric Raymond says the best metaphors for hackers are in set theory, combinatorics, and graph theory.<br>埃里克・雷蒙德表示，用集合论、组合数学和图论中的概念来比喻黑客，是最贴切的方式。</p><p>Trevor Blackwell reminds you to take math classes intended for math majors. “‘Math for engineers’ classes sucked mightily. In fact any ‘x for engineers’ sucks, where x includes math, law, writing and visual design.”<br>特雷弗・布莱克韦尔提醒人们，要去上为数学专业学生开设的数学课。“‘工程数学’这类课程糟糕透顶。事实上，任何‘工程类 XX’课程都很差劲，这里的 XX 包括数学、法律、写作和视觉设计。”</p><p>[4] Other highly recommended books: What is Mathematics?, by Courant and Robbins; Geometry and the Imagination by Hilbert and Cohn-Vossen. And for those interested in graphic design, Byrne’s Euclid.<br>其他强烈推荐的书籍包括：库朗和罗宾斯所著的《什么是数学？》、希尔伯特与科恩 - 福森所著的《几何与想象力》。而对于那些对平面设计感兴趣的人，推荐阅读《伯恩斯版欧几里得几何》。</p><p>[5] If you wanted to have the perfect life, the thing to do would be to go to grad school, secretly write your dissertation in the first year or two, and then just enjoy yourself for the next three years, dribbling out a chapter at a time. This prospect will make grad students’ mouths water, but I know of no one who’s had the discipline to pull it off.<br>如果你想拥有完美的生活，那么理想的做法是：先去读研究生，在最初的一两年里偷偷把毕业论文写完，然后在接下来的三年里尽情享受生活，每次只慢慢交出一个章节即可。这种设想会让研究生们垂涎欲滴，但据我所知，还没有人有足够的自制力能做到这一点。</p><p>[6] One professor friend says that 15-20% of the grad students they admit each year are “long shots.” But what he means by long shots are people whose applications are perfect in every way, except that no one on the admissions committee knows the professors who wrote the recommendations.<br>我有一位教授朋友说，他们每年录取的研究生中，有 15% 到 20% 是 “冷门候选人”。但他所说的 “冷门”，指的是那些申请材料各方面都很完美，唯独招生委员会里没人认识为其撰写推荐信的教授的申请者。</p><p>So if you want to get into grad school in the sciences, you need to go to college somewhere with real research professors. Otherwise you’ll seem a risky bet to admissions committees, no matter how good you are.<br>因此，如果你想申请理科类研究生项目，就需要去一所拥有真正从事科研的教授的大学读本科。否则，无论你多优秀，在招生委员会看来，你都像是一个高风险的选择。</p><p>Which implies a surprising but apparently inevitable consequence: little liberal arts colleges are doomed. Most smart high school kids at least consider going into the sciences, even if they ultimately choose not to. Why go to a college that limits their options?<br>这就引出了一个令人意外但似乎不可避免的结论：小型文理学院的前景堪忧。大多数聪明的高中生至少会考虑未来从事科研相关工作，即便最终没有选择这条道路。既然如此，他们为什么要去一所会限制自己选择的大学呢？</p><p>Thanks to Trevor Blackwell, Alex Lewin, Jessica Livingston, Robert Morris, Eric Raymond, and several anonymous CS professors for reading drafts of this, and to the students whose questions began it.<br>感谢特雷弗・布莱克韦尔、亚历克斯・莱文、杰西卡・利文斯顿、罗伯特・莫里斯、埃里克・雷蒙德以及几位匿名的计算机科学教授审阅了本文的初稿，同时也感谢那些提出问题、促使本文诞生的学生们。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美国制造</title>
    <link href="/2025/08/25/made-in-usa/"/>
    <url>/2025/08/25/made-in-usa/</url>
    
    <content type="html"><![CDATA[<h2 id="Made-in-USA"><a href="#Made-in-USA" class="headerlink" title="Made in USA"></a>Made in USA</h2><p>原文链接: <a href="https://paulgraham.com/usa.html">https://paulgraham.com/usa.html</a></p><p>November 2004（2004 年 11 月）</p><p>(This is a new essay for the Japanese edition of Hackers &amp; Painters. It tries to explain why Americans make some things well and others badly.)<br>（本文是为《黑客与画家》日文版撰写的新文章，旨在解释为何美国人在某些领域擅长制造，在另一些领域却表现糟糕。）</p><p>A few years ago an Italian friend of mine travelled by train from Boston to Providence. She had only been in America for a couple weeks and hadn’t seen much of the country yet. She arrived looking astonished. “It’s so ugly!”<br>几年前，我的一位意大利朋友乘火车从波士顿前往普罗维登斯。她来美国才几周，尚未充分见识这个国家。抵达后，她满脸惊讶地说：“这里也太丑了！”</p><p>People from other rich countries can scarcely imagine the squalor of the man-made bits of America. In travel books they show you mostly natural environments: the Grand Canyon, whitewater rafting, horses in a field. If you see pictures with man-made things in them, it will be either a view of the New York skyline shot from a discreet distance, or a carefully cropped image of a seacoast town in Maine.<br>其他富裕国家的人几乎无法想象美国人工建造区域的破败景象。旅游书籍中呈现的大多是自然景观：大峡谷、激流漂流、田野中的马匹。即便出现有人工建筑的图片，要么是从合适距离拍摄的纽约天际线，要么是经过精心裁剪的缅因州海滨小镇画面。</p><p>How can it be, visitors must wonder. How can the richest country in the world look like this?<br>游客们肯定会疑惑：怎么会这样？世界上最富有的国家，怎么会是这副模样？</p><p>Oddly enough, it may not be a coincidence. Americans are good at some things and bad at others. We’re good at making movies and software, and bad at making cars and cities. And I think we may be good at what we’re good at for the same reason we’re bad at what we’re bad at. We’re impatient. In America, if you want to do something, you don’t worry that it might come out badly, or upset delicate social balances, or that people might think you’re getting above yourself. If you want to do something, as Nike says, just do it.<br>奇怪的是，这或许并非巧合。美国人在某些事上表现出色，在另一些事上则不尽如人意 —— 我们擅长制作电影和软件，却不擅长制造汽车和规划城市。而我认为，我们擅长某些事与不擅长另一些事，根源或许是相同的：我们缺乏耐心。在美国，若你想做某件事，不会担心结果可能糟糕、会打破微妙的社会平衡，或是别人会觉得你自命不凡。正如耐克的广告语所说，想做就做。</p><p>This works well in some fields and badly in others. I suspect it works in movies and software because they’re both messy processes. “Systematic” is the last word I’d use to describe the way good programmers write software. Code is not something they assemble painstakingly after careful planning, like the pyramids. It’s something they plunge into, working fast and constantly changing their minds, like a charcoal sketch.<br>这种 “想做就做” 的模式在部分领域效果显著，在另一些领域却适得其反。我猜想它在电影和软件领域奏效，是因为这两个领域的创作过程本就混乱无序。“系统化” 绝不是用来形容优秀程序员编写软件方式的词。代码并非程序员经过周密规划后精心拼凑而成的产物（就像建造金字塔那样），而是他们全身心投入、快速推进且不断改变思路的成果，如同创作炭笔素描一般。</p><p>In software, paradoxical as it sounds, good craftsmanship means working fast. If you work slowly and meticulously, you merely end up with a very fine implementation of your initial, mistaken idea. Working slowly and meticulously is premature optimization. Better to get a prototype done fast, and see what new ideas it gives you.<br>在软件领域，尽管听起来有些矛盾，但精湛的技艺恰恰意味着快速工作。若你慢条斯理、一丝不苟地做，最终不过是将最初错误的想法完美地落地而已。这种慢节奏、精细化的工作方式属于 “过早优化”。不如快速完成一个原型，再从中发掘新的思路。</p><p>It sounds like making movies works a lot like making software. Every movie is a Frankenstein, full of imperfections and usually quite different from what was originally envisioned. But interesting, and finished fairly quickly.<br>电影制作的过程似乎与软件制作十分相似。每一部电影都像 “弗兰肯斯坦”（指拼凑而成的事物），充满瑕疵，且往往与最初的设想相去甚远。但这类电影通常很有趣，且能较快完成制作。</p><p>I think we get away with this in movies and software because they’re both malleable mediums. Boldness pays. And if at the last minute two parts don’t quite fit, you can figure out some hack that will at least conceal the problem.<br>我认为我们能在电影和软件领域采用这种模式而不受惩罚，是因为这两种媒介都具有较强的可塑性。大胆尝试会带来回报，而且即便在最后一刻发现两个部分无法完美契合，你也能找到一些 “权宜之计”，至少能掩盖问题。</p><p>Not so with cars, or cities. They are all too physical. If the car business worked like software or movies, you’d surpass your competitors by making a car that weighed only fifty pounds, or folded up to the size of a motorcycle when you wanted to park it. But with physical products there are more constraints. You don’t win by dramatic innovations so much as by good taste and attention to detail.<br>但汽车制造和城市规划却并非如此，它们具有太强的实体属性。若汽车行业的运作方式像软件或电影领域那样，你或许能通过制造出仅重 50 磅（约 22.7 公斤）的汽车，或是能折叠成摩托车大小方便停放的汽车来超越竞争对手。但实体产品面临的限制更多，要在这个领域胜出，靠的不是惊天动地的创新，而是出色的审美品位和对细节的关注。</p><p>The trouble is, the very word “taste” sounds slightly ridiculous to American ears. It seems pretentious, or frivolous, or even effeminate. Blue staters think it’s “subjective,” and red staters think it’s for sissies. So anyone in America who really cares about design will be sailing upwind.<br>问题在于，“品位” 这个词在美国人听来，总有些可笑。它似乎带有自命不凡、轻浮，甚至柔弱的意味。支持民主党的 “蓝州” 民众认为 “品位” 是主观的，支持共和党的 “红州” 民众则觉得讲究品位是 “娘娘腔” 的表现。因此，在美国，真正在乎设计的人往往是在逆风前行。</p><p>Twenty years ago we used to hear that the problem with the US car industry was the workers. We don’t hear that any more now that Japanese companies are building cars in the US. The problem with American cars is bad design. You can see that just by looking at them.<br>20 年前，人们常说美国汽车行业的问题出在工人身上。但如今，日本企业已在美国本土生产汽车，这种说法便不复存在了。美国汽车的真正问题在于设计糟糕 —— 只需看一眼，你就能发现这一点。</p><p>All that extra sheet metal on the AMC Matador wasn’t added by the workers. The problem with this car, as with American cars today, is that it was designed by marketing people instead of designers.<br>AMC 马塔多汽车上那些多余的金属板材，并非工人擅自添加。这款车的问题（如今美国汽车也存在同样问题）在于，它的设计出自营销人员之手，而非专业设计师。</p><p>Why do the Japanese make better cars than us? Some say it’s because their culture encourages cooperation. That may come into it. But in this case it seems more to the point that their culture prizes design and craftsmanship.<br>为何日本人能制造出比我们更好的汽车？有人认为是因为日本文化鼓励合作。这或许是原因之一，但在汽车制造领域，更关键的原因似乎是日本文化推崇设计与工艺。</p><p>For centuries the Japanese have made finer things than we have in the West. When you look at swords they made in 1200, you just can’t believe the date on the label is right. Presumably their cars fit together more precisely than ours for the same reason their joinery always has. They’re obsessed with making things well.<br>几个世纪以来，日本人制作的器物一直比西方更精良。当你看到他们在 1200 年打造的武士刀时，简直不敢相信标签上的年份是真的。想必他们的汽车能比我们的汽车组装得更精密，与他们的木工工艺始终精湛的原因相同 —— 他们执着于把东西做好。</p><p>Not us. When we make something in America, our aim is just to get the job done. Once we reach that point, we take one of two routes. We can stop there, and have something crude but serviceable, like a Vise-grip. Or we can improve it, which usually means encrusting it with gratuitous ornament. When we want to make a car “better,” we stick tail fins on it, or make it longer, or make the windows smaller, depending on the current fashion.<br>我们却并非如此。在美国，制作东西的目标仅仅是 “完成任务”。一旦达到这个目标，我们会选择两条路中的一条：要么就此打住，做出一个粗糙但能用的东西（比如 vise-grip 牌大力钳）；要么所谓的 “改进”，通常只是给它加上不必要的装饰。当我们想让汽车 “变得更好” 时，会根据当下的潮流给它装上尾翼、加长车身，或是缩小车窗 —— 仅此而已。</p><p>Ditto for houses. In America you can have either a flimsy box banged together out of two by fours and drywall, or a McMansion– a flimsy box banged together out of two by fours and drywall, but larger, more dramatic-looking, and full of expensive fittings. Rich people don’t get better design or craftsmanship; they just get a larger, more conspicuous version of the standard house.<br>房屋建造也是如此。在美国，你能买到的要么是用 2×4 英寸（约 5×10 厘米）的木方和石膏板仓促搭建的单薄房屋，要么是 “麦克豪宅”—— 本质上还是用同样材料搭建的单薄房屋，只是面积更大、外观更浮夸，且装满了昂贵的配件。富人并没有享受到更好的设计或工艺，他们只是得到了普通房屋的 “加大版”，更引人注目而已。</p><p>We don’t especially prize design or craftsmanship here. What we like is speed, and we’re willing to do something in an ugly way to get it done fast. In some fields, like software or movies, this is a net win.<br>我们并不特别推崇设计或工艺，更看重的是速度 —— 为了快速完成任务，即便方式难看也无所谓。在软件、电影等领域，这种做法最终是划算的。</p><p>But it’s not just that software and movies are malleable mediums. In those businesses, the designers (though they’re not generally called that) have more power. Software companies, at least successful ones, tend to be run by programmers. And in the film industry, though producers may second-guess directors, the director controls most of what appears on the screen. And so American software and movies, and Japanese cars, all have this in common: the people in charge care about design– the former because the designers are in charge, and the latter because the whole culture cares about design.<br>但这不仅仅是因为软件和电影是可塑性强的媒介，更因为在这些行业中，“设计师”（尽管他们通常不被如此称呼）拥有更大的权力。软件公司（至少是成功的软件公司）往往由程序员运营；在电影行业，尽管制片人可能会对导演指手画脚，但屏幕上呈现的大部分内容仍由导演掌控。因此，美国的软件、电影与日本的汽车有一个共同点：负责人都在乎设计 —— 前者是因为设计师本身就是负责人，后者则是因为整个文化都推崇设计。</p><p>I think most Japanese executives would be horrified at the idea of making a bad car. Whereas American executives, in their hearts, still believe the most important thing about a car is the image it projects. Make a good car? What’s “good?” It’s so subjective. If you want to know how to design a car, ask a focus group.<br>我想，大多数日本高管若想到要制造一辆劣质汽车，都会感到震惊。而美国高管在内心深处仍认为，汽车最重要的是它所传递的形象。“制造一辆好车？”——“好” 是什么定义？这太主观了。若想知道该如何设计汽车，问问焦点小组就好。</p><p>Instead of relying on their own internal design compass (like Henry Ford did), American car companies try to make what marketing people think consumers want. But it isn’t working. American cars continue to lose market share. And the reason is that the customer doesn’t want what he thinks he wants.<br>美国汽车公司没有像亨利・福特那样依靠自身内在的设计判断力，反而试图制造营销人员认为消费者想要的产品。但这种做法行不通 —— 美国汽车的市场份额持续下滑。原因在于，消费者想要的并非他们自己认为想要的东西。</p><p>Letting focus groups design your cars for you only wins in the short term. In the long term, it pays to bet on good design. The focus group may say they want the meretricious feature du jour, but what they want even more is to imitate sophisticated buyers, and they, though a small minority, really do care about good design. Eventually the pimps and drug dealers notice that the doctors and lawyers have switched from Cadillac to Lexus, and do the same.<br>让焦点小组 “设计” 汽车，只能在短期内奏效。从长远来看，押注于优秀设计才会有回报。焦点小组可能会说他们想要当下花哨的功能，但他们更渴望模仿有品位的消费者 —— 尽管这类消费者占比很小，却真正在乎优秀的设计。最终，就连皮条客和毒贩都会发现，医生和律师已经从开凯迪拉克换成了开雷克萨斯，于是他们也会跟风更换。</p><p>Apple is an interesting counterexample to the general American trend. If you want to buy a nice CD player, you’ll probably buy a Japanese one. But if you want to buy an MP3 player, you’ll probably buy an iPod. What happened? Why doesn’t Sony dominate MP3 players? Because Apple is in the consumer electronics business now, and unlike other American companies, they’re obsessed with good design. Or more precisely, their CEO is.<br>苹果公司是美国普遍趋势下一个有趣的反例。若你想买一台好的 CD 播放器，很可能会选择日本产品；但若是想买 MP3 播放器，大概率会选择 iPod。这是为什么？为何索尼没有主导 MP3 播放器市场？因为苹果如今涉足消费电子领域，且与其他美国公司不同，苹果执着于优秀的设计 —— 更准确地说，是苹果的 CEO（指史蒂夫・乔布斯）执着于设计。</p><p>I just got an iPod, and it’s not just nice. It’s surprisingly nice. For it to surprise me, it must be satisfying expectations I didn’t know I had. No focus group is going to discover those. Only a great designer can.<br>我刚买了一台 iPod，它不仅好用，还好用得让人惊喜。它能给我带来惊喜，说明它满足了我自己都未曾察觉的期望。这种期望，任何焦点小组都无法发现，只有伟大的设计师才能捕捉到。</p><p>Cars aren’t the worst thing we make in America. Where the just-do-it model fails most dramatically is in our cities– or rather, exurbs. If real estate developers operated on a large enough scale, if they built whole towns, market forces would compel them to build towns that didn’t suck. But they only build a couple office buildings or suburban streets at a time, and the result is so depressing that the inhabitants consider it a great treat to fly to Europe and spend a couple weeks living what is, for people there, just everyday life. [1]<br>汽车并非美国制造的最糟糕的东西。“想做就做” 模式失败得最彻底的领域，是我们的城市 —— 更准确地说是郊区。若房地产开发商的运营规模足够大，能整体规划建设城镇，市场力量或许会迫使他们建造出不那么糟糕的城镇。但现实是，他们每次只建几栋办公楼或几条郊区街道，最终的结果令人沮丧：居民们会把飞往欧洲、过上几周当地人眼中的日常生活，当作一种难得的享受。[1]</p><p>But the just-do-it model does have advantages. It seems the clear winner for generating wealth and technical innovations (which are practically the same thing). I think speed is the reason. It’s hard to create wealth by making a commodity. The real value is in things that are new, and if you want to be the first to make something, it helps to work fast. For better or worse, the just-do-it model is fast, whether you’re Dan Bricklin writing the prototype of VisiCalc in a weekend, or a real estate developer building a block of shoddy condos in a month.<br>但 “想做就做” 的模式确实有其优势：在创造财富和技术创新（二者实际上几乎是一回事）方面，它显然是赢家。我认为关键原因在于速度。靠生产大宗商品很难创造财富，真正的价值存在于新事物之中。若想成为首个创造某事物的人，快速行动会大有帮助。无论结果好坏，这种模式的效率都很高：无论是丹・布里克林在一个周末就写出 VisiCalc（首款电子表格软件）的原型，还是房地产开发商在一个月内建起一栋劣质公寓楼，都是如此。</p><p>If I had to choose between the just-do-it model and the careful model, I’d probably choose just-do-it. But do we have to choose? Could we have it both ways? Could Americans have nice places to live without undermining the impatient, individualistic spirit that makes us good at software? Could other countries introduce more individualism into their technology companies and research labs without having it metastasize as strip malls? I’m optimistic. It’s harder to say about other countries, but in the US, at least, I think we can have both.<br>若必须在 “想做就做” 模式和 “谨慎细致” 模式之间选择，我或许会选前者。但我们真的必须二选一吗？能否两者兼得？美国人能否在拥有宜居环境的同时，不削弱那种让我们擅长软件开发的急躁、个人主义精神？其他国家能否在科技公司和研究实验室中引入更多个人主义，同时避免其像郊区商业街那样无序扩张？我对此持乐观态度。其他国家的情况难以断言，但至少在美国，我认为我们可以两者兼得。</p><p>Apple is an encouraging example. They’ve managed to preserve enough of the impatient, hackerly spirit you need to write software. And yet when you pick up a new Apple laptop, well, it doesn’t seem American. It’s too perfect. It seems as if it must have been made by a Swedish or a Japanese company.<br>苹果公司就是一个令人鼓舞的例子。它成功保留了编写软件所必需的那种急躁、“黑客式” 的精神；但当你拿起一台全新的苹果笔记本电脑时，它却不像是 “美国制造”—— 它太完美了，仿佛出自瑞典或日本公司之手。</p><p>In many technologies, version 2 has higher resolution. Why not in design generally? I think we’ll gradually see national characters superseded by occupational characters: hackers in Japan will be allowed to behave with a willfulness that would now seem unJapanese, and products in America will be designed with an insistence on taste that would now seem unAmerican. Perhaps the most successful countries, in the future, will be those most willing to ignore what are now considered national characters, and do each kind of work in the way that works best. Race you.<br>在许多技术领域，2.0 版本总会有更高的精度。那么在设计领域，为何不能如此呢？我认为，我们将逐渐看到 “职业特质” 取代 “民族特质”：日本的黑客将被允许展现出如今看来 “不符合日本风格” 的任性；美国的产品设计将开始坚持如今看来 “不符合美国风格” 的品位。或许在未来，最成功的国家将是那些最愿意抛开当下所谓 “民族特质”，并以最有效的方式去完成各类工作的国家。咱们拭目以待。</p><p>Notes（注释）</p><p>[1] Japanese cities are ugly too, but for different reasons. Japan is prone to earthquakes, so buildings are traditionally seen as temporary; there is no grand tradition of city planning like the one Europeans inherited from Rome. The other cause is the notoriously corrupt relationship between the government and construction companies.<br>[1] 日本的城市也很丑，但原因不同。日本是地震多发国，因此建筑传统上被视为临时性的；而且日本没有像欧洲那样从罗马继承下来的宏大城市规划传统。另一个原因是政府与建筑公司之间众所周知的腐败关系。</p><p>Thanks to Trevor Blackwell, Barry Eisler, Sarah Harlin, Shiro Kawai, Jessica Livingston, Jackie McDonough, Robert Morris, and Eric Raymond for reading drafts of this.<br>感谢特雷弗・布莱克威尔、巴里・艾斯勒、萨拉・哈林、川井史郎、杰西卡・利文斯顿、杰姬・麦克多诺、罗伯特・莫里斯和埃里克・雷蒙德阅读本文初稿并提出建议。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网泡沫中那些正确的事</title>
    <link href="/2025/08/25/what-the-bubble-got-right/"/>
    <url>/2025/08/25/what-the-bubble-got-right/</url>
    
    <content type="html"><![CDATA[<h2 id="What-the-Bubble-Got-Right"><a href="#What-the-Bubble-Got-Right" class="headerlink" title="What the Bubble Got Right"></a>What the Bubble Got Right</h2><p>原文链接: <a href="https://paulgraham.com/bubble.html">https://paulgraham.com/bubble.html</a></p><p>September 2004</p><p>I had a front row seat for the Internet Bubble, because I worked at Yahoo during 1998 and 1999. One day, when the stock was trading around $200, I sat down and calculated what I thought the price should be. The answer I got was $12. I went to the next cubicle and told my friend Trevor. “Twelve!” he said. He tried to sound indignant, but he didn’t quite manage it. He knew as well as I did that our valuation was crazy.<br>我曾近距离见证互联网泡沫，因为 1998 到 1999 年间我在雅虎工作。有一天，当雅虎股价在 200 美元左右波动时，我坐下来算了算，得出了我认为合理的股价 ——12 美元。我走到隔壁隔间，把这个结果告诉了朋友特雷弗。“12 美元！” 他惊呼道。他努力想表现得愤慨，但没完全成功。因为他和我一样清楚，当时的估值简直离谱。</p><p>Yahoo was a special case. It was not just our price to earnings ratio that was bogus. Half our earnings were too. Not in the Enron way, of course. The finance guys seemed scrupulous about reporting earnings. What made our earnings bogus was that Yahoo was, in effect, the center of a Ponzi scheme. Investors looked at Yahoo’s earnings and said to themselves, here is proof that Internet companies can make money. So they invested in new startups that promised to be the next Yahoo. And as soon as these startups got the money, what did they do with it? Buy millions of dollars worth of advertising on Yahoo to promote their brand. Result: a capital investment in a startup this quarter shows up as Yahoo earnings next quarter—stimulating another round of investments in startups.<br>雅虎是个特例。当时不仅我们的市盈率虚假，连一半的收益也名不副实。当然，这和安然公司那种欺诈手段不同 —— 财务部门在上报收益时似乎还是很谨慎的。我们收益之所以虚假，本质上是因为雅虎成了一场庞氏骗局的中心。投资者看到雅虎的收益，会告诉自己：这就是互联网公司能赚钱的证据。于是他们投资那些宣称会成为 “下一个雅虎” 的新初创公司。而这些初创公司一旦拿到投资，会做什么？它们会在雅虎上购买价值数百万美元的广告来推广自己的品牌。结果就是：本季度对初创公司的一笔资本投资，会在下一季度变成雅虎的收益 —— 进而刺激新一轮对初创公司的投资。</p><p>As in a Ponzi scheme, what seemed to be the returns of this system were simply the latest round of investments in it. What made it not a Ponzi scheme was that it was unintentional. At least, I think it was. The venture capital business is pretty incestuous, and there were presumably people in a position, if not to create this situation, to realize what was happening and to milk it.<br>和庞氏骗局一样，这个体系中看似 “回报” 的东西，其实只是新一轮的投入资金。但它之所以不算严格意义上的庞氏骗局，是因为这一切并非有意设计。至少我认为是这样。不过风险投资行业的关系本就盘根错节，想必有些人即便没有主动制造这种局面，也早就意识到了正在发生的事，并从中渔利。</p><p>A year later the game was up. Starting in January 2000, Yahoo’s stock price began to crash, ultimately losing 95% of its value.<br>一年后，这场游戏结束了。从 2000 年 1 月开始，雅虎股价暴跌，最终蒸发了 95% 的市值。</p><p>Notice, though, that even with all the fat trimmed off its market cap, Yahoo was still worth a lot. Even at the morning-after valuations of March and April 2001, the people at Yahoo had managed to create a company worth about $8 billion in just six years.<br>但要注意的是，即便市值中的泡沫被彻底挤掉，雅虎依然价值不菲。即便在 2001 年 3、4 月泡沫破裂后的估值水平下，雅虎员工也仅用六年时间，就打造出了一家价值约 80 亿美元的公司。</p><p>The fact is, despite all the nonsense we heard during the Bubble about the “new economy,” there was a core of truth. You need that to get a really big bubble: you need to have something solid at the center, so that even smart people are sucked in. (Isaac Newton and Jonathan Swift both lost money in the South Sea Bubble of 1720.)<br>事实上，尽管泡沫时期我们听了无数关于 “新经济” 的胡言乱语，但其中也存在核心的真相。一场真正的大泡沫必然需要这样的内核：必须有某种坚实的东西作为核心，才能让即便聪明的人也深陷其中。（艾萨克・牛顿和乔纳森・斯威夫特都在 1720 年的南海泡沫中亏过钱。）</p><p>Now the pendulum has swung the other way. Now anything that became fashionable during the Bubble is ipso facto unfashionable. But that’s a mistake—an even bigger mistake than believing what everyone was saying in 1999. Over the long term, what the Bubble got right will be more important than what it got wrong.<br>如今趋势彻底反转：凡是在泡沫时期流行过的东西，现在都天然地变得 “过时”。但这是一个错误 —— 甚至比 1999 年相信所有人的言论更严重的错误。从长远来看，互联网泡沫中 “正确的部分”，其重要性将远超 “错误的部分”。</p><h3 id="Retail-VC"><a href="#Retail-VC" class="headerlink" title="Retail VC"></a><strong>Retail VC</strong></h3><p><strong>零售风险投资（Retail VC）</strong></p><p>After the excesses of the Bubble, it’s now considered dubious to take companies public before they have earnings. But there is nothing intrinsically wrong with that idea. Taking a company public at an early stage is simply retail VC: instead of going to venture capital firms for the last round of funding, you go to the public markets.<br>在泡沫的过度狂热之后，如今 “让未盈利的公司上市” 被认为是不可靠的做法。但这个想法本身并没有本质问题。让公司在发展早期上市，本质上就是 “零售风险投资”：与其向风险投资公司寻求最后一轮融资，不如直接面向公开市场融资。</p><p>By the end of the Bubble, companies going public with no earnings were being derided as “concept stocks,” as if it were inherently stupid to invest in them. But investing in concepts isn’t stupid; it’s what VCs do, and the best of them are far from stupid.<br>泡沫末期，未盈利就上市的公司被嘲讽为 “概念股”，仿佛投资它们本质上就是愚蠢的。但投资 “概念” 并不愚蠢 —— 这正是风险投资机构（VC）的日常工作，而其中最顶尖的机构绝不是愚蠢的。</p><p>The stock of a company that doesn’t yet have earnings is worth something. It may take a while for the market to learn how to value such companies, just as it had to learn to value common stocks in the early 20th century. But markets are good at solving that kind of problem. I wouldn’t be surprised if the market ultimately did a better job than VCs do now.<br>一家尚未盈利的公司，其股票依然有价值。市场可能需要一段时间才能学会如何为这类公司估值，就像 20 世纪初市场需要时间学会为普通股估值一样。但市场很擅长解决这类问题。如果未来市场在这方面做得比现在的风险投资机构更好，我丝毫不会感到惊讶。</p><p>Going public early will not be the right plan for every company. And it can of course be disruptive—by distracting the management, or by making the early employees suddenly rich. But just as the market will learn how to value startups, startups will learn how to minimize the damage of going public.<br>当然，并非所有公司都适合早期上市。这种做法也可能带来负面影响 —— 比如分散管理层精力，或是让早期员工一夜暴富后心态失衡。但就像市场会学会为初创公司估值一样，初创公司也会学会将早期上市的负面影响降到最低。</p><h3 id="The-Internet"><a href="#The-Internet" class="headerlink" title="The Internet"></a><strong>The Internet</strong></h3><p><strong>互联网的价值</strong></p><p>The Internet genuinely is a big deal. That was one reason even smart people were fooled by the Bubble. Obviously it was going to have a huge effect. Enough of an effect to triple the value of Nasdaq companies in two years? No, as it turned out. But it was hard to say for certain at the time. [1]<br>互联网确实意义重大。这也是即便聪明的人也会被泡沫迷惑的原因之一 —— 显然，互联网必将产生巨大影响。但它的影响真的大到能让纳斯达克公司的总市值在两年内翻三倍吗？事实证明并没有。但在当时，没人能给出确切答案。[1]</p><p>The same thing happened during the Mississippi and South Sea Bubbles. What drove them was the invention of organized public finance (the South Sea Company, despite its name, was really a competitor of the Bank of England). And that did turn out to be a big deal, in the long run.<br>密西西比泡沫和南海泡沫时期也发生过类似的事。推动这两场泡沫的，是 “有组织的公共金融” 这一创新（南海公司虽名为 “南海”，实则是英格兰银行的竞争对手）。而从长远来看，这一创新确实意义非凡。</p><p>Recognizing an important trend turns out to be easier than figuring out how to profit from it. The mistake investors always seem to make is to take the trend too literally. Since the Internet was the big new thing, investors supposed that the more Internettish the company, the better. Hence such parodies as <a href="https://pets.com/">Pets.Com</a>.<br>事实证明，识别重要趋势比搞清楚如何从中获利要容易得多。投资者似乎总在犯一个错误：过于直白地理解趋势。既然互联网是新的重大趋势，投资者就认为 “越互联网化的公司越好”—— 于是便出现了宠物网（<a href="https://pets.com/">Pets.Com</a>）这样的荒诞案例。</p><p>In fact most of the money to be made from big trends is made indirectly. It was not the railroads themselves that made the most money during the railroad boom, but the companies on either side, like Carnegie’s steelworks, which made the rails, and Standard Oil, which used railroads to get oil to the East Coast, where it could be shipped to Europe.<br>事实上，从重大趋势中赚钱，大多是通过间接方式。铁路繁荣时期，最赚钱的并非铁路公司本身，而是其上下游企业 —— 比如生产铁轨的卡内基钢铁厂，以及利用铁路将石油运到东海岸（再从那里运往欧洲）的标准石油公司。</p><p>I think the Internet will have great effects, and that what we’ve seen so far is nothing compared to what’s coming. But most of the winners will only indirectly be Internet companies; for every Google there will be ten JetBlues.<br>我认为互联网将产生深远影响，而我们目前所见的，与未来相比不过是冰山一角。但未来的赢家，大多不会是直接的互联网公司 —— 每出现一家谷歌（Google），就会有十家捷蓝航空（JetBlue）这样的间接受益者。</p><h3 id="Choices"><a href="#Choices" class="headerlink" title="Choices"></a><strong>Choices</strong></h3><p><strong>更多选择</strong></p><p>Why will the Internet have great effects? The general argument is that new forms of communication always do. They happen rarely (till industrial times there were just speech, writing, and printing), but when they do, they always cause a big splash.<br>为什么互联网会产生深远影响？一般观点认为，新型通信方式历来如此。这类创新极为罕见（在工业时代之前，只有口头语言、文字和印刷术三种），但每一次出现，都会引发巨大反响。</p><p>The specific argument, or one of them, is the Internet gives us more choices. In the “old” economy, the high cost of presenting information to people meant they had only a narrow range of options to choose from. The tiny, expensive pipeline to consumers was tellingly named “the channel.” Control the channel and you could feed them what you wanted, on your terms. And it was not just big corporations that depended on this principle. So, in their way, did labor unions, the traditional news media, and the art and literary establishments. Winning depended not on doing good work, but on gaining control of some bottleneck.<br>具体来说（其中一个关键原因），是互联网给了我们更多选择。在 “旧” 经济时代，信息传播的高成本意味着人们的选择范围非常有限。那条面向消费者、既狭窄又昂贵的传播路径，被形象地称为 “渠道”。控制了渠道，你就能按自己的规则向消费者推送你想让他们看到的东西。而依赖这一逻辑的不仅是大公司：工会、传统新闻媒体、艺术和文学界权威机构，都在以各自的方式依赖 “渠道控制”。能否成功，关键不在于工作做得多好，而在于能否掌控某个关键瓶颈。</p><p>There are signs that this is changing. Google has over 82 million unique users a month and annual revenues of about three billion dollars. [2] And yet have you ever seen a Google ad? Something is going on here.<br>有迹象表明，这种局面正在改变。谷歌每月的独立用户超过 8200 万，年收入约 30 亿美元。[2] 但你见过谷歌的广告吗？这背后一定有其原因。</p><p>Admittedly, Google is an extreme case. It’s very easy for people to switch to a new search engine. It costs little effort and no money to try a new one, and it’s easy to see if the results are better. And so Google doesn’t have to advertise. In a business like theirs, being the best is enough.<br>诚然，谷歌是个极端案例。用户切换到新的搜索引擎非常容易：尝试新引擎几乎不费力气、不花成本，而且很容易判断其结果是否更好。因此，谷歌根本不需要打广告。在这类业务中，“做到最好” 就足够了。</p><p>The exciting thing about the Internet is that it’s shifting everything in that direction. The hard part, if you want to win by making the best stuff, is the beginning. Eventually everyone will learn by word of mouth that you’re the best, but how do you survive to that point? And it is in this crucial stage that the Internet has the most effect. First, the Internet lets anyone find you at almost zero cost. Second, it dramatically speeds up the rate at which reputation spreads by word of mouth. Together these mean that in many fields the rule will be: Build it, and they will come. Make something great and put it online. That is a big change from the recipe for winning in the past century.<br>互联网最令人兴奋的地方，在于它正推动所有领域向这个方向转变。如果你想通过 “做出最好的产品” 来成功，最难的是起步阶段。最终，所有人都会通过口碑知道你是最好的，但你如何撑到那一天？而在这个关键阶段，互联网的作用最为显著：首先，互联网让任何人都能以近乎零成本找到你；其次，它极大地加快了口碑传播的速度。这两点共同意味着，在许多领域，规则将变成：“建好产品，用户自来”（Build it, and they will come）。做出优秀的东西，然后放到网上 —— 这与上个世纪的成功逻辑截然不同。</p><h3 id="Youth"><a href="#Youth" class="headerlink" title="Youth"></a><strong>Youth</strong></h3><p><strong>年轻人的潜力</strong></p><p>The aspect of the Internet Bubble that the press seemed most taken with was the youth of some of the startup founders. This too is a trend that will last. There is a huge standard deviation among 26 year olds. Some are fit only for entry level jobs, but others are ready to rule the world if they can find someone to handle the paperwork for them.<br>媒体似乎最关注互联网泡沫的一个特点，就是部分初创公司创始人的年轻。而这也是一个将持续下去的趋势。26 岁人群的能力差异极大：有些人只能胜任入门级工作，但另一些人只要能找到人处理文书工作，就足以 “掌控世界”。</p><p>A 26 year old may not be very good at managing people or dealing with the SEC. Those require experience. But those are also commodities, which can be handed off to some lieutenant. The most important quality in a CEO is his vision for the company’s future. What will they build next? And in that department, there are 26 year olds who can compete with anyone.<br>一个 26 岁的年轻人可能不擅长管理人员，也不擅长与美国证券交易委员会（SEC）打交道 —— 这些能力需要经验积累。但这些能力也属于 “可外包的事务”，可以交给副手处理。CEO 最重要的素质，是对公司未来的愿景：下一步要打造什么？而在这一点上，有些 26 岁的年轻人完全能与任何人抗衡。</p><p>In 1970 a company president meant someone in his fifties, at least. If he had technologists working for him, they were treated like a racing stable: prized, but not powerful. But as technology has grown more important, the power of nerds has grown to reflect it. Now it’s not enough for a CEO to have someone smart he can ask about technical matters. Increasingly, he has to be that person himself.<br>在 1970 年，公司总裁至少得是五十多岁的人。如果他手下有技术人员，这些人会被当作 “赛马饲养场” 对待：受重视，但没有实权。但随着技术的重要性日益提升，极客（nerds）的权力也随之增长。如今，CEO 只找一个懂技术的人咨询已经不够了 —— 越来越多的情况下，CEO 自己就必须是那个懂技术的人。</p><p>As always, business has clung to old forms. VCs still seem to want to install a legitimate-looking talking head as the CEO. But increasingly the founders of the company are the real powers, and the grey-headed man installed by the VCs more like a music group’s manager than a general.<br>商界总是固守旧模式。风险投资机构似乎仍想找一个 “看起来像模像样、能说会道” 的人来当 CEO。但如今，公司创始人正逐渐成为真正的掌权者，而风险投资机构安插的那位白发苍苍的 “CEO”，更像乐队经理，而非手握实权的 “将军”。</p><h3 id="Informality"><a href="#Informality" class="headerlink" title="Informality"></a><strong>Informality</strong></h3><p><strong>非正式着装与反形式主义</strong></p><p>In New York, the Bubble had dramatic consequences: suits went out of fashion. They made one seem old. So in 1998 powerful New York types were suddenly wearing open-necked shirts and khakis and oval wire-rimmed glasses, just like guys in Santa Clara.<br>在纽约，互联网泡沫带来了一个显著影响：西装不再流行。因为穿西装会让人显得 “老气”。于是在 1998 年，纽约的权贵人士突然开始穿开领衬衫、卡其裤，戴椭圆形金属框眼镜 —— 和圣克拉拉（硅谷核心区域之一）的人穿得一模一样。</p><p>The pendulum has swung back a bit, driven in part by a panicked reaction by the clothing industry. But I’m betting on the open-necked shirts. And this is not as frivolous a question as it might seem. Clothes are important, as all nerds can sense, though they may not realize it consciously.<br>如今趋势略有回落，部分原因是服装行业的恐慌性应对。但我敢打赌，开领衬衫的趋势会持续下去。而且这并非看起来那么无关紧要的问题。服装很重要 —— 所有极客都能隐约感觉到这一点，即便他们未必有意识地意识到。</p><p>If you’re a nerd, you can understand how important clothes are by asking yourself how you’d feel about a company that made you wear a suit and tie to work. The idea sounds horrible, doesn’t it? In fact, horrible far out of proportion to the mere discomfort of wearing such clothes. A company that made programmers wear suits would have something deeply wrong with it.<br>如果你是个极客，想理解服装的重要性，只需问自己：如果一家公司要求你穿西装打领带去上班，你会有什么感觉？这个想法听起来很可怕，对吧？而且这种 “可怕”，远不止是穿这类衣服带来的不适感 —— 要求程序员穿西装的公司，一定存在深层次的问题。</p><p>And what would be wrong would be that how one presented oneself counted more than the quality of one’s ideas. That’s the problem with formality. Dressing up is not so much bad in itself. The problem is the receptor it binds to: dressing up is inevitably a substitute for good ideas. It is no coincidence that technically inept business types are known as “suits.”<br>而这个问题就是：“个人形象” 比 “想法质量” 更重要。这就是形式主义的弊端。注重着装本身并非坏事，问题在于它所对应的潜在逻辑：着装讲究往往会成为 “缺乏好想法” 的替代品。技术能力低下的商务人士被称为 “西装革履者（suits）”，绝非巧合。</p><p>Nerds don’t just happen to dress informally. They do it too consistently. Consciously or not, they dress informally as a prophylactic measure against stupidity.<br>极客穿得随意，并非偶然。他们的着装风格高度一致。无论有意识与否，他们选择非正式着装，都是一种 “预防愚蠢行为” 的措施。</p><h3 id="Nerds"><a href="#Nerds" class="headerlink" title="Nerds"></a><strong>Nerds</strong></h3><p><strong>极客文化的崛起</strong></p><p>Clothing is only the most visible battleground in the war against formality. Nerds tend to eschew formality of any sort. They’re not impressed by one’s job title, for example, or any of the other appurtenances of authority.<br>服装只是 “反形式主义之战” 中最显眼的战场。极客往往会回避一切形式的繁文缛节 —— 比如，他们不会被职位头衔或其他任何权力象征打动。</p><p>Indeed, that’s practically the definition of a nerd. I found myself talking recently to someone from Hollywood who was planning a show about nerds. I thought it would be useful if I explained what a nerd was. What I came up with was: someone who doesn’t expend any effort on marketing himself.<br>事实上，这几乎就是极客的定义。最近我和一位来自好莱坞的人聊天，他正计划拍一部关于极客的剧。我觉得有必要向他解释 “极客” 到底是什么。我给出的定义是：不在自我包装上花费任何精力的人。</p><p>A nerd, in other words, is someone who concentrates on substance. So what’s the connection between nerds and technology? Roughly that you can’t fool mother nature. In technical matters, you have to get the right answers. If your software miscalculates the path of a space probe, you can’t finesse your way out of trouble by saying that your code is patriotic, or avant-garde, or any of the other dodges people use in nontechnical fields.<br>换句话说，极客是专注于 “实质内容” 的人。那么极客与技术之间有什么关联？大致来说，是 “无法欺骗自然规律”。在技术领域，你必须得出正确答案。如果你的软件算错了太空探测器的轨道，你不能用 “我的代码很爱国” 或 “我的代码很前卫” 这类非技术领域的借口来蒙混过关。</p><p>And as technology becomes increasingly important in the economy, nerd culture is rising with it. Nerds are already a lot cooler than they were when I was a kid. When I was in college in the mid-1980s, “nerd” was still an insult. People who majored in computer science generally tried to conceal it. Now women ask me where they can meet nerds. (The answer that springs to mind is “Usenix,” but that would be like drinking from a firehose.)<br>随着技术在经济中的重要性日益提升，极客文化也随之崛起。如今的极客，比我小时候受欢迎多了。20 世纪 80 年代中期我上大学时，“极客” 还是个侮辱性词汇，主修计算机科学的人通常会刻意隐瞒自己的专业。而现在，会有女性问我 “去哪里能认识极客”。（我脑海中第一个蹦出来的答案是 “USENIX 协会”，但那简直像 “从消防栓里喝水”—— 信息 &#x2F; 人脉密集到难以应对。）</p><p>I have no illusions about why nerd culture is becoming more accepted. It’s not because people are realizing that substance is more important than marketing. It’s because the nerds are getting rich. But that is not going to change.<br>我很清楚极客文化之所以被更广泛接受的原因 —— 并非人们意识到 “实质比包装更重要”，而是因为极客们变得富有了。但这一趋势不会改变。</p><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a><strong>Options</strong></h3><p><strong>股票期权的价值</strong></p><p>What makes the nerds rich, usually, is stock options. Now there are moves afoot to make it harder for companies to grant options. To the extent there’s some genuine accounting abuse going on, by all means correct it. But don’t kill the golden goose. Equity is the fuel that drives technical innovation.<br>通常来说，让极客们变富的是股票期权。如今有一些举措正在推进，试图增加公司授予期权的难度。如果确实存在会计舞弊，务必予以纠正 —— 但不要 “杀鸡取卵”。股权，是推动技术创新的燃料。</p><p>Options are a good idea because (a) they’re fair, and (b) they work. Someone who goes to work for a company is (one hopes) adding to its value, and it’s only fair to give them a share of it. And as a purely practical measure, people work a lot harder when they have options. I’ve seen that first hand.<br>股票期权是个好制度，原因有二：（1）公平；（2）有效。一个人为公司工作，（理论上）是在为公司增值，让他们分享一部分价值，这很公平。而且从实际效果来看，拥有期权的人会工作得更努力 —— 我亲眼见过这种情况。</p><p>The fact that a few crooks during the Bubble robbed their companies by granting themselves options doesn’t mean options are a bad idea. During the railroad boom, some executives enriched themselves by selling watered stock—by issuing more shares than they said were outstanding. But that doesn’t make common stock a bad idea. Crooks just use whatever means are available.<br>泡沫时期有少数骗子通过给自己授予期权来侵占公司利益，但这并不意味着期权制度本身不好。铁路繁荣时期，有些高管通过出售 “掺水股票”（发行的股票数量超过宣称的流通股数量）来中饱私囊，但这并不意味着普通股制度不好。骗子只是会利用一切可利用的手段罢了。</p><p>If there is a problem with options, it’s that they reward slightly the wrong thing. Not surprisingly, people do what you pay them to. If you pay them by the hour, they’ll work a lot of hours. If you pay them by the volume of work done, they’ll get a lot of work done (but only as you defined work). And if you pay them to raise the stock price, which is what options amount to, they’ll raise the stock price.<br>如果说期权制度有什么问题，那就是它的 “激励方向” 略有偏差。毫不意外，人们会朝着 “能获得报酬” 的方向努力：按小时付薪，他们就会加班；按工作量付薪，他们就会完成大量工作（但仅限于你定义的 “工作量”）；而如果你的报酬机制本质上是 “推高股价”（期权就是如此），他们就会去推高股价。</p><p>But that’s not quite what you want. What you want is to increase the actual value of the company, not its market cap. Over time the two inevitably meet, but not always as quickly as options vest. Which means options tempt employees, if only unconsciously, to “pump and dump”—to do things that will make the company seem valuable. I found that when I was at Yahoo, I couldn’t help thinking, “how will this sound to investors?” when I should have been thinking “is this a good idea?”<br>但这并非你真正想要的。你想要的是提升公司的 “实际价值”，而非 “市值”。长期来看，两者最终会趋于一致，但未必能赶到期权行权的速度。这意味着，期权会诱惑员工（即便只是无意识地）去 “拉抬股价后抛售（pump and dump）”—— 做那些能让公司 “看起来有价值” 的事。我在雅虎工作时就发现，我本该思考 “这是个好主意吗？”，却忍不住想 “这在投资者听来会怎么样？”</p><p>So maybe the standard option deal needs to be tweaked slightly. Maybe options should be replaced with something tied more directly to earnings. It’s still early days.<br>因此，或许标准的期权制度需要稍作调整 —— 比如用更直接与收益挂钩的激励方式替代期权。不过目前来看，这一切还为时尚早。</p><h3 id="Startups"><a href="#Startups" class="headerlink" title="Startups"></a><strong>Startups</strong></h3><p><strong>初创公司的新模式</strong></p><p>What made the options valuable, for the most part, is that they were options on the stock of startups. Startups were not of course a creation of the Bubble, but they were more visible during the Bubble than ever before.<br>大多数情况下，期权之所以有价值，是因为它们是 “初创公司股票的期权”。初创公司当然不是泡沫的产物，但在泡沫时期，它们比以往任何时候都更受关注。</p><p>One thing most people did learn about for the first time during the Bubble was the startup created with the intention of selling it. Originally a startup meant a small company that hoped to grow into a big one. But increasingly startups are evolving into a vehicle for developing technology on spec.<br>大多数人在泡沫时期第一次了解到的一种模式，是 “以被收购为目的而创立的初创公司”。最初，“初创公司” 指的是希望发展成大公司的小公司；但如今，初创公司正逐渐演变成 “按预期开发技术的载体”—— 即先开发技术，再寻找买家。</p><p>As I wrote in Hackers &amp; Painters, employees seem to be most productive when they’re paid in proportion to the wealth they generate. And the advantage of a startup—indeed, almost its raison d’etre—is that it offers something otherwise impossible to obtain: a way of measuring that.<br>正如我在《黑客与画家》中所写的：当员工的报酬与其创造的财富成正比时，他们的效率最高。而初创公司的优势 —— 甚至可以说它存在的核心理由 —— 就是能提供一种其他模式难以实现的东西：衡量 “创造的财富” 的方法。</p><p>In many businesses, it just makes more sense for companies to get technology by buying startups rather than developing it in house. You pay more, but there is less risk, and risk is what big companies don’t want. It makes the guys developing the technology more accountable, because they only get paid if they build the winner. And you end up with better technology, created faster, because things are made in the innovative atmosphere of startups instead of the bureaucratic atmosphere of big companies.<br>在许多行业，公司通过收购初创公司获取技术，比内部开发更合理。虽然收购成本更高，但风险更低 —— 而大公司最不愿承担风险。这种模式也让技术开发者更负责任：只有开发出成功的产品，他们才能获得回报。最终，你能以更快的速度获得更优质的技术，因为这些技术诞生于初创公司的创新氛围，而非大公司的官僚环境。</p><p>Our startup, Viaweb, was built to be sold. We were open with investors about that from the start. And we were careful to create something that could slot easily into a larger company. That is the pattern for the future.<br>我创立的初创公司 Viaweb，从一开始就是为了被收购而建的。我们从一开始就对投资者坦诚相告这一点，并且刻意打造了一个能轻松融入大公司的产品。这种模式，就是未来的趋势。</p><h3 id="California"><a href="#California" class="headerlink" title="California"></a><strong>California</strong></h3><p><strong>加州硅谷的活力</strong></p><p>The Bubble was a California phenomenon. When I showed up in Silicon Valley in 1998, I felt like an immigrant from Eastern Europe arriving in America in 1900. Everyone was so cheerful and healthy and rich. It seemed a new and improved world.<br>互联网泡沫是一场加州现象。1998 年我刚到硅谷时，感觉自己就像 1900 年从东欧移民到美国的人 —— 这里的每个人都那么开朗、健康、富有，仿佛一个全新的、更美好的世界。</p><p>The press, ever eager to exaggerate small trends, now gives one the impression that Silicon Valley is a ghost town. Not at all. When I drive down 101 from the airport, I still feel a buzz of energy, as if there were a giant transformer nearby. Real estate is still more expensive than just about anywhere else in the country. The people still look healthy, and the weather is still fabulous. The future is there. (I say “there” because I moved back to the East Coast after Yahoo. I still wonder if this was a smart idea.)<br>媒体总爱夸大微小趋势，如今给人的印象是 “硅谷已成鬼城”。但事实绝非如此。当我从机场沿 101 号公路驱车驶入硅谷时，依然能感受到涌动的活力，仿佛附近有一个巨大的变压器在持续供电。这里的房地产价格依然比美国几乎所有地方都高，人们看起来依然健康，天气也依然宜人。未来就在那里。（我说 “那里”，是因为离开雅虎后我搬回了东海岸 —— 我至今仍在怀疑这个决定是否明智。）</p><p>What makes the Bay Area superior is the attitude of the people. I notice that when I come home to Boston. The first thing I see when I walk out of the airline terminal is the fat, grumpy guy in charge of the taxi line. I brace myself for rudeness: remember, you’re back on the East Coast now.<br>旧金山湾区（硅谷所在区域）的优势，在于这里人们的态度。每次回到波士顿，我都会深刻感受到这一点。走出机场航站楼，我看到的第一个人，往往是负责出租车排队秩序的那个胖乎乎、脾气暴躁的人 —— 我会立刻做好迎接无礼对待的准备：别忘了，你回到东海岸了。</p><p>The atmosphere varies from city to city, and fragile organisms like startups are exceedingly sensitive to such variation. If it hadn’t already been hijacked as a new euphemism for liberal, the word to describe the atmosphere in the Bay Area would be “progressive.” People there are trying to build the future. Boston has MIT and Harvard, but it also has a lot of truculent, unionized employees like the police who recently held the Democratic National Convention for ransom, and a lot of people trying to be Thurston Howell. Two sides of an obsolete coin.<br>不同城市的氛围截然不同，而初创公司这类 “脆弱的有机体”，对这种氛围差异极其敏感。如果 “进取的（progressive）” 这个词没有被当作 “自由派” 的新委婉说法而滥用，它恰好能描述湾区的氛围 —— 这里的人都在努力打造未来。波士顿有麻省理工学院（MIT）和哈佛大学，但也有很多态度粗暴、参加工会的员工（比如最近以民主党全国代表大会为要挟索要更高薪酬的警察），还有很多人一心想成为 “瑟斯顿・豪厄尔”（电视剧《盖里甘的岛》中的老派富人角色）。这两类人，不过是同一枚过时硬币的两面。</p><p>Silicon Valley may not be the next Paris or London, but it is at least the next Chicago. For the next fifty years, that’s where new wealth will come from.<br>硅谷或许成不了下一个巴黎或伦敦（文化艺术中心），但至少会成为下一个芝加哥（工业与经济中心）。未来五十年，新的财富将从这里诞生。</p><h3 id="Productivity"><a href="#Productivity" class="headerlink" title="Productivity"></a><strong>Productivity</strong></h3><p><strong>生产力的提升与差异</strong></p><p>During the Bubble, optimistic analysts used to justify high price to earnings ratios by saying that technology was going to increase productivity dramatically. They were wrong about the specific companies, but not so wrong about the underlying principle. I think one of the big trends we’ll see in the coming century is a huge increase in productivity.<br>泡沫时期，乐观的分析师常以 “技术将大幅提高生产力” 为由，为高市盈率辩护。他们对 “具体哪些公司能提升生产力” 的判断是错的，但对 “技术提升生产力” 这一根本原理的判断，并没有那么错。我认为，下个世纪我们将见证的重大趋势之一，就是生产力的大幅提升。</p><p>Or more precisely, a huge increase in variation in productivity. Technology is a lever. It doesn’t add; it multiplies. If the present range of productivity is 0 to 100, introducing a multiple of 10 increases the range from 0 to 1000.<br>更准确地说，是 “生产力差异” 的大幅扩大。技术是一种杠杆 —— 它不是 “加法”，而是 “乘法”。如果当前的生产力范围是 0 到 100，引入 10 倍的技术杠杆后，范围就会变成 0 到 1000。</p><p>One upshot of which is that the companies of the future may be surprisingly small. I sometimes daydream about how big you could grow a company (in revenues) without ever having more than ten people. What would happen if you outsourced everything except product development? If you tried this experiment, I think you’d be surprised at how far you could get. As Fred Brooks pointed out, small groups are intrinsically more productive, because the internal friction in a group grows as the square of its size.<br>这带来的一个结果是：未来的公司可能会小得惊人。我有时会幻想：一家公司最多只有 10 个人，营收能做到多大？如果除了产品开发，其他所有业务都外包出去，会怎么样？如果真的做这个实验，我想结果会让人惊讶 —— 你能走得比想象中远。正如弗雷德・布鲁克斯（《人月神话》作者）所指出的：小团队本质上效率更高，因为团队内部的摩擦成本会随团队规模的平方增长。</p><p>Till quite recently, running a major company meant managing an army of workers. Our standards about how many employees a company should have are still influenced by old patterns. Startups are perforce small, because they can’t afford to hire a lot of people. But I think it’s a big mistake for companies to loosen their belts as revenues increase. The question is not whether you can afford the extra salaries. Can you afford the loss in productivity that comes from making the company bigger?<br>直到最近，经营一家大公司还意味着要管理大批员工。我们对 “公司应该有多少员工” 的观念，仍受旧模式影响。初创公司之所以规模小，是因为雇不起很多人 —— 但我认为，公司不能因为营收增长就盲目扩招。关键问题不是 “你能否承担额外的薪水”，而是 “你能否承担公司扩大后生产力下降的损失”。</p><p>The prospect of technological leverage will of course raise the specter of unemployment. I’m surprised people still worry about this. After centuries of supposedly job-killing innovations, the number of jobs is within ten percent of the number of people who want them. This can’t be a coincidence. There must be some kind of balancing mechanism.<br>技术杠杆的前景，当然会引发对 “失业” 的担忧。但我很惊讶人们至今还在担心这个问题。几个世纪以来，无数创新都被认为会 “导致失业”，但如今的就业岗位数量与求职人数的差距仍在 10% 以内。这绝非巧合 —— 一定存在某种平衡机制。</p><h3 id="What’s-New"><a href="#What’s-New" class="headerlink" title="What’s New"></a><strong>What’s New</strong></h3><p><strong>新趋势的核心：好创意更重要</strong></p><p>When one looks over these trends, is there any overall theme? There does seem to be: that in the coming century, good ideas will count for more. That 26 year olds with good ideas will increasingly have an edge over 50 year olds with powerful connections. That doing good work will matter more than dressing up—or advertising, which is the same thing for companies. That people will be rewarded a bit more in proportion to the value of what they create.<br>纵观这些趋势，是否有一个总体主题？似乎有一个：在下个世纪，“好创意” 将变得更重要。有好创意的 26 岁年轻人，将越来越比有强大人脉的 50 岁人士更有优势；做好工作本身，将比注重着装（或对公司而言的 “广告宣传”）更重要；人们获得的回报，与他们创造的价值的匹配度将更高。</p><p>If so, this is good news indeed. Good ideas always tend to win eventually. The problem is, it can take a very long time. It took decades for relativity to be accepted, and the greater part of a century to establish that central planning didn’t work. So even a small increase in the rate at which good ideas win would be a momentous change—big enough, probably, to justify a name like the “new economy.”<br>如果真是这样，那确实是个好消息。好创意最终总会胜出，但问题是，这个过程可能需要很长时间。相对论花了几十年才被广泛接受，证明计划经济不可行则用了大半个世纪。因此，即便 “好创意胜出的速度” 只提升一点点，也将是一场重大变革 —— 这场变革的意义，或许足以配得上 “新经济” 这个称谓。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] Actually it’s hard to say now. As Jeremy Siegel points out, if the value of a stock is its future earnings, you can’t tell if it was overvalued till you see what the earnings turn out to be. While certain famous Internet stocks were almost certainly overvalued in 1999, it is still hard to say for sure whether, e.g., the Nasdaq index was.<br>[1] 事实上，现在也很难说清。正如杰里米・西格尔所指出的：如果股票价值取决于其未来收益，那么在看到实际收益之前，你无法确定它是否被高估。1999 年，某些知名互联网公司的股票几乎肯定被高估了，但像纳斯达克指数这样的整体指标是否被高估，至今仍难有定论。</p><p>Siegel, Jeremy J. “What Is an Asset Price Bubble? An Operational Definition.” European Financial Management, 9:1, 2003.<br>（西格尔，杰里米・J.《什么是资产价格泡沫？一个操作性定义》，载于《欧洲金融管理》，2003 年第 9 卷第 1 期。）</p><p>[2] The number of users comes from a 6&#x2F;03 Nielsen study quoted on Google’s site. (You’d think they’d have something more recent.) The revenue estimate is based on revenues of $1.35 billion for the first half of 2004, as reported in their IPO filing.<br>[2] 用户数量数据来自谷歌官网引用的 2003 年 6 月尼尔森研究报告（按理说他们应该有更新的数据）。营收预估基于谷歌首次公开募股（IPO）申请文件中披露的 2004 年上半年营收（13.5 亿美元）推算得出。</p><p>Thanks to Chris Anderson, Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this.<br>感谢克里斯・安德森、特雷弗・布莱克韦尔、萨拉・哈林、杰西卡・利文斯顿和罗伯特・莫里斯阅读本文初稿并提出意见。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>那些你希望当初就知道的事</title>
    <link href="/2025/08/20/what-you-will-wish-you-had-known/"/>
    <url>/2025/08/20/what-you-will-wish-you-had-known/</url>
    
    <content type="html"><![CDATA[<h2 id="What-You’ll-Wish-You’d-Known"><a href="#What-You’ll-Wish-You’d-Known" class="headerlink" title="What You’ll Wish You’d Known"></a>What You’ll Wish You’d Known</h2><p>原文链接: <a href="https://paulgraham.com/hs.html">https://paulgraham.com/hs.html</a></p><p>January 2005</p><p>(I wrote this talk for a high school. I never actually gave it, because the school authorities vetoed the plan to invite me.)</p><p>（我为一所高中写了这篇演讲稿。但最终没讲成，因为学校当局否决了邀请我的计划。）</p><p>When I said I was speaking at a high school, my friends were curious. What will you say to high school students? So I asked them, what do you wish someone had told you in high school? Their answers were remarkably similar. So I’m going to tell you what we all wish someone had told us.</p><p>当我说要去高中演讲时，我的朋友们都很好奇。你要对高中生说些什么？于是我问他们：“你们希望高中时有人告诉自己什么？” 他们的答案惊人地相似。所以接下来，我要讲的就是我们都希望当初有人告诉自己的事。</p><p>I’ll start by telling you something you don’t have to know in high school: what you want to do with your life. People are always asking you this, so you think you’re supposed to have an answer. But adults ask this mainly as a conversation starter. They want to know what sort of person you are, and this question is just to get you talking. They ask it the way you might poke a hermit crab in a tide pool, to see what it does.</p><p>我先从一件你在高中不必知道的事说起：你这辈子想做什么。总有人问你这个问题，以至于你觉得自己 “应该” 有个答案。但成年人问这个，主要是为了开启对话。他们想了解你是个什么样的人，这个问题只是让你开口的引子。他们问的时候，就像你用手指戳潮池里的寄居蟹，想看看它会有什么反应。</p><p>If I were back in high school and someone asked about my plans, I’d say that my first priority was to learn what the options were. You don’t need to be in a rush to choose your life’s work. What you need to do is discover what you like. You have to work on stuff you like if you want to be good at what you do.</p><p>如果我回到高中，有人问我的计划，我会说：“我的首要任务是了解有哪些选择。” 你不必急于选定一生的事业。你需要做的是发现自己喜欢什么。如果你想把一件事做好，就得去做自己喜欢的事。</p><p>It might seem that nothing would be easier than deciding what you like, but it turns out to be hard, partly because it’s hard to get an accurate picture of most jobs. Being a doctor is not the way it’s portrayed on TV. Fortunately you can also watch real doctors, by volunteering in hospitals. [1]</p><p>看起来，没什么比确定自己喜欢什么更简单的了，但事实并非如此。部分原因是，大多数职业的真实面貌很难准确了解。医生的工作和电视里演的根本不一样。幸运的是，你可以去医院做志愿者，亲眼看看真正的医生是怎么工作的。[1]</p><p>But there are other jobs you can’t learn about, because no one is doing them yet. Most of the work I’ve done in the last ten years didn’t exist when I was in high school. The world changes fast, and the rate at which it changes is itself speeding up. In such a world it’s not a good idea to have fixed plans.</p><p>但还有些工作你根本无从了解，因为现在还没人做这些工作。我过去十年做的大部分工作，在我高中时都还不存在。世界变化很快，而且变化的速度本身还在加快。在这样的世界里，制定固定的计划不是个好主意。</p><p>And yet every May, speakers all over the country fire up the Standard Graduation Speech, the theme of which is: don’t give up on your dreams. I know what they mean, but this is a bad way to put it, because it implies you’re supposed to be bound by some plan you made early on. The computer world has a name for this: premature optimization. And it is synonymous with disaster. These speakers would do better to say simply, don’t give up.</p><p>然而每年五月，全国各地的演讲者都会发表千篇一律的毕业演讲，主题无非是：“不要放弃梦想。” 我懂他们的意思，但这种说法很糟糕，因为它暗示你应该被早年制定的某个计划束缚。计算机领域有个词形容这种情况：“过早优化”，而这简直就是灾难的同义词。这些演讲者还不如简单说一句：“不要放弃。”</p><p>What they really mean is, don’t get demoralized. Don’t think that you can’t do what other people can. And I agree you shouldn’t underestimate your potential. People who’ve done great things tend to seem as if they were a race apart. And most biographies only exaggerate this illusion, partly due to the worshipful attitude biographers inevitably sink into, and partly because, knowing how the story ends, they can’t help streamlining the plot till it seems like the subject’s life was a matter of destiny, the mere unfolding of some innate genius. In fact I suspect if you had the sixteen year old Shakespeare or Einstein in school with you, they’d seem impressive, but not totally unlike your other friends.</p><p>他们真正想表达的是：别气馁。别觉得别人能做到的事你做不到。我也认为你不该低估自己的潜力。那些做出伟大成就的人，往往显得和普通人不是一个 “物种”。而大多数传记只会放大这种错觉 —— 部分是因为传记作者难免会陷入崇拜的心态，部分是因为他们知道故事的结局，总会忍不住简化情节，让主人公的人生看起来像命中注定，仿佛只是某种天生天赋的自然展现。但事实上，我怀疑如果 16 岁的莎士比亚或爱因斯坦和你同班，他们可能会让人印象深刻，但和你的其他朋友也不会完全不同。</p><p>Which is an uncomfortable thought. If they were just like us, then they had to work very hard to do what they did. And that’s one reason we like to believe in genius. It gives us an excuse for being lazy. If these guys were able to do what they did only because of some magic Shakespeareness or Einsteinness, then it’s not our fault if we can’t do something as good.</p><p>这想法有点让人不安。如果他们和我们一样，那他们能取得那样的成就，一定付出了巨大的努力。这也是我们愿意相信 “天才” 存在的原因之一 —— 它给了我们偷懒的借口。如果这些人能成功只是因为他们身上有种 “莎士比亚特质” 或 “爱因斯坦魔力”，那我们做不出同样优秀的事，就不是我们的错了。</p><p>I’m not saying there’s no such thing as genius. But if you’re trying to choose between two theories and one gives you an excuse for being lazy, the other one is probably right.</p><p>我不是说世上没有天才。但如果你要在两种理论中选一个，其中一个能给你偷懒的借口，那另一个很可能才是对的。</p><p>So far we’ve cut the Standard Graduation Speech down from “don’t give up on your dreams” to “what someone else can do, you can do.” But it needs to be cut still further. There is some variation in natural ability. Most people overestimate its role, but it does exist. If I were talking to a guy four feet tall whose ambition was to play in the NBA, I’d feel pretty stupid saying, you can do anything if you really try. [2]</p><p>到目前为止，我们把标准毕业演讲的内容从 “不要放弃梦想” 精简成了 “别人能做到的，你也能做到”。但还可以再精简。人的天赋确实存在差异。大多数人高估了天赋的作用，但它确实存在。如果我面对一个身高四英尺、却想打 NBA 的人，说 “只要努力，你什么都能做到”，那我会觉得自己很蠢。[2]</p><p>We need to cut the Standard Graduation Speech down to, “what someone else with your abilities can do, you can do; and don’t underestimate your abilities.” But as so often happens, the closer you get to the truth, the messier your sentence gets. We’ve taken a nice, neat (but wrong) slogan, and churned it up like a mud puddle. It doesn’t make a very good speech anymore. But worse still, it doesn’t tell you what to do anymore. Someone with your abilities? What are your abilities?</p><p>我们需要把标准毕业演讲再精简成：“和你能力相当的人能做到的，你也能做到；而且别低估自己的能力。” 但往往是这样，越接近真相，句子就越啰嗦。我们把一句漂亮、简洁（但错误）的口号，搅成了一滩泥水。它不再是句好台词，更糟的是，它没法告诉你该做什么了。“和你能力相当的人”？你的能力到底是什么？</p><h3 id="Upwind"><a href="#Upwind" class="headerlink" title="Upwind"></a><strong>Upwind</strong></h3><p><strong>逆风方向</strong></p><p>I think the solution is to work in the other direction. Instead of working back from a goal, work forward from promising situations. This is what most successful people actually do anyway.</p><p>我觉得解决办法是换个方向努力。不要从目标倒推该做什么，而要从有前景的当下出发，一步步向前。大多数成功人士其实都是这么做的。</p><p>In the graduation-speech approach, you decide where you want to be in twenty years, and then ask: what should I do now to get there? I propose instead that you don’t commit to anything in the future, but just look at the options available now, and choose those that will give you the most promising range of options afterward.</p><p>按毕业演讲的思路，你会先决定 20 年后想在哪里，然后问：“现在该做什么才能到达那里？” 但我建议，你不必对未来做任何承诺，只需看看当下有哪些选择，然后选那些能为你带来更多有前景的后续选项的事去做。</p><p>It’s not so important what you work on, so long as you’re not wasting your time. Work on things that interest you and increase your options, and worry later about which you’ll take.</p><p>你做什么其实没那么重要，只要别浪费时间就行。去做那些既能让你感兴趣、又能增加你选择的事，至于最终选哪条路，以后再操心也不迟。</p><p>Suppose you’re a college freshman deciding whether to major in math or economics. Well, math will give you more options: you can go into almost any field from math. If you major in math it will be easy to get into grad school in economics, but if you major in economics it will be hard to get into grad school in math.</p><p>假设你是个大一新生，在纠结选数学还是经济学专业。其实数学能给你更多选择：从数学出发，你几乎能进入任何领域。学数学的话，申请经济学研究生会很容易；但学经济学的话，申请数学研究生就很难了。</p><p>Flying a glider is a good metaphor here. Because a glider doesn’t have an engine, you can’t fly into the wind without losing a lot of altitude. If you let yourself get far downwind of good places to land, your options narrow uncomfortably. As a rule you want to stay upwind. So I propose that as a replacement for “don’t give up on your dreams.” Stay upwind.</p><p>滑翔机飞行是个很贴切的比喻。滑翔机没有引擎，逆风飞行就会大幅降低高度。如果你让自己处于远离理想着陆点的下风处，你的选择就会令人不安地变少。通常来说，你要待在逆风方向。所以我建议，用 “保持在逆风方向” 来替代 “不要放弃梦想”。</p><p>How do you do that, though? Even if math is upwind of economics, how are you supposed to know that as a high school student?</p><p>但怎么才能做到呢？就算数学比经济学更 “逆风”，你一个高中生怎么会知道呢？</p><p>Well, you don’t, and that’s what you need to find out. Look for smart people and hard problems. Smart people tend to clump together, and if you can find such a clump, it’s probably worthwhile to join it. But it’s not straightforward to find these, because there is a lot of faking going on.</p><p>你确实不知道，而这正是你需要去弄明白的。去寻找聪明人和难题。聪明人往往扎堆，如果能找到这样的群体，加入他们很可能是值得的。但找到他们并不容易，因为有太多 “伪装者”。</p><p>To a newly arrived undergraduate, all university departments look much the same. The professors all seem forbiddingly intellectual and publish papers unintelligible to outsiders. But while in some fields the papers are unintelligible because they’re full of hard ideas, in others they’re deliberately written in an obscure way to seem as if they’re saying something important. This may seem a scandalous proposition, but it has been experimentally verified, in the famous Social Text affair. Suspecting that the papers published by literary theorists were often just intellectual-sounding nonsense, a physicist deliberately wrote a paper full of intellectual-sounding nonsense, and submitted it to a literary theory journal, which published it.</p><p>对刚入学的本科生来说，大学里的所有院系看起来都差不多。教授们似乎都学识高深、难以接近，发表的论文对外行来说晦涩难懂。但有些领域的论文难懂，是因为充满了艰深的思想；而另一些领域的论文，则是故意写得晦涩，让人觉得它们在说很重要的事。这听起来可能像个丑闻，但著名的 “《社会文本》事件” 已经通过实验证实了这一点。一位物理学家怀疑文学理论家发表的论文往往只是听起来有学问的废话，于是故意写了一篇满是这种 “伪学问” 的论文，投稿给一家文学理论期刊，结果论文被发表了。</p><p>The best protection is always to be working on hard problems. Writing novels is hard. Reading novels isn’t. Hard means worry: if you’re not worrying that something you’re making will come out badly, or that you won’t be able to understand something you’re studying, then it isn’t hard enough. There has to be suspense.</p><p>最好的保护措施，永远是去做难题。写小说很难，读小说则不然。“难” 意味着担忧：如果你不担心自己正在做的东西会搞砸，或者不担心自己学不会正在研究的内容，那这件事就还不够难。必须有悬念才行。</p><p>Well, this seems a grim view of the world, you may think. What I’m telling you is that you should worry? Yes, but it’s not as bad as it sounds. It’s exhilarating to overcome worries. You don’t see faces much happier than people winning gold medals. And you know why they’re so happy? Relief.</p><p>你可能会觉得，这是对世界的一种悲观看法。我这是在说你应该担忧吗？是的，但事情没听起来那么糟。克服担忧是件令人兴奋的事。你很少能看到比赢得金牌的人更开心的面孔了。你知道他们为什么这么开心吗？因为如释重负。</p><p>I’m not saying this is the only way to be happy. Just that some kinds of worry are not as bad as they sound.</p><p>我不是说这是获得快乐的唯一方式。只是想说明，有些担忧并不像听起来那么可怕。</p><h3 id="Ambition"><a href="#Ambition" class="headerlink" title="Ambition"></a><strong>Ambition</strong></h3><p><strong>野心</strong></p><p>In practice, “stay upwind” reduces to “work on hard problems.” And you can start today. I wish I’d grasped that in high school.</p><p>实际上，“保持在逆风方向” 可以简化为 “做难题”。而你今天就可以开始。我真希望自己高中时就明白这一点。</p><p>Most people like to be good at what they do. In the so-called real world this need is a powerful force. But high school students rarely benefit from it, because they’re given a fake thing to do. When I was in high school, I let myself believe that my job was to be a high school student. And so I let my need to be good at what I did be satisfied by merely doing well in school.</p><p>大多数人都想把自己做的事做好。在所谓的 “现实世界” 里，这种需求是一种强大的动力。但高中生很少能从中受益，因为他们被赋予的是一种 “虚假的任务”。我上高中时，就天真地以为自己的 “工作” 就是做个高中生。于是，我仅仅通过在学校表现好，就满足了 “把事做好” 的需求。</p><p>If you’d asked me in high school what the difference was between high school kids and adults, I’d have said it was that adults had to earn a living. Wrong. It’s that adults take responsibility for themselves. Making a living is only a small part of it. Far more important is to take intellectual responsibility for oneself.</p><p>如果高中时有人问我，高中生和成年人的区别是什么，我会说：成年人得挣钱谋生。错了。真正的区别是，成年人会为自己负责。谋生只是其中很小的一部分。重要得多的是，为自己的思想负责。</p><p>If I had to go through high school again, I’d treat it like a day job. I don’t mean that I’d slack in school. Working at something as a day job doesn’t mean doing it badly. It means not being defined by it. I mean I wouldn’t think of myself as a high school student, just as a musician with a day job as a waiter doesn’t think of himself as a waiter. [3] And when I wasn’t working at my day job I’d start trying to do real work.</p><p>如果我能重新上一次高中，我会把它当成一份 “日常工作”。我不是说要在学校偷懒。把一件事当日常工作，不代表要做不好它，而是说不要被它定义。我不会觉得自己 “就是个高中生”，就像一个白天当服务员的音乐家，不会觉得自己 “就是个服务员”。[3] 而当我不做这份 “日常工作” 时，我会开始尝试做真正的事。</p><p>When I ask people what they regret most about high school, they nearly all say the same thing: that they wasted so much time. If you’re wondering what you’re doing now that you’ll regret most later, that’s probably it. [4]</p><p>当我问别人高中时最后悔的事，几乎所有人的答案都一样：浪费了太多时间。如果你在想，现在做什么事会让你日后最后悔，答案很可能就是这个。[4]</p><p>Some people say this is inevitable — that high school students aren’t capable of getting anything done yet. But I don’t think this is true. And the proof is that you’re bored. You probably weren’t bored when you were eight. When you’re eight it’s called “playing” instead of “hanging out,” but it’s the same thing. And when I was eight, I was rarely bored. Give me a back yard and a few other kids and I could play all day.</p><p>有人说这是难免的 —— 高中生还没能力做出什么成就。但我不这么认为。证据就是：你觉得无聊。你 8 岁时可能不觉得无聊。8 岁时，那种状态叫 “玩耍” 而不是 “闲逛”，但本质是一样的。我 8 岁时就很少无聊。只要有个后院，再加上几个小伙伴，我就能玩一整天。</p><p>The reason this got stale in middle school and high school, I now realize, is that I was ready for something else. Childhood was getting old.</p><p>现在我才明白，到了初中和高中，这种状态变得乏味，是因为我已经准备好做别的事了。童年已经过时了。</p><p>I’m not saying you shouldn’t hang out with your friends — that you should all become humorless little robots who do nothing but work. Hanging out with friends is like chocolate cake. You enjoy it more if you eat it occasionally than if you eat nothing but chocolate cake for every meal. No matter how much you like chocolate cake, you’ll be pretty queasy after the third meal of it. And that’s what the malaise one feels in high school is: mental queasiness. [5]</p><p>我不是说你不该和朋友闲逛 —— 不是说你们都要变成毫无趣味、只知道工作的小机器人。和朋友闲逛就像吃巧克力蛋糕。偶尔吃一次会很享受，可要是顿顿都吃，就不是那么回事了。不管你多喜欢巧克力蛋糕，连吃三顿也会觉得恶心。而高中生那种莫名的不适感，就是一种 “精神恶心”。[5]</p><p>You may be thinking, we have to do more than get good grades. We have to have extracurricular activities. But you know perfectly well how bogus most of these are. Collecting donations for a charity is an admirable thing to do, but it’s not hard. It’s not getting something done. What I mean by getting something done is learning how to write well, or how to program computers, or what life was really like in preindustrial societies, or how to draw the human face from life. This sort of thing rarely translates into a line item on a college application.</p><p>你可能会想：我们不能只拿好成绩，还得有课外活动。但你心里很清楚，大多数课外活动有多虚假。为慈善机构募捐是件值得称赞的事，但并不难，也算不上 “做出成就”。我说的 “做出成就”，是指学会写好文章、编程，了解前工业社会的真实生活，或者学会写生人脸。这类事很少能变成大学申请表上的一项。</p><h3 id="Corruption"><a href="#Corruption" class="headerlink" title="Corruption"></a><strong>Corruption</strong></h3><p><strong>虚伪</strong></p><p>It’s dangerous to design your life around getting into college, because the people you have to impress to get into college are not a very discerning audience. At most colleges, it’s not the professors who decide whether you get in, but admissions officers, and they are nowhere near as smart. They’re the NCOs of the intellectual world. They can’t tell how smart you are. The mere existence of prep schools is proof of that.</p><p>围绕 “考上大学” 来设计自己的人生很危险，因为你需要打动的那些人，并不是很有鉴别力。在大多数大学，决定你能否入学的不是教授，而是招生官，而他们远没有那么聪明。他们就像知识界的士官，看不出你有多聪明。预科学校的存在本身就证明了这一点。</p><p>Few parents would pay so much for their kids to go to a school that didn’t improve their admissions prospects. Prep schools openly say this is one of their aims. But what that means, if you stop to think about it, is that they can hack the admissions process: that they can take the very same kid and make him seem a more appealing candidate than he would if he went to the local public school. [6]</p><p>如果一所学校不能提高孩子的录取概率，很少有家长会花那么多钱送孩子去。预科学校公开说这是他们的目标之一。但仔细想想，这意味着他们能 “破解” 招生流程：同样一个孩子，经过他们培养，会比在公立学校看起来更有吸引力。[6]</p><p>Right now most of you feel your job in life is to be a promising college applicant. But that means you’re designing your life to satisfy a process so mindless that there’s a whole industry devoted to subverting it. No wonder you become cynical. The malaise you feel is the same that a producer of reality TV shows or a tobacco industry executive feels. And you don’t even get paid a lot.</p><p>现在，你们大多数人觉得自己的人生任务是 “成为有前途的大学申请者”。但这意味着，你在围绕一个毫无头脑的流程设计人生 —— 这个流程愚蠢到有一整个行业专门颠覆它。难怪你会变得愤世嫉俗。你感受到的那种不适感，和真人秀制片人或烟草公司高管的感受是一样的。而你甚至得不到高薪。</p><p>So what do you do? What you should not do is rebel. That’s what I did, and it was a mistake. I didn’t realize exactly what was happening to us, but I smelled a major rat. And so I just gave up. Obviously the world sucked, so why bother?</p><p>那该怎么办？不该做的是反抗。我以前就反抗过，现在看来是个错误。当时我不完全明白我们身上在发生什么，但我察觉到了不对劲，于是就放弃了。显然世界一团糟，何必费力气呢？</p><p>When I discovered that one of our teachers was herself using Cliff’s Notes, it seemed par for the course. Surely it meant nothing to get a good grade in such a class.</p><p>当我发现我们的一个老师自己也在用《克利夫笔记》（一种学习指南）时，我觉得这很正常。在这样的课上拿好成绩，显然毫无意义。</p><p>In retrospect this was stupid. It was like someone getting fouled in a soccer game and saying, hey, you fouled me, that’s against the rules, and walking off the field in indignation. Fouls happen. The thing to do when you get fouled is not to lose your cool. Just keep playing.</p><p>现在回想起来，这很愚蠢。就像有人在足球比赛中被犯规，然后说 “你犯规了，这违反规则”，接着愤愤不平地离场。犯规总会发生。被犯规时，不该失控，而是继续比赛。</p><p>By putting you in this situation, society has fouled you. Yes, as you suspect, a lot of the stuff you learn in your classes is crap. And yes, as you suspect, the college admissions process is largely a charade. But like many fouls, this one was unintentional. [7] So just keep playing.</p><p>社会把你置于这种境地，相当于对你犯了规。没错，就像你怀疑的那样，你在课堂上学的很多东西都是垃圾。没错，就像你怀疑的那样，大学招生流程在很大程度上是场骗局。但就像很多犯规一样，这并非故意的。[7] 所以，继续 “比赛” 吧。</p><p>Rebellion is almost as stupid as obedience. In either case you let yourself be defined by what they tell you to do. The best plan, I think, is to step onto an orthogonal vector. Don’t just do what they tell you, and don’t just refuse to. Instead treat school as a day job. As day jobs go, it’s pretty sweet. You’re done at 3 o’clock, and you can even work on your own stuff while you’re there.</p><p>反抗几乎和顺从一样愚蠢。两种情况下，你都是被别人告诉你该做什么而定义的。我觉得最好的办法是走上一条 “正交向量”—— 既不只是按他们说的做，也不只是拒绝。而是把学校当成一份日常工作。作为日常工作，它其实很不错：下午 3 点就下班，甚至在学校时也能做自己的事。</p><h3 id="Curiosity"><a href="#Curiosity" class="headerlink" title="Curiosity"></a><strong>Curiosity</strong></h3><p><strong>好奇心</strong></p><p>And what’s your real job supposed to be? Unless you’re Mozart, your first task is to figure that out. What are the great things to work on? Where are the imaginative people? And most importantly, what are you interested in? The word “aptitude” is misleading, because it implies something innate. The most powerful sort of aptitude is a consuming interest in some question, and such interests are often acquired tastes.</p><p>那你真正的 “工作” 该是什么？除非你是莫扎特，否则你的首要任务是弄清楚这一点。哪些是值得做的伟大事业？有想象力的人在哪里？最重要的是，你对什么感兴趣？“天赋” 这个词有误导性，因为它暗示某种与生俱来的东西。最强大的 “天赋” 是对某个问题的强烈兴趣，而这种兴趣往往是后天培养的。</p><p>A distorted version of this idea has filtered into popular culture under the name “passion.” I recently saw an ad for waiters saying they wanted people with a “passion for service.” The real thing is not something one could have for waiting on tables. And passion is a bad word for it. A better name would be curiosity.</p><p>这个想法的扭曲版本以 “热情” 的名义渗透到了流行文化中。我最近看到一则招聘服务员的广告，说他们想要 “对服务有热情” 的人。但真正的 “热情”（此处指强烈兴趣）不可能用在伺候人吃饭上。而且 “热情” 这个词也不合适，更好的词是 “好奇心”。</p><p>Kids are curious, but the curiosity I mean has a different shape from kid curiosity. Kid curiosity is broad and shallow; they ask why at random about everything. In most adults this curiosity dries up entirely. It has to: you can’t get anything done if you’re always asking why about everything. But in ambitious adults, instead of drying up, curiosity becomes narrow and deep. The mud flat morphs into a well.</p><p>孩子是好奇的，但我所说的好奇心和孩子的好奇心不一样。孩子的好奇心广泛而肤浅，他们会随便对任何事问 “为什么”。大多数成年人的好奇心会完全枯竭。这也没办法：如果你总对所有事问 “为什么”，就什么也做不成。但有野心的成年人，他们的好奇心不会枯竭，而是变得狭窄而深刻。就像泥滩变成了深井。</p><p>Curiosity turns work into play. For Einstein, relativity wasn’t a book full of hard stuff he had to learn for an exam. It was a mystery he was trying to solve. So it probably felt like less work to him to invent it than it would seem to someone now to learn it in a class.</p><p>好奇心能把工作变成玩耍。对爱因斯坦来说，相对论不是一本需要为考试而死记硬背的难题集，而是一个他试图解开的谜团。所以，对他来说，发明相对论可能比现在的人在课堂上学相对论更不像 “工作”。</p><p>One of the most dangerous illusions you get from school is the idea that doing great things requires a lot of discipline. Most subjects are taught in such a boring way that it’s only by discipline that you can flog yourself through them. So I was surprised when, early in college, I read a quote by Wittgenstein saying that he had no self-discipline and had never been able to deny himself anything, not even a cup of coffee.</p><p>学校给你的最危险的错觉之一，是 “做伟大的事需要极强的自律”。大多数科目教得太无聊，以至于你只能靠自律硬撑着学下去。所以大学时，我读到维特根斯坦说自己毫无自律，甚至连一杯咖啡都忍不住要喝，时感到很惊讶。</p><p>Now I know a number of people who do great work, and it’s the same with all of them. They have little discipline. They’re all terrible procrastinators and find it almost impossible to make themselves do anything they’re not interested in. One still hasn’t sent out his half of the thank-you notes from his wedding, four years ago. Another has 26,000 emails in her inbox.</p><p>现在我认识很多做出伟大成就的人，他们都一样：没什么自律性。他们都超爱拖延，几乎没办法让自己做不感兴趣的事。有个人结婚四年了，还有一半的感谢信没发出去。另一个人的收件箱里有 2.6 万封邮件。</p><p>I’m not saying you can get away with zero self-discipline. You probably need about the amount you need to go running. I’m often reluctant to go running, but once I do, I enjoy it. And if I don’t run for several days, I feel ill. It’s the same with people who do great things. They know they’ll feel bad if they don’t work, and they have enough discipline to get themselves to their desks to start working. But once they get started, interest takes over, and discipline is no longer necessary.</p><p>我不是说你可以完全没有自律。你需要的自律，大概和跑步需要的差不多。我经常不想跑步，但一旦跑起来就会很享受。如果几天不跑，我会觉得不舒服。做出伟大成就的人也是如此。他们知道不工作会难受，有足够的自律让自己坐到书桌前开始工作。但一旦开始，兴趣就会接管一切，自律就不再需要了。</p><p>Do you think Shakespeare was gritting his teeth and diligently trying to write Great Literature? Of course not. He was having fun. That’s why he’s so good.</p><p>你觉得莎士比亚是咬着牙、勤奋地 “创作伟大文学” 吗？当然不是。他是在享受乐趣。这就是他能那么优秀的原因。</p><p>If you want to do good work, what you need is a great curiosity about a promising question. The critical moment for Einstein was when he looked at Maxwell’s equations and said, what the hell is going on here?</p><p>如果你想做出好的成就，你需要的是对一个有前景的问题抱有极大的好奇心。对爱因斯坦来说，关键一刻是他看着麦克斯韦方程组，心想：“这到底是怎么回事？”</p><p>It can take years to zero in on a productive question, because it can take years to figure out what a subject is really about. To take an extreme example, consider math. Most people think they hate math, but the boring stuff you do in school under the name “mathematics” is not at all like what mathematicians do.</p><p>聚焦一个有价值的问题可能需要数年时间，因为弄明白一个领域真正在研究什么，可能就需要数年。举个极端的例子：数学。大多数人觉得自己讨厌数学，但你在学校里学的那些被称为 “数学” 的无聊内容，和数学家做的事完全不是一回事。</p><p>The great mathematician G. H. Hardy said he didn’t like math in high school either. He only took it up because he was better at it than the other students. Only later did he realize math was interesting — only later did he start to ask questions instead of merely answering them correctly.</p><p>伟大的数学家 G・H・哈代说，他高中时也不喜欢数学。他学数学只是因为自己比其他同学擅长。直到后来，他才意识到数学很有趣 —— 直到后来，他才开始提出问题，而不只是正确地回答问题。</p><p>When a friend of mine used to grumble because he had to write a paper for school, his mother would tell him: find a way to make it interesting. That’s what you need to do: find a question that makes the world interesting. People who do great things look at the same world everyone else does, but notice some odd detail that’s compellingly mysterious.</p><p>我的一个朋友以前总抱怨要为学校写论文，他妈妈会告诉他：“想办法让它变得有趣。” 这就是你需要做的：找到一个能让世界变得有趣的问题。做出伟大成就的人，和其他人看的是同一个世界，但他们会注意到某个奇怪的细节 —— 一个引人入胜的谜团。</p><p>And not only in intellectual matters. Henry Ford’s great question was, why do cars have to be a luxury item? What would happen if you treated them as a commodity? Franz Beckenbauer’s was, in effect, why does everyone have to stay in his position? Why can’t defenders score goals too?</p><p>而且这不只限于知识领域。亨利・福特的伟大问题是：为什么汽车必须是奢侈品？如果把汽车当成日用品会怎样？弗朗茨・贝肯鲍尔的问题本质上是：为什么每个人都必须待在自己的位置上？后卫为什么不能进球？</p><h3 id="Now"><a href="#Now" class="headerlink" title="Now"></a><strong>Now</strong></h3><p><strong>现在</strong></p><p>If it takes years to articulate great questions, what do you do now, at sixteen? Work toward finding one. Great questions don’t appear suddenly. They gradually congeal in your head. And what makes them congeal is experience. So the way to find great questions is not to search for them — not to wander about thinking, what great discovery shall I make? You can’t answer that; if you could, you’d have made it.</p><p>如果明确一个伟大的问题需要数年，那你 16 岁的现在该做什么？努力去寻找一个。伟大的问题不会突然出现，它们会在你脑海中逐渐成形。而让它们成形的是经验。所以，找到伟大问题的方法不是去 “寻找” 它们 —— 不是四处闲逛，想着 “我要做出什么伟大发现？” 你回答不了这个问题；如果能，你早就做出发现了。</p><p>The way to get a big idea to appear in your head is not to hunt for big ideas, but to put in a lot of time on work that interests you, and in the process keep your mind open enough that a big idea can take roost. Einstein, Ford, and Beckenbauer all used this recipe. They all knew their work like a piano player knows the keys. So when something seemed amiss to them, they had the confidence to notice it.</p><p>让一个伟大的想法出现在你脑海里的方法，不是去追逐伟大的想法，而是花大量时间做你感兴趣的事，同时保持思想开放，让伟大的想法能在此扎根。爱因斯坦、福特和贝肯鲍尔都用了这个方法。他们对自己的工作了如指掌，就像钢琴家熟悉琴键一样。所以当有什么不对劲时，他们有信心察觉到。</p><p>Put in time how and on what? Just pick a project that seems interesting: to master some chunk of material, or to make something, or to answer some question. Choose a project that will take less than a month, and make it something you have the means to finish. Do something hard enough to stretch you, but only just, especially at first. If you’re deciding between two projects, choose whichever seems most fun. If one blows up in your face, start another. Repeat till, like an internal combustion engine, the process becomes self-sustaining, and each project generates the next one. (This could take years.)</p><p>该如何花时间，花在什么上？选一个看起来有趣的项目就行：比如掌握某块知识、做个东西，或者回答某个问题。选一个能在一个月内完成的项目，而且是你有能力完成的。做的事要足够难，能让你有所成长，但也别太难，尤其是刚开始的时候。如果在两个项目间犹豫，选那个看起来更有趣的。如果一个项目搞砸了，就换一个。重复这个过程，直到它像内燃机一样能自我维持，一个项目能催生下一个项目。（这可能需要好几年。）</p><p>It may be just as well not to do a project “for school,” if that will restrict you or make it seem like work. Involve your friends if you want, but not too many, and only if they’re not flakes. Friends offer moral support (few startups are started by one person), but secrecy also has its advantages. There’s something pleasing about a secret project. And you can take more risks, because no one will know if you fail.</p><p>如果为 “学校” 做项目会限制你，或者让它显得像份苦差事，那最好别这么做。你可以找朋友一起，但别找太多，而且只能找靠谱的。朋友能提供精神支持（很少有创业公司是一个人创办的），但保密也有好处。秘密项目有种特别的乐趣。而且你可以承担更多风险，因为就算失败了也没人知道。</p><p>Don’t worry if a project doesn’t seem to be on the path to some goal you’re supposed to have. Paths can bend a lot more than you think. So let the path grow out the project. The most important thing is to be excited about it, because it’s by doing that you learn.</p><p>如果一个项目看起来不在你 “应该” 走的那条路上，别担心。道路的弯曲程度会远超你的想象。所以让道路从项目中自然延伸出来吧。最重要的是对它感到兴奋，因为你是通过做这件事来学习的。</p><p>Don’t disregard unseemly motivations. One of the most powerful is the desire to be better than other people at something. Hardy said that’s what got him started, and I think the only unusual thing about him is that he admitted it. Another powerful motivator is the desire to do, or know, things you’re not supposed to. Closely related is the desire to do something audacious. Sixteen year olds aren’t supposed to write novels. So if you try, anything you achieve is on the plus side of the ledger; if you fail utterly, you’re doing no worse than expectations. [8]</p><p>别忽视那些不那么 “体面” 的动机。其中最强大的一种是 “想在某件事上比别人做得好”。哈代说这是他的起点，我觉得他唯一特别的地方是承认了这一点。另一种强大的动机是 “想做或想知道那些不应该做 &#x2F; 知道的事”。与此相关的是 “想做大胆的事”。没人觉得 16 岁的孩子能写小说。所以如果你尝试了，取得的任何成就都是加分项；就算彻底失败，也没比预期的差。[8]</p><p>Beware of bad models. Especially when they excuse laziness. When I was in high school I used to write “existentialist” short stories like ones I’d seen by famous writers. My stories didn’t have a lot of plot, but they were very deep. And they were less work to write than entertaining ones would have been. I should have known that was a danger sign. And in fact I found my stories pretty boring; what excited me was the idea of writing serious, intellectual stuff like the famous writers.</p><p>要警惕坏的榜样，尤其是那些为懒惰找借口的。我高中时曾模仿著名作家写 “存在主义” 短篇小说。我的故事没什么情节，但 “很深刻”。而且写起来比写有趣的故事省力。我早该知道这是个危险信号。事实上，我觉得自己的故事很无聊；让我兴奋的是 “像著名作家一样写严肃、有思想的东西” 这个想法。</p><p>Now I have enough experience to realize that those famous writers actually sucked. Plenty of famous people do; in the short term, the quality of one’s work is only a small component of fame. I should have been less worried about doing something that seemed cool, and just done something I liked. That’s the actual road to coolness anyway.</p><p>现在我有足够的经验意识到，那些著名作家其实不怎么样。很多名人都是如此；短期内，作品质量只是成名的一小部分原因。我当初不该总想着做 “看起来很酷” 的事，而应该只做自己喜欢的事。毕竟，这才是真正变酷的路。</p><p>A key ingredient in many projects, almost a project on its own, is to find good books. Most books are bad. Nearly all textbooks are bad. [9] So don’t assume a subject is to be learned from whatever book on it happens to be closest. You have to search actively for the tiny number of good books.</p><p>很多项目中，有一个关键要素（几乎本身就是一个项目）是找到好书。大多数书都很差，几乎所有教科书都很差。[9] 所以别以为随便拿起一本关于某个领域的书，就能从中学到东西。你得主动去寻找那极少数的好书。</p><p>The important thing is to get out there and do stuff. Instead of waiting to be taught, go out and learn.</p><p>重要的是走出去，去做事。不要等着被教，要主动去学。</p><p>Your life doesn’t have to be shaped by admissions officers. It could be shaped by your own curiosity. It is for all ambitious adults. And you don’t have to wait to start. In fact, you don’t have to wait to be an adult. There’s no switch inside you that magically flips when you turn a certain age or graduate from some institution. You start being an adult when you decide to take responsibility for your life. You can do that at any age. [10]</p><p>你的人生不必由招生官塑造。它可以由你自己的好奇心塑造。所有有野心的成年人都是如此。而且你不必等，不必等到成年。你体内没有什么开关，会在某个年龄或从某个机构毕业后神奇地打开。当你决定为自己的人生负责时，你就开始成为一个成年人了。这在任何年龄都能做到。[10]</p><p>This may sound like bullshit. I’m just a minor, you may think, I have no money, I have to live at home, I have to do what adults tell me all day long. Well, most adults labor under restrictions just as cumbersome, and they manage to get things done. If you think it’s restrictive being a kid, imagine having kids.</p><p>这可能听起来像废话。你可能会想：“我只是个未成年人，没钱，得住在家里，一整天都得听成年人的。” 但大多数成年人也受着同样繁琐的限制，却依然能做出成就。如果你觉得当孩子受限制，想想养孩子的人吧。</p><p>The only real difference between adults and high school kids is that adults realize they need to get things done, and high school kids don’t. That realization hits most people around 23. But I’m letting you in on the secret early. So get to work. Maybe you can be the first generation whose greatest regret from high school isn’t how much time you wasted.</p><p>成年人和高中生唯一真正的区别是：成年人知道自己需要做出成就，而高中生不知道。大多数人在 23 岁左右才明白这一点。但我提前把这个秘密告诉你了。所以，开始做事吧。或许你们能成为第一代人，高中时最后悔的不是 “浪费了太多时间”。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] A doctor friend warns that even this can give an inaccurate picture. “Who knew how much time it would take up, how little autonomy one would have for endless years of training, and how unbelievably annoying it is to carry a beeper?”<br>一位医生朋友提醒说，即便如此，也可能产生不准确的认识。“谁能想到，多年无休止的培训要耗费多少时间，个人能有多少自主权，还有携带寻呼机是多么令人难以置信地烦人？”</p><p>[2] His best bet would probably be to become dictator and intimidate the NBA into letting him play. So far the closest anyone has come is Secretary of Labor.<br>他最好的办法或许是成为独裁者，胁迫 NBA 让他打球。到目前为止，最接近这一情况的人是劳工部长。</p><p>[3] A day job is one you take to pay the bills so you can do what you really want, like play in a band, or invent relativity.<br>日常工作是你为了支付账单而做的，这样你才能去做自己真正想做的事，比如在乐队里演奏，或者提出相对论。</p><p>Treating high school as a day job might actually make it easier for some students to get good grades. If you treat your classes as a game, you won’t be demoralized if they seem pointless.<br>把高中当作一份日常工作，实际上可能会让一些学生更容易取得好成绩。如果你把课程当作一场游戏，即便它们看起来毫无意义，你也不会士气低落。</p><p>However bad your classes, you need to get good grades in them to get into a decent college. And that is worth doing, because universities are where a lot of the clumps of smart people are these days.<br>不管你的课程有多糟糕，你都需要取得好成绩才能进入一所不错的大学。这是值得去做的，因为如今大学里有很多聪明人群集。</p><p>[4] The second biggest regret was caring so much about unimportant things. And especially about what other people thought of them.<br>第二大遗憾是太过在意无关紧要的事情，尤其是别人对自己的看法。</p><p>I think what they really mean, in the latter case, is caring what random people thought of them. Adults care just as much what other people think, but they get to be more selective about the other people.<br>我认为，就后一种情况而言，他们真正的意思是在意那些随机遇到的人的看法。成年人同样在乎别人的看法，但他们会更有选择性地对待这些 “别人”。</p><p>I have about thirty friends whose opinions I care about, and the opinion of the rest of the world barely affects me. The problem in high school is that your peers are chosen for you by accidents of age and geography, rather than by you based on respect for their judgement.<br>我有大约 30 个朋友，我会在意他们的看法，而世界上其他人的看法几乎影响不到我。高中时期的问题在于，你的同龄人是由年龄和地域的偶然因素为你选定的，而不是你基于对他们判断力的尊重而选择的。</p><p>[5] The key to wasting time is distraction. Without distractions it’s too obvious to your brain that you’re not doing anything with it, and you start to feel uncomfortable. If you want to measure how dependent you’ve become on distractions, try this experiment: set aside a chunk of time on a weekend and sit alone and think. You can have a notebook to write your thoughts down in, but nothing else: no friends, TV, music, phone, IM, email, Web, games, books, newspapers, or magazines. Within an hour most people will feel a strong craving for distraction.<br>浪费时间的关键在于分心。没有分心的事物时，你的大脑会很明显地意识到自己无所事事，然后你就会开始感到不适。如果你想衡量自己对分心事物的依赖程度，不妨试试这个实验：在周末留出一大段时间，独自坐着思考。你可以有一个笔记本用来写下自己的想法，但不能有其他东西：没有朋友、电视、音乐、手机、即时通讯、电子邮件、网络、游戏、书籍、报纸或杂志。不到一个小时，大多数人就会强烈渴望分心的事物。</p><p>[6] I don’t mean to imply that the only function of prep schools is to trick admissions officers. They also generally provide a better education. But try this thought experiment: suppose prep schools supplied the same superior education but had a tiny (.001) negative effect on college admissions. How many parents would still send their kids to them?<br>我并不是想说预科学校的唯一作用就是欺骗招生官。它们通常也能提供更好的教育。但不妨做个思想实验：假设预科学校提供同样优质的教育，但对大学录取有微小（0.001）的负面影响。还有多少父母会送孩子去呢？</p><p>It might also be argued that kids who went to prep schools, because they’ve learned more, are better college candidates. But this seems empirically false. What you learn in even the best high school is rounding error compared to what you learn in college. Public school kids arrive at college with a slight disadvantage, but they start to pull ahead in the sophomore year.<br>也有人可能会说，上预科学校的孩子因为学到了更多东西，所以更适合进入大学。但从经验来看，这似乎是错误的。即便是在最好的高中所学的知识，与在大学学到的相比，也只是微不足道的。公立学校的孩子进入大学时略处劣势，但到了大二就开始领先了。</p><p>(I’m not saying public school kids are smarter than preppies, just that they are within any given college. That follows necessarily if you agree prep schools improve kids’ admissions prospects.)<br>（我并不是说公立学校的孩子比预科学校的孩子更聪明，只是说在任何一所特定的大学里，他们的水平不相上下。如果你认同预科学校能提高孩子的录取前景，那么这一点是必然的。）</p><p>[7] Why does society foul you? Indifference, mainly. There are simply no outside forces pushing high school to be good. The air traffic control system works because planes would crash otherwise. Businesses have to deliver because otherwise competitors would take their customers. But no planes crash if your school sucks, and it has no competitors. High school isn’t evil; it’s random; but random is pretty bad.<br>为什么社会会亏待你？主要是因为冷漠。根本没有外部力量推动高中变得更好。空中交通管制系统之所以有效，是因为否则飞机就会坠毁。企业必须履约，否则竞争对手就会抢走客户。但如果你的学校很糟糕，也不会有飞机坠毁，而且学校也没有竞争对手。高中并非邪恶，只是随机无序，但随机无序的状态相当糟糕。</p><p>[8] And then of course there is money. It’s not a big factor in high school, because you can’t do much that anyone wants. But a lot of great things were created mainly to make money. Samuel Johnson said “no man but a blockhead ever wrote except for money.” (Many hope he was exaggerating.)<br>当然，还有金钱因素。在高中阶段，金钱并不是一个重要因素，因为你做不了太多别人愿意为之付费的事情。但很多伟大的事物主要是为了赚钱而创造出来的。塞缪尔・约翰逊说过：“除了傻瓜，没有人会不为钱而写作。”（很多人希望他是在夸张。）</p><p>[9] Even college textbooks are bad. When you get to college, you’ll find that (with a few stellar exceptions) the textbooks are not written by the leading scholars in the field they describe. Writing college textbooks is unpleasant work, done mostly by people who need the money. It’s unpleasant because the publishers exert so much control, and there are few things worse than close supervision by someone who doesn’t understand what you’re doing. This phenomenon is apparently even worse in the production of high school textbooks.<br>即便是大学教材也很差劲。上了大学你会发现，（除了少数杰出的例外）教材并非由其所描述领域的顶尖学者编写。编写大学教材是件令人不快的工作，主要由需要钱的人来做。之所以令人不快，是因为出版商控制太多，而且没有什么比被一个不懂你在做什么的人严密监督更糟糕的了。显然，这种现象在高中教材的编写中更为严重。</p><p>[10] Your teachers are always telling you to behave like adults. I wonder if they’d like it if you did. You may be loud and disorganized, but you’re very docile compared to adults. If you actually started acting like adults, it would be just as if a bunch of adults had been transposed into your bodies. Imagine the reaction of an FBI agent or taxi driver or reporter to being told they had to ask permission to go the bathroom, and only one person could go at a time. To say nothing of the things you’re taught. If a bunch of actual adults suddenly found themselves trapped in high school, the first thing they’d do is form a union and renegotiate all the rules with the administration.<br>你的老师总是告诉你要表现得像个成年人。我想知道如果真的那样做了，他们是否会喜欢。你们可能吵闹且缺乏条理，但和成年人相比，你们非常温顺。如果你们真的开始像成年人那样行事，就好比一群成年人被转移到了你们的身体里。想象一下，联邦调查局特工、出租车司机或记者要是被告知必须请求许可才能去洗手间，而且一次只能一个人去，他们会有什么反应。更不用说你们所学的东西了。如果一群真正的成年人突然发现自己被困在高中里，他们要做的第一件事就是组建工会，与校方重新协商所有规则。</p><p>Thanks to Ingrid Bassett, Trevor Blackwell, Rich Draves, Dan Giffin, Sarah Harlin, Jessica Livingston, Jackie McDonough, Robert Morris, Mark Nitzberg, Lisa Randall, and Aaron Swartz for reading drafts of this, and to many others for talking to me about high school.</p><p>感谢英格丽德・巴塞特、特雷弗・布莱克韦尔、里奇・德雷夫斯、丹・吉芬、萨拉・哈林、杰西卡・利文斯顿、杰基・麦克多诺、罗伯特・莫里斯、马克・尼茨伯格、莉萨・兰德尔和亚伦・斯沃茨阅读了本文的草稿，也感谢许多其他人与我谈论高中的话题。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创办一家初创公司</title>
    <link href="/2025/08/20/how-to-start-a-startup/"/>
    <url>/2025/08/20/how-to-start-a-startup/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Start-a-Startup"><a href="#How-to-Start-a-Startup" class="headerlink" title="How to Start a Startup"></a>How to Start a Startup</h2><p>原文链接: <a href="https://paulgraham.com/start.html">https://paulgraham.com/start.html</a></p><p>March 2005</p><p>(This essay is derived from a talk at the Harvard Computer Society.)<br>（本文改编自哈佛大学计算机学会的一次演讲。）</p><p>You need three things to create a successful startup: to start with good people, to make something customers actually want, and to spend as little money as possible. Most startups that fail do it because they fail at one of these. A startup that does all three will probably succeed.<br>要创办一家成功的初创公司，你需要三样东西：从优秀的人开始，做出客户真正想要的产品，以及尽可能少花钱。大多数初创公司失败，都是因为在这三点中的某一点上出了问题。做到这三点的初创公司，大概率会成功。</p><p>And that’s kind of exciting, when you think about it, because all three are doable. Hard, but doable. And since a startup that succeeds ordinarily makes its founders rich, that implies getting rich is doable too. Hard, but doable.<br>仔细想想，这其实挺令人兴奋的，因为这三件事都是可以做到的。难，但并非做不到。而且，成功的初创公司通常会让创始人变得富有，这意味着 “变富” 也是可以做到的。难，但并非做不到。</p><p>If there is one message I’d like to get across about startups, that’s it. There is no magically difficult step that requires brilliance to solve.<br>如果说关于初创公司我想传达一个核心信息，那就是：没有哪一步需要天才般的智慧才能跨越，不存在那种 “神奇的难点”。</p><h3 id="The-Idea"><a href="#The-Idea" class="headerlink" title="The Idea"></a><strong>The Idea</strong></h3><p><strong>创意</strong></p><p>In particular, you don’t need a brilliant idea to start a startup around. The way a startup makes money is to offer people better technology than they have now. But what people have now is often so bad that it doesn’t take brilliance to do better.<br>尤其要说明的是，创办初创公司并不需要一个天才般的创意。初创公司赚钱的方式，是为人们提供比现有技术更好的东西。但现在人们使用的东西往往糟糕透顶，想要做得更好，并不需要多么聪明。</p><p>Google’s plan, for example, was simply to create a search site that didn’t suck. They had three new ideas: index more of the Web, use links to rank search results, and have clean, simple web pages with unintrusive keyword-based ads. Above all, they were determined to make a site that was good to use. No doubt there are great technical tricks within Google, but the overall plan was straightforward. And while they probably have bigger ambitions now, this alone brings them a billion dollars a year. [1]<br>比如，谷歌的计划很简单：做一个不烂的搜索引擎。他们有三个新想法：索引更多的网页，用链接来给搜索结果排序，以及做出简洁干净的网页，配上不刺眼的关键词广告。最重要的是，他们决心做一个好用的网站。毫无疑问，谷歌内部有很多厉害的技术技巧，但整体计划其实很直接。即便他们现在的野心可能更大了，但仅凭这一点，每年就能带来十亿美元的收入。[1]</p><p>There are plenty of other areas that are just as backward as search was before Google. I can think of several heuristics for generating ideas for startups, but most reduce to this: look at something people are trying to do, and figure out how to do it in a way that doesn’t suck.<br>还有很多领域，就像谷歌出现之前的搜索领域一样落后。我能想到几个催生初创公司创意的方法，但大多可以归结为：看看人们在尝试做什么，然后想办法把这件事做得不那么烂。</p><p>For example, dating sites currently suck far worse than search did before Google. They all use the same simple-minded model. They seem to have approached the problem by thinking about how to do database matches instead of how dating works in the real world. An undergrad could build something better as a class project. And yet there’s a lot of money at stake. Online dating is a valuable business now, and it might be worth a hundred times as much if it worked.<br>比如，现在的交友网站比谷歌出现前的搜索引擎烂多了。它们都在用同样简单粗暴的模式。它们似乎是从 “如何做数据库匹配” 的角度来解决问题，而不是考虑现实中约会是如何运作的。一个本科生做课程作业都能做出更好的东西。但这个领域涉及的资金却很多。在线约会现在已经是一门值钱的生意了，如果真能做好，它的价值可能会翻上一百倍。</p><p>An idea for a startup, however, is only a beginning. A lot of would-be startup founders think the key to the whole process is the initial idea, and from that point all you have to do is execute. Venture capitalists know better. If you go to VC firms with a brilliant idea that you’ll tell them about if they sign a nondisclosure agreement, most will tell you to get lost. That shows how much a mere idea is worth. The market price is less than the inconvenience of signing an NDA.<br>然而，初创公司的创意仅仅是个开始。很多想成为创始人的人认为，整个过程的关键是最初的创意，之后只需要执行就行。但风险投资家们更清楚。如果你带着一个 “天才创意” 去找风投，说只要他们签了保密协议就告诉他们，大多数风投会让你走开。这足以说明一个单纯的创意值多少钱 —— 它的市场价值还比不上签保密协议的麻烦。</p><p>Another sign of how little the initial idea is worth is the number of startups that change their plan en route. Microsoft’s original plan was to make money selling programming languages, of all things. Their current business model didn’t occur to them until IBM dropped it in their lap five years later.<br>很多初创公司在发展过程中会改变计划，这也说明最初的创意没那么重要。微软最初的计划，竟然是靠卖编程语言赚钱。五年后，IBM 把现在的商业模式送到他们面前，他们才想到可以这么做。</p><p>Ideas for startups are worth something, certainly, but the trouble is, they’re not transferrable. They’re not something you could hand to someone else to execute. Their value is mainly as starting points: as questions for the people who had them to continue thinking about.<br>当然，初创公司的创意是有价值的，但问题在于，它们无法转移。你不能把创意交给别人去执行。它们的价值主要在于作为起点 —— 是让想出创意的人继续思考的问题。</p><p>What matters is not ideas, but the people who have them. Good people can fix bad ideas, but good ideas can’t save bad people.<br>重要的不是创意，而是拥有创意的人。优秀的人能修正糟糕的创意，但优秀的创意救不了糟糕的人。</p><h3 id="People"><a href="#People" class="headerlink" title="People"></a><strong>People</strong></h3><p><strong>团队成员</strong></p><p>What do I mean by good people? One of the best tricks I learned during our startup was a rule for deciding who to hire. Could you describe the person as an animal? It might be hard to translate that into another language, but I think everyone in the US knows what it means. It means someone who takes their work a little too seriously; someone who does what they do so well that they pass right through professional and cross over into obsessive.<br>我说的 “优秀的人” 是什么意思？在我们创办公司的过程中，我学到的一个最好的招聘技巧是：你能说这个人是个 “疯子” 吗？这个词可能很难翻译成其他语言，但美国人大概都懂它的意思。它指的是那种对工作过于认真的人；那种把事情做得极好，超越了 “专业”，达到 “痴迷” 程度的人。</p><p>What it means specifically depends on the job: a salesperson who just won’t take no for an answer; a hacker who will stay up till 4:00 AM rather than go to bed leaving code with a bug in it; a PR person who will cold-call New York Times reporters on their cell phones; a graphic designer who feels physical pain when something is two millimeters out of place.<br>具体来说，这因工作而异：一个绝不接受 “不” 的销售人员；一个宁愿熬夜到凌晨四点，也不愿带着代码里的 bug 上床睡觉的程序员；一个会给《纽约时报》记者打陌生电话的公关；一个看到东西偏离两毫米就会觉得生理不适的平面设计师。</p><p>Almost everyone who worked for us was an animal at what they did. The woman in charge of sales was so tenacious that I used to feel sorry for potential customers on the phone with her. You could sense them squirming on the hook, but you knew there would be no rest for them till they’d signed up.<br>我们公司几乎每个人在自己的领域都是这样的 “疯子”。负责销售的女士非常执着，我都常常为和她通电话的潜在客户感到同情。你能感觉到他们在电话那头坐立不安，但你知道，不签单他们是不会得到安宁的。</p><p>If you think about people you know, you’ll find the animal test is easy to apply. Call the person’s image to mind and imagine the sentence “so-and-so is an animal.” If you laugh, they’re not. You don’t need or perhaps even want this quality in big companies, but you need it in a startup.<br>想想你认识的人，你会发现这个 “疯子测试” 很好用。在脑海中浮现一个人的样子，然后默念 “某某是个疯子”。如果你笑了，那他就不是。大公司里可能不需要这种特质，甚至不想要，但初创公司需要。</p><p>For programmers we had three additional tests. Was the person genuinely smart? If so, could they actually get things done? And finally, since a few good hackers have unbearable personalities, could we stand to have them around?<br>对于程序员，我们还有三个额外的测试：这个人是真的聪明吗？如果是，他真的能把事情做成吗？最后，因为有些优秀的程序员性格让人难以忍受，我们能忍受和他共事吗？</p><p>That last test filters out surprisingly few people. We could bear any amount of nerdiness if someone was truly smart. What we couldn’t stand were people with a lot of attitude. But most of those weren’t truly smart, so our third test was largely a restatement of the first.<br>最后一个测试筛掉的人少得惊人。如果一个人真的聪明，我们能忍受他任何程度的 “书呆子气”。我们受不了的是那些态度傲慢的人。但大多数态度傲慢的人并不真的聪明，所以第三个测试在很大程度上是第一个测试的重申。</p><p>When nerds are unbearable it’s usually because they’re trying too hard to seem smart. But the smarter they are, the less pressure they feel to act smart. So as a rule you can recognize genuinely smart people by their ability to say things like “I don’t know,” “Maybe you’re right,” and “I don’t understand x well enough.”<br>书呆子让人受不了，通常是因为他们太努力想显得聪明。但一个人越聪明，就越不会有 “必须表现得聪明” 的压力。所以，通常来说，真正聪明的人会说 “我不知道”“也许你是对的”“我对 x 了解得不够”—— 从这些话里你能认出他们。</p><p>This technique doesn’t always work, because people can be influenced by their environment. In the MIT CS department, there seems to be a tradition of acting like a brusque know-it-all. I’m told it derives ultimately from Marvin Minsky, in the same way the classic airline pilot manner is said to derive from Chuck Yeager. Even genuinely smart people start to act this way there, so you have to make allowances.<br>但这个方法并不总是管用，因为人会受环境影响。麻省理工学院计算机系似乎有个传统：表现得粗鲁又自以为什么都懂。有人说这源于马文・明斯基，就像经典的飞行员做派据说源于查克・耶格尔一样。在那里，即使是真正聪明的人也会开始这么做，所以你得有所体谅。</p><p>It helped us to have Robert Morris, who is one of the readiest to say “I don’t know” of anyone I’ve met. (At least, he was before he became a professor at MIT.) No one dared put on attitude around Robert, because he was obviously smarter than they were and yet had zero attitude himself.<br>罗伯特・莫里斯对我们帮助很大，他是我见过的最愿意说 “我不知道” 的人之一（至少在他成为麻省理工学院教授之前是这样）。在罗伯特身边，没人敢摆架子，因为他显然比所有人都聪明，却毫无傲慢之气。</p><p>Like most startups, ours began with a group of friends, and it was through personal contacts that we got most of the people we hired. This is a crucial difference between startups and big companies. Being friends with someone for even a couple days will tell you more than companies could ever learn in interviews. [2]<br>和大多数初创公司一样，我们也是从一群朋友开始的，我们雇佣的大多数人都是通过私人关系找到的。这是初创公司和大公司的一个关键区别。和一个人做几天朋友，你对他的了解，比公司通过面试能了解到的要多得多。[2]</p><p>It’s no coincidence that startups start around universities, because that’s where smart people meet. It’s not what people learn in classes at MIT and Stanford that has made technology companies spring up around them. They could sing campfire songs in the classes so long as admissions worked the same.<br>初创公司多在大学周边诞生，这并非巧合，因为那里是聪明人聚集的地方。麻省理工和斯坦福周边涌现出很多科技公司，不是因为人们在课堂上学到了什么。就算课堂上唱篝火歌，只要招生标准不变，这些公司还是会出现。</p><p>If you start a startup, there’s a good chance it will be with people you know from college or grad school. So in theory you ought to try to make friends with as many smart people as you can in school, right? Well, no. Don’t make a conscious effort to schmooze; that doesn’t work well with hackers.<br>如果你要创办初创公司，很可能是和大学里或研究生院认识的人一起。所以理论上，你在学校里应该尽量多和聪明人交朋友，对吗？不对。不要刻意去套近乎，这对程序员没用。</p><p>What you should do in college is work on your own projects. Hackers should do this even if they don’t plan to start startups, because it’s the only real way to learn how to program. In some cases you may collaborate with other students, and this is the best way to get to know good hackers. The project may even grow into a startup. But once again, I wouldn’t aim too directly at either target. Don’t force things; just work on stuff you like with people you like.<br>你在大学里应该做的是自己的项目。即使不打算创办初创公司，程序员也应该这么做，因为这是学习编程的唯一真正途径。有时候你可能会和其他学生合作，这是认识优秀程序员的最好方式。这个项目甚至可能发展成一家初创公司。但再次强调，不要太直接地盯着这两个目标。不要勉强，就和你喜欢的人一起做你喜欢的事就好。</p><p>Ideally you want between two and four founders. It would be hard to start with just one. One person would find the moral weight of starting a company hard to bear. Even Bill Gates, who seems to be able to bear a good deal of moral weight, had to have a co-founder. But you don’t want so many founders that the company starts to look like a group photo. Partly because you don’t need a lot of people at first, but mainly because the more founders you have, the worse disagreements you’ll have. When there are just two or three founders, you know you have to resolve disputes immediately or perish. If there are seven or eight, disagreements can linger and harden into factions. You don’t want mere voting; you need unanimity.<br>理想情况下，创始人数量在 2 到 4 人之间。一个人很难启动。一个人会觉得创办公司的精神压力难以承受。即使是比尔・盖茨 —— 他似乎能承受很大的精神压力 —— 也需要一个联合创始人。但创始人也不能太多，否则公司就像一张集体照了。部分原因是一开始不需要那么多人，更主要的是，创始人越多，分歧就越严重。如果只有两三个创始人，你知道必须立即解决争端，否则公司就完了。如果有七八个人，分歧可能会拖延，甚至固化成派系。你不需要简单的投票，你需要的是全体一致。</p><p>In a technology startup, which most startups are, the founders should include technical people. During the Internet Bubble there were a number of startups founded by business people who then went looking for hackers to create their product for them. This doesn’t work well. Business people are bad at deciding what to do with technology, because they don’t know what the options are, or which kinds of problems are hard and which are easy. And when business people try to hire hackers, they can’t tell which ones are good. Even other hackers have a hard time doing that. For business people it’s roulette.<br>大多数初创公司都是科技公司，这类公司的创始人中应该有技术人员。互联网泡沫时期，有很多初创公司是由商人创办的，然后他们再去找程序员来为他们开发产品。这行不通。商人不擅长决定如何利用技术，因为他们不知道有哪些选择，也不知道哪些问题难、哪些问题容易。而且商人招聘程序员时，分不清谁是优秀的。即使是其他程序员，也很难做到这一点。对商人来说，这就像轮盘赌。</p><p>Do the founders of a startup have to include business people? That depends. We thought so when we started ours, and we asked several people who were said to know about this mysterious thing called “business” if they would be the president. But they all said no, so I had to do it myself. And what I discovered was that business was no great mystery. It’s not something like physics or medicine that requires extensive study. You just try to get people to pay you for stuff.<br>初创公司的创始人必须包括商人吗？这要看情况。我们创办公司时是这么想的，我们问了几个据说懂 “商业” 这个神秘东西的人，问他们愿不愿意当总裁。但他们都拒绝了，所以我不得不自己来。然后我发现，商业没什么神秘的。它不像物理或医学那样需要深入研究。你只需要想办法让人们为你的东西付钱。</p><p>I think the reason I made such a mystery of business was that I was disgusted by the idea of doing it. I wanted to work in the pure, intellectual world of software, not deal with customers’ mundane problems. People who don’t want to get dragged into some kind of work often develop a protective incompetence at it. Paul Erdos was particularly good at this. By seeming unable even to cut a grapefruit in half (let alone go to the store and buy one), he forced other people to do such things for him, leaving all his time free for math. Erdos was an extreme case, but most husbands use the same trick to some degree.<br>我之所以觉得商业很神秘，我想是因为我厌恶做商业相关的事。我想在纯粹的、智力层面的软件世界里工作，不想处理客户那些琐碎的问题。不想被某种工作拖累的人，往往会故意表现得做不好这件事。保罗・埃尔德什就很擅长这一点。他看起来连半个葡萄柚都切不了（更别说去商店买了），这样就迫使别人为他做这些事，让他有更多时间研究数学。埃尔德什是个极端案例，但大多数丈夫在某种程度上也会用这招。</p><p>Once I was forced to discard my protective incompetence, I found that business was neither so hard nor so boring as I feared. There are esoteric areas of business that are quite hard, like tax law or the pricing of derivatives, but you don’t need to know about those in a startup. All you need to know about business to run a startup are commonsense things people knew before there were business schools, or even universities.<br>一旦我被迫放下这种 “故意无能”，我发现商业既不像我担心的那么难，也不像我担心的那么无聊。商业中有些深奥的领域确实很难，比如税法或衍生品定价，但初创公司不需要了解这些。运营初创公司所需的商业知识，都是商学院甚至大学出现之前人们就知道的常识。</p><p>If you work your way down the Forbes 400 making an x next to the name of each person with an MBA, you’ll learn something important about business school. After Warren Buffett, you don’t hit another MBA till number 22, Phil Knight, the CEO of Nike. There are only 5 MBAs in the top 50. What you notice in the Forbes 400 are a lot of people with technical backgrounds. Bill Gates, Steve Jobs, Larry Ellison, Michael Dell, Jeff Bezos, Gordon Moore. The rulers of the technology business tend to come from technology, not business. So if you want to invest two years in something that will help you succeed in business, the evidence suggests you’d do better to learn how to hack than get an MBA. [3]<br>如果你浏览《福布斯》400 富豪榜，在每个有 MBA 学位的人名字旁打个叉，你会对商学院有个重要发现。在沃伦・巴菲特之后，直到第 22 位耐克 CEO 菲尔・奈特，你才会看到另一个 MBA。前 50 名中只有 5 个 MBA。《福布斯》400 富豪榜中，很多人都有技术背景：比尔・盖茨、史蒂夫・乔布斯、拉里・埃里森、迈克尔・戴尔、杰夫・贝佐斯、戈登・摩尔。科技行业的领军者往往来自技术领域，而非商业领域。所以，如果你想花两年时间做一件有助于你在商业上成功的事，有证据表明，学编程比读 MBA 更好。[3]</p><p>There is one reason you might want to include business people in a startup, though: because you have to have at least one person willing and able to focus on what customers want. Some believe only business people can do this– that hackers can implement software, but not design it. That’s nonsense. There’s nothing about knowing how to program that prevents hackers from understanding users, or about not knowing how to program that magically enables business people to understand them.<br>不过，初创公司可能需要商人的一个原因是：至少要有一个人愿意且能够专注于客户想要什么。有些人认为只有商人能做到这一点 —— 程序员能开发软件，但不能设计软件。这是胡说八道。懂编程并不妨碍程序员理解用户，不懂编程也不会神奇地让商人理解用户。</p><p>If you can’t understand users, however, you should either learn how or find a co-founder who can. That is the single most important issue for technology startups, and the rock that sinks more of them than anything else.<br>但如果你无法理解用户，你要么学着去理解，要么找一个能理解用户的联合创始人。这是科技初创公司最关键的问题，也是导致大多数公司失败的原因。</p><h3 id="What-Customers-Want"><a href="#What-Customers-Want" class="headerlink" title="What Customers Want"></a><strong>What Customers Want</strong></h3><p><strong>客户想要什么</strong></p><p>It’s not just startups that have to worry about this. I think most businesses that fail do it because they don’t give customers what they want. Look at restaurants. A large percentage fail, about a quarter in the first year. But can you think of one restaurant that had really good food and went out of business?<br>不只是初创公司需要担心这个问题。我认为大多数失败的企业，都是因为没有给客户他们想要的东西。看看餐馆就知道了。很多餐馆会倒闭，第一年大约有四分之一。但你能想到哪家食物真的很棒的餐馆倒闭了吗？</p><p>Restaurants with great food seem to prosper no matter what. A restaurant with great food can be expensive, crowded, noisy, dingy, out of the way, and even have bad service, and people will keep coming. It’s true that a restaurant with mediocre food can sometimes attract customers through gimmicks. But that approach is very risky. It’s more straightforward just to make the food good.<br>食物很棒的餐馆似乎无论如何都会兴旺。一家食物很棒的餐馆，就算价格贵、人多、嘈杂、肮脏、位置偏僻，甚至服务差，人们还是会源源不断地来。诚然，食物一般的餐馆有时能通过噱头吸引顾客。但这种方法风险很大。更直接的做法就是把食物做好。</p><p>It’s the same with technology. You hear all kinds of reasons why startups fail. But can you think of one that had a massively popular product and still failed?<br>科技行业也是如此。你会听到各种各样初创公司失败的原因。但你能想到哪家公司的产品非常受欢迎，最后却失败了吗？</p><p>In nearly every failed startup, the real problem was that customers didn’t want the product. For most, the cause of death is listed as “ran out of funding,” but that’s only the immediate cause. Why couldn’t they get more funding? Probably because the product was a dog, or never seemed likely to be done, or both.<br>几乎每一家失败的初创公司，真正的问题都是客户不想要他们的产品。大多数公司的 “死因” 被列为 “资金耗尽”，但这只是直接原因。他们为什么得不到更多资金？可能是因为产品很烂，或者看起来永远做不完，或者两者都有。</p><p>When I was trying to think of the things every startup needed to do, I almost included a fourth: get a version 1 out as soon as you can. But I decided not to, because that’s implicit in making something customers want. The only way to make something customers want is to get a prototype in front of them and refine it based on their reactions.<br>当我在思考初创公司需要做的事情时，我差点加上第四条：尽快推出第一个版本。但我决定不加，因为这是 “做出客户想要的产品” 的应有之义。做出客户想要的产品的唯一方法，是把原型放在他们面前，然后根据他们的反应进行改进。</p><p>The other approach is what I call the “Hail Mary” strategy. You make elaborate plans for a product, hire a team of engineers to develop it (people who do this tend to use the term “engineer” for hackers), and then find after a year that you’ve spent two million dollars to develop something no one wants. This was not uncommon during the Bubble, especially in companies run by business types, who thought of software development as something terrifying that therefore had to be carefully planned.<br>另一种方法我称之为 “孤注一掷” 策略。你为产品制定详尽的计划，雇佣一个工程师团队来开发（这样做的人往往用 “工程师” 来称呼程序员），然后一年后发现，你花了两百万美元开发出的东西没人想要。互联网泡沫时期，这种情况并不少见，尤其是在商人运营的公司里，他们认为软件开发很可怕，因此必须仔细规划。</p><p>We never even considered that approach. As a Lisp hacker, I come from the tradition of rapid prototyping. I would not claim (at least, not here) that this is the right way to write every program, but it’s certainly the right way to write software for a startup. In a startup, your initial plans are almost certain to be wrong in some way, and your first priority should be to figure out where. The only way to do that is to try implementing them.<br>我们从未考虑过这种方法。作为一个 Lisp 程序员，我来自快速原型开发的传统。我不会说（至少在这里不会）这是编写所有程序的正确方法，但对于初创公司的软件开发来说，这无疑是正确的方法。在初创公司，你的初始计划几乎肯定在某些方面是错误的，你的首要任务应该是找出错误在哪里。唯一的方法就是尝试去实现它们。</p><p>Like most startups, we changed our plan on the fly. At first we expected our customers to be Web consultants. But it turned out they didn’t like us, because our software was easy to use and we hosted the site. It would be too easy for clients to fire them. We also thought we’d be able to sign up a lot of catalog companies, because selling online was a natural extension of their existing business. But in 1996 that was a hard sell. The middle managers we talked to at catalog companies saw the Web not as an opportunity, but as something that meant more work for them.<br>和大多数初创公司一样，我们在过程中改变了计划。起初，我们以为客户会是网络顾问。但结果是他们不喜欢我们，因为我们的软件易用，而且我们提供托管服务。这样客户太容易解雇他们了。我们还以为能签下很多目录邮购公司，因为在线销售是他们现有业务的自然延伸。但在 1996 年，这很难推销。我们交谈过的目录邮购公司的中层管理者，不把网络视为机会，而视为会给他们增加更多工作的东西。</p><p>We did get a few of the more adventurous catalog companies. Among them was Frederick’s of Hollywood, which gave us valuable experience dealing with heavy loads on our servers. But most of our users were small, individual merchants who saw the Web as an opportunity to build a business. Some had retail stores, but many only existed online. And so we changed direction to focus on these users. Instead of concentrating on the features Web consultants and catalog companies would want, we worked to make the software easy to use.<br>我们确实签下了一些更大胆的目录邮购公司。其中包括好莱坞的弗雷德里克公司，这让我们获得了处理服务器高负载的宝贵经验。但我们的大多数用户是小型个体商户，他们把网络视为创业的机会。有些有实体店，但很多只在网上存在。于是我们改变方向，专注于这些用户。我们不再专注于网络顾问和目录邮购公司想要的功能，而是努力让软件更易用。</p><p>I learned something valuable from that. It’s worth trying very, very hard to make technology easy to use. Hackers are so used to computers that they have no idea how horrifying software seems to normal people. Stephen Hawking’s editor told him that every equation he included in his book would cut sales in half. When you work on making technology easier to use, you’re riding that curve up instead of down. A 10% improvement in ease of use doesn’t just increase your sales 10%. It’s more likely to double your sales.<br>从中我学到了宝贵的一课：让技术易用是非常值得努力的。程序员太习惯电脑了，他们根本不知道软件在普通人看来有多可怕。史蒂芬・霍金的编辑告诉他，书中每多一个公式，销量就会减半。当你努力让技术更易用时，你是在顺应上升的曲线，而不是下降的。易用性提升 10%，带来的不仅仅是 10% 的销量增长，更可能让销量翻倍。</p><p>How do you figure out what customers want? Watch them. One of the best places to do this was at trade shows. Trade shows didn’t pay as a way of getting new customers, but they were worth it as market research. We didn’t just give canned presentations at trade shows. We used to show people how to build real, working stores. Which meant we got to watch as they used our software, and talk to them about what they needed.<br>如何弄清楚客户想要什么？观察他们。最好的地方之一是行业展会。行业展会作为获取新客户的方式并不划算，但作为市场调研是值得的。我们在展会上不只是做千篇一律的演示，而是向人们展示如何搭建真实可用的商店。这意味着我们可以观察他们使用我们的软件，并和他们谈论他们的需求。</p><p>No matter what kind of startup you start, it will probably be a stretch for you, the founders, to understand what users want. The only kind of software you can build without studying users is the sort for which you are the typical user. But this is just the kind that tends to be open source: operating systems, programming languages, editors, and so on. So if you’re developing technology for money, you’re probably not going to be developing it for people like you. Indeed, you can use this as a way to generate ideas for startups: what do people who are not like you want from technology?<br>无论你创办什么样的初创公司，作为创始人，理解用户的需求可能都需要费点劲。唯一不需要研究用户就能开发的软件，是那种你自己就是典型用户的软件。但这类软件往往是开源的：操作系统、编程语言、编辑器等等。所以，如果你开发技术是为了赚钱，你开发的对象很可能不是和你一样的人。事实上，你可以用这种方式来产生初创公司的创意：那些和你不一样的人，想从技术中得到什么？</p><p>When most people think of startups, they think of companies like Apple or Google. Everyone knows these, because they’re big consumer brands. But for every startup like that, there are twenty more that operate in niche markets or live quietly down in the infrastructure. So if you start a successful startup, odds are you’ll start one of those.<br>大多数人想到初创公司时，会想到苹果或谷歌这样的公司。每个人都知道它们，因为它们是大型消费品牌。但每有一家这样的公司，就有二十多家在细分市场运营，或者在基础设施领域默默存在。所以，如果你创办了一家成功的初创公司，很可能是后者中的一员。</p><p>Another way to say that is, if you try to start the kind of startup that has to be a big consumer brand, the odds against succeeding are steeper. The best odds are in niche markets. Since startups make money by offering people something better than they had before, the best opportunities are where things suck most. And it would be hard to find a place where things suck more than in corporate IT departments. You would not believe the amount of money companies spend on software, and the crap they get in return. This imbalance equals opportunity.<br>换句话说，如果你想创办那种必须成为大型消费品牌的初创公司，失败的几率会更高。最好的机会在细分市场。因为初创公司通过提供比现有更好的东西来赚钱，所以最糟糕的地方往往蕴藏着最好的机会。而企业 IT 部门的情况可能是最糟糕的。你很难相信公司在软件上花了多少钱，却只得到一堆垃圾。这种不平衡就是机会。</p><p>If you want ideas for startups, one of the most valuable things you could do is find a middle-sized non-technology company and spend a couple weeks just watching what they do with computers. Most good hackers have no more idea of the horrors perpetrated in these places than rich Americans do of what goes on in Brazilian slums.<br>如果你想为初创公司寻找创意，最有价值的做法之一是找一家中型非科技公司，花几周时间观察他们如何使用电脑。大多数优秀的程序员对这些地方的糟糕情况一无所知，就像美国富人不知道巴西贫民窟里发生了什么一样。</p><p>Start by writing software for smaller companies, because it’s easier to sell to them. It’s worth so much to sell stuff to big companies that the people selling them the crap they currently use spend a lot of time and money to do it. And while you can outhack Oracle with one frontal lobe tied behind your back, you can’t outsell an Oracle salesman. So if you want to win through better technology, aim at smaller customers. [4]<br>先为小公司开发软件，因为卖给他们更容易。向大公司推销东西的价值太大了，以至于那些向他们推销现有垃圾软件的人会花大量时间和金钱去做。虽然你闭着眼睛都能在技术上打败甲骨文，但你赢不过甲骨文的销售人员。所以，如果你想通过更好的技术获胜，把目标对准小客户。[4]</p><p>They’re the more strategically valuable part of the market anyway. In technology, the low end always eats the high end. It’s easier to make an inexpensive product more powerful than to make a powerful product cheaper. So the products that start as cheap, simple options tend to gradually grow more powerful till, like water rising in a room, they squash the “high-end” products against the ceiling. Sun did this to mainframes, and Intel is doing it to Sun. Microsoft Word did it to desktop publishing software like Interleaf and Framemaker. Mass-market digital cameras are doing it to the expensive models made for professionals. Avid did it to the manufacturers of specialized video editing systems, and now Apple is doing it to Avid. Henry Ford did it to the car makers that preceded him. If you build the simple, inexpensive option, you’ll not only find it easier to sell at first, but you’ll also be in the best position to conquer the rest of the market.<br>无论如何，小客户是市场中更具战略价值的部分。在技术领域，低端市场总会吞噬高端市场。让廉价产品变得更强大，比让强大的产品变得更便宜更容易。所以，那些一开始是廉价、简单的产品，往往会逐渐变得更强大，就像房间里不断上涨的水，把 “高端” 产品挤到天花板上。太阳微系统公司对大型机做了这件事，英特尔正在对太阳微系统公司做这件事。微软 Word 对 Interleaf 和 Framemaker 等桌面出版软件做了这件事。大众市场的数码相机正在对专业级昂贵相机做这件事。Avid 对专业视频编辑系统制造商做了这件事，现在苹果正在对 Avid 做这件事。亨利・福特对他之前的汽车制造商做了这件事。如果你打造简单、廉价的产品，不仅一开始更容易销售，还能处于征服其余市场的最佳位置。</p><p>It’s very dangerous to let anyone fly under you. If you have the cheapest, easiest product, you’ll own the low end. And if you don’t, you’re in the crosshairs of whoever does.<br>让任何人在你之下发展都是很危险的。如果你有最便宜、最易用的产品，你就会占据低端市场。如果没有，你就会成为占据低端市场的人的目标。</p><h3 id="Raising-Money"><a href="#Raising-Money" class="headerlink" title="Raising Money"></a><strong>Raising Money</strong></h3><p><strong>融资</strong></p><p>To make all this happen, you’re going to need money. Some startups have been self-funding– Microsoft for example– but most aren’t. I think it’s wise to take money from investors. To be self-funding, you have to start as a consulting company, and it’s hard to switch from that to a product company.<br>要实现这一切，你需要钱。有些初创公司是自筹资金的 —— 比如微软 —— 但大多数不是。我认为接受投资者的资金是明智的。要自筹资金，你必须从咨询公司做起，而从咨询公司转型为产品公司很难。</p><p>Financially, a startup is like a pass&#x2F;fail course. The way to get rich from a startup is to maximize the company’s chances of succeeding, not to maximize the amount of stock you retain. So if you can trade stock for something that improves your odds, it’s probably a smart move.<br>从财务角度看，初创公司就像一门只有通过或不及格的课程。从初创公司中致富的方法，是最大化公司成功的几率，而不是最大化你持有的股票数量。所以，如果你能用股票换取能提高成功几率的东西，这很可能是明智之举。</p><p>To most hackers, getting investors seems like a terrifying and mysterious process. Actually it’s merely tedious. I’ll try to give an outline of how it works.<br>对大多数程序员来说，找投资者似乎是一个可怕又神秘的过程。其实只是很繁琐。我会试着概述一下这个过程。</p><p>The first thing you’ll need is a few tens of thousands of dollars to pay your expenses while you develop a prototype. This is called seed capital. Because so little money is involved, raising seed capital is comparatively easy– at least in the sense of getting a quick yes or no.<br>你首先需要几万美元来支付开发原型期间的费用。这被称为种子资金。因为涉及的资金很少，筹集种子资金相对容易 —— 至少能很快得到同意或拒绝的答复。</p><p>Usually you get seed money from individual rich people called “angels.” Often they’re people who themselves got rich from technology. At the seed stage, investors don’t expect you to have an elaborate business plan. Most know that they’re supposed to decide quickly. It’s not unusual to get a check within a week based on a half-page agreement.<br>通常，你从被称为 “天使投资者” 的富有的个人那里获得种子资金。他们往往是靠技术致富的人。在种子阶段，投资者不期望你有详尽的商业计划。大多数人知道他们应该快速做出决定。基于半页纸的协议，一周内拿到支票并不罕见。</p><p>We started Viaweb with $10,000 of seed money from our friend Julian. But he gave us a lot more than money. He’s a former CEO and also a corporate lawyer, so he gave us a lot of valuable advice about business, and also did all the legal work of getting us set up as a company. Plus he introduced us to one of the two angel investors who supplied our next round of funding.<br>我们创办 Viaweb 时，从朋友朱利安那里获得了 1 万美元的种子资金。但他给我们的远不止钱。他曾是 CEO，也是公司律师，所以给了我们很多宝贵的商业建议，还为我们公司的成立做了所有法律工作。此外，他还把我们介绍给了下一轮融资的两位天使投资者之一。</p><p>Some angels, especially those with technology backgrounds, may be satisfied with a demo and a verbal description of what you plan to do. But many will want a copy of your business plan, if only to remind themselves what they invested in.<br>有些天使投资者，尤其是有技术背景的，可能看了演示、听了你的口头计划就满意了。但很多人会想要一份商业计划，至少是为了提醒自己投资了什么。</p><p>Our angels asked for one, and looking back, I’m amazed how much worry it caused me. “Business plan” has that word “business” in it, so I figured it had to be something I’d have to read a book about business plans to write. Well, it doesn’t. At this stage, all most investors expect is a brief description of what you plan to do and how you’re going to make money from it, and the resumes of the founders. If you just sit down and write out what you’ve been saying to one another, that should be fine. It shouldn’t take more than a couple hours, and you’ll probably find that writing it all down gives you more ideas about what to do.<br>我们的天使投资者也要求一份，现在回想起来，我很惊讶这给我带来了那么多烦恼。“商业计划” 里有 “商业” 这个词，所以我以为必须读一本关于商业计划的书才能写。其实不用。在这个阶段，大多数投资者只希望看到你计划做什么、如何从中赚钱的简要描述，以及创始人的简历。如果你坐下来，把你们互相说过的话写下来，应该就可以了。这不会超过几个小时，而且你可能会发现，把这些写下来能让你产生更多想法。</p><p>For the angel to have someone to make the check out to, you’re going to have to have some kind of company. Merely incorporating yourselves isn’t hard. The problem is, for the company to exist, you have to decide who the founders are, and how much stock they each have. If there are two founders with the same qualifications who are both equally committed to the business, that’s easy. But if you have a number of people who are expected to contribute in varying degrees, arranging the proportions of stock can be hard. And once you’ve done it, it tends to be set in stone.<br>为了让天使投资者有一个可以开支票的对象，你需要成立某种形式的公司。仅仅注册公司并不难。问题是，公司要成立，你必须确定创始人是谁，以及每个人持有多少股份。如果有两个资历相同、对业务投入程度相同的创始人，这很简单。但如果有几个人，预计贡献程度不同，确定股份比例就会很难。而且一旦确定，往往就一成不变了。</p><p>I have no tricks for dealing with this problem. All I can say is, try hard to do it right. I do have a rule of thumb for recognizing when you have, though. When everyone feels they’re getting a slightly bad deal, that they’re doing more than they should for the amount of stock they have, the stock is optimally apportioned.<br>对于这个问题，我没有什么诀窍。我只能说，努力把它做好。不过，我有一个经验法则可以判断是否做得好：当每个人都觉得自己有点吃亏，觉得自己的付出比所持股份应得的要多时，股份分配就是最优的。</p><p>There is more to setting up a company than incorporating it, of course: insurance, business license, unemployment compensation, various things with the IRS. I’m not even sure what the list is, because we, ah, skipped all that. When we got real funding near the end of 1996, we hired a great CFO, who fixed everything retroactively. It turns out that no one comes and arrests you if you don’t do everything you’re supposed to when starting a company. And a good thing too, or a lot of startups would never get started. [5]<br>当然，成立公司不止注册这么简单：保险、营业执照、失业保险、国税局的各种事务。我甚至不确定清单上有什么，因为我们…… 跳过了所有这些。1996 年底我们获得真正的资金后，雇了一位很棒的首席财务官，他 retroactive 地处理了所有事情。事实证明，如果你在创办公司时没有做所有该做的事，不会有人来逮捕你。这也是件好事，否则很多初创公司永远都开不起来。[5]</p><p>It can be dangerous to delay turning yourself into a company, because one or more of the founders might decide to split off and start another company doing the same thing. This does happen. So when you set up the company, as well as as apportioning the stock, you should get all the founders to sign something agreeing that everyone’s ideas belong to this company, and that this company is going to be everyone’s only job.<br>推迟成立公司可能很危险，因为一个或多个创始人可能会决定分出去，创办一家做同样事情的公司。这种情况确实会发生。所以，在成立公司时，除了分配股份，你还应该让所有创始人签署协议，同意每个人的创意都属于这家公司，并且这家公司是每个人唯一的工作。</p><p>[If this were a movie, ominous music would begin here.]<br>（如果这是一部电影，这里应该响起不祥的音乐。）</p><p>While you’re at it, you should ask what else they’ve signed. One of the worst things that can happen to a startup is to run into intellectual property problems. We did, and it came closer to killing us than any competitor ever did.<br>在这个过程中，你应该问问他们还签过什么其他协议。初创公司可能遇到的最糟糕的事情之一，就是知识产权问题。我们遇到过，这比任何竞争对手都更接近让我们倒闭。</p><p>As we were in the middle of getting bought, we discovered that one of our people had, early on, been bound by an agreement that said all his ideas belonged to the giant company that was paying for him to go to grad school. In theory, that could have meant someone else owned big chunks of our software. So the acquisition came to a screeching halt while we tried to sort this out. The problem was, since we’d been about to be acquired, we’d allowed ourselves to run low on cash. Now we needed to raise more to keep going. But it’s hard to raise money with an IP cloud over your head, because investors can’t judge how serious it is.<br>就在我们即将被收购时，我们发现我们的一个员工早年签过一份协议，协议规定他所有的创意都属于那家资助他读研究生的大公司。理论上，这可能意味着我们的软件有很大一部分属于别人。所以收购戛然而止，我们努力解决这个问题。问题是，因为我们即将被收购，现金已经所剩无几。现在我们需要筹集更多资金来维持运营。但头上顶着知识产权的乌云，很难融到资，因为投资者无法判断问题的严重性。</p><p>Our existing investors, knowing that we needed money and had nowhere else to get it, at this point attempted certain gambits which I will not describe in detail, except to remind readers that the word “angel” is a metaphor. The founders thereupon proposed to walk away from the company, after giving the investors a brief tutorial on how to administer the servers themselves. And while this was happening, the acquirers used the delay as an excuse to welch on the deal.<br>我们现有的投资者知道我们需要钱，而且无处可寻，在这一点上尝试了一些策略，我不会详细描述，只是想提醒读者，“天使” 这个词是个比喻。于是，创始人提议离开公司，在那之前给投资者简单指导了一下如何自己管理服务器。就在这时，收购方以拖延为借口，拒绝履行协议。</p><p>Miraculously it all turned out ok. The investors backed down; we did another round of funding at a reasonable valuation; the giant company finally gave us a piece of paper saying they didn’t own our software; and six months later we were bought by Yahoo for much more than the earlier acquirer had agreed to pay. So we were happy in the end, though the experience probably took several years off my life.<br>奇迹般地，一切都好了起来。投资者退缩了；我们以合理的估值进行了另一轮融资；那家大公司最终给了我们一份文件，说他们不拥有我们的软件；六个月后，我们被雅虎收购，价格比之前的收购方同意支付的要高得多。所以最后我们很高兴，尽管这段经历可能让我少活了这段经历可能让我少活了好几年。</p><p>Don’t do what we did. Before you consummate a startup, ask everyone about their previous IP history.<br>不要做我们做过的事。在正式创办初创公司之前，问问每个人以前的知识产权相关经历。</p><p>Once you’ve got a company set up, it may seem presumptuous to go knocking on the doors of rich people and asking them to invest tens of thousands of dollars in something that is really just a bunch of guys with some ideas. But when you look at it from the rich people’s point of view, the picture is more encouraging. Most rich people are looking for good investments. If you really think you have a chance of succeeding, you’re doing them a favor by letting them invest. Mixed with any annoyance they might feel about being approached will be the thought: are these guys the next Google?<br>一旦你成立了公司，去敲富人的门，要求他们投资几万美元给一群只有一些想法的人，可能会显得冒昧。但从富人的角度来看，情况更令人鼓舞。大多数富人都在寻找好的投资项目。如果你真的认为自己有成功的机会，让他们投资其实是在帮他们的忙。他们在被打扰时可能会感到烦恼，但同时也会想：这些人会是下一个谷歌吗？</p><p>Usually angels are financially equivalent to founders. They get the same kind of stock and get diluted the same amount in future rounds. How much stock should they get? That depends on how ambitious you feel. When you offer x percent of your company for y dollars, you’re implicitly claiming a certain value for the whole company. Venture investments are usually described in terms of that number. If you give an investor new shares equal to 5% of those already outstanding in return for $100,000, then you’ve done the deal at a pre-money valuation of $2 million.<br>通常，天使投资者在财务上与创始人相当。他们获得相同类型的股票，在未来的融资轮次中被稀释的比例也相同。他们应该获得多少股份？这取决于你的野心有多大。当你用公司的 x% 换取 y 美元时，你含蓄地为整个公司赋予了一定的价值。风险投资通常用这个数字来描述。如果你以 10 万美元的价格向投资者发行相当于已发行股份 5% 的新股，那么这笔交易的投前估值是 200 万美元。</p><p>How do you decide what the value of the company should be? There is no rational way. At this stage the company is just a bet. I didn’t realize that when we were raising money. Julian thought we ought to value the company at several million dollars. I thought it was preposterous to claim that a couple thousand lines of code, which was all we had at the time, were worth several million dollars. Eventually we settled on one million, because Julian said no one would invest in a company with a valuation any lower. [6]<br>你如何决定公司的价值？没有合理的方法。在这个阶段，公司只是一个赌注。我们融资时，我没有意识到这一点。朱利安认为我们应该给公司估值几百万美元。我认为，声称我们当时仅有的几千行代码值几百万美元，是荒谬的。最终我们定在了 100 万美元，因为朱利安说，没有人会投资估值更低的公司。[6]</p><p>What I didn’t grasp at the time was that the valuation wasn’t just the value of the code we’d written so far. It was also the value of our ideas, which turned out to be right, and of all the future work we’d do, which turned out to be a lot.<br>当时我没有意识到的是，估值不仅仅是我们到目前为止所写代码的价值。它还包括我们创意的价值（事实证明这些创意是正确的），以及我们未来所有工作的价值（事实证明有很多）。</p><p>The next round of funding is the one in which you might deal with actual venture capital firms. But don’t wait till you’ve burned through your last round of funding to start approaching them. VCs are slow to make up their minds. They can take months. You don’t want to be running out of money while you’re trying to negotiate with them.<br>下一轮融资可能会涉及真正的风险投资公司。但不要等到上一轮资金耗尽才开始接触他们。风投做决定很慢，可能需要几个月。你不想在与他们谈判时资金耗尽。</p><p>Getting money from an actual VC firm is a bigger deal than getting money from angels. The amounts of money involved are larger, millions usually. So the deals take longer, dilute you more, and impose more onerous conditions.<br>从真正的风投公司那里获得资金，比从天使投资者那里获得资金更重要。涉及的资金数额更大，通常是数百万美元。所以交易需要更长时间，稀释你的股份更多，还会施加更苛刻的条件。</p><p>Sometimes the VCs want to install a new CEO of their own choosing. Usually the claim is that you need someone mature and experienced, with a business background. Maybe in some cases this is true. And yet Bill Gates was young and inexperienced and had no business background, and he seems to have done ok. Steve Jobs got booted out of his own company by someone mature and experienced, with a business background, who then proceeded to ruin the company. So I think people who are mature and experienced, with a business background, may be overrated. We used to call these guys “newscasters,” because they had neat hair and spoke in deep, confident voices, and generally didn’t know much more than they read on the teleprompter.<br>有时风投会想安插一个他们自己选择的新 CEO。通常他们会说，你需要一个成熟、有经验、有商业背景的人。也许在某些情况下这是对的。但比尔・盖茨年轻、缺乏经验、没有商业背景，却做得很好。史蒂夫・乔布斯被一个成熟、有经验、有商业背景的人赶出了自己的公司，而那个人随后毁了公司。所以我认为，那些成熟、有经验、有商业背景的人可能被高估了。我们过去称这些人为 “新闻播音员”，因为他们发型整齐，声音低沉自信，但通常所知不多，只知道提词器上的内容。</p><p>We talked to a number of VCs, but eventually we ended up financing our startup entirely with angel money. The main reason was that we feared a brand-name VC firm would stick us with a newscaster as part of the deal. That might have been ok if he was content to limit himself to talking to the press, but what if he wanted to have a say in running the company? That would have led to disaster, because our software was so complex. We were a company whose whole m.o. was to win through better technology. The strategic decisions were mostly decisions about technology, and we didn’t need any help with those.<br>我们和很多风投谈过，但最终我们的初创公司完全靠天使资金融资。主要原因是我们担心，知名风投公司会在交易中安插一个 “新闻播音员”。如果他满足于只和媒体打交道，也许还可以，但如果他想在公司运营中有发言权呢？那将导致灾难，因为我们的软件非常复杂。我们公司的整个模式是通过更好的技术获胜。战略决策大多是关于技术的决策，我们在这些方面不需要任何帮助。</p><p>This was also one reason we didn’t go public. Back in 1998 our CFO tried to talk me into it. In those days you could go public as a dogfood portal, so as a company with a real product and real revenues, we might have done well. But I feared it would have meant taking on a newscaster– someone who, as they say, “can talk Wall Street’s language.”<br>这也是我们不上市的一个原因。1998 年，我们的首席财务官试图说服我上市。那时候，即使是狗粮门户网站也能上市，所以作为一家有真实产品和真实收入的公司，我们可能会表现不错。但我担心这意味着要请一个 “新闻播音员”—— 也就是他们所说的 “能说华尔街语言的人”。</p><p>I’m happy to see Google is bucking that trend. They didn’t talk Wall Street’s language when they did their IPO, and Wall Street didn’t buy. And now Wall Street is collectively kicking itself. They’ll pay attention next time. Wall Street learns new languages fast when money is involved.<br>我很高兴看到谷歌在逆势而为。他们 IPO 时没有说华尔街的语言，华尔街也不买账。现在华尔街正在集体自责。下次他们会注意的。涉及金钱时，华尔街学新语言很快。</p><p>You have more leverage negotiating with VCs than you realize. The reason is other VCs. I know a number of VCs now, and when you talk to them you realize that it’s a seller’s market. Even now there is too much money chasing too few good deals.<br>与风投谈判时，你的筹码比你意识到的要多。原因是其他风投。我现在认识很多风投，和他们交谈时你会意识到，这是一个卖方市场。即使现在，也是资金太多，好交易太少。</p><p>VCs form a pyramid. At the top are famous ones like Sequoia and Kleiner Perkins, but beneath those are a huge number you’ve never heard of. What they all have in common is that a dollar from them is worth one dollar. Most VCs will tell you that they don’t just provide money, but connections and advice. If you’re talking to Vinod Khosla or John Doerr or Mike Moritz, this is true. But such advice and connections can come very expensive. And as you go down the food chain the VCs get rapidly dumber. A few steps down from the top you’re basically talking to bankers who’ve picked up a few new vocabulary words from reading Wired. (Does your product use XML?) So I’d advise you to be skeptical about claims of experience and connections. Basically, a VC is a source of money. I’d be inclined to go with whoever offered the most money the soonest with the least strings attached.<br>风投构成了一个金字塔。顶端是红杉资本、凯鹏华盈等知名公司，但在它们之下，有很多你从未听说过的公司。它们的共同点是，从它们那里得到的一美元就是一美元。大多数风投会告诉你，他们提供的不仅仅是资金，还有人脉和建议。如果你和维诺德・科斯拉、约翰・杜尔或迈克・莫里茨交谈，这是真的。但这样的建议和人脉可能非常昂贵。而且越往下，风投就越蠢。在顶端之下几步，你基本上是在和那些从《连线》杂志上学了几个新词汇的银行家交谈（你的产品用 XML 吗？）。所以我建议你对他们所说的经验和人脉持怀疑态度。基本上，风投就是资金来源。我倾向于选择那些能最快提供最多资金、附加条件最少的人。</p><p>You may wonder how much to tell VCs. And you should, because some of them may one day be funding your competitors. I think the best plan is not to be overtly secretive, but not to tell them everything either. After all, as most VCs say, they’re more interested in the people than the ideas. The main reason they want to talk about your idea is to judge you, not the idea. So as long as you seem like you know what you’re doing, you can probably keep a few things back from them. [7]<br>你可能想知道该告诉风投多少信息。你应该考虑这个问题，因为他们中的一些人有一天可能会投资你的竞争对手。我认为最好的办法是不要明显保密，但也不要告诉他们所有事情。毕竟，正如大多数风投所说，他们对人比对创意更感兴趣。他们想谈论你的创意，主要是为了评判你，而不是创意本身。所以，只要你看起来知道自己在做什么，你可能可以对他们隐瞒一些事情。[7]</p><p>Talk to as many VCs as you can, even if you don’t want their money, because a) they may be on the board of someone who will buy you, and b) if you seem impressive, they’ll be discouraged from investing in your competitors. The most efficient way to reach VCs, especially if you only want them to know about you and don’t want their money, is at the conferences that are occasionally organized for startups to present to them.<br>尽可能多地和风投交谈，即使你不想要他们的钱，因为 a）他们可能是未来收购你的公司的董事会成员，b）如果你给他们留下深刻印象，他们就不太可能投资你的竞争对手。接触风投最有效的方式，尤其是如果你只想让他们了解你而不想要他们的钱，是参加偶尔为初创公司举办的、向他们展示的会议。</p><h3 id="Not-Spending-It"><a href="#Not-Spending-It" class="headerlink" title="Not Spending It"></a><strong>Not Spending It</strong></h3><p><strong>不花钱</strong></p><p>When and if you get an infusion of real money from investors, what should you do with it? Not spend it, that’s what. In nearly every startup that fails, the proximate cause is running out of money. Usually there is something deeper wrong. But even a proximate cause of death is worth trying hard to avoid.<br>当你从投资者那里获得一笔真正的资金时，你应该怎么处理？答案是：不花。几乎每一家失败的初创公司，直接原因都是资金耗尽。通常背后有更深层次的问题。但即使是直接死因，也值得努力避免。</p><p>During the Bubble many startups tried to “get big fast.” Ideally this meant getting a lot of customers fast. But it was easy for the meaning to slide over into hiring a lot of people fast.<br>互联网泡沫时期，很多初创公司试图 “快速做大”。理想情况下，这意味着快速获得大量客户。但这很容易滑向 “快速雇佣大量员工”。</p><p>Of the two versions, the one where you get a lot of customers fast is of course preferable. But even that may be overrated. The idea is to get there first and get all the users, leaving none for competitors. But I think in most businesses the advantages of being first to market are not so overwhelmingly great. Google is again a case in point. When they appeared it seemed as if search was a mature market, dominated by big players who’d spent millions to build their brands: Yahoo, Lycos, Excite, Infoseek, Altavista, Inktomi. Surely 1998 was a little late to arrive at the party.<br>在这两种情况中，快速获得大量客户当然更可取。但即便如此，这也可能被高估了。其理念是先到先得，抢占所有用户，不给竞争对手留下任何空间。但我认为，在大多数行业中，率先进入市场的优势并没有那么巨大。谷歌又是一个例子。当谷歌出现时，搜索似乎是一个成熟的市场，由雅虎、莱科斯、Excite、Infoseek、Altavista、Inktomi 等大公司主导，它们花了数百万美元打造品牌。1998 年进入这个市场，显然有点晚了。</p><p>But as the founders of Google knew, brand is worth next to nothing in the search business. You can come along at any point and make something better, and users will gradually seep over to you. As if to emphasize the point, Google never did any advertising. They’re like dealers; they sell the stuff, but they know better than to use it themselves.<br>但谷歌的创始人知道，在搜索业务中，品牌几乎一文不值。你可以在任何时候出现，做出更好的东西，用户会逐渐向你转移。似乎是为了强调这一点，谷歌从未做过任何广告。他们就像经销商，卖东西，但自己不用。</p><p>The competitors Google buried would have done better to spend those millions improving their software. Future startups should learn from that mistake. Unless you’re in a market where products are as undifferentiated as cigarettes or vodka or laundry detergent, spending a lot on brand advertising is a sign of breakage. And few if any Web businesses are so undifferentiated. The dating sites are running big ad campaigns right now, which is all the more evidence they’re ripe for the picking. (Fee, fie, fo, fum, I smell a company run by marketing guys.)<br>被谷歌击败的竞争对手，与其花数百万美元做广告，不如花在改进软件上。未来的初创公司应该从这个错误中吸取教训。除非你所在的市场，产品像香烟、伏特加或洗衣粉一样没有差异化，否则在品牌广告上花很多钱是有问题的。而几乎没有网络业务是如此没有差异化的。现在的交友网站正在进行大规模的广告宣传，这更证明它们已经成熟到可以被颠覆了。（fee, fie, fo, fum，我闻到了一家由营销人员运营的公司的味道。）</p><p>We were compelled by circumstances to grow slowly, and in retrospect it was a good thing. The founders all learned to do every job in the company. As well as writing software, I had to do sales and customer support. At sales I was not very good. I was persistent, but I didn’t have the smoothness of a good salesman. My message to potential customers was: you’d be stupid not to sell online, and if you sell online you’d be stupid to use anyone else’s software. Both statements were true, but that’s not the way to convince people.<br>环境迫使我们缓慢成长，现在回想起来，这是件好事。创始人都学会了做公司里的每一项工作。除了写软件，我还得做销售和客户支持。我不擅长销售。我很执着，但没有优秀销售人员的圆滑。我对潜在客户说：不在线销售是愚蠢的，在线销售却用别人的软件也是愚蠢的。这两句话都是真的，但这不是说服人的方式。</p><p>I was great at customer support though. Imagine talking to a customer support person who not only knew everything about the product, but would apologize abjectly if there was a bug, and then fix it immediately, while you were on the phone with them. Customers loved us. And we loved them, because when you’re growing slow by word of mouth, your first batch of users are the ones who were smart enough to find you by themselves. There is nothing more valuable, in the early stages of a startup, than smart users. If you listen to them, they’ll tell you exactly how to make a winning product. And not only will they give you this advice for free, they’ll pay you.<br>但我很擅长客户支持。想象一下，你和一个客户支持人员交谈，他不仅对产品了如指掌，如果有 bug，还会诚恳道歉，然后在你打电话的时候立即修复。客户喜欢我们。我们也喜欢他们，因为当你靠口碑缓慢成长时，你的第一批用户是那些足够聪明、能自己找到你的人。在初创公司的早期阶段，没有什么比聪明的用户更有价值了。如果你听他们的，他们会准确地告诉你如何做出一款成功的产品。而且他们不仅会免费给你建议，还会付钱给你。</p><p>We officially launched in early 1996. By the end of that year we had about 70 users. Since this was the era of “get big fast,” I worried about how small and obscure we were. But in fact we were doing exactly the right thing. Once you get big (in users or employees) it gets hard to change your product. That year was effectively a laboratory for improving our software. By the end of it, we were so far ahead of our competitors that they never had a hope of catching up. And since all the hackers had spent many hours talking to users, we understood online commerce way better than anyone else.<br>我们在 1996 年初正式推出产品。到年底，我们大约有 70 个用户。因为那是 “快速做大” 的时代，我担心我们太小、太不起眼。但事实上，我们做的是完全正确的事。一旦你做大了（无论是用户还是员工数量），就很难改变你的产品了。那一年实际上是我们改进软件的实验室。到年底，我们已经远远领先于竞争对手，他们再也没有机会赶上我们了。而且，由于所有程序员都花了很多时间与用户交谈，我们比任何人都更了解电子商务。</p><p>That’s the key to success as a startup. There is nothing more important than understanding your business. You might think that anyone in a business must, ex officio, understand it. Far from it. Google’s secret weapon was simply that they understood search. I was working for Yahoo when Google appeared, and Yahoo didn’t understand search. I know because I once tried to convince the powers that be that we had to make search better, and I got in reply what was then the party line about it: that Yahoo was no longer a mere “search engine.” Search was now only a small percentage of our page views, less than one month’s growth, and now that we were established as a “media company,” or “portal,” or whatever we were, search could safely be allowed to wither and drop off, like an umbilical cord.<br>这是初创公司成功的关键。没有什么比理解你的业务更重要的了。你可能认为，从事一项业务的人必然会理解它。远非如此。谷歌的秘密武器很简单，就是他们理解搜索。谷歌出现时我在雅虎工作，雅虎不理解搜索。我知道这一点，因为我曾经试图说服掌权者，我们必须改进搜索，但得到的答复是当时的官方说法：雅虎不再仅仅是一个 “搜索引擎”。搜索现在只占我们页面浏览量的一小部分，还不到一个月的增长，现在我们已经成为一家 “媒体公司” 或 “门户网站” 之类的，搜索可以像脐带一样安全地枯萎脱落。</p><p>Well, a small fraction of page views they may be, but they are an important fraction, because they are the page views that Web sessions start with. I think Yahoo gets that now.<br>好吧，搜索可能只占一小部分页面浏览量，但它们是重要的一部分，因为它们是网络会话的起点。我想雅虎现在明白了。</p><p>Google understands a few other things most Web companies still don’t. The most important is that you should put users before advertisers, even though the advertisers are paying and users aren’t. One of my favorite bumper stickers reads “if the people lead, the leaders will follow.” Paraphrased for the Web, this becomes “get all the users, and the advertisers will follow.” More generally, design your product to please users first, and then think about how to make money from it. If you don’t put users first, you leave a gap for competitors who do.<br>谷歌还理解一些大多数网络公司仍然不理解的事情。最重要的是，你应该把用户放在广告商之前，即使广告商在付费而用户没有。我最喜欢的一个保险杠贴纸写着：“如果人民带头，领导者就会跟随。” 用到网络上，这就变成了：“赢得所有用户，广告商就会跟随。” 更一般地说，先设计产品取悦用户，然后再考虑如何从中赚钱。如果你不把用户放在首位，就会给那些这样做的竞争对手留下可乘之机。</p><p>To make something users love, you have to understand them. And the bigger you are, the harder that is. So I say “get big slow.” The slower you burn through your funding, the more time you have to learn.<br>要做出用户喜欢的东西，你必须理解他们。而且公司越大，理解他们就越难。所以我说 “缓慢做大”。你花光资金的速度越慢，你学习的时间就越多。</p><p>The other reason to spend money slowly is to encourage a culture of cheapness. That’s something Yahoo did understand. David Filo’s title was “Chief Yahoo,” but he was proud that his unofficial title was “Cheap Yahoo.” Soon after we arrived at Yahoo, we got an email from Filo, who had been crawling around our directory hierarchy, asking if it was really necessary to store so much of our data on expensive RAID drives. I was impressed by that. Yahoo’s market cap then was already in the billions, and they were still worrying about wasting a few gigs of disk space.<br>缓慢花钱的另一个原因是培养节俭的文化。这是雅虎确实理解的事情。大卫・费罗的头衔是 “雅虎首席”，但他很自豪自己的非官方头衔是 “吝啬的雅虎”。我们到雅虎后不久，收到了费罗的一封邮件，他一直在浏览我们的目录结构，问是否真的有必要把这么多数据存储在昂贵的 RAID 硬盘上。这给我留下了深刻印象。当时雅虎的市值已经有几十亿了，他们却还在担心浪费几 GB 的磁盘空间。</p><p>When you get a couple million dollars from a VC firm, you tend to feel rich. It’s important to realize you’re not. A rich company is one with large revenues. This money isn’t revenue. It’s money investors have given you in the hope you’ll be able to generate revenues. So despite those millions in the bank, you’re still poor.<br>当你从风投公司拿到几百万美元时，往往会觉得自己很富有。但重要的是要意识到，你并非如此。真正富有的公司是那些拥有高额收入的公司。这笔钱不是收入，而是投资者给你的，希望你能借此创造收入。所以，即便银行账户里有几百万，你依然是 “穷” 的。</p><p>For most startups the model should be grad student, not law firm. Aim for cool and cheap, not expensive and impressive. For us the test of whether a startup understood this was whether they had Aeron chairs. The Aeron came out during the Bubble and was very popular with startups. Especially the type, all too common then, that was like a bunch of kids playing house with money supplied by VCs. We had office chairs so cheap that the arms all fell off. This was slightly embarrassing at the time, but in retrospect the grad-studenty atmosphere of our office was another of those things we did right without knowing it.<br>对大多数初创公司来说，模式应该是研究生式的，而非律师事务所式的。要追求酷炫且廉价，而非昂贵且浮夸。对我们而言，判断一家初创公司是否明白这一点，要看他们是否有埃罗椅。埃罗椅在互联网泡沫时期问世，在初创公司中非常流行。尤其是那种当时随处可见的情况：一群年轻人拿着风投的钱过家家。我们的办公椅便宜到扶手都掉了。当时这有点尴尬，但现在回想起来，办公室里那种研究生般的氛围，是我们在不知不觉中做对的另一件事。</p><p>Our offices were in a wooden triple-decker in Harvard Square. It had been an apartment until about the 1970s, and there was still a claw-footed bathtub in the bathroom. It must once have been inhabited by someone fairly eccentric, because a lot of the chinks in the walls were stuffed with aluminum foil, as if to protect against cosmic rays. When eminent visitors came to see us, we were a bit sheepish about the low production values. But in fact that place was the perfect space for a startup. We felt like our role was to be impudent underdogs instead of corporate stuffed shirts, and that is exactly the spirit you want.<br>我们的办公室在哈佛广场一栋木质的三层公寓楼里。直到 20 世纪 70 年代，这里还是一套公寓，浴室里还留着一个带爪足的浴缸。这里以前的住户一定很古怪，因为墙上的很多缝隙里都塞满了铝箔，仿佛是为了防宇宙射线。当知名访客来见我们时，我们会为这种简陋的环境有点不好意思。但事实上，那个地方对初创公司来说再完美不过了。我们觉得自己是一群无畏的弱者，而非 corporate 里的刻板人士，而这正是你需要的精神。</p><p>An apartment is also the right kind of place for developing software. Cube farms suck for that, as you’ve probably discovered if you’ve tried it. Ever notice how much easier it is to hack at home than at work? So why not make work more like home?<br>公寓也是开发软件的理想场所。格子间在这方面糟透了，如果你试过的话，大概已经发现了。你有没有注意到，在家编程比在公司容易得多？那为什么不把工作场所弄得更像家呢？</p><p>When you’re looking for space for a startup, don’t feel that it has to look professional. Professional means doing good work, not elevators and glass walls. I’d advise most startups to avoid corporate space at first and just rent an apartment. You want to live at the office in a startup, so why not have a place designed to be lived in as your office?<br>为初创公司找场地时，不必觉得它必须看起来很 “专业”。专业意味着把工作做好，而不是有电梯和玻璃墙。我建议大多数初创公司一开始不要选 corporate 写字楼，租个公寓就好。在初创公司，你会想 “住” 在办公室里，那为什么不选一个设计初衷就是供人居住的地方当办公室呢？</p><p>Besides being cheaper and better to work in, apartments tend to be in better locations than office buildings. And for a startup location is very important. The key to productivity is for people to come back to work after dinner. Those hours after the phone stops ringing are by far the best for getting work done. Great things happen when a group of employees go out to dinner together, talk over ideas, and then come back to their offices to implement them. So you want to be in a place where there are a lot of restaurants around, not some dreary office park that’s a wasteland after 6:00 PM. Once a company shifts over into the model where everyone drives home to the suburbs for dinner, however late, you’ve lost something extraordinarily valuable. God help you if you actually start in that mode.<br>除了更便宜、更适合工作外，公寓的位置往往比写字楼好。对初创公司来说，位置非常重要。提高 productivity 的关键是让人们晚饭后回到工作岗位。电话不再响起的那些时间，是完成工作的最佳时段。当一群员工一起出去吃晚饭，讨论想法，然后回到办公室去实现它们时，很棒的事情就会发生。所以你会想待在一个周围有很多餐馆的地方，而不是一个下午 6 点后就变成荒地的沉闷办公园区。一旦公司变成那种模式 —— 每个人都开车回郊区吃晚饭，不管多晚 —— 你就失去了极其宝贵的东西。如果你的公司一开始就是这种模式，那可就麻烦了。</p><p>If I were going to start a startup today, there are only three places I’d consider doing it: on the Red Line near Central, Harvard, or Davis Squares (Kendall is too sterile); in Palo Alto on University or California Aves; and in Berkeley immediately north or south of campus. These are the only places I know that have the right kind of vibe.<br>如果我现在要创办一家初创公司，只会考虑三个地方：红线附近的中央广场、哈佛广场或戴维斯广场（肯德尔太刻板了）；帕洛阿尔托的大学大道或加州大道；以及伯克利校园南北附近。这些是我知道的、氛围最适合的地方。</p><p>The most important way to not spend money is by not hiring people. I may be an extremist, but I think hiring people is the worst thing a company can do. To start with, people are a recurring expense, which is the worst kind. They also tend to cause you to grow out of your space, and perhaps even move to the sort of uncool office building that will make your software worse. But worst of all, they slow you down: instead of sticking your head in someone’s office and checking out an idea with them, eight people have to have a meeting about it. So the fewer people you can hire, the better.<br>不花钱最重要的方法是不招人。我可能有点极端，但我认为招人是公司能做的最糟糕的事。首先，人力是经常性支出，这是最糟糕的一种。他们还会让你空间不够用，甚至可能搬到那种不酷的写字楼，这会让你的软件质量下降。但最糟糕的是，他们会拖慢你的速度：本来你探进别人办公室就能讨论一个想法，现在却需要八个人开个会来讨论。所以，能少招人就尽量少招。</p><p>During the Bubble a lot of startups had the opposite policy. They wanted to get “staffed up” as soon as possible, as if you couldn’t get anything done unless there was someone with the corresponding job title. That’s big company thinking. Don’t hire people to fill the gaps in some a priori org chart. The only reason to hire someone is to do something you’d like to do but can’t.<br>互联网泡沫时期，很多初创公司的做法恰恰相反。他们想尽快 “配齐人员”，仿佛除非有对应头衔的人，否则什么事都做不成。这是大公司的思维。不要为了填补某个预设的组织结构图中的空缺而招人。招人的唯一理由是，有件你想做但做不了的事需要人来做。</p><p>If hiring unnecessary people is expensive and slows you down, why do nearly all companies do it? I think the main reason is that people like the idea of having a lot of people working for them. This weakness often extends right up to the CEO. If you ever end up running a company, you’ll find the most common question people ask is how many employees you have. This is their way of weighing you. It’s not just random people who ask this; even reporters do. And they’re going to be a lot more impressed if the answer is a thousand than if it’s ten.<br>如果招不必要的人既费钱又拖慢进度，为什么几乎所有公司都这么做？我认为主要原因是，人们喜欢被很多人簇拥的感觉。这种弱点甚至会延伸到 CEO 身上。如果你最终经营一家公司，会发现人们最常问的问题是你有多少员工。这是他们衡量你的方式。不只是普通人会问，连记者也会。如果答案是 1000 人，他们会比听到 10 人时印象深刻得多。</p><p>This is ridiculous, really. If two companies have the same revenues, it’s the one with fewer employees that’s more impressive. When people used to ask me how many people our startup had, and I answered “twenty,” I could see them thinking that we didn’t count for much. I used to want to add “but our main competitor, whose ass we regularly kick, has a hundred and forty, so can we have credit for the larger of the two numbers?”<br>这其实很荒谬。如果两家公司收入相同，员工更少的那家更令人印象深刻。以前人们问我们初创公司有多少人，我回答 “20 人” 时，能看出他们觉得我们没什么分量。我曾想补充一句：“但我们主要的竞争对手 —— 我们经常打败他们 —— 有 140 人，那我们能不能按这两个数字中更大的那个算？”</p><p>As with office space, the number of your employees is a choice between seeming impressive, and being impressive. Any of you who were nerds in high school know about this choice. Keep doing it when you start a company.<br>和办公场所一样，员工数量也是一个选择：是看起来厉害，还是真的厉害。高中时是书呆子的人都懂这种选择。创办公司时，也要坚持做对的选择。</p><h3 id="Should-You"><a href="#Should-You" class="headerlink" title="Should You?"></a><strong>Should You?</strong></h3><p><strong>你适合吗？</strong></p><p>But should you start a company? Are you the right sort of person to do it? If you are, is it worth it?<br>但你应该创办公司吗？你是适合做这件事的人吗？如果是，那值得吗？</p><p>More people are the right sort of person to start a startup than realize it. That’s the main reason I wrote this. There could be ten times more startups than there are, and that would probably be a good thing.<br>适合创办初创公司的人，比他们自己意识到的要多。这是我写这篇文章的主要原因。初创公司的数量本可以是现在的十倍，而这很可能是件好事。</p><p>I was, I now realize, exactly the right sort of person to start a startup. But the idea terrified me at first. I was forced into it because I was a Lisp hacker. The company I’d been consulting for seemed to be running into trouble, and there were not a lot of other companies using Lisp. Since I couldn’t bear the thought of programming in another language (this was 1995, remember, when “another language” meant C++) the only option seemed to be to start a new company using Lisp.<br>我现在意识到，我正是那种适合创办初创公司的人。但一开始，这个想法让我很害怕。我是被迫走上这条路的，因为我是一个 Lisp 程序员。我之前做咨询的公司似乎遇到了麻烦，而其他用 Lisp 的公司不多。由于我无法忍受用其他语言编程（记住，那是 1995 年，“其他语言” 指的是 C++），似乎唯一的选择就是创办一家用 Lisp 的新公司。</p><p>I realize this sounds far-fetched, but if you’re a Lisp hacker you’ll know what I mean. And if the idea of starting a startup frightened me so much that I only did it out of necessity, there must be a lot of people who would be good at it but who are too intimidated to try.<br>我知道这听起来有点牵强，但如果你是 Lisp 程序员，就会明白我的意思。如果连我都对创办初创公司如此恐惧，只是出于无奈才做，那肯定有很多人其实很适合，但因为胆怯而不敢尝试。</p><p>So who should start a startup? Someone who is a good hacker, between about 23 and 38, and who wants to solve the money problem in one shot instead of getting paid gradually over a conventional working life.<br>那么，谁应该创办初创公司呢？应该是这样的人：一个优秀的程序员，年龄在 23 到 38 岁左右，想一次性解决金钱问题，而不是在传统职业生涯中慢慢赚钱。</p><p>I can’t say precisely what a good hacker is. At a first rate university this might include the top half of computer science majors. Though of course you don’t have to be a CS major to be a hacker; I was a philosophy major in college.<br>我说不准优秀的程序员具体是什么样的。在顶尖大学，这可能包括计算机专业排名前半的学生。当然，你不一定非得是计算机专业的才能成为程序员；我大学学的是哲学。</p><p>It’s hard to tell whether you’re a good hacker, especially when you’re young. Fortunately the process of starting startups tends to select them automatically. What drives people to start startups is (or should be) looking at existing technology and thinking, don’t these guys realize they should be doing x, y, and z? And that’s also a sign that one is a good hacker.<br>很难判断自己是不是优秀的程序员，尤其是年轻时。幸运的是，创办初创公司的过程会自动筛选出这类人。促使人们创办初创公司的（或者说应该是），是看到现有技术时会想：这些人难道没意识到应该做 x、y、z 吗？而这也是优秀程序员的标志。</p><p>I put the lower bound at 23 not because there’s something that doesn’t happen to your brain till then, but because you need to see what it’s like in an existing business before you try running your own. The business doesn’t have to be a startup. I spent a year working for a software company to pay off my college loans. It was the worst year of my adult life, but I learned, without realizing it at the time, a lot of valuable lessons about the software business. In this case they were mostly negative lessons: don’t have a lot of meetings; don’t have chunks of code that multiple people own; don’t have a sales guy running the company; don’t make a high-end product; don’t let your code get too big; don’t leave finding bugs to QA people; don’t go too long between releases; don’t isolate developers from users; don’t move from Cambridge to Route 128; and so on. [8] But negative lessons are just as valuable as positive ones. Perhaps even more valuable: it’s hard to repeat a brilliant performance, but it’s straightforward to avoid errors. [9]<br>我把下限设在 23 岁，不是因为大脑到那时才发育完全，而是因为在尝试经营自己的公司之前，你需要了解现有企业是什么样的。这家企业不一定是初创公司。我曾在一家软件公司工作过一年，以还清大学贷款。那是我成年后最糟糕的一年，但当时我没有意识到，我学到了很多关于软件行业的宝贵经验。在这件事上，大多是反面教训：不要开太多会；不要让代码块被多个人 “拥有”；不要让销售来管理公司；不要做高端产品；不要让代码变得太大；不要把找 bug 的事留给 QA 人员；不要隔太久才发布一次；不要让开发者与用户隔绝；不要从剑桥搬到 128 号公路；等等。[8] 但反面教训和正面教训同样有价值。或许更有价值：重复一次精彩的表现很难，但避免错误却很简单。[9]</p><p>The other reason it’s hard to start a company before 23 is that people won’t take you seriously. VCs won’t trust you, and will try to reduce you to a mascot as a condition of funding. Customers will worry you’re going to flake out and leave them stranded. Even you yourself, unless you’re very unusual, will feel your age to some degree; you’ll find it awkward to be the boss of someone much older than you, and if you’re 21, hiring only people younger rather limits your options.<br>23 岁之前很难创办公司的另一个原因是，人们不会把你当回事。风投不会信任你，甚至会把让你当 “吉祥物” 作为投资条件。客户会担心你半途而废，让他们陷入困境。即使是你自己，除非你非常特别，否则多少会在意自己的年龄；你会觉得当比你大很多的人的老板很尴尬，而且如果你 21 岁，只招比你年轻的人会极大限制你的选择。</p><p>Some people could probably start a company at 18 if they wanted to. Bill Gates was 19 when he and Paul Allen started Microsoft. (Paul Allen was 22, though, and that probably made a difference.) So if you’re thinking, I don’t care what he says, I’m going to start a company now, you may be the sort of person who could get away with it.<br>有些人如果愿意，18 岁可能就能创办公司。比尔・盖茨和保罗・艾伦创办微软时，盖茨 19 岁（不过艾伦 22 岁，这可能很重要）。所以如果你想：“不管他说什么，我现在就要创办公司”，那你可能是那种能成功的人。</p><p>The other cutoff, 38, has a lot more play in it. One reason I put it there is that I don’t think many people have the physical stamina much past that age. I used to work till 2:00 or 3:00 AM every night, seven days a week. I don’t know if I could do that now.<br>另一个界限 38 岁，则有更多可弹性处理的空间。我把它设在那里的一个原因是，我认为很多人过了这个年龄，体力就跟不上了。我以前每周七天，每天都工作到凌晨两三点。现在我不知道自己还能不能做到。</p><p>Also, startups are a big risk financially. If you try something that blows up and leaves you broke at 26, big deal; a lot of 26 year olds are broke. By 38 you can’t take so many risks– especially if you have kids.<br>此外，初创公司在财务上风险很大。如果你 26 岁时尝试创业失败，身无分文，没什么大不了的；很多 26 岁的人都没钱。到了 38 岁，你就不能冒这么多险了 —— 尤其是如果你有孩子的话。</p><p>My final test may be the most restrictive. Do you actually want to start a startup? What it amounts to, economically, is compressing your working life into the smallest possible space. Instead of working at an ordinary rate for 40 years, you work like hell for four. And maybe end up with nothing– though in that case it probably won’t take four years.<br>我最后的测试可能是最严格的：你真的想创办初创公司吗？从经济角度来说，这相当于把你的职业生涯压缩到尽可能小的空间里。不是以普通节奏工作 40 年，而是拼命工作 4 年。而且可能最终一无所获 —— 不过那样的话，可能也用不了 4 年。</p><p>During this time you’ll do little but work, because when you’re not working, your competitors will be. My only leisure activities were running, which I needed to do to keep working anyway, and about fifteen minutes of reading a night. I had a girlfriend for a total of two months during that three year period. Every couple weeks I would take a few hours off to visit a used bookshop or go to a friend’s house for dinner. I went to visit my family twice. Otherwise I just worked.<br>在这段时间里，你几乎只会工作，因为当你不工作时，你的竞争对手会在工作。我唯一的休闲活动是跑步（不管怎样，我需要跑步来保持工作状态），以及每晚大约 15 分钟的阅读。在那三年里，我交过一次女朋友，总共持续了两个月。每隔几周，我会抽出几个小时去旧书店，或者去朋友家吃晚饭。我去看望过家人两次。除此之外，我一直在工作。</p><p>Working was often fun, because the people I worked with were some of my best friends. Sometimes it was even technically interesting. But only about 10% of the time. The best I can say for the other 90% is that some of it is funnier in hindsight than it seemed then. Like the time the power went off in Cambridge for about six hours, and we made the mistake of trying to start a gasoline powered generator inside our offices. I won’t try that again.<br>工作有时很有趣，因为和我一起工作的人是我最好的朋友中的几个。有时在技术上也很有趣。但这只占大约 10% 的时间。对于另外 90% 的时间，我能说的最好的是，其中一些现在回想起来比当时看起来更有趣。比如有一次，剑桥停电了大约六个小时，我们犯了个错误，试图在办公室里启动一台汽油发电机。我再也不会那么做了。</p><p>I don’t think the amount of bullshit you have to deal with in a startup is more than you’d endure in an ordinary working life. It’s probably less, in fact; it just seems like a lot because it’s compressed into a short period. So mainly what a startup buys you is time. That’s the way to think about it if you’re trying to decide whether to start one. If you’re the sort of person who would like to solve the money problem once and for all instead of working for a salary for 40 years, then a startup makes sense.<br>我认为在初创公司里，你要处理的烦心事并不比在普通工作中多。事实上，可能更少；只是因为被压缩在短时间内，所以显得很多。所以，初创公司主要给你带来的是时间。如果你在考虑是否要创办一家初创公司，可以这样想：如果你是那种想一次性解决金钱问题，而不是靠工资工作 40 年的人，那么创办初创公司是有意义的。</p><p>For a lot of people the conflict is between startups and graduate school. Grad students are just the age, and just the sort of people, to start software startups. You may worry that if you do you’ll blow your chances of an academic career. But it’s possible to be part of a startup and stay in grad school, especially at first. Two of our three original hackers were in grad school the whole time, and both got their degrees. There are few sources of energy so powerful as a procrastinating grad student.<br>对很多人来说，冲突在于初创公司和研究生院之间。研究生的年龄和特质，正好适合创办软件初创公司。你可能担心，如果你这么做了，会毁掉学术生涯的机会。但加入初创公司的同时留在研究生院是可能的，尤其是在初期。我们最初的三个程序员中，有两个一直在读研究生，而且都拿到了学位。拖延的研究生身上蕴含的能量，几乎没有什么能比得上。</p><p>If you do have to leave grad school, in the worst case it won’t be for too long. If a startup fails, it will probably fail quickly enough that you can return to academic life. And if it succeeds, you may find you no longer have such a burning desire to be an assistant professor.<br>如果你确实不得不离开研究生院，最坏的情况是，离开的时间不会太长。如果初创公司失败了，很可能会失败得很快，你可以回到学术生活中去。如果成功了，你可能会发现，自己不再那么渴望成为一名助理教授了。</p><p>If you want to do it, do it. Starting a startup is not the great mystery it seems from outside. It’s not something you have to know about “business” to do. Build something users love, and spend less than you make. How hard is that?<br>如果你想做，就去做吧。创办初创公司并不像外界看起来那么神秘。你不需要懂 “商业” 才能做。做出用户喜欢的东西，并且支出少于收入。这有那么难吗？</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] Google’s revenues are about two billion a year, but half comes from ads on other sites.<br>[1] 谷歌每年的收入约为 20 亿美元，但其中一半来自其他网站上的广告。</p><p>[2] One advantage startups have over established companies is that there are no discrimination laws about starting businesses. For example, I would be reluctant to start a startup with a woman who had small children, or was likely to have them soon. But you’re not allowed to ask prospective employees if they plan to have kids soon. Believe it or not, under current US law, you’re not even allowed to discriminate on the basis of intelligence. Whereas when you’re starting a company, you can discriminate on any basis you want about who you start it with.<br>[2] 初创公司相对于成熟企业的一个优势是，创办企业时没有反歧视法的限制。例如，我不愿意和有小孩或即将有小孩的女性一起创办初创公司。但你不能询问潜在员工是否计划近期生孩子。信不信由你，根据美国现行法律，你甚至不能以智力为由进行歧视。然而，在创办公司时，你可以根据任何你想要的标准来选择合作伙伴。</p><p>[3] Learning to hack is a lot cheaper than business school, because you can do it mostly on your own. For the price of a Linux box, a copy of K&amp;R, and a few hours of advice from your neighbor’s fifteen year old son, you’ll be well on your way.<br>[3] 学编程比读商学院便宜得多，因为大部分可以自学。买一台 Linux 电脑、一本《C 程序设计语言》（K&amp;R），再让邻居 15 岁的儿子给你提点几小时建议，你就差不多入门了。</p><p>[4] Corollary: Avoid starting a startup to sell things to the biggest company of all, the government. Yes, there are lots of opportunities to sell them technology. But let someone else start those startups.<br>[4] 推论：避免创办向最大的 “公司”—— 政府 —— 销售产品的初创公司。诚然，向政府出售技术有很多机会，但让别人去创办这类公司吧。</p><p>[5] A friend who started a company in Germany told me they do care about the paperwork there, and that there’s more of it. Which helps explain why there are not more startups in Germany.<br>[5] 一个在德国创办公司的朋友告诉我，那里的人很在意文书工作，而且这类工作特别多。这也在一定程度上解释了为什么德国的初创公司没有那么多。</p><p>[6] At the seed stage our valuation was in principle $100,000, because Julian got 10% of the company. But this is a very misleading number, because the money was the least important of the things Julian gave us.<br>[6] 在种子轮，我们公司的估值原则上是 10 万美元，因为朱利安获得了公司 10% 的股份。但这个数字非常有误导性，因为钱是朱利安给我们的所有东西中最不重要的。</p><p>[7] The same goes for companies that seem to want to acquire you. There will be a few that are only pretending to in order to pick your brains. But you can never tell for sure which these are, so the best approach is to seem entirely open, but to fail to mention a few critical technical secrets.<br>[7] 这一点也适用于那些似乎想收购你的公司。有些公司可能只是假装收购，实则想窃取你的想法。但你永远无法确定哪些是这样的公司，所以最好的做法是表面上完全坦诚，却对几个关键技术秘密避而不谈。</p><p>[8] I was as bad an employee as this place was a company. I apologize to anyone who had to work with me there.<br>[8] 当年我待的那家公司很糟糕，而我作为员工也一样差劲。我向所有曾和我在那里共事过的人道歉。</p><p>[9] You could probably write a book about how to succeed in business by doing everything in exactly the opposite way from the DMV.<br>[9] 你大概可以写一本书，主题是 “如何通过做与车管所（DMV）完全相反的事来在商业上取得成功”。</p><p>Thanks to Trevor Blackwell, Sarah Harlin, Jessica Livingston, and Robert Morris for reading drafts of this essay, and to Steve Melendez and Gregory Price for inviting me to speak.<br>感谢特雷弗・布莱克韦尔、萨拉・哈林、杰西卡・利文斯顿和罗伯特・莫里斯阅读本文草稿，也感谢史蒂夫・梅伦德斯和格雷戈里・普莱斯邀请我做这次演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优秀的黑客</title>
    <link href="/2025/08/19/great-hackers/"/>
    <url>/2025/08/19/great-hackers/</url>
    
    <content type="html"><![CDATA[<h1 id="Great-Hackers"><a href="#Great-Hackers" class="headerlink" title="Great Hackers"></a>Great Hackers</h1><p>原文链接: <a href="https://paulgraham.com/gh.html">https://paulgraham.com/gh.html</a></p><p>July 2004</p><p>(This essay is derived from a talk at Oscon 2004.)<br>（本文改编自 2004 年在 Oscon 大会上的演讲。）</p><p>A few months ago I finished a new book, and in reviews I keep noticing words like “provocative’’ and “controversial.’’ To say nothing of “idiotic.’’<br>几个月前我完成了一本新书，在书评中，我总能看到 “挑衅性的”“有争议的” 这类词，更别提 “愚蠢的” 了。</p><p>I didn’t mean to make the book controversial. I was trying to make it efficient. I didn’t want to waste people’s time telling them things they already knew. It’s more efficient just to give them the diffs. But I suppose that’s bound to yield an alarming book.<br>我并非有意让这本书引发争议，只是想让它更高效 —— 不想浪费读者的时间去讲他们已经知道的事，直接给出 “差异点” 会更高效。但我猜，这样写难免会让书显得 “扎眼”。</p><h3 id="Edisons"><a href="#Edisons" class="headerlink" title="Edisons"></a><strong>Edisons</strong></h3><p><strong>爱迪生们</strong></p><p>There’s no controversy about which idea is most controversial: the suggestion that variation in wealth might not be as big a problem as we think.<br>书中最具争议的观点毫无争议：财富差异或许没我们想的那么大问题。</p><p>I didn’t say in the book that variation in wealth was in itself a good thing. I said in some situations it might be a sign of good things. A throbbing headache is not a good thing, but it can be a sign of a good thing– for example, that you’re recovering consciousness after being hit on the head.<br>我在书中并没有说财富差异本身是好事，而是说在某些情况下，它可能是好事的信号。剧烈头痛不是好事，但它可能意味着好事 —— 比如，你头部受击后正在恢复意识。</p><p>Variation in wealth can be a sign of variation in productivity. (In a society of one, they’re identical.) And that is almost certainly a good thing: if your society has no variation in productivity, it’s probably not because everyone is Thomas Edison. It’s probably because you have no Thomas Edisons.<br>财富差异可能是生产力差异的体现（在只有一个人的社会里，两者是一回事）。而生产力差异几乎肯定是好事：如果一个社会的生产力毫无差异，大概率不是因为每个人都是托马斯・爱迪生，而是因为根本没有爱迪生那样的人。</p><p>In a low-tech society you don’t see much variation in productivity. If you have a tribe of nomads collecting sticks for a fire, how much more productive is the best stick gatherer going to be than the worst? A factor of two? Whereas when you hand people a complex tool like a computer, the variation in what they can do with it is enormous.<br>在低技术社会，生产力差异不大。如果有一群游牧部落的人捡柴生火，最能干的捡柴人比最差的能强多少？两倍？但当你给人们一台像电脑这样复杂的工具时，他们用它能做出的成果差异就大得惊人了。</p><p>That’s not a new idea. Fred Brooks wrote about it in 1974, and the study he quoted was published in 1968. But I think he underestimated the variation between programmers. He wrote about productivity in lines of code: the best programmers can solve a given problem in a tenth the time. But what if the problem isn’t given? In programming, as in many fields, the hard part isn’t solving problems, but deciding what problems to solve. Imagination is hard to measure, but in practice it dominates the kind of productivity that’s measured in lines of code.<br>这不是什么新观点。弗雷德・布鲁克斯在 1974 年就写过相关内容，他引用的研究发表于 1968 年。但我觉得他低估了程序员之间的差异。他用代码行数衡量生产力：最优秀的程序员解决特定问题的时间是其他人的十分之一。但如果问题不是 “给定的” 呢？在编程领域，和许多其他领域一样，难的不是解决问题，而是决定要解决什么问题。想象力难以衡量，但实际上，它对生产力的影响远超过代码行数这种衡量方式。</p><p>Productivity varies in any field, but there are few in which it varies so much. The variation between programmers is so great that it becomes a difference in kind. I don’t think this is something intrinsic to programming, though. In every field, technology magnifies differences in productivity. I think what’s happening in programming is just that we have a lot of technological leverage. But in every field the lever is getting longer, so the variation we see is something that more and more fields will see as time goes on. And the success of companies, and countries, will depend increasingly on how they deal with it.<br>任何领域都存在生产力差异，但很少有领域的差异大到这种程度。程序员之间的差异如此显著，甚至成了 “质” 的不同。不过我不认为这是编程本身固有的特性。在所有领域，技术都会放大生产力差异。编程领域的情况只是因为我们拥有强大的技术杠杆。但每个领域的 “杠杆” 都在变长，所以这种差异会随着时间推移出现在越来越多的领域。公司乃至国家的成功，将越来越取决于它们如何应对这种差异。</p><p>If variation in productivity increases with technology, then the contribution of the most productive individuals will not only be disproportionately large, but will actually grow with time. When you reach the point where 90% of a group’s output is created by 1% of its members, you lose big if something (whether Viking raids, or central planning) drags their productivity down to the average.<br>如果生产力差异随技术发展而扩大，那么最高效个体的贡献不仅会大得不成比例，还会随时间增长。当一个群体 90% 的产出来自 1% 的成员时，若有什么因素（无论是维京人的劫掠，还是中央计划）把这些人的生产力拉到平均水平，损失就太大了。</p><p>If we want to get the most out of them, we need to understand these especially productive people. What motivates them? What do they need to do their jobs? How do you recognize them? How do you get them to come and work for you? And then of course there’s the question, how do you become one?<br>如果想充分发挥他们的潜力，我们需要理解这些高效个体：他们的动力是什么？工作需要什么条件？如何识别他们？如何让他们来为你工作？当然，还有一个问题：如何成为他们中的一员？</p><h3 id="More-than-Money"><a href="#More-than-Money" class="headerlink" title="More than Money"></a><strong>More than Money</strong></h3><p><strong>不止是钱</strong></p><p>I know a handful of super-hackers, so I sat down and thought about what they have in common. Their defining quality is probably that they really love to program. Ordinary programmers write code to pay the bills. Great hackers think of it as something they do for fun, and which they’re delighted to find people will pay them for.<br>我认识几个超级黑客，于是坐下来思考他们的共同点。他们最显著的特质或许是真心热爱编程。普通程序员写代码是为了谋生，而优秀的黑客则视编程为乐趣，能靠这个赚钱还让他们很开心。</p><p>Great programmers are sometimes said to be indifferent to money. This isn’t quite true. It is true that all they really care about is doing interesting work. But if you make enough money, you get to work on whatever you want, and for that reason hackers are attracted by the idea of making really large amounts of money. But as long as they still have to show up for work every day, they care more about what they do there than how much they get paid for it.<br>人们有时说优秀的程序员对金钱漠不关心，这并不完全对。他们确实只在乎做有趣的工作，但如果你赚了足够多的钱，就能做任何想做的事 —— 因此黑客们其实也向往赚大钱。但只要还得每天上班，他们就更在乎工作内容，而非报酬多少。</p><p>Economically, this is a fact of the greatest importance, because it means you don’t have to pay great hackers anything like what they’re worth. A great programmer might be ten or a hundred times as productive as an ordinary one, but he’ll consider himself lucky to get paid three times as much. As I’ll explain later, this is partly because great hackers don’t know how good they are. But it’s also because money is not the main thing they want.<br>从经济角度看，这一点极其重要：你不必按优秀黑客的实际价值付薪。一个优秀程序员的生产力可能是普通程序员的 10 倍甚至 100 倍，但如果能拿到 3 倍工资，他就觉得很幸运了。后面我会解释，部分原因是优秀黑客不知道自己有多厉害，更重要的是，钱不是他们最想要的。</p><p>What do hackers want? Like all craftsmen, hackers like good tools. In fact, that’s an understatement. Good hackers find it unbearable to use bad tools. They’ll simply refuse to work on projects with the wrong infrastructure.<br>黑客想要什么？和所有工匠一样，他们喜欢好工具。其实这么说都太保守了。优秀的黑客无法忍受用烂工具，遇到基础设施不行的项目，他们会直接拒绝参与。</p><p>At a startup I once worked for, one of the things pinned up on our bulletin board was an ad from IBM. It was a picture of an AS400, and the headline read, I think, “hackers despise it.’’ [1]<br>我曾工作过的一家创业公司，布告栏上贴过一张 IBM 的广告，上面是 AS400 的图片，标题我记得是 “黑客鄙视它”。[1]</p><p>When you decide what infrastructure to use for a project, you’re not just making a technical decision. You’re also making a social decision, and this may be the more important of the two. For example, if your company wants to write some software, it might seem a prudent choice to write it in Java. But when you choose a language, you’re also choosing a community. The programmers you’ll be able to hire to work on a Java project won’t be as smart as the ones you could get to work on a project written in Python. And the quality of your hackers probably matters more than the language you choose. Though, frankly, the fact that good hackers prefer Python to Java should tell you something about the relative merits of those languages.<br>为项目选择基础设施时，你不只是做技术决策，更是在做社会决策 —— 后者可能更重要。比如，公司要开发软件，用 Java 似乎是稳妥的选择。但选择编程语言时，你也在选择一个社区。能雇来做 Java 项目的程序员，可能不如能雇来做 Python 项目的聪明。而黑客的质量，可能比编程语言的选择更重要。不过说实话，优秀黑客更喜欢 Python 而非 Java，这本身就说明了两种语言的相对优劣。</p><p>Business types prefer the most popular languages because they view languages as standards. They don’t want to bet the company on Betamax. The thing about languages, though, is that they’re not just standards. If you have to move bits over a network, by all means use TCP&#x2F;IP. But a programming language isn’t just a format. A programming language is a medium of expression.<br>商界人士喜欢最流行的语言，因为他们视语言为标准，不想把公司押在 “Beta 制大尺寸磁带”（指小众标准）上。但语言不只是标准。如果要在网络上传输数据，用 TCP&#x2F;IP 没问题，但编程语言不只是一种格式，它是一种表达媒介。</p><p>I’ve read that Java has just overtaken Cobol as the most popular language. As a standard, you couldn’t wish for more. But as a medium of expression, you could do a lot better. Of all the great programmers I can think of, I know of only one who would voluntarily program in Java. And of all the great programmers I can think of who don’t work for Sun, on Java, I know of zero.<br>我看到报道说 Java 刚超过 Cobol 成为最流行的语言。作为标准，它无可挑剔，但作为表达媒介，还有很大提升空间。在我能想到的所有优秀程序员中，只有一个人会自愿用 Java 编程。而在那些不为 Sun 公司工作、不做 Java 相关项目的优秀程序员里，这个数字是零。</p><p>Great hackers also generally insist on using open source software. Not just because it’s better, but because it gives them more control. Good hackers insist on control. This is part of what makes them good hackers: when something’s broken, they need to fix it. You want them to feel this way about the software they’re writing for you. You shouldn’t be surprised when they feel the same way about the operating system.<br>优秀的黑客通常还坚持用开源软件，不仅因为开源更好，还因为它能给他们更多控制权。优秀的黑客执着于掌控 —— 这也是他们优秀的原因之一：东西坏了，他们就得修好。你希望他们对给你写的软件有这种态度，那么他们对操作系统有同样的态度，也不足为奇。</p><p>A couple years ago a venture capitalist friend told me about a new startup he was involved with. It sounded promising. But the next time I talked to him, he said they’d decided to build their software on Windows NT, and had just hired a very experienced NT developer to be their chief technical officer. When I heard this, I thought, these guys are doomed. One, the CTO couldn’t be a first rate hacker, because to become an eminent NT developer he would have had to use NT voluntarily, multiple times, and I couldn’t imagine a great hacker doing that; and two, even if he was good, he’d have a hard time hiring anyone good to work for him if the project had to be built on NT. [2]<br>几年前，一个风投朋友跟我说他参与的一家新创业公司，听起来很有前景。但下次见面时，他说他们决定基于 Windows NT 开发软件，还雇了一个经验丰富的 NT 开发者当首席技术官。我一听就觉得，这公司完了。一来，这个 CTO 不可能是一流黑客 —— 要成为知名的 NT 开发者，就得自愿多次使用 NT，而我无法想象优秀的黑客会这么做；二来，就算他很厉害，项目要基于 NT 开发，也很难招到优秀的人。[2]</p><h3 id="The-Final-Frontier"><a href="#The-Final-Frontier" class="headerlink" title="The Final Frontier"></a><strong>The Final Frontier</strong></h3><p><strong>最后的前沿</strong></p><p>After software, the most important tool to a hacker is probably his office. Big companies think the function of office space is to express rank. But hackers use their offices for more than that: they use their office as a place to think in. And if you’re a technology company, their thoughts are your product. So making hackers work in a noisy, distracting environment is like having a paint factory where the air is full of soot.<br>除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公空间的作用是彰显等级，但黑客对办公室的使用不止于此 —— 他们把办公室当作思考的地方。如果你是科技公司，他们的想法就是你的产品。所以让黑客在嘈杂、易分心的环境中工作，就像在油漆厂让空气里满是煤烟。</p><p>The cartoon strip Dilbert has a lot to say about cubicles, and with good reason. All the hackers I know despise them. The mere prospect of being interrupted is enough to prevent hackers from working on hard problems. If you want to get real work done in an office with cubicles, you have two options: work at home, or come in early or late or on a weekend, when no one else is there. Don’t companies realize this is a sign that something is broken? An office environment is supposed to be something that helps you work, not something you work despite.<br>漫画《呆伯特》里对隔间有很多吐槽，这是有道理的。我认识的所有黑客都鄙视隔间。仅仅是可能被打扰，就足以让黑客无法解决难题。如果想在有隔间的办公室里真正完成工作，只有两个选择：在家工作，或者在其他人不在的时候（早到、晚走、周末）来公司。公司难道没意识到这说明哪里出问题了吗？办公环境本该是助力工作的，而不是需要克服的障碍。</p><p>Companies like Cisco are proud that everyone there has a cubicle, even the CEO. But they’re not so advanced as they think; obviously they still view office space as a badge of rank. Note too that Cisco is famous for doing very little product development in house. They get new technology by buying the startups that created it– where presumably the hackers did have somewhere quiet to work.<br>像思科这样的公司，会为 “包括 CEO 在内所有人都用隔间” 而自豪，但他们并没有自己想的那么先进 —— 显然他们仍把办公空间当作等级的象征。还要注意，思科以很少在内部做产品开发闻名，他们通过收购创造新技术的创业公司来获取技术 —— 而那些创业公司里的黑客，想必有安静的地方工作。</p><p>One big company that understands what hackers need is Microsoft. I once saw a recruiting ad for Microsoft with a big picture of a door. Work for us, the premise was, and we’ll give you a place to work where you can actually get work done. And you know, Microsoft is remarkable among big companies in that they are able to develop software in house. Not well, perhaps, but well enough.<br>有一家大公司懂黑客的需求，那就是微软。我曾见过微软的招聘广告，上面是一扇门的大图，大意是：来为我们工作，我们给你一个能真正完成工作的地方。要知道，在大公司里，微软能在内部开发软件是很厉害的 —— 或许做得不算顶尖，但足够好了。</p><p>If companies want hackers to be productive, they should look at what they do at home. At home, hackers can arrange things themselves so they can get the most done. And when they work at home, hackers don’t work in noisy, open spaces; they work in rooms with doors. They work in cosy, neighborhoody places with people around and somewhere to walk when they need to mull something over, instead of in glass boxes set in acres of parking lots. They have a sofa they can take a nap on when they feel tired, instead of sitting in a coma at their desk, pretending to work. There’s no crew of people with vacuum cleaners that roars through every evening during the prime hacking hours. There are no meetings or, God forbid, corporate retreats or team-building exercises. And when you look at what they’re doing on that computer, you’ll find it reinforces what I said earlier about tools. They may have to use Java and Windows at work, but at home, where they can choose for themselves, you’re more likely to find them using Perl and Linux.<br>如果公司想让黑客高效工作，应该看看他们在家怎么做。在家时，黑客会自己安排环境以高效工作：他们不在嘈杂的开放空间工作，而是在带门的房间；在舒适、有邻里感的地方工作，周围有人，想琢磨事情时能散步，而不是在停车场环绕的玻璃盒子里；累了能在沙发上小睡，而不是在办公桌前昏昏沉沉地假装工作；没有清洁工在晚上的黄金编程时间轰隆隆地用吸尘器；没有会议，更别提公司团建或拓展了。再看他们在家用电脑做什么，会印证我之前说的工具问题：他们在工作中可能不得不使用 Java 和 Windows，但在家能自主选择时，更可能用 Perl 和 Linux。</p><p>Indeed, these statistics about Cobol or Java being the most popular language can be misleading. What we ought to look at, if we want to know what tools are best, is what hackers choose when they can choose freely– that is, in projects of their own. When you ask that question, you find that open source operating systems already have a dominant market share, and the number one language is probably Perl.<br>其实，Cobol 或 Java 是最流行语言的统计数据可能有误导性。如果想知道什么工具最好，应该看黑客在能自由选择时 —— 也就是在自己的项目中 —— 会选什么。这时你会发现，开源操作系统已占据主导地位，而最受欢迎的语言可能是 Perl。</p><h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a><strong>Interesting</strong></h3><p><strong>有趣的事</strong></p><p>Along with good tools, hackers want interesting projects. What makes a project interesting? Well, obviously overtly sexy applications like stealth planes or special effects software would be interesting to work on. But any application can be interesting if it poses novel technical challenges. So it’s hard to predict which problems hackers will like, because some become interesting only when the people working on them discover a new kind of solution. Before ITA (who wrote the software inside Orbitz), the people working on airline fare searches probably thought it was one of the most boring applications imaginable. But ITA made it interesting by redefining the problem in a more ambitious way.<br>除了好工具，黑客还想要有趣的项目。什么让项目有趣？显然，像隐形飞机或特效软件这样 “酷炫” 的应用会很有趣，但任何应用只要有新颖的技术挑战，就可能变得有趣。所以很难预测黑客会喜欢什么问题，因为有些问题只有在解决者找到新解法时才变得有趣。在 ITA（Orbitz 的内部软件开发者）之前，做机票价格搜索的人可能觉得这是最无聊的应用之一，但 ITA 通过更有野心地重新定义问题，让它变得有趣了。</p><p>I think the same thing happened at Google. When Google was founded, the conventional wisdom among the so-called portals was that search was boring and unimportant. But the guys at Google didn’t think search was boring, and that’s why they do it so well.<br>谷歌的情况也类似。谷歌成立时，所谓的门户网站普遍认为搜索既无聊又不重要，但谷歌的人不觉得搜索无聊，所以他们才能做得这么好。</p><p>This is an area where managers can make a difference. Like a parent saying to a child, I bet you can’t clean up your whole room in ten minutes, a good manager can sometimes redefine a problem as a more interesting one. Steve Jobs seems to be particularly good at this, in part simply by having high standards. There were a lot of small, inexpensive computers before the Mac. He redefined the problem as: make one that’s beautiful. And that probably drove the developers harder than any carrot or stick could.<br>这是管理者能发挥作用的地方。就像家长对孩子说 “我打赌你十分钟内收拾不好整个房间”，优秀的管理者有时能把问题重新定义得更有趣。史蒂夫・乔布斯在这方面尤其擅长，部分原因是他标准极高。在 Mac 之前，有很多小型廉价电脑，他把问题重新定义为 “做一台漂亮的电脑”，这对开发者的驱动力可能比任何奖惩都强。</p><p>They certainly delivered. When the Mac first appeared, you didn’t even have to turn it on to know it would be good; you could tell from the case. A few weeks ago I was walking along the street in Cambridge, and in someone’s trash I saw what appeared to be a Mac carrying case. I looked inside, and there was a Mac SE. I carried it home and plugged it in, and it booted. The happy Macintosh face, and then the finder. My God, it was so simple. It was just like … Google.<br>他们确实做到了。Mac 刚出现时，甚至不用开机就知道它很棒，从外壳就能看出来。几周前我在剑桥的街上走，在别人的垃圾桶里看到一个像是 Mac 的包，打开一看是一台 Mac SE。我带回家插上电，它启动了 —— 出现了苹果的笑脸，然后是 finder 界面。天啊，太简单了，就像…… 谷歌。</p><p>Hackers like to work for people with high standards. But it’s not enough just to be exacting. You have to insist on the right things. Which usually means that you have to be a hacker yourself. I’ve seen occasional articles about how to manage programmers. Really there should be two articles: one about what to do if you are yourself a programmer, and one about what to do if you’re not. And the second could probably be condensed into two words: give up.<br>黑客喜欢为高标准的人工作，但光严格还不够，必须坚持对的事 —— 这通常意味着你自己也得是黑客。我偶尔会看到关于 “如何管理程序员” 的文章，其实应该分两篇：一篇给本身是程序员的管理者，一篇给不是的。后者或许可以浓缩成两个字：放弃。</p><p>The problem is not so much the day to day management. Really good hackers are practically self-managing. The problem is, if you’re not a hacker, you can’t tell who the good hackers are. A similar problem explains why American cars are so ugly. I call it the design paradox. You might think that you could make your products beautiful just by hiring a great designer to design them. But if you yourself don’t have good taste, how are you going to recognize a good designer? By definition you can’t tell from his portfolio. And you can’t go by the awards he’s won or the jobs he’s had, because in design, as in most fields, those tend to be driven by fashion and schmoozing, with actual ability a distant third. There’s no way around it: you can’t manage a process intended to produce beautiful things without knowing what beautiful is. American cars are ugly because American car companies are run by people with bad taste.<br>问题不在于日常管理 —— 真正优秀的黑客几乎能自我管理。问题是，如果你不是黑客，就无法识别谁是优秀的黑客。类似的问题解释了为什么美国车这么丑，我称之为 “设计悖论”。你可能觉得雇个伟大的设计师就能做出漂亮的产品，但如果你自己审美不行，怎么识别优秀的设计师？按理说，你从他的作品集里看不出来，也不能看他得过什么奖或做过什么工作 —— 因为在设计领域，和多数领域一样，这些往往由潮流和人脉驱动，实际能力排第三。没办法：如果不知道 “美” 是什么，就无法管理一个旨在产出美的过程。美国车丑，是因为美国汽车公司的管理者审美差。</p><p>Many people in this country think of taste as something elusive, or even frivolous. It is neither. To drive design, a manager must be the most demanding user of a company’s products. And if you have really good taste, you can, as Steve Jobs does, make satisfying you the kind of problem that good people like to work on.<br>这个国家很多人认为审美难以捉摸，甚至无关紧要，其实都不是。要推动设计，管理者必须是公司产品最挑剔的用户。如果你真的很有审美，就能像乔布斯那样，让 “满足你” 成为优秀人才愿意为之努力的问题。</p><h3 id="Nasty-Little-Problems"><a href="#Nasty-Little-Problems" class="headerlink" title="Nasty Little Problems"></a><strong>Nasty Little Problems</strong></h3><p><strong>讨厌的小问题</strong></p><p>It’s pretty easy to say what kinds of problems are not interesting: those where instead of solving a few big, clear, problems, you have to solve a lot of nasty little ones. One of the worst kinds of projects is writing an interface to a piece of software that’s full of bugs. Another is when you have to customize something for an individual client’s complex and ill-defined needs. To hackers these kinds of projects are the death of a thousand cuts.<br>很容易说哪些问题不有趣：不是解决几个大而清晰的问题，而是要解决一堆讨厌的小问题。最糟糕的项目之一是给充满漏洞的软件写接口，另一个是为个别客户复杂且模糊的需求定制东西。对黑客来说，这类项目是 “千刀万剐” 式的折磨。</p><p>The distinguishing feature of nasty little problems is that you don’t learn anything from them. Writing a compiler is interesting because it teaches you what a compiler is. But writing an interface to a buggy piece of software doesn’t teach you anything, because the bugs are random. [3] So it’s not just fastidiousness that makes good hackers avoid nasty little problems. It’s more a question of self-preservation. Working on nasty little problems makes you stupid. Good hackers avoid it for the same reason models avoid cheeseburgers.<br>讨厌的小问题的特点是，你从中学不到任何东西。写编译器很有趣，因为能让你理解编译器是什么，但给有漏洞的软件写接口学不到东西，因为漏洞是随机的。[3] 所以优秀的黑客避开这些小问题，不只是因为挑剔，更是自我保护 —— 做这些事会让人变蠢。优秀黑客避开它们，就像模特避开芝士汉堡一样。</p><p>Of course some problems inherently have this character. And because of supply and demand, they pay especially well. So a company that found a way to get great hackers to work on tedious problems would be very successful. How would you do it?<br>当然，有些问题本身就有这种特质，而且因为供需关系，报酬特别高。所以如果公司能让优秀黑客去做枯燥的问题，会非常成功。怎么做呢？</p><p>One place this happens is in startups. At our startup we had Robert Morris working as a system administrator. That’s like having the Rolling Stones play at a bar mitzvah. You can’t hire that kind of talent. But people will do any amount of drudgery for companies of which they’re the founders. [4]<br>创业公司里会有这种情况。我们创业时，罗伯特・莫里斯做系统管理员，这就像让滚石乐队在成人礼上表演 —— 你雇不来这种人才，但创始人会为自己的公司做任何枯燥的事。[4]</p><p>Bigger companies solve the problem by partitioning the company. They get smart people to work for them by establishing a separate R&amp;D department where employees don’t have to work directly on customers’ nasty little problems. [5] In this model, the research department functions like a mine. They produce new ideas; maybe the rest of the company will be able to use them.<br>大公司通过拆分公司来解决这个问题：设立独立的研发部门，让员工不用直接处理客户那些讨厌的小问题，以此吸引聪明人。[5] 在这种模式下，研发部门就像矿场，产出新想法，公司其他部门或许能用上。</p><p>You may not have to go to this extreme. Bottom-up programming suggests another way to partition the company: have the smart people work as toolmakers. If your company makes software to do x, have one group that builds tools for writing software of that type, and another that uses these tools to write the applications. This way you might be able to get smart people to write 99% of your code, but still keep them almost as insulated from users as they would be in a traditional research department. The toolmakers would have users, but they’d only be the company’s own developers. [6]<br>或许不用这么极端。自底向上的编程方式提供了另一种拆分方式：让聪明人做工具制造者。如果公司做 x 类软件，就分一组人开发写这类软件的工具，另一组用这些工具写应用。这样，聪明人可能写出 99% 的代码，同时几乎像在传统研发部门一样不受用户干扰 —— 工具制造者有用户，但只有公司自己的开发者。[6]</p><p>If Microsoft used this approach, their software wouldn’t be so full of security holes, because the less smart people writing the actual applications wouldn’t be doing low-level stuff like allocating memory. Instead of writing Word directly in C, they’d be plugging together big Lego blocks of Word-language. (Duplo, I believe, is the technical term.)<br>如果微软用这种方式，他们的软件就不会有这么多安全漏洞，因为写实际应用的不那么聪明的人就不用做内存分配之类的底层工作。他们不会直接用 C 写 Word，而是把 “Word 语言” 的大乐高积木拼起来（我觉得技术上应该叫 “得宝”）。</p><h3 id="Clumping"><a href="#Clumping" class="headerlink" title="Clumping"></a><strong>Clumping</strong></h3><p><strong>聚集</strong></p><p>Along with interesting problems, what good hackers like is other good hackers. Great hackers tend to clump together– sometimes spectacularly so, as at Xerox Parc. So you won’t attract good hackers in linear proportion to how good an environment you create for them. The tendency to clump means it’s more like the square of the environment. So it’s winner take all. At any given time, there are only about ten or twenty places where hackers most want to work, and if you aren’t one of them, you won’t just have fewer great hackers, you’ll have zero.<br>除了有趣的问题，优秀的黑客还喜欢其他优秀的黑客。伟大的黑客往往聚集在一起 —— 有时非常显著，比如施乐帕洛阿尔托研究中心。所以你为他们创造的环境有多好，吸引优秀黑客的数量并非线性增长，聚集效应意味着更接近环境质量的平方关系。因此是赢家通吃：任何时候，只有十来个或二十来个地方是黑客最想去的，如果你不在其中，就不只是优秀黑客少，而是一个都没有。</p><p>Having great hackers is not, by itself, enough to make a company successful. It works well for Google and ITA, which are two of the hot spots right now, but it didn’t help Thinking Machines or Xerox. Sun had a good run for a while, but their business model is a down elevator. In that situation, even the best hackers can’t save you.<br>有优秀的黑客本身并不足以让公司成功。谷歌和 ITA 现在是热门，这招对它们有用，但对 “思维机器” 公司或施乐没用。太阳微系统公司曾辉煌过，但商业模式走下坡路时，再好的黑客也救不了。</p><p>I think, though, that all other things being equal, a company that can attract great hackers will have a huge advantage. There are people who would disagree with this. When we were making the rounds of venture capital firms in the 1990s, several told us that software companies didn’t win by writing great software, but through brand, and dominating channels, and doing the right deals.<br>但我认为，在其他条件相同的情况下，能吸引优秀黑客的公司会有巨大优势。有人不同意这种说法。20 世纪 90 年代我们去风投公司融资时，有几家说软件公司的成功不靠写优秀软件，而靠品牌、渠道主导和做对交易。</p><p>They really seemed to believe this, and I think I know why. I think what a lot of VCs are looking for, at least unconsciously, is the next Microsoft. And of course if Microsoft is your model, you shouldn’t be looking for companies that hope to win by writing great software. But VCs are mistaken to look for the next Microsoft, because no startup can be the next Microsoft unless some other company is prepared to bend over at just the right moment and be the next IBM.<br>他们似乎真的相信这一点，我觉得我知道原因：很多风投至少潜意识里在找下一个微软。当然，如果以微软为榜样，就不该找那些希望靠写优秀软件取胜的公司。但风投找下一个微软是错的，因为除非有另一家公司准备好在恰当时刻 “弯腰” 成为下一个 IBM，否则没有创业公司能成为下一个微软。</p><p>It’s a mistake to use Microsoft as a model, because their whole culture derives from that one lucky break. Microsoft is a bad data point. If you throw them out, you find that good products do tend to win in the market. What VCs should be looking for is the next Apple, or the next Google.<br>以微软为榜样是错的，因为他们的整个文化都源于那次幸运的突破。微软是个不好的例子。抛开它，你会发现好产品往往能在市场上胜出。风投应该找的是下一个苹果，或下一个谷歌。</p><p>I think Bill Gates knows this. What worries him about Google is not the power of their brand, but the fact that they have better hackers. [7]<br>我觉得比尔・盖茨明白这一点。谷歌让他担心的不是品牌影响力，而是谷歌有更优秀的黑客。[7]</p><h3 id="Recognition"><a href="#Recognition" class="headerlink" title="Recognition"></a><strong>Recognition</strong></h3><p><strong>识别</strong></p><p>So who are the great hackers? How do you know when you meet one? That turns out to be very hard. Even hackers can’t tell. I’m pretty sure now that my friend Trevor Blackwell is a great hacker. You may have read on Slashdot how he made his own Segway. The remarkable thing about this project was that he wrote all the software in one day (in Python, incidentally).<br>那么，谁是优秀的黑客？遇到时怎么识别？这其实很难，连黑客自己都分不清。我现在很确定我的朋友特雷弗・布莱克韦尔是优秀的黑客。你可能在 Slashdot 上看到过他自己做赛格威的事，这个项目了不起的是，他一天就写完了所有软件（顺便说一句，用的是 Python）。</p><p>For Trevor, that’s par for the course. But when I first met him, I thought he was a complete idiot. He was standing in Robert Morris’s office babbling at him about something or other, and I remember standing behind him making frantic gestures at Robert to shoo this nut out of his office so we could go to lunch. Robert says he misjudged Trevor at first too. Apparently when Robert first met him, Trevor had just begun a new scheme that involved writing down everything about every aspect of his life on a stack of index cards, which he carried with him everywhere. He’d also just arrived from Canada, and had a strong Canadian accent and a mullet.<br>对特雷弗来说，这很平常。但我第一次见他时，觉得他是个彻头彻尾的白痴。他站在罗伯特・莫里斯的办公室里，对着罗伯特喋喋不休，我记得我站在他身后，疯狂地给罗伯特打手势，想把这个疯子赶出去好去吃午饭。罗伯特说他一开始也看错了特雷弗。显然，罗伯特第一次见他时，特雷弗刚搞了个新名堂：把生活方方面面的事都写在一叠索引卡上，走到哪带到哪。他刚从加拿大来，带着浓重的加拿大口音，留着胭脂鱼发型。</p><p>The problem is compounded by the fact that hackers, despite their reputation for social obliviousness, sometimes put a good deal of effort into seeming smart. When I was in grad school I used to hang around the MIT AI Lab occasionally. It was kind of intimidating at first. Everyone there spoke so fast. But after a while I learned the trick of speaking fast. You don’t have to think any faster; just use twice as many words to say everything.<br>更麻烦的是，尽管黑客以不懂社交闻名，有时却会费尽心机显得聪明。我读研究生时偶尔去麻省理工学院人工智能实验室逛，一开始有点吓人，那里的人说话都超快。但过了一阵子，我学会了说话快的诀窍：不用想更快，只要说每件事都用两倍的词就行。</p><p>With this amount of noise in the signal, it’s hard to tell good hackers when you meet them. I can’t tell, even now. You also can’t tell from their resumes. It seems like the only way to judge a hacker is to work with him on something.<br>信号里有这么多噪音，见面时很难判断谁是优秀的黑客，我现在也做不到。从简历里也看不出来。似乎只有和他一起做件事才能判断。</p><p>And this is the reason that high-tech areas only happen around universities. The active ingredient here is not so much the professors as the students. Startups grow up around universities because universities bring together promising young people and make them work on the same projects. The smart ones learn who the other smart ones are, and together they cook up new projects of their own.<br>这就是高科技区域只出现在大学周边的原因。关键因素与其说是教授，不如说是学生。创业公司在大学周边成长，因为大学把有潜力的年轻人聚集起来，让他们一起做项目。聪明的人会知道谁和自己一样聪明，然后一起搞新项目。</p><p>Because you can’t tell a great hacker except by working with him, hackers themselves can’t tell how good they are. This is true to a degree in most fields. I’ve found that people who are great at something are not so much convinced of their own greatness as mystified at why everyone else seems so incompetent.<br>因为只有一起工作才能识别优秀的黑客，所以黑客自己也不知道自己有多厉害。多数领域都有这种情况。我发现，在某方面很厉害的人，与其说是确信自己很厉害，不如说是困惑于为什么其他人看起来这么无能。</p><p>But it’s particularly hard for hackers to know how good they are, because it’s hard to compare their work. This is easier in most other fields. In the hundred meters, you know in 10 seconds who’s fastest. Even in math there seems to be a general consensus about which problems are hard to solve, and what constitutes a good solution. But hacking is like writing. Who can say which of two novels is better? Certainly not the authors.<br>但黑客尤其难知道自己有多厉害，因为他们的工作很难比较。多数其他领域更简单：百米赛跑 10 秒内就知道谁最快；甚至数学领域，大家对哪些问题难、什么是好解法也有共识。但编程就像写作，谁能说两本小说哪本更好？作者肯定说不出来。</p><p>With hackers, at least, other hackers can tell. That’s because, unlike novelists, hackers collaborate on projects. When you get to hit a few difficult problems over the net at someone, you learn pretty quickly how hard they hit them back. But hackers can’t watch themselves at work. So if you ask a great hacker how good he is, he’s almost certain to reply, I don’t know. He’s not just being modest. He really doesn’t know.<br>但至少其他黑客能判断谁是优秀的黑客，因为和小说家不同，黑客会合作项目。当你通过网络向某人抛出几个难题，很快就知道他能回击得多有力。但黑客看不到自己的工作状态，所以如果你问优秀的黑客他有多厉害，他几乎肯定会说 “不知道”—— 这不是谦虚，是真不知道。</p><p>And none of us know, except about people we’ve actually worked with. Which puts us in a weird situation: we don’t know who our heroes should be. The hackers who become famous tend to become famous by random accidents of PR. Occasionally I need to give an example of a great hacker, and I never know who to use. The first names that come to mind always tend to be people I know personally, but it seems lame to use them. So, I think, maybe I should say Richard Stallman, or Linus Torvalds, or Alan Kay, or someone famous like that. But I have no idea if these guys are great hackers. I’ve never worked with them on anything.<br>除了和我们一起工作过的人，我们谁也不了解，这让我们陷入一种奇怪的境地：不知道该以谁为榜样。出名的黑客往往是因为公关偶然事件才出名。我偶尔需要举一个优秀黑客的例子，却不知道选谁。脑子里最先冒出来的总是认识的人，但用他们又显得没说服力。所以我想，或许该说理查德・斯托曼、莱纳斯・托瓦兹、艾伦・凯之类的名人，但我不知道他们是不是优秀的黑客 —— 我从没和他们一起做过事。</p><p>If there is a Michael Jordan of hacking, no one knows, including him.<br>如果编程界有 “迈克尔・乔丹”，没人知道是谁，包括他自己。</p><h3 id="Cultivation"><a href="#Cultivation" class="headerlink" title="Cultivation"></a><strong>Cultivation</strong></h3><p><strong>培养</strong></p><p>Finally, the question the hackers have all been wondering about: how do you become a great hacker? I don’t know if it’s possible to make yourself into one. But it’s certainly possible to do things that make you stupid, and if you can make yourself stupid, you can probably make yourself smart too.<br>最后，是所有黑客都想知道的问题：如何成为优秀的黑客？我不知道能不能把自己变成这样的人，但肯定能做些让自己变蠢的事 —— 如果能变蠢，或许也能变聪明。</p><p>The key to being a good hacker may be to work on what you like. When I think about the great hackers I know, one thing they have in common is the extreme difficulty of making them work on anything they don’t want to. I don’t know if this is cause or effect; it may be both.<br>成为优秀黑客的关键可能是做自己喜欢的事。想到我认识的优秀黑客，他们的共同点是：很难让他们做不想做的事。我不知道这是原因还是结果，或许两者都是。</p><p>To do something well you have to love it. So to the extent you can preserve hacking as something you love, you’re likely to do it well. Try to keep the sense of wonder you had about programming at age 14. If you’re worried that your current job is rotting your brain, it probably is.<br>要做好一件事，必须热爱它。所以，只要能保持对编程的热爱，你就可能做得很好。试着保留 14 岁时对编程的那种好奇。如果你担心现在的工作会让你变蠢，那很可能确实如此。</p><p>The best hackers tend to be smart, of course, but that’s true in a lot of fields. Is there some quality that’s unique to hackers? I asked some friends, and the number one thing they mentioned was curiosity. I’d always supposed that all smart people were curious– that curiosity was simply the first derivative of knowledge. But apparently hackers are particularly curious, especially about how things work. That makes sense, because programs are in effect giant descriptions of how things work.<br>当然，最优秀的黑客往往很聪明，但很多领域都是如此。有没有黑客独有的特质？我问了些朋友，他们提到最多的是好奇心。我一直以为所有聪明人都好奇 —— 好奇心不过是知识的一阶导数。但显然黑客尤其好奇，特别是对事物的原理。这说得通，因为程序本质上是对事物原理的详细描述。</p><p>Several friends mentioned hackers’ ability to concentrate– their ability, as one put it, to “tune out everything outside their own heads.’’ I’ve certainly noticed this. And I’ve heard several hackers say that after drinking even half a beer they can’t program at all. So maybe hacking does require some special ability to focus. Perhaps great hackers can load a large amount of context into their head, so that when they look at a line of code, they see not just that line but the whole program around it. John McPhee wrote that Bill Bradley’s success as a basketball player was due partly to his extraordinary peripheral vision. “Perfect’’ eyesight means about 47 degrees of vertical peripheral vision. Bill Bradley had 70; he could see the basket when he was looking at the floor. Maybe great hackers have some similar inborn ability. (I cheat by using a very dense language, which shrinks the court.)<br>几个朋友提到了黑客的专注力 —— 用其中一个人的话说，是 “屏蔽脑海外所有东西” 的能力。我确实注意到了这一点。还听几个黑客说，喝半杯啤酒就完全写不了代码了。所以编程可能需要特殊的专注力：优秀的黑客或许能在脑海中加载大量上下文，看到一行代码时，不只是这行，还有周围的整个程序。约翰・麦克菲曾写道，比尔・布拉德利篮球打得好，部分原因是他非凡的周边视觉：“完美” 视力的垂直周边视野约 47 度，而他有 70 度，看地板时能看到篮筐。或许优秀的黑客也有类似的天赋（我作弊的方式是用非常简洁的语言，缩小 “球场”）。</p><p>This could explain the disconnect over cubicles. Maybe the people in charge of facilities, not having any concentration to shatter, have no idea that working in a cubicle feels to a hacker like having one’s brain in a blender. (Whereas Bill, if the rumors of autism are true, knows all too well.)<br>这或许能解释为什么在隔间问题上存在分歧：负责办公设施的人可能没什么专注力可被破坏，所以完全不知道在隔间工作对黑客来说就像脑子被放进了搅拌机（而如果关于比尔有自闭症的传言是真的，他就太懂这种感受了）。</p><p>One difference I’ve noticed between great hackers and smart people in general is that hackers are more politically incorrect. To the extent there is a secret handshake among good hackers, it’s when they know one another well enough to express opinions that would get them stoned to death by the general public. And I can see why political incorrectness would be a useful quality in programming. Programs are very complex and, at least in the hands of good programmers, very fluid. In such situations it’s helpful to have a habit of questioning assumptions.<br>我注意到优秀黑客和一般聪明人之间的一个区别：黑客更 “政治不正确”。如果说优秀黑客之间有什么 “秘密暗号”，那就是彼此足够熟悉后，能说出那些会被大众 “乱石砸死” 的观点。我能理解为什么 “政治不正确” 在编程中是有用的特质：程序非常复杂，而且在优秀程序员手中极具流动性，这种情况下，有质疑假设的习惯是有帮助的。</p><p>Can you cultivate these qualities? I don’t know. But you can at least not repress them. So here is my best shot at a recipe. If it is possible to make yourself into a great hacker, the way to do it may be to make the following deal with yourself: you never have to work on boring projects (unless your family will starve otherwise), and in return, you’ll never allow yourself to do a half-assed job. All the great hackers I know seem to have made that deal, though perhaps none of them had any choice in the matter.<br>这些特质能培养吗？我不知道。但至少可以不压抑它们。所以我斗胆给出一个 “配方”：如果有可能让自己成为优秀的黑客，方法或许是和自己达成协议 —— 绝不做无聊的项目（除非家人要挨饿），作为回报，绝不敷衍了事。我认识的所有优秀黑客似乎都达成了这个协议，或许他们别无选择。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注意差距</title>
    <link href="/2025/08/19/mind-the-gap/"/>
    <url>/2025/08/19/mind-the-gap/</url>
    
    <content type="html"><![CDATA[<h2 id="Mind-the-Gap"><a href="#Mind-the-Gap" class="headerlink" title="Mind the Gap"></a>Mind the Gap</h2><p>原文链接: <a href="https://paulgraham.com/gap.html">https://paulgraham.com/gap.html</a></p><p>May 2004</p><p>When people care enough about something to do it well, those who do it best tend to be far better than everyone else. There’s a huge gap between Leonardo and second-rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once.</p><p>当人们足够在乎某件事并力求做好时，做得最好的人往往会远超其他人。莱昂纳多和博尔戈尼奥内这类二流同代人之间存在巨大差距；雷蒙德・钱德勒和普通侦探小说作家之间也有同样的差距；顶级职业国际象棋选手和普通俱乐部选手对弈一万局，可能一局都不会输。</p><p>Like chess or painting or writing novels, making money is a very specialized skill. But for some reason we treat this skill differently. No one complains when a few people surpass all the rest at playing chess or writing novels, but when a few people make more money than the rest, we get editorials saying this is wrong.</p><p>和下棋、绘画、写小说一样，赚钱是一种非常专业的技能。但出于某种原因，我们对这种技能的态度不同。当少数人在象棋或小说创作上远超他人时，没人会抱怨；但当少数人比其他人赚更多钱时，就会有社论指责这是错误的。</p><p>Why? The pattern of variation seems no different than for any other skill. What causes people to react so strongly when the skill is making money?</p><p>为什么会这样？这种差异模式似乎和其他任何技能都没什么不同。为什么当这种技能是赚钱时，人们的反应会如此强烈？</p><p>I think there are three reasons we treat making money as different: the misleading model of wealth we learn as children; the disreputable way in which, till recently, most fortunes were accumulated; and the worry that great variations in income are somehow bad for society. As far as I can tell, the first is mistaken, the second outdated, and the third empirically false. Could it be that, in a modern democracy, variation in income is actually a sign of health?</p><p>我认为我们把赚钱视为不同的事情，有三个原因：我们小时候学到的关于财富的误导性模型；直到最近，大多数财富积累的不光彩方式；以及担心收入差距过大对社会有害。在我看来，第一个原因是错误的，第二个已经过时，第三个则与事实不符。难道在现代民主社会中，收入差异实际上是健康的标志？</p><h3 id="The-Daddy-Model-of-Wealth"><a href="#The-Daddy-Model-of-Wealth" class="headerlink" title="The Daddy Model of Wealth"></a><strong>The Daddy Model of Wealth</strong></h3><p><strong>财富的爸爸模型</strong></p><p>When I was five I thought electricity was created by electric sockets. I didn’t realize there were power plants out there generating it. Likewise, it doesn’t occur to most kids that wealth is something that has to be generated. It seems to be something that flows from parents.</p><p>我五岁时以为电是插座产生的，没意识到外面有发电厂在发电。同样，大多数孩子不会想到财富是需要创造的，他们觉得财富似乎是从父母那里来的。</p><p>Because of the circumstances in which they encounter it, children tend to misunderstand wealth. They confuse it with money. They think that there is a fixed amount of it. And they think of it as something that’s distributed by authorities (and so should be distributed equally), rather than something that has to be created (and might be created unequally).</p><p>由于孩子们接触财富的环境，他们往往会误解财富。他们把财富和金钱混为一谈，认为财富的总量是固定的，还认为财富是由权威人士分配的（因此应该平均分配），而不是需要创造出来的（且创造出来的数量可能不均等）。</p><p>In fact, wealth is not money. Money is just a convenient way of trading one form of wealth for another. Wealth is the underlying stuff—the goods and services we buy. When you travel to a rich or poor country, you don’t have to look at people’s bank accounts to tell which kind you’re in. You can see wealth—in buildings and streets, in the clothes and the health of the people.</p><p>事实上，财富不是金钱。金钱只是一种将一种形式的财富换成另一种形式的便捷方式。财富是根本 —— 是我们购买的商品和服务。当你去一个富裕或贫穷的国家旅行时，不必看人们的银行账户就能分辨出是哪种国家。你能看到财富 —— 在建筑和街道上，在人们的衣着和健康状况中。</p><p>Where does wealth come from? People make it. This was easier to grasp when most people lived on farms, and made many of the things they wanted with their own hands. Then you could see in the house, the herds, and the granary the wealth that each family created. It was obvious then too that the wealth of the world was not a fixed quantity that had to be shared out, like slices of a pie. If you wanted more wealth, you could make it.</p><p>财富从何而来？是人们创造出来的。以前大多数人住在农场，亲手制作许多自己需要的东西时，这一点更容易理解。那时，你能从房子、牲畜和谷仓中看到每个家庭创造的财富。而且很明显，世界上的财富不是像馅饼一样固定不变、必须分割的数量。如果你想要更多财富，你可以去创造。</p><p>This is just as true today, though few of us create wealth directly for ourselves (except for a few vestigial domestic tasks). Mostly we create wealth for other people in exchange for money, which we then trade for the forms of wealth we want. [1]</p><p>如今这一点依然正确，尽管我们中很少有人直接为自己创造财富（除了一些残留的家务）。大多数时候，我们为别人创造财富，以此换取金钱，然后用金钱去换取我们想要的财富形式。[1]</p><p>Because kids are unable to create wealth, whatever they have has to be given to them. And when wealth is something you’re given, then of course it seems that it should be distributed equally. [2] As in most families it is. The kids see to that. “Unfair,” they cry, when one sibling gets more than another.</p><p>因为孩子们无法创造财富，他们所拥有的一切都必须是别人给予的。当财富是被给予的东西时，当然看起来应该平均分配。[2] 大多数家庭也是这样做的。孩子们会监督这一点：当一个兄弟姐妹得到的比另一个多时，他们会大喊 “不公平”。</p><p>In the real world, you can’t keep living off your parents. If you want something, you either have to make it, or do something of equivalent value for someone else, in order to get them to give you enough money to buy it. In the real world, wealth is (except for a few specialists like thieves and speculators) something you have to create, not something that’s distributed by Daddy. And since the ability and desire to create it vary from person to person, it’s not made equally.</p><p>在现实世界中，你不能一直靠父母生活。如果你想要某样东西，要么自己制作，要么为别人做同等价值的事情，以便让他们给你足够的钱去买。在现实世界中，财富（除了小偷和投机者等少数人）是需要创造的，而不是由 “爸爸” 分配的。而且由于创造财富的能力和意愿因人而异，财富的创造也不会均等。</p><p>You get paid by doing or making something people want, and those who make more money are often simply better at doing what people want. Top actors make a lot more money than B-list actors. The B-list actors might be almost as charismatic, but when people go to the theater and look at the list of movies playing, they want that extra oomph that the big stars have.</p><p>你通过做人们想要的事或制作人们想要的东西获得报酬，那些赚更多钱的人往往只是更擅长做人们想要的事。顶级演员比二线演员赚得多得多。二线演员可能也差不多有魅力，但当人们去电影院看排片表时，他们想要的是大明星所具有的那种额外的吸引力。</p><p>Doing what people want is not the only way to get money, of course. You could also rob banks, or solicit bribes, or establish a monopoly. Such tricks account for some variation in wealth, and indeed for some of the biggest individual fortunes, but they are not the root cause of variation in income. The root cause of variation in income, as Occam’s Razor implies, is the same as the root cause of variation in every other human skill.</p><p>当然，做人们想要的事并不是赚钱的唯一方式。你也可以抢劫银行、索取贿赂或建立垄断。这些手段导致了一些财富差异，甚至一些最大的个人财富也是如此，但它们并不是收入差异的根本原因。正如奥卡姆剃刀原理所暗示的，收入差异的根本原因与其他人类技能差异的根本原因是一样的。</p><p>In the United States, the CEO of a large public company makes about 100 times as much as the average person. [3] Basketball players make about 128 times as much, and baseball players 72 times as much. Editorials quote this kind of statistic with horror. But I have no trouble imagining that one person could be 100 times as productive as another. In ancient Rome the price of slaves varied by a factor of 50 depending on their skills. [4] And that’s without considering motivation, or the extra leverage in productivity that you can get from modern technology.</p><p>在美国，大型上市公司的首席执行官收入大约是普通人的 100 倍。[3] 篮球运动员大约是 128 倍，棒球运动员是 72 倍。社论引用这类数据时带着恐惧，但我完全能想象一个人的生产力可能是另一个人的 100 倍。在古罗马，奴隶的价格因技能不同而相差 50 倍。[4] 这还没考虑到动力，以及现代技术带来的生产力额外优势。</p><p>Editorials about athletes’ or CEOs’ salaries remind me of early Christian writers, arguing from first principles about whether the Earth was round, when they could just walk outside and check. [5] How much someone’s work is worth is not a policy question. It’s something the market already determines.</p><p>关于运动员或首席执行官薪水的社论让我想起早期的基督教作家，他们从基本原理上争论地球是否是圆的，而他们本可以出去看看就能验证。[5] 一个人的工作值多少钱不是政策问题，市场已经做出了决定。</p><p>“Are they really worth 100 of us?” editorialists ask. Depends on what you mean by worth. If you mean worth in the sense of what people will pay for their skills, the answer is yes, apparently.</p><p>“他们真的抵得上我们 100 个人吗？” 社论作者问道。这取决于 “ worth（价值）” 的含义。如果指的是人们愿意为他们的技能支付多少钱，答案显然是肯定的。</p><p>A few CEOs’ incomes reflect some kind of wrongdoing. But are there not others whose incomes really do reflect the wealth they generate? Steve Jobs saved a company that was in a terminal decline. And not merely in the way a turnaround specialist does, by cutting costs; he had to decide what Apple’s next products should be. Few others could have done it. And regardless of the case with CEOs, it’s hard to see how anyone could argue that the salaries of professional basketball players don’t reflect supply and demand.</p><p>少数首席执行官的收入反映了某种不当行为。但难道没有其他人的收入真的反映了他们创造的财富吗？史蒂夫・乔布斯拯救了一家濒临破产的公司。而且他不只是像扭亏为盈专家那样通过削减成本，他还必须决定苹果的下一款产品是什么。很少有人能做到这一点。而且不管首席执行官的情况如何，很难想象有人会认为职业篮球运动员的薪水不反映供求关系。</p><p>It may seem unlikely in principle that one individual could really generate so much more wealth than another. The key to this mystery is to revisit that question, are they really worth 100 of us? Would a basketball team trade one of their players for 100 random people? What would Apple’s next product look like if you replaced Steve Jobs with a committee of 100 random people? [6] These things don’t scale linearly. Perhaps the CEO or the professional athlete has only ten times (whatever that means) the skill and determination of an ordinary person. But it makes all the difference that it’s concentrated in one individual.</p><p>原则上，一个人真的能比另一个人创造多得多的财富，这似乎不太可能。解开这个谜团的关键是重新审视那个问题：他们真的抵得上我们 100 个人吗？一支篮球队会用他们的一名球员去换 100 个随机挑选的人吗？如果用 100 个随机挑选的人组成的委员会取代史蒂夫・乔布斯，苹果的下一款产品会是什么样子？[6] 这些事情不是线性递增的。也许首席执行官或职业运动员的技能和决心只是普通人的十倍（不管这意味着什么），但关键在于这些能力集中在一个人身上，这就完全不同了。</p><p>When we say that one kind of work is overpaid and another underpaid, what are we really saying? In a free market, prices are determined by what buyers want. People like baseball more than poetry, so baseball players make more than poets. To say that a certain kind of work is underpaid is thus identical with saying that people want the wrong things.</p><p>当我们说一种工作报酬过高而另一种过低时，我们真正在说什么？在自由市场中，价格由购买者的需求决定。人们更喜欢棒球而不是诗歌，所以棒球运动员比诗人赚得多。因此，说某种工作报酬过低，就等同于说人们想要的东西是错误的。</p><p>Well, of course people want the wrong things. It seems odd to be surprised by that. And it seems even odder to say that it’s unjust that certain kinds of work are underpaid. [7] Then you’re saying that it’s unjust that people want the wrong things. It’s lamentable that people prefer reality TV and corndogs to Shakespeare and steamed vegetables, but unjust? That seems like saying that blue is heavy, or that up is circular.</p><p>当然，人们会想要错误的东西。对此感到惊讶似乎很奇怪，而说某些工作报酬过低是不公正的，就更奇怪了。[7] 这相当于说人们想要错误的东西是不公正的。人们喜欢真人秀和玉米热狗胜过莎士比亚和蒸蔬菜，这很令人遗憾，但这是不公正吗？这就像说蓝色是沉重的，或者向上是圆形的一样荒谬。</p><p>The appearance of the word “unjust” here is the unmistakable spectral signature of the Daddy Model. Why else would this idea occur in this odd context? Whereas if the speaker were still operating on the Daddy Model, and saw wealth as something that flowed from a common source and had to be shared out, rather than something generated by doing what other people wanted, this is exactly what you’d get on noticing that some people made much more than others.</p><p>“不公正” 这个词的出现，是 “爸爸模型” 的明显特征。否则，这个想法怎么会出现在这种奇怪的语境中呢？如果说话者仍然按照 “爸爸模型” 思考，把财富看作是从一个共同来源流出、必须分配的东西，而不是通过做别人想要的事情创造出来的东西，那么当注意到有些人比其他人赚得多时，就会产生这种想法。</p><p>When we talk about “unequal distribution of income,” we should also ask, where does that income come from? [8] Who made the wealth it represents? Because to the extent that income varies simply according to how much wealth people create, the distribution may be unequal, but it’s hardly unjust.</p><p>当我们谈论 “收入分配不均” 时，我们还应该问，这些收入来自哪里？[8] 是谁创造了它所代表的财富？因为如果收入差异仅仅是由人们创造的财富多少决定的，那么这种分配可能不均等，但很难说是不公正的。</p><h3 id="Stealing-It"><a href="#Stealing-It" class="headerlink" title="Stealing It"></a><strong>Stealing It</strong></h3><p><strong>窃取财富</strong></p><p>The second reason we tend to find great disparities of wealth alarming is that for most of human history the usual way to accumulate a fortune was to steal it: in pastoral societies by cattle raiding; in agricultural societies by appropriating others’ estates in times of war, and taxing them in times of peace.</p><p>我们倾向于认为巨大的财富差距令人担忧的第二个原因是，在人类历史的大部分时间里，积累财富的通常方式是窃取：在游牧社会通过抢牛；在农业社会通过战争时期侵占他人财产，和平时期对其征税。</p><p>In conflicts, those on the winning side would receive the estates confiscated from the losers. In England in the 1060s, when William the Conqueror distributed the estates of the defeated Anglo-Saxon nobles to his followers, the conflict was military. By the 1530s, when Henry VIII distributed the estates of the monasteries to his followers, it was mostly political. [9] But the principle was the same. Indeed, the same principle is at work now in Zimbabwe.</p><p>在冲突中，获胜方会获得从失败者那里没收的财产。11 世纪 60 年代的英格兰，征服者威廉将战败的盎格鲁 - 撒克逊贵族的财产分给追随者，当时的冲突是军事性质的。到 16 世纪 30 年代，亨利八世将修道院的财产分给追随者时，这主要是政治行为。[9] 但原则是一样的。事实上，同样的原则现在在津巴布韦也在起作用。</p><p>In more organized societies, like China, the ruler and his officials used taxation instead of confiscation. But here too we see the same principle: the way to get rich was not to create wealth, but to serve a ruler powerful enough to appropriate it.</p><p>在更有组织的社会，比如中国，统治者及其官员用征税代替没收。但这里我们也看到同样的原则：致富的方式不是创造财富，而是为一个有足够权力侵占财富的统治者服务。</p><p>This started to change in Europe with the rise of the middle class. Now we think of the middle class as people who are neither rich nor poor, but originally they were a distinct group. In a feudal society, there are just two classes: a warrior aristocracy, and the serfs who work their estates. The middle class were a new, third group who lived in towns and supported themselves by manufacturing and trade.</p><p>随着中产阶级在欧洲的兴起，这种情况开始改变。现在我们认为中产阶级是既不富也不穷的人，但最初他们是一个独特的群体。在封建社会，只有两个阶级：武士贵族和为他们耕种土地的农奴。中产阶级是一个新的第三群体，他们住在城镇，靠制造业和贸易为生。</p><p>Starting in the tenth and eleventh centuries, petty nobles and former serfs banded together in towns that gradually became powerful enough to ignore the local feudal lords. [10] Like serfs, the middle class made a living largely by creating wealth. (In port cities like Genoa and Pisa, they also engaged in piracy.) But unlike serfs they had an incentive to create a lot of it. Any wealth a serf created belonged to his master. There was not much point in making more than you could hide. Whereas the independence of the townsmen allowed them to keep whatever wealth they created.</p><p>从 10 世纪和 11 世纪开始，小贵族和前农奴在城镇联合起来，这些城镇逐渐强大到可以无视当地封建领主。[10] 和农奴一样，中产阶级主要靠创造财富谋生（在热那亚和比萨等港口城市，他们也从事海盗活动）。但与农奴不同的是，他们有动力创造大量财富。农奴创造的任何财富都属于他的主人，创造出超过能隐藏的数量没有多大意义。而城镇居民的独立性使他们能够保留自己创造的所有财富。</p><p>Once it became possible to get rich by creating wealth, society as a whole started to get richer very rapidly. Nearly everything we have was created by the middle class. Indeed, the other two classes have effectively disappeared in industrial societies, and their names been given to either end of the middle class. (In the original sense of the word, Bill Gates is middle class.)</p><p>一旦通过创造财富可以致富，整个社会就开始迅速变得富裕起来。我们拥有的几乎所有东西都是中产阶级创造的。事实上，在工业社会中，另外两个阶级已经实际上消失了，他们的名称被赋予了中产阶级的两端（从这个词的原始意义来说，比尔・盖茨是中产阶级）。</p><p>But it was not till the Industrial Revolution that wealth creation definitively replaced corruption as the best way to get rich. In England, at least, corruption only became unfashionable (and in fact only started to be called “corruption”) when there started to be other, faster ways to get rich.</p><p>但直到工业革命，创造财富才明确取代腐败成为致富的最佳方式。至少在英国，当出现其他更快的致富方式时，腐败才变得不合时宜（实际上才开始被称为 “腐败”）。</p><p>Seventeenth-century England was much like the third world today, in that government office was a recognized route to wealth. The great fortunes of that time still derived more from what we would now call corruption than from commerce. [11] By the nineteenth century that had changed. There continued to be bribes, as there still are everywhere, but politics had by then been left to men who were driven more by vanity than greed. Technology had made it possible to create wealth faster than you could steal it. The prototypical rich man of the nineteenth century was not a courtier but an industrialist.</p><p>17 世纪的英格兰很像今天的第三世界，政府职位是公认的致富途径。当时的巨额财富更多来自我们现在所说的腐败，而不是商业。[11] 到了 19 世纪，情况发生了变化。贿赂仍然存在，就像现在各地一样，但那时的政治已经由那些更多受虚荣心而非贪婪驱使的人掌控。技术使得创造财富的速度超过了窃取财富的速度。19 世纪典型的富人不是朝臣，而是实业家。</p><p>With the rise of the middle class, wealth stopped being a zero-sum game. Jobs and Wozniak didn’t have to make us poor to make themselves rich. Quite the opposite: they created things that made our lives materially richer. They had to, or we wouldn’t have paid for them.</p><p>随着中产阶级的兴起，财富不再是零和游戏。乔布斯和沃兹尼亚克不必让我们变穷就能让自己变富。恰恰相反：他们创造的东西让我们的物质生活更加丰富。他们必须这样做，否则我们不会为他们的产品付钱。</p><p>But since for most of the world’s history the main route to wealth was to steal it, we tend to be suspicious of rich people. Idealistic undergraduates find their unconsciously preserved child’s model of wealth confirmed by eminent writers of the past. It is a case of the mistaken meeting the outdated.</p><p>但由于在世界历史的大部分时间里，致富的主要途径是窃取，我们往往对富人持怀疑态度。理想主义的大学生发现，他们潜意识中保留的儿童式财富模型，被过去的著名作家所证实。这是错误与过时的结合。</p><p>“Behind every great fortune, there is a crime,” Balzac wrote. Except he didn’t. What he actually said was that a great fortune with no apparent cause was probably due to a crime well enough executed that it had been forgotten. If we were talking about Europe in 1000, or most of the third world today, the standard misquotation would be spot on. But Balzac lived in nineteenth-century France, where the Industrial Revolution was well advanced. He knew you could make a fortune without stealing it. After all, he did himself, as a popular novelist. [12]</p><p>“每一笔巨大的财富背后，都有一桩罪行。” 巴尔扎克写道。但他其实没说过这句话。他实际上说的是，一笔没有明显原因的巨大财富，可能源于一桩实施得极为巧妙以至于被遗忘的罪行。如果我们谈论的是 1000 年的欧洲，或者今天的大多数第三世界国家，这种常见的误引是准确的。但巴尔扎克生活在 19 世纪的法国，那时工业革命已经很发达。他知道不通过窃取也能积累财富。毕竟，他自己作为一名畅销小说家就做到了。[12]</p><p>Only a few countries (by no coincidence, the richest ones) have reached this stage. In most, corruption still has the upper hand. In most, the fastest way to get wealth is by stealing it. And so when we see increasing differences in income in a rich country, there is a tendency to worry that it’s sliding back toward becoming another Venezuela. I think the opposite is happening. I think you’re seeing a country a full step ahead of Venezuela.</p><p>只有少数国家（并非巧合，都是最富裕的国家）达到了这个阶段。在大多数国家，腐败仍然占上风，致富最快的方式是窃取。因此，当我们看到一个富裕国家的收入差距在扩大时，往往会担心它会退化成另一个委内瑞拉。但我认为情况恰恰相反，我认为你看到的是一个比委内瑞拉领先一大步的国家。</p><h3 id="The-Lever-of-Technology"><a href="#The-Lever-of-Technology" class="headerlink" title="The Lever of Technology"></a><strong>The Lever of Technology</strong></h3><p><strong>技术的杠杆</strong></p><p>Will technology increase the gap between rich and poor? It will certainly increase the gap between the productive and the unproductive. That’s the whole point of technology. With a tractor an energetic farmer could plow six times as much land in a day as he could with a team of horses. But only if he mastered a new kind of farming.</p><p>技术会扩大贫富差距吗？它肯定会扩大有生产力和无生产力的人之间的差距。这就是技术的核心意义。有了拖拉机，一个精力充沛的农民一天能耕种的土地是用马队的六倍，但前提是他掌握了新的耕作方式。</p><p>I’ve seen the lever of technology grow visibly in my own time. In high school I made money by mowing lawns and scooping ice cream at Baskin-Robbins. This was the only kind of work available at the time. Now high school kids could write software or design web sites. But only some of them will; the rest will still be scooping ice cream.</p><p>在我自己的时代，我亲眼目睹了技术杠杆的显著增长。高中时，我靠割草坪和在巴斯金 - 罗宾斯冰淇淋店舀冰淇淋赚钱，那是当时唯一能找到的工作。现在的高中生可以编写软件或设计网站，但只有一部分人会这样做，其他人仍然会去舀冰淇淋。</p><p>I remember very vividly when in 1985 improved technology made it possible for me to buy a computer of my own. Within months I was using it to make money as a freelance programmer. A few years before, I couldn’t have done this. A few years before, there was no such thing as a freelance programmer. But Apple created wealth, in the form of powerful, inexpensive computers, and programmers immediately set to work using it to create more.</p><p>我清楚地记得，1985 年，技术的进步让我能够买到自己的电脑。几个月内，我就用它作为自由程序员赚钱了。几年前，我还做不到这一点，那时根本没有自由程序员这种职业。但苹果公司以强大而廉价的电脑形式创造了财富，程序员们立即开始利用它创造更多财富。</p><p>As this example suggests, the rate at which technology increases our productive capacity is probably exponential, rather than linear. So we should expect to see ever-increasing variation in individual productivity as time goes on. Will that increase the gap between rich and the poor? Depends which gap you mean.</p><p>正如这个例子所表明的，技术提高我们生产力的速度可能是指数级的，而不是线性的。因此，我们应该预料到，随着时间的推移，个人生产力的差异会越来越大。这会扩大贫富差距吗？这取决于你指的是哪种差距。</p><p>Technology should increase the gap in income, but it seems to decrease other gaps. A hundred years ago, the rich led a different kind of life from ordinary people. They lived in houses full of servants, wore elaborately uncomfortable clothes, and travelled about in carriages drawn by teams of horses which themselves required their own houses and servants. Now, thanks to technology, the rich live more like the average person.</p><p>技术应该会扩大收入差距，但似乎会缩小其他差距。一百年前，富人的生活与普通人截然不同。他们住在满是仆人的房子里，穿着精致却不舒服的衣服，乘坐由马队牵引的马车出行，而马本身也需要住所和仆人照料。现在，多亏了技术，富人的生活更像普通人了。</p><p>Cars are a good example of why. It’s possible to buy expensive, handmade cars that cost hundreds of thousands of dollars. But there is not much point. Companies make more money by building a large number of ordinary cars than a small number of expensive ones. So a company making a mass-produced car can afford to spend a lot more on its design. If you buy a custom-made car, something will always be breaking. The only point of buying one now is to advertise that you can.</p><p>汽车就是一个很好的例子。你可以买到价值数十万美元的昂贵手工汽车，但没什么意义。公司生产大量普通汽车比生产少量昂贵汽车更赚钱，所以生产量产车的公司有能力在设计上投入更多。如果你买一辆定制汽车，总会有东西出故障。现在买定制车的唯一意义就是炫耀你买得起。</p><p>Or consider watches. Fifty years ago, by spending a lot of money on a watch you could get better performance. When watches had mechanical movements, expensive watches kept better time. Not any more. Since the invention of the quartz movement, an ordinary Timex is more accurate than a Patek Philippe costing hundreds of thousands of dollars. [13] Indeed, as with expensive cars, if you’re determined to spend a lot of money on a watch, you have to put up with some inconvenience to do it: as well as keeping worse time, mechanical watches have to be wound.</p><p>再看看手表。五十年前，花很多钱买一块手表能获得更好的性能。当时手表是机械机芯，昂贵的手表走时更准。现在不是这样了。自从石英机芯发明以来，一块普通的天美时手表比价值数十万美元的百达翡丽更准确。[13] 事实上，就像昂贵的汽车一样，如果你执意要花很多钱买一块手表，你就得忍受一些不便：机械表不仅走时更不准，还得上发条。</p><p>The only thing technology can’t cheapen is brand. Which is precisely why we hear ever more about it. Brand is the residue left as the substantive differences between rich and poor evaporate. But what label you have on your stuff is a much smaller matter than having it versus not having it. In 1900, if you kept a carriage, no one asked what year or brand it was. If you had one, you were rich. And if you weren’t rich, you took the omnibus or walked. Now even the poorest Americans drive cars, and it is only because we’re so well trained by advertising that we can even recognize the especially expensive ones. [14]</p><p>技术唯一无法降低成本的是品牌。这正是我们越来越多地听到品牌的原因。随着富人和穷人之间的实质性差异消失，品牌成了残留的东西。但你的东西上有什么标签，比起拥有它和没有它来说，是件小事。1900 年，如果你有一辆马车，没人会问是哪一年的或什么牌子的，有马车就说明你富有。如果你不富有，就只能坐公共马车或步行。现在，即使是最贫穷的美国人也能开车，我们之所以能认出那些特别昂贵的车，只是因为广告对我们的影响太深了。[14]</p><p>The same pattern has played out in industry after industry. If there is enough demand for something, technology will make it cheap enough to sell in large volumes, and the mass-produced versions will be, if not better, at least more convenient. [15] And there is nothing the rich like more than convenience. The rich people I know drive the same cars, wear the same clothes, have the same kind of furniture, and eat the same foods as my other friends. Their houses are in different neighborhoods, or if in the same neighborhood are different sizes, but within them life is similar. The houses are made using the same construction techniques and contain much the same objects. It’s inconvenient to do something expensive and custom.</p><p>同样的模式在一个又一个行业上演。如果某样东西有足够的需求，技术会让它变得足够便宜，从而可以大量销售，而量产版本即使不是更好，至少也更方便。[15] 富人最喜欢的莫过于方便。我认识的富人，和我的其他朋友开一样的车、穿一样的衣服、用一样的家具、吃一样的食物。他们的房子可能在不同的社区，或者在同一个社区但大小不同，但房子里的生活是相似的。房子用同样的建筑技术建造，里面的东西也大致相同。做昂贵的定制化事情是很不方便的。</p><p>The rich spend their time more like everyone else too. Bertie Wooster seems long gone. Now, most people who are rich enough not to work do anyway. It’s not just social pressure that makes them; idleness is lonely and demoralizing.</p><p>富人的时间安排也越来越像普通人了。伯蒂・伍斯特式的闲人似乎早已消失。现在，大多数足够富有可以不工作的人仍然在工作。这不仅仅是社会压力使然，无所事事是孤独且令人消沉的。</p><p>Nor do we have the social distinctions there were a hundred years ago. The novels and etiquette manuals of that period read now like descriptions of some strange tribal society. “With respect to the continuance of friendships…” hints Mrs. Beeton’s Book of Household Management (1880), “it may be found necessary, in some cases, for a mistress to relinquish, on assuming the responsibility of a household, many of those commenced in the earlier part of her life.” A woman who married a rich man was expected to drop friends who didn’t. You’d seem a barbarian if you behaved that way today. You’d also have a very boring life. People still tend to segregate themselves somewhat, but much more on the basis of education than wealth. [16]</p><p>我们也不再有一百年前的社会阶层差异了。那个时期的小说和礼仪手册现在读起来就像对某种奇怪部落社会的描述。《比顿夫人的家庭管理全书》（1880 年）中暗示：“关于友谊的延续…… 在某些情况下，女主人在承担起家庭责任后，可能有必要放弃她早年建立的许多友谊。” 嫁给富人的女人被期望疏远那些不富裕的朋友。如今，如果你那样做，会显得像个野蛮人，而且你的生活也会非常无聊。人们仍然倾向于在一定程度上自我隔离，但更多是基于教育程度而非财富。[16]</p><p>Materially and socially, technology seems to be decreasing the gap between the rich and the poor, not increasing it. If Lenin walked around the offices of a company like Yahoo or Intel or Cisco, he’d think communism had won. Everyone would be wearing the same clothes, have the same kind of office (or rather, cubicle) with the same furnishings, and address one another by their first names instead of by honorifics. Everything would seem exactly as he’d predicted, until he looked at their bank accounts. Oops.</p><p>在物质和社会层面，技术似乎在缩小而不是扩大贫富差距。如果列宁走进雅虎、英特尔或思科这样的公司办公室，他会认为共产主义已经胜利了。每个人都穿着同样的衣服，拥有同样的办公室（或者说隔间）和同样的家具，彼此称呼名字而不是尊称。一切似乎都和他预测的完全一样，直到他看到他们的银行账户。哎呀。</p><p>Is it a problem if technology increases that gap? It doesn’t seem to be so far. As it increases the gap in income, it seems to decrease most other gaps.</p><p>如果技术扩大了收入差距，这是个问题吗？到目前为止似乎不是。因为当它扩大收入差距时，似乎缩小了大多数其他差距。</p><h3 id="Alternative-to-an-Axiom"><a href="#Alternative-to-an-Axiom" class="headerlink" title="Alternative to an Axiom"></a><strong>Alternative to an Axiom</strong></h3><p><strong>公理的替代观点</strong></p><p>One often hears a policy criticized on the grounds that it would increase the income gap between rich and poor. As if it were an axiom that this would be bad. It might be true that increased variation in income would be bad, but I don’t see how we can say it’s axiomatic.</p><p>人们经常听到一项政策因会扩大贫富收入差距而受到批评，仿佛这必然是坏事一样。收入差异扩大可能确实是坏事，但我不明白为什么这会被视为公理。</p><p>Indeed, it may even be false, in industrial democracies. In a society of serfs and warlords, certainly, variation in income is a sign of an underlying problem. But serfdom is not the only cause of variation in income. A 747 pilot doesn’t make 40 times as much as a checkout clerk because he is a warlord who somehow holds her in thrall. His skills are simply much more valuable.</p><p>事实上，在工业民主国家，这甚至可能是错误的。在一个由农奴和军阀组成的社会里，收入差异当然是潜在问题的标志。但农奴制并不是收入差异的唯一原因。一架 747 客机的飞行员收入是收银员的 40 倍，不是因为他是一个以某种方式控制着收银员的军阀，而仅仅是因为他的技能更有价值。</p><p>I’d like to propose an alternative idea: that in a modern society, increasing variation in income is a sign of health. Technology seems to increase the variation in productivity at faster than linear rates. If we don’t see corresponding variation in income, there are three possible explanations: (a) that technical innovation has stopped, (b) that the people who would create the most wealth aren’t doing it, or (c) that they aren’t getting paid for it.</p><p>我想提出一个替代观点：在现代社会，收入差异的扩大是健康的标志。技术似乎以快于线性的速度扩大生产力差异。如果我们没有看到相应的收入差异，可能有三个原因：（a）技术创新已经停止；（b）那些能创造最多财富的人没有去创造；（c）他们创造了财富却没有得到报酬。</p><p>I think we can safely say that (a) and (b) would be bad. If you disagree, try living for a year using only the resources available to the average Frankish nobleman in 800, and report back to us. (I’ll be generous and not send you back to the stone age.)</p><p>我认为可以肯定地说，（a）和（b）都是坏事。如果你不同意，试着用 800 年法兰克贵族平均能拥有的资源生活一年，然后回来告诉我们（我会宽宏大量，不会让你回到石器时代）。</p><p>The only option, if you’re going to have an increasingly prosperous society without increasing variation in income, seems to be (c), that people will create a lot of wealth without being paid for it. That Jobs and Wozniak, for example, will cheerfully work 20-hour days to produce the Apple computer for a society that allows them, after taxes, to keep just enough of their income to match what they would have made working 9 to 5 at a big company.</p><p>如果你想拥有一个日益繁荣的社会，同时又不扩大收入差异，唯一的选择似乎是（c）：人们创造大量财富却得不到报酬。例如，乔布斯和沃兹尼亚克会心甘情愿地每天工作 20 小时来生产苹果电脑，而社会只允许他们在税后保留足够的收入，仅相当于他们在大公司朝九晚五工作的收入。</p><p>Will people create wealth if they can’t get paid for it? Only if it’s fun. People will write operating systems for free. But they won’t install them, or take support calls, or train customers to use them. And at least 90% of the work that even the highest tech companies do is of this second, unedifying kind.</p><p>如果得不到报酬，人们会创造财富吗？只有当这件事有趣的时候才会。人们会免费编写操作系统，但他们不会去安装、接听支持电话或培训客户使用。即使是最高科技的公司，至少 90% 的工作都是这种不那么有趣的工作。</p><p>All the unfun kinds of wealth creation slow dramatically in a society that confiscates private fortunes. We can confirm this empirically. Suppose you hear a strange noise that you think may be due to a nearby fan. You turn the fan off, and the noise stops. You turn the fan back on, and the noise starts again. Off, quiet. On, noise. In the absence of other information, it would seem the noise is caused by the fan.</p><p>在一个没收私人财富的社会里，所有那些不有趣的财富创造都会急剧减少。我们可以通过经验来证实这一点。假设你听到一个奇怪的声音，你认为可能是附近的风扇发出的。你关掉风扇，声音停止了；你再打开风扇，声音又开始了；关掉，安静；打开，有声音。在没有其他信息的情况下，似乎可以确定声音是风扇引起的。</p><p>At various times and places in history, whether you could accumulate a fortune by creating wealth has been turned on and off. Northern Italy in 800, off (warlords would steal it). Northern Italy in 1100, on. Central France in 1100, off (still feudal). England in 1800, on. England in 1974, off (98% tax on investment income). United States in 1974, on. We’ve even had a twin study: West Germany, on; East Germany, off. In every case, the creation of wealth seems to appear and disappear like the noise of a fan as you switch on and off the prospect of keeping it.</p><p>在历史上的不同时间和地点，通过创造财富积累财富的可能性时有时无。800 年的意大利北部，不可能（军阀会窃取）；1100 年的意大利北部，可能；1100 年的法国中部，不可能（仍处于封建制）；1800 年的英国，可能；1974 年的英国，不可能（投资收入税率 98%）；1974 年的美国，可能。我们甚至有一个 “双胞胎研究”：西德，可能；东德，不可能。在所有这些案例中，财富创造的出现和消失，就像你打开或关闭保留财富的可能性时风扇发出的声音一样。</p><p>There is some momentum involved. It probably takes at least a generation to turn people into East Germans (luckily for England). But if it were merely a fan we were studying, without all the extra baggage that comes from the controversial topic of wealth, no one would have any doubt that the fan was causing the noise.</p><p>这其中涉及到一些惯性。把人变成东德人那样可能至少需要一代人的时间（对英国来说幸运的是）。但如果我们研究的仅仅是风扇，没有财富这个有争议的话题带来的额外包袱，没人会怀疑是风扇发出了声音。</p><p>If you suppress variations in income, whether by stealing private fortunes, as feudal rulers used to do, or by taxing them away, as some modern governments have done, the result always seems to be the same. Society as a whole ends up poorer.</p><p>如果你抑制收入差异，无论是像封建统治者那样窃取私人财富，还是像一些现代政府那样通过税收剥夺，结果似乎总是一样的：整个社会最终会变得更贫穷。</p><p>If I had a choice of living in a society where I was materially much better off than I am now, but was among the poorest, or in one where I was the richest, but much worse off than I am now, I’d take the first option. If I had children, it would arguably be immoral not to. It’s absolute poverty you want to avoid, not relative poverty. If, as the evidence so far implies, you have to have one or the other in your society, take relative poverty.</p><p>如果我可以选择住在这样一个社会：我在物质上比现在好得多，但属于最贫穷的人；或者住在另一个社会：我是最富有的人，但物质上比现在差得多，我会选择第一个选项。如果我有孩子，不这样选择可能是不道德的。你想要避免的是绝对贫困，而不是相对贫困。如果正如迄今为止的证据所暗示的那样，你的社会必须有其中一种贫困，那就选择相对贫困吧。</p><p>You need rich people in your society not so much because in spending their money they create jobs, but because of what they have to do to get rich. I’m not talking about the trickle-down effect here. I’m not saying that if you let Henry Ford get rich, he’ll hire you as a waiter at his next party. I’m saying that he’ll make you a tractor to replace your horse.</p><p>社会需要富人，与其说是因为他们花钱创造了就业机会，不如说是因为他们为了致富所必须做的事情。我这里说的不是涓滴效应。我不是说如果你让亨利・福特致富，他会在下次派对上雇你当服务员。我是说他会为你制造一台拖拉机来取代你的马。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] Part of the reason this subject is so contentious is that some of those most vocal on the subject of wealth—university students, heirs, professors, politicians, and journalists—have the least experience creating it. (This phenomenon will be familiar to anyone who has overheard conversations about sports in a bar.)</p><p>[1] 这个话题争议性很大，部分原因在于，在财富话题上最直言不讳的一些人 —— 大学生、继承人、教授、政客和记者 —— 恰恰是创造财富经验最少的人。（任何在酒吧里听过人们谈论体育的人，都会对这种现象感到熟悉。）</p><p>Students are mostly still on the parental dole, and have not stopped to think about where that money comes from. Heirs will be on the parental dole for life. Professors and politicians live within socialist eddies of the economy, at one remove from the creation of wealth, and are paid a flat rate regardless of how hard they work. And journalists as part of their professional code segregate themselves from the revenue-collecting half of the businesses they work for (the ad sales department). Many of these people never come face to face with the fact that the money they receive represents wealth—wealth that, except in the case of journalists, someone else created earlier. They live in a world in which income is doled out by a central authority according to some abstract notion of fairness (or randomly, in the case of heirs), rather than given by other people in return for something they wanted, so it may seem to them unfair that things don’t work the same in the rest of the economy.</p><p>学生大多还在靠父母资助，没有想过那些钱是从哪里来的。继承人则一辈子都靠父母留下的钱生活。教授和政客生活在经济中的社会主义漩涡里，与财富创造隔了一层，无论工作多努力，都拿固定报酬。而记者作为职业规范的一部分，与他们所在机构负责创收的部门（广告销售部）隔离开来。这些人中的许多人从未正视过一个事实：他们收到的钱代表着财富 —— 除了记者的情况之外，这些财富都是别人早先创造出来的。他们生活在这样一个世界里：收入由一个中央权威根据某种抽象的公平概念分配（对继承人来说则是随机分配），而不是别人为了换取自己想要的东西而给予的。因此，在他们看来，经济的其他领域不是这样运作的，这似乎不公平。</p><p>(Some professors do create a great deal of wealth for society. But the money they’re paid isn’t a quid pro quo. It’s more in the nature of an investment.)</p><p>（有些教授确实为社会创造了大量财富。但他们得到的报酬并非等价交换，而更像是一种投资。）</p><p>[2] When one reads about the origins of the Fabian Society, it sounds like something cooked up by the high-minded Edwardian child-heroes of Edith Nesbit’s The Wouldbegoods.</p><p>[2] 当人们读到费边社的起源时，会觉得那像是伊迪丝・内斯比特的《准好孩子》中那些高尚的爱德华时代儿童主人公凭空想出来的东西。</p><p>[3] According to a study by the Corporate Library, the median total compensation, including salary, bonus, stock grants, and the exercise of stock options, of S&amp;P 500 CEOs in 2002 was $3.65 million. According to Sports Illustrated, the average NBA player’s salary during the 2002-03 season was $4.54 million, and the average major league baseball player’s salary at the start of the 2003 season was $2.56 million. According to the Bureau of Labor Statistics, the mean annual wage in the US in 2002 was $35,560.</p><p>[3] 根据企业图书馆的一项研究，2002 年标准普尔 500 指数成分股公司首席执行官的总薪酬中位数（包括薪水、奖金、股票授予和股票期权行权）为 365 万美元。据《体育画报》报道，2002-03 赛季 NBA 球员的平均薪水为 454 万美元，2003 赛季开始时美国职业棒球大联盟球员的平均薪水为 256 万美元。根据美国劳工统计局的数据，2002 年美国的平均年薪为 35,560 美元。</p><p>[4] In the early empire the price of an ordinary adult slave seems to have been about 2,000 sestertii (e.g. Horace, Sat. ii.7.43). A servant girl cost 600 (Martial vi.66), while Columella (iii.3.8) says that a skilled vine-dresser was worth 8,000. A doctor, P. Decimus Eros Merula, paid 50,000 sestertii for his freedom (Dessau, Inscriptiones 7812). Seneca (Ep. xxvii.7) reports that one Calvisius Sabinus paid 100,000 sestertii apiece for slaves learned in the Greek classics. Pliny (Hist. Nat. vii.39) says that the highest price paid for a slave up to his time was 700,000 sestertii, for the linguist (and presumably teacher) Daphnis, but that this had since been exceeded by actors buying their own freedom.</p><p>[4] 在罗马帝国早期，一个普通成年奴隶的价格似乎约为 2,000 塞斯特斯（如贺拉斯《讽刺诗》ii.7.43）。一个女仆价值 600 塞斯特斯（马提亚尔《讽刺诗》vi.66），而科卢梅拉（《论农业》iii.3.8）说一个熟练的葡萄园丁值 8,000 塞斯特斯。一位名叫 P・德西姆斯・埃罗斯・梅鲁拉的医生为换取自由支付了 50,000 塞斯特斯（德绍《拉丁铭文集成》7812）。塞内加（《书信集》xxvii.7）记载，一个叫卡尔维西乌斯・萨比努斯的人为每个精通希腊古典文献的奴隶支付 100,000 塞斯特斯。普林尼（《自然史》vii.39）说，在他那个时代，为奴隶支付的最高价格是 700,000 塞斯特斯，买的是语言学家（大概也是教师）达芙妮，但后来演员为换取自己自由所支付的价格超过了这个数。</p><p>Classical Athens saw a similar variation in prices. An ordinary laborer was worth about 125 to 150 drachmae. Xenophon (Mem. ii.5) mentions prices ranging from 50 to 6,000 drachmae (for the manager of a silver mine).</p><p>古典时期的雅典也存在类似的价格差异。一个普通劳工约值 125 到 150 德拉克马。色诺芬（《回忆录》ii.5）提到奴隶价格从 50 到 6,000 德拉克马不等（6,000 德拉克马是银矿经理的价格）。</p><p>For more on the economics of ancient slavery see:</p><p>关于古代奴隶制的经济学更多内容，参见：</p><p>Jones, A. H. M., “Slavery in the Ancient World,” Economic History Review, 2:9 (1956), 185-199, reprinted in Finley, M. I. (ed.), Slavery in Classical Antiquity, Heffer, 1964.</p><p>A・H・M・琼斯：《古代世界的奴隶制》，《经济史评论》，2:9（1956），185-199，重印于 M・I・芬利（编）：《古典时代的奴隶制》，赫弗出版社，1964 年。</p><p>[5] Eratosthenes (276—195 BC) used shadow lengths in different cities to estimate the Earth’s circumference. He was off by only about 2%.</p><p>[5] 埃拉托色尼（公元前 276— 前 195 年）利用不同城市的影子长度估算地球周长，误差仅约 2%。</p><p>[6] No, and Windows, respectively.</p><p>[6] 答案分别是 “不会” 和 “Windows 系统”。</p><p>[7] One of the biggest divergences between the Daddy Model and reality is the valuation of hard work. In the Daddy Model, hard work is in itself deserving. In reality, wealth is measured by what one delivers, not how much effort it costs. If I paint someone’s house, the owner shouldn’t pay me extra for doing it with a toothbrush.</p><p>[7] “爸爸模型” 与现实之间最大的分歧之一在于对努力工作的评价。在 “爸爸模型” 中，努力工作本身就值得回报。而在现实中，财富的衡量标准是一个人交付了什么，而不是付出了多少努力。如果我给别人粉刷房子，房主不应该因为我用牙刷刷就多付钱。</p><p>It will seem to someone still implicitly operating on the Daddy Model that it is unfair when someone works hard and doesn’t get paid much. To help clarify the matter, get rid of everyone else and put our worker on a desert island, hunting and gathering fruit. If he’s bad at it he’ll work very hard and not end up with much food. Is this unfair? Who is being unfair to him?</p><p>对于那些仍然下意识地按照 “爸爸模型” 思考的人来说，当一个人努力工作却没得到多少报酬时，会觉得这是不公平的。为了把事情说清楚，我们可以假设其他所有人都不存在，只让这个工人处在一个荒岛上，靠打猎和采集果实为生。如果他不擅长这些，他会非常努力地工作，却最终得不到多少食物。这是不公平吗？谁对他不公平了？</p><p>[8] Part of the reason for the tenacity of the Daddy Model may be the dual meaning of “distribution.” When economists talk about “distribution of income,” they mean statistical distribution. But when you use the phrase frequently, you can’t help associating it with the other sense of the word (as in e.g. “distribution of alms”), and thereby subconsciously seeing wealth as something that flows from some central tap. The word “regressive” as applied to tax rates has a similar effect, at least on me; how can anything regressive be good?</p><p>[8] “爸爸模型” 之所以根深蒂固，部分原因可能在于 “distribution（分配）” 一词的双重含义。当经济学家谈论 “收入分配（distribution of income）” 时，他们指的是统计分布。但当你频繁使用这个短语时，会不由自主地将其与该词的另一种含义联系起来（如 “施舍的分配（distribution of alms）”），从而下意识地把财富看作是从某个中央水龙头流出的东西。“累退的（regressive）” 一词用于描述税率时也有类似的效果，至少对我来说是这样：一个 “后退的” 东西怎么可能是好的呢？</p><p>[9] “From the beginning of the reign Thomas Lord Roos was an assiduous courtier of the young Henry VIII and was soon to reap the rewards. In 1525 he was made a Knight of the Garter and given the Earldom of Rutland. In the thirties his support of the breach with Rome, his zeal in crushing the Pilgrimage of Grace, and his readiness to vote the death-penalty in the succession of spectacular treason trials that punctuated Henry’s erratic matrimonial progress made him an obvious candidate for grants of monastic property.”</p><p>[9] “从亨利八世统治初期开始，托马斯・鲁斯勋爵就是这位年轻国王的殷勤朝臣，并很快获得了回报。1525 年，他被授予嘉德骑士爵位，并获封拉特兰伯爵。在 30 年代，他支持与罗马教廷决裂，积极镇压‘求恩巡礼’运动，在亨利八世变幻莫测的婚姻进程中所引发的一系列引人注目的叛国罪审判中，他都准备好投票支持死刑判决，这使他成为获得修道院财产赏赐的当然人选。”</p><p>Stone, Lawrence, Family and Fortune: Studies in Aristocratic Finance in the Sixteenth and Seventeenth Centuries, Oxford University Press, 1973, p. 166.</p><p>劳伦斯・斯通：《家庭与财富：16 至 17 世纪贵族财政研究》，牛津大学出版社，1973 年，第 166 页。</p><p>[10] There is archaeological evidence for large settlements earlier, but it’s hard to say what was happening in them.</p><p>[10] 有考古证据表明更早之前就有大型定居点，但很难说这些定居点里发生了什么。</p><p>Hodges, Richard and David Whitehouse, Mohammed, Charlemagne and the Origins of Europe, Cornell University Press, 1983.</p><p>理查德・霍奇斯、戴维・怀特豪斯：《穆罕默德、查理曼与欧洲的起源》，康奈尔大学出版社，1983 年。</p><p>[11] William Cecil and his son Robert were each in turn the most powerful minister of the crown, and both used their position to amass fortunes among the largest of their times. Robert in particular took bribery to the point of treason. “As Secretary of State and the leading advisor to King James on foreign policy, [he] was a special recipient of favour, being offered large bribes by the Dutch not to make peace with Spain, and large bribes by Spain to make peace.” (Stone, op. cit., p. 17.)</p><p>[11] 威廉・塞西尔和他的儿子罗伯特先后担任英国最有权势的王室大臣，两人都利用职位积累了当时数一数二的财富。尤其是罗伯特，受贿到了叛国的地步。“作为国务卿和詹姆斯国王外交政策的主要顾问，[他] 是各方争相讨好的对象，荷兰人向他巨额行贿，希望他阻止英国与西班牙讲和；西班牙人也向他巨额行贿，希望促成和谈。”（斯通，同前引，第 17 页。）</p><p>[12] Though Balzac made a lot of money from writing, he was notoriously improvident and was troubled by debts all his life.</p><p>[12] 尽管巴尔扎克通过写作赚了很多钱，但他挥霍无度是出了名的，一辈子都被债务缠身。</p><p>[13] A Timex will gain or lose about .5 seconds per day. The most accurate mechanical watch, the Patek Philippe 10 Day Tourbillon, is rated at -1.5 to +2 seconds. Its retail price is about $220,000.</p><p>[13] 一块天美时手表每天的误差约为 0.5 秒。最精准的机械表百达翡丽 10 日陀飞轮表，误差在 - 1.5 到 + 2 秒之间，其零售价约为 22 万美元。</p><p>[14] If asked to choose which was more expensive, a well-preserved 1989 Lincoln Town Car ten-passenger limousine ($5,000) or a 2004 Mercedes S600 sedan ($122,000), the average Edwardian might well guess wrong.</p><p>[14] 如果让一个爱德华时代的普通人来选哪样更贵：一辆保存完好的 1989 年产林肯城市十座豪华轿车（5,000 美元），还是一辆 2004 年产梅赛德斯 - 奔驰 S600 轿车（122,000 美元），他很可能会猜错。</p><p>[15] To say anything meaningful about income trends, you have to talk about real income, or income as measured in what it can buy. But the usual way of calculating real income ignores much of the growth in wealth over time, because it depends on a consumer price index created by bolting end to end a series of numbers that are only locally accurate, and that don’t include the prices of new inventions until they become so common that their prices stabilize.</p><p>[15] 要对收入趋势说些有意义的话，就必须谈论实际收入，即按购买力衡量的收入。但通常计算实际收入的方法忽略了随着时间推移财富的大部分增长，因为这种方法依赖于消费者价格指数，而该指数是通过将一系列仅在局部准确的数字拼接而成的，并且在新发明变得足够普遍、价格稳定之前，不会将其价格纳入其中。</p><p>So while we might think it was very much better to live in a world with antibiotics or air travel or an electric power grid than without, real income statistics calculated in the usual way will prove to us that we are only slightly richer for having these things.</p><p>因此，尽管我们可能认为生活在一个有抗生素、航空旅行或电网的世界里比没有这些东西要好得多，但按通常方法计算的实际收入统计数据会向我们证明，拥有这些东西只会让我们稍微富裕一点。</p><p>Another approach would be to ask, if you were going back to the year x in a time machine, how much would you have to spend on trade goods to make your fortune? For example, if you were going back to 1970 it would certainly be less than $500, because the processing power you can get for $500 today would have been worth at least $150 million in 1970. The function goes asymptotic fairly quickly, because for times over a hundred years or so you could get all you needed in present-day trash. In 1800 an empty plastic drink bottle with a screw top would have seemed a miracle of workmanship.</p><p>另一种方法是问：如果你乘坐时光机回到 x 年，需要花多少钱购买贸易商品才能发家致富？例如，如果你回到 1970 年，肯定用不了 500 美元，因为如今 500 美元能买到的处理能力，在 1970 年至少值 1.5 亿美元。这个函数会很快趋近于极限，因为对于一百多年前的时代，你从当今的垃圾中就能找到所有需要的东西。在 1800 年，一个带螺旋盖的空塑料饮料瓶会被视为工艺的奇迹。</p><p>[16] Some will say this amounts to the same thing, because the rich have better opportunities for education. That’s a valid point. It is still possible, to a degree, to buy your kids’ way into top colleges by sending them to private schools that in effect hack the college admissions process.</p><p>[16] 有些人会说这其实是一回事，因为富人有更好的教育机会。这一点有道理。在某种程度上，通过送孩子去私立学校，实际上是钻了大学招生流程的空子，从而为孩子买到进入顶尖大学的机会，这仍然是可能的。</p><p>According to a 2002 report by the National Center for Education Statistics, about 1.7% of American kids attend private, non-sectarian schools. At Princeton, 36% of the class of 2007 came from such schools. (Interestingly, the number at Harvard is significantly lower, about 28%.) Obviously this is a huge loophole. It does at least seem to be closing, not widening.</p><p>根据美国国家教育统计中心 2002 年的一份报告，约 1.7% 的美国孩子就读于非宗教类私立学校。在普林斯顿大学 2007 届学生中，36% 来自这类学校。（有趣的是，哈佛大学的这一比例明显更低，约为 28%。）显然，这是一个巨大的漏洞。但至少这个漏洞似乎在缩小，而不是扩大。</p><p>Perhaps the designers of admissions processes should take a lesson from the example of computer security, and instead of just assuming that their system can’t be hacked, measure the degree to which it is.</p><p>或许大学招生流程的设计者应该从计算机安全的例子中吸取教训，不要只是假设他们的系统不会被 “黑客攻击”，而应该去衡量被攻击的程度。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哪些东西不能说</title>
    <link href="/2025/08/18/what-you-cannot-say/"/>
    <url>/2025/08/18/what-you-cannot-say/</url>
    
    <content type="html"><![CDATA[<h2 id="What-You-Can’t-Say"><a href="#What-You-Can’t-Say" class="headerlink" title="What You Can’t Say"></a>What You Can’t Say</h2><p>原文链接: <a href="https://paulgraham.com/say.html">https://paulgraham.com/say.html</a></p><p>January 2004</p><p>Have you ever seen an old photo of yourself and been embarrassed at the way you looked? Did we actually dress like that? We did. And we had no idea how silly we looked. It’s the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it.</p><p>你有没有看过自己以前的老照片，为当时的样子感到尴尬？我们真的穿成那样吗？确实穿成那样。而且我们完全没意识到自己看起来有多傻。时尚的本质就是让人察觉不到，就像我们所有人都在地球上，但地球的运动对我们来说是看不见的一样。</p><p>What scares me is that there are moral fashions too. They’re just as arbitrary, and just as invisible to most people. But they’re much more dangerous. Fashion is mistaken for good design; moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired, ostracized, imprisoned, or even killed.</p><p>让我害怕的是，道德时尚也是存在的。它们同样武断，对大多数人来说也同样难以察觉。但它们危险得多。时尚被误认为是好的设计；道德时尚被误认为是 “好” 本身。穿着古怪会让你被嘲笑，而违背道德时尚可能会让你被解雇、排斥、监禁，甚至被杀。</p><p>If you could travel back in a time machine, one thing would be true no matter where you went: you’d have to watch what you said. Opinions we consider harmless could have gotten you in big trouble. I’ve already said at least one thing that would have gotten me in big trouble in most of Europe in the seventeenth century, and did get Galileo in big trouble when he said it — that the earth moves. [1]</p><p>如果你能乘坐时光机回到过去，无论去哪个时代，有一件事都是肯定的：你必须小心自己说的话。我们现在认为无伤大雅的观点，在当时可能会给你惹上大麻烦。我已经说过至少一件事 —— 地球在运动 —— 这在 17 世纪的欧洲大部分地区会让我大难临头，而伽利略说这话时确实惹了大麻烦。</p><p>It seems to be a constant throughout history: In every period, people believed things that were just ridiculous, and believed them so strongly that you would have gotten in terrible trouble for saying otherwise.</p><p>这似乎是历史上的一个常态：每个时代，人们都会相信一些荒谬的东西，而且信得无比坚定，如果你提出反对，就会陷入可怕的麻烦。</p><p>Is our time any different? To anyone who has read any amount of history, the answer is almost certainly no. It would be a remarkable coincidence if ours were the first era to get everything just right.</p><p>我们这个时代有什么不同吗？对任何读过一些历史的人来说，答案几乎肯定是否定的。如果我们这个时代是第一个把所有事情都弄对的时代，那也太巧合了。</p><p>It’s tantalizing to think we believe things that people in the future will find ridiculous. What would someone coming back to visit us in a time machine have to be careful not to say? That’s what I want to study here. But I want to do more than just shock everyone with the heresy du jour. I want to find general recipes for discovering what you can’t say, in any era.</p><p>想到我们现在相信的东西，在未来的人看来可能很荒谬，这很有趣。如果有人乘时光机回到我们这个时代，他们必须小心不能说的话是什么？这正是我想探讨的。但我不想仅仅用当下的异端邪说来震惊所有人，我想找到一种通用的方法，来发现任何时代都 “不能说的话”。</p><h3 id="The-Conformist-Test"><a href="#The-Conformist-Test" class="headerlink" title="The Conformist Test"></a><strong>The Conformist Test</strong></h3><p><strong>从众测试</strong></p><p>Let’s start with a test: Do you have any opinions that you would be reluctant to express in front of a group of your peers?</p><p>我们先从一个测试开始：你有没有一些观点，不愿意在同龄人面前表达？</p><p>If the answer is no, you might want to stop and think about that. If everything you believe is something you’re supposed to believe, could that possibly be a coincidence? Odds are it isn’t. Odds are you just think what you’re told.</p><p>如果答案是否定的，你或许应该停下来想一想。如果你相信的所有事情，都是你 “应该” 相信的，这可能是巧合吗？大概率不是。大概率是你只是在想别人告诉你的东西。</p><p>The other alternative would be that you independently considered every question and came up with the exact same answers that are now considered acceptable. That seems unlikely, because you’d also have to make the same mistakes. Mapmakers deliberately put slight mistakes in their maps so they can tell when someone copies them. If another map has the same mistake, that’s very convincing evidence.</p><p>另一种可能是，你独立思考了每一个问题，然后得出的答案恰好和现在被认为 “可接受” 的答案完全一致。这似乎不太可能，因为你还得犯同样的错误。地图绘制者会故意在地图上留一些小错误，这样就能发现谁抄袭了他们。如果另一张地图有同样的错误，那就是非常有力的证据。</p><p>Like every other era in history, our moral map almost certainly contains a few mistakes. And anyone who makes the same mistakes probably didn’t do it by accident. It would be like someone claiming they had independently decided in 1972 that bell-bottom jeans were a good idea.</p><p>就像历史上的其他时代一样，我们的 “道德地图” 几乎肯定存在一些错误。而任何犯下同样错误的人，大概率都不是偶然的。这就好比有人说，他们在 1972 年独立得出结论：喇叭裤是个好主意。</p><p>If you believe everything you’re supposed to now, how can you be sure you wouldn’t also have believed everything you were supposed to if you had grown up among the plantation owners of the pre-Civil War South, or in Germany in the 1930s — or among the Mongols in 1200, for that matter? Odds are you would have.</p><p>如果你现在相信所有 “应该” 相信的东西，那你怎么能确定，如果你生长在内战前美国南方的种植园主中、20 世纪 30 年代的德国，或者 1200 年的蒙古人中，不会同样相信当时 “应该” 相信的一切呢？大概率你会的。</p><p>Back in the era of terms like “well-adjusted,” the idea seemed to be that there was something wrong with you if you thought things you didn’t dare say out loud. This seems backward. Almost certainly, there is something wrong with you if you don’t think things you don’t dare say out loud.</p><p>在 “适应良好” 这类词流行的时代，人们似乎认为，如果你心里想的事情不敢大声说出来，那你一定有问题。这其实搞反了。几乎可以肯定，如果你心里没有不敢大声说的想法，那才是有问题。</p><h3 id="Trouble"><a href="#Trouble" class="headerlink" title="Trouble"></a><strong>Trouble</strong></h3><p><strong>麻烦</strong></p><p>What can’t we say? One way to find these ideas is simply to look at things people do say, and get in trouble for. [2]</p><p>我们不能说的话是什么？一种找到这些观点的方法，就是看看人们说了什么，然后因此惹上麻烦。</p><p>Of course, we’re not just looking for things we can’t say. We’re looking for things we can’t say that are true, or at least have enough chance of being true that the question should remain open. But many of the things people get in trouble for saying probably do make it over this second, lower threshold. No one gets in trouble for saying that 2 + 2 is 5, or that people in Pittsburgh are ten feet tall. Such obviously false statements might be treated as jokes, or at worst as evidence of insanity, but they are not likely to make anyone mad. The statements that make people mad are the ones they worry might be believed. I suspect the statements that make people maddest are those they worry might be true.</p><p>当然，我们不只是找 “不能说的话”，我们要找的是那些 “不能说但可能是真的” 的话，或者至少是有足够可能性为真、值得继续探讨的话。但人们因为说了某些话而惹上麻烦，很多时候这些话很可能达到了这个较低的标准。没人会因为说 “2+2&#x3D;5” 或 “匹兹堡人有十英尺高” 而惹麻烦。这种明显错误的说法可能会被当成玩笑，最坏也只是被认为是疯话，但不太可能让人愤怒。让人愤怒的话，是那些他们担心别人会相信的话。我怀疑，最让人愤怒的话，是那些他们担心可能是真的话。</p><p>If Galileo had said that people in Padua were ten feet tall, he would have been regarded as a harmless eccentric. Saying the earth orbited the sun was another matter. The church knew this would set people thinking.</p><p>如果伽利略说帕多瓦人有十英尺高，他可能会被当成一个无害的怪人。但说地球绕着太阳转，情况就完全不同了。教会知道，这话会让人们开始思考。</p><p>Certainly, as we look back on the past, this rule of thumb works well. A lot of the statements people got in trouble for seem harmless now. So it’s likely that visitors from the future would agree with at least some of the statements that get people in trouble today. Do we have no Galileos? Not likely.</p><p>当然，当我们回顾过去时，这个经验法则很管用。很多过去让人惹上麻烦的话，现在看来都无伤大雅。所以，未来的人很可能会认同至少一部分现在让人惹麻烦的话。我们这个时代没有伽利略式的人物吗？不太可能。</p><p>To find them, keep track of opinions that get people in trouble, and start asking, could this be true? Ok, it may be heretical (or whatever modern equivalent), but might it also be true?</p><p>要找到这些话，就要留意那些让人惹上麻烦的观点，然后开始问：这可能是真的吗？好吧，它可能是异端邪说（或任何现代的等价说法），但它会不会也是真的？</p><h3 id="Heresy"><a href="#Heresy" class="headerlink" title="Heresy"></a><strong>Heresy</strong></h3><p><strong>异端邪说</strong></p><p>This won’t get us all the answers, though. What if no one happens to have gotten in trouble for a particular idea yet? What if some idea would be so radioactively controversial that no one would dare express it in public? How can we find these too?</p><p>但这还不能给我们所有答案。如果某个观点还没人因为说它而惹上麻烦呢？如果某个观点争议性太大，以至于没人敢在公共场合表达呢？我们又该怎么找到这些观点？</p><p>Another approach is to follow that word, heresy. In every period of history, there seem to have been labels that got applied to statements to shoot them down before anyone had a chance to ask if they were true or not. “Blasphemy”, “sacrilege”, and “heresy” were such labels for a good part of western history, as in more recent times “indecent”, “improper”, and “unamerican” have been. By now these labels have lost their sting. They always do. By now they’re mostly used ironically. But in their time, they had real force.</p><p>另一种方法是追踪 “异端邪说” 这个词。历史上的每个时期，似乎都有一些标签被贴在某些言论上，不等别人质疑其真假就将其否定。在西方历史的大部分时间里，“亵渎神明”“亵渎圣物”“异端邪说” 就是这样的标签；而在更近的时代，“不雅”“不当”“非美国式” 也扮演了同样的角色。现在这些标签已经失去了杀伤力。它们总会走到这一步。现在它们大多被用于讽刺。但在当时，它们的力量是实实在在的。</p><p>The word “defeatist”, for example, has no particular political connotations now. But in Germany in 1917 it was a weapon, used by Ludendorff in a purge of those who favored a negotiated peace. At the start of World War II it was used extensively by Churchill and his supporters to silence their opponents. In 1940, any argument against Churchill’s aggressive policy was “defeatist”. Was it right or wrong? Ideally, no one got far enough to ask that.</p><p>比如 “失败主义者” 这个词，现在没有特别的政治含义。但在 1917 年的德国，它成了一种武器，鲁登道夫用它来清洗那些主张和谈的人。二战初期，丘吉尔及其支持者广泛使用这个词来压制反对者。1940 年，任何反对丘吉尔激进政策的言论都被称为 “失败主义”。这种说法对不对？理想情况下，没人有机会去问这个问题。</p><p>We have such labels today, of course, quite a lot of them, from the all-purpose “inappropriate” to the dreaded “divisive.” In any period, it should be easy to figure out what such labels are, simply by looking at what people call ideas they disagree with besides untrue. When a politician says his opponent is mistaken, that’s a straightforward criticism, but when he attacks a statement as “divisive” or “racially insensitive” instead of arguing that it’s false, we should start paying attention.</p><p>当然，我们现在也有这样的标签，而且很多，从万能的 “不合适” 到可怕的 “分裂性”。在任何时代，要找出这些标签都很容易，只需看看人们除了说 “错误” 之外，还用什么词来形容他们不认同的观点。当一个政客说对手错了，这是直截了当的批评；但如果他不反驳观点的真实性，而是攻击其 “具有分裂性” 或 “种族不敏感”，我们就该留意了。</p><p>So another way to figure out which of our taboos future generations will laugh at is to start with the labels. Take a label — “sexist”, for example — and try to think of some ideas that would be called that. Then for each ask, might this be true?</p><p>所以，另一种找出哪些禁忌会被未来 generations 嘲笑的方法，是从这些标签入手。选一个标签 —— 比如 “性别歧视”—— 然后试着想一些会被贴上这个标签的观点。然后对每个观点问：这可能是真的吗？</p><p>Just start listing ideas at random? Yes, because they won’t really be random. The ideas that come to mind first will be the most plausible ones. They’ll be things you’ve already noticed but didn’t let yourself think.</p><p>只是随机列出观点吗？是的，因为它们不会真的随机。最先想到的观点往往是最合理的，是你已经注意到但不敢去想的事情。</p><p>In 1989 some clever researchers tracked the eye movements of radiologists as they scanned chest images for signs of lung cancer. [3] They found that even when the radiologists missed a cancerous lesion, their eyes had usually paused at the site of it. Part of their brain knew there was something there; it just didn’t percolate all the way up into conscious knowledge. I think many interesting heretical thoughts are already mostly formed in our minds. If we turn off our self-censorship temporarily, those will be the first to emerge.</p><p>1989 年，一些聪明的研究人员追踪了放射科医生在扫描胸部图像寻找肺癌迹象时的眼球运动。他们发现，即使放射科医生漏掉了癌变病灶，他们的眼睛通常也会在病灶处停顿。他们大脑的一部分知道那里有问题，只是没有完全上升到有意识的认知层面。我认为，很多有趣的异端想法在我们脑海中已经基本形成。如果我们暂时关掉自我审查，这些想法就会最先冒出来。</p><h3 id="Time-and-Space"><a href="#Time-and-Space" class="headerlink" title="Time and Space"></a><strong>Time and Space</strong></h3><p><strong>时间与空间</strong></p><p>If we could look into the future it would be obvious which of our taboos they’d laugh at. We can’t do that, but we can do something almost as good: we can look into the past. Another way to figure out what we’re getting wrong is to look at what used to be acceptable and is now unthinkable.</p><p>如果我们能看到未来，就会清楚哪些禁忌会被他们嘲笑。我们做不到这一点，但可以做一件差不多的事：回顾过去。另一种找出我们哪里出错的方法，是看看过去能被接受但现在难以想象的事情。</p><p>Changes between the past and the present sometimes do represent progress. In a field like physics, if we disagree with past generations it’s because we’re right and they’re wrong. But this becomes rapidly less true as you move away from the certainty of the hard sciences. By the time you get to social questions, many changes are just fashion. The age of consent fluctuates like hemlines.</p><p>过去与现在的变化有时确实代表进步。在物理学这样的领域，如果我们与前人观点不同，是因为我们对了，他们错了。但当你离开硬科学的确定性领域时，这一点就越来越不成立了。到了社会问题上，很多变化只是时尚而已。法定同意年龄的波动就像裙摆的长短一样。</p><p>We may imagine that we are a great deal smarter and more virtuous than past generations, but the more history you read, the less likely this seems. People in past times were much like us. Not heroes, not barbarians. Whatever their ideas were, they were ideas reasonable people could believe.</p><p>我们可能会想象自己比前人聪明得多、道德得多，但你读的历史越多，就越会觉得这不可能。过去的人和我们很像，既不是英雄，也不是野蛮人。无论他们的想法是什么，都是理性的人可能相信的。</p><p>So here is another source of interesting heresies. Diff present ideas against those of various past cultures, and see what you get. [4] Some will be shocking by present standards. Ok, fine; but which might also be true?</p><p>所以，这是另一个有趣的异端思想来源。将现在的观点与不同过去文化的观点进行对比，看看会发现什么。有些观点按现在的标准来看会很惊人。好吧，那又怎样；但其中哪些可能也是真的呢？</p><p>You don’t have to look into the past to find big differences. In our own time, different societies have wildly varying ideas of what’s ok and what isn’t. So you can try diffing other cultures’ ideas against ours as well. (The best way to do that is to visit them.) Any idea that’s considered harmless in a significant percentage of times and places, and yet is taboo in ours, is a candidate for something we’re mistaken about.</p><p>你不必回溯过去就能发现巨大差异。在我们这个时代，不同社会对 “可接受” 和 “不可接受” 的定义差异很大。所以你也可以试着将其他文化的观点与我们的进行对比（最好的方法是去那些地方看看）。如果一个观点在相当多的时代和地方都被认为是无害的，但在我们这里却是禁忌，那它很可能是我们搞错了。</p><p>For example, at the high water mark of political correctness in the early 1990s, Harvard distributed to its faculty and staff a brochure saying, among other things, that it was inappropriate to compliment a colleague or student’s clothes. No more “nice shirt.” I think this principle is rare among the world’s cultures, past or present. There are probably more where it’s considered especially polite to compliment someone’s clothing than where it’s considered improper. Odds are this is, in a mild form, an example of one of the taboos a visitor from the future would have to be careful to avoid if he happened to set his time machine for Cambridge, Massachusetts, 1992. [5]</p><p>例如，在 20 世纪 90 年代初政治正确达到顶峰时，哈佛大学向教职工分发了一本手册，其中提到，赞美同事或学生的衣服是不合适的，不能再说 “衬衫真好看”。我认为，无论在过去还是现在的世界文化中，这种原则都很罕见。在更多文化中，赞美别人的衣服被视为特别礼貌，而不是不当行为。很可能，这是一个温和的例子：如果未来的人乘时光机来到 1992 年的马萨诸塞州剑桥市，这就是他们必须小心避免的禁忌之一。</p><h3 id="Prigs"><a href="#Prigs" class="headerlink" title="Prigs"></a><strong>Prigs</strong></h3><p><strong>一本正经的人</strong></p><p>Of course, if they have time machines in the future they’ll probably have a separate reference manual just for Cambridge. This has always been a fussy place, a town of i dotters and t crossers, where you’re liable to get both your grammar and your ideas corrected in the same conversation. And that suggests another way to find taboos. Look for prigs, and see what’s inside their heads.</p><p>当然，如果未来有时间机器，他们可能会为剑桥单独准备一本参考手册。这地方向来挑剔，是个连 i 都要加点、t 都要加横的小镇，在一次对话中，你的语法和观点都可能被纠正。这提示了另一种发现禁忌的方法：看看那些一本正经的人，想想他们脑子里装着什么。</p><p>Kids’ heads are repositories of all our taboos. It seems fitting to us that kids’ ideas should be bright and clean. The picture we give them of the world is not merely simplified, to suit their developing minds, but sanitized as well, to suit our ideas of what kids ought to think. [6]</p><p>孩子们的头脑里装满了我们所有的禁忌。我们觉得，孩子们的想法就应该是纯洁无瑕的。我们给他们描绘的世界，不仅为了适应他们正在发育的心智而简化，还为了符合我们对 “孩子应该想什么” 的设想而净化。</p><p>You can see this on a small scale in the matter of dirty words. A lot of my friends are starting to have children now, and they’re all trying not to use words like “fuck” and “shit” within baby’s hearing, lest baby start using these words too. But these words are part of the language, and adults use them all the time. So parents are giving their kids an inaccurate idea of the language by not using them. Why do they do this? Because they don’t think it’s fitting that kids should use the whole language. We like children to seem innocent. [7]</p><p>在脏话这件事上，你能看到一个小缩影。我的很多朋友开始有孩子了，他们都尽量不在婴儿能听到的地方说 “他妈的”“狗屁” 之类的词，生怕孩子也学会说。但这些词是语言的一部分，成年人一直在用。所以父母们通过不说这些词，给了孩子一个不真实的语言印象。他们为什么要这么做？因为他们觉得孩子不应该使用完整的语言，我们喜欢孩子看起来天真无邪。</p><p>Most adults, likewise, deliberately give kids a misleading view of the world. One of the most obvious examples is Santa Claus. We think it’s cute for little kids to believe in Santa Claus. I myself think it’s cute for little kids to believe in Santa Claus. But one wonders, do we tell them this stuff for their sake, or for ours?</p><p>同样，大多数成年人故意给孩子一个误导性的世界观。最明显的例子之一就是圣诞老人。我们觉得小孩子相信圣诞老人很可爱，我自己也这么觉得。但有人会想，我们告诉他们这些，是为了他们，还是为了我们自己？</p><p>I’m not arguing for or against this idea here. It is probably inevitable that parents should want to dress up their kids’ minds in cute little baby outfits. I’ll probably do it myself. The important thing for our purposes is that, as a result, a well brought-up teenage kid’s brain is a more or less complete collection of all our taboos — and in mint condition, because they’re untainted by experience. Whatever we think that will later turn out to be ridiculous, it’s almost certainly inside that head.</p><p>我在这里不争论这种做法的对错。父母想把孩子的思想打扮得像可爱的婴儿装一样，这可能是不可避免的，我自己可能也会这么做。对我们的目的来说，重要的是：因此，一个教养良好的青少年的头脑，差不多就是我们所有禁忌的集合 —— 而且完好无损，因为它们还没被经验污染。无论我们现在相信的什么东西将来会被证明是荒谬的，几乎肯定都在那个头脑里。</p><p>How do we get at these ideas? By the following thought experiment. Imagine a kind of latter-day Conrad character who has worked for a time as a mercenary in Africa, for a time as a doctor in Nepal, for a time as the manager of a nightclub in Miami. The specifics don’t matter — just someone who has seen a lot. Now imagine comparing what’s inside this guy’s head with what’s inside the head of a well-behaved sixteen year old girl from the suburbs. What does he think that would shock her? He knows the world; she knows, or at least embodies, present taboos. Subtract one from the other, and the result is what we can’t say.</p><p>我们如何理解这些观点？可以做一个思想实验。想象一个类似康拉德笔下的现代人物：他在非洲当过雇佣兵，在尼泊尔当过医生，在迈阿密当过夜总会经理。具体经历不重要，重要的是他见多识广。现在，想象把他脑子里的想法和一个来自郊区、行为端正的 16 岁女孩脑子里的想法做对比。他的哪些想法会让她震惊？他了解世界，而她知道（或者至少体现了）当下的禁忌。用前者减去后者，结果就是我们不能说的话。</p><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a><strong>Mechanism</strong></h3><p><strong>机制</strong></p><p>I can think of one more way to figure out what we can’t say: to look at how taboos are created. How do moral fashions arise, and why are they adopted? If we can understand this mechanism, we may be able to see it at work in our own time.</p><p>我还能想到另一种找出 “不能说的话” 的方法：看看禁忌是如何产生的。道德时尚是如何兴起的？人们为什么会接受它们？如果我们能理解这个机制，或许就能看到它在我们这个时代的运作。</p><p>Moral fashions don’t seem to be created the way ordinary fashions are. Ordinary fashions seem to arise by accident when everyone imitates the whim of some influential person. The fashion for broad-toed shoes in late fifteenth century Europe began because Charles VIII of France had six toes on one foot. The fashion for the name Gary began when the actor Frank Cooper adopted the name of a tough mill town in Indiana. Moral fashions more often seem to be created deliberately. When there’s something we can’t say, it’s often because some group doesn’t want us to.</p><p>道德时尚的产生方式似乎和普通时尚不同。普通时尚往往是偶然兴起的：所有人都模仿某个有影响力的人的一时兴起。15 世纪末欧洲流行宽头鞋，是因为法国查理八世一只脚有六个脚趾。“加里” 这个名字的流行，始于演员弗兰克・库珀采用了印第安纳州一个粗犷的工厂小镇的名字。而道德时尚似乎更多是刻意创造的。当有些话我们不能说时，往往是因为某个群体不希望我们说。</p><p>The prohibition will be strongest when the group is nervous. The irony of Galileo’s situation was that he got in trouble for repeating Copernicus’s ideas. Copernicus himself didn’t. In fact, Copernicus was a canon of a cathedral, and dedicated his book to the pope. But by Galileo’s time the church was in the throes of the Counter-Reformation and was much more worried about unorthodox ideas.</p><p>当一个群体感到不安时，禁令会最严格。伽利略的遭遇很讽刺：他因为重复哥白尼的观点而惹上麻烦，哥白尼本人却没有。事实上，哥白尼是一个大教堂的教士，还把他的书献给了教皇。但到了伽利略时代，教会正处于反宗教改革的阵痛中，对非正统思想更加担忧。</p><p>To launch a taboo, a group has to be poised halfway between weakness and power. A confident group doesn’t need taboos to protect it. It’s not considered improper to make disparaging remarks about Americans, or the English. And yet a group has to be powerful enough to enforce a taboo. Coprophiles, as of this writing, don’t seem to be numerous or energetic enough to have had their interests promoted to a lifestyle.</p><p>要发起一个禁忌，一个群体必须处于弱势与强势之间。一个自信的群体不需要用禁忌来保护自己。说美国人或英国人的坏话，不会被认为是不当行为。但一个群体必须有足够的力量来执行禁忌。就目前而言，嗜粪者的数量和活力似乎还不足以让他们的喜好被提升为一种生活方式。</p><p>I suspect the biggest source of moral taboos will turn out to be power struggles in which one side only barely has the upper hand. That’s where you’ll find a group powerful enough to enforce taboos, but weak enough to need them.</p><p>我怀疑，道德禁忌的最大来源是权力斗争 —— 其中一方只是勉强占上风。在这种情况下，你会发现一个群体有足够的力量执行禁忌，但又弱到需要禁忌来保护自己。</p><p>Most struggles, whatever they’re really about, will be cast as struggles between competing ideas. The English Reformation was at bottom a struggle for wealth and power, but it ended up being cast as a struggle to preserve the souls of Englishmen from the corrupting influence of Rome. It’s easier to get people to fight for an idea. And whichever side wins, their ideas will also be considered to have triumphed, as if God wanted to signal his agreement by selecting that side as the victor.</p><p>大多数斗争，无论其本质是什么，都会被包装成不同思想之间的斗争。英国宗教改革本质上是一场争夺财富和权力的斗争，但最终被包装成一场保护英国人的灵魂免受罗马腐败影响的斗争。让人们为一个理念而战更容易。而且，无论哪一方获胜，他们的理念也会被认为是胜利的，仿佛上帝通过选择这一方作为胜利者来表明他的认同。</p><p>We often like to think of World War II as a triumph of freedom over totalitarianism. We conveniently forget that the Soviet Union was also one of the winners.</p><p>我们常常喜欢把二战看作是自由对极权主义的胜利。我们轻易忘记了，苏联也是胜利者之一。</p><p>I’m not saying that struggles are never about ideas, just that they will always be made to seem to be about ideas, whether they are or not. And just as there is nothing so unfashionable as the last, discarded fashion, there is nothing so wrong as the principles of the most recently defeated opponent. Representational art is only now recovering from the approval of both Hitler and Stalin. [8]</p><p>我不是说斗争从不涉及理念，只是说无论是否涉及，它们总会被包装成与理念有关。就像没有什么比上一个被抛弃的时尚更过时一样，没有什么比最近被击败的对手的原则更 “错误” 的了。写实艺术直到现在才从希特勒和斯大林都对其表示认可的阴影中恢复过来。</p><p>Although moral fashions tend to arise from different sources than fashions in clothing, the mechanism of their adoption seems much the same. The early adopters will be driven by ambition: self-consciously cool people who want to distinguish themselves from the common herd. As the fashion becomes established they’ll be joined by a second, much larger group, driven by fear. [9] This second group adopt the fashion not because they want to stand out but because they are afraid of standing out.</p><p>尽管道德时尚的起源与服装时尚不同，但人们接受它们的机制似乎很相似。早期接受者受野心驱动：那些刻意追求酷、想与大众区分开的人。当这种时尚确立后，会有第二个、规模大得多的群体加入，他们受恐惧驱动。这第二个群体接受时尚，不是因为想脱颖而出，而是因为害怕脱颖而出。</p><p>So if you want to figure out what we can’t say, look at the machinery of fashion and try to predict what it would make unsayable. What groups are powerful but nervous, and what ideas would they like to suppress? What ideas were tarnished by association when they ended up on the losing side of a recent struggle? If a self-consciously cool person wanted to differentiate himself from preceding fashions (e.g. from his parents), which of their ideas would he tend to reject? What are conventional-minded people afraid of saying?</p><p>所以，如果你想找出我们不能说的话，就看看时尚的运作机制，试着预测它会让哪些话变得不能说。哪些群体有权势但内心不安？他们想压制哪些观点？哪些观点因为与最近斗争中的失败者有关联而被抹黑？如果一个刻意追求酷的人想与之前的时尚（比如他父母的时尚）区分开，他会倾向于拒绝哪些观点？思想保守的人害怕说什么？</p><p>This technique won’t find us all the things we can’t say. I can think of some that aren’t the result of any recent struggle. Many of our taboos are rooted deep in the past. But this approach, combined with the preceding four, will turn up a good number of unthinkable ideas.</p><p>这种方法不能帮我们找到所有不能说的话。我能想到一些并非源于最近斗争的禁忌，我们的很多禁忌都深深植根于过去。但这种方法与前面四种方法结合起来，会发现很多 “不可想象” 的观点。</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a><strong>Why</strong></h3><p><strong>为什么</strong></p><p>Some would ask, why would one want to do this? Why deliberately go poking around among nasty, disreputable ideas? Why look under rocks?</p><p>有人会问，为什么要这么做？为什么要故意去探究那些令人不快、名声不好的想法？为什么要去翻石头？</p><p>I do it, first of all, for the same reason I did look under rocks as a kid: plain curiosity. And I’m especially curious about anything that’s forbidden. Let me see and decide for myself.</p><p>首先，我这么做的原因和小时候翻石头一样：纯粹的好奇心。而且我对任何被禁止的东西都特别好奇。让我自己看看，自己做判断。</p><p>Second, I do it because I don’t like the idea of being mistaken. If, like other eras, we believe things that will later seem ridiculous, I want to know what they are so that I, at least, can avoid believing them.</p><p>其次，是因为我不喜欢犯错。如果和其他时代一样，我们现在相信的东西将来会显得荒谬，我想知道它们是什么，这样至少我可以避免相信它们。</p><p>Third, I do it because it’s good for the brain. To do good work you need a brain that can go anywhere. And you especially need a brain that’s in the habit of going where it’s not supposed to.</p><p>第三，是因为这对大脑有好处。要做好工作，你需要一个能去往任何地方的大脑。尤其需要一个习惯去那些 “不应该去” 的地方的大脑。</p><p>Great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one that’s unthinkable. Natural selection, for example. It’s so simple. Why didn’t anyone think of it before? Well, that is all too obvious. Darwin himself was careful to tiptoe around the implications of his theory. He wanted to spend his time thinking about biology, not arguing with people who accused him of being an atheist.</p><p>伟大的成就往往源于别人忽视的想法，而没有什么想法比 “不可想象” 的想法更被忽视的了。比如自然选择理论，它如此简单，为什么以前没人想到？答案太明显了。达尔文自己都小心翼翼地回避他理论的隐含意义。他想把时间花在思考生物学上，而不是和指责他是无神论者的人争论。</p><p>In the sciences, especially, it’s a great advantage to be able to question assumptions. The m.o. of scientists, or at least of the good ones, is precisely that: look for places where conventional wisdom is broken, and then try to pry apart the cracks and see what’s underneath. That’s where new theories come from.</p><p>尤其是在科学领域，能够质疑假设是一个巨大的优势。科学家（至少是优秀的科学家）的做法正是如此：寻找传统观念出错的地方，然后试着撬开裂缝，看看下面是什么。新理论就是这么来的。</p><p>A good scientist, in other words, does not merely ignore conventional wisdom, but makes a special effort to break it. Scientists go looking for trouble. This should be the m.o. of any scholar, but scientists seem much more willing to look under rocks. [10]</p><p>换句话说，优秀的科学家不仅无视传统观念，还会特意去打破它。科学家主动寻找麻烦。这应该是所有学者的做法，但科学家似乎更愿意去翻石头。</p><p>Why? It could be that the scientists are simply smarter; most physicists could, if necessary, make it through a PhD program in French literature, but few professors of French literature could make it through a PhD program in physics. Or it could be because it’s clearer in the sciences whether theories are true or false, and this makes scientists bolder. (Or it could be that, because it’s clearer in the sciences whether theories are true or false, you have to be smart to get jobs as a scientist, rather than just a good politician.)</p><p>为什么？可能是因为科学家更聪明：大多数物理学家如果有必要，能完成法国文学的博士课程，但很少有法国文学教授能完成物理学的博士课程。也可能是因为在科学领域，理论的对错更清晰，这让科学家更大胆。（或者，正因为科学领域理论的对错更清晰，要成为科学家就必须聪明，而不只是擅长搞政治。）</p><p>Whatever the reason, there seems a clear correlation between intelligence and willingness to consider shocking ideas. This isn’t just because smart people actively work to find holes in conventional thinking. I think conventions also have less hold over them to start with. You can see that in the way they dress.</p><p>无论原因是什么，智力和愿意考虑惊人想法之间似乎有明显的相关性。这不仅仅是因为聪明人主动寻找传统思维的漏洞，我认为传统观念对他们的束缚从一开始就更少。你从他们的穿着就能看出来。</p><p>It’s not only in the sciences that heresy pays off. In any competitive field, you can win big by seeing things that others daren’t. And in every field there are probably heresies few dare utter. Within the US car industry there is a lot of hand-wringing now about declining market share. Yet the cause is so obvious that any observant outsider could explain it in a second: they make bad cars. And they have for so long that by now the US car brands are antibrands — something you’d buy a car despite, not because of. Cadillac stopped being the Cadillac of cars in about 1970. And yet I suspect no one dares say this. [11] Otherwise these companies would have tried to fix the problem.</p><p>异端思想带来回报的不只是科学领域。在任何竞争领域，看到别人不敢看的东西，你都能大获成功。而且每个领域可能都有很少人敢说的异端思想。现在美国汽车行业对市场份额下降忧心忡忡，但原因很明显，任何敏锐的外人都能一眼看穿：他们造的车不好。而且这种情况持续了太久，现在美国汽车品牌成了 “反品牌”—— 你买它们的车是尽管有这个品牌，而不是因为这个品牌。凯迪拉克大约在 1970 年就不再是 “汽车中的凯迪拉克” 了。但我怀疑没人敢说这话，否则这些公司早就试着解决问题了。</p><p>Training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves. It’s like stretching. When you stretch before running, you put your body into positions much more extreme than any it will assume during the run. If you can think things so outside the box that they’d make people’s hair stand on end, you’ll have no trouble with the small trips outside the box that people call innovative.</p><p>训练自己去想 “不可想象” 的想法，好处不止于想法本身。这就像拉伸运动：跑步前拉伸时，你的身体会摆出比跑步时任何姿势都更极端的姿势。如果你能想出跳出常规到让人震惊的想法，那么那些人们称之为 “创新” 的小突破对你来说就不在话下了。</p><h3 id="Pensieri-Stretti"><a href="#Pensieri-Stretti" class="headerlink" title="Pensieri Stretti"></a><strong>Pensieri Stretti</strong></h3><p><strong>内心封闭</strong></p><p>When you find something you can’t say, what do you do with it? My advice is, don’t say it. Or at least, pick your battles.</p><p>当你发现不能说的话时，该怎么办？我的建议是，别说。或者至少，选好要打的仗。</p><p>Suppose in the future there is a movement to ban the color yellow. Proposals to paint anything yellow are denounced as “yellowist”, as is anyone suspected of liking the color. People who like orange are tolerated but viewed with suspicion. Suppose you realize there is nothing wrong with yellow. If you go around saying this, you’ll be denounced as a yellowist too, and you’ll find yourself having a lot of arguments with anti-yellowists. If your aim in life is to rehabilitate the color yellow, that may be what you want. But if you’re mostly interested in other questions, being labelled as a yellowist will just be a distraction. Argue with idiots, and you become an idiot.</p><p>假设未来有一场禁止黄色的运动。任何提议把东西涂成黄色的人都被谴责为 “黄色主义者”，任何被怀疑喜欢黄色的人也是如此。喜欢橙色的人会被容忍，但会受到怀疑。假设你意识到黄色没什么问题，如果你到处说这话，也会被谴责为黄色主义者，还会和反黄色主义者发生很多争论。如果你的人生目标是为黄色正名，那这可能是你想要的。但如果你主要对其他问题感兴趣，被贴上黄色主义者的标签只会让你分心。和傻瓜争论，你也会变成傻瓜。</p><p>The most important thing is to be able to think what you want, not to say what you want. And if you feel you have to say everything you think, it may inhibit you from thinking improper thoughts. I think it’s better to follow the opposite policy. Draw a sharp line between your thoughts and your speech. Inside your head, anything is allowed. Within my head I make a point of encouraging the most outrageous thoughts I can imagine. But, as in a secret society, nothing that happens within the building should be told to outsiders. The first rule of Fight Club is, you do not talk about Fight Club.</p><p>最重要的是能够想你所想，而不是说你所想。如果你觉得必须把所有想法都说出来，可能会抑制你去想 “不当” 的想法。我认为更好的做法是相反的策略：在思想和言论之间划一条清晰的界限。在你的头脑里，任何想法都被允许。我会特意在自己的头脑里鼓励最离谱的想法。但就像秘密社团一样，社团内部发生的事情不能告诉外人。《搏击俱乐部》的第一条规则就是：不许谈论搏击俱乐部。</p><p>When Milton was going to visit Italy in the 1630s, Sir Henry Wootton, who had been ambassador to Venice, told him his motto should be “i pensieri stretti &amp; il viso sciolto.” Closed thoughts and an open face. Smile at everyone, and don’t tell them what you’re thinking. This was wise advice. Milton was an argumentative fellow, and the Inquisition was a bit restive at that time. But I think the difference between Milton’s situation and ours is only a matter of degree. Every era has its heresies, and if you don’t get imprisoned for them you will at least get in enough trouble that it becomes a complete distraction.</p><p>17 世纪 30 年代，弥尔顿准备访问意大利时，曾担任威尼斯大使的亨利・沃顿爵士告诉他，他的座右铭应该是 “i pensieri stretti &amp; il viso sciolto”（内心封闭，表情开放）。对每个人微笑，但不告诉他们你在想什么。这是明智的建议。弥尔顿爱争论，而当时宗教裁判所有些不安分。但我认为，弥尔顿的处境和我们的处境只是程度不同。每个时代都有异端邪说，如果你不会因此入狱，至少也会惹上足够多的麻烦，让你完全分心。</p><p>I admit it seems cowardly to keep quiet. When I read about the harassment to which the Scientologists subject their critics [12], or that pro-Israel groups are “compiling dossiers” on those who speak out against Israeli human rights abuses [13], or about people being sued for violating the DMCA [14], part of me wants to say, “All right, you bastards, bring it on.” The problem is, there are so many things you can’t say. If you said them all you’d have no time left for your real work. You’d have to turn into Noam Chomsky. [15]</p><p>我承认，保持沉默看起来像懦弱。当我读到山达基教会骚扰批评者，或亲以色列团体 “汇编档案” 对付那些公开反对以色列侵犯人权的人，或有人因违反《数字千年版权法》而被起诉时，我心里有个声音想说：“好吧，你们这些混蛋，放马过来。” 但问题是，不能说的话太多了。如果你把它们都说出来，就没时间做真正的工作了，你就得变成诺姆・乔姆斯基那样。</p><p>The trouble with keeping your thoughts secret, though, is that you lose the advantages of discussion. Talking about an idea leads to more ideas. So the optimal plan, if you can manage it, is to have a few trusted friends you can speak openly to. This is not just a way to develop ideas; it’s also a good rule of thumb for choosing friends. The people you can say heretical things to without getting jumped on are also the most interesting to know.</p><p>但把想法藏在心里的问题是，你会失去讨论的好处。谈论一个想法会产生更多想法。所以，如果你能做到，最好的计划是有几个可以坦诚交谈的 trusted 朋友。这不仅是发展想法的方式，也是选择朋友的好经验法则。那些你可以对他们说异端邪说而不被攻击的人，也是最有趣的人。</p><h3 id="Viso-Sciolto"><a href="#Viso-Sciolto" class="headerlink" title="Viso Sciolto?"></a><strong>Viso Sciolto?</strong></h3><p><strong>笑脸相迎？</strong></p><p>I don’t think we need the viso sciolto so much as the pensieri stretti. Perhaps the best policy is to make it plain that you don’t agree with whatever zealotry is current in your time, but not to be too specific about what you disagree with. Zealots will try to draw you out, but you don’t have to answer them. If they try to force you to treat a question on their terms by asking “are you with us or against us?” you can always just answer “neither”.</p><p>我认为我们不需要 “笑脸相迎”，更需要 “守口如瓶”。或许最好的策略是表明你不同意当下任何狂热的观点，但不必具体说明不同意什么。狂热分子会试图让你表态，但你不必回答他们。如果他们试图用 “你是支持我们还是反对我们” 来逼你按他们的方式看待问题，你总能回答 “都不是”。</p><p>Better still, answer “I haven’t decided.” That’s what Larry Summers did when a group tried to put him in this position. Explaining himself later, he said “I don’t do litmus tests.” [16] A lot of the questions people get hot about are actually quite complicated. There is no prize for getting the answer quickly.</p><p>更好的是回答 “我还没决定”。拉里・萨默斯在遇到有人试图逼他表态时就是这么做的。后来他解释说：“我不搞石蕊测试（即非黑即白的测试）。” 很多让人们激动的问题其实相当复杂，快速给出答案没有奖励。</p><p>If the anti-yellowists seem to be getting out of hand and you want to fight back, there are ways to do it without getting yourself accused of being a yellowist. Like skirmishers in an ancient army, you want to avoid directly engaging the main body of the enemy’s troops. Better to harass them with arrows from a distance.</p><p>如果反黄色主义者似乎失控了，而你想反击，有一些方法可以让你不被指责为黄色主义者。就像古代军队的散兵一样，你要避免直接与敌人的主力交战，最好从远处用箭骚扰他们。</p><p>One way to do this is to ratchet the debate up one level of abstraction. If you argue against censorship in general, you can avoid being accused of whatever heresy is contained in the book or film that someone is trying to censor. You can attack labels with meta-labels: labels that refer to the use of labels to prevent discussion. The spread of the term “political correctness” meant the beginning of the end of political correctness, because it enabled one to attack the phenomenon as a whole without being accused of any of the specific heresies it sought to suppress.</p><p>一种方法是将辩论提升一个抽象层次。如果你笼统地反对审查制度，就可以避免被指责为支持某本书或电影中被审查的异端思想。你可以用 “元标签” 来攻击标签：即指代 “用标签阻止讨论” 这种行为的标签。“政治正确” 这个词的流行，意味着政治正确的终结开始了，因为它让人可以攻击整个现象，而不被指责为支持它试图压制的任何具体异端思想。</p><p>Another way to counterattack is with metaphor. Arthur Miller undermined the House Un-American Activities Committee by writing a play, “The Crucible,” about the Salem witch trials. He never referred directly to the committee and so gave them no way to reply. What could HUAC do, defend the Salem witch trials? And yet Miller’s metaphor stuck so well that to this day the activities of the committee are often described as a “witch-hunt.”</p><p>另一种反击方式是使用隐喻。阿瑟・米勒通过写一部关于塞勒姆女巫审判的戏剧《炼狱》，削弱了众议院非美活动调查委员会的影响力。他从未直接提及该委员会，所以他们无从反驳。非美委员会能怎么办？为塞勒姆女巫审判辩护吗？但米勒的隐喻太贴切了，直到今天，该委员会的行为仍常被描述为 “猎巫”。</p><p>Best of all, probably, is humor. Zealots, whatever their cause, invariably lack a sense of humor. They can’t reply in kind to jokes. They’re as unhappy on the territory of humor as a mounted knight on a skating rink. Victorian prudishness, for example, seems to have been defeated mainly by treating it as a joke. Likewise its reincarnation as political correctness. “I am glad that I managed to write ‘The Crucible,’” Arthur Miller wrote, “but looking back I have often wished I’d had the temperament to do an absurd comedy, which is what the situation deserved.” [17]</p><p>或许最好的方式是幽默。无论为了什么事业，狂热分子总是缺乏幽默感。他们无法用笑话来回应笑话。在幽默的领域，他们就像滑冰场上的骑士一样不自在。例如，维多利亚时代的伪善似乎主要是被当成笑话而被击败的，它的转世 “政治正确” 也是如此。阿瑟・米勒写道：“我很高兴写出了《炼狱》，但回想起来，我常常希望自己有那种气质去写一部荒诞喜剧，那才是这种情况应得的。”</p><h3 id="ABQ"><a href="#ABQ" class="headerlink" title="ABQ"></a><strong>ABQ</strong></h3><p><strong>阿尔布开克</strong></p><p>A Dutch friend says I should use Holland as an example of a tolerant society. It’s true they have a long tradition of comparative open-mindedness. For centuries the low countries were the place to go to say things you couldn’t say anywhere else, and this helped to make the region a center of scholarship and industry (which have been closely tied for longer than most people realize). Descartes, though claimed by the French, did much of his thinking in Holland.</p><p>一个荷兰朋友说，我应该用荷兰作为宽容社会的例子。的确，他们有悠久的相对开放的传统。几个世纪以来，低地国家（荷兰等）都是人们去说在其他地方不能说的话的地方，这帮助该地区成为学术和工业中心（学术和工业的紧密联系比大多数人意识到的要早得多）。笛卡尔虽然被法国人视为自己人，但他的很多思考是在荷兰完成的。</p><p>And yet, I wonder. The Dutch seem to live their lives up to their necks in rules and regulations. There’s so much you can’t do there; is there really nothing you can’t say?</p><p>然而，我很疑惑。荷兰人的生活似乎被各种规章制度包围，有太多事情不能做，难道真的没有不能说的话吗？</p><p>Certainly the fact that they value open-mindedness is no guarantee. Who thinks they’re not open-minded? Our hypothetical prim miss from the suburbs thinks she’s open-minded. Hasn’t she been taught to be? Ask anyone, and they’ll say the same thing: they’re pretty open-minded, though they draw the line at things that are really wrong. (Some tribes may avoid “wrong” as judgemental, and may instead use a more neutral sounding euphemism like “negative” or “destructive”.)</p><p>当然，他们重视开放思想这一事实并不能保证没有禁忌。谁会认为自己不开放呢？我们假设的那个来自郊区的一本正经的女孩，就认为自己是开放的。难道她没被教导要开放吗？问任何人，他们都会说同样的话：他们相当开放，但在 “真正错误” 的事情上会划清界限。（有些群体可能避免用 “错误” 这种评判性词汇，而是用更中性的委婉说法，比如 “负面的” 或 “破坏性的”。）</p><p>When people are bad at math, they know it, because they get the wrong answers on tests. But when people are bad at open-mindedness they don’t know it. In fact they tend to think the opposite. Remember, it’s the nature of fashion to be invisible. It wouldn’t work otherwise. Fashion doesn’t seem like fashion to someone in the grip of it. It just seems like the right thing to do. It’s only by looking from a distance that we see oscillations in people’s idea of the right thing to do, and can identify them as fashions.</p><p>当人们数学不好时，他们知道，因为他们在测试中会答错。但当人们不开放时，他们不知道，事实上他们往往认为自己很开放。记住，时尚的本质是让人察觉不到，否则就不起作用了。对深陷其中的人来说，时尚不像是时尚，而只是 “正确的做法”。只有从远处看，我们才能看到人们对 “正确做法” 的看法在波动，并意识到它们是时尚。</p><p>Time gives us such distance for free. Indeed, the arrival of new fashions makes old fashions easy to see, because they seem so ridiculous by contrast. From one end of a pendulum’s swing, the other end seems especially far away.</p><p>时间免费给了我们这种距离。事实上，新时尚的到来让旧时尚变得明显，因为对比之下它们显得很荒谬。从钟摆摆动的一端看，另一端似乎特别遥远。</p><p>To see fashion in your own time, though, requires a conscious effort. Without time to give you distance, you have to create distance yourself. Instead of being part of the mob, stand as far away from it as you can and watch what it’s doing. And pay especially close attention whenever an idea is being suppressed. Web filters for children and employees often ban sites containing pornography, violence, and hate speech. What counts as pornography and violence? And what, exactly, is “hate speech?” This sounds like a phrase out of 1984.</p><p>然而，要看到自己时代的时尚，需要有意识的努力。没有时间给你距离，你就得自己创造距离。不要成为群体的一员，而要尽可能远离它，观察它在做什么。而且，每当一个观点被压制时，要特别留意。针对儿童和员工的网络过滤器通常会屏蔽包含色情、暴力和仇恨言论的网站。什么算色情和暴力？“仇恨言论” 到底是什么？这听起来像《1984》里的词。</p><p>Labels like that are probably the biggest external clue. If a statement is false, that’s the worst thing you can say about it. You don’t need to say that it’s heretical. And if it isn’t false, it shouldn’t be suppressed. So when you see statements being attacked as x-ist or y-ic (substitute your current values of x and y), whether in 1630 or 2030, that’s a sure sign that something is wrong. When you hear such labels being used, ask why.</p><p>这样的标签可能是最大的外部线索。如果一个说法是错误的，那就是对它最糟糕的评价，你不需要说它是异端。如果它不是错误的，就不应该被压制。所以，无论在 1630 年还是 2030 年，当你看到某些言论被攻击为 “x 主义” 或 “y 性质”（代入你当下的 x 和 y）时，这肯定是有问题的信号。当你听到这样的标签时，问问为什么。</p><p>Especially if you hear yourself using them. It’s not just the mob you need to learn to watch from a distance. You need to be able to watch your own thoughts from a distance. That’s not a radical idea, by the way; it’s the main difference between children and adults. When a child gets angry because he’s tired, he doesn’t know what’s happening. An adult can distance himself enough from the situation to say “never mind, I’m just tired.” I don’t see why one couldn’t, by a similar process, learn to recognize and discount the effects of moral fashions.</p><p>尤其是当你听到自己在用这些标签时。你不仅需要学会从远处观察群体，还需要能从远处观察自己的想法。顺便说一句，这不是什么激进的想法，而是儿童和成人的主要区别。当孩子因为累而生气时，他不知道发生了什么。成人则能与情境保持足够距离，说 “没关系，我只是累了”。我不明白为什么不能通过类似的过程，学会识别并淡化道德时尚的影响。</p><p>You have to take that extra step if you want to think clearly. But it’s harder, because now you’re working against social customs instead of with them. Everyone encourages you to grow up to the point where you can discount your own bad moods. Few encourage you to continue to the point where you can discount society’s bad moods.</p><p>如果你想清晰思考，就必须迈出这额外的一步。但这更难，因为你现在是在与社会习俗对抗，而不是顺应它们。每个人都鼓励你成熟到能忽视自己的坏情绪，但很少有人鼓励你进一步成熟到能忽视社会的坏情绪。</p><p>How can you see the wave, when you’re the water? Always be questioning. That’s the only defence. What can’t you say? And why?</p><p>当你是水时，如何能看到波浪？永远保持质疑。这是唯一的防御。你不能说的话是什么？为什么不能说？</p><p>Notes</p><p>Thanks to Sarah Harlin, Trevor Blackwell, Jessica Livingston, Robert Morris, Eric Raymond and Bob van der Zwaan for reading drafts of this essay, and to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey for conversations about heresy. Needless to say they bear no blame for opinions expressed in it, and especially for opinions not expressed in it.</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑客与画家</title>
    <link href="/2025/08/18/hackers-and-painters/"/>
    <url>/2025/08/18/hackers-and-painters/</url>
    
    <content type="html"><![CDATA[<h2 id="Hackers-and-Painters"><a href="#Hackers-and-Painters" class="headerlink" title="Hackers and Painters"></a>Hackers and Painters</h2><p>原文链接: <a href="https://paulgraham.com/hp.html">https://paulgraham.com/hp.html</a></p><p>May 2003</p><p>(This essay is derived from a guest lecture at Harvard, which incorporated an earlier talk at Northeastern.)<br>（本文改编自哈佛大学的一次客座讲座，其中融入了之前在东北大学的一次演讲内容。）</p><p>When I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work– that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge.<br>当我从计算机科学研究生院毕业时，我去了艺术学校学习绘画。很多人似乎对一个对计算机感兴趣的人同时也对绘画感兴趣感到惊讶。他们似乎认为，黑客技术和绘画是截然不同的工作 —— 黑客技术是冰冷、精确且有条理的，而绘画是某种原始冲动的狂热表达。</p><p>Both of these images are wrong. Hacking and painting have a lot in common. In fact, of all the different types of people I’ve known, hackers and painters are among the most alike.<br>这两种印象都是错误的。黑客技术和绘画有很多共同点。事实上，在我认识的所有不同类型的人中，黑客和画家是最相似的群体之一。</p><p>What hackers and painters have in common is that they’re both makers. Along with composers, architects, and writers, what hackers and painters are trying to do is make good things. They’re not doing research per se, though if in the course of trying to make good things they discover some new technique, so much the better.<br>黑客和画家的共同点在于，他们都是创作者。和作曲家、建筑师、作家一样，黑客和画家努力做的事情是创造优秀的作品。他们本身并不是在做研究，不过如果在努力创造优秀作品的过程中发现了某种新技术，那再好不过了。</p><p>I’ve never liked the term “computer science.” The main reason I don’t like it is that there’s no such thing. Computer science is a grab bag of tenuously related areas thrown together by an accident of history, like Yugoslavia. At one end you have people who are really mathematicians, but call what they’re doing computer science so they can get DARPA grants. In the middle you have people working on something like the natural history of computers– studying the behavior of algorithms for routing data through networks, for example. And then at the other extreme you have the hackers, who are trying to write interesting software, and for whom computers are just a medium of expression, as concrete is for architects or paint for painters. It’s as if mathematicians, physicists, and architects all had to be in the same department.<br>我一直不喜欢 “计算机科学” 这个术语。主要原因是，根本不存在 “计算机科学” 这种东西。计算机科学是一个由历史偶然事件拼凑起来的、包含多个勉强相关领域的大杂烩，就像南斯拉夫一样。一端是那些实际上是数学家的人，却把自己做的事称为计算机科学，这样他们就能获得美国国防部高级研究计划局的资助。中间是那些研究类似 “计算机自然史” 的人 —— 比如研究网络数据路由算法的行为。而另一端，则是黑客们，他们试图编写有趣的软件，对他们来说，计算机只是一种表达媒介，就像混凝土之于建筑师、颜料之于画家一样。这就好比数学家、物理学家和建筑师都必须隶属于同一个院系。</p><p>Sometimes what the hackers do is called “software engineering,” but this term is just as misleading. Good software designers are no more engineers than architects are. The border between architecture and engineering is not sharply defined, but it’s there. It falls between what and how: architects decide what to do, and engineers figure out how to do it.<br>有时，黑客所做的事情被称为 “软件工程”，但这个术语同样具有误导性。优秀的软件设计师并不比建筑师更像工程师。建筑学和工程学之间的界限并不清晰，但它确实存在。这条界限存在于 “做什么” 和 “怎么做” 之间：建筑师决定做什么，工程师则想办法怎么做。</p><p>What and how should not be kept too separate. You’re asking for trouble if you try to decide what to do without understanding how to do it. But hacking can certainly be more than just deciding how to implement some spec. At its best, it’s creating the spec– though it turns out the best way to do that is to implement it.<br>“做什么” 和 “怎么做” 不应该分得太开。如果不理解怎么做就试图决定做什么，那就是自找麻烦。但黑客技术肯定不只是决定如何实现某个规范。在最佳状态下，它是在创造规范 —— 尽管事实证明，创造规范的最佳方式就是去实现它。</p><p>Perhaps one day “computer science” will, like Yugoslavia, get broken up into its component parts. That might be a good thing. Especially if it meant independence for my native land, hacking.<br>也许有一天，“计算机科学” 会像南斯拉夫一样，分裂成它的组成部分。这或许是件好事。尤其是如果这意味着我所在的 “领地”—— 黑客技术 —— 能获得独立的话。</p><p>Bundling all these different types of work together in one department may be convenient administratively, but it’s confusing intellectually. That’s the other reason I don’t like the name “computer science.” Arguably the people in the middle are doing something like an experimental science. But the people at either end, the hackers and the mathematicians, are not actually doing science.<br>把所有这些不同类型的工作捆绑在一个院系里，在行政上可能很方便，但在学术上却令人困惑。这是我不喜欢 “计算机科学” 这个名称的另一个原因。可以说，中间那部分人在做类似实验科学的工作。但两端的人 —— 黑客和数学家 —— 实际上并不是在做科学研究。</p><p>The mathematicians don’t seem bothered by this. They happily set to work proving theorems like the other mathematicians over in the math department, and probably soon stop noticing that the building they work in says &#96;&#96;computer science’’ on the outside. But for the hackers this label is a problem. If what they’re doing is called science, it makes them feel they ought to be acting scientific. So instead of doing what they really want to do, which is to design beautiful software, hackers in universities and research labs feel they ought to be writing research papers.<br>数学家们似乎并不为此困扰。他们像数学系的其他数学家一样，愉快地投入到定理证明中，或许很快就不再注意到他们工作的大楼外面写着 “计算机科学”。但对黑客来说，这个标签是个问题。如果他们所做的事情被称为科学，会让他们觉得自己应该表现得像搞科学的。因此，大学里和研究实验室里的黑客们，本想设计优秀的软件，却觉得自己应该去写研究论文。</p><p>In the best case, the papers are just a formality. Hackers write cool software, and then write a paper about it, and the paper becomes a proxy for the achievement represented by the software. But often this mismatch causes problems. It’s easy to drift away from building beautiful things toward building ugly things that make more suitable subjects for research papers.<br>最好的情况下，论文只是一种形式。黑客写出很棒的软件，然后写一篇关于它的论文，论文成了软件所代表的成就的替代物。但这种错位往往会引发问题。人们很容易从创造美好的事物，转向创造那些更适合作为研究论文主题的丑陋事物。</p><p>Unfortunately, beautiful things don’t always make the best subjects for papers. Number one, research must be original– and as anyone who has written a PhD dissertation knows, the way to be sure that you’re exploring virgin territory is to stake out a piece of ground that no one wants. Number two, research must be substantial– and awkward systems yield meatier papers, because you can write about the obstacles you have to overcome in order to get things done. Nothing yields meaty problems like starting with the wrong assumptions. Most of AI is an example of this rule; if you assume that knowledge can be represented as a list of predicate logic expressions whose arguments represent abstract concepts, you’ll have a lot of papers to write about how to make this work. As Ricky Ricardo used to say, “Lucy, you got a lot of explaining to do.”<br>不幸的是，美好的事物并不总是最适合作为论文主题。第一，研究必须具有原创性 —— 任何写过博士论文的人都知道，确保自己在探索处女地的方法，是圈出一块没人想要的领域。第二，研究必须有实质内容 —— 蹩脚的系统能产出更有分量的论文，因为你可以写为了完成任务必须克服的障碍。没有什么比从错误的假设出发更能产生有分量的问题了。人工智能的大部分研究就是这个规则的例子：如果你假设知识可以表示为一系列谓词逻辑表达式，其参数代表抽象概念，那么你就有很多关于如何让这一假设奏效的论文可写。就像瑞奇・里卡多曾经说的：“露西，你有很多要解释的。”</p><p>The way to create something beautiful is often to make subtle tweaks to something that already exists, or to combine existing ideas in a slightly new way. This kind of work is hard to convey in a research paper.<br>创造美好事物的方式，往往是对已有的东西做细微调整，或者以一种稍新的方式组合现有想法。这种工作很难在研究论文中体现出来。</p><p>So why do universities and research labs continue to judge hackers by publications? For the same reason that “scholastic aptitude” gets measured by simple-minded standardized tests, or the productivity of programmers gets measured in lines of code. These tests are easy to apply, and there is nothing so tempting as an easy test that kind of works.<br>那么，为什么大学和研究实验室仍然用论文发表来评判黑客呢？原因和 “学术能力” 用头脑简单的标准化测试来衡量，或者程序员的生产力用代码行数来衡量是一样的。这些测试容易实施，而没有什么比一个看似有效的简单测试更诱人的了。</p><p>Measuring what hackers are actually trying to do, designing beautiful software, would be much more difficult. You need a good sense of design to judge good design. And there is no correlation, except possibly a negative one, between people’s ability to recognize good design and their confidence that they can.<br>衡量黑客真正在努力做的事情 —— 设计优秀的软件 —— 要困难得多。评判优秀的设计需要良好的设计感。而人们识别优秀设计的能力，与他们对自己能做到这一点的信心之间，没有相关性，甚至可能是负相关。</p><p>The only external test is time. Over time, beautiful things tend to thrive, and ugly things tend to get discarded. Unfortunately, the amounts of time involved can be longer than human lifetimes. Samuel Johnson said it took a hundred years for a writer’s reputation to converge. You have to wait for the writer’s influential friends to die, and then for all their followers to die.<br>唯一的外部检验是时间。随着时间的推移，美好的事物往往会蓬勃发展，而丑陋的事物则会被抛弃。不幸的是，所需的时间可能比人的寿命还要长。塞缪尔・约翰逊说过，一个作家的声誉需要一百年才能稳定下来。你得等作家那些有影响力的朋友去世，然后等他们所有的追随者去世。</p><p>I think hackers just have to resign themselves to having a large random component in their reputations. In this they are no different from other makers. In fact, they’re lucky by comparison. The influence of fashion is not nearly so great in hacking as it is in painting.<br>我认为，黑客们只能接受自己的声誉中存在很大的随机性。在这一点上，他们和其他创作者没有区别。事实上，相比之下他们是幸运的。时尚对黑客技术的影响，远不如对绘画的影响大。</p><p>There are worse things than having people misunderstand your work. A worse danger is that you will yourself misunderstand your work. Related fields are where you go looking for ideas. If you find yourself in the computer science department, there is a natural temptation to believe, for example, that hacking is the applied version of what theoretical computer science is the theory of. All the time I was in graduate school I had an uncomfortable feeling in the back of my mind that I ought to know more theory, and that it was very remiss of me to have forgotten all that stuff within three weeks of the final exam.<br>比让别人误解你的工作更糟糕的事情还有很多。更危险的是你自己误解自己的工作。相关领域是你寻找灵感的地方。例如，如果你身处计算机科学系，很自然会倾向于认为，黑客技术是理论计算机科学的应用版本。在研究生院的那段时间里，我心里一直有种不安的感觉：我应该多学点理论，而我在期末考试后三周内就把那些东西全忘了，这实在是太疏忽了。</p><p>Now I realize I was mistaken. Hackers need to understand the theory of computation about as much as painters need to understand paint chemistry. You need to know how to calculate time and space complexity and about Turing completeness. You might also want to remember at least the concept of a state machine, in case you have to write a parser or a regular expression library. Painters in fact have to remember a good deal more about paint chemistry than that.<br>现在我意识到我错了。黑客需要理解计算理论的程度，就像画家需要理解颜料化学一样。你需要知道如何计算时间和空间复杂度，以及图灵完备性。你可能还需要至少记住状态机的概念，以防万一要写解析器或正则表达式库。事实上，画家需要记住的颜料化学知识比这多得多。</p><p>I’ve found that the best sources of ideas are not the other fields that have the word “computer” in their names, but the other fields inhabited by makers. Painting has been a much richer source of ideas than the theory of computation.<br>我发现，最好的灵感来源不是其他名字里带 “计算机” 的领域，而是其他由创作者构成的领域。绘画比计算理论能提供丰富得多的灵感。</p><p>For example, I was taught in college that one ought to figure out a program completely on paper before even going near a computer. I found that I did not program this way. I found that I liked to program sitting in front of a computer, not a piece of paper. Worse still, instead of patiently writing out a complete program and assuring myself it was correct, I tended to just spew out code that was hopelessly broken, and gradually beat it into shape. Debugging, I was taught, was a kind of final pass where you caught typos and oversights. The way I worked, it seemed like programming consisted of debugging.<br>例如，我在大学里学到的是，应该在靠近电脑之前，在纸上把程序完全构思好。但我发现我不是这样编程的。我喜欢坐在电脑前编程，而不是对着一张纸。更糟的是，我没有耐心写出完整的程序并确保它是正确的，而是倾向于先写出一堆漏洞百出的代码，然后逐渐把它修改成型。我学到的是，调试是最后一步，用来找出拼写错误和疏忽。但以我的工作方式来看，编程似乎就是由调试组成的。</p><p>For a long time I felt bad about this, just as I once felt bad that I didn’t hold my pencil the way they taught me to in elementary school. If I had only looked over at the other makers, the painters or the architects, I would have realized that there was a name for what I was doing: sketching. As far as I can tell, the way they taught me to program in college was all wrong. You should figure out programs as you’re writing them, just as writers and painters and architects do.<br>很长一段时间里，我为此感到内疚，就像我曾经因为没有按照小学教的方式握铅笔而感到内疚一样。如果我当时看看其他创作者，比如画家或建筑师，我就会意识到我所做的事情有一个名字：草图绘制。在我看来，大学里教我的编程方法全是错的。你应该在写程序的过程中构思程序，就像作家、画家和建筑师那样。</p><p>Realizing this has real implications for software design. It means that a programming language should, above all, be malleable. A programming language is for thinking of programs, not for expressing programs you’ve already thought of. It should be a pencil, not a pen. Static typing would be a fine idea if people actually did write programs the way they taught me to in college. But that’s not how any of the hackers I know write programs. We need a language that lets us scribble and smudge and smear, not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler.<br>意识到这一点对软件设计有实际意义。这意味着，编程语言首先应该具有可塑性。编程语言是用来思考程序的，而不是用来表达你已经想好的程序。它应该是铅笔，而不是钢笔。如果人们真的按照大学里教我的方式写程序，静态类型会是个好主意。但我认识的所有黑客都不是这样写程序的。我们需要一种能让我们随意涂写、修改的语言，而不是一种让你膝盖上小心翼翼放着 “类型” 茶杯，还要和编译器这位严厉的老阿姨礼貌交谈的语言。</p><p>While we’re on the subject of static typing, identifying with the makers will save us from another problem that afflicts the sciences: math envy. Everyone in the sciences secretly believes that mathematicians are smarter than they are. I think mathematicians also believe this. At any rate, the result is that scientists tend to make their work look as mathematical as possible. In a field like physics this probably doesn’t do much harm, but the further you get from the natural sciences, the more of a problem it becomes.<br>说到静态类型，认同自己是 “创作者” 能让我们避免另一个困扰科学界的问题：数学嫉妒。科学界的每个人都暗自认为数学家比自己更聪明。我觉得数学家自己也这么认为。无论如何，结果就是科学家们倾向于让自己的工作看起来尽可能像数学。在物理学这样的领域，这可能没什么危害，但离自然科学越远，这个问题就越严重。</p><p>A page of formulas just looks so impressive. (Tip: for extra impressiveness, use Greek variables.) And so there is a great temptation to work on problems you can treat formally, rather than problems that are, say, important.<br>一页公式看起来就是那么令人印象深刻。（小贴士：想更令人印象深刻，就用希腊字母变量。）因此，人们很容易倾向于研究那些可以用形式化方法处理的问题，而不是那些，比如说，重要的问题。</p><p>If hackers identified with other makers, like writers and painters, they wouldn’t feel tempted to do this. Writers and painters don’t suffer from math envy. They feel as if they’re doing something completely unrelated. So are hackers, I think.<br>如果黑客认同其他创作者，比如作家和画家，他们就不会有这样的冲动。作家和画家不会有数学嫉妒。他们觉得自己在做的事情与之完全无关。我认为黑客也是如此。</p><p>If universities and research labs keep hackers from doing the kind of work they want to do, perhaps the place for them is in companies. Unfortunately, most companies won’t let hackers do what they want either. Universities and research labs force hackers to be scientists, and companies force them to be engineers.<br>如果大学和研究实验室阻止黑客做他们想做的工作，或许公司是他们的去处。不幸的是，大多数公司也不让黑客做他们想做的事。大学和研究实验室迫使黑客成为科学家，而公司则迫使他们成为工程师。</p><p>I only discovered this myself quite recently. When Yahoo bought Viaweb, they asked me what I wanted to do. I had never liked the business side very much, and said that I just wanted to hack. When I got to Yahoo, I found that what hacking meant to them was implementing software, not designing it. Programmers were seen as technicians who translated the visions (if that is the word) of product managers into code.<br>我自己也是最近才发现这一点的。雅虎收购 Viaweb 时，他们问我想做什么。我一直不太喜欢商业方面的工作，就说我只想做黑客技术相关的事。到了雅虎后，我发现对他们来说，“黑客技术” 指的是实现软件，而不是设计软件。程序员被视为技术人员，负责将产品经理的 “愿景”（如果能这么说的话）翻译成代码。</p><p>This seems to be the default plan in big companies. They do it because it decreases the standard deviation of the outcome. Only a small percentage of hackers can actually design software, and it’s hard for the people running a company to pick these out. So instead of entrusting the future of the software to one brilliant hacker, most companies set things up so that it is designed by committee, and the hackers merely implement the design.<br>这似乎是大公司的默认模式。他们这么做是为了降低结果的标准差。只有一小部分黑客真正有能力设计软件，而公司管理者很难挑选出这些人。因此，大多数公司没有把软件的未来托付给一个才华横溢的黑客，而是设置成由委员会来设计，黑客们只是负责实现设计。</p><p>If you want to make money at some point, remember this, because this is one of the reasons startups win. Big companies want to decrease the standard deviation of design outcomes because they want to avoid disasters. But when you damp oscillations, you lose the high points as well as the low. This is not a problem for big companies, because they don’t win by making great products. Big companies win by sucking less than other big companies.<br>如果你想在某个时候赚钱，记住这一点，因为这是初创公司能获胜的原因之一。大公司想降低设计结果的标准差，是为了避免灾难。但当你抑制波动时，你既会失去低谷，也会失去高峰。这对大公司来说不是问题，因为它们的胜利不是靠做出伟大的产品，而是靠比其他大公司 “不那么糟糕”。</p><p>So if you can figure out a way to get in a design war with a company big enough that its software is designed by product managers, they’ll never be able to keep up with you. These opportunities are not easy to find, though. It’s hard to engage a big company in a design war, just as it’s hard to engage an opponent inside a castle in hand to hand combat. It would be pretty easy to write a better word processor than Microsoft Word, for example, but Microsoft, within the castle of their operating system monopoly, probably wouldn’t even notice if you did.<br>所以，如果你能想办法和一家足够大的公司展开设计战 —— 这家公司的软件是由产品经理设计的 —— 他们永远跟不上你。不过，这样的机会并不容易找到。让大公司卷入设计战很难，就像让城堡里的对手和你近身搏斗一样难。例如，写出一个比微软 Word 更好的文字处理器可能相当容易，但微软身处其操作系统垄断的城堡中，就算你做到了，他们可能也不会注意到。</p><p>The place to fight design wars is in new markets, where no one has yet managed to establish any fortifications. That’s where you can win big by taking the bold approach to design, and having the same people both design and implement the product. Microsoft themselves did this at the start. So did Apple. And Hewlett-Packard. I suspect almost every successful startup has.<br><strong>打设计战的地方是新市场</strong>，那里还没有人建立起任何防御工事。在那里，你可以通过大胆的设计方法，让同一批人既负责设计又负责实现产品，从而大获全胜。微软一开始就是这么做的。苹果也是。惠普也是。我怀疑几乎所有成功的初创公司都是如此。</p><p>So one way to build great software is to start your own startup. There are two problems with this, though. One is that in a startup you have to do so much besides write software. At Viaweb I considered myself lucky if I got to hack a quarter of the time. And the things I had to do the other three quarters of the time ranged from tedious to terrifying. I have a benchmark for this, because I once had to leave a board meeting to have some cavities filled. I remember sitting back in the dentist’s chair, waiting for the drill, and feeling like I was on vacation.<br>所以，打造优秀软件的一种方式是自己创办初创公司。不过，这有两个问题。一是在初创公司里，除了写软件，你还得做很多其他事情。在 Viaweb，我如果能有四分之一的时间做黑客技术相关的工作，就觉得自己很幸运了。而另外四分之三的时间里，我要做的事情从枯燥乏味到令人恐惧不等。我有一个衡量标准，因为有一次我不得不离开董事会会议去补牙。我记得坐在牙医的椅子上，等着钻头开始工作，却感觉像是在度假。</p><p>The other problem with startups is that there is not much overlap between the kind of software that makes money and the kind that’s interesting to write. Programming languages are interesting to write, and Microsoft’s first product was one, in fact, but no one will pay for programming languages now. If you want to make money, you tend to be forced to work on problems that are too nasty for anyone to solve for free.<br>初创公司的另一个问题是，能赚钱的软件和写起来有趣的软件之间没有太多重叠。编程语言写起来很有趣，事实上微软的第一个产品就是编程语言，但现在没人会为编程语言付费了。如果你想赚钱，往往会被迫去解决那些太棘手、没人愿意免费解决的问题。</p><p>All makers face this problem. Prices are determined by supply and demand, and there is just not as much demand for things that are fun to work on as there is for things that solve the mundane problems of individual customers. Acting in off-Broadway plays just doesn’t pay as well as wearing a gorilla suit in someone’s booth at a trade show. Writing novels doesn’t pay as well as writing ad copy for garbage disposals. And hacking programming languages doesn’t pay as well as figuring out how to connect some company’s legacy database to their Web server.<br>所有创作者都面临这个问题。价格由供求决定，人们对做起来有趣的事情的需求，远不如对解决个人客户日常问题的事情的需求大。在百老汇外的剧院演戏，收入远不如在贸易展上穿大猩猩服装站在别人的展位里。写小说不如为垃圾处理器写广告文案赚钱。做编程语言相关的黑客技术工作，不如解决某公司的遗留数据库与 Web 服务器的连接问题赚钱。</p><p>I think the answer to this problem, in the case of software, is a concept known to nearly all makers: the day job. This phrase began with musicians, who perform at night. More generally, it means that you have one kind of work you do for money, and another for love.<br>我认为，在软件领域，这个问题的答案是一个几乎所有创作者都知道的概念：日常工作（day job）。这个短语始于音乐家，他们晚上演出，白天做其他工作。更一般地说，它指的是你有一份为了赚钱而做的工作，还有一份为了热爱而做的工作。</p><p>Nearly all makers have day jobs early in their careers. Painters and writers notoriously do. If you’re lucky you can get a day job that’s closely related to your real work. Musicians often seem to work in record stores. A hacker working on some programming language or operating system might likewise be able to get a day job using it. [1]<br>几乎所有创作者在职业生涯早期都有日常工作。画家和作家就是出了名的例子。如果你幸运的话，你能找到一份和你真正想做的工作密切相关的日常工作。音乐家似乎经常在唱片店工作。一个研究某种编程语言或操作系统的黑客，同样可能找到一份使用该语言或系统的日常工作。[1]</p><p>When I say that the answer is for hackers to have day jobs, and work on beautiful software on the side, I’m not proposing this as a new idea. This is what open-source hacking is all about. What I’m saying is that open-source is probably the right model, because it has been independently confirmed by all the other makers.<br>我说黑客应该有日常工作，同时在业余时间开发优秀软件，这并不是什么新观点。这正是开源黑客技术的核心。我想说的是，开源可能是正确的模式，因为所有其他创作者都以各自的方式印证了这一点。</p><p>It seems surprising to me that any employer would be reluctant to let hackers work on open-source projects. At Viaweb, we would have been reluctant to hire anyone who didn’t. When we interviewed programmers, the main thing we cared about was what kind of software they wrote in their spare time. You can’t do anything really well unless you love it, and if you love to hack you’ll inevitably be working on projects of your own. [2]<br>我觉得奇怪的是，竟然会有雇主不愿意让黑客参与开源项目。在 Viaweb，我们不愿意雇佣那些不参与开源项目的人。我们面试程序员时，最关心的是他们在业余时间写什么样的软件。除非你热爱一件事，否则你不可能把它做得非常好；如果你热爱黑客技术，你必然会从事自己的项目。[2]</p><p>Because hackers are makers rather than scientists, the right place to look for metaphors is not in the sciences, but among other kinds of makers. What else can painting teach us about hacking?<br>因为黑客是创作者而不是科学家，所以寻找隐喻的地方不应该是科学领域，而应该是其他创作者群体。绘画还能教给我们关于黑客技术的哪些东西呢？</p><p>One thing we can learn, or at least confirm, from the example of painting is how to learn to hack. You learn to paint mostly by doing it. Ditto for hacking. Most hackers don’t learn to hack by taking college courses in programming. They learn to hack by writing programs of their own at age thirteen. Even in college classes, you learn to hack mostly by hacking. [3]<br>从绘画的例子中，我们可以学到（或者至少确认）的一点是如何学习黑客技术。学习绘画主要是通过实践。学习黑客技术也是如此。大多数黑客不是通过大学的编程课程学会黑客技术的。他们在 13 岁时就通过自己写程序来学习。即使在大学课堂上，学习黑客技术主要也是通过实践。[3]</p><p>Because painters leave a trail of work behind them, you can watch them learn by doing. If you look at the work of a painter in chronological order, you’ll find that each painting builds on things that have been learned in previous ones. When there’s something in a painting that works very well, you can usually find version 1 of it in a smaller form in some earlier painting.<br>因为画家会留下一系列作品，你可以看到他们是通过实践来学习的。如果按时间顺序看一位画家的作品，你会发现每一幅画都建立在之前作品所学的基础上。如果一幅画中有某个部分效果很好，你通常能在更早的某幅画中找到它的雏形，只是形式更小。</p><p>I think most makers work this way. Writers and architects seem to as well. Maybe it would be good for hackers to act more like painters, and regularly start over from scratch, instead of continuing to work for years on one project, and trying to incorporate all their later ideas as revisions.<br>我认为大多数创作者都是这样工作的。作家和建筑师似乎也是如此。或许黑客应该更像画家，定期从零开始，而不是多年来一直专注于一个项目，并试图把后来的想法都作为修订加入其中。</p><p>The fact that hackers learn to hack by doing it is another sign of how different hacking is from the sciences. Scientists don’t learn science by doing it, but by doing labs and problem sets. Scientists start out doing work that’s perfect, in the sense that they’re just trying to reproduce work someone else has already done for them. Eventually, they get to the point where they can do original work. Whereas hackers, from the start, are doing original work; it’s just very bad. So hackers start original, and get good, and scientists start good, and get original.<br>黑客通过实践学习黑客技术这一事实，再次表明黑客技术与科学有多么不同。科学家不是通过实践来学习科学的，而是通过做实验和习题。科学家一开始做的工作是 “完美的”，因为他们只是试图重现别人已经完成的工作。最终，他们才能达到能做原创工作的程度。而黑客从一开始就在做原创工作，只是做得很糟糕。所以，黑客是从原创开始，逐渐变好；科学家是从做好开始，逐渐原创。</p><p>The other way makers learn is from examples. For a painter, a museum is a reference library of techniques. For hundreds of years it has been part of the traditional education of painters to copy the works of the great masters, because copying forces you to look closely at the way a painting is made.<br>创作者学习的另一种方式是通过范例。对画家来说，博物馆是技术的参考图书馆。数百年来，临摹大师的作品一直是画家传统教育的一部分，因为临摹会迫使你仔细观察一幅画的创作方式。</p><p>Writers do this too. Benjamin Franklin learned to write by summarizing the points in the essays of Addison and Steele and then trying to reproduce them. Raymond Chandler did the same thing with detective stories.<br>作家也会这样做。本杰明・富兰克林通过总结艾迪生和斯蒂尔散文中的观点，然后试图重现这些观点来学习写作。雷蒙德・钱德勒在侦探小说上也做过同样的事。</p><p>Hackers, likewise, can learn to program by looking at good programs– not just at what they do, but the source code too. One of the less publicized benefits of the open-source movement is that it has made it easier to learn to program. When I learned to program, we had to rely mostly on examples in books. The one big chunk of code available then was Unix, but even this was not open source. Most of the people who read the source read it in illicit photocopies of John Lions’ book, which though written in 1977 was not allowed to be published until 1996.<br>同样，黑客可以通过研究优秀的程序来学习编程 —— 不仅要看程序的功能，还要看源代码。开源运动一个不太为人知的好处是，它让学习编程变得更容易了。我学习编程的时候，主要得依靠书中的例子。当时能获得的一大段代码是 Unix，但它也不是开源的。大多数阅读其源代码的人，都是通过约翰・莱昂斯那本书的非法复印件，这本书虽然写于 1977 年，却直到 1996 年才被允许出版。</p><p>Another example we can take from painting is the way that paintings are created by gradual refinement. Paintings usually begin with a sketch. Gradually the details get filled in. But it is not merely a process of filling in. Sometimes the original plans turn out to be mistaken. Countless paintings, when you look at them in xrays, turn out to have limbs that have been moved or facial features that have been readjusted.<br>我们能从绘画中借鉴的另一个例子是，绘画是通过逐步完善来创作的。绘画通常从草图开始，然后逐渐填充细节。但这不仅仅是填充的过程。有时，最初的计划被证明是错误的。无数画作在 X 光下显示，肢体被移动过，面部特征被调整过。</p><p>Here’s a case where we can learn from painting. I think hacking should work this way too. It’s unrealistic to expect that the specifications for a program will be perfect. You’re better off if you admit this up front, and write programs in a way that allows specifications to change on the fly.<br>这是我们可以从绘画中学习的一点。我认为黑客技术也应该这样。期望一个程序的规范是完美的，这是不现实的。如果你事先承认这一点，并以允许规范随时更改的方式编写程序，会更好。</p><p>(The structure of large companies makes this hard for them to do, so here is another place where startups have an advantage.)<br>（大公司的结构使其难以做到这一点，因此这是初创公司的另一个优势所在。）</p><p>Everyone by now presumably knows about the danger of premature optimization. I think we should be just as worried about premature design– deciding too early what a program should do.<br>想必现在每个人都知道过早优化的危险。我认为我们也应该同样担心过早设计 —— 过早决定一个程序应该做什么。</p><p>The right tools can help us avoid this danger. A good programming language should, like oil paint, make it easy to change your mind. Dynamic typing is a win here because you don’t have to commit to specific data representations up front. But the key to flexibility, I think, is to make the language very abstract. The easiest program to change is one that’s very short.<br>合适的工具可以帮助我们避免这种危险。一种好的编程语言应该像油画颜料一样，让你可以轻松改变想法。动态类型在这里是个优势，因为你不必事先确定特定的数据表示方式。但我认为，灵活性的关键是让语言非常抽象。最容易修改的程序是非常简短的程序。</p><p>This sounds like a paradox, but a great painting has to be better than it has to be. For example, when Leonardo painted the portrait of Ginevra de Benci in the National Gallery, he put a juniper bush behind her head. In it he carefully painted each individual leaf. Many painters might have thought, this is just something to put in the background to frame her head. No one will look that closely at it.<br>这听起来像是个悖论，但一幅伟大的画作必须超越其 “必要” 的程度。例如，列奥纳多在国家美术馆为吉内薇拉・德・本奇画肖像时，在她头后画了一丛杜松。他仔细地画出了每一片叶子。很多画家可能会想，这只是用来衬托她头部的背景，没人会看得那么仔细。</p><p>Not Leonardo. How hard he worked on part of a painting didn’t depend at all on how closely he expected anyone to look at it. He was like Michael Jordan. Relentless.<br>但列奥纳多不这么想。他在一幅画的某个部分投入多少精力，完全不取决于他预计有人会多么仔细地看这个部分。他就像迈克尔・乔丹，执着不懈。</p><p>Relentlessness wins because, in the aggregate, unseen details become visible. When people walk by the portrait of Ginevra de Benci, their attention is often immediately arrested by it, even before they look at the label and notice that it says Leonardo da Vinci. All those unseen details combine to produce something that’s just stunning, like a thousand barely audible voices all singing in tune.<br>执着不懈会获胜，因为总体而言，那些不被注意的细节会变得引人注目。当人们走过吉内薇拉・德・本奇的肖像时，往往会立刻被它吸引，甚至在看到标签并注意到上面写着 “列奥纳多・达・芬奇” 之前就已如此。所有那些不被注意的细节结合在一起，产生了令人惊叹的效果，就像一千个几乎听不见的声音和谐地歌唱。</p><p>Great software, likewise, requires a fanatical devotion to beauty. If you look inside good software, you find that parts no one is ever supposed to see are beautiful too. I’m not claiming I write great software, but I know that when it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. It drives me crazy to see code that’s badly indented, or that uses ugly variable names.<br>同样，伟大的软件需要对美的狂热追求。如果你深入研究优秀的软件，会发现那些永远不会有人看到的部分也是优美的。我不是说我能写出伟大的软件，但我知道，在代码方面，我的行为方式如果用在日常生活中，可能都需要吃处方药了。看到缩进糟糕的代码，或者用了难看的变量名，我会抓狂。</p><p>If a hacker were a mere implementor, turning a spec into code, then he could just work his way through it from one end to the other like someone digging a ditch. But if the hacker is a creator, we have to take inspiration into account.<br>如果黑客仅仅是一个实现者，把规范转换成代码，那么他可以像挖沟一样从一端做到另一端。但如果黑客是创作者，我们就必须考虑灵感的因素。</p><p>In hacking, like painting, work comes in cycles. Sometimes you get excited about some new project and you want to work sixteen hours a day on it. Other times nothing seems interesting.<br>在黑客技术领域，就像在绘画领域一样，工作有周期性。有时你会对某个新项目感到兴奋，想一天工作 16 个小时。其他时候，似乎没有什么事情是有趣的。</p><p>To do good work you have to take these cycles into account, because they’re affected by how you react to them. When you’re driving a car with a manual transmission on a hill, you have to back off the clutch sometimes to avoid stalling. Backing off can likewise prevent ambition from stalling. In both painting and hacking there are some tasks that are terrifyingly ambitious, and others that are comfortingly routine. It’s a good idea to save some easy tasks for moments when you would otherwise stall.<br>要做出好的工作，你必须考虑到这些周期，因为它们会受到你对其反应的影响。当你开着手动挡汽车上山时，有时必须松开离合器以避免熄火。同样，适当放松可以防止雄心壮志 “熄火”。在绘画和黑客技术中，都有一些极具挑战性的任务，也有一些令人安心的常规任务。把一些简单的任务留到你可能 “熄火” 的时刻去做，是个好主意。</p><p>In hacking, this can literally mean saving up bugs. I like debugging: it’s the one time that hacking is as straightforward as people think it is. You have a totally constrained problem, and all you have to do is solve it. Your program is supposed to do x. Instead it does y. Where does it go wrong? You know you’re going to win in the end. It’s as relaxing as painting a wall.<br>在黑客技术中，这可能真的意味着积攒一些 bug。我喜欢调试：这是黑客技术像人们想象的那样简单直接的时刻。你面临一个完全受限的问题，你所要做的就是解决它。你的程序应该做 x，却做了 y。问题出在哪里？你知道最终你会成功。这就像刷墙一样令人放松。</p><p>The example of painting can teach us not only how to manage our own work, but how to work together. A lot of the great art of the past is the work of multiple hands, though there may only be one name on the wall next to it in the museum. Leonardo was an apprentice in the workshop of Verrocchio and painted one of the angels in his Baptism of Christ. This sort of thing was the rule, not the exception. Michelangelo was considered especially dedicated for insisting on painting all the figures on the ceiling of the Sistine Chapel himself.<br>绘画的例子不仅能教我们如何管理自己的工作，还能教我们如何协作。过去很多伟大的艺术作品是多人合作的成果，尽管博物馆里作品旁边可能只写着一个名字。列奥纳多曾是韦罗基奥工作室的学徒，他在韦罗基奥的《基督受洗》中画了其中一个天使。这种情况是常规，而非例外。米开朗基罗因为坚持自己画西斯廷教堂天顶的所有人物而被认为特别敬业。</p><p>As far as I know, when painters worked together on a painting, they never worked on the same parts. It was common for the master to paint the principal figures and for assistants to paint the others and the background. But you never had one guy painting over the work of another.<br>据我所知，当画家们合作一幅画时，他们从不会在同一个部分工作。通常是大师画主要人物，助手画其他人物和背景。但从不会有一个人在另一个人的作品上作画。</p><p>I think this is the right model for collaboration in software too. Don’t push it too far. When a piece of code is being hacked by three or four different people, no one of whom really owns it, it will end up being like a common-room. It will tend to feel bleak and abandoned, and accumulate cruft. The right way to collaborate, I think, is to divide projects into sharply defined modules, each with a definite owner, and with interfaces between them that are as carefully designed and, if possible, as articulated as programming languages.<br>我认为这也是软件协作的正确模式。不要过度协作。当一段代码被三四个不同的人修改，且没有人真正 “拥有” 它时，它最终会像一个公共休息室 —— 感觉凄凉、被遗弃，还会堆积杂物。我认为，正确的协作方式是将项目分成定义清晰的模块，每个模块有明确的所有者，模块之间的接口要像编程语言一样精心设计，尽可能清晰明确。</p><p>Like painting, most software is intended for a human audience. And so hackers, like painters, must have empathy to do really great work. You have to be able to see things from the user’s point of view.<br>和绘画一样，大多数软件是为人类受众设计的。因此，黑客和画家一样，要做出真正伟大的作品，必须有同理心。你必须能够从用户的角度看问题。</p><p>When I was a kid I was always being told to look at things from someone else’s point of view. What this always meant in practice was to do what someone else wanted, instead of what I wanted. This of course gave empathy a bad name, and I made a point of not cultivating it.<br>小时候，我总被教导要从别人的角度看问题。但实际上，这往往意味着要做别人想做的事，而不是我想做的事。这当然给同理心起了个坏名声，我也刻意不去培养它。</p><p>Boy, was I wrong. It turns out that looking at things from other people’s point of view is practically the secret of success. It doesn’t necessarily mean being self-sacrificing. Far from it. Understanding how someone else sees things doesn’t imply that you’ll act in his interest; in some situations– in war, for example– you want to do exactly the opposite. [4]<br>天哪，我错了。事实证明，从别人的角度看问题几乎是成功的秘诀。这并不一定意味着要自我牺牲。远非如此。理解别人如何看待事物，并不意味着你会为他的利益行事；在某些情况下 —— 比如在战争中 —— 你可能想做完全相反的事。[4]</p><p>Most makers make things for a human audience. And to engage an audience you have to understand what they need. Nearly all the greatest paintings are paintings of people, for example, because people are what people are interested in.<br>大多数创作者为人类受众创作。要吸引受众，你必须理解他们的需求。例如，几乎所有最伟大的画作都是人物画，因为人们对人感兴趣。</p><p>Empathy is probably the single most important difference between a good hacker and a great one. Some hackers are quite smart, but when it comes to empathy are practically solipsists. It’s hard for such people to design great software [5], because they can’t see things from the user’s point of view.<br>同理心可能是优秀黑客和伟大黑客之间最重要的区别。有些黑客很聪明，但在同理心方面几乎是唯我论者。这样的人很难设计出伟大的软件 [5]，因为他们无法从用户的角度看问题。</p><p>One way to tell how good people are at empathy is to watch them explain a technical question to someone without a technical background. We probably all know people who, though otherwise smart, are just comically bad at this. If someone asks them at a dinner party what a programming language is, they’ll say something like &#96;&#96;Oh, a high-level language is what the compiler uses as input to generate object code.’’ High-level language? Compiler? Object code? Someone who doesn’t know what a programming language is obviously doesn’t know what these things are, either.<br>判断一个人同理心有多强的一种方式，是看他们如何向没有技术背景的人解释技术问题。我们可能都认识这样的人：尽管在其他方面很聪明，但在这方面却糟糕得可笑。如果有人在晚宴上问他们什么是编程语言，他们会说：“哦，高级语言是编译器用来生成目标代码的输入。” 高级语言？编译器？目标代码？一个不知道什么是编程语言的人，显然也不知道这些东西是什么。</p><p>Part of what software has to do is explain itself. So to write good software you have to understand how little users understand. They’re going to walk up to the software with no preparation, and it had better do what they guess it will, because they’re not going to read the manual. The best system I’ve ever seen in this respect was the original Macintosh, in 1985. It did what software almost never does: it just worked. [6]<br>软件必须做到的一点是自我解释。因此，要写出好的软件，你必须明白用户的理解有多有限。他们会毫无准备地使用软件，软件最好能如他们所猜测的那样工作，因为他们不会去读手册。在这方面，我见过的最好的系统是 1985 年的初代 Macintosh。它做到了软件几乎从未做到的事：就是能正常工作。[6]</p><p>Source code, too, should explain itself. If I could get people to remember just one quote about programming, it would be the one at the beginning of Structure and Interpretation of Computer Programs.<br>源代码也应该能自我解释。如果我能让人们只记住一句关于编程的话，那会是《计算机程序的构造和解释》开头的那句话：</p><p>Programs should be written for people to read, and only incidentally for machines to execute.<br>程序是为了让人读而写的，只是顺便让机器执行。</p><p>You need to have empathy not just for your users, but for your readers. It’s in your interest, because you’ll be one of them. Many a hacker has written a program only to find on returning to it six months later that he has no idea how it works. I know several people who’ve sworn off Perl after such experiences. [7]<br>你不仅需要对用户有同理心，还需要对读者有同理心。这符合你的利益，因为你自己也会是读者之一。很多黑客写了一个程序，六个月后再回头看，却发现自己完全不知道它是怎么工作的。我认识几个人，有过这样的经历后就发誓再也不用 Perl 了。[7]</p><p>Lack of empathy is associated with intelligence, to the point that there is even something of a fashion for it in some places. But I don’t think there’s any correlation. You can do well in math and the natural sciences without having to learn empathy, and people in these fields tend to be smart, so the two qualities have come to be associated. But there are plenty of dumb people who are bad at empathy too. Just listen to the people who call in with questions on talk shows. They ask whatever it is they’re asking in such a roundabout way that the hosts often have to rephrase the question for them.<br>缺乏同理心常与智力联系在一起，甚至在某些地方形成了一种时尚。但我认为两者没有任何关联。你可以在数学和自然科学领域表现出色，而不必学习同理心，而这些领域的人往往很聪明，因此这两种特质就被联系起来了。但也有很多愚蠢的人同样缺乏同理心。听听那些在脱口秀节目中打电话提问的人就知道了。他们问问题的方式如此迂回，主持人常常不得不为他们重新表述问题。</p><p>So, if hacking works like painting and writing, is it as cool? After all, you only get one life. You might as well spend it working on something great.<br>那么，如果黑客技术的工作方式和绘画、写作一样，它有那么酷吗？毕竟，人只有一次生命。你不妨把它花在做一些伟大的事情上。</p><p>Unfortunately, the question is hard to answer. There is always a big time lag in prestige. It’s like light from a distant star. Painting has prestige now because of great work people did five hundred years ago. At the time, no one thought these paintings were as important as we do today. It would have seemed very odd to people at the time that Federico da Montefeltro, the Duke of Urbino, would one day be known mostly as the guy with the strange nose in a painting by Piero della Francesca.<br>不幸的是，这个问题很难回答。声誉总是存在很大的时间滞后。这就像来自遥远恒星的光。绘画现在有声誉，是因为五百年前人们的伟大作品。在当时，没有人认为这些画会像我们今天认为的那么重要。在当时的人看来，乌尔比诺公爵费德里科・达・蒙泰费尔特罗，有一天会主要因为在皮耶罗・德拉・弗朗切斯卡的画中长着一个奇怪的鼻子而被人记住，这似乎是很奇怪的。</p><p>So while I admit that hacking doesn’t seem as cool as painting now, we should remember that painting itself didn’t seem as cool in its glory days as it does now.<br>所以，虽然我承认现在看来黑客技术不如绘画酷，但我们应该记住，绘画在它的辉煌时期，也不像现在这么酷。</p><p>What we can say with some confidence is that these are the glory days of hacking. In most fields the great work is done early on. The paintings made between 1430 and 1500 are still unsurpassed. Shakespeare appeared just as professional theater was being born, and pushed the medium so far that every playwright since has had to live in his shadow. Albrecht Durer did the same thing with engraving, and Jane Austen with the novel.<br>我们有一定把握可以说，现在是黑客技术的辉煌时期。在大多数领域，伟大的作品都出现在早期。1430 年至 1500 年间创作的画作至今仍无与伦比。莎士比亚出现在专业戏剧诞生之时，他把这一媒介推向了极致，此后所有剧作家都不得不活在他的阴影下。阿尔布雷希特・丢勒在版画领域、简・奥斯汀在小说领域也是如此。</p><p>Over and over we see the same pattern. A new medium appears, and people are so excited about it that they explore most of its possibilities in the first couple generations. Hacking seems to be in this phase now.<br>我们一次又一次地看到同样的模式。一种新媒介出现，人们对它非常兴奋，在前几代人中就探索了它的大部分可能性。黑客技术现在似乎正处于这个阶段。</p><p>Painting was not, in Leonardo’s time, as cool as his work helped make it. How cool hacking turns out to be will depend on what we can do with this new medium.<br>在列奥纳多的时代，绘画并不像他的作品所成就的那样酷。黑客技术最终会有多酷，将取决于我们能用这种新媒介做出什么。</p><p>Notes</p><p>[1] The greatest damage that photography has done to painting may be the fact that it killed the best day job. Most of the great painters in history supported themselves by painting portraits.<br>[1] 摄影对绘画造成的最大伤害，或许是它毁掉了最理想的日常工作。历史上大多数伟大的画家都是靠画肖像谋生的。</p><p>[2] I’ve been told that Microsoft discourages employees from contributing to open-source projects, even in their spare time. But so many of the best hackers work on open-source projects now that the main effect of this policy may be to ensure that they won’t be able to hire any first-rate programmers.<br>[2] 有人告诉我，微软不鼓励员工参与开源项目，即使是在业余时间。但如今太多优秀的黑客都在从事开源项目，这一政策的主要效果可能是让他们无法招聘到任何一流的程序员。</p><p>[3] What you learn about programming in college is much like what you learn about books or clothes or dating: what bad taste you had in high school.<br>[3] 你在大学里学到的编程知识，很像你学到的关于书籍、衣服或约会的道理：不过是让你明白自己高中时的品味有多差。</p><p>[4] Here’s an example of applied empathy. At Viaweb, if we couldn’t decide between two alternatives, we’d ask, what would our competitors hate most? At one point a competitor added a feature to their software that was basically useless, but since it was one of few they had that we didn’t, they made much of it in the trade press. We could have tried to explain that the feature was useless, but we decided it would annoy our competitor more if we just implemented it ourselves, so we hacked together our own version that afternoon.<br>[4] 这是一个应用同理心的例子。在 Viaweb 时，如果我们在两个选项之间难以抉择，就会问自己：我们的竞争对手最讨厌什么？有一次，一个竞争对手在他们的软件中添加了一个基本没用的功能，但由于这是他们有而我们没有的少数功能之一，他们在行业媒体上大做文章。我们本可以解释这个功能毫无用处，但我们认为，自己实现这个功能会更让竞争对手恼火，于是那天下午就匆匆编写出了我们自己的版本。</p><p>[5] Except text editors and compilers. Hackers don’t need empathy to design these, because they are themselves typical users.<br>[5] 文本编辑器和编译器除外。黑客设计这些工具时不需要同理心，因为他们自己就是典型用户。</p><p>[6] Well, almost. They overshot the available RAM somewhat, causing much inconvenient disk swapping, but this could be fixed within a few months by buying an additional disk drive.<br>[6] 嗯，差不多是这样。初代 Macintosh 在可用内存上有些超标，导致频繁的磁盘交换，很不方便，但这个问题几个月内就能通过额外购买一个磁盘驱动器解决。</p><p>[7] The way to make programs easy to read is not to stuff them with comments. I would take Abelson and Sussman’s quote a step further. Programming languages should be designed to express algorithms, and only incidentally to tell computers how to execute them. A good programming language ought to be better for explaining software than English. You should only need comments when there is some kind of kludge you need to warn readers about, just as on a road there are only arrows on parts with unexpectedly sharp curves.<br>[7] 让程序易于阅读的方法，不是塞满注释。我想把艾布尔森和萨斯曼的话再推进一步：编程语言的设计应该是为了表达算法，只是顺便告诉计算机如何执行。一种好的编程语言用来解释软件，应该比英语更有效。你只在需要提醒读者注意某些蹩脚的权宜之计时才需要注释，就像道路上只有在出现意外急弯的地方才会有箭头标识一样。</p><p>Thanks to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa Randall for reading drafts of this, and to Henry Leitner and Larry Finkelstein for inviting me to speak.<br>感谢特雷弗・布莱克韦尔、罗伯特・莫里斯、丹・吉芬和莉萨・兰德尔阅读本文的草稿，也感谢亨利・莱特纳和拉里・芬克尔斯坦邀请我做这次演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散文的时代</title>
    <link href="/2025/08/15/the-age-of-essay/"/>
    <url>/2025/08/15/the-age-of-essay/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Age-of-the-Essay"><a href="#The-Age-of-the-Essay" class="headerlink" title="The Age of the Essay"></a>The Age of the Essay</h2><p>原文链接: <a href="https://paulgraham.com/essay.html">https://paulgraham.com/essay.html</a></p><p>September 2004</p><p>Remember the essays you had to write in high school? Topic sentence, introductory paragraph, supporting paragraphs, conclusion. The conclusion being, say, that Ahab in Moby Dick was a Christ-like figure.</p><p>你还记得高中时必须写的那些散文吗？主题句、引言段、支撑段、结论。结论嘛，比如说，《白鲸记》里的亚哈是个类似基督的人物。</p><p>Oy. So I’m going to try to give the other side of the story: what an essay really is, and how you write one. Or at least, how I write one.</p><p>唉。所以我打算试着讲讲事情的另一面：真正的散文是什么，以及如何写一篇散文。或者至少，讲讲我是怎么写的。</p><h3 id="Mods"><a href="#Mods" class="headerlink" title="Mods"></a><strong>Mods</strong></h3><p><strong>拙劣模仿</strong></p><p>The most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about English literature. Certainly schools should teach students how to write. But due to a series of historical accidents the teaching of writing has gotten mixed together with the study of literature. And so all over the country students are writing not about how a baseball team with a small budget might compete with the Yankees, or the role of color in fashion, or what constitutes a good dessert, but about symbolism in Dickens.</p><p>真正的散文和学校里要求写的东西之间，最明显的区别是：真正的散文并不只关乎英国文学。学校当然应该教学生写作，但由于一系列历史偶然事件，写作教学和文学研究混在了一起。于是，全国各地的学生写的不是预算紧张的棒球队如何与扬基队竞争，不是色彩在时尚中的作用，也不是什么构成了美味的甜点，而是狄更斯作品中的象征主义。</p><p>With the result that writing is made to seem boring and pointless. Who cares about symbolism in Dickens? Dickens himself would be more interested in an essay about color or baseball.</p><p>结果就是，写作被弄得既无聊又无意义。谁会在乎狄更斯作品里的象征主义呢？狄更斯本人可能会对比一篇关于色彩或棒球的散文更感兴趣。</p><p>How did things get this way? To answer that we have to go back almost a thousand years. Around 1100, Europe at last began to catch its breath after centuries of chaos, and once they had the luxury of curiosity they rediscovered what we call “the classics.” The effect was rather as if we were visited by beings from another solar system. These earlier civilizations were so much more sophisticated that for the next several centuries the main work of European scholars, in almost every field, was to assimilate what they knew.</p><p>事情怎么会变成这样呢？要回答这个问题，我们得回到近一千年前。大约在 1100 年，经过几个世纪的混乱后，欧洲终于开始缓过气来，一旦他们有了好奇的闲情逸致，就重新发现了我们所说的 “古典文献”。其影响就好比有来自其他太阳系的生物造访了我们。这些早期文明要复杂得多，以至于在接下来的几个世纪里，欧洲学者在几乎所有领域的主要工作，都是吸收这些文明的知识。</p><p>During this period the study of ancient texts acquired great prestige. It seemed the essence of what scholars did. As European scholarship gained momentum it became less and less important; by 1350 someone who wanted to learn about science could find better teachers than Aristotle in his own era. [1] But schools change slower than scholarship. In the 19th century the study of ancient texts was still the backbone of the curriculum.</p><p>在这一时期，对古代文献的研究获得了极高的声望，似乎成了学者工作的核心。随着欧洲学术的发展，这项研究的重要性越来越低；到 1350 年，想要学习科学的人在自己的时代能找到比亚里士多德更好的老师。[1] 但学校的变化比学术的变化慢。到 19 世纪，对古代文献的研究仍然是课程的核心。</p><p>The time was then ripe for the question: if the study of ancient texts is a valid field for scholarship, why not modern texts? The answer, of course, is that the original raison d’etre of classical scholarship was a kind of intellectual archaeology that does not need to be done in the case of contemporary authors. But for obvious reasons no one wanted to give that answer. The archaeological work being mostly done, it implied that those studying the classics were, if not wasting their time, at least working on problems of minor importance.</p><p>于是，一个问题应运而生：如果研究古代文献是一个合理的学术领域，那为什么不能研究现代文献呢？答案当然是，古典学术最初的存在理由是一种知识考古，而对于当代作家来说，这种考古是不必要的。但出于明显的原因，没人愿意给出这个答案。既然考古工作大多已经完成，这就意味着那些研究古典文献的人，就算不是在浪费时间，至少也是在研究不太重要的问题。</p><p>And so began the study of modern literature. There was a good deal of resistance at first. The first courses in English literature seem to have been offered by the newer colleges, particularly American ones. Dartmouth, the University of Vermont, Amherst, and University College, London taught English literature in the 1820s. But Harvard didn’t have a professor of English literature until 1876, and Oxford not till 1885. (Oxford had a chair of Chinese before it had one of English.) [2]</p><p>于是，现代文学研究开始了。起初阻力很大。第一批英国文学课程似乎是由较新的学院开设的，尤其是美国的学院。达特茅斯学院、佛蒙特大学、阿默斯特学院和伦敦大学学院在 19 世纪 20 年代就开设了英国文学课程。但哈佛大学直到 1876 年才有英国文学教授，牛津大学则要到 1885 年。（牛津大学设立中文教席比设立英文教席还早。）[2]</p><p>What tipped the scales, at least in the US, seems to have been the idea that professors should do research as well as teach. This idea (along with the PhD, the department, and indeed the whole concept of the modern university) was imported from Germany in the late 19th century. Beginning at Johns Hopkins in 1876, the new model spread rapidly.</p><p>至少在美国，打破平衡的似乎是这样一种观念：教授既要教学也要做研究。这种观念（以及博士学位、系的设置，甚至整个现代大学的概念）是 19 世纪末从德国引入的。1876 年从约翰・霍普金斯大学开始，这种新模式迅速传播开来。</p><p>Writing was one of the casualties. Colleges had long taught English composition. But how do you do research on composition? The professors who taught math could be required to do original math, the professors who taught history could be required to write scholarly articles about history, but what about the professors who taught rhetoric or composition? What should they do research on? The closest thing seemed to be English literature. [3]</p><p>写作成了牺牲品之一。大学长期以来都教授英语写作。但怎么对写作进行研究呢？教数学的教授可以被要求做原创性的数学研究，教历史的教授可以被要求写关于历史的学术文章，但教修辞或写作的教授呢？他们应该研究什么？最接近的似乎是英国文学。[3]</p><p>And so in the late 19th century the teaching of writing was inherited by English professors. This had two drawbacks: (a) an expert on literature need not himself be a good writer, any more than an art historian has to be a good painter, and (b) the subject of writing now tends to be literature, since that’s what the professor is interested in.</p><p>于是在 19 世纪末，写作教学落到了英语教授手中。这有两个弊端：（a）文学专家本身不一定是好作家，就像艺术史学家不一定是好画家一样；（b）写作的主题现在往往是文学，因为这是教授感兴趣的领域。</p><p>High schools imitate universities. The seeds of our miserable high school experiences were sown in 1892, when the National Education Association “formally recommended that literature and composition be unified in the high school course.” [4] The ‘riting component of the 3 Rs then morphed into English, with the bizarre consequence that high school students now had to write about English literature– to write, without even realizing it, imitations of whatever English professors had been publishing in their journals a few decades before.</p><p>高中模仿大学。我们痛苦的高中经历的种子是在 1892 年种下的，当时全国教育协会 “正式建议在高中课程中将文学和写作统一起来”。[4] 后来，“3R”（读、写、算）中的 “写” 逐渐演变成了英语课的一部分，结果就出现了一种奇怪的现象：高中生现在必须写关于英国文学的内容 —— 他们在写作时甚至没有意识到，自己是在模仿几十年前英语教授们在期刊上发表的东西。</p><p>It’s no wonder if this seems to the student a pointless exercise, because we’re now three steps removed from real work: the students are imitating English professors, who are imitating classical scholars, who are merely the inheritors of a tradition growing out of what was, 700 years ago, fascinating and urgently needed work.</p><p>难怪在学生看来，这似乎是一项无意义的练习，因为我们现在已经与真正的工作隔了三层：学生在模仿英语教授，英语教授在模仿古典学者，而古典学者只不过是一种传统的继承者，这种传统源于 700 年前一项有趣且急需的工作。</p><h3 id="No-Defense"><a href="#No-Defense" class="headerlink" title="No Defense"></a><strong>No Defense</strong></h3><p><strong>没有辩护</strong></p><p>The other big difference between a real essay and the things they make you write in school is that a real essay doesn’t take a position and then defend it. That principle, like the idea that we ought to be writing about literature, turns out to be another intellectual hangover of long forgotten origins.</p><p>真正的散文和学校里要求写的东西之间的另一个大区别是：真正的散文不会先确立一个立场然后为之辩护。这个原则，就像我们应该写文学的观念一样，其实是另一种被遗忘已久的思想残余。</p><p>It’s often mistakenly believed that medieval universities were mostly seminaries. In fact they were more law schools. And at least in our tradition lawyers are advocates, trained to take either side of an argument and make as good a case for it as they can. Whether cause or effect, this spirit pervaded early universities. The study of rhetoric, the art of arguing persuasively, was a third of the undergraduate curriculum. [5] And after the lecture the most common form of discussion was the disputation. This is at least nominally preserved in our present-day thesis defense: most people treat the words thesis and dissertation as interchangeable, but originally, at least, a thesis was a position one took and the dissertation was the argument by which one defended it.</p><p>人们常常误以为中世纪的大学主要是神学院。事实上，它们更像是法学院。至少在我们的传统中，律师是辩护者，受过训练，能站在论点的任何一方，并尽可能为其辩护。无论因果如何，这种精神弥漫在早期的大学中。修辞学（有说服力的辩论艺术）的学习占了本科课程的三分之一。[5] 讲座之后，最常见的讨论形式是辩论。这至少在名义上保留在我们现在的论文答辩中：大多数人把 “thesis” 和 “dissertation” 当作同义词，但至少在最初，“thesis” 是一个人所持的立场，而 “dissertation” 是为这个立场辩护的论据。</p><p>Defending a position may be a necessary evil in a legal dispute, but it’s not the best way to get at the truth, as I think lawyers would be the first to admit. It’s not just that you miss subtleties this way. The real problem is that you can’t change the question.</p><p>在法律纠纷中，为一个立场辩护可能是一种必要之恶，但这并不是探求真相的最佳方式，我想律师会是第一个承认这一点的人。这不仅仅是因为这样会忽略细节，真正的问题是你不能改变问题本身。</p><p>And yet this principle is built into the very structure of the things they teach you to write in high school. The topic sentence is your thesis, chosen in advance, the supporting paragraphs the blows you strike in the conflict, and the conclusion– uh, what is the conclusion? I was never sure about that in high school. It seemed as if we were just supposed to restate what we said in the first paragraph, but in different enough words that no one could tell. Why bother? But when you understand the origins of this sort of “essay,” you can see where the conclusion comes from. It’s the concluding remarks to the jury.</p><p>然而，这个原则却被植入了高中教你写的文章的结构中。主题句是你预先选定的论点，支撑段是你在辩论中打出的 “重拳”，而结论 —— 嗯，结论是什么呢？高中时我一直不确定。似乎我们只是应该重述第一段说过的话，但要用足够不同的措辞，让人看不出来。何必呢？但当你理解了这种 “散文” 的起源，你就会明白结论来自哪里 —— 它是对陪审团的总结陈词。</p><p>Good writing should be convincing, certainly, but it should be convincing because you got the right answers, not because you did a good job of arguing. When I give a draft of an essay to friends, there are two things I want to know: which parts bore them, and which seem unconvincing. The boring bits can usually be fixed by cutting. But I don’t try to fix the unconvincing bits by arguing more cleverly. I need to talk the matter over.</p><p>好的写作当然应该有说服力，但这种说服力应该来自你得出了正确的答案，而不是因为你辩论得很巧妙。当我把一篇散文的草稿给朋友看时，我想知道两件事：哪些部分让他们觉得无聊，哪些部分看起来没有说服力。无聊的部分通常可以通过删减来修正。但我不会试图通过更巧妙的辩论来修正那些没有说服力的部分，我需要把事情好好谈一谈。</p><p>At the very least I must have explained something badly. In that case, in the course of the conversation I’ll be forced to come up a with a clearer explanation, which I can just incorporate in the essay. More often than not I have to change what I was saying as well. But the aim is never to be convincing per se. As the reader gets smarter, convincing and true become identical, so if I can convince smart readers I must be near the truth.</p><p>至少，我肯定有什么地方解释得不好。在这种情况下，在谈话过程中，我会被迫想出一个更清晰的解释，然后把它融入散文中。很多时候，我还得改变自己原本想说的话。但目的从来不是为了有说服力本身。随着读者越来越聪明，有说服力和真实会变得一致，所以如果我能说服聪明的读者，我一定是接近真相了。</p><p>The sort of writing that attempts to persuade may be a valid (or at least inevitable) form, but it’s historically inaccurate to call it an essay. An essay is something else.</p><p>试图说服他人的写作可能是一种合理的（或者至少是不可避免的）形式，但从历史角度来说，称其为 “散文” 是不准确的。散文是另一回事。</p><h3 id="Trying"><a href="#Trying" class="headerlink" title="Trying"></a><strong>Trying</strong></h3><p><strong>不断尝试</strong></p><p>To understand what a real essay is, we have to reach back into history again, though this time not so far. To Michel de Montaigne, who in 1580 published a book of what he called “essais.” He was doing something quite different from what lawyers do, and the difference is embodied in the name. Essayer is the French verb meaning “to try” and an essai is an attempt. An essay is something you write to try to figure something out.</p><p>要理解真正的散文是什么，我们得再次回顾历史，不过这次不用回溯那么远。要说到米歇尔・德・蒙田，他在 1580 年出版了一本他称之为 “essais” 的书。他所做的事情与律师所做的大不相同，这种区别体现在这个词的含义中。“Essayer” 是法语动词，意思是 “尝试”，而 “essai” 就是一种尝试。散文是你为了弄明白某件事而写的东西。</p><p>Figure out what? You don’t know yet. And so you can’t begin with a thesis, because you don’t have one, and may never have one. An essay doesn’t begin with a statement, but with a question. In a real essay, you don’t take a position and defend it. You notice a door that’s ajar, and you open it and walk in to see what’s inside.</p><p>弄明白什么呢？你还不知道。所以你不能从一个论点开始，因为你没有论点，而且可能永远也不会有。散文不是以陈述开始，而是以问题开始。在一篇真正的散文中，你不会确立一个立场并为之辩护。你会注意到一扇半开的门，然后你打开它，走进去看看里面有什么。</p><p>If all you want to do is figure things out, why do you need to write anything, though? Why not just sit and think? Well, there precisely is Montaigne’s great discovery. Expressing ideas helps to form them. Indeed, helps is far too weak a word. Most of what ends up in my essays I only thought of when I sat down to write them. That’s why I write them.</p><p>不过，如果你只想弄明白事情，为什么需要写下来呢？为什么不只是坐着思考呢？这恰恰是蒙田的重大发现。表达想法有助于形成想法。事实上，“有助于” 这个词太弱了。我散文里的大部分内容，都是在坐下来写的时候才想到的。这就是我写散文的原因。</p><p>In the things you write in school you are, in theory, merely explaining yourself to the reader. In a real essay you’re writing for yourself. You’re thinking out loud.</p><p>在学校里写的东西，理论上，你只是在向读者解释自己。而在真正的散文中，你是为自己而写，你是在出声思考。</p><p>But not quite. Just as inviting people over forces you to clean up your apartment, writing something that other people will read forces you to think well. So it does matter to have an audience. The things I’ve written just for myself are no good. They tend to peter out. When I run into difficulties, I find I conclude with a few vague questions and then drift off to get a cup of tea.</p><p>但也不完全是。就像邀请别人来家里会迫使你打扫公寓一样，写一些别人会读的东西会迫使你好好思考。所以有读者是很重要的。我只为自己写的东西都不怎么样，它们往往会不了了之。当我遇到困难时，我发现自己会以几个模糊的问题结束，然后就起身去喝杯茶了。</p><p>Many published essays peter out in the same way. Particularly the sort written by the staff writers of newsmagazines. Outside writers tend to supply editorials of the defend-a-position variety, which make a beeline toward a rousing (and foreordained) conclusion. But the staff writers feel obliged to write something “balanced.” Since they’re writing for a popular magazine, they start with the most radioactively controversial questions, from which– because they’re writing for a popular magazine– they then proceed to recoil in terror. Abortion, for or against? This group says one thing. That group says another. One thing is certain: the question is a complex one. (But don’t get mad at us. We didn’t draw any conclusions.)</p><p>很多已发表的散文也是这样不了了之，尤其是那些新闻杂志的专职撰稿人写的。外部撰稿人往往会提供那种为立场辩护的社论，直奔一个激动人心（且早已注定）的结论。但专职撰稿人觉得有义务写得 “平衡”。因为他们是为大众杂志写作，所以会从最具争议性的问题入手，然后 —— 因为他们是为大众杂志写作 —— 又会吓得退缩。堕胎，支持还是反对？这个群体这么说，那个群体那么说。有一点是肯定的：这个问题很复杂。（但别生我们的气，我们没有得出任何结论。）</p><h3 id="The-River"><a href="#The-River" class="headerlink" title="The River"></a><strong>The River</strong></h3><p><strong>模仿河流</strong></p><p>Questions aren’t enough. An essay has to come up with answers. They don’t always, of course. Sometimes you start with a promising question and get nowhere. But those you don’t publish. Those are like experiments that get inconclusive results. An essay you publish ought to tell the reader something he didn’t already know.</p><p>只有问题是不够的。散文必须得出答案。当然，并非总能如此。有时你从一个有希望的问题开始，却毫无进展。但这样的散文你不会发表，它们就像得出不确定结果的实验。你发表的散文应该告诉读者一些他不知道的东西。</p><p>But what you tell him doesn’t matter, so long as it’s interesting. I’m sometimes accused of meandering. In defend-a-position writing that would be a flaw. There you’re not concerned with truth. You already know where you’re going, and you want to go straight there, blustering through obstacles, and hand-waving your way across swampy ground. But that’s not what you’re trying to do in an essay. An essay is supposed to be a search for truth. It would be suspicious if it didn’t meander.</p><p>但你告诉读者什么并不重要，只要它有趣就行。我有时会被指责行文散漫。在为立场辩护的写作中，这会是一个缺点。在那种写作中，你不关心真相，你已经知道自己要去哪里，你想直奔目的地，冲破障碍，在沼泽地上挥手示意着前进。但这不是你写散文时要做的事。散文应该是对真相的探索，如果它不 “散漫”，反而会让人怀疑。</p><p>The Meander (aka Menderes) is a river in Turkey. As you might expect, it winds all over the place. But it doesn’t do this out of frivolity. The path it has discovered is the most economical route to the sea. [6]</p><p>米安德河（又称门德雷斯河）是土耳其的一条河。正如你所料，它蜿蜒曲折。但它这么做并非出于轻率，它找到的路径是通往大海最经济的路线。[6]</p><p>The river’s algorithm is simple. At each step, flow down. For the essayist this translates to: flow interesting. Of all the places to go next, choose the most interesting. One can’t have quite as little foresight as a river. I always know generally what I want to write about. But not the specific conclusions I want to reach; from paragraph to paragraph I let the ideas take their course.</p><p>河流的法则很简单：每一步都向下流动。对散文作家来说，这意味着：朝着有趣的方向流动。在所有接下来可以去的地方中，选择最有趣的那个。人不可能像河流那样毫无远见。我总是大致知道自己想写什么，但不知道具体要得出什么结论；我让想法一段一段地自然发展。</p><p>This doesn’t always work. Sometimes, like a river, one runs up against a wall. Then I do the same thing the river does: backtrack. At one point in this essay I found that after following a certain thread I ran out of ideas. I had to go back seven paragraphs and start over in another direction.</p><p>这并不总能奏效。有时，就像河流一样，你会遇到阻碍。这时我会做和河流一样的事：回溯。在写这篇散文时，有一次我发现沿着某个思路写下去，想法枯竭了。我不得不回到七段之前，从另一个方向重新开始。</p><p>Fundamentally an essay is a train of thought– but a cleaned-up train of thought, as dialogue is cleaned-up conversation. Real thought, like real conversation, is full of false starts. It would be exhausting to read. You need to cut and fill to emphasize the central thread, like an illustrator inking over a pencil drawing. But don’t change so much that you lose the spontaneity of the original.</p><p>从根本上说，散文是一连串的想法 —— 但这是经过梳理的想法，就像对话是经过整理的交谈一样。真正的思考，就像真正的交谈一样，充满了错误的开端，读起来会让人疲惫。你需要删减和补充，以突出中心思路，就像插画师在铅笔稿上描墨一样。但不要改动太多，以免失去原作的自发性。</p><p>Err on the side of the river. An essay is not a reference work. It’s not something you read looking for a specific answer, and feel cheated if you don’t find it. I’d much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course.</p><p>宁愿像河流那样 “散漫”。散文不是参考书，不是你为了寻找某个特定答案而读的东西，也不会因为没找到答案就觉得受骗。我宁愿读一篇朝着意想不到但有趣的方向发展的散文，也不愿读一篇沿着规定路线乏味前行的散文。</p><h3 id="Surprise"><a href="#Surprise" class="headerlink" title="Surprise"></a><strong>Surprise</strong></h3><p><strong>制造惊喜</strong></p><p>So what’s interesting? For me, interesting means surprise. Interfaces, as Geoffrey James has said, should follow the principle of least astonishment. A button that looks like it will make a machine stop should make it stop, not speed up. Essays should do the opposite. Essays should aim for maximum surprise.</p><p>那么，什么是有趣呢？对我来说，有趣意味着惊喜。正如杰弗里・詹姆斯所说，界面设计应该遵循 “最小惊讶原则”。一个看起来会让机器停止的按钮，就应该让机器停止，而不是加速。散文则应该相反，散文应该以制造最大惊喜为目标。</p><p>I was afraid of flying for a long time and could only travel vicariously. When friends came back from faraway places, it wasn’t just out of politeness that I asked what they saw. I really wanted to know. And I found the best way to get information out of them was to ask what surprised them. How was the place different from what they expected? This is an extremely useful question. You can ask it of the most unobservant people, and it will extract information they didn’t even know they were recording.</p><p>我很长一段时间都害怕坐飞机，只能 vicariously（通过他人）旅行。当朋友们从远方回来时，我问他们看到了什么，不仅仅是出于礼貌，我是真的想知道。我发现从他们那里获取信息的最好方法是问他们什么让他们感到惊讶，那个地方和他们预期的有什么不同。这是一个非常有用的问题，你可以问最不善于观察的人，它会激发出他们自己都不知道自己记录了的信息。</p><p>Surprises are things that you not only didn’t know, but that contradict things you thought you knew. And so they’re the most valuable sort of fact you can get. They’re like a food that’s not merely healthy, but counteracts the unhealthy effects of things you’ve already eaten.</p><p>惊喜是那些你不仅不知道，而且与你认为自己知道的事情相矛盾的东西。因此，它们是你能得到的最有价值的事实。它们就像一种食物，不仅有益健康，还能抵消你已经吃下去的不健康食物的影响。</p><p>How do you find surprises? Well, therein lies half the work of essay writing. (The other half is expressing yourself well.) The trick is to use yourself as a proxy for the reader. You should only write about things you’ve thought about a lot. And anything you come across that surprises you, who’ve thought about the topic a lot, will probably surprise most readers.</p><p>如何找到惊喜呢？这正是写散文一半的工作量所在（另一半是把自己表达清楚）。诀窍是把自己当作读者的替身。你应该只写那些你思考了很久的事情。而任何让深入思考过这个话题的你感到惊讶的东西，很可能也会让大多数读者感到惊讶。</p><p>For example, in a recent essay I pointed out that because you can only judge computer programmers by working with them, no one knows who the best programmers are overall. I didn’t realize this when I began that essay, and even now I find it kind of weird. That’s what you’re looking for.</p><p>例如，在最近的一篇散文中，我指出，因为你只能通过与计算机程序员一起工作来评判他们，所以没有人知道总体上谁是最好的程序员。我开始写那篇散文时并没有意识到这一点，即使现在我也觉得这有点奇怪。这正是你要寻找的东西。</p><p>So if you want to write essays, you need two ingredients: a few topics you’ve thought about a lot, and some ability to ferret out the unexpected.</p><p>所以，如果你想写散文，你需要两个要素：几个你深入思考过的话题，以及一些发现意外的能力。</p><p>What should you think about? My guess is that it doesn’t matter– that anything can be interesting if you get deeply enough into it. One possible exception might be things that have deliberately had all the variation sucked out of them, like working in fast food. In retrospect, was there anything interesting about working at Baskin-Robbins? Well, it was interesting how important color was to the customers. Kids a certain age would point into the case and say that they wanted yellow. Did they want French Vanilla or Lemon? They would just look at you blankly. They wanted yellow. And then there was the mystery of why the perennial favorite Pralines ‘n’ Cream was so appealing. (I think now it was the salt.) And the difference in the way fathers and mothers bought ice cream for their kids: the fathers like benevolent kings bestowing largesse, the mothers harried, giving in to pressure. So, yes, there does seem to be some material even in fast food.</p><p>你应该思考些什么呢？我猜这并不重要 —— 任何事情，只要你足够深入地去探究，都能变得有趣。一个可能的例外是那些被刻意剥夺了所有变化的事情，比如在快餐店工作。回想一下，在巴斯金 - 罗宾斯（冰淇淋店）工作有什么有趣的地方吗？嗯，顾客对颜色的重视程度很有趣。某个年龄段的孩子会指着展示柜说他们想要黄色的。他们想要法式香草味还是柠檬味？他们只会茫然地看着你，他们就想要黄色的。还有一个谜团：为什么常年受欢迎的 “果仁糖奶油味” 如此吸引人（我现在觉得是因为盐）。还有父母给孩子买冰淇淋的方式差异：父亲们像仁慈的国王一样慷慨赠予，母亲们则疲惫不堪，向压力妥协。所以，是的，即使是在快餐行业，似乎也有可写的素材。</p><p>I didn’t notice those things at the time, though. At sixteen I was about as observant as a lump of rock. I can see more now in the fragments of memory I preserve of that age than I could see at the time from having it all happening live, right in front of me.</p><p>不过，当时我并没有注意到这些。16 岁时，我像一块石头一样不善于观察。现在，从那段岁月留存的记忆碎片中，我能看到的东西，比当时这一切就在我眼前发生时看到的还要多。</p><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a><strong>Observation</strong></h3><p><strong>持续观察</strong></p><p>So the ability to ferret out the unexpected must not merely be an inborn one. It must be something you can learn. How do you learn it?</p><p>所以，发现意外的能力不仅仅是天生的，它一定是可以学习的。如何学习呢？</p><p>To some extent it’s like learning history. When you first read history, it’s just a whirl of names and dates. Nothing seems to stick. But the more you learn, the more hooks you have for new facts to stick onto– which means you accumulate knowledge at an exponential rate. Once you remember that Normans conquered England in 1066, it will catch your attention when you hear that other Normans conquered southern Italy at about the same time. Which will make you wonder about Normandy, and take note when a third book mentions that Normans were not, like most of what is now called France, tribes that flowed in as the Roman empire collapsed, but Vikings (norman &#x3D; north man) who arrived four centuries later in 911. Which makes it easier to remember that Dublin was also established by Vikings in the 840s. Etc, etc squared.</p><p>在某种程度上，这就像学习历史。当你第一次读历史时，看到的只是一堆混乱的名字和日期，似乎什么都记不住。但你学得越多，就有越多的 “钩子” 来挂住新的事实 —— 这意味着你积累知识的速度是呈指数级的。一旦你记住了 1066 年诺曼人征服了英格兰，当你听说其他诺曼人大约在同一时间征服了意大利南部时，就会引起你的注意。这会让你对诺曼底产生好奇，当第三本书提到诺曼人不像现在被称为法国的大部分地区的部落那样，是在罗马帝国崩溃时涌入的，而是四个世纪后（911 年）到来的维京人（“诺曼人” 即 “北方人”）时，你就会留意。这会让你更容易记住都柏林也是维京人在 9 世纪 40 年代建立的，以此类推，知识会不断叠加。</p><p>Collecting surprises is a similar process. The more anomalies you’ve seen, the more easily you’ll notice new ones. Which means, oddly enough, that as you grow older, life should become more and more surprising. When I was a kid, I used to think adults had it all figured out. I had it backwards. Kids are the ones who have it all figured out. They’re just mistaken.</p><p>收集惊喜是一个类似的过程。你见过的异常越多，就越容易注意到新的异常。奇怪的是，这意味着随着你年龄的增长，生活应该会变得越来越令人惊喜。小时候，我曾以为成年人什么都懂。我弄反了。其实是孩子们觉得自己什么都懂，只是他们错了。</p><p>When it comes to surprises, the rich get richer. But (as with wealth) there may be habits of mind that will help the process along. It’s good to have a habit of asking questions, especially questions beginning with Why. But not in the random way that three year olds ask why. There are an infinite number of questions. How do you find the fruitful ones?</p><p>说到惊喜，就是 “富者愈富”。但（就像财富一样）可能有一些思维习惯会有助于这个过程。养成提问的习惯是好的，尤其是以 “为什么” 开头的问题。但不要像三岁孩子那样随意地问 “为什么”。问题有无数个，如何找到有成效的那些呢？</p><p>I find it especially useful to ask why about things that seem wrong. For example, why should there be a connection between humor and misfortune? Why do we find it funny when a character, even one we like, slips on a banana peel? There’s a whole essay’s worth of surprises there for sure.</p><p>我发现，对那些看起来不对劲的事情问 “为什么” 特别有用。例如，为什么幽默和不幸之间会有联系？为什么当一个角色（即使是我们喜欢的角色）踩在香蕉皮上滑倒时，我们会觉得好笑？这里面肯定有一整篇散文值得挖掘的惊喜。</p><p>If you want to notice things that seem wrong, you’ll find a degree of skepticism helpful. I take it as an axiom that we’re only achieving 1% of what we could. This helps counteract the rule that gets beaten into our heads as children: that things are the way they are because that is how things have to be. For example, everyone I’ve talked to while writing this essay felt the same about English classes– that the whole process seemed pointless. But none of us had the balls at the time to hypothesize that it was, in fact, all a mistake. We all thought there was just something we weren’t getting.</p><p>如果你想注意到那些看起来不对劲的事情，一定程度的怀疑态度会有所帮助。我有一个公理：我们只实现了我们潜能的 1%。这有助于抵消我们小时候被灌输的观念：事情之所以是这样，是因为它们必须是这样。例如，在写这篇散文时，我交谈过的每个人都对英语课有同样的感受 —— 整个过程似乎毫无意义。但当时我们中没有人有勇气假设，事实上，这一切都是个错误。我们都以为只是自己没理解什么。</p><p>I have a hunch you want to pay attention not just to things that seem wrong, but things that seem wrong in a humorous way. I’m always pleased when I see someone laugh as they read a draft of an essay. But why should I be? I’m aiming for good ideas. Why should good ideas be funny? The connection may be surprise. Surprises make us laugh, and surprises are what one wants to deliver.</p><p>我有一种预感，你不仅要注意那些看起来不对劲的事情，还要注意那些以幽默方式显得不对劲的事情。当我看到有人读散文草稿时笑起来，我总是很高兴。但我为什么会高兴呢？我的目标是好的想法。为什么好的想法会好笑呢？这可能和惊喜有关。惊喜会让我们笑，而惊喜正是我们想要传递的东西。</p><p>I write down things that surprise me in notebooks. I never actually get around to reading them and using what I’ve written, but I do tend to reproduce the same thoughts later. So the main value of notebooks may be what writing things down leaves in your head.</p><p>我把让我惊讶的事情写在笔记本上。我其实从来没来得及去读它们，也没用到我写的东西，但后来我确实会反复产生同样的想法。所以笔记本的主要价值可能在于，把东西写下来后在你脑海中留下的印记。</p><p>People trying to be cool will find themselves at a disadvantage when collecting surprises. To be surprised is to be mistaken. And the essence of cool, as any fourteen year old could tell you, is nil admirari. When you’re mistaken, don’t dwell on it; just act like nothing’s wrong and maybe no one will notice.</p><p>那些试图装酷的人在收集惊喜时会发现自己处于不利地位。感到惊讶意味着你错了。而酷的本质，任何一个 14 岁的孩子都能告诉你，是 “不为所动”（nil admirari）。当你犯错时，不要纠缠于此，只要表现得若无其事，也许就没人会注意到。</p><p>One of the keys to coolness is to avoid situations where inexperience may make you look foolish. If you want to find surprises you should do the opposite. Study lots of different things, because some of the most interesting surprises are unexpected connections between different fields. For example, jam, bacon, pickles, and cheese, which are among the most pleasing of foods, were all originally intended as methods of preservation. And so were books and paintings.</p><p>酷的关键之一是避免那些可能因缺乏经验而让你显得愚蠢的场合。如果你想找到惊喜，你应该做相反的事。学习很多不同的东西，因为一些最有趣的惊喜是不同领域之间意想不到的联系。例如，果酱、培根、泡菜和奶酪，这些最受欢迎的食物，最初都是为了保存食物。书籍和绘画也是如此。</p><p>Whatever you study, include history– but social and economic history, not political history. History seems to me so important that it’s misleading to treat it as a mere field of study. Another way to describe it is all the data we have so far.</p><p>无论你学什么，都要包括历史 —— 但要学社会史和经济史，而不是政治史。在我看来，历史如此重要，把它仅仅当作一个研究领域是有误导性的。另一种描述方式是，历史是我们迄今为止拥有的所有数据。</p><p>Among other things, studying history gives one confidence that there are good ideas waiting to be discovered right under our noses. Swords evolved during the Bronze Age out of daggers, which (like their flint predecessors) had a hilt separate from the blade. Because swords are longer the hilts kept breaking off. But it took five hundred years before someone thought of casting hilt and blade as one piece.</p><p>除此之外，学习历史能让人相信，好的想法就在我们眼前，等待被发现。青铜时代的剑是由匕首演变而来的，匕首（就像它们的燧石前身一样）的剑柄和剑身是分开的。因为剑更长，剑柄总是断裂。但过了五百年，才有人想到把剑柄和剑身铸成一体。</p><h3 id="Disobedience"><a href="#Disobedience" class="headerlink" title="Disobedience"></a><strong>Disobedience</strong></h3><p><strong>打破预期</strong></p><p>Above all, make a habit of paying attention to things you’re not supposed to, either because they’re “inappropriate,” or not important, or not what you’re supposed to be working on. If you’re curious about something, trust your instincts. Follow the threads that attract your attention. If there’s something you’re really interested in, you’ll find they have an uncanny way of leading back to it anyway, just as the conversation of people who are especially proud of something always tends to lead back to it.</p><p>最重要的是，养成关注那些你不应该关注的事情的习惯，无论是因为它们 “不合适”、不重要，还是不属于你应该做的事。如果你对某件事好奇，相信你的直觉。跟随吸引你注意力的线索。如果你真的对某件事感兴趣，你会发现这些线索总会以一种不可思议的方式回到这件事上，就像那些对某件事特别自豪的人，他们的谈话总会回到这件事上一样。</p><p>For example, I’ve always been fascinated by comb-overs, especially the extreme sort that make a man look as if he’s wearing a beret made of his own hair. Surely this is a lowly sort of thing to be interested in– the sort of superficial quizzing best left to teenage girls. And yet there is something underneath. The key question, I realized, is how does the comber-over not see how odd he looks? And the answer is that he got to look that way incrementally. What began as combing his hair a little carefully over a thin patch has gradually, over 20 years, grown into a monstrosity. Gradualness is very powerful. And that power can be used for constructive purposes too: just as you can trick yourself into looking like a freak, you can trick yourself into creating something so grand that you would never have dared to plan such a thing. Indeed, this is just how most good software gets created. You start by writing a stripped-down kernel (how hard can it be?) and gradually it grows into a complete operating system. Hence the next leap: could you do the same thing in painting, or in a novel?</p><p>例如，我一直对折中发型（把一边的头发梳到另一边掩盖秃顶）很着迷，尤其是那种极端的，让一个男人看起来像戴着一顶用自己头发做的贝雷帽的发型。当然，对这种事情感兴趣似乎很肤浅 —— 这种表面的探究最好留给十几岁的女孩。但这背后有更深层的东西。我意识到，关键问题是：留这种发型的人为什么看不出自己看起来有多奇怪？答案是，他是逐渐变成那样的。一开始只是小心翼翼地把头发梳过一小块稀疏的地方，20 年来，逐渐变成了一种怪异的样子。渐进的力量是很强大的。这种力量也可以用于建设性的目的：就像你可以不知不觉地让自己看起来像个怪人一样，你也可以不知不觉地创造出一些宏伟的东西，而这些东西是你永远不敢计划的。事实上，大多数好的软件都是这样创造出来的。你从写一个精简的内核开始（能有多难呢？），然后它逐渐成长为一个完整的操作系统。由此产生下一个飞跃：你能在绘画或小说中做同样的事情吗？</p><p>See what you can extract from a frivolous question? If there’s one piece of advice I would give about writing essays, it would be: don’t do as you’re told. Don’t believe what you’re supposed to. Don’t write the essay readers expect; one learns nothing from what one expects. And don’t write the way they taught you to in school.</p><p>看到你能从一个看似无聊的问题中挖掘出什么了吗？如果关于写散文我有一条建议，那就是：不要按别人告诉你的去做。不要相信那些你 “应该” 相信的东西。不要写读者期望的散文，从预期中你学不到任何东西。也不要按学校教你的方式去写。</p><p>The most important sort of disobedience is to write essays at all. Fortunately, this sort of disobedience shows signs of becoming rampant. It used to be that only a tiny number of officially approved writers were allowed to write essays. Magazines published few of them, and judged them less by what they said than who wrote them; a magazine might publish a story by an unknown writer if it was good enough, but if they published an essay on x it had to be by someone who was at least forty and whose job title had x in it. Which is a problem, because there are a lot of things insiders can’t say precisely because they’re insiders.</p><p>最重要的一种 “不服从” 是根本就去写散文。幸运的是，这种 “不服从” 有泛滥的迹象。过去，只有极少数官方认可的作家被允许写散文。杂志发表的散文很少，评判它们时，更多看是谁写的，而不是写了什么；一本杂志可能会发表一个不知名作家的故事，如果故事足够好的话，但如果要发表一篇关于 x 的散文，作者必须至少 40 岁，且 job title（职位头衔）中包含 x。这是个问题，因为有很多事情，业内人士恰恰因为是业内人士而无法说出口。</p><p>The Internet is changing that. Anyone can publish an essay on the Web, and it gets judged, as any writing should, by what it says, not who wrote it. Who are you to write about x? You are whatever you wrote.</p><p>互联网正在改变这一点。任何人都可以在网上发表散文，而且它会像任何作品一样，根据内容而不是作者来评判。你凭什么写关于 x 的内容？你写的东西就定义了你。</p><p>Popular magazines made the period between the spread of literacy and the arrival of TV the golden age of the short story. The Web may well make this the golden age of the essay. And that’s certainly not something I realized when I started writing this.</p><p>在识字率普及到电视出现之间的这段时间里，通俗杂志造就了短篇小说的黄金时代。互联网很可能会让现在成为散文的黄金时代。这一点，我在开始写这篇散文时肯定没有意识到。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垃圾邮件应对方案</title>
    <link href="/2025/08/15/a-plan-for-spam/"/>
    <url>/2025/08/15/a-plan-for-spam/</url>
    
    <content type="html"><![CDATA[<h2 id="A-Plan-for-Spam"><a href="#A-Plan-for-Spam" class="headerlink" title="A Plan for Spam"></a>A Plan for Spam</h2><p>原文链接: <a href="https://paulgraham.com/spam.html">https://paulgraham.com/spam.html</a></p><p>August 2002</p><p>(This article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise Arc. An improved algorithm is described in Better Bayesian Filtering.)</p><p>（本文介绍了我们为测试 Arc 语言而开发的防垃圾邮件网页邮件阅读器中使用的垃圾邮件过滤技术。更完善的算法详见《更好的贝叶斯过滤》。）</p><p>I think it’s possible to stop spam, and that content-based filters are the way to do it. The Achilles heel of the spammers is their message. They can circumvent any other barrier you set up. They have so far, at least. But they have to deliver their message, whatever it is. If we can write software that recognizes their messages, there is no way they can get around that.</p><p>我认为阻止垃圾邮件是有可能的，而基于内容的过滤器是实现这一目标的方法。垃圾邮件发送者的致命弱点在于他们的邮件内容。他们能绕过你设置的任何其他障碍 —— 至少到目前为止是这样。但无论内容是什么，他们总得传递信息。如果我们能写出识别这些信息的软件，他们就无从遁形了。</p><hr><p>To the recipient, spam is easily recognizable. If you hired someone to read your mail and discard the spam, they would have little trouble doing it. How much do we have to do, short of AI, to automate this process?</p><p>对收件人来说，垃圾邮件很容易识别。如果雇人读邮件并删掉垃圾邮件，他们做起来毫不费力。抛开人工智能不谈，要实现这个过程的自动化，我们需要做到什么程度呢？</p><p>I think we will be able to solve the problem with fairly simple algorithms. In fact, I’ve found that you can filter present-day spam acceptably well using nothing more than a Bayesian combination of the spam probabilities of individual words. Using a slightly tweaked (as described below) Bayesian filter, we now miss less than 5 per 1000 spams, with 0 false positives.</p><p>我认为我们能用相当简单的算法解决这个问题。事实上，我发现仅通过对单个单词的垃圾邮件概率进行贝叶斯组合，就能很好地过滤当前的垃圾邮件。使用经过轻微调整（如下所述）的贝叶斯过滤器，我们现在每 1000 封垃圾邮件中漏过的不到 5 封，且误判率为 0。</p><p>The statistical approach is not usually the first one people try when they write spam filters. Most hackers’ first instinct is to try to write software that recognizes individual properties of spam. You look at spams and you think, the gall of these guys to try sending me mail that begins “Dear Friend” or has a subject line that’s all uppercase and ends in eight exclamation points. I can filter out that stuff with about one line of code.</p><p>人们编写垃圾邮件过滤器时，通常不会首先尝试统计方法。大多数黑客的第一反应是编写能识别垃圾邮件个别特征的软件。看到垃圾邮件时，你会想：这些人竟然敢给我发以 “亲爱的朋友” 开头、或主题全是大写且以八个感叹号结尾的邮件。我用一行代码就能过滤掉这类东西。</p><p>And so you do, and in the beginning it works. A few simple rules will take a big bite out of your incoming spam. Merely looking for the word “click” will catch 79.7% of the emails in my spam corpus, with only 1.2% false positives.</p><p>于是你就这么做了，一开始确实有效。几条简单的规则就能大幅减少收到的垃圾邮件。仅搜索 “click” 这个词，就能拦截我垃圾邮件语料库中 79.7% 的邮件，误判率仅为 1.2%。</p><p>I spent about six months writing software that looked for individual spam features before I tried the statistical approach. What I found was that recognizing that last few percent of spams got very hard, and that as I made the filters stricter I got more false positives.</p><p>在尝试统计方法之前，我花了大约六个月时间编写识别垃圾邮件个别特征的软件。我发现，识别最后那几个百分点的垃圾邮件变得非常困难，而且随着过滤器越来越严格，误判也越来越多。</p><p>False positives are innocent emails that get mistakenly identified as spams. For most users, missing legitimate email is an order of magnitude worse than receiving spam, so a filter that yields false positives is like an acne cure that carries a risk of death to the patient.</p><p>误判指的是正常邮件被错误地标记为垃圾邮件。对大多数用户来说，错过合法邮件比收到垃圾邮件要糟糕得多，所以产生误判的过滤器就像一种痤疮疗法，却有导致患者死亡的风险。</p><p>The more spam a user gets, the less likely he’ll be to notice one innocent mail sitting in his spam folder. And strangely enough, the better your spam filters get, the more dangerous false positives become, because when the filters are really good, users will be more likely to ignore everything they catch.</p><p>用户收到的垃圾邮件越多，就越难注意到垃圾邮件文件夹里有一封正常邮件。奇怪的是，你的垃圾邮件过滤器越好，误判就越危险，因为当过滤器非常出色时，用户更可能忽略它拦截的所有内容。</p><p>I don’t know why I avoided trying the statistical approach for so long. I think it was because I got addicted to trying to identify spam features myself, as if I were playing some kind of competitive game with the spammers. (Nonhackers don’t often realize this, but most hackers are very competitive.) When I did try statistical analysis, I found immediately that it was much cleverer than I had been. It discovered, of course, that terms like “virtumundo” and “teens” were good indicators of spam. But it also discovered that “per” and “FL” and “ff0000” are good indicators of spam. In fact, “ff0000” (html for bright red) turns out to be as good an indicator of spam as any pornographic term.</p><p>我不知道为什么我这么久都没尝试统计方法。我想是因为我沉迷于自己识别垃圾邮件特征，就像在和垃圾邮件发送者玩一种竞争性游戏（非黑客往往意识不到，但大多数黑客都极具竞争性）。当我尝试统计分析时，立刻发现它比我聪明得多。当然，它发现了 “virtumundo” 和 “teens” 这类词是垃圾邮件的良好指示器，但也发现 “per”“FL” 和 “ff0000” 也是如此。事实上，“ff0000”（HTML 中表示亮红色）作为垃圾邮件指示器的效果，和任何色情词汇一样好。</p><hr><p>Here’s a sketch of how I do statistical filtering. I start with one corpus of spam and one of nonspam mail. At the moment each one has about 4000 messages in it. I scan the entire text, including headers and embedded html and javascript, of each message in each corpus. I currently consider alphanumeric characters, dashes, apostrophes, and dollar signs to be part of tokens, and everything else to be a token separator. (There is probably room for improvement here.) I ignore tokens that are all digits, and I also ignore html comments, not even considering them as token separators.</p><p>下面简要介绍我进行统计过滤的方法。我从一个垃圾邮件语料库和一个非垃圾邮件语料库开始。目前每个语料库大约有 4000 条消息。我扫描每个语料库中每条消息的全部文本，包括标题、嵌入的 HTML 和 JavaScript。目前，我将字母数字字符、连字符、撇号和美元符号视为令牌的一部分，其他所有字符都作为令牌分隔符（这方面可能还有改进空间）。我忽略全是数字的令牌，也忽略 HTML 注释，甚至不把它们当作令牌分隔符。</p><p>I count the number of times each token (ignoring case, currently) occurs in each corpus. At this stage I end up with two large hash tables, one for each corpus, mapping tokens to number of occurrences.</p><p>我统计每个令牌（目前不区分大小写）在每个语料库中出现的次数。在这个阶段，我得到两个大型哈希表，每个语料库一个，用于将令牌映射到出现次数。</p><p>Next I create a third hash table, this time mapping each token to the probability that an email containing it is a spam, which I calculate as follows [1]:</p><p>接下来，我创建第三个哈希表，这次是将每个令牌映射到包含该令牌的邮件是垃圾邮件的概率，计算方法如下 [1]：</p><p>(let ((g (* 2 (or (gethash word good) 0)))<br>(b (or (gethash word bad) 0)))<br>(unless (&lt; (+ g b) 5)<br>(max .01<br>(min .99 (float (&#x2F; (min 1 (&#x2F; b nbad))<br>(+ (min 1 (&#x2F; g ngood))<br>(min 1 (&#x2F; b nbad)))))))))<br>where word is the token whose probability we’re calculating, good and bad are the hash tables I created in the first step, and ngood and nbad are the number of nonspam and spam messages respectively.</p><p>其中，word 是我们要计算概率的令牌，good 和 bad 是第一步创建的哈希表，ngood 和 nbad 分别是非垃圾邮件和垃圾邮件的数量。</p><p>I explained this as code to show a couple of important details. I want to bias the probabilities slightly to avoid false positives, and by trial and error I’ve found that a good way to do it is to double all the numbers in good. This helps to distinguish between words that occasionally do occur in legitimate email and words that almost never do. I only consider words that occur more than five times in total (actually, because of the doubling, occurring three times in nonspam mail would be enough). And then there is the question of what probability to assign to words that occur in one corpus but not the other. Again by trial and error I chose .01 and .99. There may be room for tuning here, but as the corpus grows such tuning will happen automatically anyway.</p><p>我用代码来解释是为了展示几个重要细节。我想略微调整概率以避免误判，通过反复试验发现，一个好方法是将 good 中的所有数值加倍。这有助于区分偶尔出现在合法邮件中的单词和几乎从不出现的单词。我只考虑总出现次数超过 5 次的单词（实际上，由于加倍处理，在非垃圾邮件中出现 3 次就足够了）。还有一个问题是，对于在一个语料库中出现而在另一个中不出现的单词，该分配什么概率。我再次通过反复试验选择了 0.01 和 0.99。这里可能有调整的空间，但随着语料库的扩大，这种调整会自动进行。</p><p>The especially observant will notice that while I consider each corpus to be a single long stream of text for purposes of counting occurrences, I use the number of emails in each, rather than their combined length, as the divisor in calculating spam probabilities. This adds another slight bias to protect against false positives.</p><p>观察力特别敏锐的人会注意到，虽然为了统计出现次数，我将每个语料库视为一个连续的长文本流，但在计算垃圾邮件概率时，我使用每个语料库中的邮件数量作为除数，而不是它们的总长度。这又增加了一个轻微的偏向，以防止误判。</p><p>When new mail arrives, it is scanned into tokens, and the most interesting fifteen tokens, where interesting is measured by how far their spam probability is from a neutral .5, are used to calculate the probability that the mail is spam. If probs is a list of the fifteen individual probabilities, you calculate the combined probability thus:</p><p>当新邮件到达时，它会被扫描成令牌，然后选取 15 个最 “有趣” 的令牌（“有趣” 的衡量标准是它们的垃圾邮件概率与中性值 0.5 的距离）来计算该邮件是垃圾邮件的概率。如果 probs 是这 15 个单独概率的列表，那么联合概率的计算方法如下：</p><p>(let ((prod (apply #’* probs)))<br>(&#x2F; prod (+ prod (apply #’* (mapcar #’(lambda (x)<br>(- 1 x))<br>probs)))))<br>One question that arises in practice is what probability to assign to a word you’ve never seen, i.e. one that doesn’t occur in the hash table of word probabilities. I’ve found, again by trial and error, that .4 is a good number to use. If you’ve never seen a word before, it is probably fairly innocent; spam words tend to be all too familiar.</p><p>在实际应用中出现的一个问题是，对于从未见过的单词（即在单词概率哈希表中没有出现的单词），该分配什么概率。我再次通过反复试验发现，0.4 是个不错的数值。如果你从未见过某个单词，它很可能是无害的；而垃圾邮件中出现的单词往往都很常见。</p><p>There are examples of this algorithm being applied to actual emails in an appendix at the end.</p><p>文末的附录中有该算法应用于实际邮件的例子。</p><p>I treat mail as spam if the algorithm above gives it a probability of more than .9 of being spam. But in practice it would not matter much where I put this threshold, because few probabilities end up in the middle of the range.</p><p>如果上述算法给出的邮件是垃圾邮件的概率超过 0.9，我就将其视为垃圾邮件。但实际上，这个阈值设在哪里影响不大，因为很少有概率会落在中间范围。</p><hr><p>One great advantage of the statistical approach is that you don’t have to read so many spams. Over the past six months, I’ve read literally thousands of spams, and it is really kind of demoralizing. Norbert Wiener said if you compete with slaves you become a slave, and there is something similarly degrading about competing with spammers. To recognize individual spam features you have to try to get into the mind of the spammer, and frankly I want to spend as little time inside the minds of spammers as possible.</p><p>统计方法的一大优势是你不必阅读那么多垃圾邮件。在过去六个月里，我确实读了数千封垃圾邮件，这真的很让人泄气。诺伯特・维纳说过，与奴隶竞争，你会变成奴隶；与垃圾邮件发送者竞争，也有类似的屈辱感。要识别垃圾邮件的个别特征，你就得试图钻进垃圾邮件发送者的脑子里，坦率地说，我想尽可能少花时间去琢磨他们的想法。</p><p>But the real advantage of the Bayesian approach, of course, is that you know what you’re measuring. Feature-recognizing filters like SpamAssassin assign a spam “score” to email. The Bayesian approach assigns an actual probability. The problem with a “score” is that no one knows what it means. The user doesn’t know what it means, but worse still, neither does the developer of the filter. How many points should an email get for having the word “sex” in it? A probability can of course be mistaken, but there is little ambiguity about what it means, or how evidence should be combined to calculate it. Based on my corpus, “sex” indicates a .97 probability of the containing email being a spam, whereas “sexy” indicates .99 probability. And Bayes’ Rule, equally unambiguous, says that an email containing both words would, in the (unlikely) absence of any other evidence, have a 99.97% chance of being a spam.</p><p>当然，贝叶斯方法的真正优势在于你知道自己在衡量什么。像 SpamAssassin 这样的特征识别过滤器会给邮件分配一个垃圾邮件 “分数”，而贝叶斯方法则给出实际概率。“分数” 的问题在于没人知道它意味着什么。用户不知道，更糟糕的是，过滤器的开发者也不知道。邮件中出现 “sex” 一词应该扣多少分？概率当然可能出错，但它的含义以及如何结合证据计算概率，几乎没有歧义。根据我的语料库，“sex” 意味着包含它的邮件有 97% 的概率是垃圾邮件，而 “sexy” 则意味着 99% 的概率。同样明确的是，根据贝叶斯法则，在（不太可能的）没有其他证据的情况下，同时包含这两个词的邮件有 99.97% 的概率是垃圾邮件。</p><p>Because it is measuring probabilities, the Bayesian approach considers all the evidence in the email, both good and bad. Words that occur disproportionately rarely in spam (like “though” or “tonight” or “apparently”) contribute as much to decreasing the probability as bad words like “unsubscribe” and “opt-in” do to increasing it. So an otherwise innocent email that happens to include the word “sex” is not going to get tagged as spam.</p><p>由于贝叶斯方法是在衡量概率，它会考虑邮件中所有的证据，包括有利的和不利的。在垃圾邮件中出现频率异常低的词（如 “though”“tonight”“apparently”）在降低概率方面的作用，与 “unsubscribe”“opt-in” 等不利词汇在提高概率方面的作用相当。因此，一封原本正常、只是碰巧包含 “sex” 一词的邮件不会被标记为垃圾邮件。</p><p>Ideally, of course, the probabilities should be calculated individually for each user. I get a lot of email containing the word “Lisp”, and (so far) no spam that does. So a word like that is effectively a kind of password for sending mail to me. In my earlier spam-filtering software, the user could set up a list of such words and mail containing them would automatically get past the filters. On my list I put words like “Lisp” and also my zipcode, so that (otherwise rather spammy-sounding) receipts from online orders would get through. I thought I was being very clever, but I found that the Bayesian filter did the same thing for me, and moreover discovered of a lot of words I hadn’t thought of.</p><p>当然，理想情况下，概率应该为每个用户单独计算。我收到很多包含 “Lisp” 一词的邮件，（到目前为止）没有垃圾邮件包含这个词。所以像这样的词实际上是给我发邮件的一种 “密码”。在我早期的垃圾邮件过滤软件中，用户可以设置这样的单词列表，包含这些单词的邮件会自动通过过滤器。我在自己的列表中加入了 “Lisp” 和我的邮政编码，这样（否则听起来很像垃圾邮件的）在线订单收据就能通过。我以为自己很聪明，但发现贝叶斯过滤器也为我做了同样的事，而且还发现了很多我没想到的单词。</p><p>When I said at the start that our filters let through less than 5 spams per 1000 with 0 false positives, I’m talking about filtering my mail based on a corpus of my mail. But these numbers are not misleading, because that is the approach I’m advocating: filter each user’s mail based on the spam and nonspam mail he receives. Essentially, each user should have two delete buttons, ordinary delete and delete-as-spam. Anything deleted as spam goes into the spam corpus, and everything else goes into the nonspam corpus.</p><p>我一开始说我们的过滤器每 1000 封垃圾邮件中漏过的不到 5 封，且误判率为 0，指的是基于我自己的邮件语料库过滤我的邮件。但这些数字并不具有误导性，因为这正是我所倡导的方法：根据每个用户收到的垃圾邮件和非垃圾邮件来过滤他们的邮件。本质上，每个用户应该有两个删除按钮，一个是普通删除，一个是标记为垃圾邮件删除。标记为垃圾邮件删除的内容进入垃圾邮件语料库，其他内容进入非垃圾邮件语料库。</p><p>You could start users with a seed filter, but ultimately each user should have his own per-word probabilities based on the actual mail he receives. This (a) makes the filters more effective, (b) lets each user decide their own precise definition of spam, and (c) perhaps best of all makes it hard for spammers to tune mails to get through the filters. If a lot of the brain of the filter is in the individual databases, then merely tuning spams to get through the seed filters won’t guarantee anything about how well they’ll get through individual users’ varying and much more trained filters.</p><p>可以给用户一个初始过滤器，但最终每个用户都应该根据自己收到的实际邮件拥有自己的单词概率。这（a）能提高过滤器的效率；（b）让每个用户可以自己定义垃圾邮件；（c）或许最重要的是，让垃圾邮件发送者难以调整邮件以通过过滤器。如果过滤器的核心部分存在于各个用户的数据库中，那么仅仅调整垃圾邮件以通过初始过滤器，并不能保证它们能顺利通过每个用户各不相同且训练更充分的过滤器。</p><p>Content-based spam filtering is often combined with a whitelist, a list of senders whose mail can be accepted with no filtering. One easy way to build such a whitelist is to keep a list of every address the user has ever sent mail to. If a mail reader has a delete-as-spam button then you could also add the from address of every email the user has deleted as ordinary trash.</p><p>基于内容的垃圾邮件过滤通常与白名单结合使用，白名单是指可以无过滤接收邮件的发送者列表。构建这种白名单的一个简单方法是保存用户曾经发送过邮件的所有地址。如果邮件阅读器有 “标记为垃圾邮件删除” 按钮，还可以添加用户以普通方式删除的所有邮件的发件人地址。</p><p>I’m an advocate of whitelists, but more as a way to save computation than as a way to improve filtering. I used to think that whitelists would make filtering easier, because you’d only have to filter email from people you’d never heard from, and someone sending you mail for the first time is constrained by convention in what they can say to you. Someone you already know might send you an email talking about sex, but someone sending you mail for the first time would not be likely to. The problem is, people can have more than one email address, so a new from-address doesn’t guarantee that the sender is writing to you for the first time. It is not unusual for an old friend (especially if he is a hacker) to suddenly send you an email with a new from-address, so you can’t risk false positives by filtering mail from unknown addresses especially stringently.</p><p>我支持使用白名单，但更多是作为节省计算资源的方式，而非改进过滤效果的方式。我曾经认为白名单会让过滤更容易，因为你只需要过滤来自陌生发件人的邮件，而第一次给你发邮件的人在内容上会受到惯例的约束。你认识的人可能会给你发谈论性的邮件，但第一次给你发邮件的人不太可能这样做。问题是，人们可能有多个电子邮件地址，所以一个新的发件人地址并不能保证发送者是第一次给你写信。老朋友（尤其是黑客朋友）突然用新地址给你发邮件并不罕见，所以不能为了严格过滤陌生地址的邮件而冒误判的风险。</p><p>In a sense, though, my filters do themselves embody a kind of whitelist (and blacklist) because they are based on entire messages, including the headers. So to that extent they “know” the email addresses of trusted senders and even the routes by which mail gets from them to me. And they know the same about spam, including the server names, mailer versions, and protocols.</p><p>不过，从某种意义上说，我的过滤器本身就包含了一种白名单（和黑名单），因为它们基于整个邮件，包括标题。因此，它们在一定程度上 “知道” 可信发送者的电子邮件地址，甚至知道邮件从他们那里发送到我这里的路径。它们对垃圾邮件也有同样的了解，包括服务器名称、邮件程序版本和协议。</p><hr><p>If I thought that I could keep up current rates of spam filtering, I would consider this problem solved. But it doesn’t mean much to be able to filter out most present-day spam, because spam evolves. Indeed, most antispam techniques so far have been like pesticides that do nothing more than create a new, resistant strain of bugs.</p><p>如果我认为能保持目前的垃圾邮件过滤效率，我会认为这个问题已经解决了。但能过滤掉大多数当前的垃圾邮件意义不大，因为垃圾邮件在不断演变。事实上，到目前为止，大多数反垃圾邮件技术就像杀虫剂，只是催生了新的、有抗药性的 “虫子”。</p><p>I’m more hopeful about Bayesian filters, because they evolve with the spam. So as spammers start using “c0ck” instead of “cock” to evade simple-minded spam filters based on individual words, Bayesian filters automatically notice. Indeed, “c0ck” is far more damning evidence than “cock”, and Bayesian filters know precisely how much more.</p><p>我对贝叶斯过滤器更有信心，因为它们能随垃圾邮件一起演变。所以当垃圾邮件发送者开始用 “c0ck” 代替 “cock” 来规避基于单个单词的简单垃圾邮件过滤器时，贝叶斯过滤器会自动注意到。事实上，“c0ck” 比 “cock” 更能证明是垃圾邮件，而贝叶斯过滤器能精确地知道其程度。</p><p>Still, anyone who proposes a plan for spam filtering has to be able to answer the question: if the spammers knew exactly what you were doing, how well could they get past you? For example, I think that if checksum-based spam filtering becomes a serious obstacle, the spammers will just switch to mad-lib techniques for generating message bodies.</p><p>不过，任何提出垃圾邮件过滤方案的人都必须能够回答这个问题：如果垃圾邮件发送者确切知道你在做什么，他们能有多容易绕过你？例如，我认为如果基于校验和的垃圾邮件过滤成为一个严重障碍，垃圾邮件发送者就会转向用 “疯狂填词” 技术生成邮件正文。</p><p>To beat Bayesian filters, it would not be enough for spammers to make their emails unique or to stop using individual naughty words. They’d have to make their mails indistinguishable from your ordinary mail. And this I think would severely constrain them. Spam is mostly sales pitches, so unless your regular mail is all sales pitches, spams will inevitably have a different character. And the spammers would also, of course, have to change (and keep changing) their whole infrastructure, because otherwise the headers would look as bad to the Bayesian filters as ever, no matter what they did to the message body. I don’t know enough about the infrastructure that spammers use to know how hard it would be to make the headers look innocent, but my guess is that it would be even harder than making the message look innocent.</p><p>要击败贝叶斯过滤器，垃圾邮件发送者仅仅让他们的邮件独一无二或停止使用个别不雅词汇是不够的。他们必须让自己的邮件与你的普通邮件无法区分。而我认为这会严重限制他们。垃圾邮件大多是推销信息，所以除非你的常规邮件全是推销信息，否则垃圾邮件必然会有不同的特征。当然，垃圾邮件发送者还必须改变（并不断改变）他们的整个基础设施，否则无论他们对邮件正文做什么，标题在贝叶斯过滤器看来仍会和以前一样可疑。我对垃圾邮件发送者使用的基础设施了解不够，不知道要让标题看起来无害有多难，但我猜这比让邮件正文看起来无害更难。</p><p>Assuming they could solve the problem of the headers, the spam of the future will probably look something like this:</p><p>Hey there. Thought you should check out the following:<br><a href="http://www.27meg.com/foo">http://www.27meg.com/foo</a><br>because that is about as much sales pitch as content-based filtering will leave the spammer room to make. (Indeed, it will be hard even to get this past filters, because if everything else in the email is neutral, the spam probability will hinge on the url, and it will take some effort to make that look neutral.)</p><p>假设他们能解决标题的问题，未来的垃圾邮件可能会是这样的：</p><p>嘿，觉得你应该看看这个：<br><a href="http://www.27meg.com/foo">http://www.27meg.com/foo</a></p><p>因为这差不多是基于内容的过滤留给垃圾邮件发送者的推销空间了。（实际上，甚至这样的邮件也很难通过过滤器，因为如果邮件中其他内容都是中性的，垃圾邮件概率就取决于网址，而要让网址看起来中性需要下一番功夫。）</p><p>Spammers range from businesses running so-called opt-in lists who don’t even try to conceal their identities, to guys who hijack mail servers to send out spams promoting porn sites. If we use filtering to whittle their options down to mails like the one above, that should pretty much put the spammers on the “legitimate” end of the spectrum out of business; they feel obliged by various state laws to include boilerplate about why their spam is not spam, and how to cancel your “subscription,” and that kind of text is easy to recognize.</p><p>垃圾邮件发送者形形色色，既有运营所谓 “选择加入” 列表、甚至不试图隐瞒身份的企业，也有劫持邮件服务器发送推广色情网站垃圾邮件的人。如果我们通过过滤将他们的选择范围缩小到上面这样的邮件，应该能让那些处于 “合法” 端的垃圾邮件发送者倒闭；他们迫于各州法律的规定，会在邮件中加入一些套话，说明他们的垃圾邮件不是垃圾邮件、如何取消 “订阅” 等，而这类文本很容易识别。</p><p>(I used to think it was naive to believe that stricter laws would decrease spam. Now I think that while stricter laws may not decrease the amount of spam that spammers send, they can certainly help filters to decrease the amount of spam that recipients actually see.)</p><p>（我曾经认为相信更严格的法律会减少垃圾邮件是天真的。现在我认为，虽然更严格的法律可能不会减少垃圾邮件发送者发送的垃圾邮件数量，但它们肯定能帮助过滤器减少收件人实际看到的垃圾邮件数量。）</p><p>All along the spectrum, if you restrict the sales pitches spammers can make, you will inevitably tend to put them out of business. That word business is an important one to remember. The spammers are businessmen. They send spam because it works. It works because although the response rate is abominably low (at best 15 per million, vs 3000 per million for a catalog mailing), the cost, to them, is practically nothing. The cost is enormous for the recipients, about 5 man-weeks for each million recipients who spend a second to delete the spam, but the spammer doesn’t have to pay that.</p><p>在整个范围内，如果你限制垃圾邮件发送者能进行的推销，就必然会让他们逐渐倒闭。“商业” 这个词很重要，要记住。垃圾邮件发送者是商人，他们发送垃圾邮件是因为这招管用。之所以管用，是因为虽然回复率极低（最多每百万封有 15 封回复，而目录邮件每百万封有 3000 封回复），但对他们来说，成本几乎为零。而对收件人来说，成本巨大 —— 每百万收件人花一秒钟删除垃圾邮件，就相当于 5 个人周的工作量，但垃圾邮件发送者不必支付这笔费用。</p><p>Sending spam does cost the spammer something, though. [2] So the lower we can get the response rate– whether by filtering, or by using filters to force spammers to dilute their pitches– the fewer businesses will find it worth their while to send spam.</p><p>不过，发送垃圾邮件确实会让发送者付出一些代价 [2]。所以，我们能把回复率压得越低 —— 无论是通过过滤，还是通过过滤器迫使垃圾邮件发送者淡化他们的推销 —— 就会有越少的企业觉得值得发送垃圾邮件。</p><p>The reason the spammers use the kinds of sales pitches that they do is to increase response rates. This is possibly even more disgusting than getting inside the mind of a spammer, but let’s take a quick look inside the mind of someone who responds to a spam. This person is either astonishingly credulous or deeply in denial about their sexual interests. In either case, repulsive or idiotic as the spam seems to us, it is exciting to them. The spammers wouldn’t say these things if they didn’t sound exciting. And “thought you should check out the following” is just not going to have nearly the pull with the spam recipient as the kinds of things that spammers say now. Result: if it can’t contain exciting sales pitches, spam becomes less effective as a marketing vehicle, and fewer businesses want to use it.</p><p>垃圾邮件发送者使用这类推销话术是为了提高回复率。这可能比琢磨垃圾邮件发送者的想法更令人反感，但我们还是快速看看回复垃圾邮件的人的想法吧。这类人要么极其轻信，要么在性趣方面极力否认。不管是哪种情况，尽管垃圾邮件在我们看来令人厌恶或愚蠢，但对他们来说却很有吸引力。如果这些话听起来没有吸引力，垃圾邮件发送者是不会说的。而 “觉得你应该看看下面这个” 对垃圾邮件收件人的吸引力，远不及垃圾邮件发送者现在说的那些话。结果就是：如果垃圾邮件不能包含吸引人的推销话术，作为营销手段，它的效果就会大打折扣，使用它的企业也会更少。</p><p>That is the big win in the end. I started writing spam filtering software because I didn’t want have to look at the stuff anymore. But if we get good enough at filtering out spam, it will stop working, and the spammers will actually stop sending it.</p><p>这才是最终的巨大胜利。我开始编写垃圾邮件过滤软件是因为我不想再看到这些东西了。但如果我们的垃圾邮件过滤足够出色，垃圾邮件就会失去作用，发送者最终会停止发送。</p><hr><p>Of all the approaches to fighting spam, from software to laws, I believe Bayesian filtering will be the single most effective. But I also think that the more different kinds of antispam efforts we undertake, the better, because any measure that constrains spammers will tend to make filtering easier. And even within the world of content-based filtering, I think it will be a good thing if there are many different kinds of software being used simultaneously. The more different filters there are, the harder it will be for spammers to tune spams to get through them.</p><p>在所有打击垃圾邮件的方法中，从软件到法律，我认为贝叶斯过滤将是最有效的。但我也认为，我们采取的反垃圾邮件措施种类越多越好，因为任何限制垃圾邮件发送者的措施都可能让过滤变得更容易。即使在基于内容的过滤领域，我认为同时使用多种不同的软件也是件好事。过滤器种类越多，垃圾邮件发送者就越难调整邮件以通过它们。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计与研究</title>
    <link href="/2025/08/15/design-and-research/"/>
    <url>/2025/08/15/design-and-research/</url>
    
    <content type="html"><![CDATA[<h2 id="Design-and-Research"><a href="#Design-and-Research" class="headerlink" title="Design and Research"></a>Design and Research</h2><p>原文链接: <a href="https://paulgraham.com/desres.html">https://paulgraham.com/desres.html</a></p><p>January 2003</p><p>(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)</p><p>（本文源自 2002 年秋季 NEPLS 会议上的主题演讲。）</p><p>Visitors to this country are often surprised to find that Americans like to begin a conversation by asking “what do you do?” I’ve never liked this question. I’ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say “I’m designing a new dialect of Lisp.” I recommend this answer to anyone who doesn’t like being asked what they do. The conversation will turn immediately to other topics.</p><p>来这个国家的游客常常会惊讶地发现，美国人喜欢以 “你是做什么的？” 开启一段对话。我从来不喜欢这个问题，也很少能给出一个简洁的答案。但我想我终于解决了这个问题。现在，当有人问我是做什么的，我会直视他们的眼睛说：“我正在设计 Lisp 的一种新方言。” 我把这个答案推荐给所有不喜欢被问 “你是做什么的” 的人，这样对话会立刻转向其他话题。</p><p>I don’t consider myself to be doing research on programming languages. I’m just designing one, in the same way that someone might design a building or a chair or a new typeface. I’m not trying to discover anything new. I just want to make a language that will be good to program in. In some ways, this assumption makes life a lot easier.</p><p>我不认为自己在做编程语言研究。我只是在设计一种编程语言，就像有人设计一座建筑、一把椅子或一种新字体那样。我不是要去发现什么新东西，只是想做出一种好用的编程语言。在某些方面，这种定位让事情变得简单多了。</p><p>The difference between design and research seems to be a question of new versus good. Design doesn’t have to be new, but it has to be good. Research doesn’t have to be good, but it has to be new. I think these two paths converge at the top: the best design surpasses its predecessors by using new ideas, and the best research solves problems that are not only new, but actually worth solving. So ultimately we’re aiming for the same destination, just approaching it from different directions.</p><p>设计和研究的区别似乎在于 “新” 与 “好” 的差异。设计不一定需要新颖，但必须出色；研究不一定需要出色，但必须新颖。我认为这两条路径在顶端会交汇：最好的设计通过运用新思想超越前人，最好的研究解决的问题不仅是新的，而且是真正值得解决的。所以最终我们的目标是一致的，只是从不同方向接近而已。</p><p>What I’m going to talk about today is what your target looks like from the back. What do you do differently when you treat programming languages as a design problem instead of a research topic?</p><p>我今天要谈的是，当你从 “后端” 看待目标时会是什么样子。当你把编程语言当作一个设计问题而非研究课题时，做法会有哪些不同？</p><p>The biggest difference is that you focus more on the user. Design begins by asking, who is this for and what do they need from it? A good architect, for example, does not begin by creating a design that he then imposes on the users, but by studying the intended users and figuring out what they need.</p><p>最大的不同是你会更关注用户。设计始于这样的问题：这是为谁设计的？他们需要从中得到什么？例如，一位优秀的建筑师不会先设计出方案再强加给用户，而是先研究目标用户，弄清楚他们的需求。</p><p>Notice I said “what they need,” not “what they want.” I don’t mean to give the impression that working as a designer means working as a sort of short-order cook, making whatever the client tells you to. This varies from field to field in the arts, but I don’t think there is any field in which the best work is done by the people who just make exactly what the customers tell them to.</p><p>注意我说的是 “他们需要的”，而不是 “他们想要的”。我不是说设计师的工作就像快餐厨师，客户说要什么就做什么。艺术领域的情况各不相同，但我认为没有哪个领域里，最好的作品是由那些完全按客户要求制作的人完成的。</p><p>The customer is always right in the sense that the measure of good design is how well it works for the user. If you make a novel that bores everyone, or a chair that’s horribly uncomfortable to sit in, then you’ve done a bad job, period. It’s no defense to say that the novel or the chair is designed according to the most advanced theoretical principles.</p><p>从 “好设计的衡量标准是它对用户的适用性” 这个角度来说，客户总是对的。如果你写了一本让所有人都觉得无聊的小说，或者做了一把坐起来极其不舒服的椅子，那你就是做得不好，没什么可说的。说这本小说或这把椅子是按照最先进的理论原则设计的，这可不是什么辩解。</p><p>And yet, making what works for the user doesn’t mean simply making what the user tells you to. Users don’t know what all the choices are, and are often mistaken about what they really want.</p><p>然而，做出对用户有用的东西，并不意味着简单地按照用户说的去做。用户不知道所有的选择，而且常常对自己真正想要的东西存在误解。</p><p>The answer to the paradox, I think, is that you have to design for the user, but you have to design what the user needs, not simply what he says he wants. It’s much like being a doctor. You can’t just treat a patient’s symptoms. When a patient tells you his symptoms, you have to figure out what’s actually wrong with him, and treat that.</p><p>我认为，这个矛盾的答案是：你必须为用户设计，但你要设计的是用户需要的东西，而不仅仅是他们说自己想要的。这很像医生的工作，你不能只治疗病人的症状。当病人告诉你他的症状时，你必须弄清楚他实际的问题是什么，然后对症治疗。</p><p>This focus on the user is a kind of axiom from which most of the practice of good design can be derived, and around which most design issues center.</p><p>这种对用户的关注是一种公理，优秀设计的大部分实践都源于此，而且大多数设计问题也围绕此展开。</p><p>If good design must do what the user needs, who is the user? When I say that design must be for users, I don’t mean to imply that good design aims at some kind of lowest common denominator. You can pick any group of users you want. If you’re designing a tool, for example, you can design it for anyone from beginners to experts, and what’s good design for one group might be bad for another. The point is, you have to pick some group of users. I don’t think you can even talk about good or bad design except with reference to some intended user.</p><p>如果好的设计必须满足用户的需求，那用户是谁呢？当我说设计必须为用户服务时，我并不是说优秀的设计要以某种 “最低共同标准” 为目标。你可以选择任何用户群体。例如，如果你在设计一个工具，你可以为从初学者到专家的任何人群设计，对一个群体来说是好的设计，对另一个群体可能就是糟糕的。关键是，你必须选定某个用户群体。我认为，脱离特定的目标用户，根本无法谈论设计的好坏。</p><p>You’re most likely to get good design if the intended users include the designer himself. When you design something for a group that doesn’t include you, it tends to be for people you consider to be less sophisticated than you, not more sophisticated.</p><p>如果目标用户包括设计者自己，那么你最有可能做出好的设计。当你为一个不包括自己的群体设计东西时，这个群体往往会被你认为是比自己更不成熟的人，而不是更成熟的人。</p><p>That’s a problem, because looking down on the user, however benevolently, seems inevitably to corrupt the designer. I suspect that very few housing projects in the US were designed by architects who expected to live in them. You can see the same thing in programming languages. C, Lisp, and Smalltalk were created for their own designers to use. Cobol, Ada, and Java, were created for other people to use.</p><p>这是个问题，因为轻视用户 —— 无论多么善意 —— 似乎不可避免地会毁掉设计师。我怀疑美国很少有住宅项目是由那些打算住进去的建筑师设计的。在编程语言中也能看到同样的情况：C、Lisp 和 Smalltalk 是为设计者自己使用而创建的；Cobol、Ada 和 Java 则是为其他人使用而创建的。</p><p>If you think you’re designing something for idiots, the odds are that you’re not designing something good, even for idiots.</p><p>如果你认为自己在为 “傻瓜” 设计东西，那么很可能你设计的东西即使对 “傻瓜” 来说也不是好东西。</p><p>Even if you’re designing something for the most sophisticated users, though, you’re still designing for humans. It’s different in research. In math you don’t choose abstractions because they’re easy for humans to understand; you choose whichever make the proof shorter. I think this is true for the sciences generally. Scientific ideas are not meant to be ergonomic.</p><p>然而，即使你在为最成熟的用户设计东西，你仍然是在为人类设计。研究则不同。在数学中，你选择抽象概念不是因为它们容易被人类理解，而是因为它们能让证明更简洁。我认为这一点在整个科学界都成立：科学思想并不旨在符合人体工学。</p><p>Over in the arts, things are very different. Design is all about people. The human body is a strange thing, but when you’re designing a chair, that’s what you’re designing for, and there’s no way around it. All the arts have to pander to the interests and limitations of humans. In painting, for example, all other things being equal a painting with people in it will be more interesting than one without. It is not merely an accident of history that the great paintings of the Renaissance are all full of people. If they hadn’t been, painting as a medium wouldn’t have the prestige that it does.</p><p>在艺术领域，情况则大不相同。设计完全是关于人的。人体是一种奇特的存在，但当你设计一把椅子时，你就是在为人体设计，这是无法回避的。所有艺术都必须迎合人类的兴趣和局限。例如，在绘画中，在其他条件相同的情况下，有人物的画会比没有人物的画更有趣。文艺复兴时期的伟大画作都充满了人物，这不仅仅是历史的偶然。如果不是这样，绘画作为一种媒介就不会有现在的声望。</p><p>Like it or not, programming languages are also for people, and I suspect the human brain is just as lumpy and idiosyncratic as the human body. Some ideas are easy for people to grasp and some aren’t. For example, we seem to have a very limited capacity for dealing with detail. It’s this fact that makes programing languages a good idea in the first place; if we could handle the detail, we could just program in machine language.</p><p>不管你喜不喜欢，编程语言也是为人服务的，而且我怀疑人类的大脑和人体一样，都是不规整且独特的。有些概念人们很容易理解，有些则不然。例如，我们处理细节的能力似乎非常有限。正是这个事实使得编程语言首先成为一个好主意 —— 如果我们能处理这些细节，我们直接用机器语言编程就可以了。</p><p>Remember, too, that languages are not primarily a form for finished programs, but something that programs have to be developed in. Anyone in the arts could tell you that you might want different mediums for the two situations. Marble, for example, is a nice, durable medium for finished ideas, but a hopelessly inflexible one for developing new ideas.</p><p>还要记住，语言主要不是成品程序的形式，而是开发程序的工具。艺术领域的任何人都会告诉你，这两种情况可能需要不同的媒介。例如，大理石是呈现成品想法的好材料，耐用且精美，但用它来开发新想法则死板得无可救药。</p><p>A program, like a proof, is a pruned version of a tree that in the past has had false starts branching off all over it. So the test of a language is not simply how clean the finished program looks in it, but how clean the path to the finished program was. A design choice that gives you elegant finished programs may not give you an elegant design process. For example, I’ve written a few macro-defining macros full of nested backquotes that look now like little gems, but writing them took hours of the ugliest trial and error, and frankly, I’m still not entirely sure they’re correct.</p><p>一个程序，就像一个证明，是一棵树经过修剪后的版本，这棵树在过去曾有过无数错误的分支。所以，衡量一种语言的标准不仅仅是成品程序在其中看起来有多简洁，还要看通向成品程序的过程有多顺畅。能产生优雅成品程序的设计选择，未必能带来优雅的设计过程。例如，我写过一些宏定义宏，里面满是嵌套的反引号，现在看起来像小宝石一样精致，但写它们时却花了好几个小时进行极其丑陋的试错，而且坦白说，我至今仍不能完全确定它们是正确的。</p><p>We often act as if the test of a language were how good finished programs look in it. It seems so convincing when you see the same program written in two languages, and one version is much shorter. When you approach the problem from the direction of the arts, you’re less likely to depend on this sort of test. You don’t want to end up with a programming language like marble.</p><p>我们常常把 “成品程序在语言中呈现的效果” 当作衡量语言的标准。当你看到同一个程序用两种语言编写，其中一种版本短得多时，这种标准似乎很有说服力。但当你从艺术的角度来看待这个问题时，就不太可能依赖这种测试了。你不会想最终得到一种像大理石一样的编程语言。</p><p>For example, it is a huge win in developing software to have an interactive toplevel, what in Lisp is called a read-eval-print loop. And when you have one this has real effects on the design of the language. It would not work well for a language where you have to declare variables before using them, for example. When you’re just typing expressions into the toplevel, you want to be able to set x to some value and then start doing things to x. You don’t want to have to declare the type of x first. You may dispute either of the premises, but if a language has to have a toplevel to be convenient, and mandatory type declarations are incompatible with a toplevel, then no language that makes type declarations mandatory could be convenient to program in.</p><p>例如，在软件开发中，拥有一个交互式顶层环境（在 Lisp 中称为读取 - 求值 - 打印循环）是一个巨大的优势。而一旦有了这样的环境，就会对语言的设计产生实际影响。例如，对于那种必须先声明变量才能使用的语言来说，这种环境就不太适用。当你只是在顶层输入表达式时，你希望能把 x 设为某个值，然后直接对 x 进行操作，而不是先声明 x 的类型。你可能会对这两个前提中的任何一个提出异议，但如果一种语言必须有顶层环境才能方便使用，而强制类型声明与顶层环境不兼容，那么任何强制要求类型声明的语言都不可能便于编程。</p><p>In practice, to get good design you have to get close, and stay close, to your users. You have to calibrate your ideas on actual users constantly, especially in the beginning. One of the reasons Jane Austen’s novels are so good is that she read them out loud to her family. That’s why she never sinks into self-indulgently arty descriptions of landscapes, or pretentious philosophizing. (The philosophy’s there, but it’s woven into the story instead of being pasted onto it like a label.) If you open an average “literary” novel and imagine reading it out loud to your friends as something you’d written, you’ll feel all too keenly what an imposition that kind of thing is upon the reader.</p><p>在实践中，要做出好的设计，你必须贴近用户，并一直保持贴近。你必须不断根据实际用户来校准你的想法，尤其是在初期。简・奥斯汀的小说之所以如此出色，原因之一就是她会把小说大声读给家人听。这就是为什么她从不会沉溺于自我放纵的艺术性风景描写，也不会进行自命不凡的哲学议论（哲学思想是存在的，但它被融入故事中，而不是像标签一样贴在上面）。如果你翻开一本普通的 “文学” 小说，想象着把它作为自己写的东西大声读给朋友听，你会强烈地感受到这种内容对读者来说是一种负担。</p><p>In the software world, this idea is known as Worse is Better. Actually, there are several ideas mixed together in the concept of Worse is Better, which is why people are still arguing about whether worse is actually better or not. But one of the main ideas in that mix is that if you’re building something new, you should get a prototype in front of users as soon as possible.</p><p>在软件界，这种理念被称为 “差即是好”。实际上，“差即是好” 的概念中混合了几个观点，这也是人们仍在争论 “差是否真的好” 的原因。但其中一个主要观点是：如果你在构建新东西，应该尽快让原型呈现在用户面前。</p><p>The alternative approach might be called the Hail Mary strategy. Instead of getting a prototype out quickly and gradually refining it, you try to create the complete, finished, product in one long touchdown pass. As far as I know, this is a recipe for disaster. Countless startups destroyed themselves this way during the Internet bubble. I’ve never heard of a case where it worked.</p><p>另一种方法可以称为 “孤注一掷策略”。它不是快速推出原型并逐步改进，而是试图通过一次 “长传达阵” 就创造出完整的成品。据我所知，这是导致灾难的做法。在互联网泡沫时期，无数初创公司因此自我毁灭，我从未听说过这种方法成功的案例。</p><p>What people outside the software world may not realize is that Worse is Better is found throughout the arts. In drawing, for example, the idea was discovered during the Renaissance. Now almost every drawing teacher will tell you that the right way to get an accurate drawing is not to work your way slowly around the contour of an object, because errors will accumulate and you’ll find at the end that the lines don’t meet. Instead you should draw a few quick lines in roughly the right place, and then gradually refine this initial sketch.</p><p>软件界之外的人可能没有意识到，“差即是好” 的理念在整个艺术领域都存在。例如，在绘画中，这个理念在文艺复兴时期就被发现了。现在几乎每个绘画老师都会告诉你，画出精准画作的正确方法不是沿着物体的轮廓慢慢勾勒，因为错误会累积，最后你会发现线条无法闭合。相反，你应该在大致正确的位置快速画几条线，然后逐步完善这个初始草图。</p><p>In most fields, prototypes have traditionally been made out of different materials. Typefaces to be cut in metal were initially designed with a brush on paper. Statues to be cast in bronze were modelled in wax. Patterns to be embroidered on tapestries were drawn on paper with ink wash. Buildings to be constructed from stone were tested on a smaller scale in wood.</p><p>在大多数领域，传统上原型是用不同材料制作的。要在金属上雕刻的字体最初是用刷子在纸上设计的；要铸成青铜的雕像先用蜡塑造模型；要绣在挂毯上的图案先用墨水洗刷在纸上绘制；要用石头建造的建筑先以较小的比例用木头做测试。</p><p>What made oil paint so exciting, when it first became popular in the fifteenth century, was that you could actually make the finished work from the prototype. You could make a preliminary drawing if you wanted to, but you weren’t held to it; you could work out all the details, and even make major changes, as you finished the painting.</p><p>15 世纪油画首次流行时，让人兴奋的是你实际上可以从原型直接创作成品。你可以画一个初步的草图（如果你想的话），但不必受其束缚；在完成画作的过程中，你可以完善所有细节，甚至做出重大修改。</p><p>You can do this in software too. A prototype doesn’t have to be just a model; you can refine it into the finished product. I think you should always do this when you can. It lets you take advantage of new insights you have along the way. But perhaps even more important, it’s good for morale.</p><p>在软件中你也可以这样做。原型不一定只是一个模型，你可以把它完善成成品。我认为只要有可能，就应该这样做。这能让你利用过程中产生的新见解，而或许更重要的是，这对士气有好处。</p><p>Morale is key in design. I’m surprised people don’t talk more about it. One of my first drawing teachers told me: if you’re bored when you’re drawing something, the drawing will look boring. For example, suppose you have to draw a building, and you decide to draw each brick individually. You can do this if you want, but if you get bored halfway through and start making the bricks mechanically instead of observing each one, the drawing will look worse than if you had merely suggested the bricks.</p><p>士气在设计中是关键。我很惊讶人们不常谈论这一点。我的第一位绘画老师告诉我：如果你画画时感到无聊，画出来的东西也会显得无聊。例如，假设你要画一座建筑，你决定把每一块砖都单独画出来。如果你愿意，你可以这样做，但如果你中途感到无聊，开始机械地画砖而不是观察每一块砖，那么画出来的效果会比你只是大致勾勒出砖的样子更差。</p><p>Building something by gradually refining a prototype is good for morale because it keeps you engaged. In software, my rule is: always have working code. If you’re writing something that you’ll be able to test in an hour, then you have the prospect of an immediate reward to motivate you. The same is true in the arts, and particularly in oil painting. Most painters start with a blurry sketch and gradually refine it. If you work this way, then in principle you never have to end the day with something that actually looks unfinished. Indeed, there is even a saying among painters: “A painting is never finished, you just stop working on it.” This idea will be familiar to anyone who has worked on software.</p><p>通过逐步完善原型来构建东西对士气有好处，因为它能让你保持投入。在软件领域，我的原则是：始终要有可运行的代码。如果你正在写的东西一小时后就能测试，那么你就有了即时回报的预期，这会激励你。艺术领域也是如此，尤其是油画。大多数画家从模糊的草图开始，然后逐步完善。如果你用这种方式工作，原则上你永远不必在一天结束时留下一个看起来确实未完成的作品。事实上，画家中间甚至有这样一种说法：“一幅画永远不会完成，你只是停止对它的创作。” 任何做过软件的人都会对这个想法感到熟悉。</p><p>Morale is another reason that it’s hard to design something for an unsophisticated user. It’s hard to stay interested in something you don’t like yourself. To make something good, you have to be thinking, “wow, this is really great,” not “what a piece of shit; those fools will love it.”</p><p>士气是难以给不成熟的用户设计东西的另一个原因。要对自己不喜欢的东西保持兴趣是很难的。要做出好东西，你必须想 “哇，这真的很棒”，而不是 “什么破烂玩意儿，那些傻瓜会喜欢的”。</p><p>Design means making things for humans. But it’s not just the user who’s human. The designer is human too.</p><p>设计意味着为人类制作东西。但不只是用户是人，设计师也是人。</p><p>Notice all this time I’ve been talking about “the designer.” Design usually has to be under the control of a single person to be any good. And yet it seems to be possible for several people to collaborate on a research project. This seems to me one of the most interesting differences between research and design.</p><p>注意到一直以来我都在说 “设计师”（单数）。设计通常必须由一个人掌控才能出色，而研究项目则可以由多个人合作完成。在我看来，这是研究和设计之间最有趣的区别之一。</p><p>There have been famous instances of collaboration in the arts, but most of them seem to have been cases of molecular bonding rather than nuclear fusion. In an opera it’s common for one person to write the libretto and another to write the music. And during the Renaissance, journeymen from northern Europe were often employed to do the landscapes in the backgrounds of Italian paintings. But these aren’t true collaborations. They’re more like examples of Robert Frost’s “good fences make good neighbors.” You can stick instances of good design together, but within each individual project, one person has to be in control.</p><p>艺术领域有一些著名的合作案例，但大多数似乎是 “分子键合” 而非 “核聚变”。在歌剧中，一个人写歌词、另一个人谱曲是很常见的；文艺复兴时期，北欧的工匠常被雇来绘制意大利画作的背景风景。但这些都不是真正的合作，更像是罗伯特・弗罗斯特所说的 “好篱笆促成好邻居”。你可以把优秀设计的各个部分拼接起来，但在每个独立的项目中，必须有一个人掌控全局。</p><p>I’m not saying that good design requires that one person think of everything. There’s nothing more valuable than the advice of someone whose judgement you trust. But after the talking is done, the decision about what to do has to rest with one person.</p><p>我不是说优秀的设计需要一个人想出所有东西。没有什么比你信任的人的判断更有价值的了。但讨论结束后，该做什么的决定必须由一个人来做。</p><p>Why is it that research can be done by collaborators and design can’t? This is an interesting question. I don’t know the answer. Perhaps, if design and research converge, the best research is also good design, and in fact can’t be done by collaborators. A lot of the most famous scientists seem to have worked alone. But I don’t know enough to say whether there is a pattern here. It could be simply that many famous scientists worked when collaboration was less common.</p><p>为什么研究可以由合作者完成而设计不能？这是一个有趣的问题，我没有答案。或许，如果设计和研究在顶端交汇，那么最好的研究也是优秀的设计，事实上也不能由合作者完成。很多最著名的科学家似乎都是独自工作的，但我了解得不够多，无法确定这是否是一种模式。这可能只是因为许多著名科学家工作的时代，合作并不普遍。</p><p>Whatever the story is in the sciences, true collaboration seems to be vanishingly rare in the arts. Design by committee is a synonym for bad design. Why is that so? Is there some way to beat this limitation?</p><p>无论科学界的情况如何，艺术领域的真正合作似乎极其罕见。“委员会设计” 是糟糕设计的同义词。为什么会这样？有没有办法克服这个局限？</p><p>I’m inclined to think there isn’t– that good design requires a dictator. One reason is that good design has to be all of a piece. Design is not just for humans, but for individual humans. If a design represents an idea that fits in one person’s head, then the idea will fit in the user’s head too.</p><p>我倾向于认为没有 —— 优秀的设计需要一个 “独裁者”。一个原因是，优秀的设计必须是浑然一体的。设计不仅是为人类，更是为个体的人。如果一个设计所代表的想法能装进一个人的头脑，那么这个想法也能装进用户的头脑。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书呆子的复仇</title>
    <link href="/2025/08/14/revenge-of-the-nerds/"/>
    <url>/2025/08/14/revenge-of-the-nerds/</url>
    
    <content type="html"><![CDATA[<h2 id="Revenge-of-the-Nerds"><a href="#Revenge-of-the-Nerds" class="headerlink" title="Revenge of the Nerds"></a>Revenge of the Nerds</h2><p>原文链接: <a href="https://paulgraham.com/icad.html">https://paulgraham.com/icad.html</a></p><p>May 2002</p><p>“We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.”<br>“我们盯上了 C++ 程序员。我们成功把他们中的很多人拉到了接近 Lisp 的水平。”</p><ul><li>Guy Steele, co-author of the Java spec<br>—— 盖伊・斯蒂尔，Java 规范的合著者</li></ul><p>In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.<br>在软件行业，一直存在着一场斗争：一方是脑袋尖尖的学者，另一方是同样难对付的势力 ——“尖头老板”。每个人都知道尖头老板是谁，对吧？我觉得科技圈的大多数人不仅认得这个卡通形象，还能在自己公司里找到他的现实原型。</p><p>The pointy-haired boss miraculously combines two qualities that are common by themselves, but rarely seen together: (a) he knows nothing whatsoever about technology, and (b) he has very strong opinions about it.<br>尖头老板神奇地兼具两种特质 —— 这两种特质单独看很常见，但同时出现却很少见：（a）他对技术一窍不通；（b）他对技术却有着强烈的主见。</p><p>Suppose, for example, you need to write a piece of software. The pointy-haired boss has no idea how this software has to work, and can’t tell one programming language from another, and yet he knows what language you should write it in. Exactly. He thinks you should write it in Java.<br>举个例子，假设你需要写一个软件。尖头老板完全不知道这个软件该怎么运行，也分不清各种编程语言的区别，但他却 “知道” 你应该用什么语言来写。没错，他觉得你应该用 Java。</p><p>Why does he think this? Let’s take a look inside the brain of the pointy-haired boss. What he’s thinking is something like this. Java is a standard. I know it must be, because I read about it in the press all the time. Since it is a standard, I won’t get in trouble for using it. And that also means there will always be lots of Java programmers, so if the programmers working for me now quit, as programmers working for me mysteriously always do, I can easily replace them.<br>他为什么会这么想？我们来窥探一下尖头老板的大脑。他大概在想：Java 是个标准。我肯定这一点，因为我总在媒体上看到它。既然是标准，用它就不会惹麻烦。而且这意味着总会有很多 Java 程序员，所以如果现在的程序员辞职了（他们总会莫名其妙地辞职），我能轻松找到替代者。</p><p>Well, this doesn’t sound that unreasonable. But it’s all based on one unspoken assumption, and that assumption turns out to be false. The pointy-haired boss believes that all programming languages are pretty much equivalent. If that were true, he would be right on target. If languages are all equivalent, sure, use whatever language everyone else is using.<br>嗯，这听起来似乎不算太离谱。但这一切都基于一个未说出口的假设，而这个假设其实是错误的。尖头老板认为所有编程语言几乎都是等价的。如果真是这样，他的想法就没错。要是语言都一样，那当然可以用大家都在用的那种。</p><p>But all languages are not equivalent, and I think I can prove this to you without even getting into the differences between them. If you asked the pointy-haired boss in 1992 what language software should be written in, he would have answered with as little hesitation as he does today. Software should be written in C++. But if languages are all equivalent, why should the pointy-haired boss’s opinion ever change? In fact, why should the developers of Java have even bothered to create a new language?<br>但并非所有语言都等价，而且我不用深入讨论它们的区别就能证明这一点。如果在 1992 年问尖头老板应该用什么语言写软件，他会像现在一样毫不犹豫地回答：应该用 C++。可如果语言都等价，他的观点为什么会变？事实上，Java 的开发者又何必费心创造一种新语言呢？</p><p>Presumably, if you create a new language, it’s because you think it’s better in some way than what people already had. And in fact, Gosling makes it clear in the first Java white paper that Java was designed to fix some problems with C++. So there you have it: languages are not all equivalent. If you follow the trail through the pointy-haired boss’s brain to Java and then back through Java’s history to its origins, you end up holding an idea that contradicts the assumption you started with.<br>想必，创造新语言是因为觉得它在某些方面比已有的更好。事实上，高斯林在第一份 Java 白皮书中明确表示，Java 的设计就是为了修复 C++ 的一些问题。所以结论很明显：语言并非都等价。顺着尖头老板对 Java 的执念，追溯到 Java 的起源，你最终会得到一个与最初假设矛盾的结论。</p><p>So, who’s right? James Gosling, or the pointy-haired boss? Not surprisingly, Gosling is right. Some languages are better, for certain problems, than others. And you know, that raises some interesting questions. Java was designed to be better, for certain problems, than C++. What problems? When is Java better and when is C++? Are there situations where other languages are better than either of them?<br>那么，谁是对的？詹姆斯・高斯林，还是尖头老板？毫不意外，高斯林是对的。对于特定问题，有些语言就是比其他的更好。这就引出了一些有趣的问题：Java 被设计成在某些问题上比 C++ 更好，是哪些问题？什么时候 Java 更好，什么时候 C++ 更好？有没有其他语言比这两种都更适合的情况？</p><p>Once you start considering this question, you have opened a real can of worms. If the pointy-haired boss had to think about the problem in its full complexity, it would make his brain explode. As long as he considers all languages equivalent, all he has to do is choose the one that seems to have the most momentum, and since that is more a question of fashion than technology, even he can probably get the right answer. But if languages vary, he suddenly has to solve two simultaneous equations, trying to find an optimal balance between two things he knows nothing about: the relative suitability of the twenty or so leading languages for the problem he needs to solve, and the odds of finding programmers, libraries, etc. for each. If that’s what’s on the other side of the door, it is no surprise that the pointy-haired boss doesn’t want to open it.<br>一旦开始思考这个问题，你就等于打开了潘多拉魔盒。如果尖头老板必须面对这个问题的全部复杂性，他的大脑可能会爆炸。只要他认为所有语言都等价，他只需要选一个看起来最流行的就行 —— 而流行更多是时尚问题而非技术问题，就算是他也可能选对。但如果语言有差异，他突然就要解两个联立方程：在二十多种主流语言中，找到既适合当前问题、又容易找到程序员和库的最优平衡 —— 而这两样他都一窍不通。如果门后是这些，尖头老板不想开门也就不奇怪了。</p><p>The disadvantage of believing that all programming languages are equivalent is that it’s not true. But the advantage is that it makes your life a lot simpler. And I think that’s the main reason the idea is so widespread. It is a comfortable idea.<br>认为所有编程语言都等价的坏处是 —— 这不是事实。但好处是，这能让生活简单得多。我觉得这就是这个想法广为流传的主要原因：它让人安心。</p><p>We know that Java must be pretty good, because it is the cool, new programming language. Or is it? If you look at the world of programming languages from a distance, it looks like Java is the latest thing. (From far enough away, all you can see is the large, flashing billboard paid for by Sun.) But if you look at this world up close, you find that there are degrees of coolness. Within the hacker subculture, there is another language called Perl that is considered a lot cooler than Java. Slashdot, for example, is generated by Perl. I don’t think you would find those guys using Java Server Pages. But there is another, newer language, called Python, whose users tend to look down on Perl, and more waiting in the wings.<br>我们觉得 Java 肯定很棒，因为它是酷炫的新编程语言。真的是这样吗？从远处看编程语言的世界，Java 似乎是最新潮的（离得足够远，你只能看到 Sun 公司花钱做的巨大闪光广告牌）。但近距离观察会发现，“酷炫” 是分等级的。在黑客圈子里，Perl 被认为比 Java 酷得多。比如，Slashdot 就是用 Perl 开发的。我觉得那些人绝不会用 Java Server Pages。但还有一种更新的语言叫 Python，它的用户往往瞧不上 Perl，而且还有更多语言在排队等着上位。</p><p>If you look at these languages in order, Java, Perl, Python, you notice an interesting pattern. At least, you notice this pattern if you are a Lisp hacker. Each one is progressively more like Lisp. Python copies even features that many Lisp hackers consider to be mistakes. You could translate simple Lisp programs into Python line for line. It’s 2002, and programming languages have almost caught up with 1958.<br>如果按 Java、Perl、Python 的顺序看，你会发现一个有趣的模式 —— 至少，如果你是 Lisp 黑客的话会发现。它们一个比一个像 Lisp。Python 甚至借鉴了很多 Lisp 黑客认为是 “错误” 的特性。简单的 Lisp 程序几乎能逐行翻译成 Python。现在是 2002 年，编程语言总算快追上 1958 年了。</p><h3 id="Catching-Up-with-Math"><a href="#Catching-Up-with-Math" class="headerlink" title="Catching Up with Math"></a><strong>Catching Up with Math</strong></h3><p><strong>靠数学追赶</strong></p><p>What I mean is that Lisp was first discovered by John McCarthy in 1958, and popular programming languages are only now catching up with the ideas he developed then.<br>我的意思是，Lisp 是约翰・麦卡锡在 1958 年提出的，而现在流行的编程语言才刚刚开始追上他当时提出的理念。</p><p>Now, how could that be true? Isn’t computer technology something that changes very rapidly? I mean, in 1958, computers were refrigerator-sized behemoths with the processing power of a wristwatch. How could any technology that old even be relevant, let alone superior to the latest developments?<br>这怎么可能呢？计算机技术不是变化很快吗？要知道，1958 年的计算机还是冰箱大小的庞然大物，处理能力只相当于一块手表。一个这么古老的技术怎么可能还有用，更别说比最新的发展还强了？</p><p>I’ll tell you how. It’s because Lisp was not really designed to be a programming language, at least not in the sense we mean today. What we mean by a programming language is something we use to tell a computer what to do. McCarthy did eventually intend to develop a programming language in this sense, but the Lisp that we actually ended up with was based on something separate that he did as a theoretical exercise– an effort to define a more convenient alternative to the Turing Machine. As McCarthy said later,<br>我来告诉你原因。因为 Lisp 其实不是被设计成编程语言的，至少不是我们现在所说的 “编程语言”。我们所说的编程语言是用来告诉计算机该做什么的工具。麦卡锡最终确实想开发这样一种语言，但我们现在使用的 Lisp，其实源于他另一项理论研究 —— 他试图定义一种比图灵机更方便的替代方案。正如麦卡锡后来所说：</p><p>Another way to show that Lisp was neater than Turing machines was to write a universal Lisp function and show that it is briefer and more comprehensible than the description of a universal Turing machine. This was the Lisp function eval…, which computes the value of a Lisp expression…. Writing eval required inventing a notation representing Lisp functions as Lisp data, and such a notation was devised for the purposes of the paper with no thought that it would be used to express Lisp programs in practice.<br>要证明 Lisp 比图灵机更简洁，另一种方法是编写一个通用 Lisp 函数，并证明它比通用图灵机的描述更简短、更易懂。这就是 Lisp 的 eval 函数…… 它能计算 Lisp 表达式的值…… 编写 eval 需要发明一种符号，把 Lisp 函数表示为 Lisp 数据。这种符号是为了论文而设计的，当时根本没想过会在实际中用来表达 Lisp 程序。</p><p>What happened next was that, some time in late 1958, Steve Russell, one of McCarthy’s grad students, looked at this definition of eval and realized that if he translated it into machine language, the result would be a Lisp interpreter.<br>接下来发生的事是，1958 年底的某个时候，麦卡锡的研究生史蒂夫・拉塞尔看到了 eval 的定义，意识到如果把它翻译成机器语言，结果会是一个 Lisp 解释器。</p><p>This was a big surprise at the time. Here is what McCarthy said about it later in an interview:<br>这在当时是个大惊喜。麦卡锡后来在采访中说：</p><p>Steve Russell said, look, why don’t I program this eval…, and I said to him, ho, ho, you’re confusing theory with practice, this eval is intended for reading, not for computing. But he went ahead and did it. That is, he compiled the eval in my paper into [IBM] 704 machine code, fixing bugs, and then advertised this as a Lisp interpreter, which it certainly was. So at that point Lisp had essentially the form that it has today….<br>史蒂夫・拉塞尔说：“你看，我来把这个 eval 编成程序怎么样？” 我对他说：“呵，呵，你把理论和实践搞混了，这个 eval 是用来读的，不是用来计算的。” 但他还是做了。他把我论文里的 eval 编译成了（IBM）704 的机器码，修复了 bug，然后宣称这是一个 Lisp 解释器 —— 它确实是。从那时起，Lisp 就基本有了现在的样子……</p><p>Suddenly, in a matter of weeks I think, McCarthy found his theoretical exercise transformed into an actual programming language– and a more powerful one than he had intended.<br>我觉得，短短几周内，麦卡锡突然发现他的理论研究变成了一种实际的编程语言 —— 而且比他预想的更强大。</p><p>So the short explanation of why this 1950s language is not obsolete is that it was not technology but math, and math doesn’t get stale. The right thing to compare Lisp to is not 1950s hardware, but, say, the Quicksort algorithm, which was discovered in 1960 and is still the fastest general-purpose sort.<br>所以，这种 50 年代的语言之所以不过时，简单说就是：它不是技术，而是数学 —— 数学不会过时。拿 Lisp 来比，不该和 50 年代的硬件比，而应该和 1960 年发明的快速排序算法比 —— 后者至今仍是最快的通用排序算法。</p><p>There is one other language still surviving from the 1950s, Fortran, and it represents the opposite approach to language design. Lisp was a piece of theory that unexpectedly got turned into a programming language. Fortran was developed intentionally as a programming language, but what we would now consider a very low-level one.<br>50 年代还有另一种语言留存至今，那就是 Fortran，它代表了语言设计的另一种思路。Lisp 是理论意外变成了编程语言，而 Fortran 则是被刻意设计成编程语言的，但按现在的标准看，它的级别很低。</p><p>Fortran I, the language that was developed in 1956, was a very different animal from present-day Fortran. Fortran I was pretty much assembly language with math. In some ways it was less powerful than more recent assembly languages; there were no subroutines, for example, only branches. Present-day Fortran is now arguably closer to Lisp than to Fortran I.<br>1956 年的 Fortran I 和现在的 Fortran 大不相同。Fortran I 基本上是带数学功能的汇编语言。在某些方面，它甚至不如后来的汇编语言 —— 比如没有子程序，只有分支。可以说，现在的 Fortran 比之于 Fortran I，更接近 Lisp。</p><p>Lisp and Fortran were the trunks of two separate evolutionary trees, one rooted in math and one rooted in machine architecture. These two trees have been converging ever since. Lisp started out powerful, and over the next twenty years got fast. So-called mainstream languages started out fast, and over the next forty years gradually got more powerful, until now the most advanced of them are fairly close to Lisp. Close, but they are still missing a few things….<br>Lisp 和 Fortran 是两棵不同进化树的主干：一棵根植于数学，另一棵根植于机器架构。这两棵树从那以后就一直在靠近。Lisp 一开始就很强大，之后二十年变得更快；所谓的主流语言一开始很快，之后四十年逐渐变得更强大，直到现在，最先进的主流语言已经相当接近 Lisp 了。但只是接近，仍有一些东西缺失……</p><h3 id="What-Made-Lisp-Different"><a href="#What-Made-Lisp-Different" class="headerlink" title="What Made Lisp Different"></a><strong>What Made Lisp Different</strong></h3><p><strong>Lisp 的独特之处</strong></p><p>When it was first developed, Lisp embodied nine new ideas. Some of these we now take for granted, others are only seen in more advanced languages, and two are still unique to Lisp. The nine ideas are, in order of their adoption by the mainstream,<br>Lisp 刚出现时，包含了九个新想法。其中一些现在已被视为理所当然，另一些只在更高级的语言中出现，还有两个仍是 Lisp 独有的。按被主流采纳的顺序，这九个想法是：</p><p><strong>1.Conditionals.</strong> A conditional is an if-then-else construct. We take these for granted now, but Fortran I didn’t have them. It had only a conditional goto closely based on the underlying machine instruction.<br>条件语句。条件语句即 if-then-else 结构。我们现在觉得这很平常，但 Fortran I 没有这种结构，只有基于底层机器指令的条件跳转。</p><p><strong>2.A function type.</strong> In Lisp, functions are a data type just like integers or strings. They have a literal representation, can be stored in variables, can be passed as arguments, and so on.<br>函数类型。在 Lisp 中，函数和整数、字符串一样是一种数据类型。它们有字面表示，能存在变量里，能作为参数传递，等等。</p><p><strong>3.Recursion.</strong> Lisp was the first programming language to support it.<br>递归。Lisp 是第一种支持递归的编程语言。</p><p><strong>4.Dynamic typing.</strong> In Lisp, all variables are effectively pointers. Values are what have types, not variables, and assigning or binding variables means copying pointers, not what they point to.<br>动态类型。在 Lisp 中，所有变量本质上都是指针。类型属于值，而非变量；给变量赋值或绑定变量，只是复制指针，而非指针指向的内容。</p><p><strong>5.Garbage-collection.</strong></p><p>垃圾回收。</p><p><strong>6.Programs composed of expressions.</strong> Lisp programs are trees of expressions, each of which returns a value. This is in contrast to Fortran and most succeeding languages, which distinguish between expressions and statements.<br>由表达式构成的程序。Lisp 程序是表达式树，每个表达式都返回一个值。这与 Fortran 及后来的大多数语言不同，它们区分表达式和语句。</p><p>It was natural to have this distinction in Fortran I because you could not nest statements. And so while you needed expressions for math to work, there was no point in making anything else return a value, because there could not be anything waiting for it.<br>Fortran I 中有这种区分是很自然的，因为它不能嵌套语句。所以，虽然做数学运算需要表达式，但让其他东西返回值是没意义的 —— 因为没有东西会等着接收这个值。</p><p>This limitation went away with the arrival of block-structured languages, but by then it was too late. The distinction between expressions and statements was entrenched. It spread from Fortran into Algol and then to both their descendants.<br>随着块结构语言的出现，这个限制消失了，但为时已晚。表达式和语句的区分已经根深蒂固，从 Fortran 传到 Algol，再传到它们的所有后代语言。</p><p><strong>7.A symbol type.</strong> Symbols are effectively pointers to strings stored in a hash table. So you can test equality by comparing a pointer, instead of comparing each character.<br>符号类型。符号本质上是指向哈希表中字符串的指针。所以判断相等时，只需比较指针，不用逐个比较字符。</p><p><strong>8.A notation for code using trees of symbols and constants.</strong><br>用符号和常量树表示代码的记法。</p><p><strong>9.The whole language there all the time.</strong> There is no real distinction between read-time, compile-time, and runtime. You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.<br>整个语言始终可用。读时、编译时和运行时之间没有真正的界限。你可以在读代码时编译或运行代码，编译时读或运行代码，运行时读或编译代码。</p><p>Running code at read-time lets users reprogram Lisp’s syntax; running code at compile-time is the basis of macros; compiling at runtime is the basis of Lisp’s use as an extension language in programs like Emacs; and reading at runtime enables programs to communicate using s-expressions, an idea recently reinvented as XML.<br>在 read-time 运行代码，让用户可以重新定义 Lisp 的语法；在编译时运行代码，是宏的基础；在运行时编译，是 Lisp 能作为 Emacs 等程序的扩展语言的基础；在运行时读取代码，让程序能通过 s 表达式通信 —— 这个想法最近被重新发明为 XML。</p><p>When Lisp first appeared, these ideas were far removed from ordinary programming practice, which was dictated largely by the hardware available in the late 1950s. Over time, the default language, embodied in a succession of popular languages, has gradually evolved toward Lisp. Ideas 1-5 are now widespread. Number 6 is starting to appear in the mainstream. Python has a form of 7, though there doesn’t seem to be any syntax for it.<br>Lisp 刚出现时，这些想法与当时的常规编程实践相去甚远 —— 当时的实践很大程度上受限于 50 年代末的硬件。随着时间推移，主流语言（以一系列流行语言为代表）逐渐向 Lisp 进化。想法 1-5 现已普及；想法 6 开始进入主流；Python 有了想法 7 的某种形式，尽管似乎没有对应的语法。</p><p>As for number 8, this may be the most interesting of the lot. Ideas 8 and 9 only became part of Lisp by accident, because Steve Russell implemented something McCarthy had never intended to be implemented. And yet these ideas turn out to be responsible for both Lisp’s strange appearance and its most distinctive features. Lisp looks strange not so much because it has a strange syntax as because it has no syntax; you express programs directly in the parse trees that get built behind the scenes when other languages are parsed, and these trees are made of lists, which are Lisp data structures.<br>至于想法 8，它可能是其中最有趣的。想法 8 和 9 能成为 Lisp 的一部分纯属偶然 —— 因为史蒂夫・拉塞尔实现了麦卡锡从未想过要实现的东西。但正是这些想法造就了 Lisp 奇特的外观和最独特的特性。Lisp 看起来奇怪，不是因为语法奇怪，而是因为它 “没有语法”：你直接用解析树来表达程序 —— 其他语言解析时会在后台生成这种树，而 Lisp 的解析树是由列表（Lisp 的数据结构）构成的。</p><p>Expressing the language in its own data structures turns out to be a very powerful feature. Ideas 8 and 9 together mean that you can write programs that write programs. That may sound like a bizarre idea, but it’s an everyday thing in Lisp. The most common way to do it is with something called a macro.<br>用语言自身的数据结构来表示语言，是一个非常强大的特性。想法 8 和 9 结合起来意味着：你可以编写 “编写程序的程序”。这听起来可能很奇怪，但在 Lisp 中是家常便饭。最常见的方式是通过 “宏”。</p><p>The term “macro” does not mean in Lisp what it means in other languages. A Lisp macro can be anything from an abbreviation to a compiler for a new language. If you want to really understand Lisp, or just expand your programming horizons, I would learn more about macros.<br>Lisp 中的 “宏” 和其他语言中的 “宏” 意思不同。Lisp 宏可以是缩写，也可以是新语言的编译器。如果你想真正理解 Lisp，或者只是想拓宽编程视野，建议多了解宏。</p><p>Macros (in the Lisp sense) are still, as far as I know, unique to Lisp. This is partly because in order to have macros you probably have to make your language look as strange as Lisp. It may also be because if you do add that final increment of power, you can no longer claim to have invented a new language, but only a new dialect of Lisp.<br>据我所知，（Lisp 意义上的）宏仍是 Lisp 独有的。部分原因是，要支持宏，你的语言可能就得像 Lisp 一样看起来奇怪。也可能是因为，一旦你加上了这最后一点强大的特性，你就不能再声称发明了新语言，而只是 Lisp 的新方言。</p><p>I mention this mostly as a joke, but it is quite true. If you define a language that has car, cdr, cons, quote, cond, atom, eq, and a notation for functions expressed as lists, then you can build all the rest of Lisp out of it. That is in fact the defining quality of Lisp: it was in order to make this so that McCarthy gave Lisp the shape it has.<br>我这么说主要是开玩笑，但确实是事实。如果你定义一种语言，包含 car、cdr、cons、quote、cond、atom、eq，以及用列表表示函数的记法，那么你就能用这些构建出 Lisp 的其余部分。这其实是 Lisp 的定义性特质：麦卡锡赋予 Lisp 这样的形态，正是为了实现这一点。</p><h3 id="Where-Languages-Matter"><a href="#Where-Languages-Matter" class="headerlink" title="Where Languages Matter"></a><strong>Where Languages Matter</strong></h3><p><strong>语言的重要性何在</strong></p><p>So suppose Lisp does represent a kind of limit that mainstream languages are approaching asymptotically– does that mean you should actually use it to write software? How much do you lose by using a less powerful language? Isn’t it wiser, sometimes, not to be at the very edge of innovation? And isn’t popularity to some extent its own justification? Isn’t the pointy-haired boss right, for example, to want to use a language for which he can easily hire programmers?<br>假设 Lisp 确实代表了主流语言正在逐渐接近的一种极限 —— 那这意味着你真的应该用它来写软件吗？用一种不够强大的语言，你会损失多少？有时候，不站在创新最前沿，是不是更明智？流行在某种程度上不就是合理性的证明吗？比如，尖头老板想用人容易招的语言，难道不对吗？</p><p>There are, of course, projects where the choice of programming language doesn’t matter much. As a rule, the more demanding the application, the more leverage you get from using a powerful language. But plenty of projects are not demanding at all. Most programming probably consists of writing little glue programs, and for little glue programs you can use any language that you’re already familiar with and that has good libraries for whatever you need to do. If you just need to feed data from one Windows app to another, sure, use Visual Basic.<br>当然，有些项目中，编程语言的选择不那么重要。一般来说，应用的要求越高，使用强大的语言带来的优势就越大。但很多项目的要求并不高。大多数编程工作可能只是写些小的 “胶水程序”，对于这类程序，你可以用任何自己熟悉、且有合适库的语言。如果你只是需要把数据从一个 Windows 应用传到另一个，用 Visual Basic 就行。</p><p>You can write little glue programs in Lisp too (I use it as a desktop calculator), but the biggest win for languages like Lisp is at the other end of the spectrum, where you need to write sophisticated programs to solve hard problems in the face of fierce competition. A good example is the airline fare search program that ITA Software licenses to Orbitz. These guys entered a market already dominated by two big, entrenched competitors, Travelocity and Expedia, and seem to have just humiliated them technologically.<br>你也可以用 Lisp 写小胶水程序（我就把它当桌面计算器用），但 Lisp 这类语言的最大优势体现在另一端：当你需要写复杂程序，在激烈竞争中解决难题时。一个很好的例子是 ITA 软件公司授权给 Orbitz 的机票价格搜索程序。他们进入的市场早已被 Travelocity 和 Expedia 这两个巨头占据，但他们似乎在技术上轻松碾压了对手。</p><p>The core of ITA’s application is a 200,000 line Common Lisp program that searches many orders of magnitude more possibilities than their competitors, who apparently are still using mainframe-era programming techniques. (Though ITA is also in a sense using a mainframe-era programming language.) I have never seen any of ITA’s code, but according to one of their top hackers they use a lot of macros, and I am not surprised to hear it.<br>ITA 应用的核心是一个 20 万行的 Common Lisp 程序，它搜索的可能性比竞争对手多好几个数量级 —— 竞争对手显然还在用大型机时代的编程技术（尽管从某种意义上说，ITA 用的也是大型机时代的编程语言）。我没见过 ITA 的代码，但据他们的一位顶尖黑客说，他们大量使用宏，我对此并不意外。</p><h3 id="Centripetal-Forces"><a href="#Centripetal-Forces" class="headerlink" title="Centripetal Forces"></a><strong>Centripetal Forces</strong></h3><p><strong>向心力</strong></p><p>I’m not saying there is no cost to using uncommon technologies. The pointy-haired boss is not completely mistaken to worry about this. But because he doesn’t understand the risks, he tends to magnify them.<br>我不是说用不常见的技术没有代价。尖头老板对此的担忧并非完全没道理。但因为他不理解其中的风险，往往会夸大它们。</p><p>I can think of three problems that could arise from using less common languages. Your programs might not work well with programs written in other languages. You might have fewer libraries at your disposal. And you might have trouble hiring programmers.<br>我能想到使用冷门语言可能带来的三个问题：你的程序可能和其他语言写的程序兼容不好；可用的库可能更少；可能很难招到程序员。</p><p>How much of a problem is each of these? The importance of the first varies depending on whether you have control over the whole system. If you’re writing software that has to run on a remote user’s machine on top of a buggy, closed operating system (I mention no names), there may be advantages to writing your application in the same language as the OS. But if you control the whole system and have the source code of all the parts, as ITA presumably does, you can use whatever languages you want. If any incompatibility arises, you can fix it yourself.<br>这些问题有多严重？第一个问题的重要性取决于你是否能控制整个系统。如果你写的软件必须在远程用户的机器上运行，而用户的操作系统又有 bug、且是封闭的（我就不点名了），那么用和操作系统相同的语言写应用可能有优势。但如果你像 ITA 那样，能控制整个系统，且拥有所有部分的源代码，你就可以用任何语言。如果出现不兼容，你自己就能修复。</p><p>In server-based applications you can get away with using the most advanced technologies, and I think this is the main cause of what Jonathan Erickson calls the “programming language renaissance.” This is why we even hear about new languages like Perl and Python. We’re not hearing about these languages because people are using them to write Windows apps, but because people are using them on servers. And as software shifts off the desktop and onto servers (a future even Microsoft seems resigned to), there will be less and less pressure to use middle-of-the-road technologies.<br>在基于服务器的应用中，你可以放心使用最先进的技术。我认为这是乔纳森・埃里克森所说的 “编程语言复兴” 的主要原因。这也是我们会听说 Perl、Python 等新语言的原因 —— 不是因为人们用它们写 Windows 应用，而是因为人们在服务器上用它们。随着软件从桌面转向服务器（连微软似乎都接受了这个未来），使用中庸技术的压力会越来越小。</p><p>As for libraries, their importance also depends on the application. For less demanding problems, the availability of libraries can outweigh the intrinsic power of the language. Where is the breakeven point? Hard to say exactly, but wherever it is, it is short of anything you’d be likely to call an application. If a company considers itself to be in the software business, and they’re writing an application that will be one of their products, then it will probably involve several hackers and take at least six months to write. In a project of that size, powerful languages probably start to outweigh the convenience of pre-existing libraries.<br>至于库，其重要性也取决于应用。对于要求不高的问题，库的可用性可能比语言本身的强大更重要。平衡点在哪里？很难说清楚，但可以肯定的是，它远低于 “应用” 的级别。如果一家公司认为自己是做软件的，并且在写一个将成为其产品之一的应用，那么这个项目可能需要几个黑客，至少花六个月时间。在这种规模的项目中，强大的语言可能开始比现有库的便利性更重要。</p><p>The third worry of the pointy-haired boss, the difficulty of hiring programmers, I think is a red herring. How many hackers do you need to hire, after all? Surely by now we all know that software is best developed by teams of less than ten people. And you shouldn’t have trouble hiring hackers on that scale for any language anyone has ever heard of. If you can’t find ten Lisp hackers, then your company is probably based in the wrong city for developing software.<br>尖头老板的第三个担忧 —— 招程序员难，我觉得是个无关紧要的问题。毕竟，你需要招多少黑客？现在大家肯定都知道，软件最好由不到十人的团队开发。对于任何有点名气的语言，招这么多人应该都不难。如果连十个 Lisp 黑客都找不到，那你的公司可能选错了软件开发的城市。</p><p>In fact, choosing a more powerful language probably decreases the size of the team you need, because (a) if you use a more powerful language you probably won’t need as many hackers, and (b) hackers who work in more advanced languages are likely to be smarter.<br>事实上，选择更强大的语言可能会减少所需的团队规模，因为：（a）用更强大的语言，可能不需要那么多黑客；（b）用更高级语言的黑客可能更聪明。</p><p>I’m not saying that you won’t get a lot of pressure to use what are perceived as “standard” technologies. At Viaweb (now Yahoo Store), we raised some eyebrows among VCs and potential acquirers by using Lisp. But we also raised eyebrows by using generic Intel boxes as servers instead of “industrial strength” servers like Suns, for using a then-obscure open-source Unix variant called FreeBSD instead of a real commercial OS like Windows NT, for ignoring a supposed e-commerce standard called SET that no one now even remembers, and so on.<br>我不是说你不会面临使用 “标准” 技术的压力。在 Viaweb（现在的 Yahoo Store），我们用 Lisp 让风投和潜在收购方大跌眼镜。但我们还用普通英特尔机器当服务器（而非 Sun 那样的 “工业级” 服务器）、用当时鲜为人知的开源 Unix 变体 FreeBSD（而非 Windows NT 这样的商业操作系统）、无视所谓的电子商务标准 SET（现在没人记得了）等等，同样让他们惊讶。</p><p>You can’t let the suits make technical decisions for you. Did it alarm some potential acquirers that we used Lisp? Some, slightly, but if we hadn’t used Lisp, we wouldn’t have been able to write the software that made them want to buy us. What seemed like an anomaly to them was in fact cause and effect.<br>你不能让西装革履的人替你做技术决策。我们用 Lisp 有没有让一些潜在收购方不安？有一些，轻微的。但如果我们不用 Lisp，就写不出让他们想买的软件。在他们看来是反常的事，其实是因果关系。</p><p>If you start a startup, don’t design your product to please VCs or potential acquirers. Design your product to please the users. If you win the users, everything else will follow. And if you don’t, no one will care how comfortingly orthodox your technology choices were.<br>如果你创业，不要为了讨好风投或潜在收购方而设计产品。要为了讨好用户而设计。赢得用户，其他一切都会随之而来。如果赢不了用户，没人会在乎你的技术选择有多 “正统”、多让人安心。</p><h3 id="The-Cost-of-Being-Average"><a href="#The-Cost-of-Being-Average" class="headerlink" title="The Cost of Being Average"></a><strong>The Cost of Being Average</strong></h3><p><strong>平庸的代价</strong></p><p>How much do you lose by using a less powerful language? There is actually some data out there about that.<br>用不够强大的语言，你会损失多少？其实有一些相关数据。</p><p>The most convenient measure of power is probably code size. The point of high-level languages is to give you bigger abstractions– bigger bricks, as it were, so you don’t need as many to build a wall of a given size. So the more powerful the language, the shorter the program (not simply in characters, of course, but in distinct elements).<br>衡量语言强大程度最方便的指标可能是代码长度。高级语言的意义在于提供更大的抽象 —— 可以说，是更大的砖块，所以建同样大小的墙，需要的砖块更少。因此，语言越强大，程序就越短（当然，不是指字符数，而是指不同元素的数量）。</p><p>How does a more powerful language enable you to write shorter programs? One technique you can use, if the language will let you, is something called bottom-up programming. Instead of simply writing your application in the base language, you build on top of the base language a language for writing programs like yours, then write your program in it. The combined code can be much shorter than if you had written your whole program in the base language– indeed, this is how most compression algorithms work. A bottom-up program should be easier to modify as well, because in many cases the language layer won’t have to change at all.<br>更强大的语言怎么能让程序更短？如果语言支持，你可以用一种叫 “自底向上编程” 的技术。不是直接用基础语言写应用，而是在基础语言之上构建一种适合写这类应用的语言，再用这种语言写应用。这样一来，总代码量会比全用基础语言写短得多 —— 其实，大多数压缩算法也是这个原理。自底向上编写的程序也更容易修改，因为很多情况下，语言层根本不需要改动。</p><p>Code size is important, because the time it takes to write a program depends mostly on its length. If your program would be three times as long in another language, it will take three times as long to write– and you can’t get around this by hiring more people, because beyond a certain size new hires are actually a net lose. Fred Brooks described this phenomenon in his famous book The Mythical Man-Month, and everything I’ve seen has tended to confirm what he said.<br>代码长度很重要，因为写程序的时间主要取决于长度。如果用另一种语言，你的程序会变长三倍，那么写它的时间也会变成三倍 —— 而且你不能通过多招人来解决，因为超过一定规模后，新员工实际上是净损耗。弗雷德・布鲁克斯在他的名著《人月神话》中描述了这种现象，我所见的一切都印证了他的说法。</p><p>So how much shorter are your programs if you write them in Lisp? Most of the numbers I’ve heard for Lisp versus C, for example, have been around 7-10x. But a recent article about ITA in New Architect magazine said that “one line of Lisp can replace 20 lines of C,” and since this article was full of quotes from ITA’s president, I assume they got this number from ITA. If so then we can put some faith in it; ITA’s software includes a lot of C and C++ as well as Lisp, so they are speaking from experience.<br>那么，用 Lisp 写程序，代码会短多少？比如，我听说的 Lisp 对 C 的比例大多在 7-10 倍左右。但《新架构师》杂志最近一篇关于 ITA 的文章说，“一行 Lisp 能替代 20 行 C”。因为文章里有很多 ITA 总裁的引言，我猜这个数字来自 ITA。如果是这样，我们可以相信它 ——ITA 的软件既用了很多 C 和 C++，也用了 Lisp，所以他们是有经验的。</p><p>My guess is that these multiples aren’t even constant. I think they increase when you face harder problems and also when you have smarter programmers. A really good hacker can squeeze more out of better tools.<br>我猜这个倍数不是固定的。面对更难的问题，或者有更聪明的程序员时，这个倍数会更大。真正优秀的黑客能从更好的工具中榨取出更多价值。</p><p>As one data point on the curve, at any rate, if you were to compete with ITA and chose to write your software in C, they would be able to develop software twenty times faster than you. If you spent a year on a new feature, they’d be able to duplicate it in less than three weeks. Whereas if they spent just three months developing something new, it would be five years before you had it too.<br>无论如何，有一个数据可以参考：如果你要和 ITA 竞争，却选择用 C 写软件，他们的开发速度会是你的 20 倍。你花一年开发的新功能，他们不到三周就能复制；而他们花三个月开发的新东西，你可能要五年才能做出来。</p><p>And you know what? That’s the best-case scenario. When you talk about code-size ratios, you’re implicitly assuming that you can actually write the program in the weaker language. But in fact there are limits on what programmers can do. If you’re trying to solve a hard problem with a language that’s too low-level, you reach a point where there is just too much to keep in your head at once.<br>你知道吗？这还是最好的情况。谈论代码长度比时，你隐含的假设是：用较弱的语言确实能写出这个程序。但事实上，程序员的能力是有限的。如果你用太低级的语言解决难题，最终会发现，要同时记住的东西太多，根本记不住。</p><p>So when I say it would take ITA’s imaginary competitor five years to duplicate something ITA could write in Lisp in three months, I mean five years if nothing goes wrong. In fact, the way things work in most companies, any development project that would take five years is likely never to get finished at all.<br>所以，当我说 ITA 的假想竞争对手要用五年复制 ITA 用 Lisp 三个月能完成的东西时，我指的是 “如果一切顺利” 的情况。但事实上，在大多数公司里，任何需要五年的开发项目，很可能根本完不成。</p><p>I admit this is an extreme case. ITA’s hackers seem to be unusually smart, and C is a pretty low-level language. But in a competitive market, even a differential of two or three to one would be enough to guarantee that you’d always be behind.<br>我承认这是个极端案例。ITA 的黑客似乎异常聪明，而 C 确实是很低级的语言。但在竞争激烈的市场中，哪怕只是 2-3 倍的差距，也足以保证你永远落后。</p><h3 id="A-Recipe"><a href="#A-Recipe" class="headerlink" title="A Recipe"></a><strong>A Recipe</strong></h3><p><strong>一个秘诀</strong></p><p>This is the kind of possibility that the pointy-haired boss doesn’t even want to think about. And so most of them don’t. Because, you know, when it comes down to it, the pointy-haired boss doesn’t mind if his company gets their ass kicked, so long as no one can prove it’s his fault. The safest plan for him personally is to stick close to the center of the herd.<br>这种可能性是尖头老板连想都不愿想的。所以他们大多不会去想。因为，说到底，尖头老板不在乎公司是否会被碾压，只要没人能证明是他的错就行。对他个人来说，最安全的计划就是紧跟大流。</p><p>Within large organizations, the phrase used to describe this approach is “industry best practice.” Its purpose is to shield the pointy-haired boss from responsibility: if he chooses something that is “industry best practice,” and the company loses, he can’t be blamed. He didn’t choose, the industry did.<br>在大公司里，描述这种做法的词是 “行业最佳实践”。它的目的是为尖头老板推卸责任：如果他选择了 “行业最佳实践”，而公司输了，他不用背锅。不是他选的，是行业选的。</p><p>I believe this term was originally used to describe accounting methods and so on. What it means, roughly, is don’t do anything weird. And in accounting that’s probably a good idea. The terms “cutting-edge” and “accounting” do not sound good together. But when you import this criterion into decisions about technology, you start to get the wrong answers.<br>我认为这个词最初是用来描述会计方法等的。它大致意思是 “别做怪事”。在会计领域，这可能是个好主意 ——“前沿” 和 “会计” 放在一起确实不搭。但把这个标准用到技术决策上，你就会得到错误的答案。</p><p>Technology often should be cutting-edge. In programming languages, as Erann Gat has pointed out, what “industry best practice” actually gets you is not the best, but merely the average. When a decision causes you to develop software at a fraction of the rate of more aggressive competitors, “best practice” is a misnomer.<br>技术往往就该是前沿的。正如埃兰・盖特指出的，在编程语言领域，“行业最佳实践” 给你的不是最好，只是平均水平。当一个决策让你的软件开发速度只有更激进竞争对手的几分之一时，“最佳实践” 就是个误称。</p><p>So here we have two pieces of information that I think are very valuable. In fact, I know it from my own experience. Number 1, languages vary in power. Number 2, most managers deliberately ignore this. Between them, these two facts are literally a recipe for making money. ITA is an example of this recipe in action. If you want to win in a software business, just take on the hardest problem you can find, use the most powerful language you can get, and wait for your competitors’ pointy-haired bosses to revert to the mean.<br>所以，我觉得有两个信息非常有价值。其实，我自己的经验也证明了这一点。第一，语言的强大程度不同。第二，大多数管理者故意忽视这一点。这两个事实加起来，简直就是赚钱的秘诀。ITA 就是这个秘诀的实践者。如果你想在软件行业获胜，就去解决你能找到的最难的问题，用你能得到的最强大的语言，然后等着竞争对手的尖头老板们回归平庸就行了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前路殊途</title>
    <link href="/2025/08/14/the-other-road-ahead/"/>
    <url>/2025/08/14/the-other-road-ahead/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Other-Road-Ahead"><a href="#The-Other-Road-Ahead" class="headerlink" title="The Other Road Ahead"></a>The Other Road Ahead</h2><p>原文链接: <a href="https://paulgraham.com/road.html">https://paulgraham.com/road.html</a></p><p>September 2001</p><p>(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It’s derived from a talk at BBN Labs.)</p><p>（本文将阐述为何下一代软件可能多为基于服务器的形式，这对程序员意味着什么，以及这种新型软件为何对初创公司是重大机遇。本文改编自作者在 BBN 实验室的演讲。）</p><p>In the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape’s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.</p><p>1995 年夏天，我和朋友罗伯特・莫里斯决定创办一家初创公司。当时，网景（Netscape）IPO 前的公关宣传正搞得如火如荼，媒体上充斥着关于在线商务的讨论。那时，互联网上可能只有 30 家真正的在线商店，而且都是手工搭建的。我们意识到，若未来会出现大量在线商店，就一定需要搭建它们的软件，于是决定着手开发。</p><p>For the first week or so we intended to make this an ordinary desktop application. Then one day we had the idea of making the software run on our Web server, using the browser as an interface. We tried rewriting the software to work over the Web, and it was clear that this was the way to go. If we wrote our software to run on the server, it would be a lot easier for the users and for us as well.</p><p>最初一周左右，我们本想把它做成一款普通的桌面应用。但某天，我们突然想到：让软件运行在我们的 Web 服务器上，用浏览器作为界面。我们尝试重写软件以适配网络，结果发现这才是正确的方向。如果软件运行在服务器上，对用户和我们自己来说都会简单得多。</p><p>This turned out to be a good plan. Now, as Yahoo Store, this software is the most popular online store builder, with about 14,000 users.</p><p>事实证明这是个好计划。如今，这款软件以 “雅虎商店”（Yahoo Store）之名成为最受欢迎的在线商店搭建工具，拥有约 1.4 万名用户。</p><p>When we started Viaweb, hardly anyone understood what we meant when we said that the software ran on the server. It was not until Hotmail was launched a year later that people started to get it. Now everyone knows that this is a valid approach. There is a name now for what we were: an Application Service Provider, or ASP.</p><p>我们创办 Viaweb 时，几乎没人理解 “软件运行在服务器上” 是什么意思。直到一年后 Hotmail 推出，人们才开始明白。现在，所有人都知道这是一种可行的模式 —— 我们这类公司如今有了一个名字：应用服务提供商（Application Service Provider，简称 ASP）。</p><p>I think that a lot of the next generation of software will be written on this model. Even Microsoft, who have the most to lose, seem to see the inevitablity of moving some things off the desktop. If software moves off the desktop and onto servers, it will mean a very different world for developers. This article describes the surprising things we saw, as some of the first visitors to this new world. To the extent software does move onto servers, what I’m describing here is the future.</p><p>我认为，下一代软件中的很大一部分都会采用这种模式。即便是微软 —— 这家可能因此损失最大的公司 —— 似乎也意识到，有些功能必然会从桌面转移出去。如果软件从桌面转移到服务器，开发者的世界将截然不同。本文将讲述我们作为这个新世界的早期探索者，所看到的那些令人惊讶的现象。只要软件确实向服务器迁移，我所描述的就将是未来。</p><h3 id="The-Next-Thing"><a href="#The-Next-Thing" class="headerlink" title="The Next Thing?"></a><strong>The Next Thing?</strong></h3><p><strong>新事物？</strong></p><p>When we look back on the desktop software era, I think we’ll marvel at the inconveniences people put up with, just as we marvel now at what early car owners put up with. For the first twenty or thirty years, you had to be a car expert to own a car. But cars were such a big win that lots of people who weren’t car experts wanted to have them as well.</p><p>回望桌面软件时代，我想人们会惊叹于当年用户忍受的种种不便 —— 就像我们现在惊叹于早期车主的遭遇一样。汽车发明后的二三十年间，你必须是汽车专家才能拥有一辆车。但汽车的价值太大了，即便不是专家的人也想拥有它。</p><p>Computers are in this phase now. When you own a desktop computer, you end up learning a lot more than you wanted to know about what’s happening inside it. But more than half the households in the US own one. My mother has a computer that she uses for email and for keeping accounts. About a year ago she was alarmed to receive a letter from Apple, offering her a discount on a new version of the operating system. There’s something wrong when a sixty-five year old woman who wants to use a computer for email and accounts has to think about installing new operating systems. Ordinary users shouldn’t even know the words “operating system,” much less “device driver” or “patch.”</p><p>如今的计算机正处于类似阶段。当你拥有一台台式机，最终会被迫了解许多本不想知道的内部运作。但美国超过一半的家庭都有电脑。我母亲用电脑发邮件、记账，大约一年前，她收到苹果的一封信，说可以折扣升级操作系统，这让她很不安。一个只想用电脑发邮件和记账的 65 岁老人，竟然要考虑安装新操作系统 —— 这显然不对劲。普通用户甚至不该知道 “操作系统” 这个词，更别提 “设备驱动” 或 “补丁” 了。</p><p>There is now another way to deliver software that will save users from becoming system administrators. Web-based applications are programs that run on Web servers and use Web pages as the user interface. For the average user this new kind of software will be easier, cheaper, more mobile, more reliable, and often more powerful than desktop software.</p><p>现在，有一种新的软件交付方式可以让用户不必成为系统管理员：基于 Web 的应用。这类程序运行在 Web 服务器上，用网页作为用户界面。对普通用户而言，这种新型软件比桌面软件更简单、更便宜、更易移动、更可靠，往往也更强大。</p><p>With Web-based software, most users won’t have to think about anything except the applications they use. All the messy, changing stuff will be sitting on a server somewhere, maintained by the kind of people who are good at that kind of thing. And so you won’t ordinarily need a computer, per se, to use software. All you’ll need will be something with a keyboard, a screen, and a Web browser. Maybe it will have wireless Internet access. Maybe it will also be your cell phone. Whatever it is, it will be consumer electronics: something that costs about $200, and that people choose mostly based on how the case looks. You’ll pay more for Internet services than you do for the hardware, just as you do now with telephones. [1]</p><p>有了基于 Web 的软件，大多数用户只需关注自己使用的应用即可。所有繁琐、易变的部分都放在某个服务器上，由擅长处理这些的人维护。因此，严格来说，你甚至不需要 “电脑” 就能使用软件 —— 只需一个带键盘、屏幕和浏览器的设备。它可能有无线互联网接入，也可能是你的手机。无论是什么，它都会是消费电子产品：售价约 200 美元，人们选择它主要看外观。你花在互联网服务上的钱会比硬件多，就像现在的电话一样。[1]</p><p>It will take about a tenth of a second for a click to get to the server and back, so users of heavily interactive software, like Photoshop, will still want to have the computations happening on the desktop. But if you look at the kind of things most people use computers for, a tenth of a second latency would not be a problem. My mother doesn’t really need a desktop computer, and there are a lot of people like her.</p><p>点击指令从发出到服务器再返回，大约需要 0.1 秒。因此，像 Photoshop 这类高度交互的软件用户可能仍希望运算在本地进行。但大多数人用电脑做的事，0.1 秒的延迟根本不是问题。我母亲其实不需要台式机，像她这样的人还有很多。</p><h3 id="The-Win-for-Users"><a href="#The-Win-for-Users" class="headerlink" title="The Win for Users"></a><strong>The Win for Users</strong></h3><p><strong>对用户的好处</strong></p><p>Near my house there is a car with a bumper sticker that reads “death before inconvenience.” Most people, most of the time, will take whatever choice requires least work. If Web-based software wins, it will be because it’s more convenient. And it looks as if it will be, for users and developers both.</p><p>我家附近有辆车，保险杠贴纸上写着 “宁死不受麻烦”。大多数人在大多数时候，都会选择最省事的选项。如果基于 Web 的软件能胜出，那一定是因为它更方便 —— 而且看起来，它对用户和开发者都是如此。</p><p>To use a purely Web-based application, all you need is a browser connected to the Internet. So you can use a Web-based application anywhere. When you install software on your desktop computer, you can only use it on that computer. Worse still, your files are trapped on that computer. The inconvenience of this model becomes more and more evident as people get used to networks.</p><p>使用纯 Web 应用，你只需要一个联网的浏览器，因此可以在任何地方使用。而桌面软件一旦安装，就只能在那台电脑上用，更糟的是，你的文件也被困在那里。随着人们习惯了网络，这种模式的不便会越来越明显。</p><p>The thin end of the wedge here was Web-based email. Millions of people now realize that you should have access to email messages no matter where you are. And if you can see your email, why not your calendar? If you can discuss a document with your colleagues, why can’t you edit it? Why should any of your data be trapped on some computer sitting on a faraway desk?</p><p>这种变化的开端是 Web 邮箱。如今，数百万人意识到，无论在哪里都能查看邮件。既然能看邮件，为什么不能看日历？既然能和同事讨论文档，为什么不能一起编辑？为什么你的数据要被困在一台遥远的电脑里？</p><p>The whole idea of “your computer” is going away, and being replaced with “your data.” You should be able to get at your data from any computer. Or rather, any client, and a client doesn’t have to be a computer.</p><p>“你的电脑” 这个概念正在消失，取而代之的是 “你的数据”。你应该能从任何电脑（或者说，任何客户端 —— 客户端未必是电脑）访问自己的数据。</p><p>Clients shouldn’t store data; they should be like telephones. In fact they may become telephones, or vice versa. And as clients get smaller, you have another reason not to keep your data on them: something you carry around with you can be lost or stolen. Leaving your PDA in a taxi is like a disk crash, except that your data is handed to someone else instead of being vaporized.</p><p>客户端不应存储数据，它们应该像电话一样。事实上，客户端可能会变成电话，或者反之。而且，客户端越小，就越不该在上面存数据：随身携带的东西可能丢失或被盗。把 PDA 落在出租车上，后果堪比硬盘崩溃，只是数据会落到别人手里，而非消失。</p><p>With purely Web-based software, neither your data nor the applications are kept on the client. So you don’t have to install anything to use it. And when there’s no installation, you don’t have to worry about installation going wrong. There can’t be incompatibilities between the application and your operating system, because the software doesn’t run on your operating system.</p><p>纯 Web 软件中，数据和应用都不在客户端。因此，使用时无需安装，也不必担心安装出错。应用和操作系统之间不会有兼容性问题，因为软件根本不在你的操作系统上运行。</p><p>Because it needs no installation, it will be easy, and common, to try Web-based software before you “buy” it. You should expect to be able to test-drive any Web-based application for free, just by going to the site where it’s offered. At Viaweb our whole site was like a big arrow pointing users to the test drive.</p><p>由于无需安装，试用 Web 软件会变得简单而普遍。你应该能免费试用任何 Web 应用，只需访问其网站即可。在 Viaweb，我们的整个网站都像一个巨大的箭头，指引用户去试用。</p><p>After trying the demo, signing up for the service should require nothing more than filling out a brief form (the briefer the better). And that should be the last work the user has to do. With Web-based software, you should get new releases without paying extra, or doing any work, or possibly even knowing about it.</p><p>试用后，注册服务只需填写一个简短的表单（越短越好）—— 这应该是用户要做的最后一件事。有了 Web 软件，你无需额外付费或操作，甚至可能都没察觉，就能用上新版本。</p><p>Upgrades won’t be the big shocks they are now. Over time applications will quietly grow more powerful. This will take some effort on the part of the developers. They will have to design software so that it can be updated without confusing the users. That’s a new problem, but there are ways to solve it.</p><p>升级不会再像现在这样令人头疼。随着时间推移，应用会悄悄变得更强大。这需要开发者付出努力：他们必须设计出能在更新时不困扰用户的软件。这是个新问题，但有解决办法。</p><p>With Web-based applications, everyone uses the same version, and bugs can be fixed as soon as they’re discovered. So Web-based software should have far fewer bugs than desktop software. At Viaweb, I doubt we ever had ten known bugs at any one time. That’s orders of magnitude better than desktop software.</p><p>Web 应用的所有用户都使用同一版本，bug 一旦发现就能立即修复。因此，Web 软件的 bug 应该比桌面软件少得多。在 Viaweb，任何时候已知的 bug 都不到 10 个，这比桌面软件好太多了。</p><p>Web-based applications can be used by several people at the same time. This is an obvious win for collaborative applications, but I bet users will start to want this in most applications once they realize it’s possible. It will often be useful to let two people edit the same document, for example. Viaweb let multiple users edit a site simultaneously, more because that was the right way to write the software than because we expected users to want to, but it turned out that many did.</p><p>Web 应用可以多人同时使用。这对协作类应用显然是优势，但我敢说，一旦用户意识到这一点，大多数应用都会需要这个功能。比如，两人同时编辑一份文档就很有用。Viaweb 允许多个用户同时编辑一个站点，起初只是因为这是编写软件的正确方式，而非我们预期用户需要，但后来发现很多用户确实需要。</p><p>When you use a Web-based application, your data will be safer. Disk crashes won’t be a thing of the past, but users won’t hear about them anymore. They’ll happen within server farms. And companies offering Web-based applications will actually do backups– not only because they’ll have real system administrators worrying about such things, but because an ASP that does lose people’s data will be in big, big trouble. When people lose their own data in a disk crash, they can’t get that mad, because they only have themselves to be mad at. When a company loses their data for them, they’ll get a lot madder.</p><p>使用 Web 应用时，你的数据更安全。硬盘崩溃不会消失，但用户不会再听说这类事 —— 它们只会发生在服务器集群里。提供 Web 应用的公司会认真做备份：不仅因为有专业的系统管理员负责，更因为如果 ASP 丢失用户数据，麻烦就大了。用户自己弄丢数据，最多怪自己；但如果是公司弄丢，他们会愤怒得多。</p><p>Finally, Web-based software should be less vulnerable to viruses. If the client doesn’t run anything except a browser, there’s less chance of running viruses, and no data locally to damage. And a program that attacked the servers themselves should find them very well defended. [2]</p><p>最后，Web 软件更不容易受病毒攻击。如果客户端只运行浏览器，运行病毒的机会就少了，本地也没有可破坏的数据。而攻击服务器的程序会发现，服务器的防御非常严密。[2]</p><p>For users, Web-based software will be less stressful. I think if you looked inside the average Windows user you’d find a huge and pretty much untapped desire for software meeting that description. Unleashed, it could be a powerful force.</p><p>对用户来说，Web 软件的压力更小。我想，若能看透普通 Windows 用户的内心，会发现他们对 “低压力软件” 有着巨大却未被满足的渴望。这种渴望一旦释放，将成为强大的力量。</p><h3 id="City-of-Code"><a href="#City-of-Code" class="headerlink" title="City of Code"></a><strong>City of Code</strong></h3><p><strong>代码之城</strong></p><p>To developers, the most conspicuous difference between Web-based and desktop software is that a Web-based application is not a single piece of code. It will be a collection of programs of different types rather than a single big binary. And so designing Web-based software is like desiging a city rather than a building: as well as buildings you need roads, street signs, utilities, police and fire departments, and plans for both growth and various kinds of disasters.</p><p>对开发者而言，Web 软件与桌面软件最显著的区别是：Web 应用不是单一代码块，而是不同类型程序的集合，而非一个巨大的二进制文件。因此，设计 Web 软件就像设计一座城市，而非一栋建筑：除了建筑，你还需要道路、路标、公共设施、警察和消防部门，以及应对增长和各种灾难的计划。</p><p>At Viaweb, software included fairly big applications that users talked to directly, programs that those programs used, programs that ran constantly in the background looking for problems, programs that tried to restart things if they broke, programs that ran occasionally to compile statistics or build indexes for searches, programs we ran explicitly to garbage-collect resources or to move or restore data, programs that pretended to be users (to measure performance or expose bugs), programs for diagnosing network troubles, programs for doing backups, interfaces to outside services, software that drove an impressive collection of dials displaying real-time server statistics (a hit with visitors, but indispensable for us too), modifications (including bug fixes) to open-source software, and a great many configuration files and settings. Trevor Blackwell wrote a spectacular program for moving stores to new servers across the country, without shutting them down, after we were bought by Yahoo. Programs paged us, sent faxes and email to users, conducted transactions with credit card processors, and talked to one another through sockets, pipes, http requests, ssh, udp packets, shared memory, and files. Some of Viaweb even consisted of the absence of programs, since one of the keys to Unix security is not to run unnecessary utilities that people might use to break into your servers.</p><p>在 Viaweb，软件包括用户直接交互的大型应用、这些应用调用的程序、后台持续运行的故障监测程序、重启崩溃进程的程序、定期运行的统计编译或搜索索引构建程序、我们手动运行的资源清理或数据迁移 &#x2F; 恢复程序、模拟用户的程序（用于测试性能或暴露 bug）、网络诊断程序、备份程序、外部服务接口、驱动实时服务器统计仪表盘的软件（访客喜欢看，对我们也必不可少）、开源软件的修改（包括 bug 修复），以及大量配置文件和设置。被雅虎收购后，特雷弗・布莱克韦尔写了一个出色的程序，能在不关闭商店的情况下，将全国的商店迁移到新服务器上。程序会给我们发寻呼、给用户发传真和邮件、与信用卡处理器进行交易，还通过套接字、管道、HTTP 请求、SSH、UDP 数据包、共享内存和文件相互通信。Viaweb 的一部分甚至是 “不存在的程序”—— 因为 Unix 安全的关键之一，就是不运行那些可能被用来入侵服务器的非必要工具。</p><p>It did not end with software. We spent a lot of time thinking about server configurations. We built the servers ourselves, from components– partly to save money, and partly to get exactly what we wanted. We had to think about whether our upstream ISP had fast enough connections to all the backbones. We serially dated RAID suppliers.</p><p>这还不止于软件。我们花了很多时间考虑服务器配置，自己用零件组装服务器 —— 部分是为了省钱，部分是为了完全符合需求。我们得考虑上游 ISP 与所有主干网的连接速度是否足够快，还得挨个考察 RAID 供应商。</p><p>But hardware is not just something to worry about. When you control it you can do more for users. With a desktop application, you can specify certain minimum hardware, but you can’t add more. If you administer the servers, you can in one step enable all your users to page people, or send faxes, or send commands by phone, or process credit cards, etc, just by installing the relevant hardware. We always looked for new ways to add features with hardware, not just because it pleased users, but also as a way to distinguish ourselves from competitors who (either because they sold desktop software, or resold Web-based applications through ISPs) didn’t have direct control over the hardware.</p><p>但硬件不只是需要担心的问题。当你掌控硬件时，能为用户做更多事。桌面软件只能指定最低硬件要求，但无法添加更多功能。而如果你管理服务器，只需安装相关硬件，就能一步到位地让所有用户实现寻呼、发传真、电话指令或信用卡处理等功能。我们总在寻找用硬件增加功能的新方法 —— 不仅因为用户会高兴，还因为这能让我们区别于那些（因销售桌面软件或通过 ISP 转售 Web 应用而）无法直接控制硬件的竞争对手。</p><p>Because the software in a Web-based application will be a collection of programs rather than a single binary, it can be written in any number of different languages. When you’re writing desktop software, you’re practically forced to write the application in the same language as the underlying operating system– meaning C and C++. And so these languages (especially among nontechnical people like managers and VCs) got to be considered as the languages for “serious” software development. But that was just an artifact of the way desktop software had to be delivered. For server-based software you can use any language you want. [3] Today a lot of the top hackers are using languages far removed from C and C++: Perl, Python, and even Lisp.</p><p>由于 Web 应用是程序集合而非单一二进制文件，它可以用多种语言编写。开发桌面软件时，你几乎被迫使用与底层操作系统相同的语言 —— 通常是 C 和 C++。因此，这些语言（尤其在管理者和风投等非技术人士眼中）成了 “严肃” 软件开发的代名词。但这只是桌面软件交付方式带来的假象。对基于服务器的软件而言，你可以用任何语言。[3] 如今，很多顶尖黑客在用与 C 和 C++ 相去甚远的语言：Perl、Python，甚至 Lisp。</p><p>With server-based software, no one can tell you what language to use, because you control the whole system, right down to the hardware. Different languages are good for different tasks. You can use whichever is best for each. And when you have competitors, “you can” means “you must” (we’ll return to this later), because if you don’t take advantage of this possibility, your competitors will.</p><p>有了服务器软件，没人能规定你用什么语言 —— 因为你掌控着整个系统，包括硬件。不同语言适用于不同任务，你可以为每个任务选择最合适的。而当你有竞争对手时，“可以选择” 就意味着 “必须选择”（后文会详述）—— 因为如果你不利用这个优势，对手就会利用。</p><p>Most of our competitors used C and C++, and this made their software visibly inferior because (among other things), they had no way around the statelessness of CGI scripts. If you were going to change something, all the changes had to happen on one page, with an Update button at the bottom. As I’ve written elsewhere, by using Lisp, which many people still consider a research language, we could make the Viaweb editor behave more like desktop software.</p><p>我们的大多数竞争对手用 C 和 C++，这导致他们的软件明显落后 —— 比如，他们无法解决 CGI 脚本的无状态问题。如果要修改内容，所有操作都得在一个页面完成，底部放一个 “更新” 按钮。正如我在别处写的，通过使用仍被很多人视为 “研究性语言” 的 Lisp，我们能让 Viaweb 编辑器的体验更接近桌面软件。</p><h3 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a><strong>Releases</strong></h3><p><strong>发布方式</strong></p><p>One of the most important changes in this new world is the way you do releases. In the desktop software business, doing a release is a huge trauma, in which the whole company sweats and strains to push out a single, giant piece of code. Obvious comparisons suggest themselves, both to the process and the resulting product.</p><p>这个新世界中，最重要的变化之一是发布方式。在桌面软件行业，发布是一场巨大的阵痛：全公司都在为推出一个庞大的代码块而全力以赴。无论是过程还是结果，都能找到恰当的类比。</p><p>With server-based software, you can make changes almost as you would in a program you were writing for yourself. You release software as a series of incremental changes instead of an occasional big explosion. A typical desktop software company might do one or two releases a year. At Viaweb we often did three to five releases a day.</p><p>而服务器软件的发布，几乎就像你为自己写程序时那样，可以通过一系列增量变化来更新，而非偶尔的 “大爆炸”。典型的桌面软件公司一年可能发布一两个版本，而 Viaweb 常常一天发布 3 到 5 次。</p><p>When you switch to this new model, you realize how much software development is affected by the way it is released. Many of the nastiest problems you see in the desktop software business are due to catastrophic nature of releases.</p><p>当你转向这种新模式，会发现软件开发深受发布方式的影响。桌面软件行业的很多棘手问题，都源于发布的 “灾难性” 本质。</p><p>When you release only one new version a year, you tend to deal with bugs wholesale. Some time before the release date you assemble a new version in which half the code has been torn out and replaced, introducing countless bugs. Then a squad of QA people step in and start counting them, and the programmers work down the list, fixing them. They do not generally get to the end of the list, and indeed, no one is sure where the end is. It’s like fishing rubble out of a pond. You never really know what’s happening inside the software. At best you end up with a statistical sort of correctness.</p><p>如果你一年只发布一个新版本，就会倾向于批量处理 bug。发布日前一段时间，你会组装一个新版本，其中一半代码被替换，引入无数 bug。然后一群测试人员介入，开始统计 bug，程序员再按列表逐个修复。他们通常修不完，而且没人知道列表的尽头在哪里 —— 就像从池塘里捞碎石，你永远不知道软件内部到底发生了什么。最好的情况，也只是达到一种 “统计意义上的正确”。</p><p>With server-based software, most of the change is small and incremental. That in itself is less likely to introduce bugs. It also means you know what to test most carefully when you’re about to release software: the last thing you changed. You end up with a much firmer grip on the code. As a general rule, you do know what’s happening inside it. You don’t have the source code memorized, of course, but when you read the source you do it like a pilot scanning the instrument panel, not like a detective trying to unravel some mystery.</p><p>服务器软件的变化大多是微小且增量的，这本身就不太可能引入 bug。而且，你很清楚发布前最需要仔细测试的部分：最后修改的内容。你对代码的掌控会牢固得多。一般来说，你知道软件内部在发生什么。当然，你不会记住所有源代码，但阅读代码时，你像飞行员扫视仪表盘，而非侦探破解谜案。</p><p>Desktop software breeds a certain fatalism about bugs. You know that you’re shipping something loaded with bugs, and you’ve even set up mechanisms to compensate for it (e.g. patch releases). So why worry about a few more? Soon you’re releasing whole features you know are broken. Apple did this earlier this year. They felt under pressure to release their new OS, whose release date had already slipped four times, but some of the software (support for CDs and DVDs) wasn’t ready. The solution? They released the OS without the unfinished parts, and users will have to install them later.</p><p>桌面软件让人们对 bug 产生了某种宿命论：你知道发布的软件充满 bug，甚至还设置了补偿机制（比如补丁）。那再多几个又何妨？很快，你会发布明知有问题的功能。苹果今年早些时候就这么做了。他们迫于压力发布新系统（发布日期已四次推迟），但部分功能（CD 和 DVD 支持）尚未就绪。解决方案？发布不含未完成部分的系统，让用户日后再安装。</p><p>With Web-based software, you never have to release software before it works, and you can release it as soon as it does work.</p><p>而 Web 软件，你永远不必在功能就绪前发布，且功能一就绪就能发布。</p><p>The industry veteran may be thinking, it’s a fine-sounding idea to say that you never have to release software before it works, but what happens when you’ve promised to deliver a new version of your software by a certain date? With Web-based software, you wouldn’t make such a promise, because there are no versions. Your software changes gradually and continuously. Some changes might be bigger than others, but the idea of versions just doesn’t naturally fit onto Web-based software.</p><p>行业老兵可能会想：“不发布未就绪软件” 听起来不错，但如果承诺了在某日期前交付新版本呢？对 Web 软件而言，你不会做这种承诺，因为根本没有 “版本”。软件在持续、渐进地变化。有些变化可能更大，但 “版本” 概念并不适用于 Web 软件。</p><p>If anyone remembers Viaweb this might sound odd, because we were always announcing new versions. This was done entirely for PR purposes. The trade press, we learned, thinks in version numbers. They will give you major coverage for a major release, meaning a new first digit on the version number, and generally a paragraph at most for a point release, meaning a new digit after the decimal point.</p><p>如果有人记得 Viaweb，可能会觉得奇怪 —— 我们总在宣布新版本。但这完全是为了公关。我们发现，行业媒体只认版本号：重大版本（主版本号升级）会得到大幅报道，而小更新（小数点后数字升级）最多给一段文字。</p><p>Some of our competitors were offering desktop software and actually had version numbers. And for these releases, the mere fact of which seemed to us evidence of their backwardness, they would get all kinds of publicity. We didn’t want to miss out, so we started giving version numbers to our software too. When we wanted some publicity, we’d make a list of all the features we’d added since the last “release,” stick a new version number on the software, and issue a press release saying that the new version was available immediately. Amazingly, no one ever called us on it.</p><p>我们的竞争对手提供桌面软件，确实有版本号。而这些在我们看来象征着落后的 “发布”，却能给他们带来各种曝光。我们不想错过，于是也开始给软件标版本号。想搞曝光时，就列出上次 “发布” 后新增的所有功能，贴个新版本号，发新闻稿说新版本已上线。令人惊讶的是，没人质疑。</p><p>By the time we were bought, we had done this three times, so we were on Version 4. Version 4.1 if I remember correctly. After Viaweb became Yahoo Store, there was no longer such a desperate need for publicity, so although the software continued to evolve, the whole idea of version numbers was quietly dropped.</p><p>被收购时，我们已经这么做了三次，所以是 “4.0 版”—— 我记得是 4.1 版。Viaweb 变成雅虎商店后，对曝光的需求没那么迫切了，尽管软件仍在进化，但版本号的概念悄然消失了。</p><h3 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a><strong>Bugs</strong></h3><p><strong>漏洞（Bugs）</strong></p><p>The other major technical advantage of Web-based software is that you can reproduce most bugs. You have the users’ data right there on your disk. If someone breaks your software, you don’t have to try to guess what’s going on, as you would with desktop software: you should be able to reproduce the error while they’re on the phone with you. You might even know about it already, if you have code for noticing errors built into your application.</p><p>Web 软件的另一大技术优势是：大多数 bug 可以复现。用户数据就在你的磁盘上，如果有人用崩了软件，你不必像处理桌面软件那样猜测原因 —— 用户打电话时，你就能复现错误。甚至，如果你在应用中内置了错误监测代码，可能早就知道了。</p><p>Web-based software gets used round the clock, so everything you do is immediately put through the wringer. Bugs turn up quickly.</p><p>Web 软件全天候运行，任何改动都会立即受到考验，bug 会很快暴露。</p><p>Software companies are sometimes accused of letting the users debug their software. And that is just what I’m advocating. For Web-based software it’s actually a good plan, because the bugs are fewer and transient. When you release software gradually you get far fewer bugs to start with. And when you can reproduce errors and release changes instantly, you can find and fix most bugs as soon as they appear. We never had enough bugs at any one time to bother with a formal bug-tracking system.</p><p>软件公司有时被指责 “让用户调试软件”—— 而这正是我所倡导的。对 Web 软件来说，这其实是个好策略，因为 bug 更少且更短暂。渐进式发布本身就减少了 bug，而且你能复现错误并立即发布修复。我们从未需要正式的 bug 跟踪系统，因为任何时候的 bug 都不多。</p><p>You should test changes before you release them, of course, so no major bugs should get released. Those few that inevitably slip through will involve borderline cases and will only affect the few users that encounter them before someone calls in to complain. As long as you fix bugs right away, the net effect, for the average user, is far fewer bugs. I doubt the average Viaweb user ever saw a bug.</p><p>当然，发布前你得测试，确保没有重大 bug。少数漏网之鱼通常涉及边缘情况，且只会影响在有人投诉前遇到它们的少数用户。只要立即修复，对普通用户来说，整体 bug 会少得多。我怀疑 Viaweb 的普通用户从未见过 bug。</p><p>Fixing fresh bugs is easier than fixing old ones. It’s usually fairly quick to find a bug in code you just wrote. When it turns up you often know what’s wrong before you even look at the source, because you were already worrying about it subconsciously. Fixing a bug in something you wrote six months ago (the average case if you release once a year) is a lot more work. And since you don’t understand the code as well, you’re more likely to fix it in an ugly way, or even introduce more bugs. [4]</p><p>修复新 bug 比旧 bug 容易。刚写的代码出了问题，通常很快就能找到原因。bug 出现时，你甚至不用看源码就知道大概哪里错了 —— 因为潜意识里早就在担心了。而修复六个月前写的代码（一年发布一次的话，这是常态）要麻烦得多。而且，由于你对代码的理解没那么深，很可能修复得很丑陋，甚至引入更多 bug。[4]</p><p>When you catch bugs early, you also get fewer compound bugs. Compound bugs are two separate bugs that interact: you trip going downstairs, and when you reach for the handrail it comes off in your hand. In software this kind of bug is the hardest to find, and also tends to have the worst consequences. [5] The traditional “break everything and then filter out the bugs” approach inherently yields a lot of compound bugs. And software that’s released in a series of small changes inherently tends not to. The floors are constantly being swept clean of any loose objects that might later get stuck in something.</p><p>及早发现 bug 还能减少 “复合 bug”。复合 bug 是两个独立 bug 的相互作用：比如你下楼时绊倒，伸手抓扶手，结果扶手掉了。这类 bug 最难找，后果也往往最严重。[5] 传统的 “先破坏一切再过滤 bug” 的方式必然会产生大量复合 bug，而通过一系列小变化发布的软件则不会。就像地面被不断清扫，不会留下日后可能卡住东西的杂物。</p><p>It helps if you use a technique called functional programming. Functional programming means avoiding side-effects. It’s something you’re more likely to see in research papers than commercial software, but for Web-based applications it turns out to be really useful. It’s hard to write entire programs as purely functional code, but you can write substantial chunks this way. It makes those parts of your software easier to test, because they have no state, and that is very convenient in a situation where you are constantly making and testing small modifications. I wrote much of Viaweb’s editor in this style, and we made our scripting language, RTML, a purely functional language.</p><p>使用一种叫 “函数式编程” 的技术会有帮助。函数式编程意味着避免副作用。这种技术在研究论文中比商业软件中更常见，但对 Web 应用来说非常有用。很难将整个程序写成纯函数式代码，但你可以用这种方式写很大一部分。这会让软件的这些部分更易测试 —— 因为它们没有状态，而这在你不断进行小修改和测试时非常方便。Viaweb 的编辑器有很大一部分是我用这种风格写的，我们的脚本语言 RTML 也是纯函数式语言。</p><p>People from the desktop software business will find this hard to credit, but at Viaweb bugs became almost a game. Since most released bugs involved borderline cases, the users who encountered them were likely to be advanced users, pushing the envelope. Advanced users are more forgiving about bugs, especially since you probably introduced them in the course of adding some feature they were asking for. In fact, because bugs were rare and you had to be doing sophisticated things to see them, advanced users were often proud to catch one. They would call support in a spirit more of triumph than anger, as if they had scored points off us.</p><p>桌面软件行业的人可能难以相信，但在 Viaweb，找 bug 几乎成了一种游戏。由于大多数已发布的 bug 涉及边缘情况，遇到它们的往往是那些 “探索极限” 的高级用户。高级用户对 bug 更宽容，尤其是如果 bug 是在添加他们要求的功能时引入的。事实上，因为 bug 很少，而且只有做复杂操作才能发现，高级用户甚至会为抓到一个 bug 而自豪。他们打电话给客服时，更多的是胜利感而非愤怒，就像赢了我们一分。</p><h3 id="Support"><a href="#Support" class="headerlink" title="Support"></a><strong>Support</strong></h3><p><strong>客服</strong></p><p>When you can reproduce errors, it changes your approach to customer support. At most software companies, support is offered as a way to make customers feel better. They’re either calling you about a known bug, or they’re just doing something wrong and you have to figure out what. In either case there’s not much you can learn from them. And so you tend to view support calls as a pain in the ass that you want to isolate from your developers as much as possible.</p><p>当你能复现错误时，客服方式也会改变。在大多数软件公司，客服只是为了让客户感觉好一点。客户要么是在说已知的 bug，要么是操作错了，你得弄清楚问题所在。不管哪种情况，你都学不到太多东西。因此，你会觉得客服电话很麻烦，总想让开发者尽量远离。</p><p>This was not how things worked at Viaweb. At Viaweb, support was free, because we wanted to hear from customers. If someone had a problem, we wanted to know about it right away so that we could reproduce the error and release a fix.</p><p>但 Viaweb 不是这样。我们的客服是免费的，因为我们想听到客户的声音。如果有人遇到问题，我们希望立即知道，以便复现错误并发布修复。</p><p>So at Viaweb the developers were always in close contact with support. The customer support people were about thirty feet away from the programmers, and knew that they could always interrupt anything with a report of a genuine bug. We would leave a board meeting to fix a serious bug.</p><p>因此，在 Viaweb，开发者和客服始终保持密切联系。客服人员离程序员只有约 30 英尺（约 9 米）远，他们知道，只要报告真正的 bug，随时可以打断任何工作。遇到严重 bug 时，我们甚至会离开董事会去修复。</p><p>Our approach to support made everyone happier. The customers were delighted. Just imagine how it would feel to call a support line and be treated as someone bringing important news. The customer support people liked it because it meant they could help the users, instead of reading scripts to them. And the programmers liked it because they could reproduce bugs instead of just hearing vague second-hand reports about them.</p><p>这种客服方式让所有人都更开心。客户很满意 —— 想象一下，打电话给客服，自己被当成带来重要消息的人，是什么感觉。客服人员也喜欢，因为他们能真正帮助用户，而不是念脚本。程序员也喜欢，因为他们能复现 bug，而不是听模糊的二手报告。</p><p>Our policy of fixing bugs on the fly changed the relationship between customer support people and hackers. At most software companies, support people are underpaid human shields, and hackers are little copies of God the Father, creators of the world. Whatever the procedure for reporting bugs, it is likely to be one-directional: support people who hear about bugs fill out some form that eventually gets passed on (possibly via QA) to programmers, who put it on their list of things to do. It was very different at Viaweb. Within a minute of hearing about a bug from a customer, the support people could be standing next to a programmer hearing him say “Shit, you’re right, it’s a bug.” It delighted the support people to hear that “you’re right” from the hackers. They used to bring us bugs with the same expectant air as a cat bringing you a mouse it has just killed. It also made them more careful in judging the seriousness of a bug, because now their honor was on the line.</p><p>我们即时修复 bug 的政策改变了客服人员和黑客（程序员）的关系。在大多数软件公司，客服是低收入的 “人肉盾牌”，而黑客则像创世主一样高高在上。无论 bug 报告流程如何，都可能是单向的：客服听到 bug 后填表单，最终（可能经测试部门）传给程序员，程序员再把它加入待办清单。但在 Viaweb 完全不同。客服从客户那里听到 bug 后，一分钟内就能站到程序员旁边，听他说 “该死，你说得对，这是个 bug”。客服人员听到黑客说 “你是对的” 会很开心，他们带着 bug 来找我们时，那种期待的神情就像猫叼来刚抓到的老鼠。这也让他们在判断 bug 严重性时更谨慎，因为现在这关系到他们的信誉。</p><p>After we were bought by Yahoo, the customer support people were moved far away from the programmers. It was only then that we realized that they were effectively QA and to some extent marketing as well. In addition to catching bugs, they were the keepers of the knowledge of vaguer, buglike things, like features that confused users. [6] They were also a kind of proxy focus group; we could ask them which of two new features users wanted more, and they were always right.</p><p>被雅虎收购后，客服人员被调到离程序员很远的地方。直到那时我们才意识到，他们其实还承担着测试的角色，在某种程度上还负责营销。除了发现 bug，他们还掌握着一些模糊的、类似 bug 的信息，比如让用户困惑的功能。[6] 他们还像一个 “代理焦点小组”：我们问他们用户更想要两个新功能中的哪一个，他们总是对的。</p><h3 id="Morale"><a href="#Morale" class="headerlink" title="Morale"></a><strong>Morale</strong></h3><p><strong>士气</strong></p><p>Being able to release software immediately is a big motivator. Often as I was walking to work I would think of some change I wanted to make to the software, and do it that day. This worked for bigger features as well. Even if something was going to take two weeks to write (few projects took longer), I knew I could see the effect in the software as soon as it was done.</p><p>能立即发布软件是很大的动力。我经常在上班路上想到要改软件，当天就能动手。这对更大的功能也适用。即便某个功能需要两周时间编写（很少有项目更长），我也知道，一旦完成就能立即看到效果。</p><p>If I’d had to wait a year for the next release, I would have shelved most of these ideas, for a while at least. The thing about ideas, though, is that they lead to more ideas. Have you ever noticed that when you sit down to write something, half the ideas that end up in it are ones you thought of while writing it? The same thing happens with software. Working to implement one idea gives you more ideas. So shelving an idea costs you not only that delay in implementing it, but also all the ideas that implementing it would have led to. In fact, shelving an idea probably even inhibits new ideas: as you start to think of some new feature, you catch sight of the shelf and think “but I already have a lot of new things I want to do for the next release.”</p><p>如果要等一年才能发布，我多半会把这些想法搁置，至少暂时如此。但想法的特点是，一个会引出更多。你有没有注意过，坐下来写东西时，最终写进去的想法有一半是写作时才想到的？软件也是如此。实现一个想法的过程会催生更多想法。因此，搁置一个想法不仅意味着延迟实现它，还会失去它可能引出的所有想法。事实上，搁置想法甚至可能抑制新想法：当你开始构思某个新功能时，一想到 “待办清单” 就会想 “但我已经有很多要为下一个版本做的新东西了”。</p><p>What big companies do instead of implementing features is plan them. At Viaweb we sometimes ran into trouble on this account. Investors and analysts would ask us what we had planned for the future. The truthful answer would have been, we didn’t have any plans. We had general ideas about things we wanted to improve, but if we knew how we would have done it already. What were we going to do in the next six months? Whatever looked like the biggest win. I don’t know if I ever dared give this answer, but that was the truth. Plans are just another word for ideas on the shelf. When we thought of good ideas, we implemented them.</p><p>大公司不直接实现功能，而是先规划。Viaweb 有时会因此遇到麻烦。投资者和分析师会问我们未来的计划。实话是，我们没有计划。我们有一些想改进的大致方向，但如果知道具体怎么做，早就做了。未来六个月要做什么？做那些看起来最有价值的事。我不知道自己是否敢这么回答，但这是事实。计划不过是 “搁置的想法” 的另一种说法。想到好主意，我们就去实现。</p><p>At Viaweb, as at many software companies, most code had one definite owner. But when you owned something you really owned it: no one except the owner of a piece of software had to approve (or even know about) a release. There was no protection against breakage except the fear of looking like an idiot to one’s peers, and that was more than enough. I may have given the impression that we just blithely plowed forward writing code. We did go fast, but we thought very carefully before we released software onto those servers. And paying attention is more important to reliability than moving slowly. Because he pays close attention, a Navy pilot can land a 40,000 lb. aircraft at 140 miles per hour on a pitching carrier deck, at night, more safely than the average teenager can cut a bagel.</p><p>和很多软件公司一样，Viaweb 的大多数代码都有明确的负责人。但 “负责” 意味着真正的掌控：除了负责人，没人需要批准（甚至知道）发布。防止出错的唯一保障，是怕在同行面前出丑 —— 而这已经足够了。我可能给人一种印象，觉得我们只是轻率地埋头写代码。我们确实很快，但发布到服务器前会非常谨慎。对可靠性来说，专注比慢更重要。正因为专注，海军飞行员能在夜间、在颠簸的航母甲板上，以 140 英里 &#x2F; 小时的速度降落 4 万磅的飞机，比普通青少年切百吉饼还安全。</p><p>This way of writing software is a double-edged sword of course. It works a lot better for a small team of good, trusted programmers than it would for a big company of mediocre ones, where bad ideas are caught by committees instead of the people that had them.</p><p>当然，这种软件开发方式是把双刃剑。它对由优秀、可信的程序员组成的小团队更有效，而对由平庸者组成的大公司则不然 —— 在大公司，坏主意要靠委员会发现，而非提出者自己。</p><h3 id="Brooks-in-Reverse"><a href="#Brooks-in-Reverse" class="headerlink" title="Brooks in Reverse"></a><strong>Brooks in Reverse</strong></h3><p><strong>反向的布鲁克斯定律</strong></p><p>Fortunately, Web-based software does require fewer programmers. I once worked for a medium-sized desktop software company that had over 100 people working in engineering as a whole. Only 13 of these were in product development. All the rest were working on releases, ports, and so on. With Web-based software, all you need (at most) are the 13 people, because there are no releases, ports, and so on.</p><p>幸运的是，Web 软件需要的程序员更少。我曾在一家中等规模的桌面软件公司工作，整个工程部门有 100 多人，其中只有 13 人负责产品开发，其余都在做发布、移植等工作。而 Web 软件最多只需要这 13 人，因为没有发布、移植等环节。</p><p>Viaweb was written by just three people. [7] I was always under pressure to hire more, because we wanted to get bought, and we knew that buyers would have a hard time paying a high price for a company with only three programmers. (Solution: we hired more, but created new projects for them.)</p><p>Viaweb 仅由三个人编写。[7] 我一直有压力要多招人，因为我们想被收购，而我们知道，收购方很难给只有三个程序员的公司出高价。（解决方案：我们招了更多人，但给他们安排了新项目。）</p><p>When you can write software with fewer programmers, it saves you more than money. As Fred Brooks pointed out in The Mythical Man-Month, adding people to a project tends to slow it down. The number of possible connections between developers grows exponentially with the size of the group. The larger the group, the more time they’ll spend in meetings negotiating how their software will work together, and the more bugs they’ll get from unforeseen interactions. Fortunately, this process also works in reverse: as groups get smaller, software development gets exponentially more efficient. I can’t remember the programmers at Viaweb ever having an actual meeting. We never had more to say at any one time than we could say as we were walking to lunch.</p><p>能用更少的程序员开发软件，节省的不只是钱。正如弗雷德・布鲁克斯在《人月神话》中指出的，给项目加人往往会拖慢进度。开发者之间的可能连接数随团队规模呈指数增长。团队越大，花在会议上协商软件如何协作的时间就越多，因未预见的交互产生的 bug 也越多。幸运的是，这个过程可逆：团队越小，软件开发效率越高。我不记得 Viaweb 的程序员开过正式会议。任何时候，我们要讨论的事都能在去吃午饭的路上说完。</p><p>If there is a downside here, it is that all the programmers have to be to some degree system administrators as well. When you’re hosting software, someone has to be watching the servers, and in practice the only people who can do this properly are the ones who wrote the software. At Viaweb our system had so many components and changed so frequently that there was no definite border between software and infrastructure. Arbitrarily declaring such a border would have constrained our design choices. And so although we were constantly hoping that one day (“in a couple months”) everything would be stable enough that we could hire someone whose job was just to worry about the servers, it never happened.</p><p>如果说有缺点，那就是所有程序员在某种程度上还得兼任系统管理员。托管软件时，总得有人盯着服务器，而实际上，只有写软件的人才能做好这件事。Viaweb 的系统组件太多，变化太频繁，软件和基础设施之间没有明确界限。随意划定界限会限制设计选择。因此，尽管我们总希望有一天（“再过几个月”）系统足够稳定，能雇人专门负责服务器，但这一天从未到来。</p><p>I don’t think it could be any other way, as long as you’re still actively developing the product. Web-based software is never going to be something you write, check in, and go home. It’s a live thing, running on your servers right now. A bad bug might not just crash one user’s process; it could crash them all. If a bug in your code corrupts some data on disk, you have to fix it. And so on. We found that you don’t have to watch the servers every minute (after the first year or so), but you definitely want to keep an eye on things you’ve changed recently. You don’t release code late at night and then go home.</p><p>我认为，只要还在积极开发产品，情况就只能如此。Web 软件永远不是你写完、提交、然后回家就能不管的东西。它是活的，正在你的服务器上运行。一个严重的 bug 可能不只是崩溃一个用户的进程，而是所有用户的。如果代码中的 bug 损坏了磁盘上的数据，你就得修复。等等。我们发现，（一年后）不必每分钟都盯着服务器，但最近修改的部分必须留意。你不会在深夜发布代码然后回家。</p><h3 id="Watching-Users"><a href="#Watching-Users" class="headerlink" title="Watching Users"></a><strong>Watching Users</strong></h3><p><strong>观察用户</strong></p><p>With server-based software, you’re in closer touch with your code. You can also be in closer touch with your users. Intuit is famous for introducing themselves to customers at retail stores and asking to follow them home. If you’ve ever watched someone use your software for the first time, you know what surprises must have awaited them.</p><p>有了服务器软件，你能更贴近代码，也能更贴近用户。财捷集团（Intuit）因在零售店向客户自我介绍并请求跟着回家而闻名。如果你见过有人第一次用你的软件，就会知道他们一定会遇到惊喜（指意外问题）。</p><p>Software should do what users think it will. But you can’t have any idea what users will be thinking, believe me, until you watch them. And server-based software gives you unprecedented information about their behavior. You’re not limited to small, artificial focus groups. You can see every click made by every user. You have to consider carefully what you’re going to look at, because you don’t want to violate users’ privacy, but even the most general statistical sampling can be very useful.</p><p>软件应该按用户预期的方式工作。但相信我，除非观察他们，否则你根本不知道用户在想什么。服务器软件能提供关于用户行为的前所未有的信息。你不限于小型、人为的焦点小组，能看到每个用户的每一次点击。你必须仔细考虑要看什么 —— 因为不想侵犯用户隐私 —— 但即便是最一般的统计抽样也非常有用。</p><p>When you have the users on your server, you don’t have to rely on benchmarks, for example. Benchmarks are simulated users. With server-based software, you can watch actual users. To decide what to optimize, just log into a server and see what’s consuming all the CPU. And you know when to stop optimizing too: we eventually got the Viaweb editor to the point where it was memory-bound rather than CPU-bound, and since there was nothing we could do to decrease the size of users’ data (well, nothing easy), we knew we might as well stop there.</p><p>比如，当用户在你的服务器上时，不必依赖基准测试。基准测试是模拟用户，而服务器软件能让你观察真实用户。要决定优化什么，只需登录服务器看看什么占用了最多 CPU。你也知道何时停止优化：我们最终让 Viaweb 编辑器达到了内存受限而非 CPU 受限的程度，而由于无法（轻易）减小用户数据量，我们知道可以就此打住。</p><p>Efficiency matters for server-based software, because you’re paying for the hardware. The number of users you can support per server is the divisor of your capital cost, so if you can make your software very efficient you can undersell competitors and still make a profit. At Viaweb we got the capital cost per user down to about $5. It would be less now, probably less than the cost of sending them the first month’s bill. Hardware is free now, if your software is reasonably efficient.</p><p>效率对服务器软件很重要，因为你要为硬件付费。每台服务器能支持的用户数是资本成本的除数，因此，如果软件效率很高，你就能以更低的价格销售，仍能盈利。在 Viaweb，每个用户的资本成本降至约 5 美元。现在会更低，可能低于给他们寄第一个月账单的成本。如果软件效率尚可，硬件几乎是免费的。</p><p>Watching users can guide you in design as well as optimization. Viaweb had a scripting language called RTML that let advanced users define their own page styles. We found that RTML became a kind of suggestion box, because users only used it when the predefined page styles couldn’t do what they wanted. Originally the editor put button bars across the page, for example, but after a number of users used RTML to put buttons down the left side, we made that an option (in fact the default) in the predefined page styles.</p><p>观察用户不仅能指导优化，还能指导设计。Viaweb 有一种叫 RTML 的脚本语言，让高级用户可以自定义页面样式。我们发现，RTML 成了一种 “意见箱”—— 因为用户只有在预设样式无法满足需求时才会用它。例如，编辑器最初在页面顶部放按钮栏，但很多用户用 RTML 把按钮移到左侧后，我们就把这作为预设样式的一个选项（实际上成了默认）。</p><p>Finally, by watching users you can often tell when they’re in trouble. And since the customer is always right, that’s a sign of something you need to fix. At Viaweb the key to getting users was the online test drive. It was not just a series of slides built by marketing people. In our test drive, users actually used the software. It took about five minutes, and at the end of it they had built a real, working store.</p><p>最后，通过观察用户，你常常能发现他们何时遇到麻烦。而既然客户永远是对的，这就意味着有东西需要修复。在 Viaweb，获取用户的关键是在线试用。这不仅仅是营销人员制作的一系列幻灯片 —— 在我们的试用中，用户真的在使用软件。整个过程约 5 分钟，结束时他们已经搭建了一个真实可用的商店。</p><p>The test drive was the way we got nearly all our new users. I think it will be the same for most Web-based applications. If users can get through a test drive successfully, they’ll like the product. If they get confused or bored, they won’t. So anything we could do to get more people through the test drive would increase our growth rate.</p><p>试用几乎是我们获取所有新用户的方式。我认为大多数 Web 应用也会如此。如果用户能成功完成试用，就会喜欢产品；如果感到困惑或无聊，就不会。因此，任何能让更多人完成试用的事，都能提高增长率。</p><p>I studied click trails of people taking the test drive and found that at a certain step they would get confused and click on the browser’s Back button. (If you try writing Web-based applications, you’ll find that the Back button becomes one of your most interesting philosophical problems.) So I added a message at that point, telling users that they were nearly finished, and reminding them not to click on the Back button. Another great thing about Web-based software is that you get instant feedback from changes: the number of people completing the test drive rose immediately from 60% to 90%. And since the number of new users was a function of the number of completed test drives, our revenue growth increased by 50%, just from that change.</p><p>我研究了试用用户的点击轨迹，发现他们在某个步骤会困惑并点击浏览器的 “后退” 按钮。（如果你尝试写 Web 应用，会发现 “后退” 按钮成了最有趣的哲学问题之一。）于是我在那个步骤加了一条消息，告诉用户快完成了，提醒他们不要点后退。Web 软件的另一个好处是，修改能立即得到反馈：完成试用的人数立即从 60% 升至 90%。而由于新用户数量取决于完成试用的人数，仅这一个修改就让收入增长率提高了 50%。</p><h3 id="Money"><a href="#Money" class="headerlink" title="Money"></a><strong>Money</strong></h3><p><strong>盈利</strong></p><p>In the early 1990s I read an article in which someone said that software was a subscription business. At first this seemed a very cynical statement. But later I realized that it reflects reality: software development is an ongoing process. I think it’s cleaner if you openly charge subscription fees, instead of forcing people to keep buying and installing new versions so that they’ll keep paying you. And fortunately, subscriptions are the natural way to bill for Web-based applications.</p><p>20 世纪 90 年代初，我读过一篇文章，说软件是订阅业务。起初这听起来很愤世嫉俗，但后来我意识到这反映了现实：软件开发是一个持续的过程。我认为，公开收取订阅费更合理，而不是强迫人们不断购买和安装新版本来让他们持续付费。幸运的是，订阅是 Web 应用的自然计费方式。</p><p>Hosting applications is an area where companies will play a role that is not likely to be filled by freeware. Hosting applications is a lot of stress, and has real expenses. No one is going to want to do it for free.</p><p>托管应用是企业将发挥作用的领域，不太可能被免费软件取代。托管应用压力大，且有实际成本，没人愿意免费做。</p><p>For companies, Web-based applications are an ideal source of revenue. Instead of starting each quarter with a blank slate, you have a recurring revenue stream. Because your software evolves gradually, you don’t have to worry that a new model will flop; there never need be a new model, per se, and if you do something to the software that users hate, you’ll know right away. You have no trouble with uncollectable bills; if someone won’t pay you can just turn off the service. And there is no possibility of piracy.</p><p>对公司来说，Web 应用是理想的收入来源。你不必每个季度从零开始，而是有持续的收入流。由于软件逐渐进化，不必担心新模式会失败 —— 本质上不需要新模式，而且如果做了用户讨厌的改动，能立即知道。不会有收不到钱的问题：如果有人不付费，关掉服务就行。也不存在盗版问题。</p><p>That last “advantage” may turn out to be a problem. Some amount of piracy is to the advantage of software companies. If some user really would not have bought your software at any price, you haven’t lost anything if he uses a pirated copy. In fact you gain, because he is one more user helping to make your software the standard– or who might buy a copy later, when he graduates from high school.</p><p>最后这个 “优势” 可能成问题。一定程度的盗版对软件公司有利。如果某个用户无论如何都不会买你的软件，他用盗版对你没损失。事实上你还能获益，因为他多了一个帮你的软件成为标准的用户 —— 或者他高中毕业后可能会买一份。</p><p>When they can, companies like to do something called price discrimination, which means charging each customer as much as they can afford. [8] Software is particularly suitable for price discrimination, because the marginal cost is close to zero. This is why some software costs more to run on Suns than on Intel boxes: a company that uses Suns is not interested in saving money and can safely be charged more. Piracy is effectively the lowest tier of price discrimination. I think that software companies understand this and deliberately turn a blind eye to some kinds of piracy. [9] With server-based software they are going to have to come up with some other solution.</p><p>公司在可能的情况下会进行 “价格歧视”，即向每个客户收取他们能承受的最高价格。[8] 软件特别适合价格歧视，因为边际成本接近零。这就是为什么有些软件在 Sun 机上运行比在 Intel 机上贵：用 Sun 机的公司不在乎省钱，可以放心多收费。盗版实际上是价格歧视的最底层。我认为软件公司明白这一点，故意对某些盗版视而不见。[9] 有了服务器软件，他们得想出其他解决方案。</p><p>Web-based software sells well, especially in comparison to desktop software, because it’s easy to buy. You might think that people decide to buy something, and then buy it, as two separate steps. That’s what I thought before Viaweb, to the extent I thought about the question at all. In fact the second step can propagate back into the first: if something is hard to buy, people will change their mind about whether they wanted it. And vice versa: you’ll sell more of something when it’s easy to buy. I buy more books because Amazon exists. Web-based software is just about the easiest thing in the world to buy, especially if you have just done an online demo. Users should not have to do much more than enter a credit card number. (Make them do more at your peril.)</p><p>Web 软件卖得好，尤其是相比桌面软件，因为它容易购买。你可能认为，人们先决定买，再购买，是两个独立步骤。在 Viaweb 之前，我也是这么想的（如果我想过这个问题的话）。但实际上，第二步会影响第一步：如果购买很麻烦，人们会改变是否想要的想法。反之，容易购买的东西会卖得更多。因为有亚马逊，我买的书更多了。Web 软件几乎是世界上最容易购买的东西，尤其是刚做完在线演示后。用户只需输入信用卡号就行（让他们多做一步，后果自负）。</p><p>Sometimes Web-based software is offered through ISPs acting as resellers. This is a bad idea. You have to be administering the servers, because you need to be constantly improving both hardware and software. If you give up direct control of the servers, you give up most of the advantages of developing Web-based applications.</p><p>有时 Web 软件通过 ISP 作为经销商提供。这是个坏主意。你必须管理服务器，因为需要不断改进硬件和软件。如果放弃对服务器的直接控制，就放弃了开发 Web 应用的大部分优势。</p><p>Several of our competitors shot themselves in the foot this way– usually, I think, because they were overrun by suits who were excited about this huge potential channel, and didn’t realize that it would ruin the product they hoped to sell through it. Selling Web-based software through ISPs is like selling sushi through vending machines.</p><p>我们的几个竞争对手就这样自食其果 —— 我认为，通常是因为他们被西装革履的人（指管理人员）主导，这些人对这个巨大的潜在渠道很兴奋，却没意识到这会毁掉他们想通过渠道销售的产品。通过 ISP 卖 Web 软件，就像通过自动售货机卖寿司。</p><h3 id="Customers"><a href="#Customers" class="headerlink" title="Customers"></a><strong>Customers</strong></h3><p><strong>客户</strong></p><p>Who will the customers be? At Viaweb they were initially individuals and smaller companies, and I think this will be the rule with Web-based applications. These are the users who are ready to try new things, partly because they’re more flexible, and partly because they want the lower costs of new technology.</p><p>客户会是谁？在 Viaweb，最初是个人和小公司，我认为 Web 应用也会如此。这些用户愿意尝试新事物，部分因为他们更灵活，部分因为他们想要新技术带来的低成本。</p><p>Web-based applications will often be the best thing for big companies too (though they’ll be slow to realize it). The best intranet is the Internet. If a company uses true Web-based applications, the software will work better, the servers will be better administered, and employees will have access to the system from anywhere.</p><p>Web 应用对大公司往往也是最好的选择（尽管他们会迟迟意识不到）。最好的内网就是互联网。如果公司使用真正的 Web 应用，软件会更好用，服务器管理更到位，员工在任何地方都能访问系统。</p><p>The argument against this approach usually hinges on security: if access is easier for employees, it will be for bad guys too. Some larger merchants were reluctant to use Viaweb because they thought customers’ credit card information would be safer on their own servers. It was not easy to make this point diplomatically, but in fact the data was almost certainly safer in our hands than theirs. Who can hire better people to manage security, a technology startup whose whole business is running servers, or a clothing retailer? Not only did we have better people worrying about security, we worried more about it. If someone broke into the clothing retailer’s servers, it would affect at most one merchant, could probably be hushed up, and in the worst case might get one person fired. If someone broke into ours, it could affect thousands of merchants, would probably end up as news on CNet, and could put us out of business.</p><p>反对这种方式的论点通常围绕安全：如果员工更容易访问，坏人也会更容易。一些大商家不愿用 Viaweb，因为他们认为客户的信用卡信息在自己的服务器上更安全。委婉地说明这一点并不容易，但事实上，数据在我们手里几乎肯定比在他们那里更安全。谁能雇到更好的人来管理安全？是一家以运行服务器为核心业务的科技初创公司，还是一家服装零售商？我们不仅有更优秀的人负责安全，还更重视它。如果有人入侵服装零售商的服务器，最多影响一个商家，可能被掩盖，最坏情况是有人被解雇。如果有人入侵我们的服务器，可能影响数千商家，很可能登上 CNet 新闻，甚至让我们倒闭。</p><p>If you want to keep your money safe, do you keep it under your mattress at home, or put it in a bank? This argument applies to every aspect of server administration: not just security, but uptime, bandwidth, load management, backups, etc. Our existence depended on doing these things right. Server problems were the big no-no for us, like a dangerous toy would be for a toy maker, or a salmonella outbreak for a food processor.</p><p>如果你想让钱安全，是放在家里的床垫下，还是存入银行？这个论点适用于服务器管理的方方面面：不仅是安全，还有 uptime（运行时间）、带宽、负载管理、备份等。我们的生存取决于把这些事做好。服务器问题对我们来说是绝对禁忌，就像危险玩具对玩具制造商、沙门氏菌爆发对食品加工商一样。</p><p>A big company that uses Web-based applications is to that extent outsourcing IT. Drastic as it sounds, I think this is generally a good idea. Companies are likely to get better service this way than they would from in-house system administrators. System administrators can become cranky and unresponsive because they’re not directly exposed to competitive pressure: a salesman has to deal with customers, and a developer has to deal with competitors’ software, but a system administrator, like an old bachelor, has few external forces to keep him in line. [10] At Viaweb we had external forces in plenty to keep us in line. The people calling us were customers, not just co-workers. If a server got wedged, we jumped; just thinking about it gives me a jolt of adrenaline, years later.</p><p>使用 Web 应用的大公司，在某种程度上是将 IT 外包。听起来很激进，但我认为这通常是个好主意。公司通过这种方式得到的服务，可能比内部系统管理员提供的更好。系统管理员可能变得暴躁且反应迟钝，因为他们不直接面临竞争压力：销售人员要应对客户，开发者要应对竞争对手的软件，而系统管理员就像老光棍，没什么外部力量约束他们。[10] 在 Viaweb，有足够的外部力量约束我们。打电话给我们的是客户，不只是同事。如果服务器卡住，我们会立即行动；多年后想到这，我仍会肾上腺素飙升。</p><p>So Web-based applications will ordinarily be the right answer for big companies too. They will be the last to realize it, however, just as they were with desktop computers. And partly for the same reason: it will be worth a lot of money to convince big companies that they need something more expensive.</p><p>因此，Web 应用通常对大公司也是正确选择。但他们会最后才意识到，就像当年对台式机一样。部分原因相同：说服大公司他们需要更贵的东西，能赚很多钱。</p><p>There is always a tendency for rich customers to buy expensive solutions, even when cheap solutions are better, because the people offering expensive solutions can spend more to sell them. At Viaweb we were always up against this. We lost several high-end merchants to Web consulting firms who convinced them they’d be better off if they paid half a million dollars for a custom-made online store on their own server. They were, as a rule, not better off, as more than one discovered when Christmas shopping season came around and loads rose on their server. Viaweb was a lot more sophisticated than what most of these merchants got, but we couldn’t afford to tell them. At $300 a month, we couldn’t afford to send a team of well-dressed and authoritative-sounding people to make presentations to customers.</p><p>富有的客户总是倾向于购买昂贵的解决方案，即使便宜的更好 —— 因为提供昂贵方案的人能花更多钱去推销。在 Viaweb，我们一直面临这种情况。有几个高端商家被 Web 咨询公司抢走，这些公司说服他们，花 50 万美元在自己的服务器上定制在线商店会更好。但通常情况下，他们的处境并没有变好，不止一个商家在圣诞购物季来临时，因服务器负载上升而发现了这一点。Viaweb 比这些商家得到的大多数解决方案要复杂得多，但我们没有能力去告诉他们。每月 300 美元的价格，我们负担不起派一队衣着光鲜、听起来很权威的人去给客户做演示。</p><p>A large part of what big companies pay extra for is the cost of selling expensive things to them. (If the Defense Department pays a thousand dollars for toilet seats, it’s partly because it costs a lot to sell toilet seats for a thousand dollars.) And this is one reason intranet software will continue to thrive, even though it is probably a bad idea. It’s simply more expensive. There is nothing you can do about this conundrum, so the best plan is to go for the smaller customers first. The rest will come in time.</p><p>大公司多支付的很大一部分钱，其实是向他们推销昂贵产品的成本。（如果国防部花 1000 美元买一个马桶圈，部分原因是把马桶圈卖到 1000 美元需要花很多钱。）这也是内部网软件会继续繁荣的原因之一，尽管它可能不是个好主意。只是因为它更贵而已。对于这个难题，你无能为力，所以最好的计划是先争取小客户。其余的客户迟早会来。</p><h3 id="Son-of-Server"><a href="#Son-of-Server" class="headerlink" title="Son of Server"></a><strong>Son of Server</strong></h3><p><strong>服务器之子</strong></p><p>Running software on the server is nothing new. In fact it’s the old model: mainframe applications are all server-based. If server-based software is such a good idea, why did it lose last time? Why did desktop computers eclipse mainframes?</p><p>在服务器上运行软件并不是什么新鲜事。事实上，这是一种旧模式：大型机应用程序都是基于服务器的。如果基于服务器的软件是个好主意，那它上次为什么会失败？为什么桌面电脑会超越大型机？</p><p>At first desktop computers didn’t look like much of a threat. The first users were all hackers– or hobbyists, as they were called then. They liked microcomputers because they were cheap. For the first time, you could have your own computer. The phrase “personal computer” is part of the language now, but when it was first used it had a deliberately audacious sound, like the phrase “personal satellite” would today.</p><p>起初，桌面电脑看起来并不构成太大威胁。第一批用户都是黑客 —— 或者当时被称为爱好者。他们喜欢微型计算机，因为它们便宜。第一次，人们可以拥有自己的电脑。“个人电脑” 这个词现在已经是日常用语了，但它刚出现时，听起来故意很大胆，就像现在说 “个人卫星” 一样。</p><p>Why did desktop computers take over? I think it was because they had better software. And I think the reason microcomputer software was better was that it could be written by small companies.</p><p>桌面电脑为什么会占据主导地位？我认为是因为它们有更好的软件。而微型计算机软件更好的原因，是小公司也能编写。</p><p>I don’t think many people realize how fragile and tentative startups are in the earliest stage. Many startups begin almost by accident– as a couple guys, either with day jobs or in school, writing a prototype of something that might, if it looks promising, turn into a company. At this larval stage, any significant obstacle will stop the startup dead in its tracks. Writing mainframe software required too much commitment up front. Development machines were expensive, and because the customers would be big companies, you’d need an impressive-looking sales force to sell it to them. Starting a startup to write mainframe software would be a much more serious undertaking than just hacking something together on your Apple II in the evenings. And so you didn’t get a lot of startups writing mainframe applications.</p><p>我觉得很多人没有意识到，初创公司在最早期是多么脆弱和不确定。许多初创公司几乎是偶然诞生的 —— 几个有正职或在上学的人，写一个原型，如果看起来有前景，可能就会变成一家公司。在这个 “幼虫” 阶段，任何重大障碍都会让初创公司戛然而止。编写大型机软件需要前期投入太多。开发机器很贵，而且由于客户是大公司，你需要一支看起来很厉害的销售团队来推销。创办一家开发大型机软件的初创公司，比晚上在 Apple II 上随便编点东西要严肃得多。因此，没有多少初创公司会去编写大型机应用程序。</p><p>The arrival of desktop computers inspired a lot of new software, because writing applications for them seemed an attainable goal to larval startups. Development was cheap, and the customers would be individual people that you could reach through computer stores or even by mail-order.</p><p>桌面电脑的出现催生了很多新软件，因为对处于 “幼虫” 阶段的初创公司来说，为桌面电脑编写应用程序似乎是一个可以实现的目标。开发成本低，客户是个人，你可以通过电脑商店甚至邮购接触到他们。</p><p>The application that pushed desktop computers out into the mainstream was VisiCalc, the first spreadsheet. It was written by two guys working in an attic, and yet did things no mainframe software could do. [11] VisiCalc was such an advance, in its time, that people bought Apple IIs just to run it. And this was the beginning of a trend: desktop computers won because startups wrote software for them.</p><p>将桌面电脑推向主流的应用程序是 VisiCalc，第一个电子表格软件。它是由两个在阁楼里工作的人编写的，但却能做大型机软件做不到的事情。[11] 在当时，VisiCalc 是一项巨大的进步，人们买 Apple II 电脑就是为了运行它。这开启了一个趋势：桌面电脑之所以成功，是因为初创公司为它们编写了软件。</p><p>It looks as if server-based software will be good this time around, because startups will write it. Computers are so cheap now that you can get started, as we did, using a desktop computer as a server. Inexpensive processors have eaten the workstation market (you rarely even hear the word now) and are most of the way through the server market; Yahoo’s servers, which deal with loads as high as any on the Internet, all have the same inexpensive Intel processors that you have in your desktop machine. And once you’ve written the software, all you need to sell it is a Web site. Nearly all our users came direct to our site through word of mouth and references in the press. [12]</p><p>这次，基于服务器的软件似乎会有好前景，因为初创公司会去编写它。现在电脑很便宜，你可以像我们一样，用一台桌面电脑作为服务器开始创业。廉价处理器已经占领了工作站市场（现在几乎听不到这个词了），并且在服务器市场也占据了大部分份额；雅虎的服务器处理着互联网上最高的负载，却都使用着和你桌面电脑一样的廉价英特尔处理器。而且一旦你编写好软件，只需一个网站就能销售它。我们几乎所有的用户都是通过口碑和媒体报道直接来到我们的网站的。[12]</p><p>Viaweb was a typical larval startup. We were terrified of starting a company, and for the first few months comforted ourselves by treating the whole thing as an experiment that we might call off at any moment. Fortunately, there were few obstacles except technical ones. While we were writing the software, our Web server was the same desktop machine we used for development, connected to the outside world by a dialup line. Our only expenses in that phase were food and rent.</p><p>Viaweb 是一个典型的 “幼虫” 阶段初创公司。我们害怕创办公司，在最初的几个月里，我们把整件事当作一个随时可以取消的实验来安慰自己。幸运的是，除了技术障碍外，几乎没有其他障碍。我们编写软件时，Web 服务器就是我们用于开发的那台桌面电脑，通过拨号线路连接到外部世界。那个阶段我们唯一的开支是食物和房租。</p><p>There is all the more reason for startups to write Web-based software now, because writing desktop software has become a lot less fun. If you want to write desktop software now you do it on Microsoft’s terms, calling their APIs and working around their buggy OS. And if you manage to write something that takes off, you may find that you were merely doing market research for Microsoft.</p><p>现在初创公司更有理由去编写基于 Web 的软件，因为编写桌面软件已经变得无趣多了。现在如果你想写桌面软件，就得按微软的规则来：调用他们的 API，还要绕过他们漏洞百出的操作系统。而且如果你成功写出了一款受欢迎的软件，你可能会发现自己只是在为微软做市场调研。</p><p>If a company wants to make a platform that startups will build on, they have to make it something that hackers themselves will want to use. That means it has to be inexpensive and well-designed. The Mac was popular with hackers when it first came out, and a lot of them wrote software for it. [13] You see this less with Windows, because hackers don’t use it. The kind of people who are good at writing software tend to be running Linux or FreeBSD now.</p><p>如果一家公司想打造一个让初创公司可以在此基础上开发的平台，就必须让黑客自己也想用它。这意味着它必须廉价且设计精良。Mac 刚推出时很受黑客欢迎，很多黑客为它编写软件。[13] 而 Windows 就很少有这种情况，因为黑客不用它。现在擅长写软件的人，往往运行的是 Linux 或 FreeBSD。</p><p>I don’t think we would have started a startup to write desktop software, because desktop software has to run on Windows, and before we could write software for Windows we’d have to use it. The Web let us do an end-run around Windows, and deliver software running on Unix direct to users through the browser. That is a liberating prospect, a lot like the arrival of PCs twenty-five years ago.</p><p>我认为我们不会创办一家开发桌面软件的初创公司，因为桌面软件必须在 Windows 上运行，而在为 Windows 编写软件之前，我们就得先使用它。Web 让我们绕开了 Windows，通过浏览器将运行在 Unix 上的软件直接交付给用户。这是一个令人解放的前景，很像 25 年前个人电脑的出现。</p><h3 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a><strong>Microsoft</strong></h3><p><strong>微软</strong></p><p>Back when desktop computers arrived, IBM was the giant that everyone was afraid of. It’s hard to imagine now, but I remember the feeling very well. Now the frightening giant is Microsoft, and I don’t think they are as blind to the threat facing them as IBM was. After all, Microsoft deliberately built their business in IBM’s blind spot.</p><p>桌面电脑出现时，IBM 是所有人都害怕的巨头。现在很难想象，但我清楚地记得那种感觉。现在，令人恐惧的巨头是微软，但我认为他们不像 IBM 那样对面临的威胁视而不见。毕竟，微软就是故意在 IBM 的盲点上建立了自己的业务。</p><p>I mentioned earlier that my mother doesn’t really need a desktop computer. Most users probably don’t. That’s a problem for Microsoft, and they know it. If applications run on remote servers, no one needs Windows. What will Microsoft do? Will they be able to use their control of the desktop to prevent, or constrain, this new generation of software?</p><p>我 earlier 提到过，我母亲其实不需要桌面电脑。大多数用户可能也不需要。这对微软来说是个问题，他们也知道这一点。如果应用程序在远程服务器上运行，就没人需要 Windows 了。微软会怎么做？他们能利用对桌面的控制来阻止或限制这新一代软件吗？</p><p>My guess is that Microsoft will develop some kind of server&#x2F;desktop hybrid, where the operating system works together with servers they control. At a minimum, files will be centrally available for users who want that. I don’t expect Microsoft to go all the way to the extreme of doing the computations on the server, with only a browser for a client, if they can avoid it. If you only need a browser for a client, you don’t need Microsoft on the client, and if Microsoft doesn’t control the client, they can’t push users towards their server-based applications.</p><p>我猜微软会开发某种服务器 &#x2F; 桌面混合体，让操作系统与他们控制的服务器协同工作。至少，文件会集中存储，供需要的用户使用。如果可以避免，我不认为微软会走到极端：所有计算都在服务器上进行，客户端只需要一个浏览器。如果客户端只需要浏览器，就不需要微软的客户端软件；如果微软不控制客户端，就无法推动用户使用他们的基于服务器的应用程序。</p><p>I think Microsoft will have a hard time keeping the genie in the bottle. There will be too many different types of clients for them to control them all. And if Microsoft’s applications only work with some clients, competitors will be able to trump them by offering applications that work from any client. [14]</p><p>我认为微软很难把精灵关在瓶子里。客户端类型太多，他们无法全部控制。如果微软的应用程序只能在某些客户端上运行，竞争对手就能通过提供适用于任何客户端的应用程序来击败他们。[14]</p><p>In a world of Web-based applications, there is no automatic place for Microsoft. They may succeed in making themselves a place, but I don’t think they’ll dominate this new world as they did the world of desktop applications.</p><p>在基于 Web 的应用程序的世界里，微软并没有天然的位置。他们可能会成功为自己找到一席之地，但我认为他们不会像主导桌面应用程序世界那样主导这个新世界。</p><p>It’s not so much that a competitor will trip them up as that they will trip over themselves. With the rise of Web-based software, they will be facing not just technical problems but their own wishful thinking. What they need to do is cannibalize their existing business, and I can’t see them facing that. The same single-mindedness that has brought them this far will now be working against them. IBM was in exactly the same situation, and they could not master it. IBM made a late and half-hearted entry into the microcomputer business because they were ambivalent about threatening their cash cow, mainframe computing. Microsoft will likewise be hampered by wanting to save the desktop. A cash cow can be a damned heavy monkey on your back.</p><p>与其说是竞争对手会绊倒他们，不如说是他们会自己绊倒自己。随着基于 Web 的软件的兴起，他们面临的不仅是技术问题，还有自己的一厢情愿。他们需要做的是蚕食自己现有的业务，但我看不到他们会这么做。那种让他们走到今天的专注，现在会反过来阻碍他们。IBM 曾处于完全相同的境地，却未能掌控局面。IBM 很晚才半心半意地进入微型计算机业务，因为他们对威胁到自己的摇钱树 —— 大型机计算 —— 感到矛盾。微软同样会因为想要保住桌面业务而受阻。摇钱树有时会变成背上一个该死的沉重包袱。</p><p>I’m not saying that no one will dominate server-based applications. Someone probably will eventually. But I think that there will be a good long period of cheerful chaos, just as there was in the early days of microcomputers. That was a good time for startups. Lots of small companies flourished, and did it by making cool things.</p><p>我不是说没人会主导基于服务器的应用程序。最终可能会有这样的公司。但我认为，将会有很长一段愉快的混乱时期，就像微型计算机早期那样。那是初创公司的好时代。很多小公司蓬勃发展，靠的是做出很酷的东西。</p><h3 id="Startups-but-More-So"><a href="#Startups-but-More-So" class="headerlink" title="Startups but More So"></a><strong>Startups but More So</strong></h3><p><strong>初创公司，但不止于此</strong></p><p>The classic startup is fast and informal, with few people and little money. Those few people work very hard, and technology magnifies the effect of the decisions they make. If they win, they win big.</p><p>典型的初创公司速度快、不拘形式，人少钱少。这少数几个人工作非常努力，而技术放大了他们决策的影响。如果成功，他们会大获全胜。</p><p>In a startup writing Web-based applications, everything you associate with startups is taken to an extreme. You can write and launch a product with even fewer people and even less money. You have to be even faster, and you can get away with being more informal. You can literally launch your product as three guys sitting in the living room of an apartment, and a server collocated at an ISP. We did.</p><p>在开发基于 Web 的应用程序的初创公司中，所有与初创公司相关的特点都被推向了极端。你可以用更少的人和更少的钱编写并推出产品。你必须更快，也可以更不拘形式。你真的可以靠三个坐在公寓客厅里的人，加上一台托管在 ISP 的服务器，就能推出产品。我们就是这么做的。</p><p>Over time the teams have gotten smaller, faster, and more informal. In 1960, software development meant a roomful of men with horn rimmed glasses and narrow black neckties, industriously writing ten lines of code a day on IBM coding forms. In 1980, it was a team of eight to ten people wearing jeans to the office and typing into vt100s. Now it’s a couple of guys sitting in a living room with laptops. (And jeans turn out not to be the last word in informality.)</p><p>随着时间的推移，团队变得更小、更快、更不拘形式。1960 年，软件开发意味着一屋子戴角质框眼镜、系黑色窄领带的人，每天在 IBM 编码表格上勤奋地写 10 行代码。1980 年，是 8 到 10 个人的团队，穿着牛仔裤上班，在 vt100 终端上打字。现在，是几个坐在客厅里、拿着笔记本电脑的人。（而且牛仔裤原来并不是不拘形式的极致。）</p><p>Startups are stressful, and this, unfortunately, is also taken to an extreme with Web-based applications. Many software companies, especially at the beginning, have periods where the developers slept under their desks and so on. The alarming thing about Web-based software is that there is nothing to prevent this becoming the default. The stories about sleeping under desks usually end: then at last we shipped it and we all went home and slept for a week. Web-based software never ships. You can work 16-hour days for as long as you want to. And because you can, and your competitors can, you tend to be forced to. You can, so you must. It’s Parkinson’s Law running in reverse.</p><p>初创公司压力很大，不幸的是，在基于 Web 的应用程序领域，这种压力也被推向了极端。许多软件公司，尤其是在初期，都有过开发人员睡在办公桌下之类的经历。基于 Web 的软件令人担忧的一点是，没有什么能阻止这种情况成为常态。那些睡在办公桌下的故事通常会有这样的结局：最后我们发布了产品，然后所有人回家睡了一个星期。但基于 Web 的软件永远不会 “发布”。你可以每天工作 16 小时，想多久就多久。而且因为你可以，你的竞争对手也可以，你往往就被迫这么做。你能做到，所以你必须做到。这是帕金森定律的反向运作。</p><p>The worst thing is not the hours but the responsibility. Programmers and system administrators traditionally each have their own separate worries. Programmers have to worry about bugs, and system administrators have to worry about infrastructure. Programmers may spend a long day up to their elbows in source code, but at some point they get to go home and forget about it. System administrators never quite leave the job behind, but when they do get paged at 4:00 AM, they don’t usually have to do anything very complicated. With Web-based applications, these two kinds of stress get combined. The programmers become system administrators, but without the sharply defined limits that ordinarily make the job bearable.</p><p>最糟糕的不是工作时长，而是责任。传统上，程序员和系统管理员各有各的烦恼。程序员要担心 bug，系统管理员要担心基础设施。程序员可能一整天都埋头于源代码，但到了某个时候，他们可以回家，把工作抛在脑后。系统管理员永远无法完全摆脱工作，但当他们在凌晨 4 点接到电话时，通常不需要做什么复杂的事情。而在基于 Web 的应用程序中，这两种压力结合在了一起。程序员变成了系统管理员，却没有了通常让这份工作可以忍受的明确界限。</p><p>At Viaweb we spent the first six months just writing software. We worked the usual long hours of an early startup. In a desktop software company, this would have been the part where we were working hard, but it felt like a vacation compared to the next phase, when we took users onto our server. The second biggest benefit of selling Viaweb to Yahoo (after the money) was to be able to dump ultimate responsibility for the whole thing onto the shoulders of a big company.</p><p>在 Viaweb，我们头六个月只做一件事：写软件。我们像早期初创公司一样，工作时长很长。在桌面软件公司，这可能已经是很辛苦的阶段了，但与下一阶段 —— 让用户使用我们的服务器 —— 相比，这感觉就像度假。把 Viaweb 卖给雅虎的第二大好处（仅次于钱），是能够把整件事的最终责任甩给一家大公司。</p><p>Desktop software forces users to become system administrators. Web-based software forces programmers to. There is less stress in total, but more for the programmers. That’s not necessarily bad news. If you’re a startup competing with a big company, it’s good news. [15] Web-based applications offer a straightforward way to outwork your competitors. No startup asks for more.</p><p>桌面软件迫使用户成为系统管理员。基于 Web 的软件迫使程序员成为系统管理员。总体压力可能更小，但程序员的压力更大。这未必是坏消息。如果你是一家与大公司竞争的初创公司，这就是好消息。[15] 基于 Web 的应用程序提供了一种直接的方式，可以比竞争对手更努力地工作。没有哪家初创公司会不想要这个优势。</p><h3 id="Just-Good-Enough"><a href="#Just-Good-Enough" class="headerlink" title="Just Good Enough"></a><strong>Just Good Enough</strong></h3><p><strong>过犹不及</strong></p><p>One thing that might deter you from writing Web-based applications is the lameness of Web pages as a UI. That is a problem, I admit. There were a few things we would have really liked to add to HTML and HTTP. What matters, though, is that Web pages are just good enough.</p><p>有一件事可能会阻碍你编写基于 Web 的应用程序，那就是网页作为用户界面（UI）的局限性。我承认这是个问题。我们确实想给 HTML 和 HTTP 添加一些功能。但重要的是，网页已经足够好了。</p><p>There is a parallel here with the first microcomputers. The processors in those machines weren’t actually intended to be the CPUs of computers. They were designed to be used in things like traffic lights. But guys like Ed Roberts, who designed the Altair, realized that they were just good enough. You could combine one of these chips with some memory (256 bytes in the first Altair), and front panel switches, and you’d have a working computer. Being able to have your own computer was so exciting that there were plenty of people who wanted to buy them, however limited.</p><p>这与早期的微型计算机有相似之处。那些机器里的处理器实际上并不是为计算机的 CPU 设计的。它们是为交通信号灯之类的东西设计的。但像设计 Altair 的埃德・罗伯茨这样的人意识到，这些处理器已经足够好了。你可以把这样的芯片与一些内存（第一台 Altair 有 256 字节）和前面板开关结合起来，就有了一台能工作的电脑。能拥有自己的电脑是一件非常令人兴奋的事，所以尽管功能有限，还是有很多人想买。</p><p>Web pages weren’t designed to be a UI for applications, but they’re just good enough. And for a significant number of users, software that you can use from any browser will be enough of a win in itself to outweigh any awkwardness in the UI. Maybe you can’t write the best-looking spreadsheet using HTML, but you can write a spreadsheet that several people can use simultaneously from different locations without special client software, or that can incorporate live data feeds, or that can page you when certain conditions are triggered. More importantly, you can write new kinds of applications that don’t even have names yet. VisiCalc was not merely a microcomputer version of a mainframe application, after all– it was a new type of application.</p><p>网页并不是为应用程序的用户界面设计的，但它们已经足够好了。而且对很多用户来说，能在任何浏览器上使用的软件本身就是一个足够大的优势，足以抵消用户界面上的任何不便。也许你不能用 HTML 写出最漂亮的电子表格，但你可以写出这样的电子表格：多个人可以在不同地点同时使用，不需要特殊的客户端软件；或者可以整合实时数据馈送；或者在特定条件触发时给你发提示。更重要的是，你可以编写全新类型的应用程序，它们甚至还没有名字。毕竟，VisiCalc 不仅仅是大型机应用程序的微型计算机版本 —— 它是一种新型应用程序。</p><p>Of course, server-based applications don’t have to be Web-based. You could have some other kind of client. But I’m pretty sure that’s a bad idea. It would be very convenient if you could assume that everyone would install your client– so convenient that you could easily convince yourself that they all would– but if they don’t, you’re hosed. Because Web-based software assumes nothing about the client, it will work anywhere the Web works. That’s a big advantage already, and the advantage will grow as new Web devices proliferate. Users will like you because your software just works, and your life will be easier because you won’t have to tweak it for every new client. [16]</p><p>当然，基于服务器的应用程序不一定非得是基于 Web 的。你可以有其他类型的客户端。但我很确定这是个坏主意。如果能假设每个人都会安装你的客户端，那会很方便 —— 方便到你很容易说服自己他们都会安装 —— 但如果他们不安装，你就完了。因为基于 Web 的软件对客户端没有任何假设，所以只要有 Web 的地方，它就能工作。这已经是一个很大的优势，而且随着新的 Web 设备激增，这个优势还会扩大。用户会喜欢你，因为你的软件 “就是能用”；你的日子也会更轻松，因为你不必为每个新客户端调整软件。[16]</p><p>I feel like I’ve watched the evolution of the Web as closely as anyone, and I can’t predict what’s going to happen with clients. Convergence is probably coming, but where? I can’t pick a winner. One thing I can predict is conflict between AOL and Microsoft. Whatever Microsoft’s .NET turns out to be, it will probably involve connecting the desktop to servers. Unless AOL fights back, they will either be pushed aside or turned into a pipe between Microsoft client and server software. If Microsoft and AOL get into a client war, the only thing sure to work on both will be browsing the Web, meaning Web-based applications will be the only kind that work everywhere.</p><p>我感觉自己像任何人一样密切关注着 Web 的发展，但我无法预测客户端会发生什么。融合可能正在到来，但会走向何方？我无法选出赢家。但有一件事我可以预测：美国在线（AOL）和微软之间会有冲突。无论微软的.NET 最终是什么样子，它很可能涉及将桌面与服务器连接起来。除非 AOL 反击，否则他们要么被排挤，要么变成微软客户端和服务器软件之间的管道。如果微软和 AOL 陷入客户端大战，唯一能在两者上都正常工作的就是 Web 浏览，这意味着基于 Web 的应用程序将是唯一能在所有地方运行的应用程序。</p><p>How will it all play out? I don’t know. And you don’t have to know if you bet on Web-based applications. No one can break that without breaking browsing. The Web may not be the only way to deliver software, but it’s one that works now and will continue to work for a long time. Web-based applications are cheap to develop, and easy for even the smallest startup to deliver. They’re a lot of work, and of a particularly stressful kind, but that only makes the odds better for startups.</p><p>这一切会如何发展？我不知道。但如果你押注于基于 Web 的应用程序，你就不必知道答案。没人能在不破坏浏览功能的情况下破坏它。Web 可能不是交付软件的唯一方式，但它是现在可行且将长期可行的方式。基于 Web 的应用程序开发成本低，即使是最小的初创公司也能轻松交付。它们需要大量工作，而且压力特别大，但这只会让初创公司的胜算更大。</p><h3 id="Why-Not"><a href="#Why-Not" class="headerlink" title="Why Not?"></a><strong>Why Not?</strong></h3><p><strong>为什么不呢？</strong></p><p>E. B. White was amused to learn from a farmer friend that many electrified fences don’t have any current running through them. The cows apparently learn to stay away from them, and after that you don’t need the current. “Rise up, cows!” he wrote, “Take your liberty while despots snore!”</p><p>E.B. 怀特从一个农民朋友那里得知，很多电围栏其实没有电流通过，这让他觉得很有趣。显然，奶牛们学会了远离围栏，之后就不需要电流了。“站起来，奶牛们！” 他写道，“趁暴君打鼾时，夺回你们的自由！”</p><p>If you’re a hacker who has thought of one day starting a startup, there are probably two things keeping you from doing it. One is that you don’t know anything about business. The other is that you’re afraid of competition. Neither of these fences have any current in them.</p><p>如果你是一个黑客，曾想过有一天创办一家初创公司，可能有两件事阻碍着你：一是你不懂商业，二是你害怕竞争。但这两道围栏都没有电流。</p><p>There are only two things you have to know about business: build something users love, and make more than you spend. If you get these two right, you’ll be ahead of most startups. You can figure out the rest as you go.</p><p>关于商业，你只需要知道两件事：做出用户喜欢的东西，以及收入大于支出。如果你做好了这两件事，你就已经领先于大多数初创公司了。其余的可以边做边学。</p><p>You may not at first make more than you spend, but as long as the gap is closing fast enough you’ll be ok. If you start out underfunded, it will at least encourage a habit of frugality. The less you spend, the easier it is to make more than you spend. Fortunately, it can be very cheap to launch a Web-based application. We launched on under $10,000, and it would be even cheaper today. We had to spend thousands on a server, and thousands more to get SSL. (The only company selling SSL software at the time was Netscape.) Now you can rent a much more powerful server, with SSL included, for less than we paid for bandwidth alone. You could launch a Web-based application now for less than the cost of a fancy office chair.</p><p>一开始，你可能收入不大于支出，但只要这个差距在快速缩小，你就没问题。如果创业初期资金不足，至少能养成节俭的习惯。你花得越少，就越容易实现收入大于支出。幸运的是，推出基于 Web 的应用程序成本很低。我们当时的启动资金不到 1 万美元，而现在成本会更低。我们当时花了几千美元买服务器，又花了几千美元买 SSL（当时唯一卖 SSL 软件的公司是网景）。现在，你可以租一台功能强大得多的服务器，还包含 SSL，费用比我们当时仅花在带宽上的钱还少。现在推出一个基于 Web 的应用程序，成本可能比一把高档办公椅还低。</p><p>As for building something users love, here are some general tips. Start by making something clean and simple that you would want to use yourself. Get a version 1.0 out fast, then continue to improve the software, listening closely to the users as you do. The customer is always right, but different customers are right about different things; the least sophisticated users show you what you need to simplify and clarify, and the most sophisticated tell you what features you need to add. The best thing software can be is easy, but the way to do this is to get the defaults right, not to limit users’ choices. Don’t get complacent if your competitors’ software is lame; the standard to compare your software to is what it could be, not what your current competitors happen to have. Use your software yourself, all the time. Viaweb was supposed to be an online store builder, but we used it to make our own site too. Don’t listen to marketing people or designers or product managers just because of their job titles. If they have good ideas, use them, but it’s up to you to decide; software has to be designed by hackers who understand design, not designers who know a little about software. If you can’t design software as well as implement it, don’t start a startup.</p><p>至于如何做出用户喜欢的东西，这里有一些通用建议。先做一个干净、简单、你自己也想用的东西。快速推出 1.0 版本，然后不断改进软件，同时密切倾听用户的意见。客户永远是对的，但不同的客户在不同的事情上是对的：最不懂行的用户会告诉你需要简化和澄清什么，最懂行的用户会告诉你需要添加什么功能。软件最好的状态是 “易用”，但做到这一点的方法是把默认设置做好，而不是限制用户的选择。如果竞争对手的软件很糟糕，不要自满；衡量你的软件的标准是它 “可能达到的样子”，而不是当前竞争对手的水平。自己要一直用自己的软件。Viaweb 本是一个在线商店搭建工具，但我们也用它来做自己的网站。不要仅仅因为头衔就听从营销人员、设计师或产品经理的话。如果他们有好主意，就采纳，但决定权在你；软件必须由懂设计的黑客来设计，而不是懂一点软件的设计师。如果你既不能设计软件，又不能实现软件，就不要创业。</p><p>Now let’s talk about competition. What you’re afraid of is not presumably groups of hackers like you, but actual companies, with offices and business plans and salesmen and so on, right? Well, they are more afraid of you than you are of them, and they’re right. It’s a lot easier for a couple of hackers to figure out how to rent office space or hire sales people than it is for a company of any size to get software written. I’ve been on both sides, and I know. When Viaweb was bought by Yahoo, I suddenly found myself working for a big company, and it was like trying to run through waist-deep water.</p><p>现在我们来谈谈竞争。你害怕的大概不是像你一样的黑客团队，而是有办公室、商业计划和销售人员的正规公司，对吧？但他们比你更害怕你，而且他们是对的。几个黑客弄明白如何租办公室或雇销售人员，要比任何规模的公司弄明白如何编写软件容易得多。我两边都经历过，我知道。当 Viaweb 被雅虎收购后，我突然发现自己在一家大公司工作，感觉就像在齐腰深的水里跑步。</p><p>I don’t mean to disparage Yahoo. They had some good hackers, and the top management were real butt-kickers. For a big company, they were exceptional. But they were still only about a tenth as productive as a small startup. No big company can do much better than that. What’s scary about Microsoft is that a company so big can develop software at all. They’re like a mountain that can walk.</p><p>我不是要贬低雅虎。他们有一些优秀的黑客，高层管理人员也很有魄力。作为一家大公司，他们已经很出色了。但他们的效率仍然只有小型初创公司的十分之一左右。没有哪家大公司能比这好多少。微软的可怕之处在于，这么大的公司竟然还能开发软件。他们就像一座会走路的山。</p><p>Don’t be intimidated. You can do as much that Microsoft can’t as they can do that you can’t. And no one can stop you. You don’t have to ask anyone’s permission to develop Web-based applications. You don’t have to do licensing deals, or get shelf space in retail stores, or grovel to have your application bundled with the OS. You can deliver software right to the browser, and no one can get between you and potential users without preventing them from browsing the Web.</p><p>不要被吓倒。你能做很多微软做不到的事，就像他们能做很多你做不到的事一样。而且没人能阻止你。开发基于 Web 的应用程序，你不需要征得任何人的许可。你不需要做许可交易，不需要在零售店争取货架空间，不需要卑躬屈膝地让你的应用程序与操作系统捆绑。你可以直接把软件交付到浏览器，没人能在不阻止用户浏览 Web 的情况下，挡在你和潜在用户之间。</p><p>You may not believe it, but I promise you, Microsoft is scared of you. The complacent middle managers may not be, but Bill is, because he was you once, back in 1975, the last time a new way of delivering software appeared.</p><p>你可能不信，但我向你保证，微软害怕你。自满的中层管理者可能不怕，但比尔（盖茨）怕，因为他曾经就是你，那是在 1975 年，上一次软件交付的新方式出现的时候。</p><p>Notes</p><p>[1] Realizing that much of the money is in the services, companies building lightweight clients have usually tried to combine the hardware with an online service. This approach has not worked well, partly because you need two different kinds of companies to build consumer electronics and to run an online service, and partly because users hate the idea. Giving away the razor and making money on the blades may work for Gillette, but a razor is much smaller commitment than a Web terminal. Cell phone handset makers are satisfied to sell hardware without trying to capture the service revenue as well. That should probably be the model for Internet clients too. If someone just sold a nice-looking little box with a Web browser that you could use to connect through any ISP, every technophobe in the country would buy one.</p><p>[1] 意识到大部分收益来自服务后，制造轻型客户端的公司通常试图将硬件与在线服务结合。但这种方式效果不佳，部分原因是制造消费电子产品和运营在线服务需要两类不同的公司，另一部分原因是用户讨厌这种模式。“赠送剃须刀，靠刀片赚钱” 对吉列可能有效，但剃须刀比网络终端的投入小得多。手机制造商满足于只卖硬件，不试图抢占服务收入 —— 这或许也该是互联网客户端的模式。如果有人推出一款外观漂亮、自带浏览器、可连接任何 ISP 的小盒子，全国的技术恐惧症患者都会买。</p><p>[2] Security always depends more on not screwing up than any design decision, but the nature of server-based software will make developers pay more attention to not screwing up. Compromising a server could cause such damage that ASPs (that want to stay in business) are likely to be careful about security.</p><p>[2] 安全更多取决于 “不犯错” 而非设计决策，但服务器软件的特性会让开发者更注重避免出错。入侵服务器可能造成巨大损失，因此（想继续经营的）ASP 很可能会重视安全。</p><p>[3] In 1995, when we started Viaweb, Java applets were supposed to be the technology everyone was going to use to develop server-based applications. Applets seemed to us an old-fashioned idea. Download programs to run on the client? Simpler just to go all the way and run the programs on the server. We wasted little time on applets, but countless other startups must have been lured into this tar pit. Few can have escaped alive, or Microsoft could not have gotten away with dropping Java in the most recent version of Explorer.</p><p>[3] 1995 年我们创办 Viaweb 时，Java 小程序本应是开发服务器应用的主流技术。但在我们看来，小程序是过时的想法 —— 下载程序到客户端运行？不如直接让程序在服务器上运行。我们没在小程序上浪费时间，但无数初创公司肯定被这个 “焦油坑” 诱惑，很少能全身而退，否则微软也不敢在最新版 IE 中弃用 Java。</p><p>[4] This point is due to Trevor Blackwell, who adds “the cost of writing software goes up more than linearly with its size. Perhaps this is mainly due to fixing old bugs, and the cost can be more linear if all bugs are found quickly.”</p><p>[4] 这一点来自特雷弗・布莱克韦尔，他补充道：“软件开发成本的增长远超其规模的线性增长。这可能主要源于修复旧 bug，而如果所有 bug 都能快速发现，成本可能更接近线性。”</p><p>[5] The hardest kind of bug to find may be a variant of compound bug where one bug happens to compensate for another. When you fix one bug, the other becomes visible. But it will seem as if the fix is at fault, since that was the last thing you changed.</p><p>[5] 最难找的 bug 可能是复合 bug 的变种：一个 bug 恰好抵消了另一个。修复其中一个后，另一个就会暴露，但看起来像是修复出了问题 —— 因为这是你最后修改的部分。</p><p>[6] Within Viaweb we once had a contest to describe the worst thing about our software. Two customer support people tied for first prize with entries I still shiver to recall. We fixed both problems immediately.</p><p>[6] 在 Viaweb 内部，我们曾举办过一场 “描述软件最烂之处” 的比赛。两位客服人员并列第一，他们的答案至今让我不寒而栗。我们立即修复了这两个问题。</p><p>[7] Robert Morris wrote the ordering system, which shoppers used to place orders. Trevor Blackwell wrote the image generator and the manager, which merchants used to retrieve orders, view statistics, and configure domain names etc. I wrote the editor, which merchants used to build their sites. The ordering system and image generator were written in C and C++, the manager mostly in Perl, and the editor in Lisp.</p><p>[7] 罗伯特・莫里斯编写了订单系统（购物者用于下单）；特雷弗・布莱克韦尔编写了图像生成器和管理工具（商家用于查看订单、统计数据、配置域名等）；我编写了编辑器（商家用于搭建网站）。订单系统和图像生成器用 C 和 C++ 编写，管理工具主要用 Perl，编辑器用 Lisp。</p><p>[8] Price discrimination is so pervasive (how often have you heard a retailer claim that their buying power meant lower prices for you?) that I was surprised to find it was outlawed in the U.S. by the Robinson-Patman Act of 1936. This law does not appear to be vigorously enforced.</p><p>[8] 价格歧视非常普遍（你多久会听到一次零售商宣称 “我们的采购能力能为你带来更低价格”？），但我惊讶地发现，美国 1936 年的《罗宾逊 - 帕特曼法案》将其定为非法 —— 不过这项法律似乎并未被严格执行。</p><p>[9] In No Logo, Naomi Klein says that clothing brands favored by “urban youth” do not try too hard to prevent shoplifting because in their target market the shoplifters are also the fashion leaders.</p><p>[9] 娜奥米・克莱因在《拒绝品牌》中提到，受 “城市青年” 青睐的服装品牌不会竭力阻止偷窃，因为在目标市场中，偷窃者也是时尚引领者。</p><p>[10] Companies often wonder what to outsource and what not to. One possible answer: outsource any job that’s not directly exposed to competitive pressure, because outsourcing it will thereby expose it to competitive pressure.</p><p>[10] 公司常纠结于哪些业务该外包、哪些不该。一个可能的答案是：外包所有不直接面临竞争压力的工作，因为外包能让它暴露在竞争压力下。</p><p>[11] The two guys were Dan Bricklin and Bob Frankston. Dan wrote a prototype in Basic in a couple days, then over the course of the next year they worked together (mostly at night) to make a more powerful version written in 6502 machine language. Dan was at Harvard Business School at the time and Bob nominally had a day job writing software. “There was no great risk in doing a business,” Bob wrote, “If it failed it failed. No big deal.”</p><p>[11] 那两个人是丹・布里克林和鲍勃・弗兰克斯坦。丹用 Basic 在几天内写出原型，随后一年里，他们（主要在夜间）合作开发了更强大的版本，用 6502 机器语言编写。当时丹在哈佛商学院，鲍勃名义上有份编写软件的正职。“创业没什么大风险，” 鲍勃写道，“失败了就失败了，没什么大不了。”</p><p>[12] It’s not quite as easy as I make it sound. It took a painfully long time for word of mouth to get going, and we did not start to get a lot of press coverage until we hired a PR firm (admittedly the best in the business) for $16,000 per month. However, it was true that the only significant channel was our own Web site.</p><p>[12] 事情没我说的那么容易。口碑传播花了长得令人痛苦的时间，直到我们以每月 1.6 万美元聘请了一家公关公司（诚然是业内最好的），才开始获得大量媒体报道。但确实，唯一重要的渠道是我们自己的网站。</p><p>[13] If the Mac was so great, why did it lose? Cost, again. Microsoft concentrated on the software business, and unleashed a swarm of cheap component suppliers on Apple hardware. It did not help, either, that suits took over during a critical period.</p><p>[13] 既然 Mac 这么好，为什么会失败？还是因为成本。微软专注于软件业务，放任大量廉价组件供应商冲击苹果硬件。关键时期被管理人员接管，也没起到帮助。</p><p>[14] One thing that would help Web-based applications, and help keep the next generation of software from being overshadowed by Microsoft, would be a good open-source browser. Mozilla is open-source but seems to have suffered from having been corporate software for so long. A small, fast browser that was actively maintained would be a great thing in itself, and would probably also encourage companies to build little Web appliances.</p><p>[14] 一款优秀的开源浏览器既能助力 Web 应用，又能防止下一代软件被微软压制。Mozilla 是开源的，但似乎因长期作为企业软件而受损。一款小型、快速、持续维护的浏览器本身就是好事，或许还能鼓励企业制造小型网络设备。</p><p>Among other things, a proper open-source browser would cause HTTP and HTML to continue to evolve (as e.g. Perl has). It would help Web-based applications greatly to be able to distinguish between selecting a link and following it; all you’d need to do this would be a trivial enhancement of HTTP, to allow multiple urls in a request. Cascading menus would also be good.</p><p>此外，合适的开源浏览器会推动 HTTP 和 HTML 持续进化（如 Perl）。若能区分 “选中链接” 和 “跟随链接”，对 Web 应用会大有帮助 —— 只需对 HTTP 做个小改进，允许请求中包含多个 URL。级联菜单也会很有用。</p><p>If you want to change the world, write a new Mosaic. Think it’s too late? In 1998 a lot of people thought it was too late to launch a new search engine, but Google proved them wrong. There is always room for something new if the current options suck enough. Make sure it works on all the free OSes first– new things start with their users.</p><p>想改变世界？那就写一个新的 Mosaic。觉得太晚了？1998 年很多人认为推出新搜索引擎太晚，但谷歌证明他们错了。如果现有选项足够糟糕，新事物总有空间。先确保它能在所有免费操作系统上运行 —— 新事物从用户开始。</p><p>[15] Trevor Blackwell, who probably knows more about this from personal experience than anyone, writes:</p><p>[15] 特雷弗・布莱克韦尔的个人经历或许让他对此理解最深，他写道：</p><p>“I would go farther in saying that because server-based software is so hard on the programmers, it causes a fundamental economic shift away from large companies. It requires the kind of intensity and dedication from programmers that they will only be willing to provide when it’s their own company. Software companies can hire skilled people to work in a not-too-demanding environment, and can hire unskilled people to endure hardships, but they can’t hire highly skilled people to bust their asses. Since capital is no longer needed, big companies have little to bring to the table.”</p><p>“我想进一步说，由于服务器软件对程序员要求极高，它会引发根本的经济变革，远离大公司。它需要程序员付出的专注和投入，只有在是自己的公司时，他们才愿意提供。软件公司能雇到技能型人才在不苛刻的环境中工作，也能雇到非技能型人才忍受艰苦，但雇不到高技能人才拼命干。既然不再需要资本，大公司就没什么可贡献的了。”</p><p>[16] In the original version of this essay, I advised avoiding Javascript. That was a good plan in 2001, but Javascript now works.</p><p>[16] 本文初稿中，我建议避免使用 Javascript。2001 年这是个好建议，但现在 Javascript 已经好用了。</p><p>Thanks to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, Ken Anderson, and Dan Giffin for reading drafts of this paper; to Dan Bricklin and Bob Frankston for information about VisiCalc; and again to Ken Anderson for inviting me to speak at BBN.</p><p>感谢萨拉・哈林、特雷弗・布莱克韦尔、罗伯特・莫里斯、埃里克・雷蒙德、肯・安德森和丹・吉芬阅读本文草稿；感谢丹・布里克林和鲍勃・弗兰克斯坦提供关于 VisiCalc 的信息；再次感谢肯・安德森邀请我在 BBN 演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程语言的流行之道</title>
    <link href="/2025/08/13/being-popular/"/>
    <url>/2025/08/13/being-popular/</url>
    
    <content type="html"><![CDATA[<h2 id="Being-Popular"><a href="#Being-Popular" class="headerlink" title="Being Popular"></a>Being Popular</h2><p>May 2001</p><p>(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)</p><p>（本文最初是作为一种新语言的 “商业计划” 撰写的。因此，它忽略了（或想当然地认为）优秀编程语言最重要的特性：强大的抽象能力。）</p><p>A friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don’t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.</p><p>我有个朋友曾跟一位著名的操作系统专家说，他想设计一种真正优秀的编程语言。专家告诉他这是浪费时间 —— 编程语言的流行与否并不取决于其本身的优劣，所以无论他的语言多好，都不会有人用。至少，专家自己设计的语言就遭遇了这种命运。</p><p>What does make a language popular? Do popular languages deserve their popularity? Is it worth trying to define a good programming language? How would you do it?</p><p>那么，究竟是什么让一种语言流行起来？流行的语言真的配得上它们的热度吗？费心设计一种好语言值得吗？又该如何设计呢？</p><p>I think the answers to these questions can be found by looking at hackers, and learning what they want. Programming languages are for hackers, and a programming language is good as a programming language (rather than, say, an exercise in denotational semantics or compiler design) if and only if hackers like it.</p><p>我认为，答案可以从 “黑客”（优秀程序员）身上找到 —— 关键是弄清楚他们想要什么。编程语言是为黑客服务的，一种编程语言之所以优秀（而非仅仅是符号语义或编译器设计的练习），<strong>当且仅当黑客喜欢它</strong>。</p><h3 id="1-The-Mechanics-of-Popularity"><a href="#1-The-Mechanics-of-Popularity" class="headerlink" title="1 The Mechanics of Popularity"></a><strong>1 The Mechanics of Popularity</strong></h3><p><strong>1 流行的机制</strong></p><p>It’s true, certainly, that most people don’t choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. And yet I think the effect of such external factors on the popularity of programming languages is not as great as it’s sometimes thought to be. I think a bigger problem is that a hacker’s idea of a good programming language is not the same as most language designers’.</p><p>诚然，大多数人选择编程语言并非单纯看其本身的优点。多数程序员是听别人的指令选择语言的。但我认为，这种外部因素对编程语言流行度的影响，并没有人们想象中那么大。更大的问题在于：黑客对 “好语言” 的定义，与多数语言设计者的理解根本不同。</p><p>Between the two, the hacker’s opinion is the one that matters. Programming languages are not theorems. They’re tools, designed for people, and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. If a shoe pinches when you put it on, it’s a bad shoe, however elegant it may be as a piece of sculpture.</p><p>两者中，黑客的观点才是关键。编程语言不是定理，而是为人设计的工具 —— 它们必须适配人类的优缺点，就像鞋子必须适配人类的脚一样。如果一只鞋穿上就夹脚，哪怕它作为雕塑再精致，也是一只烂鞋</p><p>It may be that the majority of programmers can’t tell a good language from a bad one. But that’s no different with any other tool. It doesn’t mean that it’s a waste of time to try designing a good language. Expert hackers can tell a good language when they see one, and they’ll use it. Expert hackers are a tiny minority, admittedly, but that tiny minority write all the good software, and their influence is such that the rest of the programmers will tend to use whatever language they use. Often, indeed, it is not merely influence but command: often the expert hackers are the very people who, as their bosses or faculty advisors, tell the other programmers what language to use.</p><p>或许多数程序员分不清语言的好坏，但这在任何工具上都一样。这并不意味着设计好语言是浪费时间。顶尖黑客一眼就能识别好语言，而且会主动使用它。诚然，顶尖黑客只是极少数，但正是这极少数人写出了所有优秀软件，他们的影响力足以让其他程序员跟风使用他们选择的语言。事实上，这往往不止是影响力，更是 “命令”：顶尖黑客常常是老板或导师，直接告诉其他程序员该用什么语言。</p><p>The opinion of expert hackers is not the only force that determines the relative popularity of programming languages — legacy software (Cobol) and hype (Ada, Java) also play a role — but I think it is the most powerful force over the long term. Given an initial critical mass and enough time, a programming language probably becomes about as popular as it deserves to be. And popularity further separates good languages from bad ones, because feedback from real live users always leads to improvements. Look at how much any popular language has changed during its life. Perl and Fortran are extreme cases, but even Lisp has changed a lot. Lisp 1.5 didn’t have macros, for example; these evolved later, after hackers at MIT had spent a couple years using Lisp to write real programs. [1]</p><p>顶尖黑客的看法并非决定编程语言流行度的唯一因素 —— 遗留软件（如 Cobol）和炒作（如 Ada、Java）也有影响 —— 但长期来看，它是最强大的力量。只要有初始的 “临界规模” 和足够的时间，一种编程语言的流行度大致会与其 “应得的” 相匹配。而流行度会进一步拉开好语言与坏语言的差距：真实用户的反馈总能推动语言改进。看看任何流行语言在其生命周期中的变化就知道了。Perl 和 Fortran 是极端例子，但即便是 Lisp 也变了很多 —— 比如 Lisp 1.5 原本没有宏，是麻省理工的黑客用它写了几年实际程序后，才逐步演化出来的。[1]</p><p>So whether or not a language has to be good to be popular, I think a language has to be popular to be good. And it has to stay popular to stay good. The state of the art in programming languages doesn’t stand still. And yet the Lisps we have today are still pretty much what they had at MIT in the mid-1980s, because that’s the last time Lisp had a sufficiently large and demanding user base.</p><p>所以，无论 “优秀” 是不是 “流行” 的前提，我认为 “流行” 是 “优秀” 的前提 —— 而且语言必须保持流行才能保持优秀。编程语言的技术水平不会停滞不前。但如今的 Lisp 几乎还停留在 20 世纪 80 年代中期麻省理工的水平，因为那是 Lisp 最后一次拥有足够庞大且高要求的用户群体。</p><p>Of course, hackers have to know about a language before they can use it. How are they to hear? From other hackers. But there has to be some initial group of hackers using the language for others even to hear about it. I wonder how large this group has to be; how many users make a critical mass? Off the top of my head, I’d say twenty. If a language had twenty separate users, meaning twenty users who decided on their own to use it, I’d consider it to be real.</p><p>当然，黑客得先知道一种语言，才可能用它。他们怎么知道呢？从其他黑客那里。但必须有一群初始用户先用起来，别人才可能听说它。我好奇这个 “临界规模” 需要多大 —— 多少用户才算足够？凭直觉说，20 个吧。如果一种语言有 20 个独立用户（即 20 个主动选择使用它的人），我就认为它 “站稳脚跟” 了。</p><p>Getting there can’t be easy. I would not be surprised if it is harder to get from zero to twenty than from twenty to a thousand. The best way to get those initial twenty users is probably to use a trojan horse: to give people an application they want, which happens to be written in the new language.</p><p>达到这个数字并不容易。从 0 到 20，可能比从 20 到 1000 更难。获取初始 20 个用户的最佳方式或许是 “特洛伊木马” 策略：给人们一个他们想要的应用，而这个应用恰好是用新语言写的。</p><h3 id="2-External-Factors"><a href="#2-External-Factors" class="headerlink" title="2 External Factors"></a><strong>2 External Factors</strong></h3><p><strong>2 外部因素</strong></p><p>Let’s start by acknowledging one external factor that does affect the popularity of a programming language. To become popular, a programming language has to be the scripting language of a popular system. Fortran and Cobol were the scripting languages of early IBM mainframes. C was the scripting language of Unix, and so, later, was Perl. Tcl is the scripting language of Tk. Java and Javascript are intended to be the scripting languages of web browsers.]</p><p>首先要承认，有一个外部因素确实影响编程语言的流行度：要流行，它必须是某个流行系统的 “脚本语言”。Fortran 和 Cobol 是早期 IBM 大型机的脚本语言；C（后来还有 Perl）是 Unix 的脚本语言；Tcl 是 Tk 的脚本语言；Java 和 Javascript 则是为网页浏览器设计的脚本语言。</p><p>Lisp is not a massively popular language because it is not the scripting language of a massively popular system. What popularity it retains dates back to the 1960s and 1970s, when it was the scripting language of MIT. A lot of the great programmers of the day were associated with MIT at some point. And in the early 1970s, before C, MIT’s dialect of Lisp, called MacLisp, was one of the only programming languages a serious hacker would want to use.</p><p>Lisp 之所以不火，就是因为它不是某个主流系统的脚本语言。它仅存的热度可以追溯到 20 世纪 60-70 年代 —— 当时它是麻省理工的 “脚本语言”。那个年代许多顶尖程序员都与麻省理工有关联，而在 20 世纪 70 年代初 C 语言出现之前，麻省理工的 Lisp 方言（MacLisp）是顶尖黑客唯一愿意用的语言之一。</p><p>Today Lisp is the scripting language of two moderately popular systems, Emacs and Autocad, and for that reason I suspect that most of the Lisp programming done today is done in Emacs Lisp or AutoLisp.</p><p>如今，Lisp 是两个中等流行系统（Emacs 和 Autocad）的脚本语言，因此我猜测，现在多数 Lisp 编程都是用 Emacs Lisp 或 AutoLisp 完成的。</p><p>Programming languages don’t exist in isolation. To hack is a transitive verb — hackers are usually hacking something — and in practice languages are judged relative to whatever they’re used to hack. So if you want to design a popular language, you either have to supply more than a language, or you have to design your language to replace the scripting language of some existing system.</p><p>编程语言并非孤立存在。“编程” 是个及物动词 —— 黑客通常在 “编” 某个东西 —— 而实际上，语言的评价总是与其所编写的对象相关。所以，若想设计一种流行语言，要么你得提供的不只是语言本身，要么就得让它能替代某个现有系统的脚本语言。</p><p>Common Lisp is unpopular partly because it’s an orphan. It did originally come with a system to hack: the Lisp Machine. But Lisp Machines (along with parallel computers) were steamrollered by the increasing power of general purpose processors in the 1980s. Common Lisp might have remained popular if it had been a good scripting language for Unix. It is, alas, an atrociously bad one.</p><p>Common Lisp 之所以冷门，部分原因是它 “无家可归”。它最初确实有对应的系统：Lisp 机器。但 20 世纪 80 年代，随着通用处理器性能飙升，Lisp 机器（和并行计算机）被碾压了。如果 Common Lisp 能成为 Unix 的优秀脚本语言，或许还能保持流行 —— 可惜，它在这方面烂得离谱。</p><p>One way to describe this situation is to say that a language isn’t judged on its own merits. Another view is that a programming language really isn’t a programming language unless it’s also the scripting language of something. This only seems unfair if it comes as a surprise. I think it’s no more unfair than expecting a programming language to have, say, an implementation. It’s just part of what a programming language is.</p><p>这种情况可以理解为：语言的评价并非基于自身优点。但换个角度看，一种编程语言若不能成为某个系统的脚本语言，或许就不算真正的编程语言。这听起来不公平，但若接受它，就会发现这并不比 “编程语言需要实现” 更苛刻 —— 这只是编程语言的固有属性之一。</p><p>A programming language does need a good implementation, of course, and this must be free. Companies will pay for software, but individual hackers won’t, and it’s the hackers you need to attract.</p><p>当然，编程语言需要优秀的实现，而且必须免费。公司会为软件付费，但个体黑客不会 —— 而你需要吸引的正是黑客。</p><p>A language also needs to have a book about it. The book should be thin, well-written, and full of good examples. K&amp;R is the ideal here. At the moment I’d almost say that a language has to have a book published by O’Reilly. That’s becoming the test of mattering to hackers.</p><p>语言还需要一本相关的书。这本书得薄、写得好、充满好例子。《C 程序设计语言》（K&amp;R）就是典范。如今我甚至想说，一种语言必须有 O’Reilly 出版的书 —— 这几乎成了 “被黑客认可” 的试金石。</p><p>There should be online documentation as well. In fact, the book can start as online documentation. But I don’t think that physical books are outmoded yet. Their format is convenient, and the de facto censorship imposed by publishers is a useful if imperfect filter. Bookstores are one of the most important places for learning about new languages.</p><p>在线文档也得有。事实上，书籍最初可以是在线文档，但实体书还没过时：它们的格式方便，出版商的 “隐性审查” 虽然不完美，却是个有用的筛选机制。书店是了解新语言的重要场所之一。</p><h3 id="3-Brevity"><a href="#3-Brevity" class="headerlink" title="3 Brevity"></a><strong>3 Brevity</strong></h3><p><strong>3 简洁性</strong></p><p>Given that you can supply the three things any language needs — a free implementation, a book, and something to hack — how do you make a language that hackers will like?</p><p>假设你已经提供了语言所需的三样东西 —— 免费实现、书籍、可编写的对象 —— 那么如何让黑客喜欢它？</p><p>One thing hackers like is brevity. Hackers are lazy, in the same way that mathematicians and modernist architects are lazy: they hate anything extraneous. It would not be far from the truth to say that a hacker about to write a program decides what language to use, at least subconsciously, based on the total number of characters he’ll have to type. If this isn’t precisely how hackers think, a language designer would do well to act as if it were.</p><p>黑客喜欢的一点是<strong>简洁</strong>。黑客的 “懒”，就像数学家和现代主义建筑师的 “懒”：他们讨厌任何多余的东西。说 “黑客选择语言时（至少潜意识里）会算自己要敲多少个字符”，也不算太夸张。就算黑客不是真这么想，语言设计者按这个逻辑做也没错。</p><p>It is a mistake to try to baby the user with long-winded expressions that are meant to resemble English. Cobol is notorious for this flaw. A hacker would consider being asked to write</p><p>add x to y giving z</p><p>instead of</p><p>z &#x3D; x+y</p><p>as something between an insult to his intelligence and a sin against God.</p><p>试图用冗长的、类似英语的表达 “迁就” 用户，是个错误。Cobol 就因这个缺陷臭名昭著。黑客会觉得，让他们写<code>add x to y giving z</code>而非<code>z = x+y</code>，简直是对智商的侮辱，甚至是对上帝的亵渎。</p><p>It has sometimes been said that Lisp should use first and rest instead of car and cdr, because it would make programs easier to read. Maybe for the first couple hours. But a hacker can learn quickly enough that car means the first element of a list and cdr means the rest. Using first and rest means 50% more typing. And they are also different lengths, meaning that the arguments won’t line up when they’re called, as car and cdr often are, in successive lines. I’ve found that it matters a lot how code lines up on the page. I can barely read Lisp code when it is set in a variable-width font, and friends say this is true for other languages too.</p><p>有人说 Lisp 应该用<code>first</code>和<code>rest</code>替代<code>car</code>和<code>cdr</code>，这样程序更易读。或许前几个小时是这样，但黑客很快就会记住<code>car</code>指列表的第一个元素、<code>cdr</code>指剩余部分。用<code>first</code>和<code>rest</code>意味着多敲 50% 的字符，而且两者长度不同 —— 当它们在连续行中出现时，参数都对不齐。我发现代码在页面上的排版非常重要：用变宽字体显示的 Lisp 代码，我几乎读不下去，朋友说其他语言也是如此。</p><p>Brevity is one place where strongly typed languages lose. All other things being equal, no one wants to begin a program with a bunch of declarations. Anything that can be implicit, should be.</p><p>强类型语言在简洁性上吃亏。其他条件相同时，没人想在程序开头写一堆声明。任何能隐含的信息，都该隐含。</p><p>The individual tokens should be short as well. Perl and Common Lisp occupy opposite poles on this question. Perl programs can be almost cryptically dense, while the names of built-in Common Lisp operators are comically long. The designers of Common Lisp probably expected users to have text editors that would type these long names for them. But the cost of a long name is not just the cost of typing it. There is also the cost of reading it, and the cost of the space it takes up on your screen.</p><p>单个符号也该短。Perl 和 Common Lisp 在这方面是两个极端：Perl 程序密得像密码，而 Common Lisp 的内置操作符名字长得可笑。Common Lisp 的设计者可能以为用户会用文本编辑器自动输入这些长名字，但长名字的成本不止是输入 —— 还有阅读成本和屏幕空间占用成本。</p><h3 id="4-Hackability"><a href="#4-Hackability" class="headerlink" title="4 Hackability"></a><strong>4 Hackability</strong></h3><p><strong>4 可操作性</strong></p><p>There is one thing more important than brevity to a hacker: being able to do what you want. In the history of programming languages a surprising amount of effort has gone into preventing programmers from doing things considered to be improper. This is a dangerously presumptuous plan. How can the language designer know what the programmer is going to need to do? I think language designers would do better to consider their target user to be a genius who will need to do things they never anticipated, rather than a bumbler who needs to be protected from himself. The bumbler will shoot himself in the foot anyway. You may save him from referring to variables in another package, but you can’t save him from writing a badly designed program to solve the wrong problem, and taking forever to do it.</p><p>对黑客来说，有一样东西比简洁更重要：<strong>能做自己想做的事</strong>。编程语言史上，太多精力浪费在 “阻止程序员做被认为不恰当的事” 上。这是个危险的自负计划 —— 语言设计者怎么可能知道程序员需要做什么？我认为，设计者更该假设目标用户是 “需要做你从未预料之事的天才”，而非 “需要被保护的笨蛋”。笨蛋总会搬起石头砸自己的脚：你或许能阻止他引用其他包的变量，却阻止不了他用糟糕的设计解决错误的问题，还浪费大量时间。</p><p>Good programmers often want to do dangerous and unsavory things. By unsavory I mean things that go behind whatever semantic facade the language is trying to present: getting hold of the internal representation of some high-level abstraction, for example. Hackers like to hack, and hacking means getting inside things and second guessing the original designer.</p><p>优秀程序员常常想做 “危险” 或 “不体面” 的事。“不体面” 指绕过语言试图呈现的语义伪装 —— 比如获取某个高层抽象的内部表示。黑客就喜欢 “折腾”，而折腾意味着深入内部、质疑最初的设计。</p><p>Let yourself be second guessed. When you make any tool, people use it in ways you didn’t intend, and this is especially true of a highly articulated tool like a programming language. Many a hacker will want to tweak your semantic model in a way that you never imagined. I say, let them; give the programmer access to as much internal stuff as you can without endangering runtime systems like the garbage collector.</p><p>允许他们质疑你。任何工具都会被用在设计者未预料的地方，编程语言这种高度灵活的工具更是如此。许多黑客会想以你从未想过的方式调整你的语义模型 —— 我说，让他们做吧。在不危及垃圾回收等运行时系统的前提下，尽可能让程序员接触内部机制。</p><p>In Common Lisp I have often wanted to iterate through the fields of a struct — to comb out references to a deleted object, for example, or find fields that are uninitialized. I know the structs are just vectors underneath. And yet I can’t write a general purpose function that I can call on any struct. I can only access the fields by name, because that’s what a struct is supposed to mean.</p><p>在 Common Lisp 中，我常想遍历结构体的字段 —— 比如梳理已删除对象的引用，或查找未初始化的字段。我知道结构体本质上是向量，但就是写不出一个能作用于任何结构体的通用函数。我只能通过字段名访问，因为 “结构体就该是这样”。</p><p>A hacker may only want to subvert the intended model of things once or twice in a big program. But what a difference it makes to be able to. And it may be more than a question of just solving a problem. There is a kind of pleasure here too. Hackers share the surgeon’s secret pleasure in poking about in gross innards, the teenager’s secret pleasure in popping zits. [2] For boys, at least, certain kinds of horrors are fascinating. Maxim magazine publishes an annual volume of photographs, containing a mix of pin-ups and grisly accidents. They know their audience.</p><p>黑客可能在一个大程序中只需要颠覆一次语义模型，但 “能做到” 的意义重大。这甚至不止是解决问题 —— 其中还有一种乐趣。黑客和外科医生一样，喜欢在 “ gross innards” 里摸索；和青少年一样，喜欢挤痘痘。[2] 至少对男性来说，某些 “恶心” 的东西很有吸引力。《Maxim》杂志每年会出一本照片集，混合了美女和恐怖事故 —— 他们太懂受众了。</p><p>Historically, Lisp has been good at letting hackers have their way. The political correctness of Common Lisp is an aberration. Early Lisps let you get your hands on everything. A good deal of that spirit is, fortunately, preserved in macros. What a wonderful thing, to be able to make arbitrary transformations on the source code.</p><p>历史上，Lisp 很擅长让黑客为所欲为。Common Lisp 的 “政治正确” 是个例外。早期 Lisp 让你能接触一切，幸运的是，这种精神在宏中保留了不少。能对源代码做任意转换，多美妙啊。</p><p>Classic macros are a real hacker’s tool — simple, powerful, and dangerous. It’s so easy to understand what they do: you call a function on the macro’s arguments, and whatever it returns gets inserted in place of the macro call. Hygienic macros embody the opposite principle. They try to protect you from understanding what they’re doing. I have never heard hygienic macros explained in one sentence. And they are a classic example of the dangers of deciding what programmers are allowed to want. Hygienic macros are intended to protect me from variable capture, among other things, but variable capture is exactly what I want in some macros.</p><p>经典宏是黑客的真正工具 —— 简单、强大、危险。其原理一目了然：用函数处理宏的参数，返回值直接替换宏调用。而 “卫生宏” 则相反，它们试图阻止你理解其原理。我从没听过有人能用一句话解释卫生宏。它们是 “替程序员决定需求” 的典型反面教材：卫生宏想保护我免受变量捕获的影响，但有时我就需要变量捕获。</p><p>A really good language should be both clean and dirty: cleanly designed, with a small core of well understood and highly orthogonal operators, but dirty in the sense that it lets hackers have their way with it. C is like this. So were the early Lisps. A real hacker’s language will always have a slightly raffish character.</p><p>真正的好语言应该既 “干净” 又 “肮脏”：设计干净，核心是少量易懂且高度正交的操作符；但 “肮脏” 在于允许黑客折腾。C 是这样，早期 Lisp 也是这样。真正的黑客语言总会带点 “痞气”。</p><p>A good programming language should have features that make the kind of people who use the phrase “software engineering” shake their heads disapprovingly. At the other end of the continuum are languages like Ada and Pascal, models of propriety that are good for teaching and not much else.</p><p>优秀编程语言的特性，应该能让那些张口闭口 “软件工程” 的人摇头反对。而另一端是 Ada、Pascal 这类 “得体” 的语言 —— 适合教学，仅此而已。</p><h3 id="5-Throwaway-Programs"><a href="#5-Throwaway-Programs" class="headerlink" title="5 Throwaway Programs"></a><strong>5 Throwaway Programs</strong></h3><p><strong>5 一次性程序</strong></p><p>To be attractive to hackers, a language must be good for writing the kinds of programs they want to write. And that means, perhaps surprisingly, that it has to be good for writing throwaway programs.</p><p>要吸引黑客，语言必须擅长写他们想写的程序 —— 而这意味着，它得擅长写 “一次性程序”，这可能有点出人意料。</p><p>A throwaway program is a program you write quickly for some limited task: a program to automate some system administration task, or generate test data for a simulation, or convert data from one format to another. The surprising thing about throwaway programs is that, like the “temporary” buildings built at so many American universities during World War II, they often don’t get thrown away. Many evolve into real programs, with real features and real users.</p><p>一次性程序是为特定任务快速写的程序：比如自动化系统管理、生成模拟测试数据、转换数据格式等。有趣的是，就像二战期间美国大学的 “临时” 建筑，许多一次性程序最后并没有被扔掉，而是演变成有实际功能和用户的正式程序。</p><p>I have a hunch that the best big programs begin life this way, rather than being designed big from the start, like the Hoover Dam. It’s terrifying to build something big from scratch. When people take on a project that’s too big, they become overwhelmed. The project either gets bogged down, or the result is sterile and wooden: a shopping mall rather than a real downtown, Brasilia rather than Rome, Ada rather than C.</p><p>我有种直觉：优秀的大型程序往往是这样诞生的，而非像胡佛水坝那样从一开始就按 “大型” 设计。从零开始做大型项目太可怕了，人们会被压垮 —— 要么停滞不前，要么做出僵化刻板的结果：像购物中心而非真正的市中心，像巴西利亚而非罗马，像 Ada 而非 C。</p><p>Another way to get a big program is to start with a throwaway program and keep improving it. This approach is less daunting, and the design of the program benefits from evolution. I think, if one looked, that this would turn out to be the way most big programs were developed. And those that did evolve this way are probably still written in whatever language they were first written in, because it’s rare for a program to be ported, except for political reasons. And so, paradoxically, if you want to make a language that is used for big systems, you have to make it good for writing throwaway programs, because that’s where big systems come from.</p><p>另一种做出大型程序的方式是：从一次性程序开始，不断改进。这种方式没那么吓人，程序设计也能从演化中受益。我猜，多数大型程序都是这么来的。而且，除非出于政治原因，这些程序通常会一直用最初的语言编写。所以矛盾的是，若想让语言被用于大型系统，就得让它擅长写一次性程序 —— 因为大型系统就从这里来。</p><p>Perl is a striking example of this idea. It was not only designed for writing throwaway programs, but was pretty much a throwaway program itself. Perl began life as a collection of utilities for generating reports, and only evolved into a programming language as the throwaway programs people wrote in it grew larger. It was not until Perl 5 (if then) that the language was suitable for writing serious programs, and yet it was already massively popular.</p><p>Perl 就是个鲜明例子。它不仅是为一次性程序设计的，甚至本身就像个一次性程序。Perl 最初是一堆生成报告的工具，后来随着人们用它写的一次性程序变大，才演变成编程语言。直到 Perl 5（甚至更晚），它才适合写严肃程序，但那时它已经很火了。</p><p>What makes a language good for throwaway programs? To start with, it must be readily available. A throwaway program is something that you expect to write in an hour. So the language probably must already be installed on the computer you’re using. It can’t be something you have to install before you use it. It has to be there. C was there because it came with the operating system. Perl was there because it was originally a tool for system administrators, and yours had already installed it.</p><p>什么让语言适合写一次性程序？首先，它必须 “触手可及”。一次性程序通常期望一小时内写完，所以它得预装在你用的电脑上 —— 不能是那种需要先安装才能用的。C 能普及，因为它随操作系统预装；Perl 能普及，因为它最初是系统管理员的工具，管理员已经装好了。</p><p>Being available means more than being installed, though. An interactive language, with a command-line interface, is more available than one that you have to compile and run separately. A popular programming language should be interactive, and start up fast.</p><p>“触手可及” 不止是预装。带命令行界面的交互式语言，比需要单独编译运行的语言更方便。流行的编程语言应该是交互式的，且启动快。</p><p>Another thing you want in a throwaway program is brevity. Brevity is always attractive to hackers, and never more so than in a program they expect to turn out in an hour.</p><p>一次性程序还需要简洁。简洁对黑客总是有吸引力，在一小时就要写完的程序中更是如此。</p><h3 id="6-Libraries"><a href="#6-Libraries" class="headerlink" title="6 Libraries"></a><strong>6 Libraries</strong></h3><p><strong>6 库</strong></p><p>Of course the ultimate in brevity is to have the program already written for you, and merely to call it. And this brings us to what I think will be an increasingly important feature of programming languages: library functions. Perl wins because it has large libraries for manipulating strings. This class of library functions are especially important for throwaway programs, which are often originally written for converting or extracting data. Many Perl programs probably begin as just a couple library calls stuck together.</p><p>当然，最极致的简洁是 “程序已经写好了，你只需调用”—— 这就涉及到我认为未来编程语言越来越重要的特性：<strong>库函数</strong>。Perl 之所以成功，是因为它有强大的字符串处理库。这类库对一次性程序尤其重要，因为它们常用来转换或提取数据。许多 Perl 程序可能一开始就是几个库调用拼起来的。</p><p>I think a lot of the advances that happen in programming languages in the next fifty years will have to do with library functions. I think future programming languages will have libraries that are as carefully designed as the core language. Programming language design will not be about whether to make your language strongly or weakly typed, or object oriented, or functional, or whatever, but about how to design great libraries. The kind of language designers who like to think about how to design type systems may shudder at this. It’s almost like writing applications! Too bad. Languages are for programmers, and libraries are what programmers need.</p><p>我觉得未来 50 年，编程语言的进步会更多体现在库函数上。未来的编程语言，其库会和核心语言一样精心设计。语言设计不再是纠结 “强类型还是弱类型”“面向对象还是函数式”，而是如何设计优秀的库。那些喜欢琢磨类型系统的设计者可能会对此不屑 —— 这简直像在写应用！但没办法：语言是给程序员用的，而程序员需要的是库。</p><p>It’s hard to design good libraries. It’s not simply a matter of writing a lot of code. Once the libraries get too big, it can sometimes take longer to find the function you need than to write the code yourself. Libraries need to be designed using a small set of orthogonal operators, just like the core language. It ought to be possible for the programmer to guess what library call will do what he needs.</p><p>设计好库很难，不只是堆代码。库太大的话，找函数的时间可能比自己写还长。库需要像核心语言一样，用少量正交的操作符设计 —— 程序员应该能猜到哪个库调用能解决自己的问题。</p><p>Libraries are one place Common Lisp falls short. There are only rudimentary libraries for manipulating strings, and almost none for talking to the operating system. For historical reasons, Common Lisp tries to pretend that the OS doesn’t exist. And because you can’t talk to the OS, you’re unlikely to be able to write a serious program using only the built-in operators in Common Lisp. You have to use some implementation-specific hacks as well, and in practice these tend not to give you everything you want. Hackers would think a lot more highly of Lisp if Common Lisp had powerful string libraries and good OS support.</p><p>Common Lisp 的短板就在库。它的字符串处理库很初级，与操作系统交互的库几乎没有。出于历史原因，Common Lisp 试图假装操作系统不存在。而因为无法与操作系统交互，仅用 Common Lisp 的内置操作符几乎写不出严肃程序，还得用特定实现的 hacks，且往往满足不了需求。如果 Common Lisp 有强大的字符串库和良好的系统支持，黑客对它的评价会高得多。</p><h3 id="7-Syntax"><a href="#7-Syntax" class="headerlink" title="7 Syntax"></a><strong>7 Syntax</strong></h3><p><strong>7 语法</strong></p><p>Could a language with Lisp’s syntax, or more precisely, lack of syntax, ever become popular? I don’t know the answer to this question. I do think that syntax is not the main reason Lisp isn’t currently popular. Common Lisp has worse problems than unfamiliar syntax. I know several programmers who are comfortable with prefix syntax and yet use Perl by default, because it has powerful string libraries and can talk to the os.</p><p>Lisp 这种 “没有语法”（或说缺乏语法）的语言，有可能流行吗？我不知道答案，但我认为语法不是 Lisp 现在冷门的主因。Common Lisp 的问题比 “语法陌生” 更严重。我认识几个习惯前缀语法的程序员，却默认用 Perl—— 因为 Perl 有强大的字符串库，还能与系统交互。</p><p>There are two possible problems with prefix notation: that it is unfamiliar to programmers, and that it is not dense enough. The conventional wisdom in the Lisp world is that the first problem is the real one. I’m not so sure. Yes, prefix notation makes ordinary programmers panic. But I don’t think ordinary programmers’ opinions matter. Languages become popular or unpopular based on what expert hackers think of them, and I think expert hackers might be able to deal with prefix notation. Perl syntax can be pretty incomprehensible, but that has not stood in the way of Perl’s popularity. If anything it may have helped foster a Perl cult.</p><p>前缀表示法可能有两个问题：对程序员来说陌生，以及不够紧凑。Lisp 界的共识是 “陌生” 是主因，但我不确定。没错，前缀表示法会让普通程序员恐慌，但普通程序员的看法不重要。语言的流行取决于顶尖黑客的看法，而他们应该能接受前缀表示法。Perl 的语法够晦涩了，却没阻碍它流行 —— 甚至可能助长了 Perl 文化。</p><p>A more serious problem is the diffuseness of prefix notation. For expert hackers, that really is a problem. No one wants to write (aref a x y) when they could write a[x,y].</p><p>更严重的问题是前缀表示法的 “松散”。对顶尖黑客来说，这确实是问题：没人想写<code>(aref a x y)</code>，如果可以写成<code>a[x,y]</code>的话。</p><p>In this particular case there is a way to finesse our way out of the problem. If we treat data structures as if they were functions on indexes, we could write (a x y) instead, which is even shorter than the Perl form. Similar tricks may shorten other types of expressions.</p><p>这个问题有个解决办法：把数据结构当作 “接受索引的函数”，这样就能写成<code>(a x y)</code>，甚至比 Perl 的形式还短。类似的技巧或许能缩短其他表达式。</p><p>We can get rid of (or make optional) a lot of parentheses by making indentation significant. That’s how programmers read code anyway: when indentation says one thing and delimiters say another, we go by the indentation. Treating indentation as significant would eliminate this common source of bugs as well as making programs shorter.</p><p>我们可以通过 “缩进有意义” 来减少（或可选）大量括号。程序员读代码时本就靠缩进：当缩进和分隔符冲突时，我们信缩进。让缩进有意义，既能消除常见的 bug，又能缩短程序。</p><p>Sometimes infix syntax is easier to read. This is especially true for math expressions. I’ve used Lisp my whole programming life and I still don’t find prefix math expressions natural. And yet it is convenient, especially when you’re generating code, to have operators that take any number of arguments. So if we do have infix syntax, it should probably be implemented as some kind of read-macro.</p><p>有时中缀语法更易读，尤其是数学表达式。我用了一辈子 Lisp，还是觉得前缀数学表达式不自然。但允许操作符接受任意数量的参数（尤其在生成代码时）很方便。所以，如果要有中缀语法，或许可以用读宏实现。</p><p>I don’t think we should be religiously opposed to introducing syntax into Lisp, as long as it translates in a well-understood way into underlying s-expressions. There is already a good deal of syntax in Lisp. It’s not necessarily bad to introduce more, as long as no one is forced to use it. In Common Lisp, some delimiters are reserved for the language, suggesting that at least some of the designers intended to have more syntax in the future.</p><p>我不认为应该坚决反对给 Lisp 加语法 —— 只要语法能以清晰的方式转换为底层的 s 表达式。Lisp 已有不少语法，只要不强迫使用，多加些也无妨。Common Lisp 中有些分隔符是语言保留的，说明至少有部分设计者希望未来能加入更多语法。</p><p>One of the most egregiously unlispy pieces of syntax in Common Lisp occurs in format strings; format is a language in its own right, and that language is not Lisp. If there were a plan for introducing more syntax into Lisp, format specifiers might be able to be included in it. It would be a good thing if macros could generate format specifiers the way they generate any other kind of code.</p><p>Common Lisp 中最不 “Lisp” 的语法是格式字符串：<code>format</code>本身就是一种语言，而且不是 Lisp。如果有计划给 Lisp 加语法，格式说明符或许能包含进去 —— 这样宏就能像生成其他代码一样生成格式说明符，会是好事。</p><p>An eminent Lisp hacker told me that his copy of CLTL falls open to the section format. Mine too. This probably indicates room for improvement. It may also mean that programs do a lot of I&#x2F;O.</p><p>一位著名的 Lisp 黑客告诉我，他的《Common Lisp the Language》总是自动翻开到<code>format</code>那一节。我的也是。这可能说明有改进空间，也可能说明程序确实要做很多 I&#x2F;O。</p><h3 id="8-Efficiency"><a href="#8-Efficiency" class="headerlink" title="8 Efficiency"></a><strong>8 Efficiency</strong></h3><p><strong>8 效率</strong></p><p>A good language, as everyone knows, should generate fast code. But in practice I don’t think fast code comes primarily from things you do in the design of the language. As Knuth pointed out long ago, speed only matters in certain critical bottlenecks. And as many programmers have observed since, one is very often mistaken about where these bottlenecks are.</p><p>众所周知，好语言应该生成高效代码。但实际上，我认为高效代码并非主要来自语言设计 —— 正如 Knuth 早就指出的，速度只在某些关键瓶颈处重要，而程序员常常猜错瓶颈在哪。</p><p>So, in practice, the way to get fast code is to have a very good profiler, rather than by, say, making the language strongly typed. You don’t need to know the type of every argument in every call in the program. You do need to be able to declare the types of arguments in the bottlenecks. And even more, you need to be able to find out where the bottlenecks are.</p><p>所以，实际上，要得到高效代码，靠的是优秀的性能分析器，而非强类型之类的设计。你不需要知道程序中每个调用的每个参数的类型，但需要能在瓶颈处声明参数类型 —— 更重要的是，需要能找到瓶颈在哪。</p><p>One complaint people have had with Lisp is that it’s hard to tell what’s expensive. This might be true. It might also be inevitable, if you want to have a very abstract language. And in any case I think good profiling would go a long way toward fixing the problem: you’d soon learn what was expensive.</p><p>人们对 Lisp 的一个抱怨是 “说不清什么操作费时间”。这可能是真的，也可能是 “高度抽象语言” 的必然。但优秀的性能分析器应该能解决这个问题：你很快就会知道什么操作耗时。</p><p>Part of the problem here is social. Language designers like to write fast compilers. That’s how they measure their skill. They think of the profiler as an add-on, at best. But in practice a good profiler may do more to improve the speed of actual programs written in the language than a compiler that generates fast code. Here, again, language designers are somewhat out of touch with their users. They do a really good job of solving slightly the wrong problem.</p><p>这里有个社会因素：语言设计者喜欢写快速编译器 —— 这是他们衡量技能的方式。他们最多把性能分析器当作附加工具，但实际上，优秀的性能分析器对提升实际程序速度的作用，可能比生成高效代码的编译器还大。这又是语言设计者与用户脱节的地方：他们擅长解决的，是稍微跑偏的问题。</p><p>It might be a good idea to have an active profiler — to push performance data to the programmer instead of waiting for him to come asking for it. For example, the editor could display bottlenecks in red when the programmer edits the source code. Another approach would be to somehow represent what’s happening in running programs. This would be an especially big win in server-based applications, where you have lots of running programs to look at. An active profiler could show graphically what’s happening in memory as a program’s running, or even make sounds that tell what’s happening.</p><p>或许可以做 “主动性能分析器”—— 主动把性能数据推给程序员，而非等他们来查。比如，编辑器在程序员编辑源码时，用红色标记瓶颈。另一种方式是可视化运行中程序的状态 —— 这对服务器应用尤其有用，因为有很多运行中的程序可观察。主动性能分析器可以图形化显示程序运行时的内存状态，甚至用声音提示。</p><p>Sound is a good cue to problems. In one place I worked, we had a big board of dials showing what was happening to our web servers. The hands were moved by little servomotors that made a slight noise when they turned. I couldn’t see the board from my desk, but I found that I could tell immediately, by the sound, when there was a problem with a server.</p><p>声音是个好的问题信号。我以前工作的地方，有块大仪表盘显示 web 服务器的状态，指针由小伺服电机驱动，转动时会发出轻微声响。我在座位上看不见仪表盘，但能通过声音立刻判断服务器是否出问题。</p><p>It might even be possible to write a profiler that would automatically detect inefficient algorithms. I would not be surprised if certain patterns of memory access turned out to be sure signs of bad algorithms. If there were a little guy running around inside the computer executing our programs, he would probably have as long and plaintive a tale to tell about his job as a federal government employee. I often have a feeling that I’m sending the processor on a lot of wild goose chases, but I’ve never had a good way to look at what it’s doing.</p><p>甚至可能写出自动检测低效算法的性能分析器。某些内存访问模式可能就是坏算法的明确信号 —— 这不足为奇。如果电脑里有个小人在执行程序，他的工作吐槽可能和联邦公务员一样长。我总觉得自己让处理器做了很多无用功，却没法看清它在干嘛。</p><p>A number of Lisps now compile into byte code, which is then executed by an interpreter. This is usually done to make the implementation easier to port, but it could be a useful language feature. It might be a good idea to make the byte code an official part of the language, and to allow programmers to use inline byte code in bottlenecks. Then such optimizations would be portable too.</p><p>现在很多 Lisp 先编译成字节码，再用解释器执行 —— 这通常是为了便于移植，但也可以成为有用的语言特性。或许可以把字节码定为语言的官方部分，允许程序员在瓶颈处嵌入字节码 —— 这样优化也能移植。</p><p>The nature of speed, as perceived by the end-user, may be changing. With the rise of server-based applications, more and more programs may turn out to be i&#x2F;o-bound. It will be worth making i&#x2F;o fast. The language can help with straightforward measures like simple, fast, formatted output functions, and also with deep structural changes like caching and persistent objects.</p><p>用户感知的 “速度” 本质可能在变。随着服务器应用兴起，越来越多程序会受 I&#x2F;O 限制 —— 优化 I&#x2F;O 很重要。语言可以通过简单措施（如快速格式化输出函数）和深层结构（如缓存、持久化对象）提供支持。</p><p>Users are interested in response time. But another kind of efficiency will be increasingly important: the number of simultaneous users you can support per processor. Many of the interesting applications written in the near future will be server-based, and the number of users per server is the critical question for anyone hosting such applications. In the capital cost of a business offering a server-based application, this is the divisor.</p><p>用户关心响应时间，但另一种效率会越来越重要：每处理器支持的并发用户数。未来很多有趣的应用都是服务器端的，对托管者来说，“每服务器用户数” 是关键问题 —— 这是决定服务器应用业务资本成本的除数。</p><p>For years, efficiency hasn’t mattered much in most end-user applications. Developers have been able to assume that each user would have an increasingly powerful processor sitting on their desk. And by Parkinson’s Law, software has expanded to use the resources available. That will change with server-based applications. In that world, the hardware and software will be supplied together. For companies that offer server-based applications, it will make a very big difference to the bottom line how many users they can support per server.</p><p>多年来，多数终端用户应用不太在乎效率。开发者可以假设每个用户的桌面处理器会越来越强，而根据帕金森定律，软件会膨胀到占满资源。但服务器应用会改变这一点：在那个世界里，硬件和软件是捆绑的。对提供服务器应用的公司来说，每服务器支持的用户数直接影响底线。</p><p>In some applications, the processor will be the limiting factor, and execution speed will be the most important thing to optimize. But often memory will be the limit; the number of simultaneous users will be determined by the amount of memory you need for each user’s data. The language can help here too. Good support for threads will enable all the users to share a single heap. It may also help to have persistent objects and&#x2F;or language level support for lazy loading.</p><p>有些应用中，处理器是瓶颈，执行速度是优化重点；但更多时候内存是瓶颈 —— 并发用户数取决于每个用户数据所需的内存。语言也能在这里发挥作用：良好的线程支持能让所有用户共享一个堆；持久化对象和语言级延迟加载也可能有帮助。</p><h3 id="9-Time"><a href="#9-Time" class="headerlink" title="9 Time"></a><strong>9 Time</strong></h3><p><strong>9 时间</strong></p><p>The last ingredient a popular language needs is time. No one wants to write programs in a language that might go away, as so many programming languages do. So most hackers will tend to wait until a language has been around for a couple years before even considering using it.</p><p>流行语言的最后一个要素是<strong>时间</strong>。没人想在可能消失的语言上写程序 —— 太多编程语言都是如此。所以多数黑客会等一种语言出现几年后，才考虑使用。</p><p>Inventors of wonderful new things are often surprised to discover this, but you need time to get any message through to people. A friend of mine rarely does anything the first time someone asks him. He knows that people sometimes ask for things that they turn out not to want. To avoid wasting his time, he waits till the third or fourth time he’s asked to do something; by then, whoever’s asking him may be fairly annoyed, but at least they probably really do want whatever they’re asking for.</p><p>新事物的发明者常惊讶地发现：让人们接受一个信息需要时间。我有个朋友，别人第一次求他做事，他很少答应 —— 他知道人们有时会求自己并不真正想要的东西。为了不浪费时间，他会等别人求到第三、四次 —— 这时对方可能已经很生气，但至少他们很可能是真的想要。</p><p>Most people have learned to do a similar sort of filtering on new things they hear about. They don’t even start paying attention until they’ve heard about something ten times. They’re perfectly justified: the majority of hot new whatevers do turn out to be a waste of time, and eventually go away. By delaying learning VRML, I avoided having to learn it at all.</p><p>多数人对新事物也有类似的过滤机制：听到十次以上才会开始关注。这很合理：多数 “热门新事物” 最终都是浪费时间，会消失。我因为推迟学 VRML，最后根本没学。</p><p>So anyone who invents something new has to expect to keep repeating their message for years before people will start to get it. We wrote what was, as far as I know, the first web-server based application, and it took us years to get it through to people that it didn’t have to be downloaded. It wasn’t that they were stupid. They just had us tuned out.</p><p>所以，任何新事物的发明者都得做好准备：多年重复自己的理念，人们才会开始听。据我所知，我们写了第一个基于 web 服务器的应用，但花了好几年才让人们明白 “它不需要下载”。不是他们笨，只是没把我们当回事。</p><p>The good news is, simple repetition solves the problem. All you have to do is keep telling your story, and eventually people will start to hear. It’s not when people notice you’re there that they pay attention; it’s when they notice you’re still there.</p><p>好消息是，重复就能解决问题。你只需不断讲自己的故事，人们最终会听见。人们不是在 “注意到你存在” 时关注你，而是在 “注意到你还在” 时。</p><p>It’s just as well that it usually takes a while to gain momentum. Most technologies evolve a good deal even after they’re first launched — programming languages especially. Nothing could be better, for a new techology, than a few years of being used only by a small number of early adopters. Early adopters are sophisticated and demanding, and quickly flush out whatever flaws remain in your technology. When you only have a few users you can be in close contact with all of them. And early adopters are forgiving when you improve your system, even if this causes some breakage.</p><p>势头的积累需要时间，这其实是好事。多数技术（尤其是编程语言）在推出后还会大幅演化。对新技术来说，有几年时间只被少数早期用户使用，再好不过。早期用户成熟且挑剔，能快速发现技术的缺陷。用户少时，你能和所有用户保持密切联系；而且早期用户在你改进系统（哪怕造成一些不兼容）时，也更宽容。</p><p>There are two ways new technology gets introduced: the organic growth method, and the big bang method. The organic growth method is exemplified by the classic seat-of-the-pants underfunded garage startup. A couple guys, working in obscurity, develop some new technology. They launch it with no marketing and initially have only a few (fanatically devoted) users. They continue to improve the technology, and meanwhile their user base grows by word of mouth. Before they know it, they’re big.</p><p>新技术的推广有两种方式：“有机增长” 和 “大爆炸”。有机增长就像经典的、资金不足的车库创业：几个人默默开发新技术，零营销，最初只有几个（狂热的）用户，边改进技术边靠口碑增长，不知不觉就做大了。</p><p>The other approach, the big bang method, is exemplified by the VC-backed, heavily marketed startup. They rush to develop a product, launch it with great publicity, and immediately (they hope) have a large user base.</p><p>另一种 “大爆炸” 方式，就像风投支持、大肆营销的创业公司：赶工开发产品，高调发布，希望立刻获得大量用户。</p><p>Generally, the garage guys envy the big bang guys. The big bang guys are smooth and confident and respected by the VCs. They can afford the best of everything, and the PR campaign surrounding the launch has the side effect of making them celebrities. The organic growth guys, sitting in their garage, feel poor and unloved. And yet I think they are often mistaken to feel sorry for themselves. Organic growth seems to yield better technology and richer founders than the big bang method. If you look at the dominant technologies today, you’ll find that most of them grew organically.</p><p>通常，车库创业者会羡慕大爆炸创业者 —— 他们光鲜自信，受风投青睐，能买最好的东西，发布时的公关还能让他们成名人。车库里的人觉得自己又穷又没人爱，但我认为他们不该自怨自艾。有机增长往往比大爆炸方式产生更好的技术，也让创始人更富有。看看如今的主流技术，多数都是有机增长来的。</p><p>This pattern doesn’t only apply to companies. You see it in sponsored research too. Multics and Common Lisp were big-bang projects, and Unix and MacLisp were organic growth projects.</p><p>这不仅适用于公司，也适用于赞助研究：Multics 和 Common Lisp 是大爆炸项目，而 Unix 和 MacLisp 是有机增长项目。</p><h3 id="10-Redesign"><a href="#10-Redesign" class="headerlink" title="10 Redesign"></a><strong>10 Redesign</strong></h3><p><strong>10 重新设计</strong></p><p>“The best writing is rewriting,” wrote E. B. White. Every good writer knows this, and it’s true for software too. The most important part of design is redesign. Programming languages, especially, don’t get redesigned enough.</p><p>E. B. White 曾说：“最好的写作是重写。” 优秀的作家都懂这个道理，软件也一样。设计中最重要的部分是<strong>重新设计</strong>，而编程语言尤其缺乏足够的重设计。</p><p>To write good software you must simultaneously keep two opposing ideas in your head. You need the young hacker’s naive faith in his abilities, and at the same time the veteran’s skepticism. You have to be able to think how hard can it be? with one half of your brain while thinking it will never work with the other.</p><p>写好软件，脑子里必须同时装着两个对立的想法：年轻黑客对自身能力的天真信心，和老手的怀疑精神。你得用一半脑子想 “能有多难？”，另一半想 “这肯定不行”。</p><p>The trick is to realize that there’s no real contradiction here. You want to be optimistic and skeptical about two different things. You have to be optimistic about the possibility of solving the problem, but skeptical about the value of whatever solution you’ve got so far.</p><p>关键是要意识到这并不矛盾：你要对 “解决问题的可能性” 乐观，对 “当前解决方案的价值” 怀疑。</p><p>People who do good work often think that whatever they’re working on is no good. Others see what they’ve done and are full of wonder, but the creator is full of worry. This pattern is no coincidence: it is the worry that made the work good.</p><p>做出好作品的人，常觉得自己的东西不行。别人惊叹于他们的成果，创造者却满是担忧。这不是巧合：正是担忧让作品变好。</p><p>If you can keep hope and worry balanced, they will drive a project forward the same way your two legs drive a bicycle forward. In the first phase of the two-cycle innovation engine, you work furiously on some problem, inspired by your confidence that you’ll be able to solve it. In the second phase, you look at what you’ve done in the cold light of morning, and see all its flaws very clearly. But as long as your critical spirit doesn’t outweigh your hope, you’ll be able to look at your admittedly incomplete system, and think, how hard can it be to get the rest of the way?, thereby continuing the cycle.</p><p>若能平衡希望与担忧，它们会像双腿蹬自行车一样推动项目前进。在创新的两阶段循环中：第一阶段，你受 “能解决问题” 的信心驱动，疯狂工作；第二阶段，你在清晨的冷静中审视成果，清晰地看到所有缺陷。但只要批判精神没压过希望，你就会看着虽不完美但已存在的系统，想 “再往前推一步能有多难？”—— 循环便得以继续。</p><p>It’s tricky to keep the two forces balanced. In young hackers, optimism predominates. They produce something, are convinced it’s great, and never improve it. In old hackers, skepticism predominates, and they won’t even dare to take on ambitious projects.</p><p>平衡这两种力量很难。年轻黑客往往乐观过头：做出东西就觉得完美，不再改进。老黑客则怀疑过头，不敢接手极具野心的项目。</p><p>Anything you can do to keep the redesign cycle going is good. Prose can be rewritten over and over until you’re happy with it. But software, as a rule, doesn’t get redesigned enough. Prose has readers, but software has users. If a writer rewrites an essay, people who read the old version are unlikely to complain that their thoughts have been broken by some newly introduced incompatibility.</p><p>任何能维持 “重新设计循环” 的事都是好的。散文可以一遍遍重写直到满意，但软件通常重写不够。散文有读者，软件有用户 —— 作家重写文章，读旧版的人不会抱怨 “新改动毁了我的想法”。</p><p>Users are a double-edged sword. They can help you improve your language, but they can also deter you from improving it. So choose your users carefully, and be slow to grow their number. Having users is like optimization: the wise course is to delay it. Also, as a general rule, you can at any given time get away with changing more than you think. Introducing change is like pulling off a bandage: the pain is a memory almost as soon as you feel it.</p><p>用户是把双刃剑：他们能帮你改进语言，也能阻碍改进。所以要谨慎选择用户，缓慢扩大规模。拥有用户就像优化：明智的做法是推迟。而且一般来说，你能做出的改变往往比想象中多。引入改变就像撕绷带：痛感几乎转瞬即逝。</p><p>Everyone knows that it’s not a good idea to have a language designed by a committee. Committees yield bad design. But I think the worst danger of committees is that they interfere with redesign. It is so much work to introduce changes that no one wants to bother. Whatever a committee decides tends to stay that way, even if most of the members don’t like it.</p><p>众所周知，委员会设计不出好语言 —— 委员会只会产出糟糕设计。但我觉得委员会最大的危险是干扰重设计：引入改变太麻烦，没人愿意费心。委员会的决定往往一成不变，哪怕多数成员不喜欢。</p><p>Even a committee of two gets in the way of redesign. This happens particularly in the interfaces between pieces of software written by two different people. To change the interface both have to agree to change it at once. And so interfaces tend not to change at all, which is a problem because they tend to be one of the most ad hoc parts of any system.</p><p>哪怕两个人的 “委员会” 也会阻碍重设计 —— 尤其是在两人分别写的软件模块接口上。改接口需要双方同时同意，所以接口往往完全不变 —— 但接口往往是系统中最随意的部分，这就成了问题。</p><p>One solution here might be to design systems so that interfaces are horizontal instead of vertical — so that modules are always vertically stacked strata of abstraction. Then the interface will tend to be owned by one of them. The lower of two levels will either be a language in which the upper is written, in which case the lower level will own the interface, or it will be a slave, in which case the interface can be dictated by the upper level.</p><p>解决办法或许是设计 “水平接口” 而非 “垂直接口”—— 让模块始终是垂直堆叠的抽象层。这样接口就会属于其中一方：若下层是上层的实现语言，下层拥有接口；若下层是 “从属”，接口可由上层决定。</p><h3 id="11-Lisp"><a href="#11-Lisp" class="headerlink" title="11 Lisp"></a><strong>11 Lisp</strong></h3><p><strong>11 Lisp 的未来</strong></p><p>What all this implies is that there is hope for a new Lisp. There is hope for any language that gives hackers what they want, including Lisp. I think we may have made a mistake in thinking that hackers are turned off by Lisp’s strangeness. This comforting illusion may have prevented us from seeing the real problem with Lisp, or at least Common Lisp, which is that it sucks for doing what hackers want to do. A hacker’s language needs powerful libraries and something to hack. Common Lisp has neither. A hacker’s language is terse and hackable. Common Lisp is not.</p><p>以上一切都意味着：新 Lisp 有希望。任何能给黑客想要的东西的语言都有希望，包括 Lisp。我们可能错以为黑客讨厌 Lisp 的 “怪异”—— 这个安慰性的错觉让我们忽视了 Lisp（至少 Common Lisp）的真正问题：它不适合黑客想做的事。黑客需要的语言要有强大的库和可编写的对象，Common Lisp 两者都没有；黑客需要语言简洁、可操作，Common Lisp 也没有。</p><p>The good news is, it’s not Lisp that sucks, but Common Lisp. If we can develop a new Lisp that is a real hacker’s language, I think hackers will use it. They will use whatever language does the job. All we have to do is make sure this new Lisp does some important job better than other languages.</p><p>好消息是：烂的不是 Lisp，是 Common Lisp。如果我们能开发一种真正的 “黑客 Lisp”，我相信黑客会用它。他们会用任何能解决问题的语言 —— 我们只需确保这种新 Lisp 在某些重要任务上比其他语言做得更好。</p><p>History offers some encouragement. Over time, successive new programming languages have taken more and more features from Lisp. There is no longer much left to copy before the language you’ve made is Lisp. The latest hot language, Python, is a watered-down Lisp with infix syntax and no macros. A new Lisp would be a natural step in this progression.</p><p>历史给了些鼓励。随着时间推移，新编程语言从 Lisp 借鉴的特性越来越多 —— 再抄下去，几乎就成了 Lisp。最新的热门语言 Python，就是弱化版的 Lisp（带中缀语法，无宏）。新 Lisp 会是这个演进过程的自然一步。</p><p>I sometimes think that it would be a good marketing trick to call it an improved version of Python. That sounds hipper than Lisp. To many people, Lisp is a slow AI language with a lot of parentheses. Fritz Kunze’s official biography carefully avoids mentioning the L-word. But my guess is that we shouldn’t be afraid to call the new Lisp Lisp. Lisp still has a lot of latent respect among the very best hackers — the ones who took 6.001 and understood it, for example. And those are the users you need to win.</p><p>我有时觉得，把它叫做 “改进版 Python” 会是个好营销 —— 这听起来比 Lisp 时髦。对很多人来说，Lisp 是 “慢腾腾的 AI 语言，满是括号”。Fritz Kunze 的官方传记都小心翼翼避开 “Lisp” 这个词。但我猜，我们不必害怕称新语言为 Lisp。在顶尖黑客中，Lisp 仍有不少潜在的尊重 —— 比如那些学过 6.001 并真正理解它的人。而这些正是你需要争取的用户。</p><p>In “How to Become a Hacker,” Eric Raymond describes Lisp as something like Latin or Greek — a language you should learn as an intellectual exercise, even though you won’t actually use it:<br>Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.<br>If I didn’t know Lisp, reading this would set me asking questions. A language that would make me a better programmer, if it means anything at all, means a language that would be better for programming. And that is in fact the implication of what Eric is saying.</p><p>Eric Raymond 在《如何成为黑客》中，把 Lisp 比作拉丁语或希腊语 —— 一种哪怕不用，也该学的智力训练：</p><p>“学习 Lisp 的深刻启迪，会让你余生都成为更好的程序员 —— 哪怕你其实不常直接用 Lisp。”</p><p>如果我不懂 Lisp，读了这话会好奇：一种 “能让我成为更好程序员” 的语言，若有意义，必然是 “更适合编程” 的语言 —— 这正是 Eric 的潜台词。</p><p>As long as that idea is still floating around, I think hackers will be receptive enough to a new Lisp, even if it is called Lisp. But this Lisp must be a hacker’s language, like the classic Lisps of the 1970s. It must be terse, simple, and hackable. And it must have powerful libraries for doing what hackers want to do now.</p><p>只要这个想法还在，我认为黑客会接受新 Lisp，哪怕它叫 Lisp。但这种 Lisp 必须是 “黑客的语言”，像 20 世纪 70 年代的经典 Lisp 那样：简洁、简单、可操作，且有强大的库，能做黑客现在想做的事。</p><p>In the matter of libraries I think there is room to beat languages like Perl and Python at their own game. A lot of the new applications that will need to be written in the coming years will be server-based applications. There’s no reason a new Lisp shouldn’t have string libraries as good as Perl, and if this new Lisp also had powerful libraries for server-based applications, it could be very popular. Real hackers won’t turn up their noses at a new tool that will let them solve hard problems with a few library calls. Remember, hackers are lazy.</p><p>在库方面，我觉得有机会在 Perl 和 Python 的强项上打败它们。未来几年需要写的很多新应用都是服务器端的。新 Lisp 完全可以有和 Perl 一样好的字符串库；如果它还有强大的服务器应用库，会非常流行。顶尖黑客不会拒绝 “用几个库调用解决难题” 的新工具 —— 别忘了，他们很懒。</p><p>It could be an even bigger win to have core language support for server-based applications. For example, explicit support for programs with multiple users, or data ownership at the level of type tags.</p><p>让核心语言支持服务器应用会是更大的优势。比如，显式支持多用户程序，或在类型标记层面支持数据所有权。</p><p>Server-based applications also give us the answer to the question of what this new Lisp will be used to hack. It would not hurt to make Lisp better as a scripting language for Unix. (It would be hard to make it worse.) But I think there are areas where existing languages would be easier to beat. I think it might be better to follow the model of Tcl, and supply the Lisp together with a complete system for supporting server-based applications. Lisp is a natural fit for server-based applications. Lexical closures provide a way to get the effect of subroutines when the ui is just a series of web pages. S-expressions map nicely onto html, and macros are good at generating it. There need to be better tools for writing server-based applications, and there needs to be a new Lisp, and the two would work very well together.</p><p>服务器应用也回答了 “新 Lisp 该用来编什么” 的问题。让 Lisp 成为更好的 Unix 脚本语言也不错（反正现在已经够烂了），但我觉得有些领域更容易超越现有语言。或许该学 Tcl 的模式：把 Lisp 和完整的服务器应用支持系统捆绑。Lisp 天生适合服务器应用：词法闭包能在 “UI 只是一系列网页” 时实现子程序效果；s 表达式与 HTML 映射良好，宏擅长生成 HTML。现在需要更好的服务器应用工具，也需要新 Lisp—— 两者结合会很完美。</p><h3 id="12-The-Dream-Language"><a href="#12-The-Dream-Language" class="headerlink" title="12 The Dream Language"></a><strong>12 The Dream Language</strong></h3><p><strong>12 理想的语言</strong></p><p>By way of summary, let’s try describing the hacker’s dream language. The dream language is beautiful, clean, and terse. It has an interactive toplevel that starts up fast. You can write programs to solve common problems with very little code. Nearly all the code in any program you write is code that’s specific to your application. Everything else has been done for you.</p><p>总结一下，黑客的理想语言该是什么样的？它优美、干净、简洁，有启动快速的交互式顶层环境。你能用很少的代码解决常见问题，程序中几乎所有代码都是应用特定的 —— 其他都已由库完成。</p><p>The syntax of the language is brief to a fault. You never have to type an unnecessary character, or even to use the shift key much.</p><p>它的语法简直到了极致：从不用敲多余字符，甚至很少用 Shift 键。</p><p>Using big abstractions you can write the first version of a program very quickly. Later, when you want to optimize, there’s a really good profiler that tells you where to focus your attention. You can make inner loops blindingly fast, even writing inline byte code if you need to.</p><p>你能用高层抽象快速写出程序初稿；优化时，有优秀的性能分析器告诉你该聚焦哪里。你能让内层循环快得惊人，甚至在需要时嵌入字节码。</p><p>There are lots of good examples to learn from, and the language is intuitive enough that you can learn how to use it from examples in a couple minutes. You don’t need to look in the manual much. The manual is thin, and has few warnings and qualifications.</p><p>有很多好例子可学，语言直观到你能从例子中几分钟学会用法。不用常查手册，手册很薄，几乎没有警告和限制。</p><p>The language has a small core, and powerful, highly orthogonal libraries that are as carefully designed as the core language. The libraries all work well together; everything in the language fits together like the parts in a fine camera. Nothing is deprecated, or retained for compatibility. The source code of all the libraries is readily available. It’s easy to talk to the operating system and to applications written in other languages.</p><p>它的核心小巧，库强大且高度正交，设计得和核心一样精心。所有库配合默契，语言的每个部分都像精密相机的零件一样契合。没有过时特性，也没有为兼容保留的冗余。所有库的源码都触手可及，能轻松与操作系统和其他语言写的应用交互。</p><p>The language is built in layers. The higher-level abstractions are built in a very transparent way out of lower-level abstractions, which you can get hold of if you want.</p><p>它分层构建：高层抽象由低层抽象透明组成，你想用时就能接触到低层。</p><p>Nothing is hidden from you that doesn’t absolutely have to be. The language offers abstractions only as a way of saving you work, rather than as a way of telling you what to do. In fact, the language encourages you to be an equal participant in its design. You can change everything about it, including even its syntax, and anything you write has, as much as possible, the same status as what comes predefined.</p><p>任何不必隐藏的东西都对你开放。语言提供抽象是为了帮你省功夫，而非命令你该做什么。事实上，它鼓励你参与设计 —— 你能改变它的一切，包括语法，而且你写的任何东西，都尽可能与预定义内容有同等地位。</p><p>Notes</p><p>[1] Macros very close to the modern idea were proposed by Timothy Hart in 1964, two years after Lisp 1.5 was released. What was missing, initially, were ways to avoid variable capture and multiple evaluation; Hart’s examples are subject to both.</p><p>[1] 与现代宏概念极为接近的想法，由蒂莫西・哈特（Timothy Hart）于 1964 年提出 —— 这是在 Lisp 1.5 发布两年后。最初的宏缺少避免 “变量捕获” 和 “多重求值” 的机制，而哈特的示例中这两个问题都存在。</p><p>[2] In When the Air Hits Your Brain, neurosurgeon Frank Vertosick recounts a conversation in which his chief resident, Gary, talks about the difference between surgeons and internists (“fleas”):</p><p>[2] 神经外科医生弗兰克・弗托西克（Frank Vertosick）在《当空气撞击你的大脑》（<em>When the Air Hits Your Brain</em>）一书中，记录了他与住院总医师加里（Gary）的一段对话，其中加里谈到了外科医生与内科医生（“跳蚤”）的区别：</p><p>Gary and I ordered a large pizza and found an open booth. The chief lit a cigarette. “Look at those goddamn fleas, jabbering about some disease they’ll see once in their lifetimes. That’s the trouble with fleas, they only like the bizarre stuff. They hate their bread and butter cases. That’s the difference between us and the fucking fleas. See, we love big juicy lumbar disc herniations, but they hate hypertension….”</p><p>加里和我点了个大披萨，找了个空 booth 坐下。这位主任点燃一支烟：“你看那些该死的跳蚤，没完没了地聊那些一辈子都遇不上一次的病。这就是跳蚤的问题 —— 他们只喜欢离奇的玩意儿，讨厌日常的常见病。这就是我们和那些该死的跳蚤的区别。你看，我们就爱那些又大又多汁的腰椎间盘突出，但他们讨厌高血压……”</p><p>It’s hard to think of a lumbar disc herniation as juicy (except literally). And yet I think I know what they mean. I’ve often had a juicy bug to track down. Someone who’s not a programmer would find it hard to imagine that there could be pleasure in a bug. Surely it’s better if everything just works. In one way, it is. And yet there is undeniably a grim satisfaction in hunting down certain sorts of bugs.</p><p>很难把腰椎间盘突出想成 “多汁” 的（除非从字面意义）。但我大概懂他们的意思。我也常遇到 “多汁的 bug” 要去追查。不是程序员的人很难理解：调试 bug 怎么会有乐趣？显然，一切正常不是更好吗？某种意义上确实如此。但不可否认，追查某些 bug 时，会有种冷酷的满足感。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隔绝干扰</title>
    <link href="/2025/08/13/disconnecting-distraction/"/>
    <url>/2025/08/13/disconnecting-distraction/</url>
    
    <content type="html"><![CDATA[<h2 id="Disconnecting-Distraction"><a href="#Disconnecting-Distraction" class="headerlink" title="Disconnecting Distraction"></a>Disconnecting Distraction</h2><p>原文链接: <a href="https://paulgraham.com/distraction.html">https://paulgraham.com/distraction.html</a></p><p>May 2008</p><p>Note: The strategy described at the end of this essay didn’t work. It would work for a while, and then I’d gradually find myself using the Internet on my work computer. I’m trying other strategies now, but I think this time I’ll wait till I’m sure they work before writing about them.</p><p>注：本文末尾提到的策略并未奏效。它会在一段时间内起作用，但渐渐地，我发现自己还是会用工作电脑上网。我现在正在尝试其他策略，但我想这次要等确定它们有效后再写出来。</p><p>Procrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.</p><p>拖延症靠干扰滋生。大多数人会觉得只是坐着无所事事很不舒服，于是你就通过做别的事情来逃避工作。</p><p>So one way to beat procrastination is to starve it of distractions. But that’s not as straightforward as it sounds, because there are people working hard to distract you. Distraction is not a static obstacle that you avoid like you might avoid a rock in the road. Distraction seeks you out.</p><p>所以，战胜拖延症的一个方法就是断绝它的干扰来源。但这并不像听起来那么简单，因为总有人在费尽心机地干扰你。干扰并非是像路上的石头那样，你可以避开的静态障碍。干扰会主动找上门来。</p><p>Chesterfield described dirt as matter out of place. Distracting is, similarly, desirable at the wrong time. And technology is continually being refined to produce more and more desirable things. Which means that as we learn to avoid one class of distractions, new ones constantly appear, like drug-resistant bacteria.</p><p>切斯特菲尔德曾将污垢描述为放错地方的物质。同样地，干扰就是在错误时间出现的合意事物。而科技在不断改进，催生着越来越多令人着迷的东西。这意味着，当我们学会避开一类干扰时，新的干扰会不断出现，就像抗药性细菌一样。</p><p>Television, for example, has after 50 years of refinement reached the point where it’s like visual crack. I realized when I was 13 that TV was addictive, so I stopped watching it. But I read recently that the average American watches 4 hours of TV a day. A quarter of their life.</p><p>例如，经过 50 年的改进，电视已经到了堪称视觉可卡因的地步。我 13 岁时就意识到电视会让人上瘾，于是就不再看了。但最近我看到数据称，美国人平均每天看 4 小时电视，这占了他们生命的四分之一。</p><p>TV is in decline now, but only because people have found even more addictive ways of wasting time. And what’s especially dangerous is that many happen at your computer. This is no accident. An ever larger percentage of office workers sit in front of computers connected to the Internet, and distractions always evolve toward the procrastinators.</p><p>如今电视的影响力在下降，只是因为人们找到了更让人上瘾的消磨时间的方式。而尤其危险的是，很多这种方式就出现在你的电脑上。这绝非偶然。越来越多的办公室职员坐在联网的电脑前，而干扰总会朝着拖延者的方向演变。</p><p>I remember when computers were, for me at least, exclusively for work. I might occasionally dial up a server to get mail or ftp files, but most of the time I was offline. All I could do was write and program. Now I feel as if someone snuck a television onto my desk. Terribly addictive things are just a click away. Run into an obstacle in what you’re working on? Hmm, I wonder what’s new online. Better check.</p><p>我记得，曾经电脑对我来说，至少是完全用于工作的。我偶尔会拨号连接服务器收邮件或用 FTP 传文件，但大多数时候我都是离线状态。我能做的只有写作和编程。现在我却感觉好像有人偷偷在我桌上放了一台电视。只要点一下鼠标，就能接触到极度令人上瘾的东西。在工作中遇到阻碍了？嗯，我想知道网上有什么新鲜事，还是去看看吧。</p><p>After years of carefully avoiding classic time sinks like TV, games, and Usenet, I still managed to fall prey to distraction, because I didn’t realize that it evolves. Something that used to be safe, using the Internet, gradually became more and more dangerous. Some days I’d wake up, get a cup of tea and check the news, then check email, then check the news again, then answer a few emails, then suddenly notice it was almost lunchtime and I hadn’t gotten any real work done. And this started to happen more and more often.</p><p>多年来，我小心翼翼地避开电视、游戏、新闻组等典型的时间黑洞，却还是没能逃过干扰的魔爪，因为我没意识到干扰是在不断演变的。曾经安全的上网行为，渐渐变得越来越危险。有些日子，我醒来后喝杯茶，看看新闻，再查收邮件，接着又看会儿新闻，然后回复几封邮件，突然就发现快到午饭时间了，而我还没做任何真正的工作。这种情况发生得越来越频繁。</p><p>It took me surprisingly long to realize how distracting the Internet had become, because the problem was intermittent. I ignored it the way you let yourself ignore a bug that only appears intermittently. When I was in the middle of a project, distractions weren’t really a problem. It was when I’d finished one project and was deciding what to do next that they always bit me.</p><p>我花了好长时间才意识到互联网变得多么让人分心，因为这个问题是间歇性的。我对它的忽视，就像忽视一个只偶尔出现的漏洞一样。当我全身心投入一个项目时，干扰其实不算什么问题。但当我完成一个项目，正在决定接下来做什么的时候，干扰总会缠上我。</p><p>Another reason it was hard to notice the danger of this new type of distraction was that social customs hadn’t yet caught up with it. If I’d spent a whole morning sitting on a sofa watching TV, I’d have noticed very quickly. That’s a known danger sign, like drinking alone. But using the Internet still looked and felt a lot like work.</p><p>这种新型干扰的危险性难以被察觉，另一个原因是社会习俗还没跟上它的脚步。如果我花一整个上午坐在沙发上看电视，我很快就会意识到这是在浪费时间。这是一个众所周知的危险信号，就像独自酗酒一样。但上网看起来和感觉上都很像在工作。</p><p>Eventually, though, it became clear that the Internet had become so much more distracting that I had to start treating it differently. Basically, I had to add a new application to my list of known time sinks: Firefox.</p><p>然而，最终我清楚地认识到，互联网已经变得如此让人分心，我必须用不同的方式对待它。基本上，我得在已知的时间黑洞清单上再添一个新成员：火狐浏览器。</p><hr><p>The problem is a hard one to solve because most people still need the Internet for some things. If you drink too much, you can solve that problem by stopping entirely. But you can’t solve the problem of overeating by stopping eating. I couldn’t simply avoid the Internet entirely, as I’d done with previous time sinks.</p><p>这个问题很难解决，因为大多数人仍然在某些事情上需要互联网。如果你喝酒过量，可以通过彻底戒酒来解决问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能像对待以前的时间黑洞那样，简单地完全避开互联网。</p><p>At first I tried rules. For example, I’d tell myself I was only going to use the Internet twice a day. But these schemes never worked for long. Eventually something would come up that required me to use it more than that. And then I’d gradually slip back into my old ways.</p><p>起初我尝试制定规则。比如，我告诉自己每天只上网两次。但这些方案都没能坚持太久。最终总会出现一些情况，要求我更频繁地上网。然后我就会逐渐回到以前的老样子。</p><p>Addictive things have to be treated as if they were sentient adversaries—as if there were a little man in your head always cooking up the most plausible arguments for doing whatever you’re trying to stop doing. If you leave a path to it, he’ll find it.</p><p>让人上瘾的东西必须被当作有知觉的对手来对待 —— 就好像你脑子里有个小人，总是在为你想停止做的事情编造最合理的理由。只要你给它留了条路，它就会找到。</p><p>The key seems to be visibility. The biggest ingredient in most bad habits is denial. So you have to make it so that you can’t merely slip into doing the thing you’re trying to avoid. It has to set off alarms.</p><p>关键似乎在于可见性。大多数坏习惯中，很大一部分原因是自我否认。所以你必须做到，不能只是不经意地就陷入你想避免的事情中。那必须得敲响警钟。</p><p>Maybe in the long term the right answer for dealing with Internet distractions will be software that watches and controls them. But in the meantime I’ve found a more drastic solution that definitely works: to set up a separate computer for using the Internet.</p><p>从长远来看，应对互联网干扰的正确方法可能是开发能够监控和控制它们的软件。但在此期间，我找到了一个更极端且绝对有效的解决方案：专门准备一台电脑用来上网。</p><p>I now leave wifi turned off on my main computer except when I need to transfer a file or edit a web page, and I have a separate laptop on the other side of the room that I use to check mail or browse the web. (Irony of ironies, it’s the computer Steve Huffman wrote Reddit on. When Steve and Alexis auctioned off their old laptops for charity, I bought them for the Y Combinator museum.)</p><p>现在，我的主电脑除非需要传输文件或编辑网页，否则都关闭无线网络，而在房间的另一边，我有一台专门的笔记本电脑用来查邮件或浏览网页。（极具讽刺意味的是，这台电脑是史蒂夫・赫夫曼开发Reddit时用的。当史蒂夫和亚历克西斯为慈善拍卖他们的旧笔记本电脑时，我把它们买了下来，放进了 Y Combinator 博物馆。）</p><p>My rule is that I can spend as much time online as I want, as long as I do it on that computer. And this turns out to be enough. When I have to sit on the other side of the room to check email or browse the web, I become much more aware of it. Sufficiently aware, in my case at least, that it’s hard to spend more than about an hour a day online.</p><p>我的规则是，只要在那台电脑上，我想花多少时间上网都可以。事实证明，这就足够了。当我必须坐到房间的另一边去查邮件或浏览网页时，我就会对上网这件事变得更加清醒。至少对我来说，这种清醒足以让我每天上网时间不超过一个小时。</p><p>And my main computer is now freed for work. If you try this trick, you’ll probably be struck by how different it feels when your computer is disconnected from the Internet. It was alarming to me how foreign it felt to sit in front of a computer that could only be used for work, because that showed how much time I must have been wasting.</p><p>而我的主电脑现在完全用来工作了。如果你也试试这个方法，你可能会惊讶地发现，当你的电脑断开互联网连接时，感觉是多么不同。坐在一台只能用来工作的电脑前，那种陌生感让我很震惊，因为这表明我以前肯定浪费了很多时间。</p><p>Wow. All I can do at this computer is work. Ok, I better work then.</p><p>哇，这台电脑只能用来工作。好吧，那我最好开始工作。</p><p>That’s the good part. Your old bad habits now help you to work. You’re used to sitting in front of that computer for hours at a time. But you can’t browse the web or check email now. What are you going to do? You can’t just sit there. So you start working.</p><p>这就是好的方面。你以前的坏习惯现在会帮助你工作。你习惯了在电脑前坐好几个小时。但现在你不能浏览网页或查邮件了。你打算做什么呢？你不能就坐在那里。所以你就开始工作了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们对孩子撒的谎</title>
    <link href="/2025/08/12/lies-we-tell-kids/"/>
    <url>/2025/08/12/lies-we-tell-kids/</url>
    
    <content type="html"><![CDATA[<h2 id="Lies-We-Tell-Kids"><a href="#Lies-We-Tell-Kids" class="headerlink" title="Lies We Tell Kids"></a>Lies We Tell Kids</h2><p>原文链接: <a href="https://paulgraham.com/lies.html">https://paulgraham.com/lies.html</a></p><p>May 2008</p><p>Adults lie constantly to kids. I’m not saying we should stop, but I think we should at least examine which lies we tell and why.</p><p>成年人一直在对孩子撒谎。我不是说我们应该停止，但我认为至少应该审视一下我们撒了哪些谎，以及为什么要撒这些谎。</p><p>There may also be a benefit to us. We were all lied to as kids, and some of the lies we were told still affect us. So by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told.</p><p>这对我们自己或许也有好处。我们小时候都被撒过谎，有些谎言至今仍在影响我们。所以，通过研究成年人对孩子撒谎的方式，我们或许能理清那些被灌输的谎言。</p><p>I’m using the word “lie” in a very general sense: not just overt falsehoods, but also all the more subtle ways we mislead kids. Though “lie” has negative connotations, I don’t mean to suggest we should never do this—just that we should pay attention when we do. [1]</p><p>我对 “谎言” 的定义很宽泛：不仅包括明显的假话，还包括所有那些更微妙的、误导孩子的方式。尽管 “谎言” 带有负面含义，但我并不是说我们永远不该这么做 —— 只是说，当我们这么做时，应该多加留意。[1]</p><p>One of the most remarkable things about the way we lie to kids is how broad the conspiracy is. All adults know what their culture lies to kids about: they’re the questions you answer “Ask your parents.” If a kid asked who won the World Series in 1982 or what the atomic weight of carbon was, you could just tell him. But if a kid asks you “Is there a God?” or “What’s a prostitute?” you’ll probably say “Ask your parents.”</p><p>成年人对孩子撒谎的方式中，最值得注意的一点是，这种 “共谋” 的范围有多广。所有成年人都知道自己的文化中哪些是对孩子隐瞒的内容：这些问题的答案通常是 “去问你爸妈”。如果孩子问 1982 年谁赢了世界职业棒球大赛，或者碳的原子量是多少，你可以直接告诉他。但如果孩子问 “有上帝吗？” 或者 “妓女是什么？”，你很可能会说 “去问你爸妈”。</p><p>Since we all agree, kids see few cracks in the view of the world presented to them. The biggest disagreements are between parents and schools, but even those are small. Schools are careful what they say about controversial topics, and if they do contradict what parents want their kids to believe, parents either pressure the school into keeping quiet or move their kids to a new school.</p><p>因为我们都达成了共识，所以孩子眼中的世界图景几乎没有破绽。最大的分歧存在于父母和学校之间，但即便如此也微不足道。学校在有争议的话题上会谨言慎行，如果他们的说法与父母希望孩子相信的内容相悖，父母要么会向学校施压让其保持沉默，要么会把孩子转到另一所学校。</p><p>The conspiracy is so thorough that most kids who discover it do so only by discovering internal contradictions in what they’re told. It can be traumatic for the ones who wake up during the operation. Here’s what happened to Einstein:</p><p>这种 “共谋” 如此彻底，以至于大多数孩子发现真相的方式，只是通过发现被告知的内容中存在内在矛盾。对那些在 “骗局” 中醒悟的孩子来说，这可能是创伤性的。爱因斯坦就有过这样的经历：</p><p>Through the reading of popular scientific books I soon reached the conviction that much in the stories of the Bible could not be true. The consequence was a positively fanatic freethinking coupled with the impression that youth is intentionally being deceived by the state through lies: it was a crushing impression. [2]</p><p>通过阅读通俗科学书籍，我很快确信，圣经故事中的很多内容不可能是真的。结果是，我产生了一种极度狂热的自由思想，同时觉得国家在故意通过谎言欺骗年轻人：这是一种毁灭性的印象。[2]</p><p>I remember that feeling. By 15 I was convinced the world was corrupt from end to end. That’s why movies like The Matrix have such resonance. Every kid grows up in a fake world. In a way it would be easier if the forces behind it were as clearly differentiated as a bunch of evil machines, and one could make a clean break just by taking a pill.</p><p>我记得那种感觉。15 岁时，我确信这个世界从头到尾都是腐朽的。这就是为什么《黑客帝国》这样的电影能引起如此强烈的共鸣。每个孩子都是在一个虚假的世界里长大的。从某种意义上说，如果幕后的力量能像一群邪恶的机器那样界限分明，只要吃一粒药丸就能彻底决裂，或许会更容易些。</p><h3 id="Protection"><a href="#Protection" class="headerlink" title="Protection"></a><strong>Protection</strong></h3><p><strong>保护</strong></p><p>If you ask adults why they lie to kids, the most common reason they give is to protect them. And kids do need protecting. The environment you want to create for a newborn child will be quite unlike the streets of a big city.</p><p>如果你问成年人为什么要对孩子撒谎，最常见的理由是 “为了保护他们”。而孩子确实需要保护。你想为新生儿创造的环境，与大城市的街道截然不同。</p><p>That seems so obvious it seems wrong to call it a lie. It’s certainly not a bad lie to tell, to give a baby the impression the world is quiet and warm and safe. But this harmless type of lie can turn sour if left unexamined.</p><p>这似乎显而易见，以至于称其为 “谎言” 都显得不妥。给婴儿营造一个安静、温暖、安全的世界印象，当然不是什么恶意的谎言。但这种无害的谎言如果不加审视，可能会变味。</p><p>Imagine if you tried to keep someone in as protected an environment as a newborn till age 18. To mislead someone so grossly about the world would seem not protection but abuse. That’s an extreme example, of course; when parents do that sort of thing it becomes national news. But you see the same problem on a smaller scale in the malaise teenagers feel in suburbia.</p><p>想象一下，如果你试图让一个人在像新生儿那样受保护的环境中待到 18 岁。如此严重地误导一个人对世界的认知，与其说是保护，不如说是虐待。当然，这是一个极端的例子；父母如果真的这么做，会成为全国新闻。但在郊区青少年的萎靡不振中，你能看到同样的问题，只是规模较小。</p><p>The main purpose of suburbia is to provide a protected environment for children to grow up in. And it seems great for 10 year olds. I liked living in suburbia when I was 10. I didn’t notice how sterile it was. My whole world was no bigger than a few friends’ houses I bicycled to and some woods I ran around in. On a log scale I was midway between crib and globe. A suburban street was just the right size. But as I grew older, suburbia started to feel suffocatingly fake.</p><p>郊区的主要目的是为孩子提供一个受保护的成长环境。对 10 岁的孩子来说，这似乎很棒。我 10 岁时就喜欢住在郊区，没注意到那里有多乏味。我的世界就局限在几个可以骑车去的朋友家，以及一片可以跑来跑去的树林。按对数尺度来看，我正处于婴儿床和整个世界的中间。郊区的街道大小刚刚好。但随着年龄增长，郊区开始让人觉得窒息般虚假。</p><p>Life can be pretty good at 10 or 20, but it’s often frustrating at 15. This is too big a problem to solve here, but certainly one reason life sucks at 15 is that kids are trapped in a world designed for 10 year olds.</p><p>10 岁或 20 岁时，生活可能很美好，但 15 岁时往往充满挫败感。这是一个太大的问题，无法在这里解决，但 15 岁的生活之所以糟糕，一个原因无疑是孩子被困在一个为 10 岁孩子设计的世界里。</p><p>What do parents hope to protect their children from by raising them in suburbia? A friend who moved out of Manhattan said merely that her 3 year old daughter “saw too much.” Off the top of my head, that might include: people who are high or drunk, poverty, madness, gruesome medical conditions, sexual behavior of various degrees of oddness, and violent anger.</p><p>父母希望通过在郊区抚养孩子，保护他们免受什么伤害呢？一个从曼哈顿搬出去的朋友只说，她 3 岁的女儿 “看到的太多了”。我随口就能想到，这些 “太多” 可能包括：吸毒或醉酒的人、贫困、精神失常、可怕的疾病、各种怪异的性行为，以及暴怒。</p><p>I think it’s the anger that would worry me most if I had a 3 year old. I was 29 when I moved to New York and I was surprised even then. I wouldn’t want a 3 year old to see some of the disputes I saw. It would be too frightening. A lot of the things adults conceal from smaller children, they conceal because they’d be frightening, not because they want to conceal the existence of such things. Misleading the child is just a byproduct.</p><p>如果我有一个 3 岁的孩子，我想最让我担心的是 “暴怒”。我 29 岁搬到纽约时，依然对此感到惊讶。我不希望一个 3 岁的孩子看到我见过的一些争执，那太可怕了。成年人对小孩子隐瞒的很多事情，是因为这些事情会吓到他们，而不是想隐瞒这些事情的存在。误导孩子只是副产品。</p><p>This seems one of the most justifiable types of lying adults do to kids. But because the lies are indirect we don’t keep a very strict accounting of them. Parents know they’ve concealed the facts about sex, and many at some point sit their kids down and explain more. But few tell their kids about the differences between the real world and the cocoon they grew up in. Combine this with the confidence parents try to instill in their kids, and every year you get a new crop of 18 year olds who think they know how to run the world.</p><p>这似乎是成年人对孩子撒谎中最合理的一种。但因为这些谎言是间接的，我们并没有严格地去核算它们。父母知道自己隐瞒了性知识，很多人会在某个时候坐下来给孩子做更多解释。但很少有父母会告诉孩子，真实世界与他们成长的 “保护罩” 之间有什么不同。再加上父母试图给孩子灌输的自信，每年都会有一批 18 岁的年轻人觉得自己懂得如何管理世界。</p><p>Don’t all 18 year olds think they know how to run the world? Actually this seems to be a recent innovation, no more than about 100 years old. In preindustrial times teenage kids were junior members of the adult world and comparatively well aware of their shortcomings. They could see they weren’t as strong or skillful as the village smith. In past times people lied to kids about some things more than we do now, but the lies implicit in an artificial, protected environment are a recent invention. Like a lot of new inventions, the rich got this first. Children of kings and great magnates were the first to grow up out of touch with the world. Suburbia means half the population can live like kings in that respect.</p><p>难道所有 18 岁的人都觉得自己懂得如何管理世界吗？实际上，这似乎是最近的新现象，不超过 100 年。在前工业化时代，青少年是成人世界的初级成员，相对清楚自己的不足。他们能看到自己不如村里的铁匠强壮或熟练。过去，人们在某些事情上对孩子的谎言比现在多，但这种隐含在人为保护环境中的谎言是最近才出现的。就像很多新发明一样，富人先享受到了。国王和大贵族的孩子是最早在与世界脱节的环境中长大的。郊区意味着一半的人口在这方面能像国王一样生活。</p><h3 id="Sex-and-Drugs"><a href="#Sex-and-Drugs" class="headerlink" title="Sex (and Drugs)"></a><strong>Sex (and Drugs)</strong></h3><p><strong>性（与毒品）</strong></p><p>I’d have different worries about raising teenage kids in New York. I’d worry less about what they’d see, and more about what they’d do. I went to college with a lot of kids who grew up in Manhattan, and as a rule they seemed pretty jaded. They seemed to have lost their virginity at an average of about 14 and by college had tried more drugs than I’d even heard of.</p><p>如果在纽约抚养十几岁的孩子，我的担忧会有所不同。我不太担心他们会看到什么，更担心他们会做什么。我上大学时认识很多在曼哈顿长大的孩子，总的来说，他们似乎相当世故。他们似乎平均 14 岁就失去了童贞，到了大学，尝试过的毒品比我听说过的还多。</p><p>The reasons parents don’t want their teenage kids having sex are complex. There are some obvious dangers: pregnancy and sexually transmitted diseases. But those aren’t the only reasons parents don’t want their kids having sex. The average parents of a 14 year old girl would hate the idea of her having sex even if there were zero risk of pregnancy or sexually transmitted diseases.</p><p>父母不希望十几岁的孩子发生性行为，原因很复杂。有一些明显的危险：怀孕和性传播疾病。但这并不是父母不希望孩子发生性行为的唯一原因。一个 14 岁女孩的普通父母，即使完全没有怀孕或性传播疾病的风险，也会厌恶她发生性行为的想法。</p><p>Kids can probably sense they aren’t being told the whole story. After all, pregnancy and sexually transmitted diseases are just as much a problem for adults, and they have sex.</p><p>孩子可能能感觉到他们没有被告知全部真相。毕竟，怀孕和性传播疾病对成年人来说也是问题，但成年人依然会有性行为。</p><p>What really bothers parents about their teenage kids having sex? Their dislike of the idea is so visceral it’s probably inborn. But if it’s inborn it should be universal, and there are plenty of societies where parents don’t mind if their teenage kids have sex—indeed, where it’s normal for 14 year olds to become mothers. So what’s going on? There does seem to be a universal taboo against sex with prepubescent children. One can imagine evolutionary reasons for that. And I think this is the main reason parents in industrialized societies dislike teenage kids having sex. They still think of them as children, even though biologically they’re not, so the taboo against child sex still has force.</p><p>父母真正介意十几岁的孩子发生性行为的原因是什么？他们对这个想法的反感如此本能，可能是与生俱来的。但如果这是与生俱来的，那它应该是普遍的，然而很多社会中，父母并不介意十几岁的孩子发生性行为 —— 事实上，14 岁成为母亲是很正常的。所以到底是怎么回事？似乎存在一种普遍的禁忌，反对与青春期前的儿童发生性行为。我们可以想象这背后的进化原因。而我认为，这是工业化社会的父母不喜欢青少年发生性行为的主要原因：他们仍然把青少年当作孩子，尽管从生物学上来说他们不是，所以对儿童性行为的禁忌依然有效。</p><p>One thing adults conceal about sex they also conceal about drugs: that it can cause great pleasure. That’s what makes sex and drugs so dangerous. The desire for them can cloud one’s judgement—which is especially frightening when the judgement being clouded is the already wretched judgement of a teenage kid.</p><p>成年人对性隐瞒的事情，对毒品也一样：它们能带来极大的快感。这正是性和毒品的危险之处。对它们的渴望会模糊人的判断力 —— 当被模糊的是青少年本就糟糕的判断力时，尤其令人恐惧。</p><p>Here parents’ desires conflict. Older societies told kids they had bad judgement, but modern parents want their children to be confident. This may well be a better plan than the old one of putting them in their place, but it has the side effect that after having implicitly lied to kids about how good their judgement is, we then have to lie again about all the things they might get into trouble with if they believed us.</p><p>这里存在父母的愿望冲突。更古老的社会会告诉孩子他们的判断力很差，但现代父母希望孩子自信。这很可能比过去那种 “让他们认清自己位置” 的做法更好，但副作用是：在含蓄地对孩子撒谎，说他们的判断力很好之后，我们又不得不再次撒谎，隐瞒那些如果他们相信了我们的话，可能会陷入麻烦的事情。</p><p>If parents told their kids the truth about sex and drugs, it would be: the reason you should avoid these things is that you have lousy judgement. People with twice your experience still get burned by them. But this may be one of those cases where the truth wouldn’t be convincing, because one of the symptoms of bad judgement is believing you have good judgement. When you’re too weak to lift something, you can tell, but when you’re making a decision impetuously, you’re all the more sure of it.</p><p>如果父母告诉孩子关于性和毒品的真相，应该是这样的：你应该避开这些东西，是因为你的判断力很差。比你有更多经验的人，依然会被它们伤害。但这可能是那种真相无法令人信服的情况，因为判断力差的一个表现就是，认为自己的判断力很好。当你举不起某个东西时，你能知道；但当你鲁莽地做决定时，你反而更确信自己是对的。</p><h3 id="Innocence"><a href="#Innocence" class="headerlink" title="Innocence"></a><strong>Innocence</strong></h3><p><strong>纯真</strong></p><p>Another reason parents don’t want their kids having sex is that they want to keep them innocent. Adults have a certain model of how kids are supposed to behave, and it’s different from what they expect of other adults.</p><p>父母不希望孩子发生性行为的另一个原因，是想让他们保持纯真。成年人对孩子应该有的行为有一个特定的模式，这与他们对其他成年人的期望不同。</p><p>One of the most obvious differences is the words kids are allowed to use. Most parents use words when talking to other adults that they wouldn’t want their kids using. They try to hide even the existence of these words for as long as they can. And this is another of those conspiracies everyone participates in: everyone knows you’re not supposed to swear in front of kids.</p><p>最明显的区别之一是孩子被允许使用的词汇。大多数父母在和其他成年人说话时会用一些词，却不希望自己的孩子用。他们会尽可能长时间地隐瞒这些词的存在。这也是所有人都参与的 “共谋” 之一：大家都知道不应该在孩子面前说脏话。</p><p>I’ve never heard more different explanations for anything parents tell kids than why they shouldn’t swear. Every parent I know forbids their children to swear, and yet no two of them have the same justification. It’s clear most start with not wanting kids to swear, then make up the reason afterward.</p><p>关于为什么不应该让孩子说脏话，我听过的父母解释差异最大。我认识的每个父母都禁止孩子说脏话，但没有两个人的理由是一样的。很明显，大多数父母是先不希望孩子说脏话，然后才编造理由。</p><p>So my theory about what’s going on is that the function of swearwords is to mark the speaker as an adult. There’s no difference in the meaning of “shit” and “poopoo.” So why should one be ok for kids to say and one forbidden? The only explanation is: by definition. [3]</p><p>所以我的理论是，脏话的作用是标志说话者是成年人。“狗屁” 和 “便便” 的意思没有区别。那为什么一个允许孩子说，另一个却禁止呢？唯一的解释是：定义如此。[3]</p><p>Why does it bother adults so much when kids do things reserved for adults? The idea of a foul-mouthed, cynical 10 year old leaning against a lamppost with a cigarette hanging out of the corner of his mouth is very disconcerting. But why?</p><p>为什么成年人会如此在意孩子做那些专属于成年人的事情？一个满嘴脏话、愤世嫉俗的 10 岁孩子，斜靠在路灯柱上，嘴角叼着烟，这种画面非常令人不安。但为什么呢？</p><p>One reason we want kids to be innocent is that we’re programmed to like certain kinds of helplessness. I’ve several times heard mothers say they deliberately refrained from correcting their young children’s mispronunciations because they were so cute. And if you think about it, cuteness is helplessness. Toys and cartoon characters meant to be cute always have clueless expressions and stubby, ineffectual limbs.</p><p>我们希望孩子纯真，一个原因是我们天生就喜欢某种无助。我好几次听到母亲们说，她们故意不纠正幼儿的发音错误，因为那很可爱。仔细想想，可爱就是无助。那些被设计成可爱的玩具和卡通人物，总是带着懵懂的表情，四肢粗短无力。</p><p>It’s not surprising we’d have an inborn desire to love and protect helpless creatures, considering human offspring are so helpless for so long. Without the helplessness that makes kids cute, they’d be very annoying. They’d merely seem like incompetent adults. But there’s more to it than that. The reason our hypothetical jaded 10 year old bothers me so much is not just that he’d be annoying, but that he’d have cut off his prospects for growth so early. To be jaded you have to think you know how the world works, and any theory a 10 year old had about that would probably be a pretty narrow one.</p><p>考虑到人类后代在很长一段时间内都如此无助，我们天生就有爱护和保护无助生物的欲望，这并不奇怪。如果没有那种让孩子显得可爱的无助，他们会非常令人讨厌，就像一群无能的成年人。但不止于此。我们假设的那个世故的 10 岁孩子让我不安，不仅因为他会令人讨厌，还因为他过早地切断了自己成长的可能性。要变得世故，你必须认为自己知道世界是如何运作的，而一个 10 岁孩子对世界的任何理论，很可能都非常狭隘。</p><p>Innocence is also open-mindedness. We want kids to be innocent so they can continue to learn. Paradoxical as it sounds, there are some kinds of knowledge that get in the way of other kinds of knowledge. If you’re going to learn that the world is a brutal place full of people trying to take advantage of one another, you’re better off learning it last. Otherwise you won’t bother learning much more.</p><p>纯真也是开放的心态。我们希望孩子纯真，这样他们才能继续学习。听起来矛盾，但有些知识会阻碍其他知识的学习。如果你要学习这个世界是一个残酷的地方，充满了想利用他人的人，那最好最后再学这个。否则，你就不会再费心去学更多东西了。</p><p>Very smart adults often seem unusually innocent, and I don’t think this is a coincidence. I think they’ve deliberately avoided learning about certain things. Certainly I do. I used to think I wanted to know everything. Now I know I don’t.</p><p>非常聪明的成年人往往显得异常纯真，我不认为这是巧合。我认为他们故意避免了解某些事情。我当然是这样。我曾经以为自己想知道一切，现在才知道并非如此。</p><h3 id="Death"><a href="#Death" class="headerlink" title="Death"></a><strong>Death</strong></h3><p><strong>死亡</strong></p><p>After sex, death is the topic adults lie most conspicuously about to kids. Sex I believe they conceal because of deep taboos. But why do we conceal death from kids? Probably because small children are particularly horrified by it. They want to feel safe, and death is the ultimate threat.</p><p>除了性，成年人对孩子最明显撒谎的话题就是死亡。我认为他们隐瞒性是因为深层的禁忌。但我们为什么要对孩子隐瞒死亡呢？可能是因为小孩子对死亡尤其恐惧。他们想感到安全，而死亡是终极威胁。</p><p>One of the most spectacular lies our parents told us was about the death of our first cat. Over the years, as we asked for more details, they were compelled to invent more, so the story grew quite elaborate. The cat had died at the vet’s office. Of what? Of the anaesthesia itself. Why was the cat at the vet’s office? To be fixed. And why had such a routine operation killed it? It wasn’t the vet’s fault; the cat had a congenitally weak heart; the anaesthesia was too much for it; but there was no way anyone could have known this in advance. It was not till we were in our twenties that the truth came out: my sister, then about three, had accidentally stepped on the cat and broken its back.</p><p>父母对我们撒过的一个惊人谎言，是关于我们第一只猫的死亡。多年来，随着我们追问更多细节，他们不得不编造更多内容，所以这个故事变得相当复杂。猫是在兽医诊所死的。死于什么？死于麻醉本身。猫为什么去兽医诊所？去做绝育手术。为什么一个常规手术会杀死它？这不是兽医的错；猫有先天性心脏病；麻醉对它来说负担太重；但事先没人能知道。直到我们二十多岁，真相才浮出水面：当时大约三岁的妹妹不小心踩到了猫，折断了它的脊椎。</p><p>They didn’t feel the need to tell us the cat was now happily in cat heaven. My parents never claimed that people or animals who died had “gone to a better place,” or that we’d meet them again. It didn’t seem to harm us.</p><p>他们觉得没必要告诉我们猫现在在 “猫天堂” 过得很快乐。我父母从未说过死去的人或动物 “去了更好的地方”，或者我们会再见到他们。这似乎并没有伤害到我们。</p><p>My grandmother told us an edited version of the death of my grandfather. She said they’d been sitting reading one day, and when she said something to him, he didn’t answer. He seemed to be asleep, but when she tried to rouse him, she couldn’t. “He was gone.” Having a heart attack sounded like falling asleep. Later I learned it hadn’t been so neat, and the heart attack had taken most of a day to kill him.</p><p>祖母给我们讲了祖父死亡的 “精简版”。她说有一天他们坐着看书，她跟他说话时，他没有回应。他看起来像睡着了，但她想叫醒他时，却做不到。“他就那样走了。” 心脏病发作听起来就像睡着了。后来我才知道，事情并非如此简单，那次心脏病发作花了将近一天才夺走他的生命。</p><p>Along with such outright lies, there must have been a lot of changing the subject when death came up. I can’t remember that, of course, but I can infer it from the fact that I didn’t really grasp I was going to die till I was about 19. How could I have missed something so obvious for so long? Now that I’ve seen parents managing the subject, I can see how: questions about death are gently but firmly turned aside.</p><p>除了这种直白的谎言，当死亡话题出现时，他们肯定还会经常转移话题。我当然不记得了，但我能推断出来：因为我直到 19 岁左右才真正明白自己会死。这么明显的事情，我怎么会忽略这么久？现在我看到父母如何处理这个话题，就明白了：关于死亡的问题会被温柔但坚决地岔开。</p><p>On this topic, especially, they’re met half-way by kids. Kids often want to be lied to. They want to believe they’re living in a comfortable, safe world as much as their parents want them to believe it. [4]</p><p>尤其是在这个话题上，孩子在某种程度上也配合着被欺骗。他们和父母一样，想相信自己生活在一个舒适、安全的世界里。[4]</p><h3 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a><strong>Identity</strong></h3><p><strong>身份</strong></p><p>Some parents feel a strong adherence to an ethnic or religious group and want their kids to feel it too. This usually requires two different kinds of lying: the first is to tell the child that he or she is an X, and the second is whatever specific lies Xes differentiate themselves by believing. [5]</p><p>有些父母强烈认同某个种族或宗教群体，也希望孩子有同样的认同。这通常需要两种不同的谎言：第一种是告诉孩子 “你是 X 群体的人”；第二种是 X 群体为了区分自己而相信的那些特定谎言。[5]</p><p>Telling a child they have a particular ethnic or religious identity is one of the stickiest things you can tell them. Almost anything else you tell a kid, they can change their mind about later when they start to think for themselves. But if you tell a kid they’re a member of a certain group, that seems nearly impossible to shake.</p><p>告诉孩子他们有特定的种族或宗教身份，是你能对他们说的最棘手的事情之一。你告诉孩子的几乎所有其他事情，他们长大后开始独立思考时，都可以改变想法。但如果你告诉孩子他们是某个群体的成员，这似乎几乎无法动摇。</p><p>This despite the fact that it can be one of the most premeditated lies parents tell. When parents are of different religions, they’ll often agree between themselves that their children will be “raised as Xes.” And it works. The kids obligingly grow up considering themselves as Xes, despite the fact that if their parents had chosen the other way, they’d have grown up considering themselves as Ys.</p><p>尽管这可能是父母最蓄意的谎言之一。当父母信仰不同宗教时，他们往往会达成一致，让孩子 “被培养成 X 群体的人”。而且这很有效。孩子们会顺从地长大，认为自己是 X 群体的人，尽管如果父母选择了另一种方式，他们会长大认为自己是 Y 群体的人。</p><p>One reason this works so well is the second kind of lie involved. The truth is common property. You can’t distinguish your group by doing things that are rational, and believing things that are true. If you want to set yourself apart from other people, you have to do things that are arbitrary, and believe things that are false. And after having spent their whole lives doing things that are arbitrary and believing things that are false, and being regarded as odd by “outsiders” on that account, the cognitive dissonance pushing children to regard themselves as Xes must be enormous. If they aren’t an X, why are they attached to all these arbitrary beliefs and customs? If they aren’t an X, why do all the non-Xes call them one?</p><p>这种做法之所以如此有效，原因之一在于其中的第二种谎言。真相是共同财产。你不能通过做理性的事、相信真实的事来区分自己的群体。如果你想与他人区分开来，就必须做武断的事，相信虚假的事。当孩子一生都在做武断的事、相信虚假的事，并因此被 “外人” 视为怪异时，推动他们认为自己是 X 群体成员的认知失调一定非常强烈。如果他们不是 X 群体的人，为什么会执着于这些武断的信仰和习俗？如果他们不是 X 群体的人，为什么所有非 X 群体的人都这么称呼他们？</p><p>This form of lie is not without its uses. You can use it to carry a payload of beneficial beliefs, and they will also become part of the child’s identity. You can tell the child that in addition to never wearing the color yellow, believing the world was created by a giant rabbit, and always snapping their fingers before eating fish, Xes are also particularly honest and industrious. Then X children will grow up feeling it’s part of their identity to be honest and industrious.</p><p>这种谎言并非毫无用处。你可以用它来传递一些有益的信念，这些信念也会成为孩子身份的一部分。你可以告诉孩子，除了从不穿黄色、相信世界是由一只巨大的兔子创造的、吃鱼前必须打响指之外，X 群体的人还特别诚实和勤奋。然后 X 群体的孩子长大后会觉得，诚实和勤奋是自己身份的一部分。</p><p>This probably accounts for a lot of the spread of modern religions, and explains why their doctrines are a combination of the useful and the bizarre. The bizarre half is what makes the religion stick, and the useful half is the payload. [6]</p><p>这可能解释了很多现代宗教的传播，也解释了为什么它们的教义是有用内容和怪异内容的结合。怪异的部分让宗教得以维系，有用的部分是负荷( “payload”)。[6]</p><h3 id="Authority"><a href="#Authority" class="headerlink" title="Authority"></a><strong>Authority</strong></h3><p><strong>权威</strong></p><p>One of the least excusable reasons adults lie to kids is to maintain power over them. Sometimes these lies are truly sinister, like a child molester telling his victims they’ll get in trouble if they tell anyone what happened to them. Others seem more innocent; it depends how badly adults lie to maintain their power, and what they use it for.</p><p>成年人对孩子撒谎最不可原谅的原因之一，是为了维持对他们的控制。有时这些谎言真的很险恶，比如恋童癖告诉受害者，如果他们告诉别人发生了什么，就会惹上麻烦。其他一些则看似无辜；这取决于成年人为了维持权力撒了多少谎，以及他们用权力做什么。</p><p>Most adults make some effort to conceal their flaws from children. Usually their motives are mixed. For example, a father who has an affair generally conceals it from his children. His motive is partly that it would worry them, partly that this would introduce the topic of sex, and partly (a larger part than he would admit) that he doesn’t want to tarnish himself in their eyes.</p><p>大多数成年人都会努力向孩子隐瞒自己的缺点。他们的动机通常很复杂。例如，一个有外遇的父亲通常会对孩子隐瞒这件事。他的动机一部分是怕孩子担心，一部分是这会引出性话题，还有一部分（比他承认的要多）是不想在孩子眼中玷污自己的形象。</p><p>If you want to learn what lies are told to kids, read almost any book written to teach them about “issues.” [7] Peter Mayle wrote one called Why Are We Getting a Divorce? It begins with the three most important things to remember about divorce, one of which is:<br>You shouldn’t put the blame on one parent, because divorce is never only one person’s fault. [8]</p><p>如果你想知道人们对孩子撒了哪些谎，读一读几乎所有为了教他们 “事理” 而写的书。[7] 彼得・梅尔写过一本叫《我们为什么要离婚？》的书。开头列出了关于离婚最需要记住的三件事，其中一件是：<br>你不应该责怪父母中的一方，因为离婚从来都不只是一个人的错。[8]</p><p>Really? When a man runs off with his secretary, is it always partly his wife’s fault? But I can see why Mayle might have said this. Maybe it’s more important for kids to respect their parents than to know the truth about them.</p><p>真的吗？当一个男人和他的秘书私奔时，这也总是有他妻子的一部分责任吗？但我能理解梅尔为什么这么说。或许对孩子来说，尊重父母比知道关于他们的真相更重要。</p><p>But because adults conceal their flaws, and at the same time insist on high standards of behavior for kids, a lot of kids grow up feeling they fall hopelessly short. They walk around feeling horribly evil for having used a swearword, while in fact most of the adults around them are doing much worse things.</p><p>但因为成年人隐瞒自己的缺点，同时又坚持让孩子遵守高标准的行为规范，很多孩子长大后觉得自己无可救药地失败了。他们会因为说了一句脏话而觉得自己极其邪恶，而事实上，他们周围的大多数成年人做得更糟。</p><p>This happens in intellectual as well as moral questions. The more confident people are, the more willing they seem to be to answer a question “I don’t know.” Less confident people feel they have to have an answer or they’ll look bad. My parents were pretty good about admitting when they didn’t know things, but I must have been told a lot of lies of this type by teachers, because I rarely heard a teacher say “I don’t know” till I got to college. I remember because it was so surprising to hear someone say that in front of a class.</p><p>这在知识问题和道德问题上都存在。越自信的人，似乎越愿意回答 “我不知道”。不太自信的人觉得自己必须有答案，否则会显得很糟糕。我的父母很擅长承认自己不知道的事情，但我肯定被老师撒过很多这种谎，因为直到上大学，我才很少听到老师说 “我不知道”。我记得这一点，因为在全班面前听到有人这么说，太令人惊讶了。</p><p>The first hint I had that teachers weren’t omniscient came in sixth grade, after my father contradicted something I’d learned in school. When I protested that the teacher had said the opposite, my father replied that the guy had no idea what he was talking about—that he was just an elementary school teacher, after all.</p><p>我第一次意识到老师并非无所不知，是在六年级，我父亲反驳了我在学校学到的东西。当我抗议说老师说的正好相反时，父亲回答说，那家伙根本不知道自己在说什么 —— 毕竟，他只是个小学老师。</p><p>Just a teacher? The phrase seemed almost grammatically ill-formed. Didn’t teachers know everything about the subjects they taught? And if not, why were they the ones teaching us?</p><p>只是个老师？这句话听起来几乎在语法上都不通。老师难道不应该知道他们教的科目里的所有东西吗？如果不是，那为什么是他们来教我们？</p><p>The sad fact is, US public school teachers don’t generally understand the stuff they’re teaching very well. There are some sterling exceptions, but as a rule people planning to go into teaching rank academically near the bottom of the college population. So the fact that I still thought at age 11 that teachers were infallible shows what a job the system must have done on my brain.</p><p>可悲的是，美国公立学校的老师通常并不太理解他们所教的内容。当然有一些优秀的例外，但通常来说，打算从事教学工作的人，在大学生中的学术排名接近底部。所以，我 11 岁时还认为老师是不会犯错的，这说明这个系统对我的大脑做了多大的 “改造”。</p><h3 id="School"><a href="#School" class="headerlink" title="School"></a><strong>School</strong></h3><p><strong>学校</strong></p><p>What kids get taught in school is a complex mix of lies. The most excusable are those told to simplify ideas to make them easy to learn. The problem is, a lot of propaganda gets slipped into the curriculum in the name of simplification.</p><p>孩子在学校学到的东西是谎言的复杂混合体。最可原谅的是那些为了简化概念、方便学习而说的谎。问题是，很多宣传以简化的名义被塞进了课程。</p><p>Public school textbooks represent a compromise between what various powerful groups want kids to be told. The lies are rarely overt. Usually they consist either of omissions or of over-emphasizing certain topics at the expense of others. The view of history we got in elementary school was a crude hagiography, with at least one representative of each powerful group.</p><p>公立学校的教科书是各种权力群体希望孩子被告知的内容之间的妥协。谎言很少是直白的。通常要么是遗漏，要么是过分强调某些话题而忽略其他。我们在小学学到的历史观是粗糙的圣徒传，每个权力群体至少有一个代表。</p><p>The famous scientists I remember were Einstein, Marie Curie, and George Washington Carver. Einstein was a big deal because his work led to the atom bomb. Marie Curie was involved with X-rays. But I was mystified about Carver. He seemed to have done stuff with peanuts.</p><p>我记得的著名科学家有爱因斯坦、玛丽・居里和乔治・华盛顿・卡佛。爱因斯坦很重要，因为他的工作促成了原子弹的诞生。玛丽・居里与 X 射线有关。但我对卡佛感到困惑，他似乎在花生上做了些研究。</p><p>It’s obvious now that he was on the list because he was black (and for that matter that Marie Curie was on it because she was a woman), but as a kid I was confused for years about him. I wonder if it wouldn’t have been better just to tell us the truth: that there weren’t any famous black scientists. Ranking George Washington Carver with Einstein misled us not only about science, but about the obstacles blacks faced in his time.</p><p>现在很明显，他能上榜是因为他是黑人（玛丽・居里能上榜是因为她是女性），但小时候，我多年来一直对他感到困惑。我想，或许直接告诉我们真相会更好：当时没有著名的黑人科学家。把乔治・华盛顿・卡佛与爱因斯坦相提并论，不仅误导了我们对科学的认知，也误导了我们对他那个时代黑人所面临的障碍的认知。</p><p>As subjects got softer, the lies got more frequent. By the time you got to politics and recent history, what we were taught was pretty much pure propaganda. For example, we were taught to regard political leaders as saints—especially the recently martyred Kennedy and King. It was astonishing to learn later that they’d both been serial womanizers, and that Kennedy was a speed freak to boot. (By the time King’s plagiarism emerged, I’d lost the ability to be surprised by the misdeeds of famous people.)</p><p>学科越 “软”，谎言就越多。到了政治和近代史，我们学到的几乎全是宣传。例如，我们被教导要把政治领袖视为圣人 —— 尤其是最近被暗杀的肯尼迪和金。后来得知他们都是连环花花公子，肯尼迪还是个安非他命成瘾者，真是令人震惊。（当金的剽窃行为曝光时，我已经对名人的恶行不再感到惊讶了。）</p><p>I doubt you could teach kids recent history without teaching them lies, because practically everyone who has anything to say about it has some kind of spin to put on it. Much recent history consists of spin. It would probably be better just to teach them metafacts like that.</p><p>我怀疑，教孩子近代史不可能不撒谎，因为几乎每个对此有话可说的人，都想加入自己的偏见。很多近代史本身就是偏见。或许最好只是教他们诸如此类的 “元事实”。</p><p>Probably the biggest lie told in schools, though, is that the way to succeed is through following “the rules.” In fact most such rules are just hacks to manage large groups efficiently.</p><p>不过，学校里最大的谎言可能是：成功的途径是遵守 “规则”。事实上，大多数这样的规则只是为了高效管理大型群体而采取的权宜之计。</p><h3 id="Peace"><a href="#Peace" class="headerlink" title="Peace"></a><strong>Peace</strong></h3><p><strong>和谐</strong></p><p>Of all the reasons we lie to kids, the most powerful is probably the same mundane reason they lie to us.</p><p>在我们对孩子撒谎的所有原因中，最主要的可能和他们对我们撒谎的原因一样平凡。</p><p>Often when we lie to people it’s not part of any conscious strategy, but because they’d react violently to the truth. Kids, almost by definition, lack self-control. They react violently to things—and so they get lied to a lot. [9]</p><p>我们对别人撒谎，往往不是出于什么有意识的策略，而是因为他们会对真相做出激烈反应。孩子，几乎就定义而言，缺乏自控力。他们会对事情做出激烈反应 —— 所以他们经常被撒谎。[9]</p><p>A few Thanksgivings ago, a friend of mine found himself in a situation that perfectly illustrates the complex motives we have when we lie to kids. As the roast turkey appeared on the table, his alarmingly perceptive 5 year old son suddenly asked if the turkey had wanted to die. Foreseeing disaster, my friend and his wife rapidly improvised: yes, the turkey had wanted to die, and in fact had lived its whole life with the aim of being their Thanksgiving dinner. And that (phew) was the end of that.</p><p>几年前的一个感恩节，我的一个朋友遇到了一件事，完美诠释了我们对孩子撒谎时的复杂动机。当烤火鸡端上桌时，他那个异常敏锐的 5 岁儿子突然问：“这只火鸡愿意死吗？” 预见到灾难的朋友和妻子迅速编了个谎：“是的，这只火鸡愿意死，事实上，它一生的目标就是成为我们的感恩节晚餐。” 然后（呼），这事就过去了。</p><p>Whenever we lie to kids to protect them, we’re usually also lying to keep the peace.</p><p>每当我们为了保护孩子而对他们撒谎时，通常也是为了维持和谐。</p><p>One consequence of this sort of calming lie is that we grow up thinking horrible things are normal. It’s hard for us to feel a sense of urgency as adults over something we’ve literally been trained not to worry about. When I was about 10 I saw a documentary on pollution that put me into a panic. It seemed the planet was being irretrievably ruined. I went to my mother afterward to ask if this was so. I don’t remember what she said, but she made me feel better, so I stopped worrying about it.</p><p>这种 “安抚性谎言” 的一个后果是，我们长大后会认为可怕的事情是正常的。我们很难像成年人那样对某件事感到紧迫，因为我们实际上被训练得不去担心它。我 10 岁左右时看了一部关于污染的纪录片，吓得惊慌失措。当时觉得地球正被不可挽回地破坏。后来我去找妈妈，问是不是这样。我不记得她说了什么，但她让我感觉好多了，所以我就不再担心了。</p><p>That was probably the best way to handle a frightened 10 year old. But we should understand the price. This sort of lie is one of the main reasons bad things persist: we’re all trained to ignore them.</p><p>这可能是处理一个受惊的 10 岁孩子的最佳方式。但我们应该明白其代价。这种谎言是很多坏事持续存在的主要原因之一：我们都被训练得去忽略它们。</p><h3 id="Detox"><a href="#Detox" class="headerlink" title="Detox"></a><strong>Detox</strong></h3><p><strong>解毒</strong></p><p>A sprinter in a race almost immediately enters a state called “oxygen debt.” His body switches to an emergency source of energy that’s faster than regular aerobic respiration. But this process builds up waste products that ultimately require extra oxygen to break down, so at the end of the race he has to stop and pant for a while to recover.</p><p>赛跑中的短跑运动员几乎会立即进入一种叫做 “氧债” 的状态。他的身体会切换到一种比常规有氧呼吸更快的应急能量来源。但这个过程会产生废物，最终需要额外的氧气来分解，所以比赛结束后，他必须停下来喘一会儿气才能恢复。</p><p>We arrive at adulthood with a kind of truth debt. We were told a lot of lies to get us (and our parents) through our childhood. Some may have been necessary. Some probably weren’t. But we all arrive at adulthood with heads full of lies.</p><p>我们成年时，都背负着一种 “真相债”。为了让我们（和我们的父母）度过童年，我们被撒了很多谎。有些可能是必要的，有些可能不是。但我们所有人成年时，脑子里都塞满了谎言。</p><p>There’s never a point where the adults sit you down and explain all the lies they told you. They’ve forgotten most of them. So if you’re going to clear these lies out of your head, you’re going to have to do it yourself.</p><p>从来没有哪个时刻，成年人会坐下来向你解释他们对你撒的所有谎。他们已经忘记了大部分。所以，如果你想把这些谎言从脑子里清除出去，就必须自己动手。</p><p>Few do. Most people go through life with bits of packing material adhering to their minds and never know it. You probably never can completely undo the effects of lies you were told as a kid, but it’s worth trying. I’ve found that whenever I’ve been able to undo a lie I was told, a lot of other things fell into place.</p><p>很少有人会这么做。大多数人一生都带着脑子里的 “包装碎片”，却从未意识到。你可能永远无法完全消除小时候被灌输的谎言带来的影响，但值得一试。我发现，每当我能解开一个被告知的谎言时，很多其他事情都会豁然开朗。</p><p>Fortunately, once you arrive at adulthood you get a valuable new resource you can use to figure out what lies you were told. You’re now one of the liars. You get to watch behind the scenes as adults spin the world for the next generation of kids.</p><p>幸运的是，一旦成年，你就会获得一种宝贵的新资源，可以用来弄清楚自己小时候被撒了哪些谎。你现在成了撒谎者之一。你可以在幕后观察成年人如何为下一代孩子构建这个世界。</p><p>The first step in clearing your head is to realize how far you are from a neutral observer. When I left high school I was, I thought, a complete skeptic. I’d realized high school was crap. I thought I was ready to question everything I knew. But among the many other things I was ignorant of was how much debris there already was in my head. It’s not enough to consider your mind a blank slate. You have to consciously erase it.</p><p>理清思路的第一步，是意识到自己离一个中立的观察者有多远。我高中毕业时，自认为是一个彻底的怀疑论者。我意识到高中很糟糕，以为自己已经准备好质疑所知道的一切。但我忽略了很多其他事情，包括我脑子里已经有了多少 “垃圾”。把自己的思想视为一张白纸是不够的，你必须有意识地去擦拭它。</p><p>Notes</p><p>[1] One reason I stuck with such a brutally simple word is that the lies we tell kids are probably not quite as harmless as we think. If you look at what adults told children in the past, it’s shocking how much they lied to them. Like us, they did it with the best intentions. So if we think we’re as open as one could reasonably be with children, we’re probably fooling ourselves. Odds are people in 100 years will be as shocked at some of the lies we tell as we are at some of the lies people told 100 years ago.</p><p>[1] 我坚持用 “谎言” 这个极其简单的词，原因之一是我们对孩子撒的谎，可能并不像我们想的那么无害。看看过去的成年人对孩子说过什么，你会震惊于他们撒谎的程度。和我们一样，他们的初衷是好的。所以，如果我们觉得自己已经尽可能对孩子坦诚了，很可能是在自欺欺人。有很大概率，100 年后的人们会对我们现在撒的某些谎感到震惊，就像我们对 100 年前的人撒的某些谎感到震惊一样。</p><p>I can’t predict which these will be, and I don’t want to write an essay that will seem dumb in 100 years. So instead of using special euphemisms for lies that seem excusable according to present fashions, I’m just going to call all our lies lies.</p><p>我无法预测哪些谎言会是如此，也不想写一篇 100 年后会显得愚蠢的文章。所以，我不会用那些符合当下潮流、看似 “情有可原” 的委婉语来指代谎言，而是直接把所有谎言都称为 “谎言”。</p><p>(I have omitted one type: lies told to play games with kids’ credulity. These range from “make-believe,” which is not really a lie because it’s told with a wink, to the frightening lies told by older siblings. There’s not much to say about these: I wouldn’t want the first type to go away, and wouldn’t expect the second type to.)</p><p>（我省略了一种谎言：为了戏耍孩子的轻信而撒的谎。这类谎言范围很广，从 “假装游戏”（这其实不算真正的谎言，因为说的时候带着暗示）到年长的兄弟姐妹说的吓人谎言。关于这些，没太多好说的：我不希望第一种消失，也不指望第二种会消失。）</p><p>[2] Calaprice, Alice (ed.), The Quotable Einstein, Princeton University Press, 1996.</p><p>[2] 卡拉普赖斯，爱丽丝（编），《爱因斯坦语录》，普林斯顿大学出版社，1996 年。</p><p>[3] If you ask parents why kids shouldn’t swear, the less educated ones usually reply with some question-begging answer like “it’s inappropriate,” while the more educated ones come up with elaborate rationalizations. In fact the less educated parents seem closer to the truth.</p><p>[3] 如果你问父母为什么孩子不能说脏话，教育程度较低的父母通常会给出一些循环论证的答案，比如 “这不合适”，而教育程度较高的父母则会想出复杂的合理化解释。事实上，教育程度较低的父母似乎更接近真相。</p><p>[4] As a friend with small children pointed out, it’s easy for small children to consider themselves immortal, because time seems to pass so slowly for them. To a 3 year old, a day feels like a month might to an adult. So 80 years sounds to him like 2400 years would to us.</p><p>[4] 正如一位有小孩的朋友指出的，小孩子很容易觉得自己是不朽的，因为对他们来说，时间过得太慢了。对一个 3 岁的孩子来说，一天的感觉就像成年人眼中的一个月。所以，80 年对他来说，就像 2400 年对我们来说一样漫长。</p><p>[5] I realize I’m going to get endless grief for classifying religion as a type of lie. Usually people skirt that issue with some equivocation implying that lies believed for a sufficiently long time by sufficiently large numbers of people are immune to the usual standards for truth. But because I can’t predict which lies future generations will consider inexcusable, I can’t safely omit any type we tell. Yes, it seems unlikely that religion will be out of fashion in 100 years, but no more unlikely than it would have seemed to someone in 1880 that schoolchildren in 1980 would be taught that masturbation was perfectly normal and not to feel guilty about it.</p><p>[5] 我知道，把宗教归为一种谎言会招来无尽的指责。通常人们会含糊其辞地回避这个问题，暗示只要足够多的人相信足够长时间的谎言，就可以不受常规真理标准的评判。但因为我无法预测未来世代会认为哪些谎言不可原谅，所以不能贸然省略我们说过的任何一种谎言。诚然，100 年后宗教可能依然流行，这看似合理，但这并不比 1880 年的人预测 1980 年的学童会被教导 “自慰完全正常，不必为此内疚” 更不合理。</p><p>[6] Unfortunately the payload can consist of bad customs as well as good ones. For example, there are certain qualities that some groups in America consider “acting white.” In fact most of them could as accurately be called “acting Japanese.” There’s nothing specifically white about such customs. They’re common to all cultures with long traditions of living in cities. So it is probably a losing bet for a group to consider behaving the opposite way as part of its identity.</p><p>[6] 不幸的是，这种 “承载的内容” 既可能包含好习俗，也可能包含坏习俗。例如，美国有些群体认为某些品质是 “装白人”。事实上，这些品质更准确地说应该是 “装日本人”。这类习俗并非白人所特有，而是所有有着悠久城市生活传统的文化所共有的。所以，一个群体把与之相反的行为当作自身身份的一部分，很可能是个失败的赌注。</p><p>[7] In this context, “issues” basically means “things we’re going to lie to them about.” That’s why there’s a special name for these topics.</p><p>[7] 在这种语境下，“议题”（issues）本质上就是 “我们要对他们撒谎的事情”。这就是为什么这些话题有专门的名称。</p><p>[8] Mayle, Peter, Why Are We Getting a Divorce?, Harmony, 1988.</p><p>[8] 梅尔，彼得，《我们为什么要离婚？》，和谐出版社，1988 年。</p><p>[9] The ironic thing is, this is also the main reason kids lie to adults. If you freak out when people tell you alarming things, they won’t tell you them. Teenagers don’t tell their parents what happened that night they were supposed to be staying at a friend’s house for the same reason parents don’t tell 5 year olds the truth about the Thanksgiving turkey. They’d freak if they knew.</p><p>[9] 讽刺的是，这也是孩子对成年人撒谎的主要原因。如果你听到惊人的消息就反应激烈，别人就不会告诉你了。青少年不告诉父母他们本应在朋友家过夜的那晚发生了什么，和父母不告诉 5 岁孩子感恩节火鸡的真相，原因是一样的：怕他们知道后反应激烈。</p><p>Thanks to Sam Altman, Marc Andreessen, Trevor Blackwell, Patrick Collison, Jessica Livingston, Jackie McDonough, Robert Morris, and David Sloo for reading drafts of this. And since there are some controversial ideas here, I should add that none of them agreed with everything in it.</p><p>感谢山姆・奥特曼、马克・安德森、特雷弗・布莱克韦尔、帕特里克・科里森、杰西卡・利文斯顿、杰基・麦克多诺、罗伯特・莫里斯和大卫・斯卢阅读了本文的草稿。由于文中有一些有争议的观点，我应该补充一句：他们并非都同意文中的所有内容。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来时的路——保罗·格雷厄姆</title>
    <link href="/2025/08/09/what-i-worked-on/"/>
    <url>/2025/08/09/what-i-worked-on/</url>
    
    <content type="html"><![CDATA[<h2 id="What-I-Worked-On"><a href="#What-I-Worked-On" class="headerlink" title="What I Worked On"></a>What I Worked On</h2><p>原文链接: <a href="https://paulgraham.com/worked.html">https://paulgraham.com/worked.html</a></p><p>February 2021</p><h3 id="1979"><a href="#1979" class="headerlink" title="1979"></a>1979</h3><p>Before college the two main things I worked on, outside of school, were writing and programming. I didn’t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.</p><p>上大学前，除了学业，我主要投入的两件事是写作和编程。我写的不是散文，而是当时（或许现在依然）新手作家该写的东西：短篇小说。我的小说糟透了，几乎没有情节，只有充满强烈情感的角色 —— 我曾以为这会让故事显得深刻。</p><p>The first programs I tried writing were on the IBM 1401 that our school district used for what was then called “data processing.” This was in 9th grade, so I was 13 or 14. The school district’s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain’s lair down there, with all these alien-looking machines — CPU, disk drives, printer, card reader — sitting up on a raised floor under bright fluorescent lights.</p><p>我最早尝试写程序是在学区用于 “数据处理” 的 IBM 1401 电脑上。那是九年级，我大概 13 或 14 岁。学区的 1401 恰好在我们初中的地下室，我和朋友里奇・德雷夫斯获准使用它。那地方像个迷你邦德反派的巢穴：CPU、磁盘驱动器、打印机、读卡机，这些长得像外星造物的机器架在高架地板上，被明亮的荧光灯照着。</p><p>The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.</p><p>我们用的是早期版本的 Fortran。得把程序打在穿孔卡上，再把卡片堆进读卡机，按个按钮，程序就会载入内存运行。结果通常是在震耳欲聋的打印机上打出点东西。</p><p>I was puzzled by the 1401. I couldn’t figure out what to do with it. And in retrospect there’s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn’t have any data stored on punched cards. The only other option was to do things that didn’t rely on any input, like calculate approximations of pi, but I didn’t know enough math to do anything interesting of that type. So I’m not surprised I can’t remember any programs I wrote, because they can’t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn’t. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager’s expression made clear.</p><p>我对 1401 很困惑，不知道能用它做什么。现在回想，其实我也做不了多少事。程序的唯一输入方式是穿孔卡上的数据，可我没有任何存在穿孔卡上的数据。另一个选择是做不需要输入的事，比如计算圆周率的近似值，但我的数学知识不足以支撑这类有趣的尝试。所以我记不起自己写过什么程序也不奇怪 —— 它们本就干不了什么。我最清晰的记忆是，当我发现程序可能无限循环时，我的某个程序就陷入了这种状态。在没有分时系统的机器上，这不仅是技术错误，更是社交错误 —— 数据中心经理的表情把这点说得明明白白。</p><p>With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]</p><p>微型计算机的出现改变了一切。现在，电脑能就放在你面前的桌上，运行时能响应你的按键，而不是啃完一叠穿孔卡就停下来。[1]</p><p>The first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.</p><p>我的朋友中第一个有微型计算机的人是自己组装的 —— 那是 Heathkit 公司卖的套件。我清楚记得看着他坐在电脑前直接输入程序时，心里的震撼和羡慕。</p><p>Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he’d write 2 pages at a time and then print them out, but it was a lot better than a typewriter.</p><p>那时候电脑很贵，我软磨硬泡了好几年，才说服父亲在 1980 年左右买了一台 TRS-80。当时的黄金标准是 Apple II，但 TRS-80 也够用了。就是从这时起，我才真正开始编程：写简单的游戏、预测模型火箭飞行高度的程序，还有一个文字处理器 —— 我父亲用它至少写了一本书。内存只能存大约两页文本，所以他每次写两页就打印出来，但这已经比打字机好太多了。</p><h3 id="1985"><a href="#1985" class="headerlink" title="1985"></a>1985</h3><p>Though I liked programming, I didn’t plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn’t much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.</p><p>虽然我喜欢编程，但没打算在大学学这个。我本想学生哲学 —— 这听起来更 “厉害”。在天真的高中生眼里，哲学研究的是终极真理，相比之下，其他学科的内容都只是 “领域知识”。但到了大学我才发现，其他学科已经占据了思想领域的大部分空间，留给这些所谓 “终极真理” 的地方所剩无几。哲学似乎只剩下其他学科认为可以安全忽略的边缘问题。</p><p>I couldn’t have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.</p><p>18 岁时我还说不清这些。我只知道，我一门接一门地选哲学课，却一门比一门觉得无聊。于是我决定转去学人工智能（AI）。</p><p>AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven’t tried rereading The Moon is a Harsh Mistress, so I don’t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we’d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.</p><p>20 世纪 80 年代中期，AI 风头正劲，但有两件事尤其让我想投身其中：海因莱茵的小说《严厉的月亮》，里面有个叫 “迈克” 的智能电脑；还有 PBS 的一部纪录片，讲特里・威诺格拉德用 SHRDLU（一种自然语言处理程序）的场景。我没再重读《严厉的月亮》，不知道它现在读起来怎么样，但当时我完全被它的世界吸引了。我觉得拥有 “迈克” 只是时间问题，而看到威诺格拉德用 SHRDLU 时，我甚至觉得这一天最多只要几年 —— 只要教 SHRDLU 更多单词就行。</p><p>There weren’t any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers’ ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL&#x2F;I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn’t happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.</p><p>康奈尔大学当时没有 AI 课，连研究生课都没有，所以我开始自学。这意味着要学 Lisp—— 那时候 Lisp 被视为 AI 的语言。当时常用的编程语言都很原始，程序员的思路也相应受限。康奈尔的默认语言是类似 Pascal 的 PL&#x2F;I，其他地方也差不多。学 Lisp 让我对 “程序” 的认知飞速拓展，过了好几年我才摸到新的边界。这才像话 —— 这才是我对大学的期待。虽然它没发生在课堂上，但没关系。接下来的几年，我一路顺风顺水，知道自己要做什么。</p><p>For my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief — hard to imagine now, but not unique in 1985 — that it was already climbing the lower slopes of intelligence.</p><p>我的本科毕业论文是逆向工程 SHRDLU。天啊，我太爱做这个程序了。它的代码很精妙，但更让我兴奋的是一种信念 —— 现在很难想象，但在 1985 年并不少见 —— 我觉得它已经踏上了智能的初级阶段。</p><p>I had gotten into a program at Cornell that didn’t make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose “Artificial Intelligence.” When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.</p><p>康奈尔有个特殊项目，不用选专业：可以随便选课，学位上的内容也可以自己定。我当然选了 “人工智能”。但拿到实体文凭时，我沮丧地发现，引号被保留了下来，看起来像 “讽刺性引号”。当时这让我很不爽，现在却觉得讽刺般地准确 —— 原因我很快就会发现。</p><p>I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I’d visited because Rich Draves went there, and was also home to Bill Woods, who’d invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.</p><p>我申请了 3 所研究生院：当时以 AI 闻名的 MIT 和耶鲁，还有哈佛 —— 我因为里奇・德雷夫斯在那而去过，而且比尔・伍兹也在哈佛，他发明了我在 SHRDLU 复制品中用的解析器类型。只有哈佛录取了我，所以我去了哈佛。</p><p>I don’t remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that’s told “the dog is sitting on the chair” translates this into some formal representation and adds it to the list of things it knows.</p><p>我不记得具体是哪一刻，甚至不确定有没有某个具体时刻，但研一的时候，我意识到当时实践中的 AI 是个骗局。我指的是那种：程序被告知 “狗坐在椅子上”，就把这句话转换成某种形式化表示，再加入 “已知信息” 列表的 AI。</p><p>What these programs really showed was that there’s a subset of natural language that’s a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.</p><p>这些程序真正展示的是：自然语言中存在一个子集是形式语言，但只是非常小的子集。很明显，它们能做的事和真正理解自然语言之间，有一道无法逾越的鸿沟。事实证明，根本不是 “教 SHRDLU 更多单词” 那么简单。那种用明确数据结构表示概念的 AI 路子，走不通。和很多情况一样，这种 “行不通” 催生了大量论文，讨论各种 “补丁”，但永远也造不出 “迈克”。</p><p>So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It’s scary to think how little I knew about Lisp hacking when I started writing that book. But there’s nothing like writing a book about something to help you learn it. The book, On Lisp, wasn’t published till 1993, but I wrote much of it in grad school.</p><p>于是我在计划的残骸中寻找能挽救的东西 —— 找到了 Lisp。我从经验中知道，Lisp 本身就很有趣，不只是因为和 AI 有关，尽管当时人们关注它主要是因为 AI。所以我决定专注于 Lisp，甚至想写一本关于 Lisp 编程的书。现在想来，刚开始写的时候，我对 Lisp 编程的了解少得吓人。但没什么比写一本关于某件事的书更能帮你学会它了。这本书叫《On Lisp》，1993 年才出版，但大部分是在研究生院写的。</p><p>Computer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory — indeed, a sneaking suspicion that it was the more admirable of the two halves — but building things seemed so much more exciting.</p><p>计算机科学是 “理论” 和 “系统” 两部分的微妙结合：理论研究者证明东西，系统研究者构建东西。我想构建东西。我很尊重理论 —— 甚至暗自觉得它可能是更值得钦佩的那一半 —— 但构建东西看起来有趣得多。</p><p>The problem with systems work, though, was that it didn’t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.</p><p>但系统工作的问题是不持久。你今天写的程序，无论多好，最多几十年就会过时。人们可能在脚注里提到你的软件，但没人会真的用它。而且它看起来会很简陋，只有了解这个领域历史的人才知道，它在当时有多出色。</p><p>There were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.</p><p>有一次，计算机实验室里有一些多余的施乐 Dandelion 电脑，谁想玩都可以拿一台。我一时有点动心，但以现在的标准看它们太慢了 —— 有什么意义呢？其他人也不想要，最后它们就被处理掉了。系统工作的命运就是这样。</p><h3 id="1988"><a href="#1988" class="headerlink" title="1988"></a>1988</h3><p>I wanted not just to build things, but to build things that would last.</p><p>我不仅想构建东西，还想构建能持久的东西。</p><p>In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I’d spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn’t become obsolete. Some of the best ones were hundreds of years old.</p><p>带着这种不满，1988 年我去卡内基梅隆大学看望里奇・德雷夫斯（他在那读博）。有一天我去了卡内基研究所 —— 小时候我常去那。看着一幅画时，我突然明白了一件现在看来很明显、但当时让我很惊讶的事：挂在墙上的画，是一种能持久的创造。绘画不会过时，有些最棒的画已经有几百年历史了。</p><p>And moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn’t have a boss, or even need to get research funding.</p><p>而且，靠这个能谋生。当然，不像写软件那么容易，但我想，只要足够勤奋、生活节俭，肯定能赚到活下去的钱。而且作为艺术家，你能真正独立：没有老板，甚至不需要申请研究经费。</p><p>I had always liked looking at paintings. Could I make them? I had no idea. I’d never imagined it was even possible. I knew intellectually that people made art — that it didn’t just appear spontaneously — but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.</p><p>我一直喜欢看画，但我能画吗？我不知道。我从没想过这有可能。我理智上知道艺术是人创造的 —— 不是凭空出现的 —— 但总觉得创造艺术的人是另一个物种：要么是很久以前的人，要么是《生活》杂志上那些做着奇怪事的神秘天才。“创作” 艺术 —— 把这个动词放在名词前面 —— 这个想法本身就像奇迹。</p><p>That fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.</p><p>那年秋天，我开始在哈佛上艺术课。研究生可以选任何系的课，我的导师汤姆・奇塔姆很随和。就算他知道我选了些奇怪的课，也从没说过什么。</p><p>So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.</p><p>就这样，我在计算机科学博士项目里，却计划当艺术家，同时还真心热爱 Lisp 编程、忙着写《On Lisp》。换句话说，和很多研究生一样，我在为很多不是论文的项目拼命。</p><p>I didn’t see a way out of this situation. I didn’t want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he’d found such a spectacular way to get out of grad school.</p><p>我找不到出路。不想从研究生院退学，但除此之外还有什么办法？记得 1988 年，我朋友罗伯特・莫里斯因为写了互联网蠕虫程序被康奈尔开除时，我甚至有点羡慕 —— 他找到了这么 “精彩” 的退学方式。</p><h3 id="1990"><a href="#1990" class="headerlink" title="1990"></a>1990</h3><p>Then one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn’t have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay “Yes, I think so. I’ll give you something to read in a few days.”</p><p>1990 年 4 月的一天，事情有了转机。我碰到奇塔姆教授，他问我能不能在 6 月毕业。我的论文一个字都没写，但这辈子最快的思考可能就是那一刻了：我决定赌一把，在剩下的 5 周左右时间里写出来，能复用《On Lisp》的部分就复用。我立刻回答：“可以，我想没问题。几天后给您东西看。”</p><p>I picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There’s a whole world there that’s barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.</p><p>我选了 “延续的应用” 作为主题。现在想来，我本该写宏和嵌入式语言 —— 那片领域几乎还没被探索过。但我只想离开研究生院，仓促写就的论文刚好够格。</p><p>Meanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.</p><p>同时，我在申请艺术学校：美国的 RISD（罗德岛设计学院）和佛罗伦萨美术学院 —— 我觉得它是最古老的艺术学校，应该很棒。RISD 录取了我，佛罗伦萨那边没消息，所以我准备去普罗维登斯（RISD 所在地）。</p><p>I’d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.</p><p>我申请的是 RISD 的 BFA 项目，相当于再上一次大学。这没听起来那么奇怪，因为我才 25 岁，艺术学校里各种年龄的人都有。RISD 把我算成转学生，大二，说我得在夏天上基础课 —— 所有人都要学的绘画、色彩、设计之类的基础课。</p><p>Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they’d sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I’d done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.</p><p>夏末，我收到了一个大惊喜：佛罗伦萨美术学院的信。信被耽搁了，因为他们寄到了英国剑桥，而不是美国马萨诸塞州的剑桥。信里邀请我秋天去佛罗伦萨参加入学考试，只剩几周时间了。我好心的房东让我把东西放在她的阁楼里。我在研究生院做咨询攒了些钱 —— 省着花的话，大概够活一年。现在，我只需要学意大利语。</p><p>Only stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don’t know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]</p><p>只有 “外国人” 需要参加入学考试。现在想来，这可能是为了排挤外国人 —— 太多外国人被 “在佛罗伦萨学艺术” 吸引，不然意大利学生可能会被淹没。那个夏天在 RISD 的基础课让我的绘画和素描还算过得去，但我至今不知道怎么通过笔试的。我记得作文题是写塞尚，我把 intellectual 层面拉到最高，好掩盖词汇量的不足。[2]</p><p>I’m only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn’t require the faculty to teach anything, and in return the faculty wouldn’t require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they’d seen in American art magazines.</p><p>才 25 岁，人生的模式就已经很明显了：我又一次进入某个名校，希望学习某个 “高大上” 的学科，又一次即将失望。佛罗伦萨美术学院绘画系的师生人都超好，但他们早就达成了默契：学生不要求老师教东西，老师也不要求学生学东西。同时，所有人都表面上遵守 19 世纪画室的规矩。我们真的有那种小炉子，烧柴的，就像你在 19 世纪画室画里看到的那样，还有个裸体模特坐在旁边，离炉子近得差点烧到。但除了我，几乎没人画她。其他学生都在聊天，偶尔模仿美国艺术杂志上的东西。</p><p>Our model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She’d copy an obscure old painting out of a book, and then he’d take the copy and maltreat it to make it look old. [3]</p><p>后来发现，那个模特就住在我街对面。她靠当模特和给当地古董商仿画谋生：从书里找一幅冷门的古画临摹，然后古董商把仿品做旧。[3]</p><p>While I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can’t move. People can’t sit for more than about 15 minutes at a time, and when they do they don’t sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you’re painting. Whereas a still life you can, if you want, copy pixel by pixel from what you’re seeing. You don’t want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it’s been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it’s the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]</p><p>在美术学院上学时，我开始晚上在卧室画静物。画很小，因为房间小，而且我用的是剩画布 —— 当时只买得起这个。画静物和画人不一样，顾名思义，静物不会动。人一次最多坐 15 分钟，还坐不稳。所以画人的传统方法是：先会画 “通用的人”，再根据具体的人修改。而静物呢，只要你想，可以像像素级复制一样照着画。但当然不能只停在这一步，不然就只是照片级的准确。静物的有趣之处在于它经过了人的思考：你要强调那些视觉线索，比如某个地方颜色突变，是因为那是物体的边缘。通过巧妙强调这些，你能画出比照片更 “真实” 的画 —— 不只是比喻意义上，而是严格的信息论意义上。[4]</p><p>I liked painting still lives because I was curious about what I was seeing. In everyday life, we aren’t consciously aware of much we’re seeing. Most visual perception is handled by low-level processes that merely tell your brain “that’s a water droplet” without telling you details like where the lightest and darkest points are, or “that’s a bush” without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there’s a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.</p><p>我喜欢画静物，因为我好奇自己看到的东西。日常生活中，我们不会有意识地注意大部分所见。多数视觉感知由低层处理完成，只告诉大脑 “那是水滴”，却不说最亮和最暗的点在哪里；或者 “那是灌木”，却不说每片叶子的形状和位置。这是大脑的功能，不是缺陷 —— 日常生活中，注意每片叶子会很分心。但当你必须画某样东西时，就得看得更仔细，这时你会发现太多细节。就算画的是人们习以为常的东西，画了几天之后，你仍能发现新东西 —— 就像写一篇关于习以为常的事物的散文，写了几天还能有新发现。</p><p>This is not the only way to paint. I’m not 100% sure it’s even a good way to paint. But it seemed a good enough bet to be worth trying.</p><p>这不是唯一的绘画方式，我也不确定它是不是好方式。但当时觉得值得一试。</p><p>Our teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn’t teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.</p><p>我们的老师乌利维教授人很好。他看得出我很努力，给了我好成绩，写在每个学生都有的那种 “护照” 上。但美术学院只教会了我意大利语，钱也快花光了，所以第一年末我回了美国。</p><p>I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]</p><p>我想回 RISD，但已经没钱了，而且 RISD 很贵。于是我决定先工作一年，明年秋天再回去。我在一家叫 Interleaf 的公司找到了工作 —— 他们做文档创建软件。你是说像微软 Word？没错。就是这样，我明白了低端软件往往会吃掉高端软件。但 Interleaf 当时还能撑几年。[5]</p><p>Interleaf had done something pretty bold. Inspired by Emacs, they’d added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I’ve had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn’t know C and didn’t want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.</p><p>Interleaf 做过一件很大胆的事：受 Emacs 启发，他们加了一种脚本语言，还是 Lisp 的方言。现在他们需要一个 Lisp 程序员用它写东西。这是我最接近 “正常工作” 的一次，在此我要向老板和同事道歉 —— 我是个糟糕的员工。他们的 Lisp 就像巨大 C 语言蛋糕上薄薄的糖霜，而我不懂 C，也不想学，所以始终没搞懂大部分软件。再加上我极其不负责任：那时候编程工作意味着每天在特定时间到岗，这在我看来很不自然。现在世界似乎在向我这边倾斜，但当时这造成了很多摩擦。那年快结束时，我大部分时间都在偷偷写《On Lisp》—— 当时已经签了出版合同。</p><p>The good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.</p><p>好处是薪水很高，以艺术生的标准看尤其如此。在佛罗伦萨，付完房租后，我每天其他开销的预算是 7 美元。现在，就算只是坐在会议里，每小时也能赚 4 倍多。省着花不仅攒够了回 RISD 的钱，还还清了大学贷款。</p><p>I learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it’s better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it’s depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there’s not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.</p><p>在 Interleaf 学到了些有用的东西，不过大多是 “不该做什么”：科技公司最好由产品人而非销售人运营（虽然销售是真本事，厉害的人是真厉害）；太多人改代码会出 bug；办公室再便宜，太压抑也不值；计划好的会议不如走廊闲聊；大客户的钱很危险；常规工作时间和编程的最佳时间没多少重叠，常规办公室也不是编程的最佳地点。</p><p>But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it’s good to be the “entry level” option, even though that will be less prestigious, because if you’re not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.</p><p>但最重要的是，我学到了一个后来在 Viaweb 和 Y Combinator 都用到的道理：低端吃掉高端。做 “入门级” 选项很好，虽然没那么光鲜，因为如果你不做，别人也会做，然后把你挤垮。这意味着，“光鲜” 是个危险信号。</p><p>When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.</p><p>第二年秋天离开 Interleaf 回 RISD 时，我安排了为客户项目组做 freelance（自由职业），接下来几年就靠这个活。后来回去做项目时，有人跟我提了个叫 HTML 的新东西，说它是 SGML 的衍生品。Interleaf 里到处都是标记语言爱好者，我没当回事 —— 但这个 HTML 后来成了我生活的重要部分。</p><h3 id="1992"><a href="#1992" class="headerlink" title="1992"></a>1992</h3><p>In the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.</p><p>1992 年秋天，我回到普罗维登斯继续上 RISD。基础课只是入门，佛罗伦萨美术学院像个（很文明的）笑话。现在我要看看真正的艺术学校是什么样 —— 但可惜，它和美术学院差不多。组织得更好，也贵得多，但越来越明显：艺术学校和艺术的关系，不像医学院和医学的关系 —— 至少绘画系是这样。我隔壁邻居所在的纺织系似乎很严格，插画和建筑系大概也是。但绘画系已经 “后严格” 了：绘画学生应该 “表达自己”，对更世故的人来说，这意味着搞出某种独特的标志性风格。</p><p>A signature style is the visual equivalent of what in show business is known as a “schtick”: something that immediately identifies the work as yours and no one else’s. For example, when you see a painting that looks like a certain kind of cartoon, you know it’s by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That’s not always why artists have a signature style, but it’s usually why buyers pay a lot for such work. [6]</p><p>标志性风格就像娱乐圈的 “噱头”，能让作品一眼被认出是你的。比如看到某种卡通风格的画，就知道是罗伊・利希滕斯坦的。所以如果对冲基金经理的公寓里挂着一幅这种画，你就知道他花了几百万。这不全是艺术家搞标志性风格的原因，但往往是买家愿意花大价钱的原因。[6]</p><p>There were plenty of earnest students too: kids who “could draw” in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.</p><p>也有很多认真的学生：高中 “会画画”，来到这所号称全国最好的艺术学校，想画得更好。他们在 RISD 往往感到困惑和挫败，但还是坚持，因为画画是他们的事业。我不是高中就会画画的人，但在 RISD，我肯定更接近他们，而不是那些追求标志性风格的人。</p><p>I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn’t much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]</p><p>在 RISD 的色彩课上学到了很多，但其他时候基本是自学绘画 —— 这完全可以免费做。所以 1993 年我退学了。在普罗维登斯待了一阵，大学朋友南希・帕梅特帮了我个大忙：她妈妈在纽约有栋楼，里面有个租金管制的公寓要空出来，问我要不要。比我当时的住处大不了多少，但纽约据说是艺术家该待的地方。当然要！[7]</p><p>Asterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there’s a tiny corner that’s not rich, or at least wasn’t in 1993. It’s called Yorkville, and that was my new home. Now I was a New York artist — in the strictly technical sense of making paintings and living in New York.</p><p>《高卢英雄传》漫画开头，镜头拉近到罗马高卢的一个小角落，发现那里没被罗马人控制。在纽约地图上也能这么做：拉近上东区，有个小角落不富裕 —— 至少 1993 年是这样。那地方叫约克维尔，成了我的新家。现在，我是纽约艺术家了 —— 严格来说，就是画画，住纽约。</p><p>I was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn’t want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)</p><p>我很担心钱，因为感觉 Interleaf 在走下坡路。Lisp 自由职业的活很少，我又不想用其他语言编程 —— 那时候运气好的话是 C++。于是，凭着我对赚钱机会的 “敏锐” 嗅觉，我决定再写一本 Lisp 的书。这次要写本通俗的，能当教材的。我想象自己靠版税节俭生活，把所有时间都用来画画。（《ANSI Common Lisp》这本书的封面画，就是我那时候画的。）</p><p>The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I’d taken her painting class at Harvard. I’ve never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.</p><p>纽约对我来说最好的是有伊德尔和朱利安・韦伯。伊德尔・韦伯是画家，早期照相写实主义者之一，我在哈佛上过她的绘画课。我从没见过哪个老师像她这样受学生爱戴，很多往届学生都和她保持联系，包括我。搬到纽约后，我成了她事实上的工作室助理。</p><p>She liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn’t that much older than me, and was super rich. The thought suddenly occurred to me: why don’t I become rich? Then I’ll be able to work on whatever I want.</p><p>她喜欢在大的方形画布上画，边长 4 到 5 英尺。1994 年底的一天，我正在绷一幅这样的巨画，收音机里在说一个著名的基金经理。他没比我大多少，却超级有钱。我突然想：我为什么不变得有钱呢？那样就能做任何想做的事了。</p><p>Meanwhile I’d been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I’d seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.</p><p>与此同时，我越来越多地听到 “万维网” 这个新东西。去剑桥看望罗伯特・莫里斯（他当时在哈佛读博）时，他给我演示了一下。我觉得网络会成大事。我见过图形用户界面（GUI）如何让微型计算机普及，网络似乎会让互联网也这样。</p><p>If I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can’t honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn’t want to be online, and still don’t, not the fancy ones. That’s not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.</p><p>如果想变富，这就是下一班列车。这部分我是对的。错的是想法：我决定开公司，帮艺术画廊上网。看了那么多 Y Combinator 的申请后，我坦白说，这不算最烂的创业想法，但也差不多了。艺术画廊不想上网，现在也不想 —— 至少高档画廊不想，这不是他们的销售方式。我写了些软件帮画廊生成网站，罗伯特写了些代码调整图片大小、搭 HTTP 服务器。然后我们试着签画廊。说这是 “难卖” 都太轻了 —— 简直是送都送不出去。几个画廊让我们免费做了网站，但没人付钱。</p><p>Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we’d been generating for galleries. This impressive-sounding thing called an “internet storefront” was something we already knew how to build.</p><p>后来一些在线商店出现了，我意识到除了 “下单” 按钮，它们和我们给画廊做的网站一模一样。那个听起来很厉害的 “互联网店面”，我们早就会做了。</p><p>So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we’d at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores — in Lisp, of course.</p><p>1995 年夏天，我把《ANSI Common Lisp》的终稿交给出版商后，我们开始写构建在线商店的软件。一开始想做普通桌面软件 —— 那时候意味着 Windows 软件。这很吓人，因为我们俩都不会写 Windows 软件，也不想学。我们活在 Unix 世界里。但还是决定先在 Unix 上试试做个商店构建器的原型：罗伯特写购物车，我写新的商店网站生成器 —— 当然用 Lisp。</p><p>We were working out of Robert’s apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we’d never have to write anything to run on users’ computers. We could generate the sites on the same server we’d serve them from. Users wouldn’t need anything more than a browser.</p><p>我们在剑桥罗伯特的公寓里工作。他的室友经常不在，我就能睡他房间。不知为什么，那房间没有床架和床单，只有床垫放地上。一天早上躺在床垫上时，我突然坐直了：如果软件跑在服务器上，用户点链接控制它呢？这样就永远不用写用户端软件了。可以在服务器上生成网站，用户只需要浏览器。</p><p>This kind of software, known as a web app, is common now, but at the time it wasn’t clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.</p><p>这种叫 “网页应用” 的软件现在很常见，但当时甚至不清楚是否可行。为了验证，我们决定做一个能通过浏览器控制的商店构建器。几天后的 8 月 12 日，我们做成了一个能运行的版本。界面很烂，但证明了完全可以通过浏览器建商店，不需要任何客户端软件，也不用在服务器命令行输入东西。</p><p>Now we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn’t need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.</p><p>我们觉得这下真的找对了方向。我甚至幻想新一代软件都这样：不用考虑版本、移植之类的破事。在 Interleaf，有个叫 “发布工程” 的团队，规模似乎和写软件的团队差不多大。而现在，直接在服务器上更新软件就行。</p><p>We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle’s husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator’s. We knew founders needed something like this, because we’d needed it ourselves.</p><p>我们开了家新公司，叫 Viaweb—— 因为软件通过网络（via the web）工作。伊德尔的丈夫朱利安给了 1 万美元种子投资，作为回报，我们给了他 10% 的股份（他还做了初期法务、给了商业建议）。十年后，这成了 Y Combinator 的模式：我们知道创始人需要这样的帮助，因为我们自己就需要过。</p><p>At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I’d made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.</p><p>当时我的净资产是负的 —— 银行里的一千美元左右，还不够欠政府的税（我有没有认真存下 Interleaf 咨询工作的钱？当然没有）。所以虽然罗伯特有研究生津贴，我得靠这笔种子投资生活。</p><p>We originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.</p><p>我们原本希望 9 月上线，但越做越想把软件弄好。最终做出了一个所见即所得（WYSIWYG）的网站构建器：创建页面时，看起来和最终生成的静态页面完全一样，只是链接指向的不是静态页面，而是服务器哈希表里存的闭包。</p><p>It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.</p><p>学过艺术帮了忙：在线商店构建器的核心是让用户看起来 “正规”，而正规的关键是高制作水准。只要页面布局、字体、颜色对了，一个在卧室开商店的人能看起来比大公司还正规。</p><p>(If you’re curious why my site looks so old-fashioned, it’s because it’s still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)</p><p>（如果你好奇我的网站为什么这么老派，因为它还用着这个软件。现在看可能粗糙，但 1996 年时，它是最 slick 的。）</p><p>In September, Robert rebelled. “We’ve been working on this for a month,” he said, “and it’s still not done.” This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.</p><p>9 月，罗伯特反抗了：“我们都做了一个月了，还没弄完。” 现在想来很有趣，因为他之后差不多还做了 3 年。但我觉得招更多程序员可能稳妥，问罗伯特研究生院里谁最厉害。他推荐了特雷弗・布莱克威尔 —— 一开始我很惊讶，因为当时我知道特雷弗主要是因为他想把生活里的一切都记在一叠卡片上，走到哪带到哪。但罗伯特说得对，特雷弗是个极其高效的黑客。</p><p>It was a lot of fun working with Robert and Trevor. They’re the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm’s brain it would look like a colonial New England church, and if you could see inside Trevor’s it would look like the worst excesses of Austrian Rococo.</p><p>和罗伯特、特雷弗一起工作很开心。他们是我认识的最有独立思想的人，方式还完全不同。如果能看到罗伯特的大脑，会像新英格兰殖民时期的教堂；看到特雷弗的，会像奥地利洛可可风格最夸张的样子。</p><h3 id="1996"><a href="#1996" class="headerlink" title="1996"></a>1996</h3><p>We opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]</p><p>1996 年 1 月，我们正式营业，有 6 家商店。还好等了几个月 —— 虽然担心迟到，但其实早得差点致命。当时媒体大谈电子商务，但没多少人真的想要在线商店。[8]</p><p>There were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn’t have to integrate with any other software except Robert’s and Trevor’s, so it was quite fun to work on. If all I’d had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.</p><p>软件主要有三部分：我写的编辑器（用户用来建网站）、罗伯特写的购物车、特雷弗写的管理器（跟踪订单和数据）。当时，这个编辑器是最好的通用网站构建器之一。我把代码写得很紧凑，只需要和罗伯特、特雷弗的软件集成，所以做起来很开心。如果只需要做这个软件，接下来 3 年可能是我人生最轻松的时光。但不幸的是，我还得做很多其他事 —— 都是我比编程差的事，所以接下来 3 年反而是最紧张的。</p><p>There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn’t because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.</p><p>90 年代后半期，很多创业公司做电子商务软件。我们决心做 “微软 Word”，而不是 “Interleaf”—— 意思是易用、便宜。幸运的是我们很穷，这让 Viaweb 比预想的还便宜：小店每月 100 美元，大店 300 美元。低价很有吸引力，也让竞争对手头疼，但我们定低价不是因为聪明 —— 我们根本不知道企业愿意付多少钱，300 美元对我们来说已经很多了。</p><p>We did a lot of things right by accident like that. For example, we did what’s now called “doing things that don’t scale,” although at the time we would have described it as “being so lame that we’re driven to the most desperate measures to get users.” The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d’etre of our software was that people could use it to make their own stores. But anything to get users.</p><p>我们很多 “做对” 的事都是偶然。比如现在说的 “做不可规模化的事”，当时我们会说 “太逊了，只能用最 desperation 的办法拉用户”—— 最常见的是帮用户建商店。这很丢人，因为软件的意义本就是让用户自己做。但为了拉用户，什么都愿意做。</p><p>We learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man’s shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men’s shirts. My first set of scans were so beautiful too.</p><p>我们学到了太多不想知道的零售业知识。比如，如果只能放一张男士衬衫的小图（当时所有图都比现在小），放衣领特写比整件衬衫好。我记得这个是因为我得重新扫描约 30 张衬衫图 —— 第一批扫描还那么好看。</p><p>Though this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by “business” and thought we needed a “business person” to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we’d have so many users that I couldn’t scan their images for them, but in the meantime there was nothing more important to do.</p><p>虽然感觉不对，但这正是该做的事。帮用户建商店让我们了解了零售，也了解了用我们软件的感受。一开始我对 “商业” 既困惑又反感，觉得需要 “商业人士” 来管，但有了用户后，我改变了 —— 就像有了孩子后对父亲身份的态度转变。用户想要什么，我都满足。也许有一天用户太多，我没时间帮他们扫描图片，但现在没什么比这更重要。</p><p>Another thing I didn’t get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that’s how much money you’re making, and if you’re not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we’d been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you’re doing fine. You’re growing 7x a year. Just don’t hire too many more people and you’ll soon be profitable, and then you’ll control your own destiny.</p><p>当时没明白的另一件事：增长率是创业公司的终极考验。我们的增长率不错：1996 年底约 70 家店，1997 年底约 500 家。我错误地认为绝对用户数才重要 —— 这确实重要，因为关系到收入，不够的话可能倒闭。但长期来看，增长率会解决绝对数问题。如果是我在 Y Combinator 指导的创业公司，我会说：别紧张，你们做得很好，年增长 7 倍。别雇太多人，很快就会盈利，然后就能掌握自己的命运了。</p><p>Alas I hired lots more people, partly because our investors wanted me to, and partly because that’s what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn’t reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.</p><p>可惜我雇了很多人，部分是因为投资者想让我雇，部分是因为互联网泡沫时期的创业公司都这样 —— 只有几个人的公司会显得业余。所以直到 1998 年夏天雅虎收购我们时，才实现收支平衡。这意味着公司整个生命周期都得看投资者脸色。我们和投资者都是创业新手，结果一团糟，就算以创业公司的标准看也是。</p><p>It was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn’t feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.</p><p>雅虎收购我们时，我如释重负。理论上，Viaweb 的股票很值钱 —— 它是一家盈利且快速增长的企业的股份。但我没觉得它多值钱：我不知道怎么给企业估值，却太清楚我们几乎每隔几个月就经历一次 “濒死体验”。而且创业以来，我的生活方式还和研究生差不多。所以雅虎收购时，我感觉像从赤贫到暴富。要去加州了，我买了辆车 ——1998 年的黄色大众 GTI。我记得当时想，光是真皮座椅就比我所有东西加起来都豪华。</p><h3 id="1998"><a href="#1998" class="headerlink" title="1998"></a>1998</h3><p>The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn’t realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo’s prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.</p><p>接下来的一年，1998 年夏到 1999 年夏，可能是我人生效率最低的时期。当时没意识到，我已经被运营 Viaweb 的压力和精力耗尽了。到加州后，我试着继续编程到凌晨 3 点，但疲劳加上雅虎老气横秋的文化和圣克拉拉沉闷的格子间，渐渐把我拖垮了。几个月后，感觉诡异得像在 Interleaf 工作。</p><p>Yahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they’d never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I’d painted anything that I’d half forgotten why I was doing this. My brain had been entirely full of software and men’s shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.</p><p>雅虎收购时给了我们很多期权。当时我觉得雅虎估值太高，期权肯定不值钱，但没想到接下来一年股价涨了 5 倍。我等到第一批期权解禁，1999 年夏天就离开了。太久没画画，我都快忘了为什么要做这些。四年来，脑子里全是软件和男士衬衫。但我提醒自己，变得有钱是为了画画，现在有钱了，该去画画了。</p><p>When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.</p><p>我说要走时，雅虎的老板和我长谈了我的计划。我告诉他想画什么样的画。当时还感动于他这么关心我，现在才明白他以为我在撒谎。我当时的期权每月约值 200 万美元，放弃这么多钱，肯定是要去开新公司，还可能挖人。那是互联网泡沫顶峰，雅虎是中心。我老板当时是亿万富翁，在那时离开去开新公司，在他看来可能是疯狂又合理的野心。</p><p>But I really was quitting to paint, and I started immediately. There was no time to lose. I’d already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That’s what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.</p><p>但我真的是辞职去画画，而且立刻就开始了。不能再等了，已经花了四年变富。现在我跟那些卖掉公司离开的创始人说，我的建议总是一样的：度假。我当时就该这么做，去个地方什么都不做一两个月，但根本没想过。</p><p>So I tried to paint, but I just didn’t seem to have any energy or ambition. Part of the problem was that I didn’t know many people in California. I’d compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you’ll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn’t know any of them.</p><p>于是我试着画画，却没精力和野心。部分原因是在加州没什么熟人。我还在圣克鲁斯山买了栋房子，风景很美，但离任何地方都很远。又撑了几个月，绝望之下回了纽约 —— 你可能会惊讶，我还保留着那个公寓，像旧生活的坟墓一样封着。至少伊德尔在纽约，还有其他想画画的人，虽然我都不认识。</p><p>When I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn’t been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I’d paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn’t rotted yet).</p><p>回到纽约，我重拾旧生活，只是现在有钱了。听起来很怪，确实很怪。所有旧习惯都回来了，但多了很多以前没有的 “门”：累了不想走路，举手就能拦到出租车（除非下雨）；路过可爱的小餐馆，能进去点份午餐。兴奋了一阵，画画也渐渐顺了。我尝试了一种新静物：先用老方法画一幅，拍照打印在画布上（放大），然后用这个当底色，再对着同样的物体画第二幅（希望物体还没烂）。</p><p>Meanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn’t one. Huh.</p><p>同时，我在找公寓买。现在终于能选邻居了。我问自己和各种房产中介：纽约的 “剑桥” 在哪？偶尔去真正的剑桥后，我渐渐意识到没有这样的地方。嗯。</p><h3 id="2000"><a href="#2000" class="headerlink" title="2000"></a>2000</h3><p>Around this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.</p><p>2000 年春天左右，我有了个想法。从 Viaweb 的经历看，网页应用显然是未来。为什么不做一个 “用来做网页应用” 的网页应用呢？让人们通过浏览器在我们的服务器上编辑代码，然后我们托管生成的应用。[9] 服务器上可以运行各种服务，应用调用 API 就能用：打电话、处理图片、收信用卡付款等等。</p><p>I got so excited about this idea that I couldn’t think about anything else. It seemed obvious that this was the future. I didn’t particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he’d made a lot of money the last time I’d lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.</p><p>我太兴奋了，满脑子都是这个。未来显然是这样的。我不是特别想开公司，但这个想法显然需要公司来实现，所以决定搬到剑桥去开。希望能说服罗伯特一起做，但碰壁了。罗伯特当时是 MIT 的博士后，虽然上次跟着我搞事赚了不少，但也花了太多时间。他觉得想法可行，却坚决拒绝加入。</p><p>Hmph. Well, I’d do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it’s now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn’t so naive as to assume I could spring an overt Lisp on a general audience; we’d hide the parentheses, like Dylan did.</p><p>哼，那我自己做。我招了曾在 Viaweb 工作的丹・吉芬，还有两个想找暑期工的本科生，开始做一个现在看来相当于 20 家公司加几个开源项目的软件。定义应用的语言当然是 Lisp 的方言。但我没天真到以为能直接给大众用 Lisp，得像 Dylan 语言那样隐藏括号。</p><p>By then there was a name for the kind of company Viaweb was, an “application service provider,” or ASP. This name didn’t last long before it was replaced by “software as a service,” but it was current for long enough that I named this new company after it: it was going to be called Aspra.</p><p>当时把 Viaweb 这类公司叫 “应用服务提供商”（ASP），这个名字没火多久就被 “软件即服务”（SaaS）取代了，但火的那阵，我给新公司起了个名：Aspra。</p><p>I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn’t want to run a company — especially not a big one, which it was looking like this would have to be. I’d only started Viaweb because I needed the money. Now that I didn’t need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I’d build a subset that could be done as an open source project.</p><p>我做应用构建器，丹做网络基础设施，两个本科生做前两个服务（图片和电话）。但夏天过半时，我意识到自己真的不想运营公司 —— 尤其是看起来会变大的公司。我开 Viaweb 只是因为需要钱，现在不缺钱了，为什么还要做这个？如果这个愿景必须靠公司实现，那算了。我可以做个子集，当成开源项目。</p><p>Much to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.</p><p>没想到，花在这上面的时间没白费。Y Combinator 创办后，我经常遇到做这个新架构部分内容的创业公司，而我花了这么多时间思考甚至尝试写过，这非常有用。</p><p>The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn’t even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.</p><p>我要做的开源子集是新 Lisp—— 现在连括号都不用隐藏了。很多 Lisp 黑客都梦想做新 Lisp，部分因为 Lisp 的特色是有方言，部分因为我们心里都有个 “柏拉图式的 Lisp”，现有方言都不够格。我当然也有。夏天结束时，丹和我搬到剑桥我买的房子里，开始做这个叫 Arc 的新 Lisp 方言。</p><p>The following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we’d used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I’d created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]</p><p>第二年春天，转机来了。我被邀请在一个 Lisp 会议上演讲，讲了我们在 Viaweb 用 Lisp 的经历。之后把演讲稿（PostScript 格式）放到了<a href="https://paulgraham.com/">paulgraham.com</a>上 —— 这个网站我用 Viaweb 建了好几年，从没用来做过什么。一天之内，它有了 3 万次浏览。怎么回事？从引用链接看，有人把它发到了 Slashdot 上。[10]</p><p>Wow, I thought, there’s an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.</p><p>哇，我想，有受众。写点东西放网上，谁都能看。现在看来再平常不过了，但当时很惊人。印刷时代，通往读者的渠道很窄，被称为 “编辑” 的凶猛怪物把守着。想让作品有受众，必须出书、登报或发杂志。现在，任何人都能发表任何东西。</p><p>This had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]</p><p>理论上 1993 年就可以了，但没多少人意识到。我参与构建网络基础设施这么久，自己也是作家，却花了 8 年才意识到。即便如此，又过了好几年才明白其中的意义：这意味着会有新一代的散文。[11]</p><p>In the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]</p><p>印刷时代，发表散文的渠道窄得可怜。除了少数在纽约参加对的派对、被官方认可的思想家，只有专家能发表关于自己领域的散文。太多散文从没被写出来，因为没地方发表。现在可以了，我要写这些散文。[12]</p><p>I’ve worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I’d always write essays too.</p><p>我做过很多事，但如果说有个转折点让我明白该做什么，那就是开始在网上发表散文的时候。从那以后，我知道无论做什么，都会一直写散文。</p><p>I knew that online essays would be a marginal medium at first. Socially they’d seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.</p><p>我知道网络散文一开始会是边缘媒介。社交层面上，它们更像疯子在 GeoCities 网站上发的咆哮，而不是《纽约客》上排版精美的优雅文章。但这时我已经明白，这是好事，不是坏事。</p><p>One of the most conspicuous patterns I’ve noticed in my life is how well it has worked, for me at least, to work on things that weren’t prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I’m writing, and I explain that it’s an essay I’m going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.</p><p>我人生中最明显的模式之一是：对我来说，做那些不那么光鲜的事，往往效果很好。静物一直是最不光鲜的绘画形式；Viaweb 和 Y Combinator 刚起步时都显得很逊；现在别人问我在写什么，我说要发在自己网站上的散文时，还是会看到对方茫然的眼神。就连 Lisp，虽然在智力上像拉丁语一样有光环，也差不多够 “不潮” 了。</p><p>It’s not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it’s a sign both that there’s something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren’t prestigious doesn’t guarantee you’re on the right track, it at least guarantees you’re not on the most common type of wrong one.</p><p>不是说不光鲜的工作本身就好。但如果你被某种工作吸引，尽管它现在不光鲜，这既说明那里有真东西可发现，也说明你的动机是对的。不纯的动机是野心家的大危险 —— 最可能让你误入歧途的，就是想给别人留下深刻印象的欲望。所以，做不光鲜的事不能保证你走在对的路上，但至少保证你没走最常见的错路。</p><p>Over the next several years I wrote lots of essays about all kinds of different topics. O’Reilly reprinted a collection of them as a book, called Hackers &amp; Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.</p><p>接下来几年，我写了很多散文，主题各异。奥莱利出版社把其中一些编成书，以其中一篇的标题《黑客与画家》为名出版。我还做了垃圾邮件过滤器，画了些画。每周四晚上我会请一群朋友吃饭，这让我学会了给很多人做饭。我在剑桥又买了栋楼 —— 以前是糖果厂（据说后来是色情工作室），当办公室用。</p><h3 id="2003"><a href="#2003" class="headerlink" title="2003"></a>2003</h3><p>One night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn’t know but would probably like. One of the guests was someone I didn’t know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.</p><p>2003 年 10 月的一个晚上，我家开了个大派对。这是我朋友玛丽亚・丹尼尔斯（周四晚宴的常客）的好主意：三个主人各自邀请朋友参加同一个派对，这样每个客人都会有三分之二的人不认识但可能合得来。其中一个客人我不认识，但后来很喜欢：她叫杰西卡・利文斯顿。几天后，我约了她。</p><p>Jessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.</p><p>杰西卡在波士顿一家投资银行管营销。这家银行觉得自己懂创业公司，但接下来一年，她认识了我那些创业圈的朋友后，惊讶地发现现实完全不同，他们的故事也很精彩。于是她决定编一本创业公司创始人的访谈录。</p><p>When the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.</p><p>银行出现财务问题，她不得不解雇一半员工，于是开始找新工作。2005 年初，她去波士顿一家风投公司面试营销岗。他们拖了几周才做决定，这段时间里，我跟她讲了风投需要改进的地方：应该多投小额，而不是少数大额；应该投更年轻、更懂技术的创始人，而不是 MBA；应该让创始人继续当 CEO，等等。</p><p>One of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won’t waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they’d be able to avoid the worst of the mistakes we’d made.</p><p>我写散文有个诀窍：先演讲。想到要站在一群人面前，说些不浪费他们时间的话，这能极大激发想象力。哈佛计算机协会（本科生电脑俱乐部）邀请我演讲时，我决定讲讲如何开创业公司 —— 也许他们能避免我们犯过的那些严重错误。</p><p>So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they’d be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I’d only known), I blurted out “But not me!” and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I’d been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn’t done one angel investment.</p><p>演讲中，我说最好的种子投资来源是成功的创业公司创始人，因为他们还能提供建议。说完，似乎所有人都期待地看着我。想到收件箱会被商业计划淹没（当时要是知道就好了），我脱口而出：“但别找我！” 然后继续演讲。但之后我想，真该停止拖延，开始做天使投资了。雅虎收购我们后我就想做，现在已经过去 7 年，还没做过一次。</p><p>Meanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.</p><p>同时，我还在和罗伯特、特雷弗合计能一起做的项目。我怀念和他们共事的日子，总觉得有什么可以合作的。</p><p>As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We’d start our own investment firm and actually implement the ideas we’d been talking about. I’d fund it, and Jessica could quit her job and work for it, and we’d get Robert and Trevor as partners too. [13]</p><p>3 月 11 日，我和杰西卡吃完饭回家，走到花园街和沃克街的拐角，这三条线交汇了：去他的那些拖拖拉拉的风投，我们自己开投资公司，把想法付诸实践。我出钱，杰西卡辞职来做，再拉罗伯特和特雷弗当合伙人。[13]</p><p>Once again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.</p><p>无知再次帮了我们。我们不知道怎么当天使投资人，2005 年的波士顿也没有罗恩・康威（著名天使投资人）可以学。所以我们只做看起来明显该做的事，有些做法后来发现还挺新颖。</p><p>There are multiple components to Y Combinator, and we didn’t figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn’t go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we’d been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.</p><p>Y Combinator 有很多部分，我们不是一下子想出来的。最先确定的是做天使投资公司。那时候，“天使” 和 “公司” 这两个词还不搭：有风投公司（有组织的公司，雇人做投资），但只投百万美元级的大额；有天使投资人（投小额），但都是个人，通常有其他主业，投资只是副业。而且两者在早期都不够帮助创始人。我们知道创始人在某些方面有多无助，因为我们自己就经历过。比如朱利安帮我们注册公司时，我们觉得太神奇了 —— 写复杂软件还行，但注册公司、定章程、发股票，到底怎么弄？我们的计划是：不仅做种子投资，还要为创业公司做所有朱利安为我们做过的事。</p><p>YC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking “Wow, that means they got all the returns.” But once again, this was not due to any particular insight on our part. We didn’t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn’t have known where to start. [14]</p><p>YC 不是基金形式。运营成本低，用我们自己的钱就行。99% 的读者可能没注意，但专业投资者会想：“哇，这意味着他们拿了所有回报。” 但这也不是因为我们多聪明 —— 我们根本不知道风投公司怎么组织，没想过要募资，就算想过也不知道从哪开始。[14]</p><p>The most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they’d start startups instead? We wouldn’t feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn’t make much money out of it, we’d at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.</p><p>YC 最独特的是 “批次模式”：一次投一批创业公司，一年两次，然后花三个月集中帮助它们。这也是偶然发现的，完全是因为我们不懂投资。我们需要投资经验，觉得 “一次投一堆创业公司” 是个好办法。我们知道本科生夏天会去科技公司做临时工作，那为什么不组织个暑期项目，让他们开创业公司呢？这样我们就算 “假投资人” 也不会内疚，因为他们也算 “假创始人”。所以就算赚不到钱，至少能练手，他们呢，夏天也比去微软打工有趣。</p><p>We’d use the building I owned in Cambridge as our headquarters. We’d all have dinner there once a week — on tuesdays, since I was already cooking for the thursday diners on thursdays — and after dinner we’d bring in experts on startups to give talks.</p><p>我们用我在剑桥买的那栋楼当总部。每周二一起吃晚饭（周四我已经在请人吃饭了），饭后请创业领域的专家来讲课。</p><p>We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get “deal flow,” as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who’d already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we’d intended.</p><p>知道本科生在决定暑期工作，所以几天内我们搞出了 “夏季创始人计划”，我在自己的网站上发了公告，邀请本科生申请。从没想过写散文能带来投资者说的 “deal flow”（项目流），但事实证明这是完美的来源。[15] 我们收到了 225 份申请，惊讶地发现很多来自已经毕业或即将毕业的人。这个计划突然变得比预想的严肃。</p><p>We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don’t think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.</p><p>我们从 225 个团队中邀请了约 20 个来面试，最终选了 8 个投资。他们很出色：第一批包括 reddit、后来创办 Twitch 的贾斯汀・坎和埃米特・希尔、已经帮着写了 RSS 规范、几年后成为开放获取殉道者的亚伦・斯沃茨，还有后来成为 YC 第二任总裁的山姆・奥特曼。第一批这么好，不全是运气 —— 愿意参加 “夏季创始人计划” 这种怪事，而不是去微软或高盛这种正经地方实习，本身就需要很大勇气。</p><p>The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]</p><p>给创业公司的条件结合了我们和朱利安的协议（1 万美元换 10%）以及罗伯特说的 MIT 研究生暑期能拿到的钱（6000 美元）：每个创始人 6000 美元，典型的两个创始人团队就是 1.2 万美元，换 6% 的股份。这肯定公平，因为比我们自己当年的条件好一倍。而且那个夏天特别热，杰西卡还给创始人送了免费空调。[16]</p><p>Fairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.</p><p>很快我意识到，我们偶然发现了规模化创业投资的方法。批量投资对我们更方便，因为能同时为很多创业公司做事；对创业公司也更好，解决了创始人最大的问题之一：孤独。现在他们有了同事，而且是懂他们面临的问题、能分享解决方案的同事。</p><p>As YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another’s customers. We used to refer jokingly to the “YC GDP,” but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.</p><p>随着 YC 发展，我们发现了规模的其他好处：校友形成了紧密的社区，愿意互相帮助，尤其是帮助当前批次的创始人 —— 他们还记得自己曾处于同样的位置。我们还发现创业公司之间会互相成为客户。我们曾开玩笑说 “YC GDP”，但随着 YC 壮大，这越来越不像玩笑。现在很多创业公司的初始客户几乎全来自同批次的伙伴。</p><p>I had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.</p><p>我本来没打算把 YC 当全职工作。我想做三件事：编程、写散文、做 YC。但随着 YC 发展，我越来越投入，它占据的精力远超过三分之一。但头几年我还能做其他事。</p><h3 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h3><p>In the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn’t startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one’s intellectual curiosity.</p><p>2006 年夏天，我和罗伯特开始做新版本的 Arc。这个版本速度不错，因为编译成了 Scheme。为了测试，我用它写了 Hacker News（黑客新闻）。最初叫 “创业新闻”，是给创业公司创始人的新闻聚合器，但几个月后，我厌倦了只看创业相关的内容。而且我们想触达的不是现有创始人，而是未来的创始人。于是改名叫 “黑客新闻”，主题变成任何能激发智力好奇心的东西。</p><p>HN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I’d had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one’s work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]</p><p>HN 对 YC 当然有好处，但也是我最大的压力来源。如果只需要挑选和帮助创始人，生活会轻松很多。这意味着 HN 可能是个错误。工作中最大的压力来源至少应该接近核心，但我就像跑马拉松时，痛苦不是来自跑步的劳累，而是来自不合脚的鞋磨出的水泡。处理 YC 的紧急问题时，约 60% 和 HN 有关，40% 是其他所有事加起来。[17]</p><p>As well as HN, I wrote all of YC’s internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn’t have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.</p><p>除了 HN，YC 所有内部软件我也用 Arc 写。但虽然还在用 Arc，我渐渐不再改进它 —— 部分因为没时间，部分因为现在有这么多基础设施依赖它，改起来就没那么有吸引力了。于是我的三个项目减到两个：写散文和做 YC。</p><p>YC was different from other kinds of work I’ve done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn’t have picked a better way to do it.</p><p>YC 和我做过的其他工作都不同。不是我自己决定做什么，而是问题来找我。每 6 个月就有一批新的创业公司，它们的问题 —— 无论是什么 —— 都成了我们的问题。这工作很有吸引力，因为问题五花八门，优秀的创始人效率很高。如果想在最短时间内了解最多关于创业公司的事，没有比这更好的方式了。</p><p>There were parts of the job I didn’t like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn’t like. I was haunted by something Kevin Hale once said about companies: “No one works harder than the boss.” He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I’d better work very hard.</p><p>有些部分我不喜欢：创始人之间的纠纷、判断谁在撒谎、和欺负创业公司的人斗争等等。但就算不喜欢，我也很努力。凯文・黑尔曾说过一句话让我不安：“没人比老板更努力。” 他既是描述也是建议，而建议的部分吓到我了。我想让 YC 变好，所以如果我的努力程度决定了其他人的上限，那我必须非常努力。</p><h3 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h3><p>One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. “You know,” he said, “you should make sure Y Combinator isn’t the last cool thing you do.”</p><p>2010 年的一天，罗伯特・莫里斯来加州面试，做了件惊人的事：主动给我提建议。我只记得他以前做过一次 —— 在 Viaweb 时，我肾结石疼得直不起腰，他建议最好送我去医院。只有这种时候，罗伯特才会主动提建议。所以我清楚记得他的话：“你知道吗，你该确保 Y Combinator 不是你做的最后一件酷事。”</p><p>At the time I didn’t understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life’s work or I’d have to leave eventually. And it wasn’t, so I would.</p><p>当时我不明白他的意思，渐渐才意识到他是说我该离开了。这听起来很奇怪，因为 YC 做得很好。但罗伯特主动提建议比他犯错还罕见，所以我开始思考。确实，按当时的轨迹，YC 会是我做的最后一件事 —— 它占据的精力越来越多，已经吃掉了 Arc，正在吃掉散文。要么 YC 是我一生的事业，要么我最终得离开。它不是，所以我会离开。</p><h3 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h3><p>In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.</p><p>2012 年夏天，我母亲中风了，原因是结肠癌引起的血栓。中风破坏了她的平衡能力，她被送进疗养院，但她真想离开，回自己家 —— 我和姐姐决心帮她实现。我定期飞俄勒冈看她，在飞机上有很多时间思考。一次飞行中，我意识到自己准备好把 YC 交给别人了。</p><p>I asked Jessica if she wanted to be president, but she didn’t, so we decided we’d try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn’t be controlled by the founders. So if Sam said yes, we’d let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.</p><p>我问杰西卡想不想当总裁，她不想，于是我们决定试着招募山姆・奥特曼。我们和罗伯特、特雷弗谈过，同意彻底交接：到那时为止，YC 由我们四个成立的 LLC 控制，但我们想让 YC 长久存在，这意味着不能由创始人控制。所以如果山姆同意，就让他重组 YC：我和罗伯特退休，杰西卡和特雷弗当普通合伙人。</p><p>When we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he’d take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.</p><p>我们问山姆想不想当 YC 总裁时，他一开始说不 —— 他想做一个核能反应堆的创业公司。但我坚持，2013 年 10 月他终于同意了。决定从 2014 年冬季批次开始由他接手。2013 年剩下的时间里，我越来越多地让山姆运营 YC，部分是让他学习，部分是因为我在关注母亲 —— 她的癌症复发了。</p><p>She died on January 15, 2014. We knew this was coming, but it was still hard when it did.</p><p>她在 2014 年 1 月 15 日去世了。我们早有准备，但事到临头还是很难受。</p><p>I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I’m interested in, but that only takes a few hours a week.)</p><p>我继续在 YC 工作到 3 月，帮那批创业公司做完演示日，然后就基本退出了（我还会和校友以及做我感兴趣的事的新创业公司聊天，但每周只花几小时）。</p><p>What should I do next? Rtm’s advice hadn’t included anything about that. I wanted to do something completely different, so I decided I’d paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]</p><p>接下来该做什么？罗伯特的建议没说。我想做完全不同的事，于是决定画画 —— 想看看如果全心投入，能画多好。所以停止做 YC 的第二天，我就开始画画了。手很生，过了一阵子才找回状态，但至少非常投入。[18]</p><p>I spent most of the rest of 2014 painting. I’d never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I’d always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven’t painted since. So far anyway.</p><p>2014 年剩下的时间，我大部分在画画。以前从没这么不间断地工作过，确实比以前画得好 —— 虽然还不够好，但有进步。11 月，画到一半时，我突然没动力了。在此之前，我总是好奇正在画的画最后会是什么样，但突然觉得完成这幅画像个负担。于是我停下，洗了画笔，从此没再画过 —— 至少到现在。</p><p>I realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that’s not the best one (or at least a good one) for you, then it’s getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.</p><p>我知道这听起来有点懦弱，但注意力是零和游戏。如果能选要做的事，却选了一个不是最适合（至少不是好的）自己的项目，那它就会妨碍那个更适合的项目。50 岁了，浪费时间的机会成本很高。</p><p>I started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren’t about startups. Then in March 2015 I started working on Lisp again.</p><p>我又开始写散文，接下来几个月写了不少新的，甚至有几篇不是关于创业的。2015 年 3 月，我又开始做 Lisp。</p><p>The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn’t originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what’s the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]</p><p>Lisp 的独特之处在于，它的核心是一种 “用自身定义解释器” 的语言。它最初不是普通意义上的编程语言，而是作为计算的形式模型，是图灵机的替代方案。如果你想用一种语言自己写它的解释器，需要最少多少个预定义操作符？约翰・麦卡锡发明（或者说发现）的 Lisp，就是这个问题的答案。[19]</p><p>McCarthy didn’t realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy’s interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn’t match. It was this that attracted me in college, though I didn’t understand why at the time.</p><p>麦卡锡没意识到这种 Lisp 能用来编程，直到他的研究生史蒂夫・拉塞尔提议。拉塞尔把麦卡锡的解释器翻译成 IBM 704 的机器语言，从那时起，Lisp 才开始成为普通意义上的编程语言。但它作为 “计算模型” 的起源，赋予了它其他语言无法比拟的力量和优雅。大学时吸引我的就是这个，虽然当时不知道为什么。</p><p>McCarthy’s 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you’d want in a programming language. So these had to be added, and when they were, they weren’t defined using McCarthy’s original axiomatic approach. That wouldn’t have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way — indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you’d have had to run it, and computers then weren’t powerful enough.</p><p>麦卡锡 1960 年的 Lisp 只能解释 Lisp 表达式，缺了很多编程语言该有的东西。这些都得补上，但补充时并没有用麦卡锡最初的公理方法。当时这不可行 —— 麦卡锡通过手工模拟程序执行来测试解释器，但这已经快到极限了，他甚至没发现其中一个 bug。要测试更复杂的解释器，得运行它，而当时的电脑不够强。</p><h3 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h3><p>Now they are, though. Now you could continue using McCarthy’s axiomatic approach till you’d defined a complete programming language. And as long as every change you made to McCarthy’s Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.</p><p>但现在的电脑性能够了。现在可以继续用麦卡锡的公理方法，直到定义出一门完整的编程语言。而且，只要对麦卡锡 Lisp 的每一处修改都保持 “可发现性”，理论上就能得到一门有这种特质的完整语言。说起来容易做起来难，但既然理论上可行，为什么不试试？于是我决定尝试，花了 4 年，从 2015 年 3 月 26 日到 2019 年 10 月 12 日。幸好目标明确，不然很难坚持这么久。</p><p>I wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it’s an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.</p><p>我用 Arc 语言在 Arc 里写了这个新 Lisp，叫 Bel。这听起来像矛盾，但也说明我为了让它工作用了多少技巧。通过一堆极端的 hack，我做出了一个接近 “用自身写的解释器” 的东西，还能真的运行 —— 不快，但够测试用。</p><p>I had to ban myself from writing essays during most of this time, or I’d never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you’re working on an interpreter written in itself, it’s hard to keep track of what’s happening at what level, and errors can be practically encrypted by the time you get them.</p><p>这段时间我几乎不能写散文，不然永远完不成。2015 年底我花了 3 个月写散文，回头做 Bel 时，几乎看不懂代码了 —— 不是写得烂，而是问题太复杂。当你在做 “用自身写的解释器” 时，很难追踪不同层级发生的事，错误传到你这的时候，几乎像加密过一样。</p><p>So I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I’d ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I’d check Twitter or HN and see someone asking “Does Paul Graham still code?”</p><p>所以我说，Bel 完成前不写散文。但我没告诉多少人在做 Bel。所以几年来，人们可能觉得我什么都没做，其实我在拼命工作，比以往任何时候都努力。偶尔和某个恶心的 bug 搏斗几小时后，我会刷推特或 HN，看到有人问：“保罗・格雷厄姆还编程吗</p><p>Working on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.</p><p>做 Bel 很难，但很满足。我投入得很深，任何时候脑子里都装着一大部分代码，还能在脑子里写新的。记得 2015 年一个晴天，带孩子们去海边，看着他们在潮池里玩时，我想通了如何处理和延续（continuation）有关的某个问题。当时觉得人生就该这样。我记得这个，是因为这种感觉太新奇了 —— 好在接下来几年，这样的时刻越来越多。</p><p>In the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.</p><p>2016 年夏天，我们搬到了英国。想让孩子们体验在另一个国家生活，而我生来是英国公民，所以这是 obvious 的选择。本来只想待一年，但太喜欢了，现在还住在这。所以 Bel 大部分是在英国写的。</p><p>In the fall of 2019, Bel was finally finished. Like McCarthy’s original Lisp, it’s a spec rather than an implementation, although like McCarthy’s Lisp it’s a spec expressed as code.</p><p>2019 年秋天，Bel 终于完成了。和麦卡锡最初的 Lisp 一样，它是规范而非实现，尽管也像麦卡锡的 Lisp 一样，规范是用代码表达的。</p><p>Now that I could write essays again, I wrote a bunch about topics I’d had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who’d lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it.</p><p>终于能再写散文了，我把攒的一堆主题都写了。2020 年一直在写，同时开始想其他能做的事。该怎么选？过去是怎么选的？我给自己写了篇散文回答这个问题，惊讶地发现答案又长又乱。连亲身经历的我都惊讶，也许这对别人也会有趣，对那些人生同样混乱的人也是鼓励。于是我写了个更详细的版本给别人看 —— 这就是最后一句话。</p><p>Notes</p><p>[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.</p><p>[1] 我的经历跳过了计算机发展的一个阶段：带交互式操作系统的分时机器。我直接从批处理过渡到了微型计算机，这让微型计算机显得格外令人兴奋。</p><p>[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It’s the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.</p><p>[2] 表示抽象概念的意大利语词汇，几乎都能通过英语同源词推测出来（偶尔有 “polluzione” 这样的陷阱词除外）。差异主要体现在日常用词上。所以，如果你用几个简单动词串联起大量抽象概念，一点点意大利语就能派上大用场。</p><p>[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.</p><p>[3] 我住在圣菲利切广场 4 号，所以步行去美术学院的路线正好穿过老佛罗伦萨的核心：经过皮蒂宫，过桥，路过奥尔圣米凯莱教堂，走在圣母百花大教堂和洗礼堂之间，然后沿里卡索利街走到圣马可广场。我见过佛罗伦萨街头的各种模样 —— 从空旷昏暗的冬夜，到游客摩肩接踵的闷热夏日。</p><p>[4] You can of course paint people like still lives if you want to, and they’re willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.</p><p>[4] 当然，只要愿意，你也可以像画静物一样画人。这种肖像画可以说是静物绘画的巅峰，尽管长时间静坐往往会让模特表情显得痛苦。</p><p>[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore’s Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.</p><p>[5] Interleaf 是众多 “有聪明人、造得出厉害技术，却被摩尔定律击垮” 的公司之一。20 世纪 90 年代，商用（即英特尔）处理器的算力呈指数级增长，像推土机一样碾压了高端专用硬件和软件公司。</p><p>[6] The signature style seekers at RISD weren’t specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.</p><p>[6] RISD 里追求标志性风格的人并非刻意逐利。在艺术界，金钱和 “酷” 紧密绑定：任何昂贵的东西都会被视为酷，而任何被视为酷的东西很快也会变得同样昂贵。</p><p>[7] Technically the apartment wasn’t rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.</p><p>[7] 严格来说，那个公寓不是 “租金管制”（rent-controlled），而是 “租金稳定”（rent-stabilized），但这种细微差别只有纽约人才会知道或在意。关键是它真的很便宜，还不到市场价的一半。</p><p>[8] Most software you can launch as soon as it’s done. But when the software is an online store builder and you’re hosting the stores, if you don’t have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.</p><p>[8] 大多数软件一完成就能发布。但如果是在线商店构建器，且由你托管这些商店，那么 “还没有用户” 这个事实就会格外扎眼。所以在公开上线前，我们必须先 “私下发布”—— 也就是招募一批初始用户，确保他们的商店看起来像模像样。</p><p>[9] We’d had a code editor in Viaweb for users to define their own page styles. They didn’t know it, but they were editing Lisp expressions underneath. But this wasn’t an app editor, because the code ran when the merchants’ sites were generated, not when shoppers visited them.</p><p>[9] 我们在 Viaweb 里加了个代码编辑器，让用户可以自定义页面样式。他们不知道的是，自己编辑的其实是 Lisp 表达式。但这算不上应用编辑器，因为代码是在商家网站生成时运行的，而非购物者访问时。</p><p>[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren’t they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I’m not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don’t already know, and some people dislike being told such things.</p><p>[10] 这是如今常见体验的第一次出现，后续发生的事也一样：我读评论时，发现满是愤怒的人。我怎么敢说 Lisp 比其他语言好？它们不都是图灵完备的吗？看到我文章评论的人有时会同情我，但我毫不夸张地说，从一开始就是这样。这是领域自带的属性：一篇文章必须告诉读者他们不知道的事，而有些人讨厌被这样对待。</p><p>[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.</p><p>[11] 当然，20 世纪 90 年代人们就往网上发了很多东西，但 “把东西放上网” 和 “在网上发布” 不是一回事。“在网上发布” 意味着你把在线版本视为（至少是其中一个）主要版本。</p><p>[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs’ customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.</p><p>[12] 这里有一个普遍规律，我们在 Y Combinator 的经历也印证了这一点：即使催生习俗的限制早已消失，习俗仍会长期束缚你。就像出版散文的习俗一样，风投的传统做法也曾基于真实限制 —— 创业曾经成本高昂，因此相对罕见。现在创业可以既便宜又普遍，但风投的习俗仍反映着旧世界，就像散文写作的习俗仍受限于印刷时代的约束一样。</p><p>Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).</p><p>这反过来意味着：在受快速变革影响的领域（习俗更可能过时），思想独立的人（即受习俗影响较小的人）会更有优势。</p><p>Here’s an interesting point, though: you can’t always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?</p><p>不过有个有趣的点：你没法总能预测哪些领域会被快速变革影响。软件和风投显然会，但谁能想到散文写作也会呢？</p><p>[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn’t want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.</p><p>[13] Y Combinator 不是最初的名字。一开始我们叫 “剑桥种子”（Cambridge Seed）。但我们不想要区域性名字，怕硅谷有人模仿，于是以 λ 演算里最酷的技巧之一 ——Y 组合子（Y combinator）—— 重新命名。</p><p>I picked orange as our color partly because it’s the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.</p><p>我选橙色作为我们的代表色，一部分是因为它最温暖，另一部分是因为没有风投用过这个颜色。2005 年，所有风投都用暗红、藏蓝、深绿这类沉稳颜色，因为他们想吸引的是有限合伙人（LP），而非创始人。YC 的 logo 本身是个圈内笑话：Viaweb 的 logo 是红色圆圈里一个白色 V，所以我把 YC 的 logo 设计成橙色方块里一个白色 Y。</p><p>[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.</p><p>[14] 2009 年起，YC 曾有几年以基金形式运营，因为规模太大，我个人已无力承担资金。但 Heroku 被收购后，我们有了足够资金，又回到了自资模式。</p><p>[15] I’ve never liked the term “deal flow,” because it implies that the number of new startups at any given time is fixed. This is not only false, but it’s the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.</p><p>[15] 我一直不喜欢 “项目流”（deal flow）这个词，因为它暗示某一时期的新创业公司数量是固定的。这不仅是错的，更是 YC 要打破的 —— 我们就是要促成那些本不会存在的创业公司诞生。</p><p>[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.</p><p>[16] 她（杰西卡）说，那些空调大小形状各不相同，因为当时空调热销，她能买到什么就拿了什么，但每个都比她现在能搬动的重得多。</p><p>[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you’re assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you’re present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it’s correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.</p><p>[17] HN 的另一个问题是个诡异的边缘情况：当你既写散文又运营论坛时，矛盾就来了。运营论坛时，人们会默认你就算没看所有对话，至少也看了所有涉及你的对话；而写散文时，人们会在论坛上对文章做出天马行空的误读。这两种情况单独出现时虽烦人但可忍受，结合在一起却很要命：你必须回应误读，因为 “你在关注对话” 的默认设定意味着，对任何获赞足够多的误读不回应，就会被视作默认其正确。但这又会鼓励更多误读 —— 任何想和你争执的人都会觉得，机会来了。</p><p>[18] The worst thing about leaving YC was not working with Jessica anymore. We’d been working on YC almost the whole time we’d known each other, and we’d neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.</p><p>[18] 离开 YC 最难受的是不能再和杰西卡一起工作。我们认识的几乎所有时间都在做 YC，从未试图或想过把工作和私人生活分开，所以离开就像拔起一棵深根的树。</p><p>[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy’s 1960 paper.</p><p>[19] 要更精准地理解 “发明” 与 “发现” 的区别，可以聊聊外星文明。比如，任何足够先进的外星文明肯定都知道勾股定理。我虽没那么确定，但相信他们也会知道麦卡锡 1960 年论文里的 Lisp 语言。</p><p>But if so there’s no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I&#x2F;O too. So it seems likely there exists at least one path out of McCarthy’s Lisp along which discoveredness is preserved.</p><p>若真是这样，就没理由认为这是他们可能知道的语言的极限。想必外星人也需要数字、错误处理和输入输出。所以，从麦卡锡的 Lisp 出发，很可能存在至少一条能保留 “可发现性” 的发展路径。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>早期作品</title>
    <link href="/2025/08/08/early-work/"/>
    <url>/2025/08/08/early-work/</url>
    
    <content type="html"><![CDATA[<h2 id="Early-Work"><a href="#Early-Work" class="headerlink" title="Early Work"></a>Early Work</h2><p>原文链接: <a href="https://paulgraham.com/early.html">https://paulgraham.com/early.html</a></p><p>October 2020</p><p>One of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don’t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don’t. Most people don’t even reach the stage of making something they’re embarrassed by, let alone continue past it. They’re too frightened even to start.</p><p>阻碍人们做出伟大成就的最大障碍之一，是害怕做出平庸的东西。这种恐惧并非毫无道理。许多伟大的项目在早期阶段都显得平平无奇，即便对创作者自己来说也是如此。你必须熬过这个阶段，才能触及背后真正的伟大成果。但很多人做不到。大多数人甚至没机会做出让自己尴尬的东西，更别说跨过这个阶段了 —— 他们连开始的勇气都没有。</p><p>Imagine if we could turn off the fear of making something lame. Imagine how much more we’d do.</p><p>试想，如果我们能消除这种 “害怕做出平庸作品” 的恐惧，我们能做成多少事？</p><p>Is there any hope of turning it off? I think so. I think the habits at work here are not very deeply rooted.</p><p>有办法消除它吗？我认为有。这类心理习惯的根基其实并不深。</p><p>Making new things is itself a new thing for us as a species. It has always happened, but till the last few centuries it happened so slowly as to be invisible to individual humans. And since we didn’t need customs for dealing with new ideas, we didn’t develop any.</p><p>对人类这个物种而言，创造新事物本身就是一件新鲜事。创造从未停止，但直到近几个世纪前，它的速度慢到让个体难以察觉。既然我们不需要应对新想法的习俗，自然也就没发展出这样的习俗。</p><p>We just don’t have enough experience with early versions of ambitious projects to know how to respond to them. We judge them as we would judge more finished work, or less ambitious projects. We don’t realize they’re a special case.</p><p>我们对宏大项目的早期版本缺乏足够经验，不知道该如何对待它们。我们会用评判成熟作品或普通项目的标准来评判它们，却没意识到它们是特殊的存在。</p><p>Or at least, most of us don’t. One reason I’m confident we can do better is that it’s already starting to happen. There are already a few places that are living in the future in this respect. Silicon Valley is one of them: an unknown person working on a strange-sounding idea won’t automatically be dismissed the way they would back home. In Silicon Valley, people have learned how dangerous that is.</p><p>至少，大多数人没意识到。但我相信我们能做得更好，原因之一是改变已经开始了。在这方面，有些地方已经走在了时代前面。硅谷就是其中之一：一个无名之辈带着听起来古怪的想法，不会像在别处那样被轻易否定。在硅谷，人们早已明白这种否定有多危险。</p><p>The right way to deal with new ideas is to treat them as a challenge to your imagination — not just to have lower standards, but to switch polarity entirely, from listing the reasons an idea won’t work to trying to think of ways it could. That’s what I do when I meet people with new ideas. I’ve become quite good at it, but I’ve had a lot of practice. Being a partner at Y Combinator means being practically immersed in strange-sounding ideas proposed by unknown people. Every six months you get thousands of new ones thrown at you and have to sort through them, knowing that in a world with a power-law distribution of outcomes, it will be painfully obvious if you miss the needle in this haystack. Optimism becomes urgent.</p><p>对待新想法的正确方式，是把它们当作对想象力的挑战 —— 不是降低标准，而是彻底转变思路：从罗列它行不通的理由，变成思考它可行的方法。我遇到有新想法的人时就会这么做。我现在很擅长这个，不过也是练出来的。作为 Y Combinator 的合伙人，我几乎每天都要接触无名之辈提出的各种古怪想法。每六个月就有几千个新想法涌过来，我必须一一筛选 —— 要知道，在结果呈幂律分布的世界里，要是漏掉了沙堆里的那根针（指潜力巨大的想法），后果会非常明显。这时，乐观就成了刻不容缓的事。</p><p>But I’m hopeful that, with time, this kind of optimism can become widespread enough that it becomes a social custom, not just a trick used by a few specialists. It is after all an extremely lucrative trick, and those tend to spread quickly.</p><p>但我希望，假以时日，这种乐观能普及到成为一种社会习俗，而不只是少数专家的技巧。毕竟，这种技巧能带来巨大收益，而能带来收益的东西往往传播得很快。</p><p>Of course, inexperience is not the only reason people are too harsh on early versions of ambitious projects. They also do it to seem clever. And in a field where the new ideas are risky, like startups, those who dismiss them are in fact more likely to be right. Just not when their predictions are weighted by outcome.</p><p>当然，人们对宏大项目的早期版本过于苛刻，不全是因为缺乏经验。有时是为了显得自己聪明。在创业这类新想法风险很高的领域，否定者其实更可能 “说对”—— 但这是不考虑结果权重的情况下。</p><p>But there is another more sinister reason people dismiss new ideas. If you try something ambitious, many of those around you will hope, consciously or unconsciously, that you’ll fail. They worry that if you try something ambitious and succeed, it will put you above them. In some countries this is not just an individual failing but part of the national culture.</p><p>不过，否定新想法还有一个更阴暗的原因：如果你尝试做宏大的事，身边很多人会有意无意地希望你失败。他们担心，要是你成功了，就会超越他们。在有些国家，这不仅是个人问题，甚至成了民族文化的一部分。</p><p>I wouldn’t claim that people in Silicon Valley overcome these impulses because they’re morally better. [1] The reason many hope you’ll succeed is that they hope to rise with you. For investors this incentive is particularly explicit. They want you to succeed because they hope you’ll make them rich in the process. But many other people you meet can hope to benefit in some way from your success. At the very least they’ll be able to say, when you’re famous, that they’ve known you since way back.</p><p>我不会说硅谷人克服了这种心理是因为他们道德更高尚。[1] 很多人希望你成功，是因为他们希望借你的东风向上走。对投资者来说，这种动机尤其直白：他们希望你成功，因为你可能让他们发财。但其他很多人也能从你的成功中获益 —— 至少，等你出名了，他们能说 “我早就认识你了”。</p><p>But even if Silicon Valley’s encouraging attitude is rooted in self-interest, it has over time actually grown into a sort of benevolence. Encouraging startups has been practiced for so long that it has become a custom. Now it just seems that that’s what one does with startups.</p><p>但即便硅谷的鼓励态度源于私利，久而久之也确实演变成了一种善意。鼓励创业的做法持续了太久，已经成了一种习俗。现在，人们似乎觉得 “对创业就该这么做” 是天经地义的。</p><p>Maybe Silicon Valley is too optimistic. Maybe it’s too easily fooled by impostors. Many less optimistic journalists want to believe that. But the lists of impostors they cite are suspiciously short, and plagued with asterisks. [2] If you use revenue as the test, Silicon Valley’s optimism seems better tuned than the rest of the world’s. And because it works, it will spread.</p><p>也许硅谷过于乐观了，也许它太容易被骗子忽悠。很多不那么乐观的记者愿意相信这一点。但他们列举的 “骗子” 名单短得可疑，还满是星号（指存疑）。[2] 要是以收入为标准，硅谷的乐观显然比世界其他地方更合理。而且，因为它有效，这种态度一定会传播开来。</p><p>There’s a lot more to new ideas than new startup ideas, of course. The fear of making something lame holds people back in every field. But Silicon Valley shows how quickly customs can evolve to support new ideas. And that in turn proves that dismissing new ideas is not so deeply rooted in human nature that it can’t be unlearnt.</p><p>当然，新想法不只是创业想法。害怕做出平庸的东西，在每个领域都在阻碍人们前进。但硅谷证明了，支持新想法的习俗能进化得很快。这反过来也说明，否定新想法并非深植于人性，是可以改掉的。</p><hr><p>Unfortunately, if you want to do new things, you’ll face a force more powerful than other people’s skepticism: your own skepticism. You too will judge your early work too harshly. How do you avoid that?</p><p>不幸的是，如果你想做新事，会遇到比他人质疑更强大的阻力：你自己的质疑。你也会对早期作品过于苛刻。怎么避免呢？</p><p>This is a difficult problem, because you don’t want to completely eliminate your horror of making something lame. That’s what steers you toward doing good work. You just want to turn it off temporarily, the way a painkiller temporarily turns off pain.</p><p>这很难，因为你不能彻底消除 “害怕做出平庸作品” 的心理 —— 正是这种心理指引你做出好作品。你只需要暂时关掉它，就像止痛药暂时止痛一样。</p><p>People have already discovered several techniques that work. Hardy mentions two in A Mathematician’s Apology:</p><p>人们已经发现了一些有效的方法。哈代在《一个数学家的辩白》中提到了两个：</p><p>Good work is not done by “humble” men. It is one of the first duties of a professor, for example, in any subject, to exaggerate a little both the importance of his subject and his importance in it.</p><p>“伟大的工作不是‘谦逊’的人做出来的。比如，任何学科的教授，首要职责之一就是稍微夸大自己学科的重要性，以及自己在学科中的分量。”</p><p>If you overestimate the importance of what you’re working on, that will compensate for your mistakenly harsh judgment of your initial results. If you look at something that’s 20% of the way to a goal worth 100 and conclude that it’s 10% of the way to a goal worth 200, your estimate of its expected value is correct even though both components are wrong.</p><p>如果你高估自己正在做的事的重要性，就能抵消对早期成果的苛刻评判。假设一件事完成了 20%，目标价值 100；但你觉得它完成了 10%，目标价值 200—— 虽然两个判断都错了，但最终的预期价值评估是对的。</p><p>It also helps, as Hardy suggests, to be slightly overconfident. I’ve noticed in many fields that the most successful people are slightly overconfident. On the face of it this seems implausible. Surely it would be optimal to have exactly the right estimate of one’s abilities. How could it be an advantage to be mistaken? Because this error compensates for other sources of error in the opposite direction: being slightly overconfident armors you against both other people’s skepticism and your own.</p><p>哈代还说，稍微过度自信也有帮助。我发现，很多领域最成功的人都有点过度自信。表面看这不合理 —— 对自己能力的判断刚好才是最优的，怎么会因判断错误而受益？因为这种错误能抵消其他方向的错误：稍微过度自信，能帮你抵御他人的质疑和自己的怀疑。</p><p>Ignorance has a similar effect. It’s safe to make the mistake of judging early work as finished work if you’re a sufficiently lax judge of finished work. I doubt it’s possible to cultivate this kind of ignorance, but empirically it’s a real advantage, especially for the young.</p><p>无知也有类似效果。如果你对 “成品” 的评判标准足够宽松，那么把早期作品当成品评判，就算错了也没关系。我不确定这种无知能不能刻意培养，但从经验来看，它确实是种优势，尤其对年轻人来说。</p><p>Another way to get through the lame phase of ambitious projects is to surround yourself with the right people — to create an eddy in the social headwind. But it’s not enough to collect people who are always encouraging. You’d learn to discount that. You need colleagues who can actually tell an ugly duckling from a baby swan. The people best able to do this are those working on similar projects of their own, which is why university departments and research labs work so well. You don’t need institutions to collect colleagues. They naturally coalesce, given the chance. But it’s very much worth accelerating this process by seeking out other people trying to do new things.</p><p>另一个熬过宏大项目 “平庸期” 的方法，是和对的人在一起 —— 在社会的逆风里造出一个漩涡。但光找总在鼓励你的人不够，你会慢慢不把他们的话当回事。你需要能区分 “丑小鸭” 和 “小天鹅” 的同伴。最擅长这个的，是那些自己也在做类似项目的人 —— 这就是大学院系和研究实验室效率高的原因。你不需要靠机构来聚集同伴，只要有机会，他们自然会凑到一起。但主动寻找其他想做新事的人，能加速这个过程。</p><p>Teachers are in effect a special case of colleagues. It’s a teacher’s job both to see the promise of early work and to encourage you to continue. But teachers who are good at this are unfortunately quite rare, so if you have the opportunity to learn from one, take it. [3]</p><p>老师其实是特殊的同伴。老师的职责就是看到早期作品的潜力，并鼓励你继续下去。可惜擅长这个的老师很少，要是有机会向这样的老师学习，一定要抓住。[3]</p><p>For some it might work to rely on sheer discipline: to tell yourself that you just have to press on through the initial crap phase and not get discouraged. But like a lot of “just tell yourself” advice, this is harder than it sounds. And it gets still harder as you get older, because your standards rise. The old do have one compensating advantage though: they’ve been through this before.</p><p>对有些人来说，纯粹靠自律可能有用：告诉自己必须熬过最初的 “垃圾期”，不气馁。但就像很多 “告诉自己” 的建议一样，说起来容易做起来难。而且年纪越大越难，因为你的标准会提高。不过，年长者有一个补偿性优势：他们经历过这个阶段。</p><p>It can help if you focus less on where you are and more on the rate of change. You won’t worry so much about doing bad work if you can see it improving. Obviously the faster it improves, the easier this is. So when you start something new, it’s good if you can spend a lot of time on it. That’s another advantage of being young: you tend to have bigger blocks of time.</p><p>少关注现状，多关注进步速度，也会有帮助。如果能看到作品在进步，你就不会太担心它现在很差。进步越快，就越容易做到这一点。所以，开始做新事时，最好能投入大量时间。这是年轻人的另一个优势：他们往往有大块的时间。</p><p>Another common trick is to start by considering new work to be of a different, less exacting type. To start a painting saying that it’s just a sketch, or a new piece of software saying that it’s just a quick hack. Then you judge your initial results by a lower standard. Once the project is rolling you can sneakily convert it to something more. [4]</p><p>另一个常见技巧是，一开始就把新作品定义为 “不那么严格的类型”。比如画一幅画，先说 “只是草稿”；写一个新软件，先说 “只是快速试做”。这样你就会用更低的标准评判早期成果。等项目步入正轨，再悄悄把它升级成更重要的东西。[4]</p><p>This will be easier if you use a medium that lets you work fast and doesn’t require too much commitment up front. It’s easier to convince yourself that something is just a sketch when you’re drawing in a notebook than when you’re carving stone. Plus you get initial results faster. [5] [6]</p><p>如果用的工具能让你快速推进，又不需要一开始就投入太多，会更容易做到这一点。在笔记本上画 “草稿”，比在石头上刻 “草稿” 更容易说服自己；而且，前者能更快看到初步成果。[5][6]</p><p>It will be easier to try out a risky project if you think of it as a way to learn and not just as a way to make something. Then even if the project truly is a failure, you’ll still have gained by it. If the problem is sharply enough defined, failure itself is knowledge: if the theorem you’re trying to prove turns out to be false, or you use a structural member of a certain size and it fails under stress, you’ve learned something, even if it isn’t what you wanted to learn. [7]</p><p>如果把有风险的项目当作学习机会，而不只是 “做出点什么”，尝试起来会更容易。这样就算项目真失败了，你也有收获。如果问题定义得足够清晰，失败本身就是知识：比如你想证明的定理是错的，或者某种尺寸的结构件受力时断了 —— 就算不是你想学到的，你也学到了东西。[7]</p><p>One motivation that works particularly well for me is curiosity. I like to try new things just to see how they’ll turn out. We started Y Combinator in this spirit, and it was one of main things that kept me going while I was working on Bel. Having worked for so long with various dialects of Lisp, I was very curious to see what its inherent shape was: what you’d end up with if you followed the axiomatic approach all the way.</p><p>对我来说，好奇心是个特别有效的动机。我喜欢尝试新事，就想看看结果会怎样。我们创办 Y Combinator 时就是这种心态，这也是我做 Bel（一种编程语言）时撑下去的主要原因。我用了很多年 Lisp 的各种方言，特别好奇它的 “本来面目”：如果一直遵循公理化方法，最后会得到什么。</p><p>But it’s a bit strange that you have to play mind games with yourself to avoid being discouraged by lame-looking early efforts. The thing you’re trying to trick yourself into believing is in fact the truth. A lame-looking early version of an ambitious project truly is more valuable than it seems. So the ultimate solution may be to teach yourself that.</p><p>但有点奇怪的是，你必须用心理技巧说服自己，才不会被早期作品的 “平庸” 打垮。而你试图说服自己相信的，其实是事实：宏大项目的早期版本，哪怕看起来平庸，其价值也比表面上高。所以，最终的解决办法可能是教会自己这一点。</p><p>One way to do it is to study the histories of people who’ve done great work. What were they thinking early on? What was the very first thing they did? It can sometimes be hard to get an accurate answer to this question, because people are often embarrassed by their earliest work and make little effort to publish it. (They too misjudge it.) But when you can get an accurate picture of the first steps someone made on the path to some great work, they’re often pretty feeble. [8]</p><p>方法之一是研究做出伟大成就的人的历史。他们早期在想什么？第一步做了什么？有时很难得到准确答案，因为人们常常为早期作品感到尴尬，没太想过要公开（他们也误判了自己的早期作品）。但当你看清有人走向伟大的最初几步时，会发现它们往往很不起眼。[8]</p><p>Perhaps if you study enough such cases, you can teach yourself to be a better judge of early work. Then you’ll be immune both to other people’s skepticism and your own fear of making something lame. You’ll see early work for what it is.</p><p>也许研究足够多这样的案例后，你就能学会更好地评判早期作品。那时，你就不会被他人的质疑或自己的恐惧困扰，能看清早期作品的真正价值。</p><p>Curiously enough, the solution to the problem of judging early work too harshly is to realize that our attitudes toward it are themselves early work. Holding everything to the same standard is a crude version 1. We’re already evolving better customs, and we can already see signs of how big the payoff will be.</p><p>说来也怪，解决 “对早期作品过于苛刻” 的问题，关键是意识到我们对它的态度本身也是 “早期作品”。用同一标准评判一切，只是粗糙的 1.0 版本。我们已经在进化出更好的习俗，也已经能看到它能带来多大的回报。</p><p>Notes</p><p>[1] This assumption may be too conservative. There is some evidence that historically the Bay Area has attracted a different sort of person than, say, New York City.</p><p>[1] 这种假设可能过于保守。有证据表明，从历史上看，旧金山湾区吸引的人群与纽约市等其他地方的人群存在差异。</p><p>[2] One of their great favorites is Theranos. But the most conspicuous feature of Theranos’s cap table is the absence of Silicon Valley firms. Journalists were fooled by Theranos, but Silicon Valley investors weren’t.</p><p>[2] 他们（指前文提到的记者）最常举的例子是 Theranos（血液检测公司，因欺诈丑闻倒闭）。但 Theranos 融资名单中最显眼的一点是：没有硅谷投资公司的身影。记者们被 Theranos 骗了，但硅谷的投资者没有。</p><p>[3] I made two mistakes about teachers when I was younger. I cared more about professors’ research than their reputations as teachers, and I was also wrong about what it meant to be a good teacher. I thought it simply meant to be good at explaining things.</p><p>[3] 我年轻时对老师有两个误解：一是更看重教授的研究成果，而非他们作为教师的口碑；二是误解了 “好老师” 的定义 —— 我曾以为，好老师仅仅意味着擅长讲解知识。</p><p>[4] Patrick Collison points out that you can go past treating something as a hack in the sense of a prototype and onward to the sense of the word that means something closer to a practical joke:<br>I think there may be something related to being a hack that can be powerful — the idea of making the tenuousness and implausibility a feature. “Yes, it’s a bit ridiculous, right? I’m just trying to see how far such a naive approach can get.” YC seemed to me to have this characteristic.</p><p>[4] 帕特里克・科里森指出，你可以超越 “把作品当作原型草稿” 的阶段，甚至把它变成更接近 “恶作剧” 的存在：<br>“我觉得‘粗糙感’可能有一种强大的力量 —— 把那种脆弱感和不可能性变成特色。‘没错，这确实有点荒谬，对吧？我就是想看看这种天真的做法能走多远。’在我看来，Y Combinator 就有这种特质。”</p><p>[5] Much of the advantage of switching from physical to digital media is not the software per se but that it lets you start something new with little upfront commitment.</p><p>[5] 从实体媒介转向数字媒介的优势，很大程度上不在于软件本身，而在于它能让你以极低的前期投入开启新事物。</p><p>[6] John Carmack adds:<br>The value of a medium without a vast gulf between the early work and the final work is exemplified in game mods. The original Quake game was a golden age for mods, because everything was very flexible, but so crude due to technical limitations, that quick hacks to try out a gameplay idea weren’t all that far from the official game. Many careers were born from that, but as the commercial game quality improved over the years, it became almost a full time job to make a successful mod that would be appreciated by the community. This was dramatically reversed with Minecraft and later Roblox, where the entire esthetic of the experience was so explicitly crude that innovative gameplay concepts became the overriding value. These “crude” game mods by single authors are now often bigger deals than massive professional teams’ work.</p><p>[6] 约翰・卡马克补充道：<br>“一种媒介的价值，在于它能消除早期作品与最终成品之间的巨大鸿沟 —— 游戏模组就是典型例子。初代《雷神之锤》是模组创作的黄金时代，因为当时的技术限制让游戏本身足够粗糙，同时又具备高度灵活性，所以为测试玩法而做的快速草稿，与官方游戏的差距并没有那么大。许多人的职业生涯由此起步。但随着多年来商业游戏质量的提升，制作一个能获得社区认可的成功模组，几乎成了一份全职工作。而《我的世界》及后来的《罗布乐思》彻底扭转了这一趋势：它们的整体风格刻意保持粗糙，使得创新的玩法概念成为最核心的价值。如今，单个创作者制作的这些‘粗糙’游戏模组，往往比大型专业团队的作品更受关注。”</p><p>[7] Lisa Randall suggests that we<br>treat new things as experiments. That way there’s no such thing as failing, since you learn something no matter what. You treat it like an experiment in the sense that if it really rules something out, you give up and move on, but if there’s some way to vary it to make it work better, go ahead and do that</p><p>[7] 莉萨・兰德尔建议我们：<br>“把新事物当作实验。这样就不存在‘失败’一说，因为无论结果如何，你都能学到东西。所谓‘当作实验’，是指如果它确实证明某条路行不通，就果断放弃并转向新方向；但如果有办法调整它、让它更好地运转，就继续推进。”</p><p>[8] Michael Nielsen points out that the internet has made this easier, because you can see programmers’ first commits, musicians’ first videos, and so on.</p><p>[8] 迈克尔・尼尔森指出，互联网让这一点（指研究伟大成就的早期历程）变得更容易了 —— 你可以看到程序员的首次代码提交、音乐家的早期视频等等。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创造财富</title>
    <link href="/2025/08/07/how-to-make-wealth/"/>
    <url>/2025/08/07/how-to-make-wealth/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Make-Wealth"><a href="#How-to-Make-Wealth" class="headerlink" title="How to Make Wealth"></a>How to Make Wealth</h2><p>原文链接: <a href="https://paulgraham.com/wealth.html">https://paulgraham.com/wealth.html</a></p><p>May 2004</p><p>(This essay was originally published in Hackers &amp; Painters.)</p><p>If you wanted to get rich, how would you do it? I think your best bet would be to start or join a startup. That’s been a reliable way to get rich for hundreds of years. The word “startup” dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.</p><p>（本文最初发表于《黑客与画家》）</p><p>如果你想致富，你会怎么做？我认为最好的办法是创办或加入一家创业公司。几百年来，这一直是一条可靠的致富途径。“创业公司” 一词可追溯到 20 世纪 60 年代，但创业公司所做的事，与中世纪那些有风险投资支持的贸易远航极为相似。</p><p>Startups usually involve technology, so much so that the phrase “high-tech startup” is almost redundant. A startup is a small company that takes on a hard technical problem.</p><p>创业公司通常与技术相关，以至于 “高科技创业公司” 这个说法几乎显得多余。创业公司就是一家致力于解决棘手技术问题的小公司。</p><p>Lots of people get rich knowing nothing more than that. You don’t have to know physics to be a good pitcher. But I think it could give you an edge to understand the underlying principles. Why do startups have to be small? Will a startup inevitably stop being a startup as it grows larger? And why do they so often work on developing new technology? Why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent?</p><p>很多人仅凭这一点就发了财。就像优秀的棒球投手不一定需要懂物理一样，创业也未必需要懂底层逻辑。但我认为，理解这些底层逻辑能让你更有优势。为什么创业公司必须保持小规模？随着规模扩大，创业公司是否必然不再是 “创业公司”？它们为什么常常专注于开发新技术？为什么有那么多创业公司在研发新药或开发软件，却没有一家在卖玉米油或洗衣液？</p><p><strong>The Proposition</strong></p><h3 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a><strong>核心逻辑</strong></h3><p>Economically, you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four. This pays especially well in technology, where you earn a premium for working fast.</p><p>从经济角度看，创业可以理解为一种将整个职业生涯压缩到几年内的方式。你不必低强度地工作四十年，而是尽最大可能高强度地工作四年。这在技术领域的回报尤其丰厚，因为在这个领域，快速工作能带来额外收益。</p><p>Here is a brief sketch of the economic proposition. If you’re a good hacker in your mid twenties, you can get a job paying about $80,000 per year. So on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even. You could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour. [1] You should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your boss in a big company. Then there is one more multiple: how much smarter are you than your job description expects you to be? Suppose another multiple of three. Combine all these multipliers, and I’m claiming you could be 36 times more productive than you’re expected to be in a random corporate job. [2] If a fairly good hacker is worth $80,000 a year at a big company, then a smart hacker working very hard without any corporate bullshit to slow him down should be able to do work worth about $3 million a year.</p><p>以下是这种经济逻辑的简要概述。如果你是一名 25 岁左右的优秀黑客，你能找到一份年薪约 8 万美元的工作。因此，平均来看，这样的黑客每年至少要为公司创造 8 万美元的价值，公司才能实现收支平衡。你或许能比企业员工多工作一倍的时间，而且如果专注投入，每小时的产出可能是他们的三倍。[1] 此外，在大公司里，你得忍受那些 “地中海发型” 中层经理的拖累，而创业能让你摆脱这种拖累，这至少又能带来一倍的效率提升。还有一个乘数：你比岗位描述所期望的水平要聪明多少？假设这个乘数是 3。把所有这些乘数相乘，我认为你在创业时的生产力，可能是在普通企业岗位上的 36 倍。[2] 如果一名不错的黑客在大公司年薪 8 万美元，那么一名聪明的黑客在没有企业繁文缛节拖累的情况下拼命工作，每年应该能创造约 300 万美元的价值。</p><p>Like all back-of-the-envelope calculations, this one has a lot of wiggle room. I wouldn’t try to defend the actual numbers. But I stand by the structure of the calculation. I’m not claiming the multiplier is precisely 36, but it is certainly more than 10, and probably rarely as high as 100.</p><p>和所有粗略估算一样，这个数字有很大浮动空间。我不会去辩护具体的数值，但我坚信这个计算逻辑。我不是说乘数精确到 36，但它肯定超过 10，而且可能很少达到 100。</p><p>If $3 million a year seems high, remember that we’re talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health.</p><p>如果 300 万美元一年听起来太高，要记住我们说的是极限情况：你不仅没有休闲时间，甚至工作到危害健康的程度。</p><p>Startups are not magic. They don’t change the laws of wealth creation. They just represent a point at the far end of the curve. There is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars’ worth of pain. For example, one way to make a million dollars would be to work for the Post Office your whole life, and save every penny of your salary. Imagine the stress of working for the Post Office for fifty years. In a startup you compress all this stress into three or four years. You do tend to get a certain bulk discount if you buy the economy-size pain, but you can’t evade the fundamental conservation law. If starting a startup were easy, everyone would do it.</p><p>创业并非魔法，它不会改变财富创造的规律，只是代表着曲线最末端的一个点。这里存在一条守恒定律：如果你想赚 100 万美元，就得承受价值 100 万美元的痛苦。例如，一种赚 100 万美元的方式是在邮局工作一辈子，把每一分工资都存起来。想象一下在邮局工作 50 年的压力吧。而在创业公司，你把所有这些压力压缩到三四年里。批量承受痛苦确实能享受一定的 “折扣”，但你无法逃避这条基本守恒定律。如果创业很容易，那每个人都会去做。</p><p><strong>Millions, not Billions</strong></p><h3 id="百万，而非亿万"><a href="#百万，而非亿万" class="headerlink" title="百万，而非亿万"></a><strong>百万，而非亿万</strong></h3><p>If $3 million a year seems high to some people, it will seem low to others. Three million? How do I get to be a billionaire, like Bill Gates?</p><p>如果 300 万美元一年在某些人看来太高，在另一些人看来可能又太低。三百万？我怎么才能像比尔・盖茨那样成为亿万富翁？</p><p>So let’s get Bill Gates out of the way right now. It’s not a good idea to use famous rich people as examples, because the press only write about the very richest, and these tend to be outliers. Bill Gates is a smart, determined, and hardworking man, but you need more than that to make as much money as he has. You also need to be very lucky.</p><p>那我们现在就来说说比尔・盖茨。用著名的富豪举例不是个好主意，因为媒体只报道最富有的人，而这些人往往是特例。比尔・盖茨聪明、坚定且勤奋，但要赚他那么多钱，光靠这些还不够，你还需要非常幸运。</p><p>There is a large random factor in the success of any company. So the guys you end up reading about in the papers are the ones who are very smart, totally dedicated, and win the lottery. Certainly Bill is smart and dedicated, but Microsoft also happens to have been the beneficiary of one of the most spectacular blunders in the history of business: the licensing deal for DOS. No doubt Bill did everything he could to steer IBM into making that blunder, and he has done an excellent job of exploiting it, but if there had been one person with a brain on IBM’s side, Microsoft’s future would have been very different. Microsoft at that stage had little leverage over IBM. They were effectively a component supplier. If IBM had required an exclusive license, as they should have, Microsoft would still have signed the deal. It would still have meant a lot of money for them, and IBM could easily have gotten an operating system elsewhere.</p><p>任何公司的成功都有很大的随机因素。所以，你最终在报纸上读到的那些人，都是既聪明、又全身心投入，还中了 “彩票” 的人。比尔当然聪明又专注，但微软也恰好受益于商业史上最惊人的失误之一：DOS 系统的授权协议。毫无疑问，比尔尽了全力促使 IBM 犯下这个错误，并且出色地利用了它。但如果 IBM 那边有一个脑子清醒的人，微软的未来会大不相同。在那个阶段，微软对 IBM 几乎没有影响力，实际上只是一个组件供应商。如果 IBM 要求独家授权（他们本该如此），微软还是会签下协议 —— 这仍然能给他们带来很多钱，而 IBM 也能轻易从别处弄到操作系统。</p><p>Instead IBM ended up using all its power in the market to give Microsoft control of the PC standard. From that point, all Microsoft had to do was execute. They never had to bet the company on a bold decision. All they had to do was play hardball with licensees and copy more innovative products reasonably promptly.</p><p>结果却是，IBM 利用其在市场上的所有力量，让微软掌控了个人电脑的标准。从那时起，微软要做的只是执行：他们不必为大胆的决策赌上整个公司，只需对授权商采取强硬态度，并及时模仿更具创新性的产品。</p><p>If IBM hadn’t made this mistake, Microsoft would still have been a successful company, but it could not have grown so big so fast. Bill Gates would be rich, but he’d be somewhere near the bottom of the Forbes 400 with the other guys his age.</p><p>如果 IBM 没有犯这个错，微软仍然会是一家成功的公司，但不可能成长得如此之快、如此之大。比尔・盖茨会很富有，但可能只是福布斯 400 富豪榜中与他同龄的那些人里排名靠后的一个。</p><p>There are a lot of ways to get rich, and this essay is about only one of them. This essay is about how to make money by creating wealth and getting paid for it. There are plenty of other ways to get money, including chance, speculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft, lobbying, counterfeiting, and prospecting. Most of the greatest fortunes have probably involved several of these.</p><p>致富的方式有很多，本文只讨论其中一种：通过创造财富并从中获得报酬来赚钱。其他方式还有很多，包括机遇、投机、婚姻、继承、盗窃、勒索、欺诈、垄断、贪污、游说、伪造和勘探。大多数巨额财富可能都涉及其中几种方式。</p><p>The advantage of creating wealth, as a way to get rich, is not just that it’s more legitimate (many of the other methods are now illegal) but that it’s more straightforward. You just have to do something people want.</p><p>把创造财富作为致富方式的优势，不仅在于它更合法（其他很多方式现在都是非法的），还在于它更直接：你只需要做人们想要的事。</p><p><strong>Money Is Not Wealth</strong></p><h3 id="金钱不等同于财富"><a href="#金钱不等同于财富" class="headerlink" title="金钱不等同于财富"></a><strong>金钱不等同于财富</strong></h3><p>If you want to create wealth, it will help to understand what it is. Wealth is not the same thing as money. [3] Wealth is as old as human history. Far older, in fact; ants have wealth. Money is a comparatively recent invention.</p><p>如果你想创造财富，理解财富是什么会有帮助。财富和金钱不是一回事。[3] 财富和人类历史一样古老，实际上更古老 —— 蚂蚁都有财富。而金钱是相对较新的发明。</p><p>Wealth is the fundamental thing. Wealth is stuff we want: food, clothes, houses, cars, gadgets, travel to interesting places, and so on. You can have wealth without having money. If you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldn’t need money. Whereas if you were in the middle of Antarctica, where there is nothing to buy, it wouldn’t matter how much money you had.</p><p>财富是根本。财富是我们想要的东西：食物、衣服、房子、汽车、 小工具、去有趣的地方旅行等等。你可以拥有财富而没有金钱。如果你有一台魔法机器，能按需为你变出汽车、做晚餐、洗衣服，或者做任何你想做的事，你就不需要金钱了。反之，如果你在南极腹地，没有东西可买，那么你有多少钱都没用。</p><p>Wealth is what you want, not money. But if wealth is the important thing, why does everyone talk about making money? It is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable. But they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money.</p><p>财富是你想要的东西，而不是金钱。但如果财富才是重要的，为什么每个人都在谈论赚钱呢？这是一种简略说法：金钱是转移财富的方式，实际上它们通常可以互换。但它们不是一回事，除非你打算通过伪造货币致富，否则谈论 “赚钱” 会让你更难理解如何创造财富。</p><p>Money is a side effect of specialization. In a specialized society, most of the things you need, you can’t make for yourself. If you want a potato or a pencil or a place to live, you have to get it from someone else.</p><p>金钱是专业化的副产品。在一个专业化的社会里，你需要的大多数东西都无法自己制造。如果你想要一个土豆、一支铅笔或一个住处，你得从别人那里获得。</p><p>How do you get the person who grows the potatoes to give you some? By giving him something he wants in return. But you can’t get very far by trading things directly with the people who need them. If you make violins, and none of the local farmers wants one, how will you eat?</p><p>你如何让种土豆的人给你一些土豆？通过给他一些他想要的东西作为回报。但直接用东西和需要它们的人交换，你走不了多远。如果你制作小提琴，而当地农民没人想要，你该怎么吃饭？</p><p>The solution societies find, as they get more specialized, is to make the trade into a two-step process. Instead of trading violins directly for potatoes, you trade violins for, say, silver, which you can then trade again for anything else you need. The intermediate stuff– the medium of exchange– can be anything that’s rare and portable. Historically metals have been the most common, but recently we’ve been using a medium of exchange, called the dollar, that doesn’t physically exist. It works as a medium of exchange, however, because its rarity is guaranteed by the U.S. Government.</p><p>随着社会越来越专业化，人们找到的解决方案是把交易变成两步流程。你不用小提琴直接换土豆，而是用小提琴换某种东西（比如银），然后再用这种东西换你需要的任何东西。这种中间物 —— 交换媒介 —— 可以是任何稀有且便携的东西。历史上，金属是最常见的，但最近我们一直在使用一种名为 “美元” 的交换媒介，它实际上并不存在物理形态。但它能作为交换媒介，是因为美国政府保证了它的稀有性。</p><p>The advantage of a medium of exchange is that it makes trade work. The disadvantage is that it tends to obscure what trade really means. People think that what a business does is make money. But money is just the intermediate stage– just a shorthand– for whatever people want. What most businesses really do is make wealth. They do something people want. [4]</p><p>交换媒介的优势是让交易得以进行，劣势是它往往掩盖了交易的真正意义。人们认为企业的作用是赚钱，但金钱只是中间阶段 —— 只是一种简略说法 —— 代表人们想要的任何东西。大多数企业真正做的是创造财富：它们做人们想要的事。[4]</p><p><strong>The Pie Fallacy</strong></p><h3 id="馅饼谬误"><a href="#馅饼谬误" class="headerlink" title="馅饼谬误"></a><strong>馅饼谬误</strong></h3><p>A surprising number of people retain from childhood the idea that there is a fixed amount of wealth in the world. There is, in any normal family, a fixed amount of money at any moment. But that’s not the same thing.</p><p>令人惊讶的是，很多人从小就认为世界上的财富总量是固定的。在任何普通家庭中，某一时刻的金钱数量确实是固定的，但这和财富不是一回事。令人惊讶的是，很多人从小就认为世界上的财富总量是固定的。在任何普通家庭中，某一时刻的金钱数量确实是固定的，但这和财富不是一回事。</p><p>When wealth is talked about in this context, it is often described as a pie. “You can’t make the pie larger,” say politicians. When you’re talking about the amount of money in one family’s bank account, or the amount available to a government from one year’s tax revenue, this is true. If one person gets more, someone else has to get less.</p><p>在这种语境下谈论财富时，人们常把它描述成一个馅饼。“你不能把馅饼做得更大，” 政客们说。当你谈论一个家庭银行账户里的钱，或者政府一年的税收收入时，这是对的：如果一个人多拿了，另一个人就必须少拿。</p><p>I can remember believing, as a child, that if a few rich people had all the money, it left less for everyone else. Many people seem to continue to believe something like this well into adulthood. This fallacy is usually there in the background when you hear someone talking about how x percent of the population have y percent of the wealth. If you plan to start a startup, then whether you realize it or not, you’re planning to disprove the Pie Fallacy.</p><p>我记得小时候曾认为，如果少数富人拥有所有的钱，留给其他人的就少了。很多人似乎到成年后仍然相信类似的说法。当你听到有人说 “x% 的人拥有 y% 的财富” 时，这种谬误往往就隐藏在背后。如果你打算创办一家创业公司，无论你是否意识到，你都是在计划推翻这种馅饼谬误。</p><p>What leads people astray here is the abstraction of money. Money is not wealth. It’s just something we use to move wealth around. So although there may be, in certain specific moments (like your family, this month) a fixed amount of money available to trade with other people for things you want, there is not a fixed amount of wealth in the world. You can make more wealth. Wealth has been getting created and destroyed (but on balance, created) for all of human history.</p><p>让人们误入歧途的是金钱的抽象性。金钱不是财富，它只是我们用来转移财富的工具。所以，尽管在某些特定时刻（比如你家这个月），可用来和别人交换你想要的东西的金钱数量是固定的，但世界上的财富总量并不是固定的。你可以创造更多财富。在整个人类历史中，财富一直在被创造和毁灭（但总体上是在被创造）。</p><p>Suppose you own a beat-up old car. Instead of sitting on your butt next summer, you could spend the time restoring your car to pristine condition. In doing so you create wealth. The world is– and you specifically are– one pristine old car the richer. And not just in some metaphorical way. If you sell your car, you’ll get more for it.</p><p>假设你有一辆破旧的老车。明年夏天，你不用坐着无所事事，而是可以花时间把车修复到崭新的状态。在这个过程中，你创造了财富。世界 —— 特别是你 —— 因为多了一辆崭新的老车而变得更富有。而且这不只是比喻意义上的：如果你卖掉这辆车，能得到更多钱。</p><p>In restoring your old car you have made yourself richer. You haven’t made anyone else poorer. So there is obviously not a fixed pie. And in fact, when you look at it this way, you wonder why anyone would think there was. [5]</p><p>修复老车让你变得更富有，而没有让任何人变得更贫穷。所以很明显，财富不是固定的馅饼。事实上，这样想的话，你会奇怪为什么会有人认为财富是固定的。[5]</p><p>Kids know, without knowing they know, that they can create wealth. If you need to give someone a present and don’t have any money, you make one. But kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones– a mere expression of the proverbial thought that counts. And indeed, the lumpy ashtrays we made for our parents did not have much of a resale market.</p><p>孩子们本能地知道自己可以创造财富，只是他们没意识到。如果你需要给别人送礼物却没有钱，你会自己做一个。但孩子们不擅长做东西，所以他们认为自制礼物和商店买的是完全不同的、更低等的东西 —— 只是那句老话 “心意最重要” 的一种表达。的确，我们为父母做的那些粗糙的烟灰缸，在二手市场上卖不出什么价钱。</p><p><strong>Craftsmen</strong></p><h3 id="工匠"><a href="#工匠" class="headerlink" title="工匠"></a><strong>工匠</strong></h3><p>The people most likely to grasp that wealth can be created are the ones who are good at making things, the craftsmen. Their hand-made objects become store-bought ones. But with the rise of industrialization there are fewer and fewer craftsmen. One of the biggest remaining groups is computer programmers.</p><p>最有可能理解财富可以被创造的人，是那些擅长制作东西的人 —— 工匠。他们手工制作的东西变成了商店里售卖的商品。但随着工业化的兴起，工匠越来越少。现存最大的工匠群体之一是计算机程序员。</p><p>A programmer can sit down in front of a computer and create wealth. A good piece of software is, in itself, a valuable thing. There is no manufacturing to confuse the issue. Those characters you type are a complete, finished product. If someone sat down and wrote a web browser that didn’t suck (a fine idea, by the way), the world would be that much richer. [5b]</p><p>程序员可以坐在电脑前创造财富。一个好的软件本身就是有价值的东西，这里没有制造过程来混淆问题 —— 你输入的那些字符就是一个完整的、成品的产品。如果有人坐下来写一个不烂的网页浏览器（顺便说一句，这是个好主意），世界会因此变得更富有。[5b]</p><p>Everyone in a company works together to create wealth, in the sense of making more things people want. Many of the employees (e.g. the people in the mailroom or the personnel department) work at one remove from the actual making of stuff. Not the programmers. They literally think the product, one line at a time. And so it’s clearer to programmers that wealth is something that’s made, rather than being distributed, like slices of a pie, by some imaginary Daddy.</p><p>公司里的每个人都在共同创造财富，也就是制造更多人们想要的东西。很多员工（比如邮件收发室或人事部的人）的工作与实际制造东西有一层隔阂，但程序员不是。他们真的是一行一行地 “思考” 出产品。因此，程序员更清楚财富是被创造出来的，而不是像想象中的 “爸爸” 分馅饼那样被分配的。</p><p>It’s also obvious to programmers that there are huge variations in the rate at which wealth is created. At Viaweb we had one programmer who was a sort of monster of productivity. I remember watching what he did one long day and estimating that he had added several hundred thousand dollars to the market value of the company. A great programmer, on a roll, could create a million dollars worth of wealth in a couple weeks. A mediocre programmer over the same period will generate zero or even negative wealth (e.g. by introducing bugs).</p><p>程序员也很清楚，财富创造的速度存在巨大差异。在 Viaweb，我们有一位程序员，他的生产力高得惊人。我记得有一天看他工作了一整天，估算他为公司增加了几十万美元的市值。一个优秀的程序员在状态好的时候，几周内就能创造 100 万美元的财富。而一个平庸的程序员在同样的时间里，可能创造零甚至负的财富（比如引入漏洞）。</p><p>This is why so many of the best programmers are libertarians. In our world, you sink or swim, and there are no excuses. When those far removed from the creation of wealth– undergraduates, reporters, politicians– hear that the richest 5% of the people have half the total wealth, they tend to think injustice! An experienced programmer would be more likely to think is that all? The top 5% of programmers probably write 99% of the good software.</p><p>这就是为什么很多最优秀的程序员是自由主义者。在我们的世界里，你要么成功，要么失败，没有借口。那些远离财富创造的人 —— 大学生、记者、政客 —— 听到 “最富有的 5% 的人拥有一半的财富” 时，往往会认为这是不公！而有经验的程序员更可能想：“才这么点？” 最顶尖的 5% 的程序员可能写出了 99% 的优秀软件。</p><p>Wealth can be created without being sold. Scientists, till recently at least, effectively donated the wealth they created. We are all richer for knowing about penicillin, because we’re less likely to die from infections. Wealth is whatever people want, and not dying is certainly something we want. Hackers often donate their work by writing open source software that anyone can use for free. I am much the richer for the operating system FreeBSD, which I’m running on the computer I’m using now, and so is Yahoo, which runs it on all their servers.</p><p>财富可以在不被出售的情况下被创造。至少直到最近，科学家创造的财富实际上是捐赠出去的。我们都因为知道青霉素而变得更富有，因为我们死于感染的可能性更小了。财富是人们想要的任何东西，而 “不死亡” 显然是我们想要的。黑客经常通过编写开源软件来捐赠自己的工作，任何人都可以免费使用。我因为 FreeBSD 操作系统而变得更富有（我现在用的电脑就运行着它），雅虎也是如此 —— 他们所有的服务器都在运行它。</p><p><strong>What a Job Is</strong></p><h3 id="工作是什么"><a href="#工作是什么" class="headerlink" title="工作是什么"></a><strong>工作是什么</strong></h3><p>In industrialized countries, people belong to one institution or another at least until their twenties. After all those years you get used to the idea of belonging to a group of people who all get up in the morning, go to some set of buildings, and do things that they do not, ordinarily, enjoy doing. Belonging to such a group becomes part of your identity: name, age, role, institution. If you have to introduce yourself, or someone else describes you, it will be as something like, John Smith, age 10, a student at such and such elementary school, or John Smith, age 20, a student at such and such college.</p><p>在工业化国家，人们至少在二十几岁前都属于某个机构。多年以后，你会习惯这种归属感：一群人早上起床，去某些建筑里，做一些他们通常不喜欢做的事。属于这样的群体成了你的身份标签：姓名、年龄、角色、机构。如果你必须自我介绍，或者别人描述你时，会说 “约翰・史密斯，10 岁，某小学学生”，或者 “约翰・史密斯，20 岁，某大学学生”。</p><p>When John Smith finishes school he is expected to get a job. And what getting a job seems to mean is joining another institution. Superficially it’s a lot like college. You pick the companies you want to work for and apply to join them. If one likes you, you become a member of this new group. You get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing. There are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college. But the similarities feel greater than the differences. John Smith is now John Smith, 22, a software developer at such and such corporation.</p><p>约翰・史密斯毕业后，人们期望他找一份工作。而找工作似乎意味着加入另一个机构。表面上看，这和大学很像：你挑选想为之工作的公司，申请加入。如果有一家公司喜欢你，你就成了这个新群体的一员。你早上起床，去新的建筑里，做一些你通常不喜欢做的事。有几个不同之处：生活没那么有趣，而且你会得到报酬，而不是像在大学时那样付钱。但相似之处似乎比不同之处更多。约翰・史密斯现在成了 “约翰・史密斯，22 岁，某公司软件开发者”。</p><p>In fact John Smith’s life has changed more than he realizes. Socially, a company looks much like college, but the deeper you go into the underlying reality, the more different it gets.</p><p>事实上，约翰・史密斯的生活变化比他意识到的要大。从社交角度看，公司和大学很像，但越深入底层现实，差异就越大。</p><p>What a company does, and has to do if it wants to continue to exist, is earn money. And the way most companies make money is by creating wealth. Companies can be so specialized that this similarity is concealed, but it is not only manufacturing companies that create wealth. A big component of wealth is location. Remember that magic machine that could make you cars and cook you dinner and so on? It would not be so useful if it delivered your dinner to a random location in central Asia. If wealth means what people want, companies that move things also create wealth. Ditto for many other kinds of companies that don’t make anything physical. Nearly all companies exist to do something people want.</p><p>公司要做的（而且如果想继续存在就必须做的）是赚钱。大多数公司赚钱的方式是创造财富。公司可能非常专业化，以至于这种相似性被掩盖了，但不只是制造公司在创造财富。财富的一个重要组成部分是 “位置”。还记得那台能给你变出汽车、做晚餐等等的魔法机器吗？如果它把晚餐送到中亚的某个随机地点，就没那么有用了。如果财富是人们想要的东西，那么运输东西的公司也在创造财富。其他很多不制造实体产品的公司也是如此。几乎所有公司的存在都是为了做人们想要的事。</p><p>And that’s what you do, as well, when you go to work for a company. But here there is another layer that tends to obscure the underlying reality. In a company, the work you do is averaged together with a lot of other people’s. You may not even be aware you’re doing something people want. Your contribution may be indirect. But the company as a whole must be giving people something they want, or they won’t make any money. And if they are paying you x dollars a year, then on average you must be contributing at least x dollars a year worth of work, or the company will be spending more than it makes, and will go out of business.</p><p>当你为一家公司工作时，你做的也是这件事。但这里有另一层因素掩盖了底层现实：在公司里，你的工作与很多其他人的工作被平均了。你甚至可能没意识到自己在做人们想要的事，你的贡献可能是间接的。但整个公司必须给人们提供他们想要的东西，否则就赚不到钱。如果公司每年付给你 x 美元，那么平均来看，你必须贡献至少 x 美元价值的工作，否则公司会入不敷出，最终倒闭。</p><p>Someone graduating from college thinks, and is told, that he needs to get a job, as if the important thing were becoming a member of an institution. A more direct way to put it would be: you need to start doing something people want. You don’t need to join a company to do that. All a company is is a group of people working together to do something people want. It’s doing something people want that matters, not joining the group. [6]</p><p>大学毕业生会想（而且别人也会告诉他），他需要找一份工作，仿佛重要的是成为某个机构的一员。更直接的说法是：你需要开始做人们想要的事。你不需要加入公司才能做到这一点。公司只不过是一群人为了做人们想要的事而一起工作的组织。重要的是做人们想要的事，而不是加入这个群体。[6]</p><p>For most people the best plan probably is to go to work for some existing company. But it is a good idea to understand what’s happening when you do this. A job means doing something people want, averaged together with everyone else in that company.</p><p>对大多数人来说，最好的计划可能是为现有的公司工作。但理解你这么做时发生了什么是有好处的：工作意味着做人们想要的事，只不过是和公司里的其他人的工作平均在一起。</p><p><strong>Working Harder</strong></p><h3 id="更努力地工作"><a href="#更努力地工作" class="headerlink" title="更努力地工作"></a><strong>更努力地工作</strong></h3><p>That averaging gets to be a problem. I think the single biggest problem afflicting large companies is the difficulty of assigning a value to each person’s work. For the most part they punt. In a big company you get paid a fairly predictable salary for working fairly hard. You’re expected not to be obviously incompetent or lazy, but you’re not expected to devote your whole life to your work.</p><p>这种 “平均” 成了一个问题。我认为大公司面临的最大问题是，很难衡量每个员工的工作价值。在很大程度上，他们只能敷衍了事。在大公司里，你努力工作，就能得到一份相当可预测的薪水。人们期望你不要明显无能或懒惰，但不期望你把全部生活都投入工作。</p><p>It turns out, though, that there are economies of scale in how much of your life you devote to your work. In the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee. A programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue.</p><p>然而，事实证明，你投入工作的时间多少，存在规模经济效应。在合适的行业里，一个全身心投入工作的人创造的财富，可能是普通员工的 10 倍甚至 100 倍。例如，一个程序员如果不只是慢慢维护和更新现有软件，而是编写一个全新的软件，就能创造新的收入来源。</p><p>Companies are not set up to reward people who want to do this. You can’t go to your boss and say, I’d like to start working ten times as hard, so will you please pay me ten times as much? For one thing, the official fiction is that you are already working as hard as you can. But a more serious problem is that the company has no way of measuring the value of your work.</p><p>但公司的机制并不奖励想这么做的人。你不能走到老板面前说：“我想努力 10 倍，所以请付我 10 倍的薪水。” 一方面，官方的说法是你已经在尽最大努力工作了；但更严重的问题是，公司无法衡量你的工作价值。</p><p>Salesmen are an exception. It’s easy to measure how much revenue they generate, and they’re usually paid a percentage of it. If a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more.</p><p>销售人员是个例外。衡量他们创造的收入很容易，而且他们的报酬通常是收入的一定比例。如果销售人员想更努力工作，他可以直接开始做，报酬也会自动成比例增加。</p><p>There is one other job besides sales where big companies can hire first-rate people: in the top management jobs. And for the same reason: their performance can be measured. The top managers are held responsible for the performance of the entire company. Because an ordinary employee’s performance can’t usually be measured, he is not expected to do more than put in a solid effort. Whereas top management, like salespeople, have to actually come up with the numbers. The CEO of a company that tanks cannot plead that he put in a solid effort. If the company does badly, he’s done badly.</p><p>除了销售，大公司还有一种岗位能雇到顶尖人才：高层管理岗位。原因相同：他们的绩效可以被衡量。高层管理者要对整个公司的绩效负责。普通员工的绩效通常无法衡量，所以人们不期望他们付出更多，只需要扎实努力。而高层管理者和销售人员一样，必须拿出实际成果。如果公司业绩下滑，CEO 不能辩解说自己已经扎实努力了 —— 公司做得不好，就是他做得不好。</p><p>A company that could pay all its employees so straightforwardly would be enormously successful. Many employees would work harder if they could get paid for it. More importantly, such a company would attract people who wanted to work especially hard. It would crush its competitors.</p><p>一家能如此直接地给所有员工付薪的公司，会非常成功。很多员工如果能因此获得更多报酬，就会更努力工作。更重要的是，这样的公司会吸引那些想特别努力工作的人，从而击败竞争对手。</p><p>Unfortunately, companies can’t pay everyone like salesmen. Salesmen work alone. Most employees’ work is tangled together. Suppose a company makes some kind of consumer gadget. The engineers build a reliable gadget with all kinds of new features; the industrial designers design a beautiful case for it; and then the marketing people convince everyone that it’s something they’ve got to have. How do you know how much of the gadget’s sales are due to each group’s efforts? Or, for that matter, how much is due to the creators of past gadgets that gave the company a reputation for quality? There’s no way to untangle all their contributions. Even if you could read the minds of the consumers, you’d find these factors were all blurred together.</p><p>不幸的是，公司不能像对待销售人员那样给所有员工付薪。销售人员是独立工作的，而大多数员工的工作是相互交织的。假设一家公司生产某种消费电子产品：工程师造出了功能可靠、有各种新特性的产品；工业设计师为它设计了漂亮的外壳；然后营销人员说服所有人这是他们必须拥有的东西。你怎么知道产品的销量有多少归功于每个团队的努力？或者，有多少归功于过去的产品为公司赢得的质量声誉？你无法理清所有这些贡献。即使你能读懂消费者的心思，也会发现这些因素都是交织在一起的。</p><p>If you want to go faster, it’s a problem to have your work tangled together with a large number of other people’s. In a large group, your performance is not separately measurable– and the rest of the group slows you down.</p><p>如果你想加快速度，那么当你的工作与大量其他人的工作交织在一起时，就是个问题。在大团队中，你的绩效无法单独衡量 —— 而且团队中的其他人会拖慢你的速度。</p><p><strong>Measurement and Leverage</strong></p><h3 id="衡量与杠杆"><a href="#衡量与杠杆" class="headerlink" title="衡量与杠杆"></a><strong>衡量与杠杆</strong></h3><p>To get rich you need to get yourself in a situation with two things, measurement and leverage. You need to be in a position where your performance can be measured, or there is no way to get paid more by doing more. And you have to have leverage, in the sense that the decisions you make have a big effect.</p><p>要致富，你需要处于一种同时具备 “衡量” 和 “杠杆” 的环境中。你需要处于一个能衡量你绩效的位置，否则无法通过多做工作来获得更多报酬。而且你必须有杠杆，也就是说，你做的决策能产生巨大影响。</p><p>Measurement alone is not enough. An example of a job with measurement but not leverage is doing piecework in a sweatshop. Your performance is measured and you get paid accordingly, but you have no scope for decisions. The only decision you get to make is how fast you work, and that can probably only increase your earnings by a factor of two or three.</p><p>仅有衡量是不够的。例如，血汗工厂里的计件工作有衡量，但没有杠杆。你的绩效被衡量，报酬也相应计算，但你没有决策空间。你唯一能做的决定是工作速度，而这可能最多只能让你的收入增加两三倍。</p><p>An example of a job with both measurement and leverage would be lead actor in a movie. Your performance can be measured in the gross of the movie. And you have leverage in the sense that your performance can make or break it.</p><p>同时具备衡量和杠杆的工作例子是电影的主角。你的绩效可以通过电影的票房来衡量，而你的表现能决定电影的成败，这就是杠杆。</p><p>CEOs also have both measurement and leverage. They’re measured, in that the performance of the company is their performance. And they have leverage in that their decisions set the whole company moving in one direction or another.</p><p>CEO 也同时具备衡量和杠杆。他们的绩效通过公司的业绩来衡量，而他们的决策能让整个公司朝着某个方向发展，这就是杠杆。</p><p>I think everyone who gets rich by their own efforts will be found to be in a situation with measurement and leverage. Everyone I can think of does: CEOs, movie stars, hedge fund managers, professional athletes. A good hint to the presence of leverage is the possibility of failure. Upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss. CEOs, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, they’re out. If you’re in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.</p><p>我认为，所有靠自己努力致富的人，都会处于一个同时具备衡量和杠杆的环境中。我能想到的所有人都是如此：CEO、电影明星、对冲基金经理、职业运动员。杠杆存在的一个很好的迹象是 “失败的可能性”。收益必须与风险平衡，所以如果有巨大的潜在收益，就一定有可怕的潜在损失。CEO、明星、基金经理和运动员都生活在 “达摩克利斯之剑” 下 —— 一旦表现下滑，就会被淘汰。如果你从事的工作感觉很安全，你就不会致富，因为如果没有风险，几乎可以肯定没有杠杆。</p><p>But you don’t have to become a CEO or a movie star to be in a situation with measurement and leverage. All you need to do is be part of a small group working on a hard problem.</p><p>但你不必成为 CEO 或电影明星才能处于这样的环境中。你只需要加入一个致力于解决难题的小团队。</p><p><strong>Smallness &#x3D; Measurement</strong></p><h3 id="小规模-可衡量"><a href="#小规模-可衡量" class="headerlink" title="小规模 &#x3D; 可衡量"></a><strong>小规模 &#x3D; 可衡量</strong></h3><p>If you can’t measure the value of the work done by individual employees, you can get close. You can measure the value of the work done by small groups.</p><p>如果你无法衡量单个员工的工作价值，你可以接近这个目标：衡量小团队的工作价值。</p><p>One level at which you can accurately measure the revenue generated by employees is at the level of the whole company. When the company is small, you are thereby fairly close to measuring the contributions of individual employees. A viable startup might only have ten employees, which puts you within a factor of ten of measuring individual effort.</p><p>衡量员工创造的收入的一个层面是整个公司的层面。当公司规模小时，你就能相当接近地衡量单个员工的贡献。一家能存活的创业公司可能只有 10 名员工，这样你对个人努力的衡量误差就在 10 倍以内。</p><p>Starting or joining a startup is thus as close as most people can get to saying to one’s boss, I want to work ten times as hard, so please pay me ten times as much. There are two differences: you’re not saying it to your boss, but directly to the customers (for whom your boss is only a proxy after all), and you’re not doing it individually, but along with a small group of other ambitious people.</p><p>因此，创办或加入创业公司，是大多数人能接近 “对老板说‘我想努力 10 倍，所以请付我 10 倍薪水’” 的方式。有两个区别：你不是对老板说，而是直接对客户说（毕竟老板只是客户的代理）；而且你不是单独行动，而是和一小群同样有野心的人一起。</p><p>It will, ordinarily, be a group. Except in a few unusual kinds of work, like acting or writing books, you can’t be a company of one person. And the people you work with had better be good, because it’s their work that yours is going to be averaged with.</p><p>通常来说，这会是一个团队。除了少数特殊工作（如演戏或写书），你不可能一个人组成一家公司。而且你共事的人最好很优秀，因为你的工作价值会和他们的平均在一起。</p><p>A big company is like a giant galley driven by a thousand rowers. Two things keep the speed of the galley down. One is that individual rowers don’t see any result from working harder. The other is that, in a group of a thousand people, the average rower is likely to be pretty average.</p><p>大公司就像一艘由一千名划手驱动的巨型帆船。有两件事会拖慢帆船的速度：一是划手们看不到努力工作的结果；二是在一千人的团队中，划手的平均水平很可能就是普通水平。</p><p>If you took ten people at random out of the big galley and put them in a boat by themselves, they could probably go faster. They would have both carrot and stick to motivate them. An energetic rower would be encouraged by the thought that he could have a visible effect on the speed of the boat. And if someone was lazy, the others would be more likely to notice and complain.</p><p>如果你从这艘大帆船上随机选出 10 个人，让他们自己驾一艘小船，他们可能会划得更快。他们既有胡萝卜（奖励）也有大棒（惩罚）来激励自己。一个精力充沛的划手会因为知道自己能对船速产生明显影响而受到鼓舞；而如果有人懒惰，其他人更可能注意到并抱怨。</p><p>But the real advantage of the ten-man boat shows when you take the ten best rowers out of the big galley and put them in a boat together. They will have all the extra motivation that comes from being in a small group. But more importantly, by selecting that small a group you can get the best rowers. Each one will be in the top 1%. It’s a much better deal for them to average their work together with a small group of their peers than to average it with everyone.</p><p>但 10 人小船的真正优势，体现在当你把大帆船上最优秀的 10 名划手挑出来，让他们一起驾一艘船时。他们会拥有小团队带来的所有额外动力，更重要的是，通过挑选这么小的团队，你能得到最优秀的划手。每个人都会是前 1% 的水平。对他们来说，和一小群同行的工作平均在一起，比和所有人的平均在一起要好得多。</p><p>That’s the real point of startups. Ideally, you are getting together with a group of other people who also want to work a lot harder, and get paid a lot more, than they would in a big company. And because startups tend to get founded by self-selecting groups of ambitious people who already know one another (at least by reputation), the level of measurement is more precise than you get from smallness alone. A startup is not merely ten people, but ten people like you.</p><p>这就是创业公司的真正意义。理想情况下，你和一群同样想比在大公司更努力工作、获得更多报酬的人一起奋斗。而且因为创业公司往往是由一群自我选择的、有野心的人创办的（他们至少通过声誉相互了解），其衡量的精确性比单纯的小规模更高。创业公司不只是 10 个人，而是 10 个像你一样的人。</p><p>Steve Jobs once said that the success or failure of a startup depends on the first ten employees. I agree. If anything, it’s more like the first five. Being small is not, in itself, what makes startups kick butt, but rather that small groups can be select. You don’t want small in the sense of a village, but small in the sense of an all-star team.</p><p>史蒂夫・乔布斯曾说，创业公司的成败取决于最初的 10 名员工。我同意。甚至可以说，更像是最初的 5 名。小规模本身并不是创业公司成功的原因，而是小团队可以做到 “精选”。你想要的不是 “乡村式” 的小规模，而是 “全明星队式” 的小规模。</p><p>The larger a group, the closer its average member will be to the average for the population as a whole. So all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others. Of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company. But a very able person who does care about money will ordinarily do better to go off and work with a small group of peers.</p><p>团队越大，其平均成员的水平就越接近总体人口的平均水平。所以，在其他条件相同的情况下，大公司里的优秀人才很可能吃亏，因为他们的表现被其他人的较低表现拉低了。当然，其他条件往往不相同：优秀人才可能不在乎钱，或者更喜欢大公司的稳定性。但在乎钱的优秀人才，通常会更愿意离开，和一小群同行一起工作。</p><p><strong>Technology &#x3D; Leverage</strong></p><h3 id="技术-杠杆"><a href="#技术-杠杆" class="headerlink" title="技术 &#x3D; 杠杆"></a><strong>技术 &#x3D; 杠杆</strong></h3><p>Startups offer anyone a way to be in a situation with measurement and leverage. They allow measurement because they’re small, and they offer leverage because they make money by inventing new technology.</p><p>创业公司为任何人提供了一种处于 “可衡量” 和 “有杠杆” 环境中的方式。它们因规模小而具备可衡量性，因通过发明新技术赚钱而具备杠杆。</p><p>What is technology? It’s technique. It’s the way we all do things. And when you discover a new way to do things, its value is multiplied by all the people who use it. It is the proverbial fishing rod, rather than the fish. That’s the difference between a startup and a restaurant or a barber shop. You fry eggs or cut hair one customer at a time. Whereas if you solve a technical problem that a lot of people care about, you help everyone who uses your solution. That’s leverage.</p><p>什么是技术？是技术方法，是我们做事的方式。当你发现一种新的做事方式时，它的价值会被所有使用它的人放大。这就像那句谚语说的 “授人以鱼不如授人以渔”。这就是创业公司与餐馆或理发店的区别：你炸薯条或剪头发，一次只能服务一个客户；而如果你解决了一个很多人关心的技术问题，你就帮助了所有使用你解决方案的人 —— 这就是杠杆。</p><p>If you look at history, it seems that most people who got rich by creating wealth did it by developing new technology. You just can’t fry eggs or cut hair fast enough. What made the Florentines rich in 1200 was the discovery of new techniques for making the high-tech product of the time, fine woven cloth. What made the Dutch rich in 1600 was the discovery of shipbuilding and navigation techniques that enabled them to dominate the seas of the Far East.</p><p>纵观历史，大多数通过创造财富致富的人，都是通过开发新技术做到的。你不可能以足够快的速度炸薯条或剪头发来致富。1200 年让佛罗伦萨人富起来的，是他们发现了制造当时的高科技产品 —— 精细织布 —— 的新技术；1600 年让荷兰人富起来的，是他们发现了造船和航海技术，使他们能主导远东的海洋贸易。</p><p>Fortunately there is a natural fit between smallness and solving hard problems. The leading edge of technology moves fast. Technology that’s valuable today could be worthless in a couple years. Small companies are more at home in this world, because they don’t have layers of bureaucracy to slow them down. Also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by convention.</p><p>幸运的是，小规模和解决难题之间存在天然的契合。技术的前沿变化很快：今天有价值的技术，可能几年后就一文不值。小公司更适合这种环境，因为它们没有层层官僚机构拖慢速度。此外，技术进步往往来自非正统的方法，而小公司受传统的约束更少。</p><p>Big companies can develop technology. They just can’t do it quickly. Their size makes them slow and prevents them from rewarding employees for the extraordinary effort required. So in practice big companies only get to develop technology in fields where large capital requirements prevent startups from competing with them, like microprocessors, power plants, or passenger aircraft. And even in those fields they depend heavily on startups for components and ideas.</p><p>大公司也能开发技术，但就是快不起来。它们的规模让它们行动迟缓，而且无法奖励员工付出的非凡努力。因此，实际上，大公司只能在那些需要大量资本、让创业公司无法竞争的领域（如微处理器、发电厂或客机）开发技术。即便在这些领域，它们也严重依赖创业公司提供的组件和想法。</p><p>It’s obvious that biotech or software startups exist to solve hard technical problems, but I think it will also be found to be true in businesses that don’t seem to be about technology. McDonald’s, for example, grew big by designing a system, the McDonald’s franchise, that could then be reproduced at will all over the face of the earth. A McDonald’s franchise is controlled by rules so precise that it is practically a piece of software. Write once, run everywhere. Ditto for Wal-Mart. Sam Walton got rich not by being a retailer, but by designing a new kind of store.</p><p>生物技术或软件创业公司为解决棘手技术问题而存在，这很明显。但我认为，在那些看似与技术无关的行业中，情况也是如此。例如，麦当劳能发展壮大，是因为它设计了一套系统 —— 麦当劳特许经营模式 —— 这套系统可以在世界各地随意复制。麦当劳的特许经营受到极其精确的规则控制，几乎就像一个软件：“一次编写，到处运行”。沃尔玛也是如此。山姆・沃尔顿致富，不是因为他是零售商，而是因为他设计了一种新的商店模式。</p><p>Use difficulty as a guide not just in selecting the overall aim of your company, but also at decision points along the way. At Viaweb one of our rules of thumb was run upstairs. Suppose you are a little, nimble guy being chased by a big, fat, bully. You open a door and find yourself in a staircase. Do you go up or down? I say up. The bully can probably run downstairs as fast as you can. Going upstairs his bulk will be more of a disadvantage. Running upstairs is hard for you but even harder for him.</p><p>不仅在选择公司的总体目标时，而且在沿途的每个决策点，都要用 “难度” 作为指导。在 Viaweb，我们有一个经验法则：“跑上楼”。假设你是一个灵活的小个子，被一个又胖又壮的恶霸追赶。你打开一扇门，发现自己在楼梯口。你会上楼还是下楼？我说上楼。恶霸跑下楼可能和你一样快，但上楼时，他的体重会成为更大的劣势。上楼对你来说很难，但对他来说更难。</p><p>What this meant in practice was that we deliberately sought hard problems. If there were two features we could add to our software, both equally valuable in proportion to their difficulty, we’d always take the harder one. Not just because it was more valuable, but because it was harder. We delighted in forcing bigger, slower competitors to follow us over difficult ground. Like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government can’t follow. I can remember times when we were just exhausted after wrestling all day with some horrible technical problem. And I’d be delighted, because something that was hard for us would be impossible for our competitors.</p><p>在实践中，这意味着我们故意去寻找难题。如果有两个功能可以添加到我们的软件中，两者的价值与难度之比相同，我们总会选择更难的那个。不仅因为它更有价值，还因为它更难。我们乐于迫使更大、更慢的竞争对手跟着我们越过艰难的领域。就像游击队一样，创业公司更喜欢山区的复杂地形，因为中央政府的军队无法跟上。我记得有好几次，我们在一整天都在与某个可怕的技术问题搏斗后筋疲力尽，但我会很高兴，因为对我们来说很难的事情，对竞争对手来说可能是不可能的。</p><p>This is not just a good way to run a startup. It’s what a startup is. Venture capitalists know about this and have a phrase for it: barriers to entry. If you go to a VC with a new idea and ask him to invest in it, one of the first things he’ll ask is, how hard would this be for someone else to develop? That is, how much difficult ground have you put between yourself and potential pursuers? [7] And you had better have a convincing explanation of why your technology would be hard to duplicate. Otherwise as soon as some big company becomes aware of it, they’ll make their own, and with their brand name, capital, and distribution clout, they’ll take away your market overnight. You’d be like guerillas caught in the open field by regular army forces.</p><p>这不仅是经营创业公司的好方法，这就是创业公司的本质。风险投资家知道这一点，他们有一个说法：“进入壁垒”。如果你带着一个新想法去找风险投资家，请求投资，他首先会问的问题之一是：“其他人开发这个有多难？” 也就是说，你在自己和潜在的追赶者之间设置了多少艰难的障碍？[7] 而且你最好能有说服力地解释为什么你的技术难以复制。否则，一旦大公司注意到它，就会自己开发，凭借他们的品牌、资本和分销渠道，一夜之间夺走你的市场。你就会像在开阔地带被正规军抓住的游击队一样。</p><p>One way to put up barriers to entry is through patents. But patents may not provide much protection. Competitors commonly find ways to work around a patent. And if they can’t, they may simply violate it and invite you to sue them. A big company is not afraid to be sued; it’s an everyday thing for them. They’ll make sure that suing them is expensive and takes a long time. Ever heard of Philo Farnsworth? He invented television. The reason you’ve never heard of him is that his company was not the one to make money from it. [8] The company that did was RCA, and Farnsworth’s reward for his efforts was a decade of patent litigation.</p><p>设置进入壁垒的一种方式是通过专利，但专利可能提供不了多少保护。竞争对手通常能找到绕过专利的方法；如果绕不过，他们可能会直接侵权，然后等你来起诉。大公司不怕被起诉 —— 这对他们来说是家常便饭。他们会确保起诉他们既昂贵又耗时。你听说过菲洛・法恩斯沃思吗？他发明了电视。你没听说过他，是因为他的公司没有从电视中赚钱。[8] 赚钱的是 RCA，而法恩斯沃思的回报是长达十年的专利诉讼。</p><p>Here, as so often, the best defense is a good offense. If you can develop technology that’s simply too hard for competitors to duplicate, you don’t need to rely on other defenses. Start by picking a hard problem, and then at every decision point, take the harder choice. [9]</p><p>在这里，就像在很多情况下一样，最好的防御是主动进攻。如果你能开发出竞争对手根本无法复制的技术，你就不需要依赖其他防御手段。从选择一个难题开始，然后在每个决策点，都选择更难的选项。[9]</p><p><strong>The Catch(es)</strong></p><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a><strong>陷阱</strong></h3><p>If it were simply a matter of working harder than an ordinary employee and getting paid proportionately, it would obviously be a good deal to start a startup. Up to a point it would be more fun. I don’t think many people like the slow pace of big companies, the interminable meetings, the water-cooler conversations, the clueless middle managers, and so on.</p><p>如果创业只是比普通员工更努力工作，然后按比例获得报酬，那创办创业公司显然是个好主意。在某种程度上，这会更有趣。我认为很多人不喜欢大公司的慢节奏、没完没了的会议、茶水间的闲聊、愚蠢的中层经理等等。</p><p>Unfortunately there are a couple catches. One is that you can’t choose the point on the curve that you want to inhabit. You can’t decide, for example, that you’d like to work just two or three times as hard, and get paid that much more. When you’re running a startup, your competitors decide how hard you work. And they pretty much all make the same decision: as hard as you possibly can.</p><p>不幸的是，这里有几个陷阱。一是你无法选择自己想处于曲线的哪个点。例如，你不能决定自己想努力两三倍，然后获得相应的报酬。当你经营一家创业公司时，你的竞争对手会决定你要多努力工作 —— 而他们几乎都会做出同样的决定：尽你所能。</p><p>The other catch is that the payoff is only on average proportionate to your productivity. There is, as I said before, a large random multiplier in the success of any company. So in practice the deal is not that you’re 30 times as productive and get paid 30 times as much. It is that you’re 30 times as productive, and get paid between zero and a thousand times as much. If the mean is 30x, the median is probably zero. Most startups tank, and not just the dogfood portals we all heard about during the Internet Bubble. It’s common for a startup to be developing a genuinely good product, take slightly too long to do it, run out of money, and have to shut down.</p><p>另一个陷阱是，报酬平均来看才与生产力成比例。正如我之前所说，任何公司的成功都有很大的随机乘数。所以实际上，情况不是 “你生产力是 30 倍，报酬也是 30 倍”，而是 “你生产力是 30 倍，报酬在 0 到 1000 倍之间”。如果平均值是 30 倍，中位数可能就是 0。大多数创业公司都会失败，而且不只是我们在互联网泡沫时期听说的那些 “狗粮门户网站”。一家创业公司可能正在开发真正好的产品，但开发时间稍长，资金耗尽，就不得不关门。</p><p>A startup is like a mosquito. A bear can absorb a hit and a crab is armored against one, but a mosquito is designed for one thing: to score. No energy is wasted on defense. The defense of mosquitos, as a species, is that there are a lot of them, but this is little consolation to the individual mosquito.</p><p>创业公司就像蚊子。熊能承受一击，螃蟹有盔甲保护，但蚊子的设计目的只有一个：得分。它不会在防御上浪费能量。蚊子作为一个物种的防御方式是数量众多，但这对单个蚊子来说没什么安慰。</p><p>Startups, like mosquitos, tend to be an all-or-nothing proposition. And you don’t generally know which of the two you’re going to get till the last minute. Viaweb came close to tanking several times. Our trajectory was like a sine wave. Fortunately we got bought at the top of the cycle, but it was damned close. While we were visiting Yahoo in California to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive.</p><p>创业公司和蚊子一样，往往是 “要么全有，要么全无” 的命题。而且你通常要到最后一刻才知道自己会是哪一种。Viaweb 有好几次差点失败，我们的轨迹就像正弦波。幸运的是，我们在周期的顶端被收购了，但真的非常接近失败。当我们在加州拜访雅虎，商谈把公司卖给他们时，我们还得借一个会议室，向一位即将退出新一轮融资的投资者保证我们能活下去（我们需要这笔融资来维持运营）。</p><p>The all-or-nothing aspect of startups was not something we wanted. Viaweb’s hackers were all extremely risk-averse. If there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted. We would have much preferred a 100% chance of $1 million to a 20% chance of $10 million, even though theoretically the second is worth twice as much. Unfortunately, there is not currently any space in the business world where you can get the first deal.</p><p>这种 “全有或全无” 的特性不是我们想要的。Viaweb 的黑客们都极其厌恶风险。如果有某种方式能让我们只拼命工作，然后获得相应报酬，而不掺杂任何 “彩票” 性质，我们会很高兴。我们宁愿有 100% 的机会得到 100 万美元，也不愿有 20% 的机会得到 1000 万美元 —— 尽管理论上后者的价值是前者的两倍。不幸的是，目前商业世界中没有这样的机会。</p><p>The closest you can get is by selling your startup in the early stages, giving up upside (and risk) for a smaller but guaranteed payoff. We had a chance to do this, and stupidly, as we then thought, let it slip by. After that we became comically eager to sell. For the next year or so, if anyone expressed the slightest curiosity about Viaweb we would try to sell them the company. But there were no takers, so we had to keep going.</p><p>最接近的方式是在早期阶段卖掉你的创业公司，放弃潜在收益（和风险），换取一笔较小但有保证的回报。我们有过这样的机会，但当时愚蠢地错过了。在那之后，我们变得非常渴望被收购。在接下来的一年左右，只要有人对 Viaweb 表现出丝毫兴趣，我们就会试图把公司卖给他们。但没有人愿意买，所以我们不得不继续做下去。</p><p>It would have been a bargain to buy us at an early stage, but companies doing acquisitions are not looking for bargains. A company big enough to acquire startups will be big enough to be fairly conservative, and within the company the people in charge of acquisitions will be among the more conservative, because they are likely to be business school types who joined the company late. They would rather overpay for a safe choice. So it is easier to sell an established startup, even at a large premium, than an early-stage one.</p><p>在早期阶段收购我们本是很划算的，但进行收购的公司并不想捡便宜。大到足以收购创业公司的公司，通常也保守到足以让收购负责人（他们很可能是商学院出身、后期加入公司的人）在收购决策上更保守。他们宁愿为 “安全的选择” 多付钱。因此，收购一家成熟的创业公司（即使溢价很高），也比收购一家早期创业公司更容易。</p><p><strong>Get Users</strong></p><h3 id="获取用户"><a href="#获取用户" class="headerlink" title="获取用户"></a><strong>获取用户</strong></h3><p>I think it’s a good idea to get bought, if you can. Running a business is different from growing one. It is just as well to let a big company take over once you reach cruising altitude. It’s also financially wiser, because selling allows you to diversify. What would you think of a financial advisor who put all his client’s assets into one volatile stock?</p><p>我认为如果可能的话，被收购是个好主意。经营企业和发展企业是两回事。一旦达到稳定阶段，让大公司接手也无妨。从财务角度看，出售公司也更明智，因为这能让你实现多元化。如果一个财务顾问把客户的所有资产都投入一只波动剧烈的股票，你会怎么想？</p><p>How do you get bought? Mostly by doing the same things you’d do if you didn’t intend to sell the company. Being profitable, for example. But getting bought is also an art in its own right, and one that we spent a lot of time trying to master.</p><p>如何让公司被收购？大多数情况下，你要做的和不打算出售公司时做的事情一样，比如盈利。但被收购本身也是一门艺术，我们花了很多时间试图掌握它。</p><p>Potential buyers will always delay if they can. The hard part about getting bought is getting them to act. For most people, the most powerful motivator is not the hope of gain, but the fear of loss. For potential acquirers, the most powerful motivator is the prospect that one of their competitors will buy you. This, as we found, causes CEOs to take red-eyes. The second biggest is the worry that, if they don’t buy you now, you’ll continue to grow rapidly and will cost more to acquire later, or even become a competitor.</p><p>潜在的收购方总会尽可能拖延。被收购的难点在于让他们采取行动。对大多数人来说，最强大的动机不是对收益的希望，而是对损失的恐惧。对潜在收购方来说，最强大的动机是担心竞争对手会收购你。正如我们发现的，这会让 CEO 们连夜赶路。第二大动机是担心：如果现在不收购你，你会继续快速成长，以后收购成本更高，甚至可能成为竞争对手。</p><p>In both cases, what it all comes down to is users. You’d think that a company about to buy you would do a lot of research and decide for themselves how valuable your technology was. Not at all. What they go by is the number of users you have.</p><p>在这两种情况下，归根结底都是 “用户”。你可能会认为，打算收购你的公司会做大量研究，自己判断你的技术有多有价值。根本不是这样。他们只看你有多少用户。</p><p>In effect, acquirers assume the customers know who has the best technology. And this is not as stupid as it sounds. Users are the only real proof that you’ve created wealth. Wealth is what people want, and if people aren’t using your software, maybe it’s not just because you’re bad at marketing. Maybe it’s because you haven’t made what they want.</p><p>实际上，收购方假设客户知道谁拥有最好的技术。这并不像听起来那么愚蠢。用户是你创造了财富的唯一真正证明。财富是人们想要的东西，如果人们不使用你的软件，可能不只是因为你营销做得不好，还可能是因为你没有做出他们想要的东西。</p><p>Venture capitalists have a list of danger signs to watch out for. Near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy. In a startup, you’re not just trying to solve problems. You’re trying to solve problems that users care about.</p><p>风险投资家有一份需要警惕的危险信号清单，其中靠前的是 “被技术迷经营的公司，他们痴迷于解决有趣的技术问题，而不是让用户满意”。在创业公司里，你不只是要解决问题，还要解决用户关心的问题。</p><p>So I think you should make users the test, just as acquirers do. Treat a startup as an optimization problem in which performance is measured by number of users. As anyone who has tried to optimize software knows, the key is measurement. When you try to guess where your program is slow, and what would make it faster, you almost always guess wrong.</p><p>所以我认为，你应该像收购方那样，把用户作为检验标准。把创业公司视为一个优化问题，其绩效用用户数量来衡量。任何试图优化软件的人都知道，关键在于衡量。当你试图猜测程序哪里慢、如何让它更快时，几乎总是猜错。</p><p>Number of users may not be the perfect test, but it will be very close. It’s what acquirers care about. It’s what revenues depend on. It’s what makes competitors unhappy. It’s what impresses reporters, and potential new users. Certainly it’s a better test than your a priori notions of what problems are important to solve, no matter how technically adept you are.</p><p>用户数量可能不是完美的检验标准，但会非常接近。这是收购方关心的，是收入的基础，是让竞争对手不快的原因，是给记者和潜在新用户留下深刻印象的东西。当然，无论你技术多娴熟，它都比你凭直觉判断 “哪些问题值得解决” 要好得多。</p><p>Among other things, treating a startup as an optimization problem will help you avoid another pitfall that VCs worry about, and rightly– taking a long time to develop a product. Now we can recognize this as something hackers already know to avoid: premature optimization. Get a version 1.0 out there as soon as you can. Until you have some users to measure, you’re optimizing based on guesses.</p><p>把创业公司视为优化问题，还能帮助你避免风险投资家担心的另一个陷阱 —— 开发产品耗时过长。现在我们可以意识到，这是黑客们已经知道要避免的：过早优化。尽快推出 1.0 版本。在你有用户可以衡量之前，你的优化都是基于猜测。</p><p>The ball you need to keep your eye on here is the underlying principle that wealth is what people want. If you plan to get rich by creating wealth, you have to know what people want. So few businesses really pay attention to making customers happy. How often do you walk into a store, or call a company on the phone, with a feeling of dread in the back of your mind? When you hear “your call is important to us, please stay on the line,” do you think, oh good, now everything will be all right?</p><p>你需要时刻牢记的核心原则是：财富就是人们想要的东西。如果你打算通过创造财富来致富，就必须知道人们想要什么。很少有企业真正注重让客户满意。你有多少次走进一家商店，或者给一家公司打电话时，心里隐隐感到一丝不安？当你听到 “您的来电对我们很重要，请耐心等待” 时，会觉得 “太好了，一切都会好起来” 吗？</p><p>A restaurant can afford to serve the occasional burnt dinner. But in technology, you cook one thing and that’s what everyone eats. So any difference between what people want and what you deliver is multiplied. You please or annoy customers wholesale. The closer you can get to what they want, the more wealth you generate.</p><p>一家餐馆偶尔提供一份烤焦的晚餐，或许还能承受。但在技术领域，你 “烹饪” 出一份东西，所有人都得吃这一份。所以，你提供的东西与人们想要的东西之间的任何差距，都会被无限放大。你要么让所有客户满意，要么惹恼所有客户。你越能贴近人们的需求，创造的财富就越多。</p><p><strong>Wealth and Power</strong></p><h3 id="财富与权力"><a href="#财富与权力" class="headerlink" title="财富与权力"></a><strong>财富与权力</strong></h3><p>Making wealth is not the only way to get rich. For most of human history it has not even been the most common. Until a few centuries ago, the main sources of wealth were mines, slaves and serfs, land, and cattle, and the only ways to acquire these rapidly were by inheritance, marriage, conquest, or confiscation. Naturally wealth had a bad reputation.</p><p>创造财富并非致富的唯一途径。在人类历史的大部分时间里，它甚至不是最常见的途径。直到几个世纪前，财富的主要来源还是矿山、奴隶与农奴、土地和牲畜，而快速获取这些财富的方式只有继承、婚姻、征服或没收。财富自然名声不佳。</p><p>Two things changed. The first was the rule of law. For most of the world’s history, if you did somehow accumulate a fortune, the ruler or his henchmen would find a way to steal it. But in medieval Europe something new happened. A new class of merchants and manufacturers began to collect in towns. [10] Together they were able to withstand the local feudal lord. So for the first time in our history, the bullies stopped stealing the nerds’ lunch money. This was naturally a great incentive, and possibly indeed the main cause of the second big change, industrialization.</p><p>两件事改变了这一切。首先是法治。在世界历史的大部分时间里，如果你好不容易积累了一笔财富，统治者或其爪牙总会想办法把它夺走。但在中世纪的欧洲，一些新的变化出现了：一个新的商人和制造商阶层开始在城镇聚集。[10] 他们联合起来，有能力对抗当地的封建领主。于是，在人类历史上第一次，恶霸们不再抢走 “书呆子” 的午餐钱了。这自然形成了强大的激励，或许也正是第二次重大变革 —— 工业化 —— 的主要原因。</p><p>A great deal has been written about the causes of the Industrial Revolution. But surely a necessary, if not sufficient, condition was that people who made fortunes be able to enjoy them in peace. [11] One piece of evidence is what happened to countries that tried to return to the old model, like the Soviet Union, and to a lesser extent Britain under the labor governments of the 1960s and early 1970s. Take away the incentive of wealth, and technical innovation grinds to a halt.</p><p>关于工业革命的起因，已有大量论述。但可以肯定的是，一个必要（即便不是充分）条件是：让创造财富的人能够安心享受自己的财富。[11] 有一个证据可以说明这一点：那些试图回归旧模式的国家（如苏联），以及在较小程度上 20 世纪 60 年代至 70 年代初工党执政的英国，都发生了类似的情况。一旦剥夺了财富带来的激励，技术创新就会陷入停滞。</p><p>Remember what a startup is, economically: a way of saying, I want to work faster. Instead of accumulating money slowly by being paid a regular wage for fifty years, I want to get it over with as soon as possible. So governments that forbid you to accumulate wealth are in effect decreeing that you work slowly. They’re willing to let you earn $3 million over fifty years, but they’re not willing to let you work so hard that you can do it in two. They are like the corporate boss that you can’t go to and say, I want to work ten times as hard, so please pay me ten times a much. Except this is not a boss you can escape by starting your own company.</p><p>记住，从经济角度看，创业公司的本质是：一种 “我想更快地工作” 的宣言。你不想通过五十年的固定工资慢慢积累财富，而是想尽快完成这件事。因此，禁止你积累财富的政府，实际上是在命令你放慢工作节奏。他们愿意让你在五十年里赚 300 万美元，却不愿让你通过拼命工作在两年内做到这一点。这就像你无法走到公司老板面前说 “我想努力十倍，请付我十倍薪水” 一样 —— 只不过，这个 “老板” 你无法通过创办自己的公司来逃离。</p><p>The problem with working slowly is not just that technical innovation happens slowly. It’s that it tends not to happen at all. It’s only when you’re deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project. Developing new technology is a pain in the ass. It is, as Edison said, one percent inspiration and ninety-nine percent perspiration. Without the incentive of wealth, no one wants to do it. Engineers will work on sexy projects like fighter planes and moon rockets for ordinary salaries, but more mundane technologies like light bulbs or semiconductors have to be developed by entrepreneurs.</p><p>工作节奏缓慢的问题，不仅在于技术创新的速度会变慢，更在于创新可能根本不会发生。只有当你刻意去寻找难题，以利用速度获得最大优势时，才会承担这类项目。开发新技术是件苦差事。正如爱迪生所说，它是 1% 的灵感加 99% 的汗水。没有财富的激励，没人愿意做这件事。工程师会为战斗机、月球火箭等 “酷炫” 项目拿普通薪水工作，但灯泡、半导体等更平凡的技术，必须靠企业家来开发。</p><p>Startups are not just something that happened in Silicon Valley in the last couple decades. Since it became possible to get rich by creating wealth, everyone who has done it has used essentially the same recipe: measurement and leverage, where measurement comes from working with a small group, and leverage from developing new techniques. The recipe was the same in Florence in 1200 as it is in Santa Clara today.</p><p>创业公司并非只是过去几十年硅谷才有的新鲜事物。自从通过创造财富可以致富以来，所有以此致富的人都使用了本质相同的方法：衡量与杠杆 —— 衡量来自小团队协作，杠杆来自新技术的开发。1200 年的佛罗伦萨与如今的圣克拉拉（硅谷所在地），使用的是同一个配方。</p><p>Understanding this may help to answer an important question: why Europe grew so powerful. Was it something about the geography of Europe? Was it that Europeans are somehow racially superior? Was it their religion? The answer (or at least the proximate cause) may be that the Europeans rode on the crest of a powerful new idea: allowing those who made a lot of money to keep it.</p><p>理解这一点或许有助于回答一个重要问题：欧洲为何变得如此强大？是因为欧洲的地理优势吗？是因为欧洲人在种族上更优越吗？还是因为他们的宗教？答案（至少直接原因）可能是：欧洲人搭乘了一个强大的新思想浪潮 —— 允许那些赚大钱的人保留自己的财富。</p><p>Once you’re allowed to do that, people who want to get rich can do it by generating wealth instead of stealing it. The resulting technological growth translates not only into wealth but into military power. The theory that led to the stealth plane was developed by a Soviet mathematician. But because the Soviet Union didn’t have a computer industry, it remained for them a theory; they didn’t have hardware capable of executing the calculations fast enough to design an actual airplane.</p><p>一旦允许人们这样做，想致富的人就可以通过创造财富而非掠夺来实现目标。由此带来的技术进步，不仅转化为财富，还转化为军事力量。隐形飞机的理论由一位苏联数学家提出，但由于苏联没有计算机产业，这一理论对他们而言始终只是理论 —— 他们没有足够快的硬件来执行计算，无法设计出实际的飞机。</p><p>In that respect the Cold War teaches the same lesson as World War II and, for that matter, most wars in recent history. Don’t let a ruling class of warriors and politicians squash the entrepreneurs. The same recipe that makes individuals rich makes countries powerful. Let the nerds keep their lunch money, and you rule the world.</p><p>从这个角度看，冷战与二战（以及近代史上的大多数战争）都传递了同一个教训：不要让由战士和政客组成的统治阶级打压企业家。让个人致富的方法，同样能让国家强大。让 “书呆子” 保住自己的午餐钱，你就能统治世界。</p><p>Notes</p><p>[1] One valuable thing you tend to get only in startups is uninterruptability. Different kinds of work have different time quanta. Someone proofreading a manuscript could probably be interrupted every fifteen minutes with little loss of productivity. But the time quantum for hacking is very long: it might take an hour just to load a problem into your head. So the cost of having someone from personnel call you about a form you forgot to fill out can be huge.</p><p>[1] 创业公司能给你带来的一个宝贵特质，是<strong>不受干扰的工作状态</strong>。不同类型的工作有不同的 “时间量子”：校对文稿的人或许每 15 分钟被打断一次， productivity（生产力）也不会受太大影响；但黑客（程序员）的时间量子很长 —— 可能需要整整一小时，才能把一个问题 “加载” 进大脑。因此，人事部的人打电话来提醒你忘了填某张表格，造成的损失可能极大。</p><p>This is why hackers give you such a baleful stare as they turn from their screen to answer your question. Inside their heads a giant house of cards is tottering.</p><p>这就是为什么当黑客从屏幕前转过身来回答你的问题时，会投来如此凶狠的目光 —— 他们脑海中那座巨大的 “纸牌屋” 正在摇摇欲坠。</p><p>The mere possibility of being interrupted deters hackers from starting hard projects. This is why they tend to work late at night, and why it’s next to impossible to write great software in a cubicle (except late at night).</p><p>仅仅是 “可能被打断” 的风险，就会让黑客不敢开始攻克难题。这也是他们倾向于在深夜工作的原因，也是为什么在格子间里几乎写不出优秀的软件（除非在深夜）。</p><p>One great advantage of startups is that they don’t yet have any of the people who interrupt you. There is no personnel department, and thus no form nor anyone to call you about it.</p><p>创业公司的一大优势在于，还没有那些会打断你的人。这里没有人事部，因此也就没有那些表格，更没人会为此给你打电话。</p><p>[2] Faced with the idea that people working for startups might be 20 or 30 times as productive as those working for large companies, executives at large companies will naturally wonder, how could I get the people working for me to do that? The answer is simple: pay them to.</p><p>[2] 面对 “创业公司员工的生产力可能是大公司员工的 20 到 30 倍” 这一说法，大公司的高管们自然会想：我怎样才能让手下的人也做到这一点？答案很简单：<strong>按生产力给他们付薪</strong>。</p><p>Internally most companies are run like Communist states. If you believe in free markets, why not turn your company into one?</p><p>大多数公司的内部运作就像共产主义国家。如果你信奉自由市场，为什么不把公司改造成一个自由市场呢？</p><p>Hypothesis: A company will be maximally profitable when each employee is paid in proportion to the wealth they generate.</p><p>假设：当每个员工的薪酬与他们创造的财富成正比时，公司的利润能达到最大化。</p><p>[3] Until recently even governments sometimes didn’t grasp the distinction between money and wealth. Adam Smith (Wealth of Nations, v:i) mentions several that tried to preserve their “wealth” by forbidding the export of gold or silver. But having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.</p><p>[3] 直到最近，即便是政府有时也分不清金钱与财富的区别。亚当・斯密在《国富论》（第五篇第一章）中提到，有一些国家试图通过禁止黄金或白银出口来 “保护” 它们的 “财富”。但拥有更多的交换媒介（货币）并不会让一个国家更富有 —— 如果更多的钱追逐等量的物质财富，结果只会是物价上涨。</p><p>[4] There are many senses of the word “wealth,” not all of them material. I’m not trying to make a deep philosophical point here about which is the true kind. I’m writing about one specific, rather technical sense of the word “wealth.” What people will give you money for. This is an interesting sort of wealth to study, because it is the kind that prevents you from starving. And what people will give you money for depends on them, not you.</p><p>[4] “财富” 一词有很多含义，并非都与物质相关。我不想在这里深入探讨哲学层面的 “哪种财富才是真正的财富”，而是聚焦于一个特定的、偏技术层面的定义：<strong>人们愿意为之付钱的东西</strong>。这种财富值得研究，因为它能让你免于挨饿。而人们愿意为哪些东西付钱，取决于他们，而非你。</p><p>When you’re starting a business, it’s easy to slide into thinking that customers want what you do. During the Internet Bubble I talked to a woman who, because she liked the outdoors, was starting an “outdoor portal.” You know what kind of business you should start if you like the outdoors? One to recover data from crashed hard disks.</p><p>创业时，你很容易陷入一种误区：认为客户想要的是你喜欢的东西。互联网泡沫时期，我曾遇到一位女士，她因为喜欢户外活动，就创办了一个 “户外门户网站”。但你知道吗？如果你喜欢户外活动，应该创办的是数据恢复公司 —— 帮人找回崩溃硬盘里的数据。</p><p>What’s the connection? None at all. Which is precisely my point. If you want to create wealth (in the narrow technical sense of not starving) then you should be especially skeptical about any plan that centers on things you like doing. That is where your idea of what’s valuable is least likely to coincide with other people’s.</p><p>这两者有什么关联？毫无关联。这恰恰是我的观点：如果你想创造财富（从 “不挨饿” 这个狭义的技术角度来说），就应该对任何以 “自己喜欢” 为核心的计划保持高度怀疑。在这类事情上，你对 “价值” 的判断最不可能与他人一致。</p><p>[5] In the average car restoration you probably do make everyone else microscopically poorer, by doing a small amount of damage to the environment. While environmental costs should be taken into account, they don’t make wealth a zero-sum game. For example, if you repair a machine that’s broken because a part has come unscrewed, you create wealth with no environmental cost.</p><p>[5] 在修复汽车的过程中，你可能会对环境造成微小破坏，从而让其他人变得 “微乎其微地更穷”。虽然环境成本应该被考虑在内，但这并不会让财富变成一场零和游戏。例如，如果你修理一台因某个零件松动而坏掉的机器，就是在不产生环境成本的情况下创造财富。</p><p>[5b] This essay was written before Firefox.</p><p>[5b] 本文撰写于 Firefox 浏览器出现之前。</p><p>[6] Many people feel confused and depressed in their early twenties. Life seemed so much more fun in college. Well, of course it was. Don’t be fooled by the surface similarities. You’ve gone from guest to servant. It’s possible to have fun in this new world. Among other things, you now get to go behind the doors that say “authorized personnel only.” But the change is a shock at first, and all the worse if you’re not consciously aware of it.</p><p>[6] 很多人在二十出头时会感到迷茫和沮丧。大学时光似乎有趣得多 —— 当然是这样。不要被表面的相似性所迷惑：你已经从 “客人” 变成了 “仆人”。在这个新世界里依然可以找到乐趣，比如，你现在能走进那些标着 “仅限授权人员进入” 的门。但这种转变起初会让人震惊，如果你没有清醒地意识到这一点，冲击会更大。</p><p>[7] When VCs asked us how long it would take another startup to duplicate our software, we used to reply that they probably wouldn’t be able to at all. I think this made us seem naive, or liars.</p><p>[7] 当年风投问我们，其他创业公司需要多久才能复制我们的软件时，我们总回答 “他们可能根本做不到”。现在想来，这让我们显得要么天真，要么像骗子。</p><p>[8] Few technologies have one clear inventor. So as a rule, if you know the “inventor” of something (the telephone, the assembly line, the airplane, the light bulb, the transistor) it is because their company made money from it, and the company’s PR people worked hard to spread the story. If you don’t know who invented something (the automobile, the television, the computer, the jet engine, the laser), it’s because other companies made all the money.</p><p>[8] 很少有技术能明确归属于某一个发明者。因此，通常来说，如果你知道某样东西（电话、流水线、飞机、灯泡、晶体管）的 “发明者” 是谁，那是因为他们的公司从中赚了钱，并且公司的公关人员不遗余力地传播了这个故事。如果你不知道某样东西（汽车、电视、计算机、喷气发动机、激光）的发明者是谁，那是因为钱都被其他公司赚走了。</p><p>[9] This is a good plan for life in general. If you have two choices, choose the harder. If you’re trying to decide whether to go out running or sit home and watch TV, go running. Probably the reason this trick works so well is that when you have two choices and one is harder, the only reason you’re even considering the other is laziness. You know in the back of your mind what’s the right thing to do, and this trick merely forces you to acknowledge it.</p><p>[9] 这是一个适用于生活的好原则：<strong>面对两个选择时，选更难的那个</strong>。比如，当你纠结于出去跑步还是在家看电视时，选跑步。这个原则之所以有效，可能是因为当两个选择中一个更难时，你会考虑另一个的唯一原因就是懒惰。你内心深处知道该做什么，而这个原则只是迫使你承认这一点。</p><p>[10] It is probably no accident that the middle class first appeared in northern Italy and the low countries, where there were no strong central governments. These two regions were the richest of their time and became the twin centers from which Renaissance civilization radiated. If they no longer play that role, it is because other places, like the United States, have been truer to the principles they discovered.</p><p>[10] 中产阶级最早出现在意大利北部和低地国家（荷兰、比利时等）并非偶然 —— 这些地区没有强大的中央政府。这两个地区是当时最富有的地方，也成为文艺复兴文明辐射的双中心。如今它们不再扮演这一角色，是因为其他地方（如美国）更忠实地践行了它们发现的原则。</p><p>[11] It may indeed be a sufficient condition. But if so, why didn’t the Industrial Revolution happen earlier? Two possible (and not incompatible) answers: (a) It did. The Industrial Revolution was one in a series. (b) Because in medieval towns, monopolies and guild regulations initially slowed the development of new means of production.</p><p>[11] 这或许确实是一个充分条件。但如果是这样，工业革命为何没有更早发生？有两个可能的（且不矛盾的）答案：（a）它确实发生过 —— 工业革命是一系列变革中的一次。（b）因为在中世纪的城镇中，垄断和行会制度最初延缓了新生产方式的发展。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何写出有用的文章</title>
    <link href="/2025/08/06/how-to-write-usefully/"/>
    <url>/2025/08/06/how-to-write-usefully/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Write-Usefully"><a href="#How-to-Write-Usefully" class="headerlink" title="How to Write Usefully"></a>How to Write Usefully</h2><p>原文链接: <a href="https://paulgraham.com/useful.html">https://paulgraham.com/useful.html</a></p><p>February 2020</p><p>What should an essay be? Many people would say persuasive. That’s what a lot of us were taught essays should be. But I think we can aim for something more ambitious: that an essay should be useful.</p><p>一篇文章应该是什么样的？很多人会说 “有说服力”。这是我们很多人被教导的文章准则。但我认为，我们可以追求更宏大的目标：文章应当 “有用”。</p><p>To start with, that means it should be correct. But it’s not enough merely to be correct. It’s easy to make a statement correct by making it vague. That’s a common flaw in academic writing, for example. If you know nothing at all about an issue, you can’t go wrong by saying that the issue is a complex one, that there are many factors to be considered, that it’s a mistake to take too simplistic a view of it, and so on.</p><p>首先，这意味着文章必须是正确的。但仅仅正确还不够。让一个表述正确很容易，只要让它足够模糊就行。比如，学术写作中就有这样一个常见缺陷：如果你对某个问题一无所知，说 “这个问题很复杂”“有很多因素需要考虑”“过于简化是错误的” 之类的话，就永远不会出错。</p><p>Though no doubt correct, such statements tell the reader nothing. Useful writing makes claims that are as strong as they can be made without becoming false.</p><p>但这类表述即便正确，也无法告诉读者任何东西。有用的文章所提出的观点，要在不变成错误的前提下，尽可能有力。</p><p>For example, it’s more useful to say that Pike’s Peak is near the middle of Colorado than merely somewhere in Colorado. But if I say it’s in the exact middle of Colorado, I’ve now gone too far, because it’s a bit east of the middle.</p><p>举个例子，说 “派克峰在科罗拉多州中部附近”，比只说 “在科罗拉多州某处” 更有用。但如果我说 “它就在科罗拉多州正中心”，就过头了 —— 因为它其实在中心偏东一点。</p><p>Precision and correctness are like opposing forces. It’s easy to satisfy one if you ignore the other. The converse of vaporous academic writing is the bold, but false, rhetoric of demagogues. Useful writing is bold, but true.</p><p>精确性和正确性就像一对相反的力。忽视其中一个，就很容易满足另一个。空洞的学术写作的对立面，是煽动者那种大胆却虚假的花言巧语。而有用的文章，既要大胆，又要真实。</p><p>It’s also two other things: it tells people something important, and that at least some of them didn’t already know.</p><p>此外，它还需要满足另外两个条件：告诉人们一些重要的事，且至少有一部分人此前并不知道。</p><p>Telling people something they didn’t know doesn’t always mean surprising them. Sometimes it means telling them something they knew unconsciously but had never put into words. In fact those may be the more valuable insights, because they tend to be more fundamental.</p><p>告诉人们不知道的事，不一定意味着要让他们惊讶。有时，是把他们潜意识里知道、却从未用语言表达过的事说出来。事实上，这类见解可能更有价值，因为它们往往更根本。</p><p>Let’s put them all together. Useful writing tells people something true and important that they didn’t already know, and tells them as unequivocally as possible.</p><p>把这些条件合起来：有用的文章，是用最明确的方式，告诉人们一些真实、重要且他们此前不知道的事。</p><p>Notice these are all a matter of degree. For example, you can’t expect an idea to be novel to everyone. Any insight that you have will probably have already been had by at least one of the world’s 7 billion people. But it’s sufficient if an idea is novel to a lot of readers.</p><p>要注意，这些条件都有程度之分。比如，你不能指望一个观点对所有人来说都是新颖的。你的任何见解，全球 70 亿人中或许至少已有一人想到过。但只要对很多读者来说是新颖的，就足够了。</p><p>Ditto for correctness, importance, and strength. In effect the four components are like numbers you can multiply together to get a score for usefulness. Which I realize is almost awkwardly reductive, but nonetheless true.</p><p>正确性、重要性和明确性也是如此。实际上，这四个要素就像一组数字，相乘之后就能得出 “有用性” 的分数。我知道这几乎是生硬的简化，但事实的确如此。</p><hr><p>How can you ensure that the things you say are true and novel and important? Believe it or not, there is a trick for doing this. I learned it from my friend Robert Morris, who has a horror of saying anything dumb. His trick is not to say anything unless he’s sure it’s worth hearing. This makes it hard to get opinions out of him, but when you do, they’re usually right.</p><p>如何确保你所说的内容真实、新颖且重要？信不信由你，有个诀窍。我从朋友罗伯特・莫里斯那里学来的 —— 他极度害怕说蠢话。他的诀窍是：除非确定某句话值得听，否则绝不说。这让他很难发表看法，但一旦说出来，往往是对的。</p><p>Translated into essay writing, what this means is that if you write a bad sentence, you don’t publish it. You delete it and try again. Often you abandon whole branches of four or five paragraphs. Sometimes a whole essay.</p><p>放到文章写作中，这意味着：如果写出一句糟糕的话，就不要发表。删掉它，重新写。通常，你会放弃四五个段落的完整分支，有时甚至是整篇文章。</p><p>You can’t ensure that every idea you have is good, but you can ensure that every one you publish is, by simply not publishing the ones that aren’t.</p><p>你无法保证自己所有的想法都是好的，但可以保证发表的都是好的 —— 只要不发表那些不好的就行。</p><p>In the sciences, this is called publication bias, and is considered bad. When some hypothesis you’re exploring gets inconclusive results, you’re supposed to tell people about that too. But with essay writing, publication bias is the way to go.</p><p>在科学界，这被称为 “发表偏倚”，被认为是不好的。当你探索的某个假设得出不确定的结果时，按理说也应该告诉人们。但写文章时，发表偏倚反而是可取的。</p><p>My strategy is loose, then tight. I write the first draft of an essay fast, trying out all kinds of ideas. Then I spend days rewriting it very carefully.</p><p>我的策略是 “先松后紧”：先快速写出文章初稿，尝试各种想法；然后花几天时间仔细修改。</p><p>I’ve never tried to count how many times I proofread essays, but I’m sure there are sentences I’ve read 100 times before publishing them. When I proofread an essay, there are usually passages that stick out in an annoying way, sometimes because they’re clumsily written, and sometimes because I’m not sure they’re true. The annoyance starts out unconscious, but after the tenth reading or so I’m saying “Ugh, that part” each time I hit it. They become like briars that catch your sleeve as you walk past. Usually I won’t publish an essay till they’re all gone — till I can read through the whole thing without the feeling of anything catching.</p><p>我从没数过自己会校对文章多少次，但可以肯定，有些句子在发表前我读了不下 100 遍。校稿时，总会有一些段落显得刺眼 —— 有时是因为写得笨拙，有时是因为我不确定它是否正确。这种不适感一开始是潜意识的，但读了十遍左右后，每次读到那些地方，我都会想 “唉，这部分”。它们就像走过时会勾住袖子的荆棘。通常，我要等到这些 “荆棘” 都消失 —— 能一口气读完整篇文章，没有任何卡顿感 —— 才会发表。</p><p>I’ll sometimes let through a sentence that seems clumsy, if I can’t think of a way to rephrase it, but I will never knowingly let through one that doesn’t seem correct. You never have to. If a sentence doesn’t seem right, all you have to do is ask why it doesn’t, and you’ve usually got the replacement right there in your head.</p><p>有时，如果想不出更好的表达方式，我会容忍一句略显笨拙的话，但绝不会明知某句话不正确还放过去。你永远不必这样做。如果一句话不对劲，只要问问自己为什么不对劲，脑子里通常就会出现替代方案。</p><p>This is where essayists have an advantage over journalists. You don’t have a deadline. You can work for as long on an essay as you need to get it right. You don’t have to publish the essay at all, if you can’t get it right. Mistakes seem to lose courage in the face of an enemy with unlimited resources. Or that’s what it feels like. What’s really going on is that you have different expectations for yourself. You’re like a parent saying to a child “we can sit here all night till you eat your vegetables.” Except you’re the child too.</p><p>这是散文作家相对于记者的优势：你没有截稿日期。可以花足够多的时间把文章写对，写不对甚至可以不发表。错误在拥有无限时间的对手面前，似乎会失去勇气。至少感觉是这样。其实，是你对自己的期待不同了。就像父母对孩子说 “我们可以坐一整晚，直到你吃掉蔬菜”—— 只不过，你既是父母，也是孩子。</p><p>I’m not saying no mistake gets through. For example, I added condition (c) in “A Way to Detect Bias” after readers pointed out that I’d omitted it. But in practice you can catch nearly all of them.</p><p>我不是说不会有错误漏网。比如，在《一种检测偏见的方法》中，有读者指出我漏了（c）项，我后来补上了。但实际上，你几乎能抓住所有错误。</p><p>There’s a trick for getting importance too. It’s like the trick I suggest to young founders for getting startup ideas: to make something you yourself want. You can use yourself as a proxy for the reader. The reader is not completely unlike you, so if you write about topics that seem important to you, they’ll probably seem important to a significant number of readers as well.</p><p>获得 “重要性” 也有个诀窍，就像我给年轻创业者的建议：做自己想要的东西。你可以把自己当作读者的替身。读者和你不会完全不同，所以如果你写的话题对自己来说重要，对很多读者来说可能也重要。</p><p>Importance has two factors. It’s the number of people something matters to, times how much it matters to them. Which means of course that it’s not a rectangle, but a sort of ragged comb, like a Riemann sum.</p><p>重要性有两个要素：受影响的人数，乘以这件事对他们的重要程度。这意味着它不是一个矩形，更像一把参差不齐的梳子，类似黎曼和。</p><p>The way to get novelty is to write about topics you’ve thought about a lot. Then you can use yourself as a proxy for the reader in this department too. Anything you notice that surprises you, who’ve thought about the topic a lot, will probably also surprise a significant number of readers. And here, as with correctness and importance, you can use the Morris technique to ensure that you will. If you don’t learn anything from writing an essay, don’t publish it.</p><p>获得 “新颖性” 的方法，是写自己思考了很久的话题。这时，你也可以把自己当作读者的替身。如果你 —— 一个思考过这个话题很久的人 —— 发现某件事很惊讶，那么很多读者可能也会惊讶。而且，和正确性、重要性一样，你可以用莫里斯的诀窍来确保这一点：如果写一篇文章时没学到新东西，就不要发表。</p><p>You need humility to measure novelty, because acknowledging the novelty of an idea means acknowledging your previous ignorance of it. Confidence and humility are often seen as opposites, but in this case, as in many others, confidence helps you to be humble. If you know you’re an expert on some topic, you can freely admit when you learn something you didn’t know, because you can be confident that most other people wouldn’t know it either.</p><p>衡量新颖性需要谦逊，因为承认一个想法的新颖性，意味着承认自己此前不知道它。自信和谦逊通常被视为对立面，但在这件事上（以及很多其他事上），自信能帮你保持谦逊。如果你知道自己是某个领域的专家，就可以坦然承认学到了新知识 —— 因为你有信心，大多数人也不知道。</p><p>The fourth component of useful writing, strength, comes from two things: thinking well, and the skillful use of qualification. These two counterbalance each other, like the accelerator and clutch in a car with a manual transmission. As you try to refine the expression of an idea, you adjust the qualification accordingly. Something you’re sure of, you can state baldly with no qualification at all, as I did the four components of useful writing. Whereas points that seem dubious have to be held at arm’s length with perhapses.</p><p>有用的文章的第四个要素 “明确性”，来自两点：清晰的思考，以及对限定语的巧妙使用。这两者相互平衡，就像手动挡汽车的油门和离合器。当你试图完善一个想法的表达时，会相应地调整限定语。对于确定的事，你可以直言不讳，不加任何限定 —— 就像我表述有用写作的四个要素时那样。而那些存疑的观点，可能需要用 “或许” 之类的词保持距离。</p><p>As you refine an idea, you’re pushing in the direction of less qualification. But you can rarely get it down to zero. Sometimes you don’t even want to, if it’s a side point and a fully refined version would be too long.</p><p>完善想法时，你会朝着减少限定的方向努力，但很少能减到零。有时甚至不想减到零 —— 如果那是个次要观点，完全完善的版本可能太长了。</p><p>Some say that qualifications weaken writing. For example, that you should never begin a sentence in an essay with “I think,” because if you’re saying it, then of course you think it. And it’s true that “I think x” is a weaker statement than simply “x.” Which is exactly why you need “I think.” You need it to express your degree of certainty.</p><p>有人说限定语会削弱文章的力量。比如，文章里不该用 “我认为” 开头，因为你说出来的话，显然是你认为的。的确，“我认为 x” 比单纯说 “x” 要弱。但这正是需要 “我认为” 的原因：它能表达你的确定程度。</p><p>But qualifications are not scalars. They’re not just experimental error. There must be 50 things they can express: how broadly something applies, how you know it, how happy you are it’s so, even how it could be falsified. I’m not going to try to explore the structure of qualification here. It’s probably more complex than the whole topic of writing usefully. Instead I’ll just give you a practical tip: Don’t underestimate qualification. It’s an important skill in its own right, not just a sort of tax you have to pay in order to avoid saying things that are false. So learn and use its full range. It may not be fully half of having good ideas, but it’s part of having them.</p><p>但限定语不是标量，不只是 “实验误差”。它们能表达的东西恐怕有 50 种：适用范围有多广、你是如何得知的、你对此有多认同、甚至它如何能被证伪。我不想在这里探讨限定语的结构 —— 它可能比 “如何写出有用的文章” 这个话题本身更复杂。我只想给个实用建议：不要低估限定语。它本身就是一项重要技能，不只是为了避免说错话而必须交的 “税”。所以，要学习并充分运用它的全部功能。它或许不算 “提出好想法” 的一半，但也是其中一部分。</p><p>There’s one other quality I aim for in essays: to say things as simply as possible. But I don’t think this is a component of usefulness. It’s more a matter of consideration for the reader. And it’s a practical aid in getting things right; a mistake is more obvious when expressed in simple language. But I’ll admit that the main reason I write simply is not for the reader’s sake or because it helps get things right, but because it bothers me to use more or fancier words than I need to. It seems inelegant, like a program that’s too long.</p><p>我写文章时还追求一点：尽可能简单地表达。但我不认为这是 “有用性” 的要素，更多是对读者的体谅。而且，它能帮你把事情做对 —— 用简单的语言表达时，错误更明显。但说实话，我写得简单，主要不是为了读者，也不是为了更容易写对，而是因为用多余或花哨的词会让我不舒服。这显得不雅，就像一段太长的程序。</p><p>I realize florid writing works for some people. But unless you’re sure you’re one of them, the best advice is to write as simply as you can.</p><p>我知道华丽的文字对有些人有用。但除非你确定自己是那类人，否则最好的建议是：尽可能写得简单。</p><hr><p>I believe the formula I’ve given you, importance + novelty + correctness + strength, is the recipe for a good essay. But I should warn you that it’s also a recipe for making people mad.</p><p>我认为，“重要性 + 新颖性 + 正确性 + 明确性” 这个公式，就是写出好文章的秘诀。但我得提醒你，这也可能让人生气。</p><p>The root of the problem is novelty. When you tell people something they didn’t know, they don’t always thank you for it. Sometimes the reason people don’t know something is because they don’t want to know it. Usually because it contradicts some cherished belief. And indeed, if you’re looking for novel ideas, popular but mistaken beliefs are a good place to find them. Every popular mistaken belief creates a dead zone of ideas around it that are relatively unexplored because they contradict it.</p><p>问题的根源在于 “新颖性”。当你告诉人们他们不知道的事时，他们未必会感谢你。有时，人们不知道某件事，是因为他们不想知道 —— 通常是因为这件事和他们珍视的信念相矛盾。事实上，如果你想找新颖的想法，流行却错误的信念是个好地方。每个流行的错误信念，都会围绕它形成一个 “思想死区”—— 因为与它矛盾，这些想法相对未被探索。</p><p>The strength component just makes things worse. If there’s anything that annoys people more than having their cherished assumptions contradicted, it’s having them flatly contradicted.</p><p>“明确性” 会让情况更糟。如果说有什么比 “珍视的假设被反驳” 更让人恼火，那就是 “被直言不讳地反驳”。</p><p>Plus if you’ve used the Morris technique, your writing will seem quite confident. Perhaps offensively confident, to people who disagree with you. The reason you’ll seem confident is that you are confident: you’ve cheated, by only publishing the things you’re sure of. It will seem to people who try to disagree with you that you never admit you’re wrong. In fact you constantly admit you’re wrong. You just do it before publishing instead of after.</p><p>再加上如果你用了莫里斯的诀窍，你的文章会显得很自信。对不同意你的人来说，这种自信可能很刺耳。你显得自信，是因为你确实自信：你 “作弊” 了 —— 只发表自己确定的内容。那些想反驳你的人会觉得，你从不承认自己错了。但实际上，你一直在承认错误 —— 只是在发表前，而不是之后。</p><p>And if your writing is as simple as possible, that just makes things worse. Brevity is the diction of command. If you watch someone delivering unwelcome news from a position of inferiority, you’ll notice they tend to use lots of words, to soften the blow. Whereas to be short with someone is more or less to be rude to them.</p><p>如果你写得尽可能简单，只会让情况更糟。简洁是命令的口吻。你会发现，地位较低的人传递坏消息时，往往会说很多话来缓和冲击。而对人说话简短，差不多就是粗鲁。</p><p>It can sometimes work to deliberately phrase statements more weakly than you mean. To put “perhaps” in front of something you’re actually quite sure of. But you’ll notice that when writers do this, they usually do it with a wink.</p><p>有时，故意把话说得比实际想法弱一点是有用的。比如，在你很确定的事前面加个 “或许”。但你会发现，作家这么做时，通常会带点暗示。</p><p>I don’t like to do this too much. It’s cheesy to adopt an ironic tone for a whole essay. I think we just have to face the fact that elegance and curtness are two names for the same thing.</p><p>我不太喜欢这么做。整篇文章都用讽刺的语气，会显得俗气。我想，我们得接受一个事实：优雅和简略其实是一回事。</p><p>You might think that if you work sufficiently hard to ensure that an essay is correct, it will be invulnerable to attack. That’s sort of true. It will be invulnerable to valid attacks. But in practice that’s little consolation.</p><p>你可能觉得，只要足够努力确保文章正确，它就不会被攻击。某种程度上是对的 —— 它不会被合理地攻击。但实际上，这没什么安慰作用。</p><p>In fact, the strength component of useful writing will make you particularly vulnerable to misrepresentation. If you’ve stated an idea as strongly as you could without making it false, all anyone has to do is to exaggerate slightly what you said, and now it is false.</p><p>事实上，有用的文章的 “明确性” 会让你特别容易被曲解。如果你把一个想法表达得尽可能有力又不虚假，那么任何人只要稍微夸大一点你说的话，它就变成错误的了。</p><p>Much of the time they’re not even doing it deliberately. One of the most surprising things you’ll discover, if you start writing essays, is that people who disagree with you rarely disagree with what you’ve actually written. Instead they make up something you said and disagree with that.</p><p>很多时候，他们并非故意。如果你开始写文章，会发现一个很惊讶的事：不同意你的人，很少反驳你实际写的内容。他们会编造你 “说过” 的话，然后反驳那个。</p><p>For what it’s worth, the countermove is to ask someone who does this to quote a specific sentence or passage you wrote that they believe is false, and explain why. I say “for what it’s worth” because they never do. So although it might seem that this could get a broken discussion back on track, the truth is that it was never on track in the first place.</p><p>不妨试试这个对策：让曲解你的人引用你写的某句话或某段话，解释为什么它是错的。我说 “不妨试试”，是因为他们从没这么做过。所以，虽然这看似能让混乱的讨论回到正轨，但事实是，讨论从一开始就不在正轨上。</p><p>Should you explicitly forestall likely misinterpretations? Yes, if they’re misinterpretations a reasonably smart and well-intentioned person might make. In fact it’s sometimes better to say something slightly misleading and then add the correction than to try to get an idea right in one shot. That can be more efficient, and can also model the way such an idea would be discovered.</p><p>是否应该明确预防可能的误解？是的，如果那是一个聪明且善意的人可能产生的误解。事实上，有时先说一句略带误导的话，再补充纠正，比试图一次说对更有效 —— 这能模拟发现某个想法的过程。</p><p>But I don’t think you should explicitly forestall intentional misinterpretations in the body of an essay. An essay is a place to meet honest readers. You don’t want to spoil your house by putting bars on the windows to protect against dishonest ones. The place to protect against intentional misinterpretations is in end-notes. But don’t think you can predict them all. People are as ingenious at misrepresenting you when you say something they don’t want to hear as they are at coming up with rationalizations for things they want to do but know they shouldn’t. I suspect it’s the same skill.</p><p>但我认为，不应该在文章主体中明确预防故意的误解。文章是与真诚的读者相遇的地方。为了防备不真诚的人而给窗户装铁栏，会毁掉你的 “房子”。防备故意误解的地方应该是尾注。但别指望能预测所有误解。当你说的话是他们不想听的，人们曲解你的本事，和他们为想做却知道不该做的事找借口的本事一样大。我怀疑这是同一种技能。</p><hr><p>As with most other things, the way to get better at writing essays is to practice. But how do you start? Now that we’ve examined the structure of useful writing, we can rephrase that question more precisely. Which constraint do you relax initially? The answer is, the first component of importance: the number of people who care about what you write.</p><p>和大多数事情一样，写文章的技巧也需要练习。但该如何开始？既然我们已经分析了有用的写作的结构，就能更精确地重述这个问题：一开始应该放宽哪个约束？答案是 “重要性” 的第一个要素：关心你所写内容的人数。</p><p>If you narrow the topic sufficiently, you can probably find something you’re an expert on. Write about that to start with. If you only have ten readers who care, that’s fine. You’re helping them, and you’re writing. Later you can expand the breadth of topics you write about.</p><p>如果你把话题缩得足够小，或许能找到自己擅长的领域。先写这个。即使只有 10 个关心的读者，也没关系。你在帮他们，也在练习写作。之后，再扩大写作的话题范围。</p><p>The other constraint you can relax is a little surprising: publication. Writing essays doesn’t have to mean publishing them. That may seem strange now that the trend is to publish every random thought, but it worked for me. I wrote what amounted to essays in notebooks for about 15 years. I never published any of them and never expected to. I wrote them as a way of figuring things out. But when the web came along I’d had a lot of practice.</p><p>另一个可以放宽的约束有点出人意料：发表。写文章不一定意味着要发表。现在大家都倾向于把随便一个想法都发出来，这显得奇怪，但对我有用。我在笔记本上写了差不多 15 年类似文章的东西，从没发表过，也没想过要发表。我写它们是为了理清思路。但当网络出现时，我已经有了很多练习。</p><p>Incidentally, Steve Wozniak did the same thing. In high school he designed computers on paper for fun. He couldn’t build them because he couldn’t afford the components. But when Intel launched 4K DRAMs in 1975, he was ready.</p><p>顺便说一句，史蒂夫・沃兹尼亚克也是如此。高中时，他为了好玩，在纸上设计电脑。他造不出来，因为买不起零件。但 1975 年英特尔推出 4K DRAM 时，他已经准备好了。</p><hr><p>How many essays are there left to write though? The answer to that question is probably the most exciting thing I’ve learned about essay writing. Nearly all of them are left to write.</p><p>但还有多少文章有待写作？这个问题的答案，可能是我在文章写作中最令人兴奋的发现：几乎所有文章都还没写。</p><p>Although the essay is an old form, it hasn’t been assiduously cultivated. In the print era, publication was expensive, and there wasn’t enough demand for essays to publish that many. You could publish essays if you were already well known for writing something else, like novels. Or you could write book reviews that you took over to express your own ideas. But there was not really a direct path to becoming an essayist. Which meant few essays got written, and those that did tended to be about a narrow range of subjects.</p><p>尽管散文是一种古老的体裁，但并未被精心培育。在印刷时代，出版成本高，对散文的需求也不足以支撑大量出版。你得先因写小说之类的东西出名，才能发表散文；或者写书评，借机表达自己的想法。但没有成为散文作家的直接路径。这意味着很少有散文被写出，而写出的那些，主题范围也很窄。</p><p>Now, thanks to the internet, there’s a path. Anyone can publish essays online. You start in obscurity, perhaps, but at least you can start. You don’t need anyone’s permission.</p><p>现在，多亏了互联网，有了路径。任何人都能在网上发表散文。或许一开始默默无闻，但至少能开始，不需要任何人的许可。</p><p>It sometimes happens that an area of knowledge sits quietly for years, till some change makes it explode. Cryptography did this to number theory. The internet is doing it to the essay.</p><p>有时，某个知识领域会沉寂多年，直到某个变化让它爆发。密码学让数论爆发，互联网正在让散文爆发。</p><p>The exciting thing is not that there’s a lot left to write, but that there’s a lot left to discover. There’s a certain kind of idea that’s best discovered by writing essays. If most essays are still unwritten, most such ideas are still undiscovered.</p><p>令人兴奋的不是还有很多文章要写，而是还有很多发现要做。有一种想法，最适合通过写散文来发现。如果大多数散文还没写，那么大多数这类想法也还没被发现。</p><p>Notes</p><p>[1] Put railings on the balconies, but don’t put bars on the windows.</p><p>[1] 给阳台装护栏，但别给窗户装铁栏。</p><p>[2] Even now I sometimes write essays that are not meant for publication. I wrote several to figure out what Y Combinator should do, and they were really helpful.</p><p>[2] 即便现在，我有时也会写一些不打算发表的文章。我曾写过几篇，目的是理清 Y Combinator（一家创业孵化器）应该做什么，这些文章真的很有帮助。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创业之前</title>
    <link href="/2025/08/05/before-the-startup/"/>
    <url>/2025/08/05/before-the-startup/</url>
    
    <content type="html"><![CDATA[<h2 id="Before-the-Startup"><a href="#Before-the-Startup" class="headerlink" title="Before the Startup"></a>Before the Startup</h2><p>原文链接: <a href="https://paulgraham.com/before.html">https://paulgraham.com/before.html</a></p><p>October 2014</p><p>(This essay is derived from a guest lecture in Sam Altman’s startup class at Stanford. It’s intended for college students, but much of it is applicable to potential founders at other ages.)</p><p>（本文改编自我在斯坦福大学山姆・奥特曼创业课上的客座演讲。内容虽面向大学生，但其中很多观点也适用于其他年龄段的潜在创业者。）</p><p>One of the advantages of having kids is that when you have to give advice, you can ask yourself “what would I tell my own kids?” My kids are little, but I can imagine what I’d tell them about startups if they were in college, and that’s what I’m going to tell you.</p><p>有孩子的好处之一是，当你需要给出建议时，你可以问自己：“我会对自己的孩子说什么？” 我的孩子还小，但我能想象如果他们上了大学，我会跟他们讲哪些关于创业的事 —— 接下来我要讲的就是这些。</p><p>Startups are very counterintuitive. I’m not sure why. Maybe it’s just because knowledge about them hasn’t permeated our culture yet. But whatever the reason, starting a startup is a task where you can’t always trust your instincts.</p><p>创业这件事非常反直觉。我不确定原因何在，或许是因为关于创业的知识还没渗透到我们的文化中。但无论如何，创业时，你不能总相信自己的直觉。</p><p>It’s like skiing in that way. When you first try skiing and you want to slow down, your instinct is to lean back. But if you lean back on skis you fly down the hill out of control. So part of learning to ski is learning to suppress that impulse. Eventually you get new habits, but at first it takes a conscious effort. At first there’s a list of things you’re trying to remember as you start down the hill.</p><p>这有点像滑雪。第一次滑雪时，你想减速，直觉会让你向后仰。但滑雪时向后仰，你只会失控地冲下山坡。所以学滑雪的一部分内容，就是学会抑制这种冲动。最终你会养成新习惯，但一开始必须有意识地努力 —— 刚开始下坡时，你得时刻记着一长串注意事项。</p><p>Startups are as unnatural as skiing, so there’s a similar list for startups. Here I’m going to give you the first part of it — the things to remember if you want to prepare yourself to start a startup.</p><p>创业和滑雪一样 “违背天性”，所以也有这么一串注意事项。接下来我要说的是第一部分 —— 如果你想为创业做准备，需要记住这些事。</p><p><strong>Counterintuitive</strong></p><p><strong>反直觉</strong></p><p>The first item on it is the fact I already mentioned: that startups are so weird that if you trust your instincts, you’ll make a lot of mistakes. If you know nothing more than this, you may at least pause before making them.</p><p>第一条就是我已经提到的：创业太特殊了，如果你相信直觉，会犯很多错。哪怕你只知道这一点，至少在犯错前会犹豫一下。</p><p>When I was running Y Combinator I used to joke that our function was to tell founders things they would ignore. It’s really true. Batch after batch, the YC partners warn founders about mistakes they’re about to make, and the founders ignore them, and then come back a year later and say “I wish we’d listened.”</p><p>我运营 Y Combinator 时，常开玩笑说我们的作用就是告诉创始人一些他们会无视的事。这话千真万确。一批又一批创业者，YC 的合伙人会警告他们即将犯下的错误，他们不听，一年后回来却说：“真该听你们的。”</p><p>Why do the founders ignore the partners’ advice? Well, that’s the thing about counterintuitive ideas: they contradict your intuitions. They seem wrong. So of course your first impulse is to disregard them. And in fact my joking description is not merely the curse of Y Combinator but part of its raison d’etre. If founders’ instincts already gave them the right answers, they wouldn’t need us. You only need other people to give you advice that surprises you. That’s why there are a lot of ski instructors and not many running instructors. [1]</p><p>为什么创始人会无视合伙人的建议？这就是反直觉观点的特点：它们和你的直觉相悖，看起来是错的。所以你第一反应肯定是无视。其实我那句玩笑不只是 YC 的 “魔咒”，更是它存在的意义。如果创始人的直觉本身就能给出正确答案，他们就不需要我们了。你只需要那些能给你带来意外启发的建议。这也是滑雪教练很多，而跑步教练很少的原因。[1]</p><p>You can, however, trust your instincts about people. And in fact one of the most common mistakes young founders make is not to do that enough. They get involved with people who seem impressive, but about whom they feel some misgivings personally. Later when things blow up they say “I knew there was something off about him, but I ignored it because he seemed so impressive.”</p><p>不过，你可以相信自己对人的直觉。事实上，年轻创业者最常犯的错误之一，就是不够相信这种直觉。他们会和那些看起来很厉害，但自己私下里有点疑虑的人合作。后来出问题时，他们会说：“我早觉得他有点不对劲，但他看起来太厉害了，我就没在意。”</p><p>If you’re thinking about getting involved with someone — as a cofounder, an employee, an investor, or an acquirer — and you have misgivings about them, trust your gut. If someone seems slippery, or bogus, or a jerk, don’t ignore it.</p><p>如果你考虑和某人合作 —— 无论是作为联合创始人、员工、投资者还是收购方 —— 并且对他们有疑虑，相信你的直觉。如果某人看起来油滑、虚伪或混蛋，别无视这种感觉。</p><p>This is one case where it pays to be self-indulgent. Work with people you genuinely like, and you’ve known long enough to be sure.</p><p>这种情况下，“任性” 一点是值得的。和你真心喜欢、且认识足够久能信任的人一起工作。</p><p><strong>Expertise</strong></p><p><strong>专业知识</strong></p><p>The second counterintuitive point is that it’s not that important to know a lot about startups. The way to succeed in a startup is not to be an expert on startups, but to be an expert on your users and the problem you’re solving for them. Mark Zuckerberg didn’t succeed because he was an expert on startups. He succeeded despite being a complete noob at startups, because he understood his users really well.</p><p>第二个反直觉的点是：懂多少创业知识没那么重要。在创业中成功的关键，不是成为创业专家，而是成为用户和你要解决的问题的专家。马克・扎克伯格能成功，不是因为他是创业专家。他完全是创业新手，却能成功，因为他太了解自己的用户了。</p><p>If you don’t know anything about, say, how to raise an angel round, don’t feel bad on that account. That sort of thing you can learn when you need to, and forget after you’ve done it.</p><p>比如，如果你根本不知道怎么进行天使轮融资，别为此懊恼。这类事需要时能学会，做完后也能忘掉。</p><p>In fact, I worry it’s not merely unnecessary to learn in great detail about the mechanics of startups, but possibly somewhat dangerous. If I met an undergrad who knew all about convertible notes and employee agreements and (God forbid) class FF stock, I wouldn’t think “here is someone who is way ahead of their peers.” It would set off alarms. Because another of the characteristic mistakes of young founders is to go through the motions of starting a startup. They make up some plausible-sounding idea, raise money at a good valuation, rent a cool office, hire a bunch of people. From the outside that seems like what startups do. But the next step after rent a cool office and hire a bunch of people is: gradually realize how completely fucked they are, because while imitating all the outward forms of a startup they have neglected the one thing that’s actually essential: making something people want.</p><p>其实我担心的是，深入学习创业机制不仅没必要，甚至可能有点危险。如果我遇到一个本科生，他对可转换票据、员工协议，甚至（老天保佑）FF 级股票了如指掌，我不会觉得 “这人比同龄人领先太多”，反而会警觉。因为年轻创业者还有一个典型错误：走创业的 “流程”。他们编一个听起来合理的想法，以不错的估值融到钱，租个酷炫的办公室，雇一群人。从表面看，这就是创业该做的事。但租完办公室、雇好人之后，下一步就是：逐渐意识到自己彻底完蛋了 —— 因为他们模仿了创业的所有外在形式，却忽略了唯一真正重要的事：做出人们需要的东西。</p><p><strong>Game</strong></p><p><strong>游戏思维</strong></p><p>We saw this happen so often that we made up a name for it: playing house. Eventually I realized why it was happening. The reason young founders go through the motions of starting a startup is because that’s what they’ve been trained to do for their whole lives up to that point. Think about what you have to do to get into college, for example. Extracurricular activities, check. Even in college classes most of the work is as artificial as running laps.</p><p>这种事我们见得太多，以至于给它起了个名字：“过家家”。后来我才明白为什么会这样。年轻创业者走创业流程，是因为这是他们迄今为止的人生中被训练做的事。比如，想想你为了上大学要做什么：课外活动，打勾。甚至大学课程里的大部分作业，都像绕圈跑步一样虚假。</p><p>I’m not attacking the educational system for being this way. There will always be a certain amount of fakeness in the work you do when you’re being taught something, and if you measure their performance it’s inevitable that people will exploit the difference to the point where much of what you’re measuring is artifacts of the fakeness.</p><p>我不是在攻击教育体系。当你在学习时，做的事总会有一定虚假性；而当你要衡量表现时，人们不可避免地会利用这种虚假性，以至于你衡量的很多东西，其实都是虚假的产物。</p><p>I confess I did it myself in college. I found that in a lot of classes there might only be 20 or 30 ideas that were the right shape to make good exam questions. The way I studied for exams in these classes was not (except incidentally) to master the material taught in the class, but to make a list of potential exam questions and work out the answers in advance. When I walked into the final, the main thing I’d be feeling was curiosity about which of my questions would turn up on the exam. It was like a game.</p><p>坦白说，我在大学时也这么干过。我发现很多课程里，可能只有二三十个概念适合出成考题。我备考的方式不是（至少不只是）掌握课程内容，而是列出可能的考题，提前想好答案。走进期末考试考场时，我最想知道的是自己押的题能中多少。这就像一场游戏。</p><p>It’s not surprising that after being trained for their whole lives to play such games, young founders’ first impulse on starting a startup is to try to figure out the tricks for winning at this new game. Since fundraising appears to be the measure of success for startups (another classic noob mistake), they always want to know what the tricks are for convincing investors. We tell them the best way to convince investors is to make a startup that’s actually doing well, meaning growing fast, and then simply tell investors so. Then they want to know what the tricks are for growing fast. And we have to tell them the best way to do that is simply to make something people want.</p><p>所以，当年轻创业者被训练了一辈子玩这种 “游戏” 后，他们创业的第一反应就是想找出赢得这场新 “游戏” 的诀窍，这并不奇怪。因为融资似乎成了衡量创业成功的标准（另一个典型的新手错误），他们总想问说服投资者的诀窍。我们告诉他们，说服投资者的最好方式，是让创业公司真的做得好 —— 也就是快速增长，然后如实告诉投资者。接着他们又想知道快速增长的诀窍。我们只能告诉他们，最好的方式就是做出人们需要的东西。</p><p>So many of the conversations YC partners have with young founders begin with the founder asking “How do we…” and the partner replying “Just…”</p><p>YC 合伙人与年轻创业者的很多对话，都是从创业者问 “我们该怎么……” 开始，合伙人回答 “只要……” 结束。</p><p>Why do the founders always make things so complicated? The reason, I realized, is that they’re looking for the trick.</p><p>为什么创业者总把事情搞得这么复杂？我意识到，因为他们在找 “诀窍”。</p><p>So this is the third counterintuitive thing to remember about startups: starting a startup is where gaming the system stops working. Gaming the system may continue to work if you go to work for a big company. Depending on how broken the company is, you can succeed by sucking up to the right people, giving the impression of productivity, and so on. [2] But that doesn’t work with startups. There is no boss to trick, only users, and all users care about is whether your product does what they want. Startups are as impersonal as physics. You have to make something people want, and you prosper only to the extent you do.</p><p>所以创业的第三个反直觉之处是：创业是 “钻空子” 思维失效的地方。如果你去大公司工作，“钻空子” 可能还管用。取决于公司有多混乱，你可以靠拍对马屁、装出高效的样子等方式成功。[2] 但这在创业中没用。没有老板可以糊弄，只有用户，而用户只关心你的产品是否满足他们的需求。创业像物理一样客观：你必须做出人们需要的东西，且只有在做到这一点时才能发展。</p><p>The dangerous thing is, faking does work to some degree on investors. If you’re super good at sounding like you know what you’re talking about, you can fool investors for at least one and perhaps even two rounds of funding. But it’s not in your interest to. The company is ultimately doomed. All you’re doing is wasting your own time riding it down.</p><p>危险的是，“装样子” 在投资者那里多少有点用。如果你特别擅长装得很懂行，至少能骗到一轮融资，甚至两轮。但这对你没好处。公司最终注定失败，你只是在浪费自己的时间陪它走向终结。</p><p>So stop looking for the trick. There are tricks in startups, as there are in any domain, but they are an order of magnitude less important than solving the real problem. A founder who knows nothing about fundraising but has made something users love will have an easier time raising money than one who knows every trick in the book but has a flat usage graph. And more importantly, the founder who has made something users love is the one who will go on to succeed after raising the money.</p><p>所以别再找诀窍了。创业中确实有诀窍，任何领域都有，但它们的重要性比解决实际问题低一个数量级。一个不懂融资，但做出了用户喜爱的产品的创始人，比一个精通所有融资技巧，但用户增长停滞的创始人更容易融到钱。更重要的是，做出用户喜爱的产品的创始人，融资后才能继续成功。</p><p>Though in a sense it’s bad news in that you’re deprived of one of your most powerful weapons, I think it’s exciting that gaming the system stops working when you start a startup. It’s exciting that there even exist parts of the world where you win by doing good work. Imagine how depressing the world would be if it were all like school and big companies, where you either have to spend a lot of time on bullshit things or lose to people who do. [3] I would have been delighted if I’d realized in college that there were parts of the real world where gaming the system mattered less than others, and a few where it hardly mattered at all. But there are, and this variation is one of the most important things to consider when you’re thinking about your future. How do you win in each type of work, and what would you like to win by doing? [4]</p><p>虽然从某种角度说，不能再用 “钻空子” 这种强大武器有点遗憾，但我觉得创业中 “钻空子” 失效这件事很令人兴奋。世界上居然有这样的领域，你靠做好工作就能成功，这太让人激动了。想象一下，如果世界全像学校和大公司那样 —— 你要么花大量时间做无用功，要么输给那些做无用功的人 —— 那该多令人沮丧。[3] 如果我在大学时就意识到，现实世界中有些领域 “钻空子” 没那么重要，甚至几乎不重要，我会很高兴。但这样的领域确实存在，而在思考未来时，这种差异是你需要考虑的最重要的事之一：在每种工作中，你要靠什么成功？你希望靠什么成功？[4]</p><p><strong>All-Consuming</strong></p><p><strong>全身心投入</strong></p><p>That brings us to our fourth counterintuitive point: startups are all-consuming. If you start a startup, it will take over your life to a degree you cannot imagine. And if your startup succeeds, it will take over your life for a long time: for several years at the very least, maybe for a decade, maybe for the rest of your working life. So there is a real opportunity cost here.</p><p>这就引出了第四个反直觉的点：创业会占据你的全部生活。如果你创业，它对你生活的占据程度会超出你的想象。如果创业成功，它会占据你的生活很长时间：至少好几年，可能十年，甚至整个职业生涯。所以这里有实实在在的机会成本。</p><p>Larry Page may seem to have an enviable life, but there are aspects of it that are unenviable. Basically at 25 he started running as fast as he could and it must seem to him that he hasn’t stopped to catch his breath since. Every day new shit happens in the Google empire that only the CEO can deal with, and he, as CEO, has to deal with it. If he goes on vacation for even a week, a whole week’s backlog of shit accumulates. And he has to bear this uncomplainingly, partly because as the company’s daddy he can never show fear or weakness, and partly because billionaires get less than zero sympathy if they talk about having difficult lives. Which has the strange side effect that the difficulty of being a successful startup founder is concealed from almost everyone except those who’ve done it.</p><p>拉里・佩奇的生活似乎很令人羡慕，但也有不那么令人羡慕的地方。基本上，他 25 岁时就开始拼命奔跑，而且从那以后似乎就没停下来喘过气。谷歌帝国每天都有新麻烦，只有 CEO 能处理，而他作为 CEO，必须去处理。哪怕休假一周，就会堆积一周的麻烦。他还得毫无怨言地承受这一切，部分原因是作为公司的 “大家长”，他不能表现出恐惧或软弱；另一部分原因是，亿万富翁抱怨生活艰难，只会得到零甚至负的同情。这就产生了一个奇怪的副作用：成功创业者的艰难，几乎只有亲身经历过的人才知道。</p><p>Y Combinator has now funded several companies that can be called big successes, and in every single case the founders say the same thing. It never gets any easier. The nature of the problems change. You’re worrying about construction delays at your London office instead of the broken air conditioner in your studio apartment. But the total volume of worry never decreases; if anything it increases.</p><p>YC 投资过几家能称为 “巨大成功” 的公司，每一家的创始人都说过同样的话：创业从来不会变轻松。问题的性质会变 —— 你担心的可能是伦敦办公室的建设延期，而不是工作室公寓里坏掉的空调 —— 但担忧的总量从未减少，甚至可能增加。</p><p>Starting a successful startup is similar to having kids in that it’s like a button you push that changes your life irrevocably. And while it’s truly wonderful having kids, there are a lot of things that are easier to do before you have them than after. Many of which will make you a better parent when you do have kids. And since you can delay pushing the button for a while, most people in rich countries do.</p><p>成功创业有点像生孩子：按下按钮，你的生活就会发生不可逆转的改变。虽然生孩子真的很美好，但很多事在生孩子前做比生完后更容易，其中很多事还能让你成为更好的父母。而因为可以推迟 “按下按钮”，富裕国家的大多数人都会这么做。</p><p>Yet when it comes to startups, a lot of people seem to think they’re supposed to start them while they’re still in college. Are you crazy? And what are the universities thinking? They go out of their way to ensure their students are well supplied with contraceptives, and yet they’re setting up entrepreneurship programs and startup incubators left and right.</p><p>但说到创业，很多人似乎觉得应该在大学时就开始。你疯了吗？大学在想什么？他们费尽心思确保学生能拿到避孕药，却又到处搞创业项目和创业孵化器。</p><p>To be fair, the universities have their hand forced here. A lot of incoming students are interested in startups. Universities are, at least de facto, expected to prepare them for their careers. So students who want to start startups hope universities can teach them about startups. And whether universities can do this or not, there’s some pressure to claim they can, lest they lose applicants to other universities that do.</p><p>公平地说，大学也是迫不得已。很多新生对创业感兴趣，而大学至少在事实上被期望为学生的职业生涯做准备。所以想创业的学生希望大学能教他们创业知识。不管大学能不能做到，都有压力让它们宣称自己能做到，否则就会有学生流向那些宣称能教创业的大学。</p><p>Can universities teach students about startups? Yes and no. They can teach students about startups, but as I explained before, this is not what you need to know. What you need to learn about are the needs of your own users, and you can’t do that until you actually start the company. [5] So starting a startup is intrinsically something you can only really learn by doing it. And it’s impossible to do that in college, for the reason I just explained: startups take over your life. You can’t start a startup for real as a student, because if you start a startup for real you’re not a student anymore. You may be nominally a student for a bit, but you won’t even be that for long. [6]</p><p>大学能教学生创业吗？能，也不能。它们能教关于创业的知识，但如我之前所说，这不是你需要知道的。你需要了解的是自己用户的需求，而这只有在你真正开了公司后才能做到。[5] 所以创业本质上是只能在实践中学习的事。而在大学里不可能真正创业，原因我刚才说了：创业会占据你的全部生活。作为学生，你不可能真正创业，因为一旦认真创业，你就不再是学生了。可能名义上还是学生一段时间，但也长不了。[6]</p><p>Given this dichotomy, which of the two paths should you take? Be a real student and not start a startup, or start a real startup and not be a student? I can answer that one for you. Do not start a startup in college. How to start a startup is just a subset of a bigger problem you’re trying to solve: how to have a good life. And though starting a startup can be part of a good life for a lot of ambitious people, age 20 is not the optimal time to do it. Starting a startup is like a brutally fast depth-first search. Most people should still be searching breadth-first at 20.</p><p>面对这种二分法，你该选哪条路？做真正的学生，不创业？还是真正创业，不当学生？我可以告诉你答案：别在大学时创业。“如何创业” 只是你要解决的更大问题的一个子集：如何拥有美好的人生。虽然对很多有野心的人来说，创业可以是美好人生的一部分，但 20 岁不是最佳时机。创业就像一场极其快速的深度优先搜索，而大多数人在 20 岁时，仍应该进行广度优先搜索。</p><p>You can do things in your early 20s that you can’t do as well before or after, like plunge deeply into projects on a whim and travel super cheaply with no sense of a deadline. For unambitious people, this sort of thing is the dreaded “failure to launch,” but for the ambitious ones it can be an incomparably valuable sort of exploration. If you start a startup at 20 and you’re sufficiently successful, you’ll never get to do it. [7]</p><p>二十出头时，你能做一些之前和之后都做不好的事：凭一时兴起深入投入某个项目，或者毫无时间压力地超低价旅行。对没野心的人来说，这种事是可怕的 “停滞不前”，但对有野心的人来说，这可能是无比宝贵的探索。如果你 20 岁创业且足够成功，就再也没机会做这些事了。[7]</p><p>Mark Zuckerberg will never get to bum around a foreign country. He can do other things most people can’t, like charter jets to fly him to foreign countries. But success has taken a lot of the serendipity out of his life. Facebook is running him as much as he’s running Facebook. And while it can be very cool to be in the grip of a project you consider your life’s work, there are advantages to serendipity too, especially early in life. Among other things it gives you more options to choose your life’s work from.</p><p>马克・扎克伯格永远不会有在异国他乡闲逛的经历了。他能做很多人做不到的事，比如包机去国外，但成功夺走了他生活中很多偶然性。 Facebook 在运营他，就像他在运营 Facebook 一样。虽然被一个你视为毕生事业的项目 “掌控” 可能很酷，但偶然性也有其优势，尤其是在人生早期。比如，它能给你更多选择，让你从中挑选毕生事业。</p><p>There’s not even a tradeoff here. You’re not sacrificing anything if you forgo starting a startup at 20, because you’re more likely to succeed if you wait. In the unlikely case that you’re 20 and one of your side projects takes off like Facebook did, you’ll face a choice of running with it or not, and it may be reasonable to run with it. But the usual way startups take off is for the founders to make them take off, and it’s gratuitously stupid to do that at 20.</p><p>这甚至算不上权衡。20 岁时放弃创业，你不会损失什么，因为等一等，你成功的可能性更高。万一你 20 岁时，某个副业像 Facebook 那样爆发，你会面临选择：要不要全力以赴。这种情况下，全力以赴可能是合理的。但创业通常需要创始人推动才能发展，而 20 岁就这么做，实在是没必要的愚蠢。</p><p><strong>Try</strong></p><p><strong>尝试</strong></p><p>Should you do it at any age? I realize I’ve made startups sound pretty hard. If I haven’t, let me try again: starting a startup is really hard. What if it’s too hard? How can you tell if you’re up to this challenge?</p><p>那任何年龄都该创业吗？我意识到自己把创业说得挺难的。如果还没说清楚，我再强调一次：创业真的很难。如果太难了呢？你怎么知道自己能否应对这个挑战？</p><p>The answer is the fifth counterintuitive point: you can’t tell. Your life so far may have given you some idea what your prospects might be if you tried to become a mathematician, or a professional football player. But unless you’ve had a very strange life you haven’t done much that was like being a startup founder. Starting a startup will change you a lot. So what you’re trying to estimate is not just what you are, but what you could grow into, and who can do that?</p><p>答案是第五个反直觉的点：你不知道。到目前为止的人生，可能让你大致知道自己成为数学家或职业足球运动员的前景如何。但除非你的人生非常奇特，否则你没做过多少和创业类似的事。创业会极大地改变你。所以你要评估的不仅是现在的自己，还有未来可能成长为的样子 —— 谁能做到这一点呢？</p><p>For the past 9 years it was my job to predict whether people would have what it took to start successful startups. It was easy to tell how smart they were, and most people reading this will be over that threshold. The hard part was predicting how tough and ambitious they would become. There may be no one who has more experience at trying to predict that, so I can tell you how much an expert can know about it, and the answer is: not much. I learned to keep a completely open mind about which of the startups in each batch would turn out to be the stars.</p><p>过去 9 年，我的工作就是预测人们是否有能力创办成功的公司。判断他们有多聪明很容易，读这篇文章的大多数人都超过了这个门槛。难的是预测他们会变得多坚韧、多有野心。可能没人比我更有经验做这种预测了，所以我可以告诉你，专家能知道多少 —— 答案是：不多。我学会了对每批创业公司中哪些会成为明星保持完全开放的心态。</p><p>The founders sometimes think they know. Some arrive feeling sure they will ace Y Combinator just as they’ve aced every one of the (few, artificial, easy) tests they’ve faced in life so far. Others arrive wondering how they got in, and hoping YC doesn’t discover whatever mistake caused it to accept them. But there is little correlation between founders’ initial attitudes and how well their companies do.</p><p>创始人自己有时觉得知道答案。有些人来的时候，确信自己能在 YC 表现出色，就像他们在人生中遇到的所有（少数、虚假、简单的）测试中表现出色一样。另一些人来的时候，疑惑自己怎么会被选中，担心 YC 会发现接受他们是个错误。但创始人最初的态度和公司最终的表现几乎没什么关联。</p><p>I’ve read that the same is true in the military — that the swaggering recruits are no more likely to turn out to be really tough than the quiet ones. And probably for the same reason: that the tests involved are so different from the ones in their previous lives.</p><p>我读过一些关于军队的内容 —— 那些昂首阔步的新兵，并不比安静的新兵更可能成为真正坚韧的人。原因可能相同：军队的考验和他们之前经历的完全不同。</p><p>If you’re absolutely terrified of starting a startup, you probably shouldn’t do it. But if you’re merely unsure whether you’re up to it, the only way to find out is to try. Just not now.</p><p>如果你对创业极度恐惧，可能确实不该做。但如果你只是不确定自己能否应对，唯一的办法就是尝试。只是现在别试。</p><p><strong>Ideas</strong></p><p><strong>想法</strong></p><p>So if you want to start a startup one day, what should you do in college? There are only two things you need initially: an idea and cofounders. And the m.o. for getting both is the same. Which leads to our sixth and last counterintuitive point: that the way to get startup ideas is not to try to think of startup ideas.</p><p>所以如果你某天想创业，大学时该做什么？最初只需要两样东西：一个想法和联合创始人。而获得这两样东西的方法是一样的。这就引出了第六个，也是最后一个反直觉的点：获取创业想法的方式，不是刻意去想创业想法。</p><p>I’ve written a whole essay on this, so I won’t repeat it all here. But the short version is that if you make a conscious effort to think of startup ideas, the ideas you come up with will not merely be bad, but bad and plausible-sounding, meaning you’ll waste a lot of time on them before realizing they’re bad.</p><p>我专门写过一篇文章讲这个，这里就不重复了。但简而言之，如果你刻意去想创业想法，想出来的不仅会很糟，还会糟得听起来很合理 —— 这意味着你会在意识到它们很糟之前，浪费大量时间。</p><p>The way to come up with good startup ideas is to take a step back. Instead of making a conscious effort to think of startup ideas, turn your mind into the type that startup ideas form in without any conscious effort. In fact, so unconsciously that you don’t even realize at first that they’re startup ideas.</p><p>想出好的创业想法的方法是退一步。不要刻意去想，而是把自己的大脑变成那种能无意识产生创业想法的类型。事实上，无意识到你一开始甚至没意识到它们是创业想法。</p><p>This is not only possible, it’s how Apple, Yahoo, Google, and Facebook all got started. None of these companies were even meant to be companies at first. They were all just side projects. The best startups almost have to start as side projects, because great ideas tend to be such outliers that your conscious mind would reject them as ideas for companies.</p><p>这不仅可能，苹果、雅虎、谷歌和 Facebook 都是这么来的。这些公司最初都没打算成为公司，只是副业。最好的创业公司几乎都得从副业开始，因为好想法往往太非主流，你的意识会拒绝把它们当成创业想法。</p><p>Ok, so how do you turn your mind into the type that startup ideas form in unconsciously? (1) Learn a lot about things that matter, then (2) work on problems that interest you (3) with people you like and respect. The third part, incidentally, is how you get cofounders at the same time as the idea.</p><p>那么，如何把自己的大脑变成能无意识产生创业想法的类型？（1）大量学习重要的东西；（2）解决你感兴趣的问题；（3）和你喜欢且尊重的人一起。顺便说一句，第三点也是同时找到联合创始人的方法。</p><p>The first time I wrote that paragraph, instead of “learn a lot about things that matter,” I wrote “become good at some technology.” But that prescription, though sufficient, is too narrow. What was special about Brian Chesky and Joe Gebbia was not that they were experts in technology. They were good at design, and perhaps even more importantly, they were good at organizing groups and making projects happen. So you don’t have to work on technology per se, so long as you work on problems demanding enough to stretch you.</p><p>我第一次写这段话时，把 “大量学习重要的东西” 写成了 “精通某项技术”。但这个说法虽然充分，却太狭隘了。布莱恩・切斯基和乔・格比亚的特别之处，不是他们精通技术，而是他们擅长设计，或许更重要的是，他们擅长组织团队、推动项目落地。所以你不一定非要做技术相关的事，只要你解决的问题足够有挑战性，能让你成长就行。</p><p>What kind of problems are those? That is very hard to answer in the general case. History is full of examples of young people who were working on important problems that no one else at the time thought were important, and in particular that their parents didn’t think were important. On the other hand, history is even fuller of examples of parents who thought their kids were wasting their time and who were right. So how do you know when you’re working on real stuff? [8]</p><p>哪些问题是这样的？总体来说很难回答。历史上满是这样的例子：年轻人在做一些当时没人觉得重要的事，尤其是他们的父母不觉得重要的事。但另一方面，历史上更多的例子是：父母觉得孩子在浪费时间，结果确实如此。那你怎么知道自己在做的是 “正经事”？[8]</p><p>I know how I know. Real problems are interesting, and I am self-indulgent in the sense that I always want to work on interesting things, even if no one else cares about them (in fact, especially if no one else cares about them), and find it very hard to make myself work on boring things, even if they’re supposed to be important.</p><p>我知道自己怎么判断。真正的问题是有趣的，而我有点 “任性”—— 我总想做有趣的事，哪怕没人在乎（事实上，尤其是没人在乎的时候），而让我做无聊的事，哪怕别人说很重要，我也很难做到。</p><p>My life is full of case after case where I worked on something just because it seemed interesting, and it turned out later to be useful in some worldly way. Y Combinator itself was something I only did because it seemed interesting. So I seem to have some sort of internal compass that helps me out. But I don’t know what other people have in their heads. Maybe if I think more about this I can come up with heuristics for recognizing genuinely interesting problems, but for the moment the best I can offer is the hopelessly question-begging advice that if you have a taste for genuinely interesting problems, indulging it energetically is the best way to prepare yourself for a startup. And indeed, probably also the best way to live. [9]</p><p>我的人生中有很多例子：我因为觉得某事有趣而去做，后来发现它在现实中很有用。YC 本身就是我因为觉得有趣才做的。所以我似乎有个内在的指南针帮我。但我不知道别人的脑子里有什么。或许再想想，我能总结出一些识别真正有趣的问题的方法，但目前我能给的最好建议，虽然有点循环论证，就是：如果你对真正有趣的问题有感觉，那么积极地追随这种感觉，就是为创业做准备的最好方式。事实上，这可能也是最好的生活方式。[9]</p><p>But although I can’t explain in the general case what counts as an interesting problem, I can tell you about a large subset of them. If you think of technology as something that’s spreading like a sort of fractal stain, every moving point on the edge represents an interesting problem. So one guaranteed way to turn your mind into the type that has good startup ideas is to get yourself to the leading edge of some technology — to cause yourself, as Paul Buchheit put it, to “live in the future.” When you reach that point, ideas that will seem to other people uncannily prescient will seem obvious to you. You may not realize they’re startup ideas, but you’ll know they’re something that ought to exist.</p><p>虽然我没法笼统地解释什么是有趣的问题，但我可以告诉你一大部分这类问题。如果你把技术看作一种像分形污渍一样蔓延的东西，那么边缘上每一个移动的点都代表一个有趣的问题。所以，让自己的大脑产生好的创业想法的一个可靠方法，是让自己站在某项技术的前沿 —— 用保罗・布赫海特的话说，就是 “活在未来”。当你达到那个境界，那些在别人看来不可思议的前瞻性想法，对你来说会很明显。你可能没意识到它们是创业想法，但你会知道它们应该存在。</p><p>For example, back at Harvard in the mid 90s a fellow grad student of my friends Robert and Trevor wrote his own voice over IP software. He didn’t mean it to be a startup, and he never tried to turn it into one. He just wanted to talk to his girlfriend in Taiwan without paying for long distance calls, and since he was an expert on networks it seemed obvious to him that the way to do it was turn the sound into packets and ship it over the Internet. He never did any more with his software than talk to his girlfriend, but this is exactly the way the best startups get started.</p><p>比如，90 年代中期，我在哈佛的朋友罗伯特和特雷弗有个同学，自己写了 IP 语音软件。他没打算用它创业，也从没尝试把它变成公司。他只是想和在台湾的女朋友通话，又不想付长途话费，而作为网络专家，对他来说，把声音转换成数据包通过互联网发送，是很自然的做法。他的软件只用来和女朋友通话，没做其他事，但这正是最好的创业公司开始的方式。</p><p>So strangely enough the optimal thing to do in college if you want to be a successful startup founder is not some sort of new, vocational version of college focused on “entrepreneurship.” It’s the classic version of college as education for its own sake. If you want to start a startup after college, what you should do in college is learn powerful things. And if you have genuine intellectual curiosity, that’s what you’ll naturally tend to do if you just follow your own inclinations. [10]</p><p>所以奇怪的是，如果你想成为成功的创业者，大学时最该做的，不是那种专注于 “创业” 的新型职业教育，而是经典的、为教育而教育的大学模式。如果你想毕业后创业，大学时该做的是学习有力量的知识。如果你有真正的求知欲，追随自己的兴趣，自然就会这么做。[10]</p><p>The component of entrepreneurship that really matters is domain expertise. The way to become Larry Page was to become an expert on search. And the way to become an expert on search was to be driven by genuine curiosity, not some ulterior motive.</p><p>创业中真正重要的是领域专长。成为拉里・佩奇的方法，是成为搜索领域的专家；而成为搜索领域专家的方法，是被真正的好奇心驱动，而非别有用心。</p><p>At its best, starting a startup is merely an ulterior motive for curiosity. And you’ll do it best if you introduce the ulterior motive toward the end of the process.</p><p>最好的情况是，创业只是好奇心的 “副产品”。而如果你把这个 “副产品” 的念头放在过程的末尾，会做得最好。</p><p>So here is the ultimate advice for young would-be startup founders, boiled down to two words: just learn.</p><p>所以，给年轻的潜在创业者的最终建议，浓缩成两个词：学习就好。</p><p>Notes</p><p>[1] Some founders listen more than others, and this tends to be a predictor of success. One of the things I remember about the Airbnbs during YC is how intently they listened.</p><p>[1] 有些创始人更愿意倾听，这往往是成功的预兆。我记得 Airbnb 的创始人在 YC 期间，听得非常认真。</p><p>[2] In fact, this is one of the reasons startups are possible. If big companies weren’t plagued by internal inefficiencies, they’d be proportionately more effective, leaving less room for startups.</p><p>[2] 事实上，这也是创业有可能存在的原因之一。如果大公司没有内部低效，它们的效率会成比例地更高，留给创业公司的空间就会更少。</p><p>[3] In a startup you have to spend a lot of time on schleps, but this sort of work is merely unglamorous, not bogus.</p><p>[3] 创业中你确实要花很多时间做琐碎的事，但这种工作只是不风光，并非无用。</p><p>[4] What should you do if your true calling is gaming the system? Management consulting.</p><p>[4] 如果你真正的志向是 “钻空子”，那就去做管理咨询吧。</p><p>[5] The company may not be incorporated, but if you start to get significant numbers of users, you’ve started it, whether you realize it yet or not.</p><p>[5] 公司可能还没注册，但如果你开始有大量用户，不管你有没有意识到，你已经创业了。</p><p>[6] It shouldn’t be that surprising that colleges can’t teach students how to be good startup founders, because they can’t teach them how to be good employees either.</p><p>The way universities “teach” students how to be employees is to hand off the task to companies via internship programs. But you couldn’t do the equivalent thing for startups, because by definition if the students did well they would never come back.</p><p>[6] 大学教不会学生如何成为优秀的创业者，这并不奇怪，因为它们也教不会学生如何成为优秀的员工。大学 “教” 学生如何成为员工的方式，是通过实习项目把这个任务交给公司。但对创业来说，没法这么做 —— 因为按理说，如果学生做得好，就再也不会回来了。</p><p>[7] Charles Darwin was 22 when he received an invitation to travel aboard the HMS Beagle as a naturalist. It was only because he was otherwise unoccupied, to a degree that alarmed his family, that he could accept it. And yet if he hadn’t we probably would not know his name.</p><p>[7] 查尔斯・达尔文 22 岁时，收到了作为博物学家乘坐 “贝格尔号” 航行的邀请。当时他无所事事，程度甚至让家人担心，所以才能接受邀请。而如果他没接受，我们可能根本不会知道他的名字。</p><p>[8] Parents can sometimes be especially conservative in this department. There are some whose definition of important problems includes only those on the critical path to med school.</p><p>[8] 父母在这方面有时尤其保守。有些父母认为，只有通往医学院的关键路径上的问题才是重要的。</p><p>[9] I did manage to think of a heuristic for detecting whether you have a taste for interesting ideas: whether you find known boring ideas intolerable. Could you endure studying literary theory, or working in middle management at a large company?</p><p>[9] 我确实想到了一个判断你是否对有趣的想法有感觉的方法：你是否无法忍受已知的无聊想法。你能忍受研究文学理论，或在大公司做中层管理吗？</p><p>[10] In fact, if your goal is to start a startup, you can stick even more closely to the ideal of a liberal education than past generations have. Back when students focused mainly on getting a job after college, they thought at least a little about how the courses they took might look to an employer. And perhaps even worse, they might shy away from taking a difficult class lest they get a low grade, which would harm their all-important GPA. Good news: users don’t care what your GPA was. And I’ve never heard of investors caring either. Y Combinator certainly never asks what classes you took in college or what grades you got in them.</p><p>[10] 事实上，如果你的目标是创业，你可以比前几代人更贴近通识教育的理想。过去，学生主要关注毕业后找工作，至少会有点在意选的课程在雇主看来怎么样。甚至更糟，他们可能会避开难的课程，怕成绩低影响至关重要的 GPA。好消息是：用户不在乎你的 GPA，我也从没听说投资者在乎。YC 肯定不会问你大学上了什么课，成绩如何。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超线性回报</title>
    <link href="/2025/08/04/superlinear-returns/"/>
    <url>/2025/08/04/superlinear-returns/</url>
    
    <content type="html"><![CDATA[<h2 id="Superlinear-Returns"><a href="#Superlinear-Returns" class="headerlink" title="Superlinear Returns"></a>Superlinear Returns</h2><p>原文链接: <a href="https://paulgraham.com/superlinear.html">https://paulgraham.com/superlinear.html</a></p><p>October 2023</p><p>One of the most important things I didn’t understand about the world when I was a child is the degree to which the returns for performance are superlinear.</p><p>小时候，我对世界最不理解的一点是：绩效回报的超线性程度。</p><p>Teachers and coaches implicitly told us the returns were linear. “You get out,” I heard a thousand times, “what you put in.” They meant well, but this is rarely true. If your product is only half as good as your competitor’s, you don’t get half as many customers. You get no customers, and you go out of business.</p><p>老师和教练潜移默化地告诉我们，回报是线性的。“一分耕耘，一分收获”，这句话我听了上百遍。他们的初衷是好的，但这在现实中很少成立。如果你的产品只比竞争对手差一半，你不会只得到一半客户 —— 你会失去所有客户，最终倒闭。</p><p>It’s obviously true that the returns for performance are superlinear in business. Some think this is a flaw of capitalism, and that if we changed the rules it would stop being true. But superlinear returns for performance are a feature of the world, not an artifact of rules we’ve invented. We see the same pattern in fame, power, military victories, knowledge, and even benefit to humanity. In all of these, the rich get richer. [1]</p><p>在商业领域，绩效回报的超线性特征显而易见。有人认为这是资本主义的缺陷，觉得只要改变规则就能消除这种现象。但超线性回报是世界的固有特征，而非人类发明的规则所导致的偶然结果。在名气、权力、军事胜利、知识乃至对人类的贡献中，我们都能看到同样的模式：强者愈强。[1]</p><p>You can’t understand the world without understanding the concept of superlinear returns. And if you’re ambitious you definitely should, because this will be the wave you surf on.</p><p>不理解超线性回报，就无法理解世界。如果你有野心，就更该明白这一点 —— 因为这将是你可以借力的浪潮。</p><p>It may seem as if there are a lot of different situations with superlinear returns, but as far as I can tell they reduce to two fundamental causes: exponential growth and thresholds.</p><p>看似有很多场景都存在超线性回报，但在我看来，它们归根结底源于两个根本原因：指数增长和阈值。</p><p>The most obvious case of superlinear returns is when you’re working on something that grows exponentially. For example, growing bacterial cultures. When they grow at all, they grow exponentially. But they’re tricky to grow. Which means the difference in outcome between someone who’s adept at it and someone who’s not is very great.</p><p>超线性回报最明显的例子，是当你在做一件呈指数增长的事。比如细菌培养：一旦开始增长，就是指数级的，但培养过程却很棘手。这意味着，擅长培养的人和不擅长的人，结果会有天壤之别。</p><p>Startups can also grow exponentially, and we see the same pattern there. Some manage to achieve high growth rates. Most don’t. And as a result you get qualitatively different outcomes: the companies with high growth rates tend to become immensely valuable, while the ones with lower growth rates may not even survive.</p><p>初创公司的增长也可能是指数级的，我们在其中看到了同样的模式：有些公司能实现高速增长，大多数则不能。结果就是，两类公司的结局有着质的区别：高速增长的公司往往会变得极具价值，而增长缓慢的公司可能连生存都成问题。</p><p>Y Combinator encourages founders to focus on growth rate rather than absolute numbers. It prevents them from being discouraged early on, when the absolute numbers are still low. It also helps them decide what to focus on: you can use growth rate as a compass to tell you how to evolve the company. But the main advantage is that by focusing on growth rate you tend to get something that grows exponentially.</p><p>Y Combinator（创业孵化器）鼓励创始人关注增长率而非绝对数值。这能防止他们在早期因绝对数值低而气馁，也能帮助他们确定重点 —— 增长率可以作为指南针，指引公司如何发展。但最主要的好处是，聚焦增长率更容易实现指数级增长。</p><p>YC doesn’t explicitly tell founders that with growth rate “you get out what you put in,” but it’s not far from the truth. And if growth rate were proportional to performance, then the reward for performance p over time t would be proportional to p^t.</p><p>Y Combinator 没有明确告诉创始人 “增长率与付出成正比”，但事实也相差不远。如果增长率与绩效成正比，那么绩效为 p、经过时间 t 后的回报，将与 pᵗ成正比。</p><p>Even after decades of thinking about this, I find that sentence startling.</p><p>即便思考了几十年，我仍觉得这句话令人震惊。</p><p>Whenever how well you do depends on how well you’ve done, you’ll get exponential growth. But neither our DNA nor our customs prepare us for it. No one finds exponential growth natural; every child is surprised, the first time they hear it, by the story of the man who asks the king for a single grain of rice the first day and double the amount each successive day.</p><p>只要 “做得有多好” 取决于 “已经做得有多好”，就会出现指数增长。但无论是我们的基因还是习俗，都没让我们做好应对指数增长的准备。没人觉得指数增长是 “自然” 的 —— 每个孩子第一次听到 “国王与米粒” 的故事（第一天要 1 粒米，之后每天翻倍）时，都会感到惊讶。</p><p>What we don’t understand naturally we develop customs to deal with, but we don’t have many customs about exponential growth either, because there have been so few instances of it in human history. In principle herding should have been one: the more animals you had, the more offspring they’d have. But in practice grazing land was the limiting factor, and there was no plan for growing that exponentially.</p><p>对于我们天生不理解的事物，我们会形成习俗来应对，但关于指数增长的习俗却很少，因为人类历史上指数增长的案例寥寥无几。理论上，放牧本可以是一个例子：拥有的牲畜越多，后代就越多。但实际上，牧场是限制因素，而牧场的增长没有指数级的计划。</p><p>Or more precisely, no generally applicable plan. There was a way to grow one’s territory exponentially: by conquest. The more territory you control, the more powerful your army becomes, and the easier it is to conquer new territory. This is why history is full of empires. But so few people created or ran empires that their experiences didn’t affect customs very much. The emperor was a remote and terrifying figure, not a source of lessons one could use in one’s own life.</p><p>或者更准确地说，没有普遍适用的计划。有一种方式可以让领土呈指数级扩张：征服。控制的领土越多，军队就越强大，征服新领土就越容易。这就是历史上帝国层出不穷的原因。但创建或管理帝国的人太少了，他们的经验几乎没影响到大众习俗。皇帝是遥远而可怕的存在，而非普通人可以借鉴的榜样。</p><p>The most common case of exponential growth in preindustrial times was probably scholarship. The more you know, the easier it is to learn new things. The result, then as now, was that some people were startlingly more knowledgeable than the rest about certain topics. But this didn’t affect customs much either. Although empires of ideas can overlap and there can thus be far more emperors, in preindustrial times this type of empire had little practical effect. [2]</p><p>前工业化时代最常见的指数增长案例可能是学术研究：知道的越多，学习新事物就越容易。结果就是，无论过去还是现在，总有人在某些领域的知识量远超他人。但这也没对习俗产生多少影响。尽管 “思想帝国” 可以重叠（因此能有更多 “皇帝”），但在前工业化时代，这类帝国几乎没有实际影响力。[2]</p><p>That has changed in the last few centuries. Now the emperors of ideas can design bombs that defeat the emperors of territory. But this phenomenon is still so new that we haven’t fully assimilated it. Few even of the participants realize they’re benefitting from exponential growth or ask what they can learn from other instances of it.</p><p>近几个世纪，情况变了。如今，思想领域的 “皇帝” 可以设计出击败领土 “皇帝” 的炸弹。但这种现象仍太新，我们尚未完全接纳它。即便是参与者，也很少有人意识到自己正受益于指数增长，或思考能从其他指数增长案例中借鉴什么。</p><p>The other source of superlinear returns is embodied in the expression “winner take all.” In a sports match the relationship between performance and return is a step function: the winning team gets one win whether they do much better or just slightly better. [3]</p><p>超线性回报的另一个来源体现在 “赢者通吃” 这一说法中。在体育比赛中，绩效与回报的关系是阶梯式的：获胜的队伍无论表现远超对手还是仅略胜一筹，都只能得到一场胜利。[3]</p><p>The source of the step function is not competition per se, however. It’s that there are thresholds in the outcome. You don’t need competition to get those. There can be thresholds in situations where you’re the only participant, like proving a theorem or hitting a target.</p><p>但阶梯函数的根源并非竞争本身，而是结果中存在阈值。即便没有竞争，阈值也可能存在 —— 比如证明一个定理或击中一个目标，这些只有唯一参与者的场景也有阈值。</p><p>It’s remarkable how often a situation with one source of superlinear returns also has the other. Crossing thresholds leads to exponential growth: the winning side in a battle usually suffers less damage, which makes them more likely to win in the future. And exponential growth helps you cross thresholds: in a market with network effects, a company that grows fast enough can shut out potential competitors.</p><p>值得注意的是，一个存在超线性回报的场景，往往同时包含两种来源。跨越阈值会带来指数增长：战场上的获胜方通常损失更小，这让他们未来更可能获胜；而指数增长也会帮助你跨越阈值：在有网络效应的市场中，增长足够快的公司可以排挤潜在竞争对手。</p><p>Fame is an interesting example of a phenomenon that combines both sources of superlinear returns. Fame grows exponentially because existing fans bring you new ones. But the fundamental reason it’s so concentrated is thresholds: there’s only so much room on the A-list in the average person’s head.</p><p>名气是一个同时包含两种来源的有趣例子。名气呈指数增长，因为现有粉丝会带来新粉丝；但名气高度集中的根本原因是阈值：普通人的脑海中，“一线明星” 的位置有限。</p><p>The most important case combining both sources of superlinear returns may be learning. Knowledge grows exponentially, but there are also thresholds in it. Learning to ride a bicycle, for example. Some of these thresholds are akin to machine tools: once you learn to read, you’re able to learn anything else much faster. But the most important thresholds of all are those representing new discoveries. Knowledge seems to be fractal in the sense that if you push hard at the boundary of one area of knowledge, you sometimes discover a whole new field. And if you do, you get first crack at all the new discoveries to be made in it. Newton did this, and so did Durer and Darwin.</p><p>学习可能是最能体现两种来源结合的重要案例。知识呈指数增长，同时也存在阈值 —— 比如学骑自行车。有些阈值类似 “机床”：一旦学会阅读，学习其他任何东西都会快得多。但最重要的阈值是那些代表新发现的节点。知识似乎是分形的：如果你在某个知识领域的边界深耕，有时会发现一整个新领域。而如果你做到了，你就有机会优先探索这个新领域中的所有发现。牛顿、丢勒、达尔文都是如此。</p><p>Are there general rules for finding situations with superlinear returns? The most obvious one is to seek work that compounds.</p><p>有没有找到超线性回报场景的通用规则？最明显的一条是：寻求有复利效应的工作。</p><p>There are two ways work can compound. It can compound directly, in the sense that doing well in one cycle causes you to do better in the next. That happens for example when you’re building infrastructure, or growing an audience or brand. Or work can compound by teaching you, since learning compounds. This second case is an interesting one because you may feel you’re doing badly as it’s happening. You may be failing to achieve your immediate goal. But if you’re learning a lot, then you’re getting exponential growth nonetheless.</p><p>工作的复利效应有两种形式。一种是直接复利：一个周期做得好，会让下一个周期做得更好。比如建设基础设施、增长受众或打造品牌时，就会出现这种情况。另一种是通过学习产生的复利 —— 因为学习本身就是复利的。第二种情况很有趣：过程中你可能觉得自己做得很糟（比如没能实现即时目标），但只要学到了很多，你其实已经在实现指数增长了。</p><p>This is one reason Silicon Valley is so tolerant of failure. People in Silicon Valley aren’t blindly tolerant of failure. They’ll only continue to bet on you if you’re learning from your failures. But if you are, you are in fact a good bet: maybe your company didn’t grow the way you wanted, but you yourself have, and that should yield results eventually.</p><p>这也是硅谷对失败如此宽容的原因之一。硅谷人并非盲目宽容失败：他们只会继续投资那些能从失败中学习的人。但如果你能做到，你就值得投资 —— 或许你的公司没按预期增长，但你自己成长了，最终总会有回报。</p><p>Indeed, the forms of exponential growth that don’t consist of learning are so often intermixed with it that we should probably treat this as the rule rather than the exception. Which yields another heuristic: always be learning. If you’re not learning, you’re probably not on a path that leads to superlinear returns.</p><p>事实上，不包含学习的指数增长，往往也与学习紧密交织，这更可能是常态而非例外。这带来了另一个启发：永远保持学习。如果不学习，你很可能不在通往超线性回报的道路上。</p><p>But don’t overoptimize what you’re learning. Don’t limit yourself to learning things that are already known to be valuable. You’re learning; you don’t know for sure yet what’s going to be valuable, and if you’re too strict you’ll lop off the outliers.</p><p>但不要过度优化学习内容。不要只学已知有价值的东西。你在学习时，未必知道什么最终会有价值；如果限制太严，你会错过那些潜在的 “outliers”（极端值）。</p><p>What about step functions? Are there also useful heuristics of the form “seek thresholds” or “seek competition?” Here the situation is trickier. The existence of a threshold doesn’t guarantee the game will be worth playing. If you play a round of Russian roulette, you’ll be in a situation with a threshold, certainly, but in the best case you’re no better off. “Seek competition” is similarly useless; what if the prize isn’t worth competing for? Sufficiently fast exponential growth guarantees both the shape and magnitude of the return curve — because something that grows fast enough will grow big even if it’s trivially small at first — but thresholds only guarantee the shape. [4]</p><p>那么阶梯函数呢？有没有 “寻求阈值” 或 “寻求竞争” 这样有用的启发？情况更复杂。存在阈值不代表这件事值得做。比如玩俄罗斯轮盘赌，确实有阈值，但最好的结果也只是没输 —— 这显然不值得。“寻求竞争” 同样没用：如果奖品不值一提呢？足够快的指数增长能同时保证回报曲线的形状和幅度（因为增长足够快的事物，即使起点微不足道，最终也会变得庞大），但阈值只能保证形状。[4]</p><p>A principle for taking advantage of thresholds has to include a test to ensure the game is worth playing. Here’s one that does: if you come across something that’s mediocre yet still popular, it could be a good idea to replace it. For example, if a company makes a product that people dislike yet still buy, then presumably they’d buy a better alternative if you made one. [5]</p><p>利用阈值的原则必须包含一个检验：确保这件事值得做。有一个可行的原则：如果你遇到一件平庸却流行的事物，或许可以尝试取代它。比如，如果一家公司的产品人们不喜欢却仍在购买，那么只要你做出更好的替代品，人们很可能会买你的。[5]</p><p>It would be great if there were a way to find promising intellectual thresholds. Is there a way to tell which questions have whole new fields beyond them? I doubt we could ever predict this with certainty, but the prize is so valuable that it would be useful to have predictors that were even a little better than random, and there’s hope of finding those. We can to some degree predict when a research problem isn’t likely to lead to new discoveries: when it seems legit but boring. Whereas the kind that do lead to new discoveries tend to seem very mystifying, but perhaps unimportant. (If they were mystifying and obviously important, they’d be famous open questions with lots of people already working on them.) So one heuristic here is to be driven by curiosity rather than careerism — to give free rein to your curiosity instead of working on what you’re supposed to.</p><p>如果能找到有前景的 “知识阈值” 就好了 —— 怎么判断哪些问题背后藏着全新领域？我怀疑我们永远无法确切预测，但这个 “奖品” 太有价值了，哪怕找到比随机猜测稍好的预测方法也是有用的，而这是有可能的。我们在某种程度上能预测哪些研究问题不太可能带来新发现：那些看似合理却枯燥的问题。而能带来新发现的问题，往往看起来很神秘，却可能被认为 “不重要”（如果既神秘又明显重要，它们会成为著名的开放问题，早就有很多人在研究了）。因此，这里的一个启发是：被好奇心驱动，而非功利心 —— 放纵你的好奇心，而不是只做 “应该做” 的事。</p><p>The prospect of superlinear returns for performance is an exciting one for the ambitious. And there’s good news in this department: this territory is expanding in both directions. There are more types of work in which you can get superlinear returns, and the returns themselves are growing.</p><p>对有野心的人来说，绩效的超线性回报前景令人兴奋。还有一个好消息：这个领域正在双向扩张 —— 能获得超线性回报的工作类型更多了，回报本身也在增长。</p><p>There are two reasons for this, though they’re so closely intertwined that they’re more like one and a half: progress in technology, and the decreasing importance of organizations.</p><p>原因有两个（但它们紧密交织，更像是一个半）：技术进步，以及组织的重要性下降。</p><p>Fifty years ago it used to be much more necessary to be part of an organization to work on ambitious projects. It was the only way to get the resources you needed, the only way to have colleagues, and the only way to get distribution. So in 1970 your prestige was in most cases the prestige of the organization you belonged to. And prestige was an accurate predictor, because if you weren’t part of an organization, you weren’t likely to achieve much. There were a handful of exceptions, most notably artists and writers, who worked alone using inexpensive tools and had their own brands. But even they were at the mercy of organizations for reaching audiences. [6]</p><p>50 年前，要从事有野心的项目，往往必须加入某个组织 —— 这是获得资源、同事和渠道的唯一方式。因此在 1970 年，一个人的声望在大多数情况下等同于所属组织的声望。而声望是准确的预测指标，因为如果不属于任何组织，你几乎不可能取得成就。只有少数例外，尤其是艺术家和作家 —— 他们用廉价工具独立工作，有自己的品牌。但即便是他们，也得依赖组织才能触达受众。[6]</p><p>A world dominated by organizations damped variation in the returns for performance. But this world has eroded significantly just in my lifetime. Now a lot more people can have the freedom that artists and writers had in the 20th century. There are lots of ambitious projects that don’t require much initial funding, and lots of new ways to learn, make money, find colleagues, and reach audiences.</p><p>一个由组织主导的世界，会抑制绩效回报的差异。但在我有生之年，这个世界已大幅瓦解。现在，更多人能拥有 20 世纪艺术家和作家那样的自由：很多有野心的项目不需要太多初始资金，还有很多新方式可以学习、赚钱、寻找同事和触达受众。</p><p>There’s still plenty of the old world left, but the rate of change has been dramatic by historical standards. Especially considering what’s at stake. It’s hard to imagine a more fundamental change than one in the returns for performance.</p><p>旧世界的痕迹仍在，但以历史标准来看，变化速度惊人 —— 尤其是考虑到其中的利害关系。很难想象有什么变化比 “绩效回报方式” 的变化更根本。</p><p>Without the damping effect of institutions, there will be more variation in outcomes. Which doesn’t imply everyone will be better off: people who do well will do even better, but those who do badly will do worse. That’s an important point to bear in mind. Exposing oneself to superlinear returns is not for everyone. Most people will be better off as part of the pool. So who should shoot for superlinear returns? Ambitious people of two types: those who know they’re so good that they’ll be net ahead in a world with higher variation, and those, particularly the young, who can afford to risk trying it to find out. [7]</p><p>没有了机构的抑制作用，结果的差异会更大。这并不意味着所有人都会过得更好：做得好的人会更好，做得差的人会更差。这一点很重要。并非所有人都适合追求超线性回报 —— 大多数人作为 “群体中的一员” 会更好。那么谁该追求超线性回报？两类有野心的人：一类是知道自己足够优秀，能在高差异世界中最终受益的人；另一类是（尤其是年轻人）能承担风险去尝试的人。[7]</p><p>The switch away from institutions won’t simply be an exodus of their current inhabitants. Many of the new winners will be people they’d never have let in. So the resulting democratization of opportunity will be both greater and more authentic than any tame intramural version the institutions themselves might have cooked up.</p><p>脱离机构的过程不会只是现有成员的 “大逃亡”。许多新赢家会是那些机构永远不会接纳的人。因此，机会的民主化将比机构内部温和的 “内部改革” 更彻底、更真实。</p><p>Not everyone is happy about this great unlocking of ambition. It threatens some vested interests and contradicts some ideologies. [8] But if you’re an ambitious individual it’s good news for you. How should you take advantage of it?</p><p>并非所有人都对这种 “野心的释放” 感到高兴。它威胁到一些既得利益，也与一些意识形态冲突。[8] 但如果你是有野心的个体，这就是好消息。该如何利用这个机会？</p><p>The most obvious way to take advantage of superlinear returns for performance is by doing exceptionally good work. At the far end of the curve, incremental effort is a bargain. All the more so because there’s less competition at the far end — and not just for the obvious reason that it’s hard to do something exceptionally well, but also because people find the prospect so intimidating that few even try. Which means it’s not just a bargain to do exceptional work, but a bargain even to try to.</p><p>利用绩效超线性回报最明显的方式，是做极其出色的工作。在曲线的末端，增量努力是 “划算的”。更重要的是，末端的竞争更少 —— 不仅因为把事情做到极致很难，还因为人们觉得这个前景太吓人，很少有人敢尝试。这意味着，不仅做卓越的工作是划算的，哪怕只是尝试去做，也是划算的。</p><p>There are many variables that affect how good your work is, and if you want to be an outlier you need to get nearly all of them right. For example, to do something exceptionally well, you have to be interested in it. Mere diligence is not enough. So in a world with superlinear returns, it’s even more valuable to know what you’re interested in, and to find ways to work on it. [9] It will also be important to choose work that suits your circumstances. For example, if there’s a kind of work that inherently requires a huge expenditure of time and energy, it will be increasingly valuable to do it when you’re young and don’t yet have children.</p><p>影响工作质量的变量有很多，如果你想成为 “outliers”，几乎要把所有变量都做好。比如，要把一件事做到极致，你必须对它有兴趣 —— 光靠勤奋不够。因此，在一个超线性回报的世界里，知道自己对什么感兴趣、并找到为之工作的方式，变得更有价值。[9] 选择适合自身处境的工作也很重要。比如，如果一种工作本身需要投入大量时间和精力，那么在年轻、还没有孩子时去做，价值会越来越高。</p><p>There’s a surprising amount of technique to doing great work. It’s not just a matter of trying hard. I’m going to take a shot giving a recipe in one paragraph.</p><p>做好工作有很多技巧，不只是 “努力”。我试着用一段话总结：</p><p>Choose work you have a natural aptitude for and a deep interest in. Develop a habit of working on your own projects; it doesn’t matter what they are so long as you find them excitingly ambitious. Work as hard as you can without burning out, and this will eventually bring you to one of the frontiers of knowledge. These look smooth from a distance, but up close they’re full of gaps. Notice and explore such gaps, and if you’re lucky one will expand into a whole new field. Take as much risk as you can afford; if you’re not failing occasionally you’re probably being too conservative. Seek out the best colleagues. Develop good taste and learn from the best examples. Be honest, especially with yourself. Exercise and eat and sleep well and avoid the more dangerous drugs. When in doubt, follow your curiosity. It never lies, and it knows more than you do about what’s worth paying attention to. [10]</p><p>选择你有天赋且深感兴趣的工作。养成做自己项目的习惯 —— 项目是什么不重要，只要你觉得它有令人兴奋的野心。在不 burnout（ burnout：过度劳累）的前提下全力以赴，这最终会带你到达知识的某个前沿。远处看，前沿是平滑的；近处看，满是缺口。留意并探索这些缺口，运气好的话，某个缺口会扩展成一整个新领域。承担你能承受的风险 —— 如果从未失败，你可能太保守了。寻找最优秀的同事。培养好品味，向最好的例子学习。诚实（尤其是对自己）。锻炼、健康饮食、睡好，远离危险药物。有疑问时，跟随好奇心 —— 它从不说谎，比你更知道什么值得关注。[10]</p><p>And there is of course one other thing you need: to be lucky. Luck is always a factor, but it’s even more of a factor when you’re working on your own rather than as part of an organization. And though there are some valid aphorisms about luck being where preparedness meets opportunity and so on, there’s also a component of true chance that you can’t do anything about. The solution is to take multiple shots. Which is another reason to start taking risks early.</p><p>当然，你还需要一样东西：运气。运气永远是因素，但当你独立工作而非加入组织时，运气的影响更大。尽管有 “运气是准备遇上机会” 这样的格言，但确实存在你无法控制的纯粹偶然。解决办法是多尝试 —— 这也是早点开始冒险的另一个原因。</p><p>The best example of a field with superlinear returns is probably science. It has exponential growth, in the form of learning, combined with thresholds at the extreme edge of performance — literally at the limits of knowledge.</p><p>最能体现超线性回报的领域可能是科学。它既有学习带来的指数增长，又在绩效的极端边缘（即知识的极限）存在阈值。</p><p>The result has been a level of inequality in scientific discovery that makes the wealth inequality of even the most stratified societies seem mild by comparison. Newton’s discoveries were arguably greater than all his contemporaries’ combined. [11]</p><p>结果就是，科学发现的不平等程度，让即便是最分层社会的财富不平等都相形见绌。牛顿的发现，可以说超过了同时代所有人的总和。[11]</p><p>This point may seem obvious, but it might be just as well to spell it out. Superlinear returns imply inequality. The steeper the return curve, the greater the variation in outcomes.</p><p>这一点看似明显，但不妨说清楚：超线性回报意味着不平等。回报曲线越陡峭，结果的差异就越大。</p><p>In fact, the correlation between superlinear returns and inequality is so strong that it yields another heuristic for finding work of this type: look for fields where a few big winners outperform everyone else. A kind of work where everyone does about the same is unlikely to be one with superlinear returns.</p><p>事实上，超线性回报与不平等的相关性极强，这带来了另一个寻找这类工作的启发：看那些 “少数大赢家远超其他人” 的领域。如果一个领域里所有人的表现都差不多，那它不太可能有超线性回报。</p><p>What are fields where a few big winners outperform everyone else? Here are some obvious ones: sports, politics, art, music, acting, directing, writing, math, science, starting companies, and investing. In sports the phenomenon is due to externally imposed thresholds; you only need to be a few percent faster to win every race. In politics, power grows much as it did in the days of emperors. And in some of the other fields (including politics) success is driven largely by fame, which has its own source of superlinear growth. But when we exclude sports and politics and the effects of fame, a remarkable pattern emerges: the remaining list is exactly the same as the list of fields where you have to be independent-minded to succeed — where your ideas have to be not just correct, but novel as well. [12]</p><p>哪些领域是 “少数大赢家远超其他人” 的？ obvious 的有：体育、政治、艺术、音乐、表演、导演、写作、数学、科学、创业和投资。体育中的这种现象源于外部设定的阈值 —— 你只需要快百分之几，就能赢得所有比赛。政治中的权力增长，和古代帝国时代类似。而在其他一些领域（包括政治），成功很大程度上由名气驱动，而名气本身就有超线性增长的来源。但如果排除体育、政治和名气的影响，会出现一个明显的模式：剩下的领域，恰好是那些需要 “独立思考” 才能成功的领域 —— 你的想法不仅要正确，还要新颖。[12]</p><p>This is obviously the case in science. You can’t publish papers saying things that other people have already said. But it’s just as true in investing, for example. It’s only useful to believe that a company will do well if most other investors don’t; if everyone else thinks the company will do well, then its stock price will already reflect that, and there’s no room to make money.</p><p>科学领域显然如此：你不能发表别人已经说过的话。投资领域也一样：只有当大多数投资者不看好一家公司时，你相信它会成功才有意义；如果所有人都看好，股价早已反映这一点，你就没机会赚钱了。</p><p>What else can we learn from these fields? In all of them you have to put in the initial effort. Superlinear returns seem small at first. At this rate, you find yourself thinking, I’ll never get anywhere. But because the reward curve rises so steeply at the far end, it’s worth taking extraordinary measures to get there.</p><p>从这些领域中，我们还能学到什么？在所有这些领域，你都必须付出初始努力。超线性回报在初期看起来微不足道。你可能会想：“这样下去，我永远也成不了事。” 但因为回报曲线在末端会急剧上升，付出非凡努力到达那里是值得的。</p><p>In the startup world, the name for this principle is “do things that don’t scale.” If you pay a ridiculous amount of attention to your tiny initial set of customers, ideally you’ll kick off exponential growth by word of mouth. But this same principle applies to anything that grows exponentially. Learning, for example. When you first start learning something, you feel lost. But it’s worth making the initial effort to get a toehold, because the more you learn, the easier it will get.</p><p>在创业圈，这个原则被称为 “做不规模化的事”。如果你对最初的少量客户投入极大关注，理想情况下，就能通过口碑启动指数增长。这个原则适用于所有指数增长的事物 —— 比如学习。刚开始学东西时，你会感到迷茫，但付出初始努力站稳脚跟是值得的，因为学得越多，就越容易。</p><p>There’s another more subtle lesson in the list of fields with superlinear returns: not to equate work with a job. For most of the 20th century the two were identical for nearly everyone, and as a result we’ve inherited a custom that equates productivity with having a job. Even now to most people the phrase “your work” means their job. But to a writer or artist or scientist it means whatever they’re currently studying or creating. For someone like that, their work is something they carry with them from job to job, if they have jobs at all. It may be done for an employer, but it’s part of their portfolio.</p><p>从有超线性回报的领域列表中，还能得到一个更微妙的启示：不要把 “工作” 等同于 “职业”。20 世纪的大多数人，工作和职业是一回事，因此我们继承了 “生产力等同于有一份职业” 的习俗。即便是现在，对大多数人来说，“你的工作” 指的是你的职业。但对作家、艺术家或科学家来说，“工作” 是他们当前研究或创作的任何东西。对这类人来说，工作是他们从一个职业带到另一个职业的东西（如果他们有职业的话）。工作可能是为雇主做的，但属于他们自己的 “作品集”。</p><p>It’s an intimidating prospect to enter a field where a few big winners outperform everyone else. Some people do this deliberately, but you don’t need to. If you have sufficient natural ability and you follow your curiosity sufficiently far, you’ll end up in one. Your curiosity won’t let you be interested in boring questions, and interesting questions tend to create fields with superlinear returns if they’re not already part of one.</p><p>进入一个 “少数大赢家远超其他人” 的领域，前景确实令人畏惧。有些人会刻意这么做，但你不必。如果你有足够的天赋，且跟随好奇心走得足够远，你自然会进入这样的领域。你的好奇心不会让你对无聊的问题感兴趣，而有趣的问题如果还不属于某个领域，往往会催生出有超线性回报的领域。</p><p>The territory of superlinear returns is by no means static. Indeed, the most extreme returns come from expanding it. So while both ambition and curiosity can get you into this territory, curiosity may be the more powerful of the two. Ambition tends to make you climb existing peaks, but if you stick close enough to an interesting enough question, it may grow into a mountain beneath you.</p><p>超线性回报的领域绝非静止不变。事实上，最极端的回报来自于拓展这个领域。因此，尽管野心和好奇心都能带你进入这个领域，但好奇心可能更强大。野心往往让你攀登已有的山峰，而如果你紧紧盯着一个足够有趣的问题，它可能会在你脚下长成一座山。</p><p>Notes</p><p>There’s a limit to how sharply you can distinguish between effort, performance, and return, because they’re not sharply distinguished in fact. What counts as return to one person might be performance to another. But though the borders of these concepts are blurry, they’re not meaningless. I’ve tried to write about them as precisely as I could without crossing into error.</p><p>“努力”“绩效”“回报” 之间的界限很难严格区分，因为它们在现实中本就模糊。对一个人来说是 “回报” 的东西，对另一个人可能是 “绩效”。但尽管这些概念的边界模糊，它们并非没有意义。我已尽量精确地描述它们，避免错误。</p><p>[1] Evolution itself is probably the most pervasive example of superlinear returns for performance. But this is hard for us to empathize with because we’re not the recipients; we’re the returns.</p><p>[1] 进化本身可能是绩效超线性回报最普遍的例子。但我们很难共情，因为我们不是接受者，而是回报本身。</p><p>[2] Knowledge did of course have a practical effect before the Industrial Revolution. The development of agriculture changed human life completely. But this kind of change was the result of broad, gradual improvements in technique, not the discoveries of a few exceptionally learned people.</p><p>[2] 当然，工业革命前，知识也有实际影响。农业的发展彻底改变了人类生活。但这种变化是技术广泛、渐进改进的结果，而非少数极有学识的人的发现。</p><p>[3] It’s not mathematically correct to describe a step function as superlinear, but a step function starting from zero works like a superlinear function when it describes the reward curve for effort by a rational actor. If it starts at zero then the part before the step is below any linearly increasing return, and the part after the step must be above the necessary return at that point or no one would bother.</p><p>[3] 从数学上讲，阶梯函数并非超线性，但当阶梯函数从 0 开始、描述理性行为者的努力回报曲线时，它的作用类似超线性函数。如果从 0 开始，阶梯前的部分低于任何线性增长的回报，而阶梯后的部分必须高于该点的必要回报，否则没人会去做。</p><p>[4] Seeking competition could be a good heuristic in the sense that some people find it motivating. It’s also somewhat of a guide to promising problems, because it’s a sign that other people find them promising. But it’s a very imperfect sign: often there’s a clamoring crowd chasing some problem, and they all end up being trumped by someone quietly working on another one.</p><p>[4] “寻求竞争” 在某种意义上可能是个好启发：有些人觉得竞争能激励自己。它也能在一定程度上指引有前景的问题，因为这表明其他人也觉得它们有前景。但这是个很不完美的信号：往往有一群人追捧某个问题，最终却被一个默默研究其他问题的人超越。</p><p>[5] Not always, though. You have to be careful with this rule. When something is popular despite being mediocre, there’s often a hidden reason why. Perhaps monopoly or regulation make it hard to compete. Perhaps customers have bad taste or have broken procedures for deciding what to buy. There are huge swathes of mediocre things that exist for such reasons.</p><p>[5] 但也不总是这样。这个规则需要谨慎使用。当一件事平庸却流行时，往往有隐藏原因：可能是垄断或监管让竞争变难，可能是客户品味差，或决策流程有问题。有大量平庸的事物因这些原因存在。</p><p>[6] In my twenties I wanted to be an artist and even went to art school to study painting. Mostly because I liked art, but a nontrivial part of my motivation came from the fact that artists seemed least at the mercy of organizations.<br>[6] 我二十多岁时想当艺术家，甚至去艺术学校学绘画。主要是因为我喜欢艺术，但也有个重要原因：艺术家似乎最不受组织支配。</p><p>[7] In principle everyone is getting superlinear returns. Learning compounds, and everyone learns in the course of their life. But in practice few push this kind of everyday learning to the point where the return curve gets really steep.</p><p>[7] 理论上，每个人都在获得超线性回报。学习是复利的，每个人一生中都在学习。但实际上，很少有人把这种日常学习推进到回报曲线真正陡峭的程度。</p><p>[8] It’s unclear exactly what advocates of “equity” mean by it. They seem to disagree among themselves. But whatever they mean is probably at odds with a world in which institutions have less power to control outcomes, and a handful of outliers do much better than everyone else.</p><p>[8] “公平” 的倡导者到底指什么，尚不清楚。他们内部似乎也有分歧。但无论指什么，都可能与 “机构对结果的控制力下降、少数异类远超其他人” 的世界相冲突。</p><p>It may seem like bad luck for this concept that it arose at just the moment when the world was shifting in the opposite direction, but I don’t think this was a coincidence. I think one reason it arose now is because its adherents feel threatened by rapidly increasing variation in performance.</p><p>这个概念恰好在世界向相反方向转变时出现，看似巧合，但我不这么认为。我觉得它现在出现的一个原因是，其支持者感受到了绩效差异快速扩大的威胁。</p><p>[9] Corollary: Parents who pressure their kids to work on something prestigious, like medicine, even though they have no interest in it, will be hosing them even more than they have in the past.</p><p>[9] 推论：父母强迫孩子从事有 prestige（ prestige：声望）的工作（比如医学），哪怕孩子毫无兴趣，这对孩子的伤害会比过去更大。</p><p>[10] The original version of this paragraph was the first draft of “How to Do Great Work.” As soon as I wrote it I realized it was a more important topic than superlinear returns, so I paused the present essay to expand this paragraph into its own. Practically nothing remains of the original version, because after I finished “How to Do Great Work” I rewrote it based on that.</p><p>[10] 这段话的初稿是《如何做好工作》的第一版。写完后我意识到，这个主题比超线性回报更重要，于是暂停本文，把这段话扩展成了独立文章。现在的版本几乎没保留初稿内容，因为写完《如何做好工作》后，我据此重写了这段话。</p><p>[11] Before the Industrial Revolution, people who got rich usually did it like emperors: capturing some resource made them more powerful and enabled them to capture more. Now it can be done like a scientist, by discovering or building something uniquely valuable. Most people who get rich use a mix of the old and the new ways, but in the most advanced economies the ratio has shifted dramatically toward discovery just in the last half century.</p><p>[11] 工业革命前，富人致富的方式通常和皇帝一样：夺取资源让他们更强大，进而夺取更多资源。现在，还可以像科学家一样：发现或创造独特的价值。大多数富人会混合新旧方式，但在最发达的经济体中，过去半个世纪里，“发现” 的占比已大幅上升。</p><p>[12] It’s not surprising that conventional-minded people would dislike inequality if independent-mindedness is one of the biggest drivers of it. But it’s not simply that they don’t want anyone to have what they can’t. The conventional-minded literally can’t imagine what it’s like to have novel ideas. So the whole phenomenon of great variation in performance seems unnatural to them, and when they encounter it they assume it must be due to cheating or to some malign external influence.</p><p>[12] 如果独立思考是不平等的一大驱动因素，那么循规蹈矩的人不喜欢不平等就不奇怪了。但这不只是因为他们不希望别人拥有自己没有的东西。循规蹈矩的人根本无法想象有新颖想法是什么感觉。因此，绩效的巨大差异在他们看来是不自然的，遇到时会认为一定是作弊或有恶意外部影响。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疯狂的新想法</title>
    <link href="/2025/08/04/crazy-new-ideas/"/>
    <url>/2025/08/04/crazy-new-ideas/</url>
    
    <content type="html"><![CDATA[<h2 id="Crazy-New-Ideas"><a href="#Crazy-New-Ideas" class="headerlink" title="Crazy New Ideas"></a>Crazy New Ideas</h2><p>原文链接: <a href="https://paulgraham.com/newideas.html">https://paulgraham.com/newideas.html</a></p><p>May 2021</p><p>There’s one kind of opinion I’d be very afraid to express publicly. If someone I knew to be both a domain expert and a reasonable person proposed an idea that sounded preposterous, I’d be very reluctant to say “That will never work.”</p><p>有一种观点，我非常害怕公开表达。但如果我认识的一个人，既是某领域的专家，又通情达理，却提出了一个听起来荒谬绝伦的想法，我绝不会轻易说 “这根本行不通”。</p><p>Anyone who has studied the history of ideas, and especially the history of science, knows that’s how big things start. Someone proposes an idea that sounds crazy, most people dismiss it, then it gradually takes over the world.</p><p>任何研究过思想史（尤其是科学史）的人都知道，伟大的事物往往始于此：有人提出一个听起来疯狂的想法，多数人嗤之鼻，最终它却逐渐改变了世界。</p><p>Most implausible-sounding ideas are in fact bad and could be safely dismissed. But not when they’re proposed by reasonable domain experts. If the person proposing the idea is reasonable, then they know how implausible it sounds. And yet they’re proposing it anyway. That suggests they know something you don’t. And if they have deep domain expertise, that’s probably the source of it. [1]</p><p>多数听起来难以置信的想法确实糟糕，完全可以放心否定。但如果提出者是通情达理的领域专家，情况就不同了。一个理智的人必然清楚自己的想法有多离谱，却仍坚持提出 —— 这说明他们知道一些你不知道的事。而如果他们拥有深厚的领域知识，那很可能就是答案的来源。[1]</p><p>Such ideas are not merely unsafe to dismiss, but disproportionately likely to be interesting. When the average person proposes an implausible-sounding idea, its implausibility is evidence of their incompetence. But when a reasonable domain expert does it, the situation is reversed. There’s something like an efficient market here: on average the ideas that seem craziest will, if correct, have the biggest effect. So if you can eliminate the theory that the person proposing an implausible-sounding idea is incompetent, its implausibility switches from evidence that it’s boring to evidence that it’s exciting. [2]</p><p>这类想法不仅不该被轻易否定，反而更可能暗藏价值。普通人提出离谱的想法，其 “离谱” 恰恰证明了他们的无能；但换成通情达理的领域专家，情况就完全反转了。这有点像 “有效市场”：平均来看，那些看似最疯狂的想法，一旦正确，影响往往最大。所以，如果你能排除 “提出离谱想法的人是无能的” 这一可能，那么 “离谱” 就会从 “无聊” 的证据，变成 “令人兴奋” 的信号。[2]</p><p>Such ideas are not guaranteed to work. But they don’t have to be. They just have to be sufficiently good bets — to have sufficiently high expected value. And I think on average they do. I think if you bet on the entire set of implausible-sounding ideas proposed by reasonable domain experts, you’d end up net ahead.</p><p>这类想法未必一定可行，但这没关系。它们只需是 “足够好的赌注”—— 拥有足够高的预期价值。而我认为，总体来看它们确实如此。如果你押注于所有由通情达理的领域专家提出的离谱想法，最终很可能会净赚。</p><p>The reason is that everyone is too conservative. The word “paradigm” is overused, but this is a case where it’s warranted. Everyone is too much in the grip of the current paradigm. Even the people who have the new ideas undervalue them initially. Which means that before they reach the stage of proposing them publicly, they’ve already subjected them to an excessively strict filter. [3]</p><p>原因在于，所有人都过于保守。“范式” 这个词被滥用了，但这里用它恰如其分：每个人都深陷当前范式的桎梏，即便提出新想法的人，最初也会低估自己的想法。这意味着，在他们公开提出这些想法之前，已经用过于严苛的标准过滤过了。[3]</p><p>The wise response to such an idea is not to make statements, but to ask questions, because there’s a real mystery here. Why has this smart and reasonable person proposed an idea that seems so wrong? Are they mistaken, or are you? One of you has to be. If you’re the one who’s mistaken, that would be good to know, because it means there’s a hole in your model of the world. But even if they’re mistaken, it should be interesting to learn why. A trap that an expert falls into is one you have to worry about too.</p><p>面对这类想法，明智的反应不是下结论，而是提问 —— 因为这里存在一个真正的谜团：为什么这个聪明又理智的人会提出一个看似错误的想法？是他们错了，还是你错了？总有一方是错的。如果错的是你，了解这一点会很有价值，因为这意味着你的世界观存在漏洞；即便错的是他们，弄清楚原因也很有趣 —— 专家掉进去的陷阱，你也可能遇到。</p><p>This all seems pretty obvious. And yet there are clearly a lot of people who don’t share my fear of dismissing new ideas. Why do they do it? Why risk looking like a jerk now and a fool later, instead of just reserving judgement?</p><p>这一切似乎显而易见。但显然，很多人并不像我这样害怕否定新想法。他们为什么要这么做？为什么宁愿现在显得粗鲁、日后显得愚蠢，也不愿暂时保留判断？</p><p>One reason they do it is envy. If you propose a radical new idea and it succeeds, your reputation (and perhaps also your wealth) will increase proportionally. Some people would be envious if that happened, and this potential envy propagates back into a conviction that you must be wrong.</p><p>一个原因是嫉妒。如果你提出一个激进的新想法并成功了，你的声誉（或许还有财富）会随之飙升。有些人会因此嫉妒，这种潜在的嫉妒会转化为 “你肯定错了” 的执念。</p><p>Another reason people dismiss new ideas is that it’s an easy way to seem sophisticated. When a new idea first emerges, it usually seems pretty feeble. It’s a mere hatchling. Received wisdom is a full-grown eagle by comparison. So it’s easy to launch a devastating attack on a new idea, and anyone who does will seem clever to those who don’t understand this asymmetry.</p><p>另一个原因是，否定新想法是彰显 “老练” 的捷径。新想法刚出现时，往往显得脆弱不堪，就像刚破壳的雏鸟；而既有观念则如同展翅的雄鹰。所以，攻击新想法很容易显得 “有见地”—— 对不了解这种不对称的人来说，这么做的人看起来很聪明。</p><p>This phenomenon is exacerbated by the difference between how those working on new ideas and those attacking them are rewarded. The rewards for working on new ideas are weighted by the value of the outcome. So it’s worth working on something that only has a 10% chance of succeeding if it would make things more than 10x better. Whereas the rewards for attacking new ideas are roughly constant; such attacks seem roughly equally clever regardless of the target.</p><p>这种现象因 “研究新想法者” 与 “攻击新想法者” 的回报差异而加剧：研究新想法的回报与结果价值挂钩 —— 如果一件事成功后能带来 10 倍以上的改善，即便只有 10% 的成功率，也值得投入；而攻击新想法的回报几乎是固定的 —— 无论攻击的对象是什么，这种行为看起来 “聪明” 的程度都差不多。</p><p>People will also attack new ideas when they have a vested interest in the old ones. It’s not surprising, for example, that some of Darwin’s harshest critics were churchmen. People build whole careers on some ideas. When someone claims they’re false or obsolete, they feel threatened.</p><p>人们还会因为 “旧想法的既得利益” 而攻击新想法。比如，达尔文最严厉的批评者中有些是神职人员，这并不奇怪。有些人的整个职业生涯都建立在某些想法之上，当有人说这些想法是错的或过时的，他们会感到威胁。</p><p>The lowest form of dismissal is mere factionalism: to automatically dismiss any idea associated with the opposing faction. The lowest form of all is to dismiss an idea because of who proposed it.</p><p>最低级的否定是纯粹的派系主义：自动否定所有与对立派系相关的想法。而最最低级的，是因为提出者是谁而否定一个想法。</p><p>But the main thing that leads reasonable people to dismiss new ideas is the same thing that holds people back from proposing them: the sheer pervasiveness of the current paradigm. It doesn’t just affect the way we think; it is the Lego blocks we build thoughts out of. Popping out of the current paradigm is something only a few people can do. And even they usually have to suppress their intuitions at first, like a pilot flying through cloud who has to trust his instruments over his sense of balance. [4]</p><p>但让理智的人否定新想法的主要原因，与阻碍人们提出新想法的原因相同：当前范式的无处不在。它不仅影响我们的思考方式，更是我们构建思想的 “乐高积木”。能跳出当前范式的人寥寥无几，即便他们，最初也往往要压制直觉 —— 就像飞行员穿越云层时，必须相信仪器而非平衡感。[4]</p><p>Paradigms don’t just define our present thinking. They also vacuum up the trail of crumbs that led to them, making our standards for new ideas impossibly high. The current paradigm seems so perfect to us, its offspring, that we imagine it must have been accepted completely as soon as it was discovered — that whatever the church thought of the heliocentric model, astronomers must have been convinced as soon as Copernicus proposed it. Far, in fact, from it. Copernicus published the heliocentric model in 1532, but it wasn’t till the mid seventeenth century that the balance of scientific opinion shifted in its favor. [5]</p><p>范式不仅定义了我们当下的思考，还 “吸走” 了通往它们的轨迹，让我们对新想法的标准高得离谱。作为范式的 “后代”，我们觉得它完美无缺，甚至以为它一经提出就被完全接受 —— 比如，无论教会怎么看待日心说，天文学家在哥白尼提出时肯定立刻信服了。但事实远非如此：哥白尼 1532 年发表日心说，直到 17 世纪中叶，科学界的主流观点才转向支持它。[5]</p><p>Few understand how feeble new ideas look when they first appear. So if you want to have new ideas yourself, one of the most valuable things you can do is to learn what they look like when they’re born. Read about how new ideas happened, and try to get yourself into the heads of people at the time. How did things look to them, when the new idea was only half-finished, and even the person who had it was only half-convinced it was right?</p><p>很少有人知道新想法刚出现时有多脆弱。所以，如果你自己也想产生新想法，最有价值的事之一就是了解它们 “诞生时的样子”：去读新想法的发展史，试着代入当时的人的视角 —— 当新想法还未成熟，连提出者自己都只有一半把握时，他们眼中的世界是什么样的？</p><p>But you don’t have to stop at history. You can observe big new ideas being born all around you right now. Just look for a reasonable domain expert proposing something that sounds wrong.</p><p>但你不必只局限于历史。现在，你身边就有重大新想法正在诞生。只需留意：那些通情达理的领域专家，正在提出哪些听起来 “错误” 的东西。</p><p>If you’re nice, as well as wise, you won’t merely resist attacking such people, but encourage them. Having new ideas is a lonely business. Only those who’ve tried it know how lonely. These people need your help. And if you help them, you’ll probably learn something in the process.</p><p>如果你兼具明智与善良，不仅不会攻击这些人，还会鼓励他们。产生新想法是一件孤独的事，只有尝试过的人才懂这份孤独。这些人需要你的帮助，而帮助他们的过程中，你很可能也会有所收获。</p><p>Notes</p><p>[1] This domain expertise could be in another field. Indeed, such crossovers tend to be particularly promising.</p><p>[1] 这里的 “领域知识” 可能来自其他领域。事实上，这种跨领域的想法往往特别有潜力。</p><p>[2] I’m not claiming this principle extends much beyond math, engineering, and the hard sciences. In politics, for example, crazy-sounding ideas generally are as bad as they sound. Though arguably this is not an exception, because the people who propose them are not in fact domain experts; politicians are domain experts in political tactics, like how to get elected and how to get legislation passed, but not in the world that policy acts upon. Perhaps no one could be.</p><p>[2] 我并非说这一原则适用于数学、工程学和硬科学之外的领域。比如在政治中，听起来疯狂的想法通常确实很糟糕。但这或许不算例外，因为提出这些想法的人并非真正的领域专家：政客是 “政治策略”（如如何当选、如何推动立法）的专家，而非 “政策所作用的世界” 的专家。或许，没人能成为后者。</p><p>[3] This sense of “paradigm” was defined by Thomas Kuhn in his Structure of Scientific Revolutions, but I also recommend his Copernican Revolution, where you can see him at work developing the idea.</p><p>[3] “范式” 的这一含义由托马斯・库恩在《科学革命的结构》中定义，但我也推荐他的《哥白尼革命》，在这本书中可以看到他如何逐步发展这一概念。</p><p>[4] This is one reason people with a touch of Asperger’s may have an advantage in discovering new ideas. They’re always flying on instruments.</p><p>[4] 这也是为什么有轻微阿斯伯格综合征的人可能在发现新想法上更有优势 —— 他们总是 “依靠仪器飞行”。</p><p>[5] Hall, Rupert. From Galileo to Newton. Collins, 1963. This book is particularly good at getting into contemporaries’ heads.</p><p>[5] 霍尔・鲁珀特，《从伽利略到牛顿》，柯林斯出版社，1963 年。这本书特别擅长代入同时代人的视角。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现代的富豪是怎样炼成的</title>
    <link href="/2025/08/03/how-people-get-rich-now/"/>
    <url>/2025/08/03/how-people-get-rich-now/</url>
    
    <content type="html"><![CDATA[<h2 id="How-People-Get-Rich-Now"><a href="#How-People-Get-Rich-Now" class="headerlink" title="How People Get Rich Now"></a>How People Get Rich Now</h2><p>原文链接: <a href="https://paulgraham.com/richnow.html">https://paulgraham.com/richnow.html</a></p><p>April 2021</p><p>Every year since 1982, Forbes magazine has published a list of the richest Americans. If we compare the 100 richest people in 1982 to the 100 richest in 2020, we notice some big differences.</p><p>自 1982 年起，《福布斯》杂志每年都会发布美国富豪榜。对比 1982 年和 2020 年榜单中最富有的 100 人，我们会发现一些显著差异。</p><p>In 1982 the most common source of wealth was inheritance. Of the 100 richest people, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By 2020 the number of heirs had been cut in half, accounting for only 27 of the biggest 100 fortunes.</p><p>1982 年，最常见的财富来源是继承。在最富有的 100 人中，60 人的财富来自先辈遗产，仅杜邦家族的继承人就有 10 位。而到 2020 年，继承财富的人数减少了一半，仅占前 100 名富豪的 27%。</p><p>Why would the percentage of heirs decrease? Not because inheritance taxes increased. In fact, they decreased significantly during this period. The reason the percentage of heirs has decreased is not that fewer people are inheriting great fortunes, but that more people are making them.</p><p>为什么继承财富的比例会下降？并非因为遗产税提高 —— 事实上，这段时间遗产税大幅降低。真正的原因不是继承巨额财富的人变少了，而是靠自己创造财富的人变多了。</p><p>How are people making these new fortunes? Roughly 3&#x2F;4 by starting companies and 1&#x2F;4 by investing. Of the 73 new fortunes in 2020, 56 derive from founders’ or early employees’ equity (52 founders, 2 early employees, and 2 wives of founders), and 17 from managing investment funds.</p><p>这些新富豪是如何发家的？约 3&#x2F;4 来自创办公司，1&#x2F;4 来自投资。2020 年的 73 位新富豪中，56 位来自创始人或早期员工的股权（52 位创始人、2 位早期员工、2 位创始人的妻子），17 位来自管理投资基金。</p><p>There were no fund managers among the 100 richest Americans in 1982. Hedge funds and private equity firms existed in 1982, but none of their founders were rich enough yet to make it into the top 100. Two things changed: fund managers discovered new ways to generate high returns, and more investors were willing to trust them with their money. [1]</p><p>1982 年的美国前 100 富豪中，没有基金经理。尽管 1982 年就有对冲基金和私募股权公司，但它们的创始人当时还不够富有，无法跻身前 100。后来有两件事改变了这一点：基金经理发现了创造高回报的新方法，且更多投资者愿意把钱交给他们管理。[1]</p><p>But the main source of new fortunes now is starting companies, and when you look at the data, you see big changes there too. People get richer from starting companies now than they did in 1982, because the companies do different things.</p><p>但如今新财富的主要来源是创办公司，数据显示这方面也发生了巨大变化。现在通过创办公司致富的人比 1982 年更富有，因为这些公司所从事的领域不同了。</p><p>In 1982, there were two dominant sources of new wealth: oil and real estate. Of the 40 new fortunes in 1982, at least 24 were due primarily to oil or real estate. Now only a small number are: of the 73 new fortunes in 2020, 4 were due to real estate and only 2 to oil.</p><p>1982 年，新富豪有两个主要来源：石油和房地产。在当年的 40 位新富豪中，至少 24 位主要来自石油或房地产。而现在，这类富豪占比很小：2020 年的 73 位新富豪中，仅 4 笔来自房地产，2 笔来自石油。</p><p>By 2020 the biggest source of new wealth was what are sometimes called “tech” companies. Of the 73 new fortunes, about 30 derive from such companies. These are particularly common among the richest of the rich: 8 of the top 10 fortunes in 2020 were new fortunes of this type.</p><p>到 2020 年，新富豪的最大来源是所谓的 “科技” 公司。73 位新富豪中，约 30 位来自这类公司。它们在顶级富豪中尤为常见：2020 年前 10 大富豪中，有 8 位来自科技公司。</p><p>Arguably it’s slightly misleading to treat tech as a category. Isn’t Amazon really a retailer, and Tesla a car maker? Yes and no. Maybe in 50 years, when what we call tech is taken for granted, it won’t seem right to put these two businesses in the same category. But at the moment at least, there is definitely something they share in common that distinguishes them. What retailer starts AWS? What car maker is run by someone who also has a rocket company?</p><p>将 “科技” 视为一个类别可能略有误导。亚马逊难道不是零售商吗？特斯拉不是汽车制造商吗？可以说是，也可以说不是。或许 50 年后，当我们如今所说的 “科技” 成为常态，把这两家公司归为同一类别就显得不合适了。但至少目前，它们确实有一些共同的、能与其他公司区分开的特质。哪家零售商会推出 AWS（亚马逊云服务）？哪家汽车制造商的老板同时还经营着一家火箭公司？</p><p>The tech companies behind the top 100 fortunes also form a well-differentiated group in the sense that they’re all companies that venture capitalists would readily invest in, and the others mostly not. And there’s a reason why: these are mostly companies that win by having better technology, rather than just a CEO who’s really driven and good at making deals.</p><p>支撑前 100 富豪财富的科技公司，其实是一个界限清晰的群体 —— 风险投资家愿意投资它们，而其他公司大多不被青睐。原因在于：这些公司的成功主要靠更先进的技术，而非仅仅靠一位干劲十足、擅长做交易的 CEO。</p><p>To that extent, the rise of the tech companies represents a qualitative change. The oil and real estate magnates of the 1982 Forbes 400 didn’t win by making better technology. They won by being really driven and good at making deals. [2] And indeed, that way of getting rich is so old that it predates the Industrial Revolution. The courtiers who got rich in the (nominal) service of European royal houses in the 16th and 17th centuries were also, as a rule, really driven and good at making deals.</p><p>从这个角度看，科技公司的崛起代表着一种质的变化。1982 年《福布斯》400 富豪榜中的石油和房地产大亨，并非靠更先进的技术成功，而是靠干劲和交易能力。[2] 事实上，这种致富方式非常古老，甚至早于工业革命。16、17 世纪为欧洲王室（名义上）服务而致富的廷臣，通常也是靠干劲和交易能力。</p><p>People who don’t look any deeper than the Gini coefficient look back on the world of 1982 as the good old days, because those who got rich then didn’t get as rich. But if you dig into how they got rich, the old days don’t look so good. In 1982, 84% of the richest 100 people got rich by inheritance, extracting natural resources, or doing real estate deals. Is that really better than a world in which the richest people get rich by starting tech companies?</p><p>那些只看基尼系数的人，会把 1982 年的世界视为 “美好旧时光”，因为当时的富豪没那么富。但如果深究他们的致富方式，“旧时光” 就没那么美好了。1982 年，前 100 富豪中 84% 的人靠继承、开采自然资源或房地产交易致富。这真的比现在富豪靠创办科技公司致富更好吗？</p><p>Why are people starting so many more new companies than they used to, and why are they getting so rich from it? The answer to the first question, curiously enough, is that it’s misphrased. We shouldn’t be asking why people are starting companies, but why they’re starting companies again. [3]</p><p>为什么现在创办新公司的人比过去多得多，且能通过创办公司变得如此富有？说来奇怪，第一个问题的表述有误。我们不该问 “为什么人们开始创办公司”，而该问 “为什么人们又开始创办公司了”。[3]</p><p>In 1892, the New York Herald Tribune compiled a list of all the millionaires in America. They found 4047 of them. How many had inherited their wealth then? Only about 20%, which is less than the proportion of heirs today. And when you investigate the sources of the new fortunes, 1892 looks even more like today. Hugh Rockoff found that “many of the richest … gained their initial edge from the new technology of mass production.” [4]</p><p>1892 年，《纽约先驱论坛报》编制了一份美国百万富翁名单，共 4047 人。当时靠继承财富的有多少？仅约 20%，比现在继承财富的比例还低。若深究当时新财富的来源，1892 年与现在更为相似。休・罗克夫发现：“许多最富有的人…… 最初的优势来自大规模生产这一新技术。”[4]</p><p>So it’s not 2020 that’s the anomaly here, but 1982. The real question is why so few people had gotten rich from starting companies in 1982. And the answer is that even as the Herald Tribune’s list was being compiled, a wave of consolidation was sweeping through the American economy. In the late 19th and early 20th centuries, financiers like J. P. Morgan combined thousands of smaller companies into a few hundred giant ones with commanding economies of scale. By the end of World War II, as Michael Lind writes, “the major sectors of the economy were either organized as government-backed cartels or dominated by a few oligopolistic corporations.” [5]</p><p>因此，反常的不是 2020 年，而是 1982 年。真正的问题是：为什么 1982 年靠创办公司致富的人如此之少？答案是，就在《纽约先驱论坛报》编制名单时，一波整合浪潮正席卷美国经济。19 世纪末 20 世纪初，像 J.P. 摩根这样的金融家将数千家小公司合并成几百家巨头企业，这些巨头凭借规模经济占据主导地位。正如迈克尔・林德所写，到二战结束时，“经济的主要领域要么被政府支持的卡特尔组织控制，要么被少数寡头企业主导”。[5]</p><p>In 1960, most of the people who start startups today would have gone to work for one of them. You could get rich from starting your own company in 1890 and in 2020, but in 1960 it was not really a viable option. You couldn’t break through the oligopolies to get at the markets. So the prestigious route in 1960 was not to start your own company, but to work your way up the corporate ladder at an existing one. [6]</p><p>1960 年，如今大多数创办初创公司的人，当时都会去这些巨头企业工作。1890 年和 2020 年，人们可以靠创办自己的公司致富，但 1960 年这并非可行选项 —— 你无法突破寡头垄断进入市场。因此，1960 年的主流路径不是创办公司，而是在现有企业中顺着职业阶梯往上爬。[6]</p><p>Making everyone a corporate employee decreased economic inequality (and every other kind of variation), but if your model of normal is the mid 20th century, you have a very misleading model in that respect. J. P. Morgan’s economy turned out to be just a phase, and starting in the 1970s, it began to break up.</p><p>让所有人都成为企业员工，降低了经济不平等（以及其他各种差异），但如果把 20 世纪中期视为 “常态”，那这种认知就大错特错了。J.P. 摩根主导的经济终究只是一个阶段，从 20 世纪 70 年代开始，它开始瓦解。</p><p>Why did it break up? Partly senescence. The big companies that seemed models of scale and efficiency in 1930 had by 1970 become slack and bloated. By 1970 the rigid structure of the economy was full of cosy nests that various groups had built to insulate themselves from market forces. During the Carter administration the federal government realized something was amiss and began, in a process they called “deregulation,” to roll back the policies that propped up the oligopolies.</p><p>为什么会瓦解？部分原因是衰老。1930 年看似高效的巨头企业，到 1970 年已变得松弛臃肿。1970 年，僵化的经济结构中充斥着各种 “安乐窝”，不同群体借此隔绝市场力量。卡特政府时期，联邦政府意识到问题，开始通过 “ deregulation”（放松管制）撤销支撑寡头垄断的政策。</p><p>But it wasn’t just decay from within that broke up J. P. Morgan’s economy. There was also pressure from without, in the form of new technology, and particularly microelectronics. The best way to envision what happened is to imagine a pond with a crust of ice on top. Initially the only way from the bottom to the surface is around the edges. But as the ice crust weakens, you start to be able to punch right through the middle.</p><p>但瓦解 J.P. 摩根式经济的，不仅是内部衰败，还有外部压力 —— 以新技术（尤其是微电子技术）的形式。最形象的比喻是：想象一个池塘，表面结着一层冰。起初，从池底到水面只能绕着边缘走。但随着冰层变薄，你开始能直接从中间破冰而出。</p><p>The edges of the pond were pure tech: companies that actually described themselves as being in the electronics or software business. When you used the word “startup” in 1990, that was what you meant. But now startups are punching right through the middle of the ice crust and displacing incumbents like retailers and TV networks and car companies. [7]</p><p>池塘的边缘是纯科技领域：那些自称从事电子或软件业务的公司。1990 年提到 “初创公司” 时，指的就是这类企业。但现在，初创公司正直接从冰层中央破冰，取代零售商、电视网络、汽车制造商等老牌企业。[7]</p><p>But though the breakup of J. P. Morgan’s economy created a new world in the technological sense, it was a reversion to the norm in the social sense. If you only look back as far as the mid 20th century, it seems like people getting rich by starting their own companies is a recent phenomenon. But if you look back further, you realize it’s actually the default. So what we should expect in the future is more of the same. Indeed, we should expect both the number and wealth of founders to grow, because every decade it gets easier to start a startup.</p><p>尽管 J.P. 摩根式经济的瓦解在技术层面创造了新世界，但在社会层面，它其实是回归常态。若只回顾 20 世纪中期，会觉得靠创办公司致富是近年才有的现象；但看得更远就会发现，这其实是默认状态。因此，未来我们有望看到更多类似情况 —— 事实上，创始人的数量和财富都可能增长，因为每十年，创办初创公司都变得更容易。</p><p>Part of the reason it’s getting easier to start a startup is social. Society is (re)assimilating the concept. If you start one now, your parents won’t freak out the way they would have a generation ago, and knowledge about how to do it is much more widespread. But the main reason it’s easier to start a startup now is that it’s cheaper. Technology has driven down the cost of both building products and acquiring customers.</p><p>创办初创公司变得更容易，部分原因与社会有关。社会正在（重新）接纳这一概念：现在创办公司，父母不会像上一代那样大惊小怪，且关于如何创业的知识也更普及。但主要原因是成本降低：技术压低了产品研发和客户获取的成本。</p><p>The decreasing cost of starting a startup has in turn changed the balance of power between founders and investors. Back when starting a startup meant building a factory, you needed investors’ permission to do it at all. But now investors need founders more than founders need investors, and that, combined with the increasing amount of venture capital available, has driven up valuations. [8]</p><p>创业成本降低，反过来改变了创始人与投资者的权力平衡。过去，创办公司意味着建工厂，你完全需要投资者的许可才能启动；但现在，投资者更需要创始人，再加上风险资本越来越多，推高了公司估值。[8]</p><p>So the decreasing cost of starting a startup increases the number of rich people in two ways: it means that more people start them, and that those who do can raise money on better terms.</p><p>因此，创业成本降低从两方面增加了富人数量：更多人会去创业，且创业者能以更有利的条件融资。</p><p>But there’s also a third factor at work: the companies themselves are more valuable, because newly founded companies grow faster than they used to. Technology hasn’t just made it cheaper to build and distribute things, but faster too.</p><p>还有第三个因素：公司本身更有价值，因为新创办的公司比过去增长得更快。技术不仅让研发和分销成本更低，还让速度更快。</p><p>This trend has been running for a long time. IBM, founded in 1896, took 45 years to reach a billion 2020 dollars in revenue. Hewlett-Packard, founded in 1939, took 25 years. Microsoft, founded in 1975, took 13 years. Now the norm for fast-growing companies is 7 or 8 years. [9]</p><p>这一趋势已持续很久。1896 年成立的 IBM，花了 45 年才实现按 2020 年美元计算的 10 亿美元营收；1939 年成立的惠普，用了 25 年；1975 年成立的微软，用了 13 年。现在，快速增长的公司通常只需 7 到 8 年。[9]</p><p>Fast growth has a double effect on the value of founders’ stock. The value of a company is a function of its revenue and its growth rate. So if a company grows faster, you not only get to a billion dollars in revenue sooner, but the company is more valuable when it reaches that point than it would be if it were growing slower.</p><p>快速增长对创始人股票的价值有双重影响：公司价值取决于营收和增长率。因此，公司增长越快，不仅能更快达到 10 亿美元营收，且达到这一规模时的价值也比增长慢的公司更高。</p><p>That’s why founders sometimes get so rich so young now. The low initial cost of starting a startup means founders can start young, and the fast growth of companies today means that if they succeed they could be surprisingly rich just a few years later.</p><p>这就是为什么现在的创始人有时能在年轻时就变得极其富有。创业初期成本低，意味着创始人可以早起步；而如今公司增长快，意味着一旦成功，几年后他们就可能意外暴富。</p><p>It’s easier now to start and grow a company than it has ever been. That means more people start them, that those who do get better terms from investors, and that the resulting companies become more valuable. Once you understand how these mechanisms work, and that startups were suppressed for most of the 20th century, you don’t have to resort to some vague right turn the country took under Reagan to explain why America’s Gini coefficient is increasing. Of course the Gini coefficient is increasing. With more people starting more valuable companies, how could it not be?</p><p>现在创办和发展公司，比以往任何时候都更容易。这意味着更多人会去创业，创业者能从投资者那里获得更有利的条件，最终诞生的公司也更有价值。一旦理解了这些机制，且知道初创公司在 20 世纪大部分时间里被压制，就不必用 “里根执政时期国家转向保守” 这种模糊说法来解释美国基尼系数的上升了。基尼系数上升是必然的 —— 更多人创办了更有价值的公司，怎么可能不上升呢？</p><p>Notes</p><p>[1] Investment firms grew rapidly after a regulatory change by the Labor Department in 1978 allowed pension funds to invest in them, but the effects of this growth were not yet visible in the top 100 fortunes in 1982.</p><p>[1] 1978 年，美国劳工部出台监管改革，允许养老基金投资于投资公司，此后投资公司迅速发展。但到 1982 年，这种发展的影响尚未体现在前 100 名富豪的财富中。</p><p>[2] George Mitchell deserves mention as an exception. Though really driven and good at making deals, he was also the first to figure out how to use fracking to get natural gas out of shale.</p><p>[2] 乔治・米切尔是个值得一提的例外。尽管他干劲十足且擅长交易，但他也是首位想出如何用水力压裂法从页岩中开采天然气的人。</p><p>[3] When I say people are starting more companies, I mean the type of company meant to grow very big. There has actually been a decrease in the last couple decades in the overall number of new companies. But the vast majority of companies are small retail and service businesses. So what the statistics about the decreasing number of new businesses mean is that people are starting fewer shoe stores and barber shops.</p><p>[3] 我说 “人们创办的公司更多了”，指的是那些旨在发展成大型企业的公司。事实上，过去几十年，新公司的总数有所减少，但绝大多数公司都是小型零售和服务企业。因此，“新企业数量减少” 的统计数据，实际意味着人们创办的鞋店和理发店等小型生意变少了。</p><p>People sometimes get confused when they see a graph labelled “startups” that’s going down, because there are two senses of the word “startup”: (1) the founding of a company, and (2) a particular type of company designed to grow big fast. The statistics mean startup in sense (1), not sense (2).</p><p>人们看到标有 “初创公司”（startups）且呈下降趋势的图表时，有时会感到困惑，因为 “startup” 一词有两种含义：（1）泛指公司的创立；（2）特指旨在快速发展成大型企业的一类公司。上述统计数据中的 “startup” 指的是第一种含义，而非第二种。</p><p>[4] Rockoff, Hugh. “Great Fortunes of the Gilded Age.” NBER Working Paper 14555, 2008.</p><p>[4] 罗克夫，休。《镀金时代的巨额财富》。NBER 工作论文 14555，2008 年。</p><p>[5] Lind, Michael. Land of Promise. HarperCollins, 2012.</p><p>[5] 林德，迈克尔。《希望之地》。哈珀柯林斯出版社，2012 年。</p><p>It’s also likely that the high tax rates in the mid 20th century deterred people from starting their own companies. Starting one’s own company is risky, and when risk isn’t rewarded, people opt for safety instead.</p><p>20 世纪中期的高税率也可能抑制了人们创办自己的公司。创办公司具有风险，而当风险得不到回报时，人们会选择更安全的选项。</p><p>But it wasn’t simply cause and effect. The oligopolies and high tax rates of the mid 20th century were all of a piece. Lower taxes are not just a cause of entrepreneurship, but an effect as well: the people getting rich in the mid 20th century from real estate and oil exploration lobbied for and got huge tax loopholes that made their effective tax rate much lower, and presumably if it had been more common to grow big companies by building new technology, the people doing that would have lobbied for their own loopholes as well.</p><p>但这并非简单的因果关系。20 世纪中期的寡头垄断与高税率是相辅相成的。较低的税率不仅是创业的原因，也是创业的结果：20 世纪中期靠房地产和石油勘探致富的人，通过游说获得了巨大的税收漏洞，使他们的实际税率低得多。想必，如果当时通过研发新技术发展大公司的情况更普遍，从事这类事业的人也会为自己争取税收漏洞。</p><p>[6] That’s why the people who did get rich in the mid 20th century so often got rich from oil exploration or real estate. Those were the two big areas of the economy that weren’t susceptible to consolidation.</p><p>[6] 这就是为什么 20 世纪中期真正致富的人，往往靠石油勘探或房地产 —— 这是经济中两个不易被整合的主要领域。</p><p>[7] The pure tech companies used to be called “high technology” startups. But now that startups can punch through the middle of the ice crust, we don’t need a separate name for the edges, and the term “high-tech” has a decidedly retro sound.</p><p>[7] 纯粹的科技公司过去被称为 “高科技”（high technology）初创公司。但如今，初创公司已能从 “冰层中央” 破冰而出，我们不再需要为 “边缘领域” 单独命名，“高科技” 一词也显然带有复古意味了。</p><p>[8] Higher valuations mean you either sell less stock to get a given amount of money, or get more money for a given amount of stock. The typical startup does some of each. Obviously you end up richer if you keep more stock, but you should also end up richer if you raise more money, because (a) it should make the company more successful, and (b) you should be able to last longer before the next round, or not even need one. Notice all those shoulds though. In practice a lot of money slips through them.</p><p>[8] 更高的估值意味着：要获得一定数额的资金，你要么少出售股票，要么以相同的股票份额获得更多资金。典型的初创公司会两者兼顾。显然，保留更多股票会让你更富有，但筹集更多资金理论上也会让你更富有，原因是：（a）这应能让公司更成功；（b）你能在下次融资前支撑更久，甚至可能不再需要下一轮融资。不过注意这些 “应能”—— 实际上，很多资金会在过程中流失</p><p>It might seem that the huge rounds raised by startups nowadays contradict the claim that it has become cheaper to start one. But there’s no contradiction here; the startups that raise the most are the ones doing it by choice, in order to grow faster, not the ones doing it because they need the money to survive. There’s nothing like not needing money to make people offer it to you.</p><p>如今初创公司筹集的巨额资金，似乎与 “创业成本降低” 的说法矛盾，但两者并不冲突：筹集资金最多的初创公司，是主动选择融资以加速增长，而非因生存需要被迫融资。没有什么比 “不需要钱” 更能让别人主动给你钱了。</p><p>You would think, after having been on the side of labor in its fight with capital for almost two centuries, that the far left would be happy that labor has finally prevailed. But none of them seem to be. You can almost hear them saying “No, no, not that way.”</p><p>近两个世纪以来，极左翼一直站在劳工这边与资本对抗，你可能会认为，当劳工最终占上风时，他们会感到高兴。但似乎没人高兴。你几乎能听到他们在说：“不，不，不是这样的。”</p><p>[9] IBM was created in 1911 by merging three companies, the most important of which was Herman Hollerith’s Tabulating Machine Company, founded in 1896. In 1941 its revenues were $60 million.</p><p>Hewlett-Packard’s revenues in 1964 were $125 million.</p><p>Microsoft’s revenues in 1988 were $590 million.</p><p>[9] IBM 于 1911 年由三家公司合并而成，其中最重要的是赫尔曼・霍勒里斯 1896 年创立的制表机公司。1941 年，IBM 的营收为 6000 万美元。</p><p>惠普 1964 年的营收为 1.25 亿美元。</p><p>微软 1988 年的营收为 5.9 亿美元。</p><p>注：本文的机翻水平简直垃圾的一塌糊涂，但是企鹅君不打算校正。因为任何愿意看这篇文章的人都应该去看原文也应该要能读懂原文——如果读不懂那就跳过这篇吧。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将想法转换为文字</title>
    <link href="/2025/08/02/putting-ideas-into-words/"/>
    <url>/2025/08/02/putting-ideas-into-words/</url>
    
    <content type="html"><![CDATA[<h2 id="Putting-Ideas-into-Words"><a href="#Putting-Ideas-into-Words" class="headerlink" title="Putting Ideas into Words"></a>Putting Ideas into Words</h2><p>原文链接: <a href="https://paulgraham.com/words.html">https://paulgraham.com/words.html</a></p><p>February 2022</p><p>Writing about something, even something you know well, usually shows you that you didn’t know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won’t just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that’s why I write them.</p><p>写下某件事，即便你对它了如指掌，往往也会让你发现，你对它的了解其实没自己以为的那么深。将想法转化为文字是一场严苛的考验。你最初选择的措辞通常是错的，必须一遍遍地改写句子，才能让它们精准到位。而且，你的想法不仅会模糊不清，还会残缺不全。最终出现在文章里的想法，有一半是在写作过程中才冒出来的。事实上，这正是我写作的原因。</p><p>Once you publish something, the convention is that whatever you wrote was what you thought before you wrote it. These were your ideas, and now you’ve expressed them. But you know this isn’t true. You know that putting your ideas into words changed them. And not just the ideas you published. Presumably there were others that turned out to be too broken to fix, and those you discarded instead.</p><p>一旦发表了某篇东西，惯例会让人觉得，你写下的内容就是动笔前就想好的 —— 这些是你的想法，现在只是把它们表达出来而已。但你自己清楚并非如此。你知道，将想法转化为文字的过程改变了它们。而且不止是那些被发表的想法，想必还有些想法因为漏洞太多、无法修正而被你舍弃了。</p><p>It’s not just having to commit your ideas to specific words that makes writing so exacting. The real test is reading what you’ve written. You have to pretend to be a neutral reader who knows nothing of what’s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger. But the stranger is rational, so you always can, if you ask him what he needs. If he’s not satisfied because you failed to mention x or didn’t qualify some sentence sufficiently, then you mention x or add more qualifications. Happy now? It may cost you some nice sentences, but you have to resign yourself to that. You just have to make them as good as you can and still satisfy the stranger.</p><p>写作之所以如此费心，不光是因为必须把想法落实到具体的文字上。真正的考验在于阅读自己写的东西。你得假装自己是个中立的读者，对你脑子里的想法一无所知，只看你写出来的文字。当 “他” 读你写的内容时，会觉得它正确吗？完整吗？只要肯努力，你就能像一个完全陌生的人那样读自己的作品 —— 而结果往往不尽如人意。我通常要改很多遍，才能让一篇文章通过 “陌生人” 的检验。但这个 “陌生人” 是理性的，只要你问他需要什么，总能让他满意。如果他因为你没提到 x，或者某个句子不够严谨而不满，那你就补上 x，再加些限定。这下满意了吗？这可能会让你删掉一些漂亮的句子，但你得接受这一点。你只能在满足 “陌生人” 的前提下，尽可能把句子写好。</p><p>This much, I assume, won’t be that controversial. I think it will accord with the experience of anyone who has tried to write about anything nontrivial. There may exist people whose thoughts are so perfectly formed that they just flow straight into words. But I’ve never known anyone who could do this, and if I met someone who said they could, it would seem evidence of their limitations rather than their ability. Indeed, this is a trope in movies: the guy who claims to have a plan for doing some difficult thing, and who when questioned further, taps his head and says “It’s all up here.” Everyone watching the movie knows what that means. At best the plan is vague and incomplete. Very likely there’s some undiscovered flaw that invalidates it completely. At best it’s a plan for a plan.</p><p>我觉得这点没什么争议，任何尝试过写点有分量的东西的人，应该都有过类似的体验。或许存在这样的人：他们的想法完美成型，能直接流畅地转化为文字。但我从没见过这样的人，要是有人说自己能做到，在我看来，这更能说明他们的局限，而非能力。电影里常有这样的桥段：一个人声称有个计划能完成某件难事，别人追问细节时，他拍着脑袋说 “都在这儿呢”。每个看电影的人都明白这意味着什么：往好里说，这个计划模糊又残缺；往坏里说，很可能存在某个未被发现的漏洞，让整个计划彻底失效。往最好了说，这只是个 “计划的计划”。</p><p>In precisely defined domains it’s possible to form complete ideas in your head. People can play chess in their heads, for example. And mathematicians can do some amount of math in their heads, though they don’t seem to feel sure of a proof over a certain length till they write it down. But this only seems possible with ideas you can express in a formal language. [1] Arguably what such people are doing is putting ideas into words in their heads. I can to some extent write essays in my head. I’ll sometimes think of a paragraph while walking or lying in bed that survives nearly unchanged in the final version. But really I’m writing when I do this. I’m doing the mental part of writing; my fingers just aren’t moving as I do it. [2]</p><p>在定义精确的领域里，人或许能在脑子里形成完整的想法。比如，有人能在脑子里下象棋；数学家也能在脑子里做些数学演算，但超过一定长度的证明，他们似乎只有写下来才会觉得踏实。但这种情况似乎只限于能用形式语言表达的想法。[1] 可以说，这些人其实是在脑子里把想法转化为文字。我在某种程度上也能在脑子里 “写” 文章 —— 有时走路或躺在床上时想到的段落，在最终版本里几乎没什么改动。但其实，我这么做的时候就是在写作，只是进行的是写作的脑力活动，手指没动而已。[2]</p><p>You can know a great deal about something without writing about it. Can you ever know so much that you wouldn’t learn more from trying to explain what you know? I don’t think so. I’ve written about at least two subjects I know well — Lisp hacking and startups — and in both cases I learned a lot from writing about them. In both cases there were things I didn’t consciously realize till I had to explain them. And I don’t think my experience was anomalous. A great deal of knowledge is unconscious, and experts have if anything a higher proportion of unconscious knowledge than beginners.</p><p>不写下来，你也能对某件事了解很多。但你能了解到那种程度吗 —— 以至于试着解释自己所知时，不会再有新发现？我觉得不能。我写过至少两个自己很熟悉的话题：Lisp 编程和创业，而两次写作都让我有了很多新认识。很多东西都是在不得不解释的时候，我才下意识地意识到。我觉得我的经历并非个例。很多知识是无意识的，而且专家的无意识知识占比或许比新手还高。</p><p>I’m not saying that writing is the best way to explore all ideas. If you have ideas about architecture, presumably the best way to explore them is to build actual buildings. What I’m saying is that however much you learn from exploring ideas in other ways, you’ll still learn new things from writing about them.</p><p>我不是说写作是探索所有想法的最佳方式。比如，如果你有关于建筑的想法，最佳探索方式或许是去盖实际的房子。我想说的是，无论你通过其他方式探索想法时学到了多少，写下来时仍会有新发现。</p><p>Putting ideas into words doesn’t have to mean writing, of course. You can also do it the old way, by talking. But in my experience, writing is the stricter test. You have to commit to a single, optimal sequence of words. Less can go unsaid when you don’t have tone of voice to carry meaning. And you can focus in a way that would seem excessive in conversation. I’ll often spend 2 weeks on an essay and reread drafts 50 times. If you did that in conversation it would seem evidence of some kind of mental disorder. If you’re lazy, of course, writing and talking are equally useless. But if you want to push yourself to get things right, writing is the steeper hill. [3]</p><p>当然，将想法转化为文字不一定非得是写作，也可以用古老的方式 —— 交谈。但以我的经验，写作是更严苛的考验。你必须选定一个单一、最优的文字序列；没有语气辅助传达意思时，没说出口的东西就更站不住脚；而且你能专注到在交谈中显得过分的程度。我常常花两周写一篇文章，重读草稿 50 遍。要是在交谈中这么做，大概会被当成精神有问题。当然，如果你偷懒，写作和交谈都一样没用。但如果你想逼自己把事情弄对，写作就是更难爬的坡。[3]</p><p>The reason I’ve spent so long establishing this rather obvious point is that it leads to another that many people will find shocking. If writing down your ideas always makes them more precise and more complete, then no one who hasn’t written about a topic has fully formed ideas about it. And someone who never writes has no fully formed ideas about anything nontrivial.</p><p>我花这么多篇幅讲这个看似显而易见的点，是因为它能引出一个很多人会觉得震惊的结论：如果写下想法总能让它们更精确、更完整，那么，没写过某个话题的人，对这个话题就不会有完全成型的想法；而从不写作的人，对任何有分量的事情都不会有完全成型的想法。</p><p>It feels to them as if they do, especially if they’re not in the habit of critically examining their own thinking. Ideas can feel complete. It’s only when you try to put them into words that you discover they’re not. So if you never subject your ideas to that test, you’ll not only never have fully formed ideas, but also never realize it.</p><p>对这些人来说，他们似乎觉得自己有 —— 尤其是如果他们不习惯批判性审视自己的思考的话。想法可能会给人一种 “完整” 的感觉，但只有当你试着把它们转化为文字时，才会发现并非如此。所以，如果你从不拿这个标准检验自己的想法，不仅永远不会有完全成型的想法，还永远意识不到这一点。</p><p>Putting ideas into words is certainly no guarantee that they’ll be right. Far from it. But though it’s not a sufficient condition, it is a necessary one.</p><p>将想法转化为文字当然不能保证它们是对的 —— 远非如此。但尽管这不是充分条件，却是必要条件。</p><p>Notes</p><p>[1] Machinery and circuits are formal languages.</p><p>[1] 机械和电路也是形式语言。</p><p>[2] I thought of this sentence as I was walking down the street in Palo Alto.</p><p>[2] 这句话是我在帕洛阿尔托的街上走路时想到的。</p><p>[3] There are two senses of talking to someone: a strict sense in which the conversation is verbal, and a more general sense in which it can take any form, including writing. In the limit case (e.g. Seneca’s letters), conversation in the latter sense becomes essay writing.</p><p>[3] “和人交谈” 有两种含义：狭义上指口头对话；广义上可以是任何形式，包括写作。在极端情况下（比如塞涅卡的书信），广义的交谈就成了散文写作。</p><p>It can be very useful to talk (in either sense) with other people as you’re writing something. But a verbal conversation will never be more exacting than when you’re talking about something you’re writing.</p><p>写作时和别人交谈（无论哪种意义上的）可能非常有用，但口头对话的严苛程度，永远比不上谈论自己正在写的东西时。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最佳散文</title>
    <link href="/2025/08/01/the-best-essay/"/>
    <url>/2025/08/01/the-best-essay/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Best-Essay"><a href="#The-Best-Essay" class="headerlink" title="The Best Essay"></a>The Best Essay</h2><p>原文链接: <a href="https://paulgraham.com/best.html">https://paulgraham.com/best.html</a></p><p>March 2024</p><p>Despite its title this isn’t meant to be the best essay. My goal here is to figure out what the best essay would be like.</p><p>尽管标题如此，这篇文章并非要成为 “最佳散文”。我的目标是弄清楚，最佳散文应该是什么样子的。</p><p>It would be well-written, but you can write well about any topic. What made it special would be what it was about.</p><p>它的文笔一定很好，但文笔好的文章可以写任何主题。让它脱颖而出的，是它所写的内容。</p><p>Obviously some topics would be better than others. It probably wouldn’t be about this year’s lipstick colors. But it wouldn’t be vaporous talk about elevated themes either. A good essay has to be surprising. It has to tell people something they don’t already know.</p><p>显然，有些主题本身就更有价值。它大概不会写今年的口红流行色，但也不会是对 “崇高主题” 的空洞空谈。一篇好散文必须令人惊喜，必须告诉人们一些他们不知道的事。</p><p>The best essay would be on the most important topic you could tell people something surprising about.</p><p>最佳散文的主题，应该是 “最重要且能带给人惊喜” 的 —— 既重要，又能说出些新鲜东西。</p><p>That may sound obvious, but it has some unexpected consequences. One is that science enters the picture like an elephant stepping into a rowboat. For example, Darwin first described the idea of natural selection in an essay written in 1844. Talk about an important topic you could tell people something surprising about. If that’s the test of a great essay, this was surely the best one written in 1844. And indeed, the best possible essay at any given time would usually be one describing the most important scientific or technological discovery it was possible to make. [1]</p><p>这听起来似乎显而易见，但细想之下会得出一些意外结论。其一，科学会像一头大象闯进划艇般闯入视野。比如，达尔文 1844 年写的一篇散文首次阐述了自然选择的概念。想想看，“重要且能带来惊喜”，若以此为标准，那篇文章无疑是 1844 年最好的散文。事实上，在任何时代，最佳散文通常都在描述当时最重大的科学或技术发现。[1]</p><p>Another unexpected consequence: I imagined when I started writing this that the best essay would be fairly timeless — that the best essay you could write in 1844 would be much the same as the best one you could write now. But in fact the opposite seems to be true. It might be true that the best painting would be timeless in this sense. But it wouldn’t be impressive to write an essay introducing natural selection now. The best essay now would be one describing a great discovery we didn’t yet know about.</p><p>另一个意外结论是：我一开始以为，最佳散文应该是相当 “永恒” 的 ——1844 年的最佳散文和现在的最佳散文应该差不多。但事实似乎恰恰相反。最佳画作或许确实能如此 “永恒”，但现在再写一篇介绍自然选择的散文，就没什么冲击力了。如今的最佳散文，应该是描述一个我们尚未知晓的重大发现。</p><p>If the question of how to write the best possible essay reduces to the question of how to make great discoveries, then I started with the wrong question. Perhaps what this exercise shows is that we shouldn’t waste our time writing essays but instead focus on making discoveries in some specific domain. But I’m interested in essays and what can be done with them, so I want to see if there’s some other question I could have asked.</p><p>如果 “如何写出最佳散文” 的问题，最终归结为 “如何做出重大发现”，那我一开始就问错了问题。或许这个思考告诉我们：不该浪费时间写散文，而该专注于在某个特定领域做出发现。但我对散文及其可能性很感兴趣，所以想看看有没有其他值得问的问题。</p><p>There is, and on the face of it, it seems almost identical to the one I started with. Instead of asking what would the best essay be? I should have asked how do you write essays well? Though these seem only phrasing apart, their answers diverge. The answer to the first question, as we’ve seen, isn’t really about essay writing. The second question forces it to be.</p><p>还真有一个，表面上看它和我最初的问题几乎一样。与其问 “最佳散文是什么样的”，不如问 “如何写好散文”。这两个问题看似只是措辞不同，答案却大相径庭。如前所述，第一个问题的答案其实与 “写散文” 本身无关；而第二个问题，才迫使我们聚焦于写作本身。</p><p>Writing essays, at its best, is a way of discovering ideas. How do you do that well? How do you discover by writing?</p><p>写散文的精髓，是一种发现思想的方式。如何做好这件事？如何通过写作发现思想？</p><p>An essay should ordinarily start with what I’m going to call a question, though I mean this in a very general sense: it doesn’t have to be a question grammatically, just something that acts like one in the sense that it spurs some response.</p><p>一篇散文通常始于一个我称之为 “问题” 的东西 —— 但我对 “问题” 的定义很宽泛：它不一定是语法意义上的问句，只要能引发某种回应，起到类似问题的作用就行。</p><p>How do you get this initial question? It probably won’t work to choose some important-sounding topic at random and go at it. Professional traders won’t even trade unless they have what they call an edge — a convincing story about why in some class of trades they’ll win more than they lose. Similarly, you shouldn’t attack a topic unless you have a way in — some new insight about it or way of approaching it.</p><p>如何找到这个初始问题？随便选一个听起来重要的主题就动笔，大概是行不通的。专业交易者不会轻易出手，除非他们有 “优势”—— 一个能解释 “为什么在某类交易中赢多输少” 的合理逻辑。同理，写一个主题前，你得有 “切入点”：对它有新的洞见，或有新的探讨角度。</p><p>You don’t need to have a complete thesis; you just need some kind of gap you can explore. In fact, merely having questions about something other people take for granted can be edge enough.</p><p>你不需要有完整的论点，只需有一个可供探索的 “缺口”。事实上，对别人习以为常的事抱有疑问，本身就可能是一种优势。</p><p>If you come across a question that’s sufficiently puzzling, it could be worth exploring even if it doesn’t seem very momentous. Many an important discovery has been made by pulling on a thread that seemed insignificant at first. How can they all be finches? [2]</p><p>如果遇到一个足够令人困惑的问题，即便它看似不重大，也值得探索。许多重要发现都始于一根看似无关紧要的 “线头”。比如，“它们怎么可能全是雀类？”[2]</p><p>Once you’ve got a question, then what? You start thinking out loud about it. Not literally out loud, but you commit to a specific string of words in response, as you would if you were talking. This initial response is usually mistaken or incomplete. Writing converts your ideas from vague to bad. But that’s a step forward, because once you can see the brokenness, you can fix it.</p><p>有了问题之后呢？你开始 “大声” 思考它 —— 不是真的出声，而是像说话一样，用一串具体的文字回应它。这个初始回应通常是错误或不完整的。写作能把模糊的想法变成 “糟糕的具体文字”，但这是进步的一步：一旦看到漏洞，就能修补它。</p><p>Perhaps beginning writers are alarmed at the thought of starting with something mistaken or incomplete, but you shouldn’t be, because this is why essay writing works. Forcing yourself to commit to some specific string of words gives you a starting point, and if it’s wrong, you’ll see that when you reread it. At least half of essay writing is rereading what you’ve written and asking is this correct and complete? You have to be very strict when rereading, not just because you want to keep yourself honest, but because a gap between your response and the truth is often a sign of new ideas to be discovered.</p><p>或许初学写作的人会害怕从错误或不完整的内容开始，但不必如此 —— 这正是散文写作的意义所在。强迫自己写下具体的文字，就能获得一个起点；如果它错了，重读时你会发现。散文写作至少有一半的工作是重读已写内容，问自己 “这准确吗？完整吗？” 重读时必须严格，不仅是为了诚实，更因为 “你的回应与真相的差距” 往往藏着新的思想。</p><p>The prize for being strict with what you’ve written is not just refinement. When you take a roughly correct answer and try to make it exactly right, sometimes you find that you can’t, and that the reason is that you were depending on a false assumption. And when you discard it, the answer turns out to be completely different. [3]</p><p>对文字严格要求的回报不止是精进。当你试图把一个大致正确的答案打磨得完全正确时，有时会发现做不到 —— 因为你依赖了一个错误的假设。抛弃这个假设后，答案可能会完全不同。[3]</p><p>Ideally the response to a question is two things: the first step in a process that converges on the truth, and a source of additional questions (in my very general sense of the word). So the process continues recursively, as response spurs response. [4]</p><p>理想情况下，对问题的回应要满足两点：既是逐步接近真相的第一步，又是新问题（按我宽泛的定义）的来源。于是这个过程会递归进行，一个回应引发另一个回应。[4]</p><p>Usually there are several possible responses to a question, which means you’re traversing a tree. But essays are linear, not tree-shaped, which means you have to choose one branch to follow at each point. How do you choose? Usually you should follow whichever offers the greatest combination of generality and novelty. I don’t consciously rank branches this way; I just follow whichever seems most exciting; but generality and novelty are what make a branch exciting. [5]</p><p>一个问题通常有多种可能的回应，这意味着你在遍历一棵 “思想树”。但散文是线性的，不是树状的，所以每个节点你都得选一个分支走。怎么选？通常该选 “普遍性” 和 “新奇性” 结合得最好的那个。我不会刻意给分支排序，只是跟着最 “令人兴奋” 的那个走 —— 而普遍性和新奇性正是让分支令人兴奋的原因。[5]</p><p>If you’re willing to do a lot of rewriting, you don’t have to guess right. You can follow a branch and see how it turns out, and if it isn’t good enough, cut it and backtrack. I do this all the time. In this essay I’ve already cut a 17-paragraph subtree, in addition to countless shorter ones. Maybe I’ll reattach it at the end, or boil it down to a footnote, or spin it off as its own essay; we’ll see. [6]</p><p>如果愿意多修改，一开始选错也没关系。你可以沿着一个分支走，看看结果如何；如果不够好，就删掉它，退回重选。我经常这么做。写这篇散文时，我已经删掉了一个 17 段的子分支，还有无数更短的段落。或许之后会把其中 5 段接回来，或精简成脚注，或扩展成另一篇散文 —— 再说吧。[6]</p><p>In general you want to be quick to cut. One of the most dangerous temptations in writing (and in software and painting) is to keep something that isn’t right, just because it contains a few good bits or cost you a lot of effort.</p><p>总的来说，要果断删减。写作（以及软件开发、绘画）中最危险的诱惑之一，是保留不合适的内容，只因为其中有几句好话，或花了很多功夫。</p><p>The most surprising new question being thrown off at this point is does it really matter what the initial question is? If the space of ideas is highly connected, it shouldn’t, because you should be able to get from any question to the most valuable ones in a few hops. And we see evidence that it’s highly connected in the way, for example, that people who are obsessed with some topic can turn any conversation toward it. But that only works if you know where you want to go, and you don’t in an essay. That’s the whole point. You don’t want to be the obsessive conversationalist, or all your essays will be about the same thing. [7]</p><p>此刻浮现的最令人惊讶的新问题是：“初始问题真的重要吗？” 如果思想领域是高度关联的，那它就不重要 —— 因为从任何问题出发，几步之内都能抵达最有价值的问题。有证据支持这一点：比如，痴迷某个主题的人能把任何对话引向它。但这只在你知道目的地时才有用，而散文写作的关键是 “你不知道目的地”。你不想成为那个 “话题绑架者”，否则所有散文都会千篇一律。[7]</p><p>The other reason the initial question matters is that you usually feel somewhat obliged to stick to it. I don’t think about this when I decide which branch to follow. I just follow novelty and generality. Sticking to the question is enforced later, when I notice I’ve wandered too far and have to backtrack. But I think this is the optimal solution. You don’t want the hunt for novelty and generality to be constrained in the moment. Go with it and see what you get. [8]</p><p>初始问题重要的另一个原因是，你通常会觉得有点 “义务” 要围绕它写。选分支时我不会想这个，只是跟着新奇性和普遍性走。但后来发现偏离太远时，就得退回 —— 这其实是最优解。不必在当下限制对新奇性和普遍性的追求，先跟着走，看看会得到什么。[8]</p><p>Since the initial question does constrain you, in the best case it sets an upper bound on the quality of essay you’ll write. If you do as well as you possibly can on the chain of thoughts that follow from the initial question, the initial question itself is the only place where there’s room for variation.</p><p>既然初始问题会限制你，那么在理想情况下，它决定了散文质量的上限。如果从初始问题延伸出的思路都做到了极致，那么初始问题本身就是唯一能产生差异的地方。</p><p>It would be a mistake to let this make you too conservative though, because you can’t predict where a question will lead. Not if you’re doing things right, because doing things right means making discoveries, and by definition you can’t predict those. So the way to respond to this situation is not to be cautious about which initial question you choose, but to write a lot of essays. Essays are for taking risks.</p><p>但也不该因此变得太保守，因为你无法预测一个问题会引向何方。如果写作得当，就必然会有发现 —— 而发现的定义就是 “不可预测”。所以面对这种情况，不该谨慎选择初始问题，而该多写散文。散文就是用来冒险的。</p><p>Almost any question can get you a good essay. Indeed, it took some effort to think of a sufficiently unpromising topic in the third paragraph, because any essayist’s first impulse on hearing that the best essay couldn’t be about x would be to try to write it. But if most questions yield good essays, only some yield great ones.</p><p>几乎任何问题都能写出好散文。事实上，我在第三段费了点劲才想到一个 “没前途” 的主题 —— 因为任何散文家听到 “最佳散文不能写 x” 时，第一反应都是想试试写 x。但如果说大多数问题能写出好散文，那只有少数能写出伟大的散文。</p><p>Can we predict which questions will yield great essays? Considering how long I’ve been writing essays, it’s alarming how novel that question feels.</p><p>我们能预测哪些问题能写出伟大的散文吗？考虑到我写散文这么久了，这个问题竟让我觉得如此新奇，实在令人不安。</p><p>One thing I like in an initial question is outrageousness. I love questions that seem naughty in some way — for example, by seeming counterintuitive or overambitious or heterodox. Ideally all three. This essay is an example. Writing about the best essay implies there is such a thing, which pseudo-intellectuals will dismiss as reductive, though it follows necessarily from the possibility of one essay being better than another. And thinking about how to do something so ambitious is close enough to doing it that it holds your attention.</p><p>我喜欢的初始问题要有 “出格感”。我热爱那些看似 “无礼” 的问题 —— 比如反直觉、野心过大，或离经叛道，最好三者兼具。这篇散文就是个例子。写 “最佳散文” 意味着默认存在 “最佳”，伪知识分子会斥之为 “简化”，但既然散文有优劣之分，“最佳” 就必然存在。思考如何完成如此宏大的事，本身就接近 “做这件事”，足以抓住注意力。</p><p>I like to start an essay with a gleam in my eye. This could be just a taste of mine, but there’s one aspect of it that probably isn’t: to write a really good essay on some topic, you have to be interested in it. A good writer can write well about anything, but to stretch for the novel insights that are the raison d’etre of the essay, you have to care.</p><p>我喜欢带着 “一丝狡黠” 开始写散文。这可能只是我的个人偏好，但有一点大概不是：要写一篇关于某个主题的好散文，你必须对它感兴趣。好作家能写好任何主题，但要挖掘出散文的核心 —— 新奇的洞见，你必须在乎这个主题。</p><p>If caring about it is one of the criteria for a good initial question, then the optimal question varies from person to person. It also means you’re more likely to write great essays if you care about a lot of different things. The more curious you are, the greater the probable overlap between the set of things you’re curious about and the set of topics that yield great essays.</p><p>如果 “在乎” 是好的初始问题的标准之一，那么 “最优问题” 就因人而异。这也意味着，如果你对很多不同的事都感兴趣，就更可能写出伟大的散文。好奇心越强，你感兴趣的事与 “能写出伟大散文的主题” 的重合概率就越高。</p><p>What other qualities would a great initial question have? It’s probably good if it has implications in a lot of different areas. And I find it’s a good sign if it’s one that people think has already been thoroughly explored. But the truth is that I’ve barely thought about how to choose initial questions, because I rarely do it. I rarely choose what to write about; I just start thinking about something, and sometimes it turns into an essay.</p><p>伟大的初始问题还该有什么特质？它最好能在多个领域产生影响。我发现，如果一个问题被认为 “已被彻底探索过”，反而是个好迹象。但说实话，我几乎没思考过如何选择初始问题 —— 因为我很少主动选。我很少决定 “要写什么”，只是开始思考某件事，有时它就变成了一篇散文。</p><p>Am I going to stop writing essays about whatever I happen to be thinking about and instead start working my way through some systematically generated list of topics? That doesn’t sound like much fun. And yet I want to write good essays, and if the initial question matters, I should care about it.</p><p>我会停止写 “碰巧想到的事”，转而按某个系统生成的主题列表来写吗？这听起来没什么意思。但我想写好散文，如果初始问题重要，我就该在乎它。</p><p>Perhaps the answer is to go one step earlier: to write about whatever pops into your head, but try to ensure that what pops into your head is good. Indeed, now that I think about it, this has to be the answer, because a mere list of topics wouldn’t be any use if you didn’t have edge with any of them. To start writing an essay, you need a topic plus some initial insight about it, and you can’t generate those systematically. If only. [9]</p><p>或许答案是再往前一步：写任何冒出来的想法，但努力让冒出来的想法是好的。其实仔细想想，这必然是答案 —— 因为如果对列表上的主题没有 “切入点”，列表就毫无用处。写散文需要 “主题 + 初始洞见”，而这两者无法系统生成。要是能生成就好了。[9]</p><p>You can probably cause yourself to have more of them, though. The quality of the ideas that come out of your head depends on what goes in, and you can improve that in two dimensions, breadth and depth.</p><p>但你或许能让自己产生更多这样的想法。脑子里冒出的想法质量，取决于输入的内容，而你可以从两个维度提升输入：广度和深度。</p><p>You can’t learn everything, so getting breadth implies learning about topics that are very different from one another. When I tell people about my book-buying trips to Hay and they ask what I buy books about, I usually feel a bit sheepish answering, because the topics seem like a laundry list of unrelated subjects. But perhaps that’s actually optimal in this business.</p><p>你不可能什么都学，所以 “广度” 意味着学差异很大的主题。我跟人说我去海伊镇买书的经历，他们问我买什么主题的书时，我总有点不好意思 —— 那些主题像一堆不相关的杂物。但或许在写作这行，这恰恰是最优解。</p><p>You can also get ideas by talking to people, by doing and building things, and by going places and seeing things. I don’t think it’s important to talk to new people so much as the sort of people who make you have new ideas. I get more new ideas after talking for an afternoon with Robert Morris than from talking to 20 new smart people. I know because that’s what a block of office hours at Y Combinator consists of.</p><p>你也能通过与人交谈、做事、造东西、去不同地方看不同事物获得想法。我觉得重要的不是 “和新朋友聊”，而是 “和能让你产生新想法的人聊”。和罗伯特・莫里斯聊一下午，比和 20 个聪明的新朋友聊，能给我更多新想法。我知道这一点，因为 Y Combinator 的办公时间就是这样。</p><p>While breadth comes from reading and talking and seeing, depth comes from doing. The way to really learn about some domain is to have to solve problems in it. Though this could take the form of writing, I suspect that to be a good essayist you also have to do, or have done, some other kind of work. That may not be true for most other fields, but essay writing is different. You could spend half your time working on something else and be net ahead, so long as it was hard.</p><p>广度来自阅读、交谈和观察，深度则来自实践。真正了解一个领域的方式，是必须在其中解决问题。虽然写作本身也能算一种实践，但我怀疑，要成为好的散文家，还得做（或做过）其他类型的工作。这对其他领域可能不适用，但散文写作不同。你可以花一半时间做别的事，只要那件事有难度，最终反而可能更擅长写作。</p><p>I’m not proposing that as a recipe so much as an encouragement to those already doing it. If you’ve spent all your life so far working on other things, you’re already halfway there. Though of course to be good at writing you have to like it, and if you like writing you’d probably have spent at least some time doing it.</p><p>我不是在提供一个 “配方”，更像是在鼓励已经这么做的人。如果你这辈子大部分时间都在做其他事，其实已经成功了一半。当然，要擅长写作，你得喜欢写作；如果喜欢，你大概至少花过一些时间写。</p><p>Everything I’ve said about initial questions applies also to the questions you encounter in writing the essay. They’re the same thing; every subtree of an essay is usually a shorter essay, just as every subtree of a Calder mobile is a smaller mobile. So any technique that gets you good initial questions also gets you good whole essays.</p><p>关于初始问题的所有说法，也适用于写作中遇到的其他问题。它们本质上是一回事：散文的每个子分支通常都是一篇更短的散文，就像考尔德的动态雕塑，每个子结构都是一个更小的雕塑。所以，能让你得到好的初始问题的技巧，也能让你写出好的完整散文。</p><p>At some point the cycle of question and response reaches what feels like a natural end. Which is a little suspicious; shouldn’t every answer suggest more questions? I think what happens is that you start to feel sated. Once you’ve covered enough interesting ground, you start to lose your appetite for new questions. Which is just as well, because the reader is probably feeling sated too. And it’s not lazy to stop asking questions, because you could instead be asking the initial question of a new essay.</p><p>某个时刻，“提问 - 回应” 的循环会抵达一个 “自然终点”。这有点可疑 —— 难道每个答案不该引出更多问题吗？我想，原因是你开始 “满足” 了。探索了足够多有趣的领域后，对新问题的 “胃口” 会下降。这也无妨，因为读者可能也觉得满足了。停止提问不是懒惰，因为你可以转而开始一篇新散文的初始问题。</p><p>That’s the ultimate source of drag on the connectedness of ideas: the discoveries you make along the way. If you discover enough starting from question A, you’ll never make it to question B. Though if you keep writing essays you’ll gradually fix this problem by burning off such discoveries. So bizarrely enough, writing lots of essays makes it as if the space of ideas were more highly connected.</p><p>思想关联性的最终 “阻力” 来自途中的发现：如果从问题 A 出发发现了足够多东西，你可能永远不会抵达问题 B。但如果持续写散文，你会逐渐 “消耗” 这些发现，从而解决这个问题。所以说来也怪，多写散文会让思想领域显得 “更关联”。</p><p>When a subtree comes to an end, you can do one of two things. You can either stop, or pull the Cubist trick of laying separate subtrees end to end by returning to a question you skipped earlier. Usually it requires some sleight of hand to make the essay flow continuously at this point, but not this time. This time I actually need an example of the phenomenon. For example, we discovered earlier that the best possible essay wouldn’t usually be timeless in the way the best painting would. This seems surprising enough to be worth investigating further.</p><p>当一个子分支结束时，你有两个选择：要么停笔，要么玩个 “立体主义把戏”—— 回到之前跳过的问题，把不同子分支串起来。通常这需要些 “手法” 让散文流畅衔接，但这次不用。这次我正好需要一个例子：比如我们之前发现，最佳散文通常不会像最佳画作那样 “永恒”。这一点足够令人惊讶，值得深入探讨。</p><p>There are two senses in which an essay can be timeless: to be about a matter of permanent importance, and always to have the same effect on readers. With art these two senses blend together. Art that looked beautiful to the ancient Greeks still looks beautiful to us. But with essays the two senses diverge, because essays teach, and you can’t teach people something they already know. Natural selection is certainly a matter of permanent importance, but an essay explaining it couldn’t have the same effect on us that it would have had on Darwin’s contemporaries, precisely because his ideas were so successful that everyone already knows about them. [10]</p><p>散文的 “永恒” 有两种含义：写的是永久重要的事；对读者的影响永远不变。艺术中这两种含义是融合的 —— 古希腊人觉得美的雕塑，我们现在也觉得美。但散文不同，因为散文是 “教” 人的，你没法教别人已经知道的事。自然选择无疑是永久重要的，但解释它的散文对我们的影响，不可能和对达尔文同时代人的影响一样 —— 恰恰因为他的思想太成功，现在每个人都知道了。[10]</p><p>I imagined when I started writing this that the best possible essay would be timeless in the stricter, evergreen sense: that it would contain some deep, timeless wisdom that would appeal equally to Aristotle and Feynman. That doesn’t seem to be true. But if the best possible essay wouldn’t usually be timeless in this stricter sense, what would it take to write essays that were?</p><p>我一开始以为，最佳散文应该是 “严格永恒” 的 —— 包含深刻、永恒的智慧，能同时打动亚里士多德和费曼。但事实似乎并非如此。如果最佳散文通常不会是这种 “严格永恒” 的，那要写出 “永恒的散文” 该怎么做？</p><p>The answer to that turns out to be very strange: to be the evergreen kind of timeless, an essay has to be ineffective, in the sense that its discoveries aren’t assimilated into our shared culture. Otherwise there will be nothing new in it for the second generation of readers. If you want to surprise readers not just now but in the future as well, you have to write essays that won’t stick — essays that, no matter how good they are, won’t become part of what people in the future learn before they read them. [11]</p><p>答案很奇怪：要成为 “常青” 的永恒散文，它必须是 “无效” 的 —— 它的发现没有被融入我们的共同文化。否则，第二代读者就不会从中看到新东西。如果你想不仅现在能让读者惊讶，未来也能，就得写 “留不下痕迹” 的散文 —— 无论多好，都不会成为未来读者在阅读前就已了解的内容。[11]</p><p>I can imagine several ways to do that. One would be to write about things people never learn. For example, it’s a long-established pattern for ambitious people to chase after various types of prizes, and only later, perhaps too late, to realize that some of them weren’t worth as much as they thought. If you write about that, you can be confident of a conveyor belt of future readers to be surprised by it.</p><p>我能想到几种实现方式。一种是写人们永远学不会的事。比如，有个长久存在的模式：有野心的人追逐各种 “奖励”，后来（或许太晚）才发现其中一些不值那么多。写这个主题，你可以确定未来会有源源不断的读者被它惊讶到。</p><p>Ditto if you write about the tendency of the inexperienced to overdo things — of young engineers to produce overcomplicated solutions, for example. There are some kinds of mistakes people never learn to avoid except by making them. Any of those should be a timeless topic.</p><p>同理，写 “缺乏经验的人容易过度做事”—— 比如年轻工程师搞出过于复杂的解决方案。有些错误，人们只有亲身犯过才会避免。这类主题都能是永恒的。</p><p>Sometimes when we’re slow to grasp things it’s not just because we’re obtuse or in denial but because we’ve been deliberately lied to. There are a lot of things adults lie to kids about, and when you reach adulthood, they don’t take you aside and hand you a list of them. They don’t remember which lies they told you, and most were implicit anyway. So contradicting such lies will be a source of surprises for as long as adults keep telling them.</p><p>有时我们迟迟无法理解某事，不仅因为迟钝或否认，还因为被故意欺骗。成年人对孩子撒了很多谎，等孩子成年后，他们不会拉你到一边，给你列一张 “谎言清单”。他们不记得撒过哪些谎，而且大多数谎言是暗示性的。所以，只要成年人还在撒谎，反驳这些谎言就会一直是惊喜的来源。</p><p>Sometimes it’s systems that lie to you. For example, the educational systems in most countries train you to win by hacking the test. But that’s not how you win at the most important real-world tests, and after decades of training, this is hard for new arrivals in the real world to grasp. Helping them overcome such institutional lies will work as long as the institutions remain broken. [12]</p><p>有时是 “系统” 在撒谎。比如，大多数国家的教育系统训练你 “钻考试空子” 取胜。但这不是在最重要的现实考验中取胜的方式，而经过几十年的训练，刚进入现实世界的人很难明白这一点。只要这些系统还在崩坏，帮助人们识破这种 “体制性谎言” 就会一直有效。[12]</p><p>Another recipe for timelessness is to write about things readers already know, but in much more detail than can be transmitted culturally. “Everyone knows,” for example, that it can be rewarding to have kids. But till you have them you don’t know precisely what forms that takes, and even then much of what you know you may never have put into words.</p><p>另一种 “永恒配方” 是写读者已经知道的事，但细节丰富到无法被文化传播。比如，“大家都知道” 养孩子能带来回报，但没养过的人不知道具体是什么形式；就算养过，很多感受也难以用语言表达。</p><p>I’ve written about all these kinds of topics. But I didn’t do it in a deliberate attempt to write essays that were timeless in the stricter sense. And indeed, the fact that this depends on one’s ideas not sticking suggests that it’s not worth making a deliberate attempt to. You should write about topics of timeless importance, yes, but if you do such a good job that your conclusions stick and future generations find your essay obvious instead of novel, so much the better. You’ve crossed into Darwin territory.</p><p>这些主题我都写过，但并非刻意为了写出 “严格永恒” 的散文。事实上，“永恒” 依赖于 “思想留不下痕迹”，这意味着刻意追求它没什么意义。你当然要写永恒重要的主题，但如果写得太好，结论被广泛接受，未来读者觉得你的散文 “显而易见” 而非 “新奇”，那更好 —— 你已经进入了达尔文的领域。</p><p>Writing about topics of timeless importance is an instance of something even more general, though: breadth of applicability. And there are more kinds of breadth than chronological — applying to lots of different fields, for example. So breadth is the ultimate aim.</p><p>写永恒重要的主题，其实是更普遍原则的一个例子：适用性的广度。除了时间上的广度，还有其他类型的广度 —— 比如适用于多个领域。所以，“广度” 才是最终目标。</p><p>I already aim for it. Breadth and novelty are the two things I’m always chasing. But I’m glad I understand where timelessness fits.</p><p>我一直追求广度和新奇性。但现在明白了 “永恒” 的位置，我很高兴。</p><p>I understand better where a lot of things fit now. This essay has been a kind of tour of essay writing. I started out hoping to get advice about topics; if you assume good writing, the only thing left to differentiate the best essay is its topic. And I did get advice about topics: discover natural selection. Yeah, that would be nice. But when you step back and ask what’s the best you can do short of making some great discovery like that, the answer turns out to be about procedure. Ultimately the quality of an essay is a function of the ideas discovered in it, and the way you get them is by casting a wide net for questions and then being very exacting with the answers.</p><p>现在我更明白很多事的位置了。这篇散文算是一次 “散文写作漫游”。我一开始想得到关于 “主题” 的建议：如果假设文笔好，那么区分最佳散文的就只有主题。我确实得到了建议：去发现自然选择。嗯，这当然好。但退一步想，在做出那样的重大发现之前，能做到的最佳状态是什么？答案是 “过程”。最终，散文的质量取决于其中发现的思想，而获取思想的方式是：广泛捕捉问题，然后对答案极其苛刻。</p><p>The most striking feature of this map of essay writing are the alternating stripes of inspiration and effort required. The questions depend on inspiration, but the answers can be got by sheer persistence. You don’t have to get an answer right the first time, but there’s no excuse for not getting it right eventually, because you can keep rewriting till you do. And this is not just a theoretical possibility. It’s a pretty accurate description of the way I work. I’m rewriting as we speak.</p><p>这张 “散文写作地图” 最显著的特征，是 “灵感” 与 “努力” 交替出现的条纹。问题依赖灵感，但答案可以靠坚持获得。你不必一次就答对，但最终必须答对 —— 因为可以不断修改，直到正确。这不是理论上的可能，而是我工作方式的准确描述。我此刻就在修改。</p><p>But although I wish I could say that writing great essays depends mostly on effort, in the limit case it’s inspiration that makes the difference. In the limit case, the questions are the harder thing to get. That pool has no bottom.</p><p>但尽管我想说 “写伟大的散文主要靠努力”，但在极限情况下，差异由灵感决定。极限情况下，问题更难获得。这是个无底洞。</p><p>How to get more questions? That is the most important question of all.</p><p>如何获得更多问题？这才是最重要的问题。</p><p>Notes</p><p>[1] There might be some resistance to this conclusion on the grounds that some of these discoveries could only be understood by a small number of readers. But you get into all sorts of difficulties if you want to disqualify essays on this account. How do you decide where the cutoff should be? If a virus kills off everyone except a handful of people sequestered at Los Alamos, could an essay that had been disqualified now be eligible? Etc.</p><p>[1] 有人可能反对这个结论，理由是有些发现只有少数读者能理解。但以此为由否定一篇散文，会陷入各种困境。如何决定 “少数” 的界限？如果病毒杀死了所有人，只剩洛斯阿拉莫斯实验室的几个人，那之前被否定的散文现在是否合格？等等。</p><p>Darwin’s 1844 essay was derived from an earlier version written in 1839. Extracts from it were published in 1858.</p><p>达尔文 1844 年的散文改编自 1839 年的早期版本，节选于 1858 年发表。</p><p>[2] When you find yourself very curious about an apparently minor question, that’s an exciting sign. Evolution has designed you to pay attention to things that matter. So when you’re very curious about something random, that could mean you’ve unconsciously noticed it’s less random than it seems.</p><p>[2] 当你对一个看似次要的问题充满好奇时，这是个令人兴奋的信号。进化让我们关注 “重要的事”，所以当你对某个随机的事充满好奇，可能是潜意识里发现它没那么随机。</p><p>[3] Corollary: If you’re not intellectually honest, your writing won’t just be biased, but also boring, because you’ll miss all the ideas you’d have discovered if you pushed for the truth.</p><p>[3] 推论：如果不够理智诚实，你的写作不仅会有偏见，还会无聊 —— 因为你会错过所有 “追求真相时本可以发现” 的思想。</p><p>[4] Sometimes this process begins before you start writing. Sometimes you’ve already figured out the first few things you want to say. Schoolchildren are often taught they should decide everything they want to say, and write this down as an outline before they start writing the essay itself. Maybe that’s a good way to get them started — or not, I don’t know — but it’s antithetical to the spirit of essay writing. The more detailed your outline, the less your ideas can benefit from the sort of discovery that essays are for.</p><p>[4] 这个过程有时在动笔前就开始了。有时你已经想好了开头要说的几件事。学生常被教导：应该先确定所有想写的内容，列成提纲，再开始写散文。或许这是教他们入门的好方法（也可能不是，我不知道），但与散文写作的精神相悖。提纲越详细，思想就越难从散文特有的 “发现” 中获益。</p><p>[5] The problem with this type of “greedy” algorithm is that you can end up on a local maximum. If the most valuable question is preceded by a boring one, you’ll overlook it. But I can’t imagine a better strategy. There’s no lookahead except by writing. So use a greedy algorithm and a lot of time.</p><p>[5] 这种 “贪心算法” 的问题是可能陷入 “局部最优”。如果最有价值的问题前有一个无聊的问题，你就会错过它。但我想不出更好的策略。除了写作，没有 “预知” 的方法。所以，用贪心算法，多花时间。</p><p>[6] I ended up reattaching the first 5 of the 17 paragraphs, and discarding the rest.</p><p>[6] 最后我把 17 段中的前 5 段接了回来，其余删掉了。</p><p>[7] Stephen Fry confessed to making use of this phenomenon when taking exams at Oxford. He had in his head a standard essay about some general literary topic, and he would find a way to turn the exam question toward it and then just reproduce it again.</p><p>[7] 史蒂芬・弗莱承认，在牛津考试时用过这种方法。他脑子里有一篇关于某个通用文学主题的标准散文，会想办法把考题引向它，然后复述出来。</p><p>Strictly speaking it’s the graph of ideas that would be highly connected, not the space, but that usage would confuse people who don’t know graph theory, whereas people who do know it will get what I mean if I say “space”.</p><p>严格来说，“高度关联” 的是 “思想图谱”，而非 “领域”，但用 “领域” 不会让不懂图论的人困惑，而懂的人会明白我的意思。</p><p>[8] Too far doesn’t depend just on the distance from the original topic. It’s more like that distance divided by the value of whatever I’ve discovered in the subtree.</p><p>[8] “偏离太远” 不仅取决于与原主题的距离，更像 “距离除以子分支中发现的价值”。</p><p>[9] Or can you? I should try writing about this. Even if the chance of succeeding is small, the expected value is huge.</p><p>[9] 或许可以？我应该写写这个。就算成功概率低，预期价值也很大。</p><p>[10] There was a vogue in the 20th century for saying that the purpose of art was also to teach. Some artists tried to justify their work by explaining that their goal was not to produce something good, but to challenge our preconceptions about art. And to be fair, art can teach somewhat. The ancient Greeks’ naturalistic sculptures represented a new idea, and must have been extra exciting to contemporaries on that account. But they still look good to us.</p><p>[10] 20 世纪有种潮流，说艺术的目的也是 “教”。有些艺术家为作品辩护时说，目标不是创造好东西，而是挑战我们对艺术的偏见。公平地说，艺术确实能教一点。古希腊的写实雕塑代表了新思想，对同时代人来说一定格外令人兴奋。但它们现在看起来依然好。</p><p>[11] Bertrand Russell caused huge controversy in the early 20th century with his ideas about “trial marriage.” But they make boring reading now, because they prevailed. “Trial marriage” is what we call “dating.”</p><p>[11] 伯特兰・罗素 20 世纪初关于 “试婚” 的想法引发巨大争议，但现在读起来很无聊 —— 因为他的想法赢了。“试婚” 就是我们说的 “约会”。</p><p>[12] If you’d asked me 10 years ago, I’d have predicted that schools would continue to teach hacking the test for centuries. But now it seems plausible that students will soon be taught individually by AIs, and that exams will be replaced by ongoing, invisible micro-assessments.</p><p>[12] 10 年前如果问我，我会预测学校会继续教 “钻考试空子” 几个世纪。但现在看来，学生可能很快会由 AI 一对一教学，考试会被持续、隐形的 “微评估” 取代。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>淡化你的身份标识</title>
    <link href="/2025/07/31/keep-your-identity-small/"/>
    <url>/2025/07/31/keep-your-identity-small/</url>
    
    <content type="html"><![CDATA[<h2 id="Keep-Your-Identity-Small"><a href="#Keep-Your-Identity-Small" class="headerlink" title="Keep Your Identity Small"></a>Keep Your Identity Small</h2><p>原文链接: <a href="https://paulgraham.com/identity.html">https://paulgraham.com/identity.html</a></p><p>February 2009</p><p>I finally realized today why politics and religion yield such uniquely useless discussions.</p><p>今天我终于意识到，为何政治和宗教总会引发毫无意义的讨论。</p><p>As a rule, any mention of religion on an online forum degenerates into a religious argument. Why? Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums?</p><p>通常来说，在网络论坛上只要提到宗教，讨论就会演变成宗教争论。为什么会这样？为什么宗教话题会如此，而 JavaScript、烘焙或其他人们在论坛上讨论的话题却不会？</p><p>What’s different about religion is that people don’t feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs, and anyone can have those. No thread about Javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone’s an expert.</p><p>宗教的特别之处在于，人们觉得自己无需具备任何专业知识，就能对其发表见解。他们所需要的只是强烈的信念，而任何人都能拥有这种信念。关于 JavaScript 的帖子不会像宗教话题的帖子那样迅速发酵，因为人们会觉得，要对 JavaScript 发表评论，自己的专业水平必须达到一定门槛。但在宗教话题上，每个人都自认为是专家。</p><p>Then it struck me: this is the problem with politics too. Politics, like religion, is a topic where there’s no threshold of expertise for expressing an opinion. All you need is strong convictions.</p><p>随后我突然想到：政治也是同样的问题。和宗教一样，在政治话题中，发表观点无需任何专业门槛，只要有强烈的信念就行。</p><p>Do religion and politics have something in common that explains this similarity? One possible explanation is that they deal with questions that have no definite answers, so there’s no back pressure on people’s opinions. Since no one can be proven wrong, every opinion is equally valid, and sensing this, everyone lets fly with theirs.</p><p>宗教和政治是否存在某种共性，能解释这种相似性？一种可能的解释是，它们涉及的问题没有明确答案，因此人们的观点不会受到反驳的压力。既然没人能被证明是错的，那么每种观点都同样 “合理”，正因为意识到这一点，每个人都会肆意发表自己的看法。</p><p>But this isn’t true. There are certainly some political questions that have definite answers, like how much a new government policy will cost. But the more precise political questions suffer the same fate as the vaguer ones.</p><p>但事实并非如此。某些政治问题显然有明确答案，比如一项新的政府政策会耗费多少资金。然而，越是精确的政治问题，最终的下场却和那些模糊的问题一样（引发无意义争论）。</p><p>I think what religion and politics have in common is that they become part of people’s identity, and people can never have a fruitful argument about something that’s part of their identity. By definition they’re partisan.</p><p>我认为，宗教和政治的共同点在于，它们会成为人们身份标识的一部分，而人们永远无法就属于自己身份标识的事物进行富有成效的争论。按理说，他们必然会带有偏见。</p><p>Which topics engage people’s identity depends on the people, not the topic. For example, a discussion about a battle that included citizens of one or more of the countries involved would probably degenerate into a political argument. But a discussion today about a battle that took place in the Bronze Age probably wouldn’t. No one would know what side to be on. So it’s not politics that’s the source of the trouble, but identity. When people say a discussion has degenerated into a religious war, what they really mean is that it has started to be driven mostly by people’s identities. [1]</p><p>哪些话题会涉及人们的身份标识，取决于人本身，而非话题本身。例如，若一场关于战争的讨论涉及某个或多个参战国的公民，那它很可能会演变成政治争论。但如今讨论一场发生在青铜时代的战争，或许就不会如此 —— 因为没人知道该站在哪一方。所以，问题的根源并非政治，而是身份标识。当人们说一场讨论演变成了 “宗教战争”，他们真正想表达的是，这场讨论已开始主要由人们的身份标识所驱动。[1]</p><p>Because the point at which this happens depends on the people rather than the topic, it’s a mistake to conclude that because a question tends to provoke religious wars, it must have no answer. For example, the question of the relative merits of programming languages often degenerates into a religious war, because so many programmers identify as X programmers or Y programmers. This sometimes leads people to conclude the question must be unanswerable—that all languages are equally good. Obviously that’s false: anything else people make can be well or badly designed; why should this be uniquely impossible for programming languages? And indeed, you can have a fruitful discussion about the relative merits of programming languages, so long as you exclude people who respond from identity.</p><p>由于这种情况的发生取决于人而非话题，因此若得出 “某个问题容易引发‘宗教战争’，就说明它一定没有答案” 的结论，那就错了。比如，关于编程语言优劣的讨论，往往会演变成 “宗教战争”，因为太多程序员将自己定位为 “X 语言程序员” 或 “Y 语言程序员”。这有时会让人们认为，这个问题一定没有答案 —— 所有语言都一样好。但显然这是错误的：人们创造的其他任何事物都有设计优劣之分，编程语言为何会是特例？事实上，只要排除那些从身份标识出发进行回应的人，关于编程语言优劣的讨论就能富有成效。</p><p>More generally, you can have a fruitful discussion about a topic only if it doesn’t engage the identities of any of the participants. What makes politics and religion such minefields is that they engage so many people’s identities. But you could in principle have a useful conversation about them with some people. And there are other topics that might seem harmless, like the relative merits of Ford and Chevy pickup trucks, that you couldn’t safely talk about with others.</p><p>更广泛地说，只有当一个话题不涉及任何参与者的身份标识时，相关讨论才能富有成效。政治和宗教之所以像雷区，是因为它们涉及太多人的身份标识。但理论上，你可以和一些人就这些话题进行有益的交流。反之，有些看似无害的话题，比如福特和雪佛兰皮卡的优劣，你却可能无法和某些人安全地展开讨论。</p><p>The most intriguing thing about this theory, if it’s right, is that it explains not merely which kinds of discussions to avoid, but how to have better ideas. If people can’t think clearly about anything that has become part of their identity, then all other things being equal, the best plan is to let as few things into your identity as possible. [2]</p><p>如果这个理论是正确的，那么最有趣的一点是，它不仅解释了应该避免哪些类型的讨论，还说明了如何产生更好的想法。如果人们无法清晰思考那些已成为自身身份标识一部分的事物，那么在其他条件相同的情况下，最好的办法就是让尽可能少的事物成为你的身份标识。[2]</p><p>Most people reading this will already be fairly tolerant. But there is a step beyond thinking of yourself as x but tolerating y: not even to consider yourself an x. The more labels you have for yourself, the dumber they make you.</p><p>读到这篇文章的大多数人可能已经相当宽容了。但还有一个境界超越了 “认为自己是 x，但容忍 y”：那就是根本不把自己当作 x。你给自己贴的标签越多，就会变得越愚蠢。</p><p>Notes</p><p>[1] When that happens, it tends to happen fast, like a core going critical. The threshold for participating goes down to zero, which brings in more people. And they tend to say incendiary things, which draw more and angrier counterarguments.</p><p>[1] 这种情况发生时，往往会像核反应堆达到临界状态一样迅速。参与讨论的门槛降至零，这会吸引更多人加入。而且他们往往会说些煽动性的话，从而引发更多、更愤怒的反驳。</p><p>[2] There may be some things it’s a net win to include in your identity. For example, being a scientist. But arguably that is more of a placeholder than an actual label—like putting NMI on a form that asks for your middle initial—because it doesn’t commit you to believing anything in particular. A scientist isn’t committed to believing in natural selection in the same way a biblical literalist is committed to rejecting it. All he’s committed to is following the evidence wherever it leads.</p><p>[2] 或许有些事物成为身份标识总体而言是有益的，比如 “科学家” 这个身份。但可以说，这更多是一个占位符而非实际标签 —— 就像在要求填写中间名首字母的表格上填 “NMI”（无中间名）一样 —— 因为它并不要求你坚信某件具体的事。科学家不会像圣经直译主义者坚信要否定自然选择那样，坚信自然选择的正确性。他所坚守的，只是跟随证据的指引。</p><p>Considering yourself a scientist is equivalent to putting a sign in a cupboard saying “this cupboard must be kept empty.” Yes, strictly speaking, you’re putting something in the cupboard, but not in the ordinary sense.</p><p>把自己视为科学家，相当于在橱柜上贴一张标签，上面写着 “这个橱柜必须保持空的”。严格来说，你确实在橱柜上放了东西，但并非通常意义上的 “放东西”。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脑子里最重要的念头</title>
    <link href="/2025/07/31/the-top-idea-in-your-mind/"/>
    <url>/2025/07/31/the-top-idea-in-your-mind/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Top-Idea-in-Your-Mind"><a href="#The-Top-Idea-in-Your-Mind" class="headerlink" title="The Top Idea in Your Mind"></a>The Top Idea in Your Mind</h2><p>原文链接: <a href="https://paulgraham.com/top.html">https://paulgraham.com/top.html</a></p><p>July 2010</p><p>I realized recently that what one thinks about in the shower in the morning is more important than I’d thought. I knew it was a good time to have ideas. Now I’d go further: now I’d say it’s hard to do a really good job on anything you don’t think about in the shower.</p><p>我最近意识到，早上在洗澡时思考的事情，比我之前认为的要重要得多。我知道那是产生想法的好时机。现在我要更进一步说：如果你在洗澡时都不会去想某件事，那你很难把它做好。</p><p>Everyone who’s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There’s a kind of thinking you do without trying to. I’m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]</p><p>每个钻研过难题的人可能都熟悉这种现象：拼命想弄明白一件事，却失败了，过一会儿在做别的事时，答案突然就浮现了。有一种思考是无需刻意为之的。我越来越相信，这种思考方式不仅对解决难题有帮助，而且是必需的。棘手的是，你只能间接控制它。[1]</p><p>I think most people have one top idea in their mind at any given time. That’s the idea their thoughts will drift toward when they’re allowed to drift freely. And this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it. Which means it’s a disaster to let the wrong idea become the top one in your mind.</p><p>我觉得大多数人在任何时候，心里都有一个首要念头。当思绪自由飘荡时，它们总会飘向这个念头。因此，这种思考方式带来的好处，往往都会集中在这个念头上，而其他想法则会被剥夺。这意味着，让错误的念头成为你心中的首要念头，是一场灾难。</p><p>What made this clear to me was having an idea I didn’t want as the top one in my mind for two long stretches.</p><p>有两段很长的时间，我心中的首要念头是我不想要的，这让我深刻明白了这一点。</p><p>I’d noticed startups got way less done when they started raising money, but it was not till we ourselves raised money that I understood why. The problem is not the actual time it takes to meet with investors. The problem is that once you start raising money, raising money becomes the top idea in your mind. That becomes what you think about when you take a shower in the morning. And that means other questions aren’t.</p><p>我注意到，创业公司在开始融资后，做事效率会大幅下降，但直到我们自己去融资时，我才明白原因。问题不在于和投资者见面所花费的实际时间，而在于一旦你开始融资，融资就会成为你心中的首要念头。这会变成你早上在洗澡时思考的事情，而这意味着其他问题就不会被你想起了。</p><p>I’d hated raising money when I was running Viaweb, but I’d forgotten why I hated it so much. When we raised money for Y Combinator, I remembered. Money matters are particularly likely to become the top idea in your mind. The reason is that they have to be. It’s hard to get money. It’s not the sort of thing that happens by default. It’s not going to happen unless you let it become the thing you think about in the shower. And then you’ll make little progress on anything else you’d rather be working on. [2]</p><p>我在经营 Viaweb 时就讨厌融资，但我忘了自己为什么这么讨厌。当我们为 Y Combinator 融资时，我想起来了。与钱相关的事情特别容易成为人们心中的首要念头，原因是它们必须如此。赚钱并不容易，它不是那种自然而然就会发生的事。除非你让它成为你在洗澡时思考的事情，否则它是不会发生的。但这样一来，你在其他你更想做的事情上，就很难取得进展了。[2]</p><p>(I hear similar complaints from friends who are professors. Professors nowadays seem to have become professional fundraisers who do a little research on the side. It may be time to fix that.)</p><p>（我从当教授的朋友那里听到了类似的抱怨。如今的教授似乎变成了专业的筹款人，只在业余时间做一点研究。或许是时候改变这种状况了。）</p><p>The reason this struck me so forcibly is that for most of the preceding 10 years I’d been able to think about what I wanted. So the contrast when I couldn’t was sharp. But I don’t think this problem is unique to me, because just about every startup I’ve seen grinds to a halt when they start raising money — or talking to acquirers.</p><p>这件事给我带来如此强烈的冲击，是因为在之前的 10 年里，大多数时候我都能思考自己想思考的事情。所以当我不能再这样做时，反差非常鲜明。但我认为这个问题并非只发生在我身上，因为我看到几乎每一家创业公司，在开始融资或者与收购方谈判时，都会停滞不前。</p><p>You can’t directly control where your thoughts drift. If you’re controlling them, they’re not drifting. But you can control them indirectly, by controlling what situations you let yourself get into. That has been the lesson for me: be careful what you let become critical to you. Try to get yourself into situations where the most urgent problems are ones you want to think about.</p><p>你无法直接控制自己的思绪飘向何方。如果思绪在你的控制之下，那它们就不是在自由飘荡了。但你可以通过控制自己所处的环境，来间接控制思绪。这就是我从中得到的教训：要小心那些你让其变得至关重要的事情。努力让自己处于这样的境地：最紧急的问题是你自己想思考的。</p><p>You don’t have complete control, of course. An emergency could push other thoughts out of your head. But barring emergencies you have a good deal of indirect control over what becomes the top idea in your mind.</p><p>当然，你不可能完全掌控。突发情况可能会把其他想法从你脑海中挤出去。但在没有突发情况的情况下，你对心中的首要念头有很大的间接控制权。</p><p>I’ve found there are two types of thoughts especially worth avoiding — thoughts like the Nile Perch in the way they push out more interesting ideas. One I’ve already mentioned: thoughts about money. Getting money is almost by definition an attention sink. The other is disputes. These too are engaging in the wrong way: they have the same velcro-like shape as genuinely interesting ideas, but without the substance. So avoid disputes if you want to get real work done. [3]</p><p>我发现有两种想法尤其值得避免 —— 它们就像尼罗河鲈鱼一样，会把更有趣的想法排挤出去。一种我已经提到过了：与钱有关的想法。按理说，赚钱几乎就是一个注意力黑洞。另一种是争论。争论也会以错误的方式占据你的注意力：它们和真正有趣的想法一样，都像有魔力似的吸引人，但却没有实质内容。所以，如果你想做真正的工作，就要避免争论。[3]</p><p>Even Newton fell into this trap. After publishing his theory of colors in 1672 he found himself distracted by disputes for years, finally concluding that the only solution was to stop publishing:</p><p>就连牛顿也掉进过这个陷阱。1672 年发表了他的色彩理论后，他发现自己多年来一直被争论所困扰，最后得出结论：唯一的解决办法就是停止发表作品：</p><p>I see I have made myself a slave to Philosophy, but if I get free of Mr Linus’s business I will resolutely bid adew to it eternally, excepting what I do for my privat satisfaction or leave to come out after me. For I see a man must either resolve to put out nothing new or become a slave to defend it. [4]</p><p>“我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事，我会坚决永远告别哲学，除非是为了个人满足而做的事，或者留到我死后再发表。因为我明白，一个人要么决心不发表任何新东西，要么就会成为捍卫它的奴隶。”[4]</p><p>Linus and his students at Liege were among the more tenacious critics. Newton’s biographer Westfall seems to feel he was overreacting:</p><p>列日的莱纳斯和他的学生是其中最固执的批评者。牛顿的传记作者韦斯特福尔似乎觉得他反应过度了：</p><p>Recall that at the time he wrote, Newton’s “slavery” consisted of five replies to Liege, totalling fourteen printed pages, over the course of a year.</p><p>回想一下，在他写这封信的时候，牛顿的 “奴役” 不过是在一年的时间里，对列日的批评做出了五次回应，总共 14 页印刷内容。</p><p>I’m more sympathetic to Newton. The problem was not the 14 pages, but the pain of having this stupid controversy constantly reintroduced as the top idea in a mind that wanted so eagerly to think about other things.</p><p>我更能理解牛顿。问题不在于那 14 页文字，而在于这种愚蠢的争论不断地成为他脑海中的首要念头，而他其实迫切地想思考其他事情，这太痛苦了。</p><p>Turning the other cheek turns out to have selfish advantages. Someone who does you an injury hurts you twice: first by the injury itself, and second by taking up your time afterward thinking about it. If you learn to ignore injuries you can at least avoid the second half. I’ve found I can to some extent avoid thinking about nasty things people have done to me by telling myself: this doesn’t deserve space in my head. I’m always delighted to find I’ve forgotten the details of disputes, because that means I hadn’t been thinking about them. My wife thinks I’m more forgiving than she is, but my motives are purely selfish.</p><p>事实证明，宽容待人有其自私的好处。伤害你的人会伤害你两次：第一次是伤害本身，第二次是让你在事后花时间去想它。如果你学会忽略伤害，至少可以避免第二次伤害。我发现，通过告诉自己 “这不值得占据我的思绪”，我在某种程度上可以避免去想别人对我做的讨厌事。当我发现自己已经忘记了争论的细节时，我总是很高兴，因为这意味着我没有一直在想它们。我妻子认为我比她更宽容，但我的动机纯粹是自私的。</p><p>I suspect a lot of people aren’t sure what’s the top idea in their mind at any given time. I’m often mistaken about it. I tend to think it’s the idea I’d want to be the top one, rather than the one that is. But it’s easy to figure this out: just take a shower. What topic do your thoughts keep returning to? If it’s not what you want to be thinking about, you may want to change something.</p><p>我怀疑很多人并不清楚在某个时刻自己心中的首要念头是什么。我自己也经常判断错误。我往往会认为那是我希望成为首要念头的想法，而不是实际的那个。但要弄清楚这一点很容易：只需洗个澡。你的思绪会不断回到哪个话题上？如果那不是你想思考的事情，你可能就需要做出一些改变了。</p><p>Notes</p><p>[1] No doubt there are already names for this type of thinking, but I call it “ambient thought.”</p><p>[1] 毫无疑问，这种思考方式可能已经有了名称，但我称之为 “环境式思考”。</p><p>[2] This was made particularly clear in our case, because neither of the funds we raised was difficult, and yet in both cases the process dragged on for months. Moving large amounts of money around is never something people treat casually. The attention required increases with the amount—maybe not linearly, but definitely monotonically.</p><p>[2] 这在我们的案例中表现得尤为明显，因为我们筹集的两笔资金都不算困难，但两次过程都拖了好几个月。大笔资金的流动，人们向来不会掉以轻心。所需的注意力会随着金额的增加而增加 —— 可能不是线性的，但肯定是单调递增的。</p><p>[3] Corollary: Avoid becoming an administrator, or your job will consist of dealing with money and disputes.</p><p>[3] 推论：避免成为管理者，否则你的工作就会充斥着与钱和争论相关的事情。</p><p>[4] Letter to Oldenburg, quoted in Westfall, Richard, Life of Isaac Newton, p. 107.</p><p>[4] 致奥登堡的信，引自理查德・韦斯特福尔《牛顿传》，第 107 页。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么书呆子不受欢迎</title>
    <link href="/2025/07/30/why-nerds-are-unpopular/"/>
    <url>/2025/07/30/why-nerds-are-unpopular/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-Nerds-are-Unpopular"><a href="#Why-Nerds-are-Unpopular" class="headerlink" title="Why Nerds are Unpopular"></a>Why Nerds are Unpopular</h2><p>原文链接: <a href="https://paulgraham.com/nerds.html">https://paulgraham.com/nerds.html</a></p><p>February 2003</p><p>When we were in junior high school, my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do, because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down’s Syndrome, what in the language of the time we called “retards.”</p><p>初中时，我和朋友里奇曾根据受欢迎程度给学校的午餐桌画了一张地图。这事儿不难，因为孩子们只和与自己受欢迎程度相近的人一起吃饭。我们把桌子从 A 到 E 分级：A 桌坐满了足球运动员、啦啦队员之类的人；E 桌则是那些患有轻度唐氏综合征的孩子，按当时的说法，我们叫他们 “傻子”。</p><p>We sat at a D table, as low as you could get without looking physically different. We were not being especially candid to grade ourselves as D. It would have taken a deliberate lie to say otherwise. Everyone in the school knew exactly how popular everyone else was, including us.</p><p>我们坐在 D 桌 —— 在外表和别人没差别的情况下，这已经是最低等级了。给自个儿评 D 并非过分坦诚，要说别的，那才是故意撒谎。全校每个人都清楚彼此的受欢迎程度，我们也不例外。</p><p>My stock gradually rose during high school. Puberty finally arrived; I became a decent soccer player; I started a scandalous underground newspaper. So I’ve seen a good part of the popularity landscape.</p><p>高中时，我的 “等级” 慢慢上升了：青春期终于到来，我成了还不错的足球选手，还办了一份引起轰动的地下报纸。所以，我对 “受欢迎” 这事儿的方方面面还算了解。</p><p>I know a lot of people who were nerds in school, and they all tell the same story: there is a strong correlation between being smart and being a nerd, and an even stronger inverse correlation between being a nerd and being popular. Being smart seems to make you unpopular.</p><p>我认识很多上学时是书呆子的人，他们的经历如出一辙：聪明和书呆子气之间有很强的相关性，而书呆子气和受欢迎程度之间的负相关更强。似乎聪明就会让你不受欢迎。</p><p>Why? To someone in school now, that may seem an odd question to ask. The mere fact is so overwhelming that it may seem strange to imagine that it could be any other way. But it could. Being smart doesn’t make you an outcast in elementary school. Nor does it harm you in the real world. Nor, as far as I can tell, is the problem so bad in most other countries. But in a typical American secondary school, being smart is likely to make your life difficult. Why?</p><p>为什么？对现在还在上学的人来说，这问题可能有点奇怪。事实太明显了，以至于很难想象还有别的可能。但其实是有的：在小学，聪明不会让你成为异类；在现实世界，聪明也不会对你不利；而且据我所知，在其他大多数国家，这问题也没这么严重。但在典型的美国中学里，聪明很可能会让你的日子不好过。为什么？</p><p>The key to this mystery is to rephrase the question slightly. Why don’t smart kids make themselves popular? If they’re so smart, why don’t they figure out how popularity works and beat the system, just as they do for standardized tests?</p><p>解开这个谜团的关键，是把问题换个说法：为什么聪明的孩子不让自己变得受欢迎？既然他们这么聪明，为什么不像应对标准化考试那样，搞懂受欢迎的门道，然后 “玩转规则” 呢？</p><p>One argument says that this would be impossible, that the smart kids are unpopular because the other kids envy them for being smart, and nothing they could do could make them popular. I wish. If the other kids in junior high school envied me, they did a great job of concealing it. And in any case, if being smart were really an enviable quality, the girls would have broken ranks. The guys that guys envy, girls like.</p><p>有一种说法是这不可能：聪明的孩子不受欢迎，是因为其他孩子嫉妒他们的聪明，所以无论他们做什么都没用。但愿如此吧。要是初中时其他孩子真嫉妒我，那他们可太会掩饰了。而且，要是聪明真的是值得羡慕的特质，女孩们早就该 “叛变” 了 —— 男孩们嫉妒的人，女孩们往往会喜欢。</p><p>In the schools I went to, being smart just didn’t matter much. Kids didn’t admire it or despise it. All other things being equal, they would have preferred to be on the smart side of average rather than the dumb side, but intelligence counted far less than, say, physical appearance, charisma, or athletic ability.</p><p>在我就读的学校里，聪明根本不算什么。孩子们既不崇拜，也不鄙视聪明。其他条件相同的话，他们或许更愿意做中等偏上的聪明人，而不是笨蛋，但智力的重要性远不及外貌、魅力或运动能力。</p><p>So if intelligence in itself is not a factor in popularity, why are smart kids so consistently unpopular? The answer, I think, is that they don’t really want to be popular.</p><p>既然智力本身和受欢迎程度无关，那为什么聪明的孩子总是不受欢迎？我觉得答案是：他们其实并不想受欢迎。</p><p>If someone had told me that at the time, I would have laughed at him. Being unpopular in school makes kids miserable, some of them so miserable that they commit suicide. Telling me that I didn’t want to be popular would have seemed like telling someone dying of thirst in a desert that he didn’t want a glass of water. Of course I wanted to be popular.</p><p>要是当时有人这么跟我说，我肯定会笑他。在学校不受欢迎会让孩子痛苦，有些孩子甚至会因此自杀。说我不想受欢迎，就像对沙漠里快渴死的人说他不想要一杯水一样荒唐。我当然想受欢迎。</p><p>But in fact I didn’t, not enough. There was something else I wanted more: to be smart. Not simply to do well in school, though that counted for something, but to design beautiful rockets, or to write well, or to understand how to program computers. In general, to make great things.</p><p>但事实是，我没那么想 —— 至少没那么强烈。我有更想追求的东西：变得聪明。这不只是在学校考个好成绩（虽然那也有点用），而是设计漂亮的火箭、写好文章，或是搞懂怎么编程。总的来说，是创造伟大的事物。</p><p>At the time I never tried to separate my wants and weigh them against one another. If I had, I would have seen that being smart was more important. If someone had offered me the chance to be the most popular kid in school, but only at the price of being of average intelligence (humor me here), I wouldn’t have taken it.</p><p>那时候我从没试着把自己的欲望分开权衡。要是权衡过，我就会发现 “变聪明” 更重要。要是有人说能让我成为全校最受欢迎的孩子，但条件是我的智力得降到平均水平（姑且这么假设），我是不会答应的。</p><p>Much as they suffer from their unpopularity, I don’t think many nerds would. To them the thought of average intelligence is unbearable. But most kids would take that deal. For half of them, it would be a step up. Even for someone in the eightieth percentile (assuming, as everyone seemed to then, that intelligence is a scalar), who wouldn’t drop thirty points in exchange for being loved and admired by everyone?</p><p>尽管不受欢迎让书呆子们很难受，但我觉得大多数人都不会接受这个交易。对他们来说，“智力平平” 是无法忍受的。但大多数孩子会接受 —— 对一半的人来说，这都是进步。就算是智力排在前 20% 的人（按当时大家的理解，智力是单一维度的），谁不想用 30 分的智力换所有人的喜爱和崇拜呢？</p><p>And that, I think, is the root of the problem. Nerds serve two masters. They want to be popular, certainly, but they want even more to be smart. And popularity is not something you can do in your spare time, not in the fiercely competitive environment of an American secondary school.</p><p>我想，这就是问题的根源。书呆子有两个 “主人”：他们当然想受欢迎，但更想变聪明。而在竞争激烈的美国中学里，受欢迎这事儿可没法在 “业余时间” 搞定。</p><p>Alberti, arguably the archetype of the Renaissance Man, writes that “no art, however minor, demands less than total dedication if you want to excel in it.” I wonder if anyone in the world works harder at anything than American school kids work at popularity. Navy SEALs and neurosurgery residents seem slackers by comparison. They occasionally take vacations; some even have hobbies. An American teenager may work at being popular every waking hour, 365 days a year.</p><p>阿尔贝蒂 —— 可以说是文艺复兴时期 “全才” 的典范 —— 曾写道：“任何技艺，无论多微不足道，若想精通，都需全身心投入。” 我怀疑这世上有没有人比美国学生为了受欢迎更拼命。相比之下，海豹突击队队员和神经外科住院医生都像懒汉 —— 他们偶尔还能休假，有些人甚至有爱好。而美国青少年可能一年 365 天，醒着的每一刻都在为 “受欢迎” 努力。</p><p>I don’t mean to suggest they do this consciously. Some of them truly are little Machiavellis, but what I really mean here is that teenagers are always on duty as conformists.</p><p>我不是说他们是有意识地这么做。有些孩子确实像小马基雅维利，但我真正想表达的是：青少年时刻都在 “扮演” 合群的人。</p><p>For example, teenage kids pay a great deal of attention to clothes. They don’t consciously dress to be popular. They dress to look good. But to who? To the other kids. Other kids’ opinions become their definition of right, not just for clothes, but for almost everything they do, right down to the way they walk. And so every effort they make to do things “right” is also, consciously or not, an effort to be more popular.</p><p>比如，青少年很在意穿着。他们不是故意穿得受欢迎，而是想穿得好看。但 “好看” 是给谁看的？给其他孩子看。其他孩子的看法成了他们判断 “正确” 的标准 —— 不仅是衣服，几乎所有事都如此，甚至包括走路的姿势。所以，他们为 “做好一件事” 付出的所有努力，无论有意识还是无意识，都是为了更受欢迎。</p><p>Nerds don’t realize this. They don’t realize that it takes work to be popular. In general, people outside some very demanding field don’t realize the extent to which success depends on constant (though often unconscious) effort. For example, most people seem to consider the ability to draw as some kind of innate quality, like being tall. In fact, most people who “can draw” like drawing, and have spent many hours doing it; that’s why they’re good at it. Likewise, popular isn’t just something you are or you aren’t, but something you make yourself.</p><p>书呆子没意识到这一点。他们没意识到 “受欢迎” 需要付出努力。一般来说，不在某个高要求领域的人，都意识不到成功需要持续（往往是无意识的）的努力。比如，大多数人觉得画画是一种天赋，就像长得高一样。但事实上，大多数 “会画画” 的人是因为喜欢画，花了很多时间练习，所以才擅长。同理，受欢迎不是 “是” 或 “不是” 的状态，而是需要自己去争取的。</p><p>The main reason nerds are unpopular is that they have other things to think about. Their attention is drawn to books or the natural world, not fashions and parties. They’re like someone trying to play soccer while balancing a glass of water on his head. Other players who can focus their whole attention on the game beat them effortlessly, and wonder why they seem so incapable.</p><p>书呆子不受欢迎的主要原因是：他们有其他事情要思考。他们的注意力在书本或自然世界上，而不是时尚和派对。这就像有人想一边踢足球，一边在头顶平衡一杯水。其他能全神贯注踢球的人会轻松击败他们，还会纳闷他们怎么这么笨。</p><p>Even if nerds cared as much as other kids about popularity, being popular would be more work for them. The popular kids learned to be popular, and to want to be popular, the same way the nerds learned to be smart, and to want to be smart: from their parents. While the nerds were being trained to get the right answers, the popular kids were being trained to please.</p><p>就算书呆子和其他孩子一样在乎受欢迎，对他们来说，变受欢迎也要更费劲。受欢迎的孩子学会受欢迎、渴望受欢迎的方式，和书呆子学会变聪明、渴望变聪明的方式一样 —— 都是从父母那里学来的。当书呆子被训练着 “得出正确答案” 时，受欢迎的孩子正被训练着 “讨人喜欢”。</p><p>So far I’ve been finessing the relationship between smart and nerd, using them as if they were interchangeable. In fact it’s only the context that makes them so. A nerd is someone who isn’t socially adept enough. But “enough” depends on where you are. In a typical American school, standards for coolness are so high (or at least, so specific) that you don’t have to be especially awkward to look awkward by comparison.</p><p>到目前为止，我一直在模糊 “聪明” 和 “书呆子” 的关系，把它们当同义词用。但其实这取决于环境。书呆子是那些社交能力不够的人，但 “够不够” 要看具体场合。在典型的美国学校里，“酷” 的标准太高（或者说太特殊），所以哪怕你只是稍微有点笨拙，看起来也会很显眼。</p><p>Few smart kids can spare the attention that popularity requires. Unless they also happen to be good-looking, natural athletes, or siblings of popular kids, they’ll tend to become nerds. And that’s why smart people’s lives are worst between, say, the ages of eleven and seventeen. Life at that age revolves far more around popularity than before or after.</p><p>很少有聪明的孩子能分出足够的精力去追求受欢迎。除非他们碰巧长得好看、是天生的运动员，或是受欢迎孩子的兄弟姐妹，否则他们很可能会变成书呆子。这就是为什么聪明人在 11 到 17 岁左右的日子最难过 —— 这个年纪的生活，远比之前或之后更围绕 “受欢迎” 展开。</p><p>Before that, kids’ lives are dominated by their parents, not by other kids. Kids do care what their peers think in elementary school, but this isn’t their whole life, as it later becomes.</p><p>在这之前，孩子的生活由父母主导，而不是同龄人。小学时，孩子确实在乎同伴的看法，但这不是他们生活的全部，后来却成了全部。</p><p>Around the age of eleven, though, kids seem to start treating their family as a day job. They create a new world among themselves, and standing in this world is what matters, not standing in their family. Indeed, being in trouble in their family can win them points in the world they care about.</p><p>但到了 11 岁左右，孩子们似乎开始把家庭当成 “日常任务”。他们在彼此之间创造了一个新世界，在这个世界里的地位才重要，而不是在家庭里的地位。事实上，在家庭里惹麻烦，甚至能在他们在乎的那个世界里加分。</p><p>The problem is, the world these kids create for themselves is at first a very crude one. If you leave a bunch of eleven-year-olds to their own devices, what you get is Lord of the Flies. Like a lot of American kids, I read this book in school. Presumably it was not a coincidence. Presumably someone wanted to point out to us that we were savages, and that we had made ourselves a cruel and stupid world. This was too subtle for me. While the book seemed entirely believable, I didn’t get the additional message. I wish they had just told us outright that we were savages and our world was stupid.</p><p>问题是，孩子们为自己创造的这个世界，一开始非常粗糙。要是让一群 11 岁的孩子自己待着，结果就会像《蝇王》里写的那样。和很多美国孩子一样，我在学校里读过这本书。这大概不是巧合 —— 大概有人想告诉我们，我们是野蛮人，我们创造了一个残酷又愚蠢的世界。但这对我来说太隐晦了。虽然书里的内容看起来完全可信，但我没 get 到那个深层信息。真希望他们直接告诉我们：我们是野蛮人，我们的世界很愚蠢。</p><p>Nerds would find their unpopularity more bearable if it merely caused them to be ignored. Unfortunately, to be unpopular in school is to be actively persecuted.</p><p>要是不受欢迎仅仅意味着被忽视，书呆子或许还能忍受。但不幸的是，在学校里不受欢迎，就意味着会被主动排挤。</p><p>Why? Once again, anyone currently in school might think this a strange question to ask. How could things be any other way? But they could be. Adults don’t normally persecute nerds. Why do teenage kids do it?</p><p>为什么？现在还在上学的人可能又会觉得这问题很奇怪 —— 事情难道还能是别的样子吗？但确实可以是别的样子。成年人一般不会排挤书呆子，为什么青少年会呢？</p><p>Partly because teenagers are still half children, and many children are just intrinsically cruel. Some torture nerds for the same reason they pull the legs off spiders. Before you develop a conscience, torture is amusing.</p><p>部分原因是，青少年还半是孩子，很多孩子天生就残忍。有些孩子折磨书呆子，就像他们扯掉蜘蛛的腿一样 —— 在良知形成之前，折磨是有趣的。</p><p>Another reason kids persecute nerds is to make themselves feel better. When you tread water, you lift yourself up by pushing water down. Likewise, in any social hierarchy, people unsure of their own position will try to emphasize it by maltreating those they think rank below. I’ve read that this is why poor whites in the United States are the group most hostile to blacks.</p><p>另一个原因是，孩子们通过排挤书呆子来自我安慰。就像踩水时，你要把水往下推才能让自己浮起来。同理，在任何社会等级中，对自己地位不确定的人，会通过欺负他们认为等级更低的人来强调自己的地位。我读过相关内容，说这就是为什么美国的贫穷白人是对黑人最不友好的群体。</p><p>But I think the main reason other kids persecute nerds is that it’s part of the mechanism of popularity. Popularity is only partially about individual attractiveness. It’s much more about alliances. To become more popular, you need to be constantly doing things that bring you close to other popular people, and nothing brings people closer than a common enemy.</p><p>但我觉得，其他孩子排挤书呆子的主要原因是：这是 “受欢迎机制” 的一部分。受欢迎不仅取决于个人魅力，更多取决于 “联盟”。要想更受欢迎，你得不断做些能让自己和其他受欢迎的人拉近距离的事，而没有什么比共同的敌人更能拉近人了。</p><p>Like a politician who wants to distract voters from bad times at home, you can create an enemy if there isn’t a real one. By singling out and persecuting a nerd, a group of kids from higher in the hierarchy create bonds between themselves. Attacking an outsider makes them all insiders. This is why the worst cases of bullying happen with groups. Ask any nerd: you get much worse treatment from a group of kids than from any individual bully, however sadistic.</p><p>就像政客想转移选民对国内困境的注意力一样，要是没有真正的敌人，你可以创造一个。通过孤立和排挤某个书呆子，一群等级更高的孩子能巩固彼此的关系。攻击外来者，能让他们都成为 “自己人”。这就是为什么最严重的欺凌往往是群体性的。问问任何一个书呆子就知道：一群孩子的欺负，比任何单个恶霸的虐待都要可怕，无论那个恶霸多残忍。</p><p>If it’s any consolation to the nerds, it’s nothing personal. The group of kids who band together to pick on you are doing the same thing, and for the same reason, as a bunch of guys who get together to go hunting. They don’t actually hate you. They just need something to chase.</p><p>要是能给书呆子一点安慰的话，那就是：这不是针对个人。那些联合起来欺负你的孩子，和一群一起去打猎的人做的是同一件事，原因也一样 —— 他们不是真的恨你，只是需要个东西来追。</p><p>Because they’re at the bottom of the scale, nerds are a safe target for the entire school. If I remember correctly, the most popular kids don’t persecute nerds; they don’t need to stoop to such things. Most of the persecution comes from kids lower down, the nervous middle classes.</p><p>因为书呆子处于等级的最底层，所以他们成了全校都能安全攻击的目标。我记得很清楚，最受欢迎的孩子不会排挤书呆子 —— 他们没必要降低身份做这种事。大多数排挤来自中间阶层的孩子，那些焦虑的 “中产”。</p><p>The trouble is, there are a lot of them. The distribution of popularity is not a pyramid, but tapers at the bottom like a pear. The least popular group is quite small. (I believe we were the only D table in our cafeteria map.) So there are more people who want to pick on nerds than there are nerds.</p><p>麻烦的是，这种孩子太多了。受欢迎程度的分布不是金字塔，而是像梨一样，底部很尖。最不受欢迎的群体非常小（我记得我们的午餐桌地图里，D 桌只有我们）。所以，想欺负书呆子的人，比书呆子本身还多。</p><p>As well as gaining points by distancing oneself from unpopular kids, one loses points by being close to them. A woman I know says that in high school she liked nerds, but was afraid to be seen talking to them because the other girls would make fun of her. Unpopularity is a communicable disease; kids too nice to pick on nerds will still ostracize them in self-defense.</p><p>除了通过疏远不受欢迎的人来加分，和他们走得近还会减分。我认识一个女人说，高中时她喜欢书呆子，但不敢让人看到她和他们说话，因为其他女孩会嘲笑她。不受欢迎是一种 “传染病”—— 就算是不忍心欺负书呆子的孩子，为了自保也会疏远他们。</p><p>It’s no wonder, then, that smart kids tend to be unhappy in middle school and high school. Their other interests leave them little attention to spare for popularity, and since popularity resembles a zero-sum game, this in turn makes them targets for the whole school. And the strange thing is, this nightmare scenario happens without any conscious malice, merely because of the shape of the situation.</p><p>难怪聪明的孩子在初中和高中容易不开心。他们的其他兴趣让他们没精力去追求受欢迎，而由于受欢迎就像零和游戏，这反过来又让他们成了全校的目标。奇怪的是，这种噩梦般的场景并非源于刻意的恶意，只是由环境本身的结构造成的。</p><p>For me the worst stretch was junior high, when kid culture was new and harsh, and the specialization that would later gradually separate the smarter kids had barely begun. Nearly everyone I’ve talked to agrees: the nadir is somewhere between eleven and fourteen.</p><p>对我来说，最糟糕的是初中时期 —— 那时候，“孩子文化” 刚形成，还很残酷，而后来能逐渐把聪明孩子分开的 “专业化” 才刚刚开始。几乎所有我聊过的人都同意：低谷在 11 到 14 岁之间。</p><p>In our school it was eighth grade, which was ages twelve and thirteen for me. There was a brief sensation that year when one of our teachers overheard a group of girls waiting for the school bus, and was so shocked that the next day she devoted the whole class to an eloquent plea not to be so cruel to one another.</p><p>我们学校是八年级，那时我 12 到 13 岁。那年有件事引起了短暂的轰动：一位老师无意中听到一群女孩在等校车时的谈话，震惊之下，第二天整堂课都在慷慨陈词，呼吁她们不要对彼此那么残忍。</p><p>It didn’t have any noticeable effect. What struck me at the time was that she was surprised. You mean she doesn’t know the kind of things they say to one another? You mean this isn’t normal?</p><p>但这没什么明显效果。当时让我震惊的是她的 “惊讶”—— 难道她不知道她们会对彼此说这种话吗？难道这不是正常的吗？</p><p>It’s important to realize that, no, the adults don’t know what the kids are doing to one another. They know, in the abstract, that kids are monstrously cruel to one another, just as we know in the abstract that people get tortured in poorer countries. But, like us, they don’t like to dwell on this depressing fact, and they don’t see evidence of specific abuses unless they go looking for it.</p><p>重要的是要明白：不，成年人根本不知道孩子们在彼此做什么。他们抽象地知道，孩子们会残忍地对待彼此，就像我们抽象地知道贫穷国家有人遭受酷刑一样。但和我们一样，他们不想细想这个令人沮丧的事实，而且除非刻意去看，否则他们看不到具体的虐待证据。</p><p>Public school teachers are in much the same position as prison wardens. Wardens’ main concern is to keep the prisoners on the premises. They also need to keep them fed, and as far as possible prevent them from killing one another. Beyond that, they want to have as little to do with the prisoners as possible, so they leave them to create whatever social organization they want. From what I’ve read, the society that the prisoners create is warped, savage, and pervasive, and it is no fun to be at the bottom of it.</p><p>公立学校的老师，处境很像监狱看守。看守最关心的是把囚犯关在范围内，给他们饭吃，尽可能防止他们互相残杀。除此之外，他们不想和囚犯有太多交集，所以让他们自己形成社会结构。据我所知，囚犯们创造的社会是扭曲、野蛮且无处不在的，处于底层的人日子尤其难过。</p><p>In outline, it was the same at the schools I went to. The most important thing was to stay on the premises. While there, the authorities fed you, prevented overt violence, and made some effort to teach you something. But beyond that they didn’t want to have too much to do with the kids. Like prison wardens, the teachers mostly left us to ourselves. And, like prisoners, the culture we created was barbaric.</p><p>我就读的学校，大体也是如此。最重要的是把孩子留在校园里。在学校里，校方给他们饭吃，阻止公然的暴力，还会努力教点东西。但除此之外，他们不想和孩子有太多牵扯。就像监狱看守一样，老师大多让我们自生自灭。而我们创造的文化，也像囚犯的文化一样野蛮。</p><p>Why is the real world more hospitable to nerds? It might seem that the answer is simply that it’s populated by adults, who are too mature to pick on one another. But I don’t think this is true. Adults in prison certainly pick on one another. And so, apparently, do society wives; in some parts of Manhattan, life for women sounds like a continuation of high school, with all the same petty intrigues.</p><p>为什么现实世界对书呆子更友好？似乎答案是：现实世界里都是成年人，他们成熟到不会互相排挤。但我不这么认为。监狱里的成年人当然会互相排挤，显然，某些社交圈里的贵妇也是如此 —— 在曼哈顿的某些地方，女人的生活听起来就像高中的延续，充满了同样琐碎的勾心斗角。</p><p>I think the important thing about the real world is not that it’s populated by adults, but that it’s very large, and the things you do have real effects. That’s what school, prison, and ladies-who-lunch all lack. The inhabitants of all those worlds are trapped in little bubbles where nothing they do can have more than a local effect. Naturally these societies degenerate into savagery. They have no function for their form to follow.</p><p>我觉得现实世界的关键不是 “都是成年人”，而是它足够大，而且你做的事会产生真实的影响。这正是学校、监狱和 “贵妇社交圈” 所缺乏的。在那些世界里，人们被困在小泡泡里，做什么都只能产生局部影响。这种社会自然会堕落成野蛮状态 —— 它们的形式没有对应的功能。</p><p>When the things you do have real effects, it’s no longer enough just to be pleasing. It starts to be important to get the right answers, and that’s where nerds show to advantage. Bill Gates will of course come to mind. Though notoriously lacking in social skills, he gets the right answers, at least as measured in revenue.</p><p>当你做的事有真实影响时，仅仅 “讨人喜欢” 就不够了。“得出正确答案” 开始变得重要，而这正是书呆子的优势。比尔・盖茨就是个例子 —— 尽管他的社交能力出了名地差，但他能得出正确答案（至少从收入来看是这样）。</p><p>The other thing that’s different about the real world is that it’s much larger. In a large enough pool, even the smallest minorities can achieve a critical mass if they clump together. Out in the real world, nerds collect in certain places and form their own societies where intelligence is the most important thing. Sometimes the current even starts to flow in the other direction: sometimes, particularly in university math and science departments, nerds deliberately exaggerate their awkwardness in order to seem smarter. John Nash so admired Norbert Wiener that he adopted his habit of touching the wall as he walked down a corridor.</p><p>现实世界的另一个不同是它足够大。在足够大的群体里，哪怕是最小的少数群体，只要聚集起来就能形成 “临界质量”。在现实世界里，书呆子会聚集在某些地方，形成自己的社会，在那里智力是最重要的。有时风向甚至会反过来：尤其是在大学的数学系和科学系，书呆子会故意放大自己的笨拙，来显得更聪明。约翰・纳什非常崇拜诺伯特・维纳，甚至学他走路时扶着墙的习惯。</p><p>As a thirteen-year-old kid, I didn’t have much more experience of the world than what I saw immediately around me. The warped little world we lived in was, I thought, the world. The world seemed cruel and boring, and I’m not sure which was worse.</p><p>13 岁时，我的眼界只限于眼前的世界。我以为我们生活的那个扭曲的小世界就是全部世界。这个世界既残酷又无聊，我都不知道哪个更糟。</p><p>Because I didn’t fit into this world, I thought that something must be wrong with me. I didn’t realize that the reason we nerds didn’t fit in was that in some ways we were a step ahead. We were already thinking about the kind of things that matter in the real world, instead of spending all our time playing an exacting but mostly pointless game like the others.</p><p>因为我不适应这个世界，我觉得一定是自己有问题。但我没意识到，书呆子不适应的原因，在某些方面是因为我们领先了一步 —— 我们已经在思考现实世界中重要的事，而不是像其他人那样，把所有时间都花在玩一个严苛却多半无意义的游戏上。</p><p>We were a bit like an adult would be if he were thrust back into middle school. He wouldn’t know the right clothes to wear, the right music to like, the right slang to use. He’d seem to the kids a complete alien. The thing is, he’d know enough not to care what they thought. We had no such confidence.</p><p>我们有点像突然被扔回初中的成年人 —— 他不知道该穿什么衣服、该喜欢什么音乐、该说什么俚语，在孩子们看来就是个彻头彻尾的异类。但关键是，他知道不必在乎孩子们的看法。而我们没有这种自信。</p><p>A lot of people seem to think it’s good for smart kids to be thrown together with “normal” kids at this stage of their lives. Perhaps. But in at least some cases the reason the nerds don’t fit in really is that everyone else is crazy. I remember sitting in the audience at a “pep rally” at my high school, watching as the cheerleaders threw an effigy of an opposing player into the audience to be torn to pieces. I felt like an explorer witnessing some bizarre tribal ritual.</p><p>很多人似乎认为，让聪明的孩子在这个阶段和 “正常” 孩子混在一起是好事。或许吧。但至少在某些情况下，书呆子不适应的原因，真的是其他人太疯狂了。我记得高中时坐在 “ pep rally”（动员大会）的观众席上，看着啦啦队员把对手球员的模拟像扔到观众席上让大家撕碎，感觉自己像个探险家，目睹着某种怪异的部落仪式。</p><p>If I could go back and give my thirteen year old self some advice, the main thing I’d tell him would be to stick his head up and look around. I didn’t really grasp it at the time, but the whole world we lived in was as fake as a Twinkie. Not just school, but the entire town. Why do people move to suburbia? To have kids! So no wonder it seemed boring and sterile. The whole place was a giant nursery, an artificial town created explicitly for the purpose of breeding children.</p><p>要是能回到过去，给 13 岁的自己一点建议，我最想说的是：抬起头，看看周围。那时候我没意识到，我们生活的整个世界，就像奶油蛋糕一样虚假 —— 不只是学校，整个小镇都是。人们为什么搬到郊区？为了养孩子！所以难怪这里显得无聊又乏味 —— 整个地方就是个巨大的托儿所，一个为了养孩子而刻意创造的人造小镇。</p><p>Where I grew up, it felt as if there was nowhere to go, and nothing to do. This was no accident. Suburbs are deliberately designed to exclude the outside world, because it contains things that could endanger children.</p><p>我长大的地方，感觉无处可去，无事可做。这不是偶然 —— 郊区的设计就是为了隔绝外部世界，因为外部世界有会伤害孩子的东西。</p><p>And as for the schools, they were just holding pens within this fake world. Officially the purpose of schools is to teach kids. In fact their primary purpose is to keep kids locked up in one place for a big chunk of the day so adults can get things done. And I have no problem with this: in a specialized industrial society, it would be a disaster to have kids running around loose.</p><p>至于学校，不过是这个虚假世界里的 “拘留所”。官方说学校的目的是教孩子，但实际上，主要目的是把孩子关在一个地方一整天，好让成年人能做事。这一点我没意见：在一个专业化的工业社会里，让孩子乱跑会是灾难。</p><p>What bothers me is not that the kids are kept in prisons, but that (a) they aren’t told about it, and (b) the prisons are run mostly by the inmates. Kids are sent off to spend six years memorizing meaningless facts in a world ruled by a caste of giants who run after an oblong brown ball, as if this were the most natural thing in the world. And if they balk at this surreal cocktail, they’re called misfits.</p><p>让我不满的不是孩子被关在 “监狱” 里，而是：（a）没人告诉他们这一点；（b）“监狱” 主要由 “囚犯” 管理。孩子们被送去花六年时间背诵无意义的知识，而这个世界由一群追着椭圆形棕色球跑的 “巨人” 统治，仿佛这是世界上最自然的事。要是他们对这种荒诞的设定有异议，就会被叫做 “不合群的人”。</p><p>Life in this twisted world is stressful for the kids. And not just for the nerds. Like any war, it’s damaging even to the winners.</p><p>在这个扭曲的世界里，孩子们的生活充满压力 —— 不只是书呆子。就像任何战争一样，即使是赢家也会受伤。</p><p>Adults can’t avoid seeing that teenage kids are tormented. So why don’t they do something about it? Because they blame it on puberty. The reason kids are so unhappy, adults tell themselves, is that monstrous new chemicals, hormones, are now coursing through their bloodstream and messing up everything. There’s nothing wrong with the system; it’s just inevitable that kids will be miserable at that age.</p><p>成年人不可能没发现青少年在受苦，那为什么不做点什么？因为他们把这归咎于青春期。成年人告诉自己，孩子之所以不开心，是因为可怕的新化学物质 —— 荷尔蒙 —— 在他们的血液里流动，把一切都搞乱了。制度没问题，孩子在这个年纪痛苦是不可避免的。</p><p>This idea is so pervasive that even the kids believe it, which probably doesn’t help. Someone who thinks his feet naturally hurt is not going to stop to consider the possibility that he is wearing the wrong size shoes.</p><p>这种想法太普遍了，连孩子自己都信，这可能更糟。要是有人觉得自己的脚天生就疼，他是不会停下来想想可能是鞋不合脚的。</p><p>I’m suspicious of this theory that thirteen-year-old kids are intrinsically messed up. If it’s physiological, it should be universal. Are Mongol nomads all nihilists at thirteen? I’ve read a lot of history, and I have not seen a single reference to this supposedly universal fact before the twentieth century. Teenage apprentices in the Renaissance seem to have been cheerful and eager. They got in fights and played tricks on one another of course (Michelangelo had his nose broken by a bully), but they weren’t crazy.</p><p>我很怀疑 “13 岁的孩子天生就会捣乱” 这种说法。要是这是生理原因，那应该是普遍现象。蒙古游牧民族的 13 岁孩子都很虚无主义吗？我读了很多历史，没在 20 世纪之前见过任何关于这种 “普遍现象” 的记载。文艺复兴时期的学徒青少年，似乎都很快乐、很积极。他们当然也会打架、互相恶作剧（米开朗基罗的鼻子就被恶霸打断过），但他们不疯狂。</p><p>As far as I can tell, the concept of the hormone-crazed teenager is coeval with suburbia. I don’t think this is a coincidence. I think teenagers are driven crazy by the life they’re made to lead. Teenage apprentices in the Renaissance were working dogs. Teenagers now are neurotic lapdogs. Their craziness is the craziness of the idle everywhere.</p><p>据我所知，“荷尔蒙驱动的疯狂青少年” 这种概念，和郊区的出现是同时的。我觉得这不是巧合 —— 青少年被他们被迫过的生活逼疯了。文艺复兴时期的学徒是 “工作犬”，现在的青少年是 “神经质的宠物犬”。他们的疯狂，和所有无所事事的人</p><p>When I was in school, suicide was a constant topic among the smarter kids. No one I knew did it, but several planned to, and some may have tried. Mostly this was just a pose. Like other teenagers, we loved the dramatic, and suicide seemed very dramatic. But partly it was because our lives were at times genuinely miserable.</p><p>我上学时，自杀是聪明孩子间的常见话题。我认识的人中没人真的这么做，但有几个计划过，有些人可能尝试过。多数时候，这只是一种姿态 —— 和其他青少年一样，我们喜欢戏剧化的东西，而自杀看起来很有戏剧性。但部分原因是，我们的生活有时确实很痛苦。</p><p>Bullying was only part of the problem. Another problem, and possibly an even worse one, was that we never had anything real to work on. Humans like to work; in most of the world, your work is your identity. And all the work we did was pointless, or seemed so at the time.</p><p>霸凌只是问题的一部分。另一个问题，或许更严重的是，我们从来没有真正有意义的事可做。人类喜欢工作；在世界上大多数地方，工作是身份的一部分。而我们做的所有事都毫无意义，至少当时看来是这样。</p><p>At best it was practice for real work we might do far in the future, so far that we didn’t even know at the time what we were practicing for. More often it was just an arbitrary series of hoops to jump through, words without content designed mainly for testability. (The three main causes of the Civil War were…. Test: List the three main causes of the Civil War.)</p><p>往好里说，这些事是为遥远未来的真正工作做准备，但未来太远了，我们当时甚至不知道在为什么做准备。更多时候，这些事只是一系列随意设定的 “关卡”—— 空洞的文字，主要是为了方便考试。（比如：内战的三个主要原因是…… 考试题目：列出内战的三个主要原因。）</p><p>And there was no way to opt out. The adults had agreed among themselves that this was to be the route to college. The only way to escape this empty life was to submit to it.</p><p>而且没有退出的办法。大人们一致认为，这是通往大学的必经之路。逃离这种空虚生活的唯一方式，就是屈服于它。</p><p>Teenage kids used to have a more active role in society. In pre-industrial times, they were all apprentices of one sort or another, whether in shops or on farms or even on warships. They weren’t left to create their own societies. They were junior members of adult societies.</p><p>过去的青少年在社会中扮演更积极的角色。前工业化时代，他们都是某种学徒，无论是在商店、农场，甚至军舰上。他们不会被丢去自己创造社会，而是成年人社会的初级成员。</p><p>Teenagers seem to have respected adults more then, because the adults were the visible experts in the skills they were trying to learn. Now most kids have little idea what their parents do in their distant offices, and see no connection (indeed, there is precious little) between schoolwork and the work they’ll do as adults.</p><p>那时候的青少年似乎更尊重成年人，因为成年人是他们想学的技能的可见专家。现在，大多数孩子几乎不知道父母在遥远的办公室里做什么，也看不到学业和未来工作之间的联系（事实上，这种联系也确实少得可怜）。</p><p>And if teenagers respected adults more, adults also had more use for teenagers. After a couple years’ training, an apprentice could be a real help. Even the newest apprentice could be made to carry messages or sweep the workshop.</p><p>如果说过去的青少年更尊重成年人，那成年人也更需要青少年。经过几年培训，学徒就能真正帮上忙。就算是最新来的学徒，也能被派去送信或打扫车间。</p><p>Now adults have no immediate use for teenagers. They would be in the way in an office. So they drop them off at school on their way to work, much as they might drop the dog off at a kennel if they were going away for the weekend.</p><p>现在的成年人对青少年没有即时需求。他们在办公室里只会碍手碍脚。所以大人们上班时把他们送到学校，就像周末出门时把狗送到 kennel（犬舍）一样。</p><p>What happened? We’re up against a hard one here. The cause of this problem is the same as the cause of so many present ills: specialization. As jobs become more specialized, we have to train longer for them. Kids in pre-industrial times started working at about 14 at the latest; kids on farms, where most people lived, began far earlier. Now kids who go to college don’t start working full-time till 21 or 22. With some degrees, like MDs and PhDs, you may not finish your training till 30.</p><p>到底发生了什么？这是个棘手的问题。导致这个问题的原因，和导致许多现存问题的原因一样：专业化。随着工作越来越专业化，我们需要更长时间的培训。前工业化时代的孩子最晚 14 岁就开始工作；大多数人生活的农场里，孩子开始工作的时间更早。现在，上大学的孩子要到 21 或 22 岁才开始全职工作。有些学位，比如医学博士或哲学博士，可能要到 30 岁才能完成培训。</p><p>Teenagers now are useless, except as cheap labor in industries like fast food, which evolved to exploit precisely this fact. In almost any other kind of work, they’d be a net loss. But they’re also too young to be left unsupervised. Someone has to watch over them, and the most efficient way to do this is to collect them together in one place. Then a few adults can watch all of them.</p><p>现在的青少年没什么用，除了在快餐等行业做廉价劳动力 —— 这些行业的发展正是为了利用这一点。在几乎所有其他工作中，他们都是 “净亏损”。但他们又太年轻，不能没人看管。总得有人看着他们，最有效的方式就是把他们集中在一个地方，让几个成年人就能看管所有人。</p><p>If you stop there, what you’re describing is literally a prison, albeit a part-time one. The problem is, many schools practically do stop there. The stated purpose of schools is to educate the kids. But there is no external pressure to do this well. And so most schools do such a bad job of teaching that the kids don’t really take it seriously– not even the smart kids. Much of the time we were all, students and teachers both, just going through the motions.</p><p>如果事情只到这一步，那描述的简直就是监狱，尽管是兼职的。问题是，很多学校实际上就止步于此。学校宣称的目的是教育孩子，但没有外部压力要求他们做好这件事。所以大多数学校教得一塌糊涂，孩子们根本不当回事 —— 即使是聪明的孩子也一样。很多时候，我们所有人，无论是学生还是老师，都只是在走过场。</p><p>In my high school French class we were supposed to read Hugo’s Les Miserables. I don’t think any of us knew French well enough to make our way through this enormous book. Like the rest of the class, I just skimmed the Cliff’s Notes. When we were given a test on the book, I noticed that the questions sounded odd. They were full of long words that our teacher wouldn’t have used. Where had these questions come from? From the Cliff’s Notes, it turned out. The teacher was using them too. We were all just pretending.</p><p>我高中的法语课上，我们本该读雨果的《悲惨世界》。但我觉得我们中没人的法语好到能读懂这本巨著。和班上其他人一样，我只是浏览了《克利夫笔记》（名著摘要）。考试时，我发现题目听起来很奇怪 —— 满是老师不会用的长单词。这些题目来自哪里？结果是《克利夫笔记》。老师也在用。我们都在装样子。</p><p>There are certainly great public school teachers. The energy and imagination of my fourth grade teacher, Mr. Mihalko, made that year something his students still talk about, thirty years later. But teachers like him were individuals swimming upstream. They couldn’t fix the system.</p><p>当然，公立学校里有很棒的老师。我四年级的老师米哈尔科先生，他的活力和想象力让那一年成了学生们三十年后还在谈论的话题。但像他这样的老师，只是逆流而上的个体，无法改变整个系统。</p><p>In almost any group of people you’ll find hierarchy. When groups of adults form in the real world, it’s generally for some common purpose, and the leaders end up being those who are best at it. The problem with most schools is, they have no purpose. But hierarchy there must be. And so the kids make one out of nothing.</p><p>几乎任何群体中都存在等级制度。现实世界中，成年人形成群体通常是为了某个共同目标，而领导者最终是那些最擅长实现目标的人。大多数学校的问题在于，它们没有目标。但等级制度必须存在，所以孩子们凭空创造了一个。</p><p>We have a phrase to describe what happens when rankings have to be created without any meaningful criteria. We say that the situation degenerates into a popularity contest. And that’s exactly what happens in most American schools. Instead of depending on some real test, one’s rank depends mostly on one’s ability to increase one’s rank. It’s like the court of Louis XIV. There is no external opponent, so the kids become one another’s opponents.</p><p>我们有个短语来描述 “没有有意义的标准却要排名” 的情况：我们说这种情况会退化成 “ popularity contest（人气竞赛）”。这正是大多数美国学校的现状。一个人的排名不取决于任何真正的考验，而主要取决于他提升自己排名的能力。就像路易十四的宫廷 —— 没有外部对手，所以孩子们就成了彼此的对手。</p><p>When there is some real external test of skill, it isn’t painful to be at the bottom of the hierarchy. A rookie on a football team doesn’t resent the skill of the veteran; he hopes to be like him one day and is happy to have the chance to learn from him. The veteran may in turn feel a sense of noblesse oblige. And most importantly, their status depends on how well they do against opponents, not on whether they can push the other down.</p><p>当存在真正的外部技能考验时，处于等级底层并不痛苦。足球队的新手不会嫉妒老将的技能；他希望有一天能像老将一样，并且很高兴有机会向他学习。老将反过来可能会有 “noblesse oblige（位高则任重）” 的责任感。最重要的是，他们的地位取决于对抗外部对手的表现，而不是能否打压他人。</p><p>Court hierarchies are another thing entirely. This type of society debases anyone who enters it. There is neither admiration at the bottom, nor noblesse oblige at the top. It’s kill or be killed.</p><p>宫廷式的等级制度则完全不同。这种社会会贬低所有进入其中的人。底层没有钦佩，顶层没有责任感。这是一个要么踩别人，要么被别人踩的世界。</p><p>This is the sort of society that gets created in American secondary schools. And it happens because these schools have no real purpose beyond keeping the kids all in one place for a certain number of hours each day. What I didn’t realize at the time, and in fact didn’t realize till very recently, is that the twin horrors of school life, the cruelty and the boredom, both have the same cause.</p><p>这就是美国中学里形成的社会。之所以会这样，是因为这些学校除了把孩子们每天关在一个地方几小时之外，没有任何真正的目的。我当时没意识到，直到最近才明白：学校生活的两大恐怖 —— 残忍和无聊，有着相同的根源。</p><p>The mediocrity of American public schools has worse consequences than just making kids unhappy for six years. It breeds a rebelliousness that actively drives kids away from the things they’re supposed to be learning.</p><p>美国公立学校的平庸造成的后果，远不止让孩子们在六年里不开心。它滋生了叛逆，让孩子们主动远离他们本该学习的东西。</p><p>Like many nerds, probably, it was years after high school before I could bring myself to read anything we’d been assigned then. And I lost more than books. I mistrusted words like “character” and “integrity” because they had been so debased by adults. As they were used then, these words all seemed to mean the same thing: obedience. The kids who got praised for these qualities tended to be at best dull-witted prize bulls, and at worst facile schmoozers. If that was what character and integrity were, I wanted no part of them.</p><p>和很多书呆子一样，高中毕业后过了很多年，我才愿意读那些当年被布置的读物。我失去的不止是书籍。我不信任 “character（品格）” 和 “ integrity（正直）” 这类词，因为成年人把它们贬低了。在当时的语境里，这些词似乎都意味着同一个东西：服从。因这些品质而受表扬的孩子，往好里说是愚钝的 “奖牛”，往坏里说是油滑的奉承者。如果这就是品格和正直，我一点也不想要。</p><p>The word I most misunderstood was “tact.” As used by adults, it seemed to mean keeping your mouth shut. I assumed it was derived from the same root as “tacit” and “taciturn,” and that it literally meant being quiet. I vowed that I would never be tactful; they were never going to shut me up. In fact, it’s derived from the same root as “tactile,” and what it means is to have a deft touch. Tactful is the opposite of clumsy. I don’t think I learned this until college.</p><p>我最误解的词是 “tact（得体）”。在成年人的用法里，它似乎意味着闭嘴。我以为它和 “ tacit（默许的）”、“ taciturn（沉默寡言的）” 同源，字面意思就是安静。我发誓永远不要 “得体”，他们别想让我闭嘴。但事实上，它和 “ tactile（触觉的）” 同源，意思是 “灵巧的手法”。“得体” 是 “笨拙” 的反义词。我大概到大学才明白这一点。</p><p>Nerds aren’t the only losers in the popularity rat race. Nerds are unpopular because they’re distracted. There are other kids who deliberately opt out because they’re so disgusted with the whole process.</p><p>在人气竞赛中，书呆子不是唯一的输家。书呆子不受欢迎是因为他们分心了。还有些孩子因为对整个过程极度反感，故意选择退出。</p><p>Teenage kids, even rebels, don’t like to be alone, so when kids opt out of the system, they tend to do it as a group. At the schools I went to, the focus of rebellion was drug use, specifically marijuana. The kids in this tribe wore black concert t-shirts and were called “freaks.”</p><p>青少年即使是叛逆者，也不喜欢独处，所以当他们选择退出系统时，往往会结成群体。在我就读的学校里，叛逆的焦点是吸毒，特别是大麻。这个群体的孩子穿黑色摇滚 T 恤，被叫做 “freaks（怪胎）”。</p><p>Freaks and nerds were allies, and there was a good deal of overlap between them. Freaks were on the whole smarter than other kids, though never studying (or at least never appearing to) was an important tribal value. I was more in the nerd camp, but I was friends with a lot of freaks.</p><p>怪胎和书呆子是盟友，两者有很多重叠。怪胎总体上比其他孩子聪明，尽管 “从不学习（或至少看起来不学习）” 是这个群体的重要价值观。我更属于书呆子阵营，但和很多怪胎是朋友。</p><p>They used drugs, at least at first, for the social bonds they created. It was something to do together, and because the drugs were illegal, it was a shared badge of rebellion.</p><p>他们吸毒，至少一开始是为了建立社交联系。这是他们可以一起做的事，而且因为毒品是非法的，这成了他们共同的叛逆标志。</p><p>I’m not claiming that bad schools are the whole reason kids get into trouble with drugs. After a while, drugs have their own momentum. No doubt some of the freaks ultimately used drugs to escape from other problems– trouble at home, for example. But, in my school at least, the reason most kids started using drugs was rebellion. Fourteen-year-olds didn’t start smoking pot because they’d heard it would help them forget their problems. They started because they wanted to join a different tribe.</p><p>我不是说糟糕的学校是孩子们陷入毒品问题的全部原因。过一段时间后，毒品会有自己的惯性。毫无疑问，有些怪胎最终吸毒是为了逃避其他问题 —— 比如家庭麻烦。但至少在我的学校里，大多数孩子开始吸毒的原因是叛逆。14 岁的孩子开始抽大麻，不是因为听说这能帮他们忘记烦恼，而是因为他们想加入另一个群体。</p><p>Misrule breeds rebellion; this is not a new idea. And yet the authorities still for the most part act as if drugs were themselves the cause of the problem.</p><p>暴政滋生叛乱，这不是什么新观点。但当局大多仍然表现得好像毒品本身就是问题的根源。</p><p>The real problem is the emptiness of school life. We won’t see solutions till adults realize that. The adults who may realize it first are the ones who were themselves nerds in school. Do you want your kids to be as unhappy in eighth grade as you were? I wouldn’t. Well, then, is there anything we can do to fix things? Almost certainly. There is nothing inevitable about the current system. It has come about mostly by default.</p><p>真正的问题是学校生活的空虚。除非成年人意识到这一点，否则我们看不到解决方案。最先意识到这一点的成年人，可能是那些自己上学时是书呆子的人。你想让你的孩子在八年级时和你当年一样不开心吗？我不想。那么，我们能做些什么来改变现状呢？几乎可以肯定的是，现行制度并非不可改变，它的形成很大程度上是默认的结果。</p><p>Adults, though, are busy. Showing up for school plays is one thing. Taking on the educational bureaucracy is another. Perhaps a few will have the energy to try to change things. I suspect the hardest part is realizing that you can.</p><p>但成年人很忙。出席学校的戏剧表演是一回事，对抗教育官僚体系是另一回事。或许有少数人有精力尝试改变，但我怀疑最难的是意识到 “自己有能力改变”。</p><p>Nerds still in school should not hold their breath. Maybe one day a heavily armed force of adults will show up in helicopters to rescue you, but they probably won’t be coming this month. Any immediate improvement in nerds’ lives is probably going to have to come from the nerds themselves.</p><p>还在上学的书呆子别抱太大期望。也许有一天，一队全副武装的成年人会乘直升机来救你们，但这个月可能不会。书呆子生活的任何即时改善，很可能都得靠他们自己。</p><p>Merely understanding the situation they’re in should make it less painful. Nerds aren’t losers. They’re just playing a different game, and a game much closer to the one played in the real world. Adults know this. It’s hard to find successful adults now who don’t claim to have been nerds in high school.</p><p>仅仅理解自己所处的环境，就应该能减少痛苦。书呆子不是失败者。他们只是在玩另一种游戏，一种更接近现实世界的游戏。成年人明白这一点 —— 现在很难找到成功的成年人不宣称自己高中时是书呆子。</p><p>It’s important for nerds to realize, too, that school is not life. School is a strange, artificial thing, half sterile and half feral. It’s all-encompassing, like life, but it isn’t the real thing. It’s only temporary, and if you look, you can see beyond it even while you’re still in it.</p><p>书呆子也需要意识到，学校不是生活。学校是一种奇怪的人造产物，一半无菌，一半野性。它像生活一样包罗万象，但不是真实的生活。它只是暂时的，即使还在其中，只要你愿意，就能看到它之外的东西。</p><p>If life seems awful to kids, it’s neither because hormones are turning you all into monsters (as your parents believe), nor because life actually is awful (as you believe). It’s because the adults, who no longer have any economic use for you, have abandoned you to spend years cooped up together with nothing real to do. Any society of that type is awful to live in. You don’t have to look any further to explain why teenage kids are unhappy.</p><p>如果孩子们觉得生活很糟糕，既不是因为荷尔蒙把你们都变成了怪物（就像父母认为的那样），也不是因为生活本身真的很糟糕（就像你们认为的那样）。而是因为，不再有经济用途的成年人，把你们丢在一起，让你们多年来无所事事。任何这样的社会，生活起来都很糟糕。这就足以解释为什么青少年不开心了。</p><p>I’ve said some harsh things in this essay, but really the thesis is an optimistic one– that several problems we take for granted are in fact not insoluble after all. Teenage kids are not inherently unhappy monsters. That should be encouraging news to kids and adults both.</p><p>我在这篇文章里说了些尖锐的话，但核心论点其实是乐观的 —— 一些我们习以为常的问题，其实并非无法解决。青少年并非天生就是不开心的怪物。这对孩子和成年人来说，都应该是个鼓舞人心的消息。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超越平均数</title>
    <link href="/2025/07/29/beating-the-averages/"/>
    <url>/2025/07/29/beating-the-averages/</url>
    
    <content type="html"><![CDATA[<h2 id="Beating-the-Averages"><a href="#Beating-the-Averages" class="headerlink" title="Beating the Averages"></a>Beating the Averages</h2><p>原文链接: <a href="https://paulgraham.com/avg.html">https://paulgraham.com/avg.html</a></p><p>April 2001, rev. April 2003 </p><p>(This article is derived from a talk given at the 2001 Franz Developer Symposium.) In the summer of 1995, my friend Robert Morris and I started a startup called Viaweb. Our plan was to write software that would let end users build online stores. What was novel about this software, at the time, was that it ran on our server, using ordinary Web pages as the interface. </p><p>（本文源自 2001 年 Franz 开发者研讨会的一次演讲）</p><p>1995 年夏天，我和我的朋友罗伯特・莫里斯创办了一家名为 Viaweb 的初创公司。我们计划编写一款软件，让终端用户能够构建在线商店。这款软件在当时的新颖之处在于，它运行在我们的服务器上，使用普通网页作为界面。</p><p>A lot of people could have been having this idea at the same time, of course, but as far as I know, Viaweb was the first Web-based application. It seemed such a novel idea to us that we named the company after it: Viaweb, because our software worked via the Web, instead of running on your desktop computer. </p><p>当然，很多人可能同时都有过这个想法，但据我所知，Viaweb 是第一款基于网络的应用程序。这个想法对我们来说非常新颖，于是我们用它来为公司命名：Viaweb，因为我们的软件是通过网络运行的，而不是在桌面计算机上运行。</p><p>Another unusual thing about this software was that it was written primarily in a programming language called Lisp. It was one of the first big end-user applications to be written in Lisp, which up till then had been used mostly in universities and research labs. [1] </p><p>这款软件的另一个不寻常之处在于，它主要是用一种名为 Lisp 的编程语言编写的。它是最早一批用 Lisp 编写的大型终端用户应用程序之一，在此之前，Lisp 主要在大学和研究实验室中使用。</p><p>The Secret Weapon </p><p>Eric Raymond has written an essay called “How to Become a Hacker,” and in it, among other things, he tells would-be hackers what languages they should learn. He suggests starting with Python and Java, because they are easy to learn. The serious hacker will also want to learn C, in order to hack Unix, and Perl for system administration and cgi scripts. Finally, the truly serious hacker should consider learning Lisp: </p><p><strong>秘密武器</strong></p><p>埃里克・雷蒙德写过一篇名为《如何成为一名黑客》的文章，在文中，他除了讲述其他内容外，还告诉未来的黑客应该学习哪些语言。他建议从 Python 和 Java 入手，因为它们容易学习。认真的黑客还会想学习 C 语言，以便对 Unix 进行黑客攻击，以及学习 Perl 用于系统管理和 CGI 脚本。最后，真正认真的黑客应该考虑学习 Lisp：</p><blockquote><p>Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot. </p></blockquote><blockquote><p>学习 Lisp 是值得的，因为当你最终掌握它时，你将获得深刻的启发；这种体验将使你在余生中成为一名更优秀的程序员，即使你实际上并不经常使用 Lisp。</p></blockquote><p>This is the same argument you tend to hear for learning Latin. It won’t get you a job, except perhaps as a classics professor, but it will improve your mind, and make you a better writer in languages you do want to use, like English. </p><p>这和你经常听到的学习拉丁语的理由是一样的。它不会让你找到一份工作，除非你可能成为一名古典文学教授，但它会提升你的思维，让你在你想用的语言（比如英语）中成为一名更好的作家。</p><p>But wait a minute. This metaphor doesn’t stretch that far. The reason Latin won’t get you a job is that no one speaks it. If you write in Latin, no one can understand you. But Lisp is a computer language, and computers speak whatever language you, the programmer, tell them to. </p><p>但等一下。这个比喻并不完全恰当。拉丁语不会让你找到工作的原因是没有人说拉丁语。如果你用拉丁语写作，没有人能理解你。但 Lisp 是一种计算机语言，计算机可以理解程序员告诉它们的任何语言。</p><p>So if Lisp makes you a better programmer, like he says, why wouldn’t you want to use it? If a painter were offered a brush that would make him a better painter, it seems to me that he would want to use it in all his paintings, wouldn’t he? I’m not trying to make fun of Eric Raymond here. On the whole, his advice is good. What he says about Lisp is pretty much the conventional wisdom. But there is a contradiction in the conventional wisdom: Lisp will make you a better programmer, and yet you won’t use it. </p><p>那么，如果像他说的那样，Lisp 能让你成为更好的程序员，为什么你不想使用它呢？如果一个画家得到了一支能让他画得更好的画笔，在我看来，他会想在所有画作中都使用它，不是吗？我这里并不是想取笑埃里克・雷蒙德。总的来说，他的建议是好的。他关于 Lisp 的说法几乎是一种传统观点。但这种传统观点存在一个矛盾：Lisp 能让你成为更好的程序员，但你却不会使用它。</p><p>Why not? Programming languages are just tools, after all. If Lisp really does yield better programs, you should use it. And if it doesn’t, then who needs it? </p><p>为什么不呢？编程语言毕竟只是工具。如果 Lisp 真的能编写出更好的程序，你就应该使用它。如果不能，那谁还需要它呢？</p><p>This is not just a theoretical question. Software is a very competitive business, prone to natural monopolies. A company that gets software written faster and better will, all other things being equal, put its competitors out of business. And when you’re starting a startup, you feel this very keenly. Startups tend to be an all or nothing proposition. You either get rich, or you get nothing. In a startup, if you bet on the wrong technology, your competitors will crush you. </p><p>这不仅仅是一个理论问题。软件行业是一个竞争非常激烈的行业，容易出现自然垄断。在其他条件相同的情况下，一个能够更快、更好地编写软件的公司会让其竞争对手破产。而当你创办一家初创公司时，你会深刻地感受到这一点。初创公司往往是一种要么全有要么全无的事情。你要么发财，要么一无所有。在初创公司中，如果你押错了技术，你的竞争对手就会把你击垮。</p><p>Robert and I both knew Lisp well, and we couldn’t see any reason not to trust our instincts and go with Lisp. We knew that everyone else was writing their software in C++ or Perl. But we also knew that that didn’t mean anything. If you chose technology that way, you’d be running Windows. When you choose technology, you have to ignore what other people are doing, and consider only what will work the best. </p><p>罗伯特和我都很熟悉 Lisp，我们找不到任何理由不相信自己的直觉并选择 Lisp。我们知道其他人都在用 C++ 或 Perl 编写软件。但我们也知道这并不意味着什么。如果你以那种方式选择技术，你就会选择运行 Windows。当你选择技术时，你必须忽略其他人在做什么，只考虑什么是最有效的。</p><p>This is especially true in a startup. In a big company, you can do what all the other big companies are doing. But a startup can’t do what all the other startups do. I don’t think a lot of people realize this, even in startups. </p><p>这在初创公司中尤其如此。在大公司里，你可以做其他大公司都在做的事情。但初创公司不能做其他初创公司都在做的事情。我认为很多人甚至在初创公司中都没有意识到这一点。</p><p>The average big company grows at about ten percent a year. So if you’re running a big company and you do everything the way the average big company does it, you can expect to do as well as the average big company– that is, to grow about ten percent a year. </p><p>一般的大公司每年增长约 10%。所以，如果你经营一家大公司，并且你像一般的大公司那样做所有事情，你可以期望取得和一般大公司一样的业绩，即每年增长约 10%。</p><p>The same thing will happen if you’re running a startup, of course. If you do everything the way the average startup does it, you should expect average performance. The problem here is, average performance means that you’ll go out of business. The survival rate for startups is way less than fifty percent. So if you’re running a startup, you had better be doing something odd. If not, you’re in trouble. </p><p>当然，如果你经营一家初创公司，情况也是如此。如果你像一般的初创公司那样做所有事情，你应该期望得到平均水平的业绩。但问题是，平均水平的业绩意味着你会倒闭。初创公司的存活率远低于 50%。所以，如果你经营一家初创公司，你最好做一些与众不同的事情。否则，你就会有麻烦。</p><p>Back in 1995, we knew something that I don’t think our competitors understood, and few understand even now: when you’re writing software that only has to run on your own servers, you can use any language you want. When you’re writing desktop software, there’s a strong bias toward writing applications in the same language as the operating system. Ten years ago, writing applications meant writing applications in C. But with Web-based software, especially when you have the source code of both the language and the operating system, you can use whatever language you want. </p><p>早在 1995 年，我们就知道一些我认为我们的竞争对手不理解的事情，甚至现在也很少有人理解：当你编写只需要在自己服务器上运行的软件时，你可以使用任何你想用的语言。当你编写桌面软件时，人们强烈倾向于使用与操作系统相同的语言来编写应用程序。十年前，编写应用程序意味着用 C 语言编写。但对于基于网络的软件，特别是当你拥有语言和操作系统的源代码时，你可以使用任何你想用的语言。</p><p>This new freedom is a double-edged sword, however. Now that you can use any language, you have to think about which one to use. Companies that try to pretend nothing has changed risk finding that their competitors do not. </p><p>然而，这种新的自由是一把双刃剑。既然你可以使用任何语言，你就必须考虑使用哪一种。那些试图假装一切都没有改变的公司可能会发现，他们的竞争对手并非如此。</p><p>If you can use any language, which do you use? We chose Lisp. For one thing, it was obvious that rapid development would be important in this market. We were all starting from scratch, so a company that could get new features done before its competitors would have a big advantage. We knew Lisp was a really good language for writing software quickly, and server-based applications magnify the effect of rapid development, because you can release software the minute it’s done. </p><p>如果你可以使用任何语言，你会选择哪种呢？我们选择了 Lisp。一方面，很明显，在这个市场中快速开发非常重要。我们都是从零开始，所以一家能够比竞争对手更快实现新功能的公司将拥有巨大的优势。我们知道 Lisp 是一种非常适合快速编写软件的语言，而且基于服务器的应用程序会放大快速开发的效果，因为你可以在软件完成后立即发布。</p><p>If other companies didn’t want to use Lisp, so much the better. It might give us a technological edge, and we needed all the help we could get. When we started Viaweb, we had no experience in business. We didn’t know anything about marketing, or hiring people, or raising money, or getting customers. Neither of us had ever even had what you would call a real job. The only thing we were good at was writing software. We hoped that would save us. Any advantage we could get in the software department, we would take. </p><p>如果其他公司不想使用 Lisp，那就更好了。这可能会给我们带来技术优势，而我们需要所有能得到的帮助。当我们创办 Viaweb 时，我们没有商业经验。我们对营销、招聘、融资或获取客户一无所知。我们俩甚至都没有过所谓的真正的工作。我们唯一擅长的就是编写软件。我们希望这能拯救我们。我们会抓住在软件方面能得到的任何优势。</p><p>So you could say that using Lisp was an experiment. Our hypothesis was that if we wrote our software in Lisp, we’d be able to get features done faster than our competitors, and also to do things in our software that they couldn’t do. And because Lisp was so high-level, we wouldn’t need a big development team, so our costs would be lower. If this were so, we could offer a better product for less money, and still make a profit. We would end up getting all the users, and our competitors would get none, and eventually go out of business. That was what we hoped would happen, anyway. </p><p>所以可以说，使用 Lisp 是一个实验。我们的假设是，如果我们用 Lisp 编写软件，我们将能够比竞争对手更快地实现功能，并且能够在我们的软件中实现他们无法实现的功能。而且因为 Lisp 是一种高级语言，我们不需要一个庞大的开发团队，所以我们的成本会更低。如果是这样，我们就可以以更低的价格提供更好的产品，并且仍然盈利。最终，我们会赢得所有用户，而我们的竞争对手将一无所获，最终倒闭。不管怎样，这就是我们希望发生的事情。</p><p>What were the results of this experiment? Somewhat surprisingly, it worked. We eventually had many competitors, on the order of twenty to thirty of them, but none of their software could compete with ours. We had a wysiwyg online store builder that ran on the server and yet felt like a desktop application. Our competitors had cgi scripts. And we were always far ahead of them in features. Sometimes, in desperation, competitors would try to introduce features that we didn’t have. But with Lisp our development cycle was so fast that we could sometimes duplicate a new feature within a day or two of a competitor announcing it in a press release. By the time journalists covering the press release got round to calling us, we would have the new feature too. </p><p>这个实验的结果如何呢？令人惊讶的是，它成功了。我们最终有了很多竞争对手，大约有二三十家，但他们的软件都无法与我们的竞争。我们有一个所见即所得的在线商店构建器，它运行在服务器上，但感觉就像一个桌面应用程序。我们的竞争对手只有 CGI 脚本。而且我们在功能上总是远远领先于他们。有时，绝望的竞争对手会试图推出我们没有的功能。但由于 Lisp，我们的开发周期非常快，以至于有时在竞争对手在新闻发布会上宣布新功能后的一两天内，我们就能复制该功能。当报道新闻发布会的记者打电话给我们时，我们也已经有了这个新功能。</p><p>It must have seemed to our competitors that we had some kind of secret weapon– that we were decoding their Enigma traffic or something. In fact we did have a secret weapon, but it was simpler than they realized. No one was leaking news of their features to us. We were just able to develop software faster than anyone thought possible. </p><p>在我们的竞争对手看来，我们一定有某种秘密武器，就好像我们在破解他们的恩尼格玛密码之类的。事实上，我们确实有一个秘密武器，但它比他们意识到的要简单。没有人向我们泄露他们的功能信息。我们只是能够以比任何人想象的都要快的速度开发软件。</p><p>When I was about nine I happened to get hold of a copy of The Day of the Jackal, by Frederick Forsyth. The main character is an assassin who is hired to kill the president of France. The assassin has to get past the police to get up to an apartment that overlooks the president’s route. He walks right by them, dressed up as an old man on crutches, and they never suspect him. </p><p>我大约九岁的时候，偶然读到了弗雷德里克・福赛斯的《豺狼的日子》。书中的主角是一名受雇刺杀法国总统的刺客。刺客必须避开警察，到达一个可以俯瞰总统行进路线的公寓。他装扮成一个拄着拐杖的老人从警察身边走过，警察从未怀疑过他。</p><p>Our secret weapon was similar. We wrote our software in a weird AI language, with a bizarre syntax full of parentheses. For years it had annoyed me to hear Lisp described that way. But now it worked to our advantage. In business, there is nothing more valuable than a technical advantage your competitors don’t understand. In business, as in war, surprise is worth as much as force. </p><p>我们的秘密武器与此类似。我们用一种奇怪的人工智能语言编写软件，它有着充满括号的怪异语法。多年来，听到 Lisp 被那样描述一直让我很恼火。但现在，这却对我们有利。在商业中，没有什么比你的竞争对手不理解的技术优势更有价值了。在商业中，就像在战争中一样，出其不意与力量同样重要。</p><p>And so, I’m a little embarrassed to say, I never said anything publicly about Lisp while we were working on Viaweb. We never mentioned it to the press, and if you searched for Lisp on our Web site, all you’d find were the titles of two books in my bio. This was no accident. A startup should give its competitors as little information as possible. If they didn’t know what language our software was written in, or didn’t care, I wanted to keep it that way.[2] </p><p>所以，有点尴尬的是，在我们开发 Viaweb 的过程中，我从未公开谈论过 Lisp。我们从未向媒体提及过它，如果你在我们的网站上搜索 Lisp，你只会在我的个人简介中找到两本书的书名。这并非偶然。初创公司应该尽可能少地向竞争对手透露信息。如果他们不知道我们的软件是用什么语言编写的，或者他们不在乎，我希望保持这种状态。[2]</p><p>The people who understood our technology best were the customers. They didn’t care what language Viaweb was written in either, but they noticed that it worked really well. It let them build great looking online stores literally in minutes. And so, by word of mouth mostly, we got more and more users. By the end of 1996 we had about 70 stores online. At the end of 1997 we had 500. Six months later, when Yahoo bought us, we had 1070 users. Today, as Yahoo Store, this software continues to dominate its market. It’s one of the more profitable pieces of Yahoo, and the stores built with it are the foundation of Yahoo Shopping. I left Yahoo in 1999, so I don’t know exactly how many users they have now, but the last I heard there were about 20,000. </p><p>最了解我们技术的人是客户。他们也不在乎 Viaweb 是用什么语言编写的，但他们注意到它运行得非常好。它让他们能够在几分钟内就构建出漂亮的在线商店。所以，主要是通过口口相传，我们获得了越来越多的用户。到 1996 年底，我们大约有 70 家在线商店。到 1997 年底，我们有了 500 家。六个月后，当雅虎收购我们时，我们有 1070 个用户。如今，作为雅虎商店，这款软件继续主导着它所在的市场。它是雅虎最赚钱的产品之一，用它构建的商店是雅虎购物的基础。我在 1999 年离开了雅虎，所以我不知道现在他们具体有多少用户，但我最后一次听说时大约有 20000 个。</p><p>The Blub Paradox </p><p>What’s so great about Lisp? And if Lisp is so great, why doesn’t everyone use it? These sound like rhetorical questions, but actually they have straightforward answers. Lisp is so great not because of some magic quality visible only to devotees, but because it is simply the most powerful language available. And the reason everyone doesn’t use it is that programming languages are not merely technologies, but habits of mind as well, and nothing changes slower. Of course, both these answers need explaining. </p><p><strong>Blub悖论</strong></p><p>Lisp 到底好在哪里呢？如果 Lisp 这么好，为什么不是每个人都使用它呢？这些听起来像是反问句，但实际上它们有直接的答案。Lisp 之所以好，并不是因为只有其爱好者才能看到的某种神奇特质，而是因为它确实是目前最强大的语言。而不是每个人都使用它的原因是，编程语言不仅仅是技术，也是思维习惯，而没有什么比思维习惯更难改变的了。当然，这两个答案都需要解释。</p><p>I’ll begin with a shockingly controversial statement: programming languages vary in power. </p><p>我将从一个极具争议性的陈述开始：编程语言的能力是有差异的。</p><p>Few would dispute, at least, that high level languages are more powerful than machine language. Most programmers today would agree that you do not, ordinarily, want to program in machine language. Instead, you should program in a high-level language, and have a compiler translate it into machine language for you. This idea is even built into the hardware now: since the 1980s, instruction sets have been designed for compilers rather than human programmers. </p><p>至少，很少有人会质疑高级语言比机器语言更强大。如今，大多数程序员都会同意，通常情况下，你不想用机器语言编程。相反，你应该用高级语言编程，然后让编译器将其翻译成机器语言。这个想法现在甚至已经融入了硬件设计中：自 20 世纪 80 年代以来，指令集就是为编译器而不是人类程序员设计的。</p><p>Everyone knows it’s a mistake to write your whole program by hand in machine language. What’s less often understood is that there is a more general principle here: that if you have a choice of several languages, it is, all other things being equal, a mistake to program in anything but the most powerful one. [3] </p><p>每个人都知道，手工用机器语言编写整个程序是错误的。但人们较少理解的是，这里有一个更普遍的原则：如果你有几种语言可供选择，在其他条件相同的情况下，不使用最强大的语言编程是错误的。[3]</p><p>There are many exceptions to this rule. If you’re writing a program that has to work very closely with a program written in a certain language, it might be a good idea to write the new program in the same language. If you’re writing a program that only has to do something very simple, like number crunching or bit manipulation, you may as well use a less abstract language, especially since it may be slightly faster. And if you’re writing a short, throwaway program, you may be better off just using whatever language has the best library functions for the task. But in general, for application software, you want to be using the most powerful (reasonably efficient) language you can get, and using anything else is a mistake, of exactly the same kind, though possibly in a lesser degree, as programming in machine language. </p><p>这个规则有很多例外情况。如果你编写的程序必须与用某种特定语言编写的程序紧密协作，那么用相同的语言编写新程序可能是个好主意。如果你编写的程序只需要做一些非常简单的事情，比如数值运算或位操作，那么你不妨使用一种抽象程度较低的语言，尤其是因为它可能会稍微快一些。如果你编写的是一个简短的、一次性的程序，那么使用对该任务有最佳库函数的语言可能会更好。但一般来说，对于应用软件，你应该使用你能找到的最强大（且效率合理）的语言，使用其他语言是错误的，这与用机器语言编程是同一类错误，只是程度可能较轻。</p><p>You can see that machine language is very low level. But, at least as a kind of social convention, high-level languages are often all treated as equivalent. They’re not. Technically the term “high-level language” doesn’t mean anything very definite. There’s no dividing line with machine languages on one side and all the high-level languages on the other. Languages fall along a continuum [4] of abstractness, from the most powerful all the way down to machine languages, which themselves vary in power. </p><p>你可以看到，机器语言是非常低级的。但至少作为一种社会惯例，高级语言通常都被视为是等效的。其实不然。从技术上讲，“高级语言” 这个术语并没有非常明确的含义。在机器语言和所有高级语言之间并没有一条明确的分界线。语言沿着抽象程度的连续体分布，从最强大的语言一直到机器语言，而机器语言本身的能力也有差异。[4]</p><p>Consider Cobol. </p><p>Cobol is a high-level language, in the sense that it gets compiled into machine language. Would anyone seriously argue that Cobol is equivalent in power to, say, Python? It’s probably closer to machine language than Python. </p><p>以 Cobol 为例。Cobol 是一种高级语言，因为它会被编译成机器语言。有人会认真地认为 Cobol 在能力上与 Python 相当吗？它可能比 Python 更接近机器语言。</p><p>Or how about Perl 4? Between Perl 4 and Perl 5, lexical closures got added to the language. Most Perl hackers would agree that Perl 5 is more powerful than Perl 4. But once you’ve admitted that, you’ve admitted that one high level language can be more powerful than another. And it follows inexorably that, except in special cases, you ought to use the most powerful you can get. </p><p>那么 Perl 4 呢？在 Perl 4 和 Perl 5 之间，语言中添加了词法闭包。大多数 Perl 黑客会同意 Perl 5 比 Perl 4 更强大。但一旦你承认了这一点，你就承认了一种高级语言可以比另一种更强大。因此，除了特殊情况，你应该使用你能得到的最强大的语言，这是必然的结论。</p><p>This idea is rarely followed to its conclusion, though. After a certain age, programmers rarely switch languages voluntarily. Whatever language people happen to be used to, they tend to consider just good enough. </p><p>然而，这个想法很少有人贯彻到底。在某个年龄之后，程序员很少会自愿更换语言。人们往往认为自己习惯使用的任何语言就足够好了。</p><p>Programmers get very attached to their favorite languages, and I don’t want to hurt anyone’s feelings, so to explain this point I’m going to use a hypothetical language called Blub. Blub falls right in the middle of the abstractness continuum. It is not the most powerful language, but it is more powerful than Cobol or machine language. </p><p>程序员非常喜欢他们喜欢的语言，我不想伤害任何人的感情，所以为了解释这一点，我将使用一种假设的语言，叫做 Blub。Blub 正好处于抽象程度连续体的中间。它不是最强大的语言，但它比 Cobol 或机器语言更强大。</p><p>And in fact, our hypothetical Blub programmer wouldn’t use either of them. Of course he wouldn’t program in machine language. That’s what compilers are for. And as for Cobol, he doesn’t know how anyone can get anything done with it. It doesn’t even have x (Blub feature of your choice). </p><p>事实上，我们假设的 Blub 程序员不会使用这两种语言。当然，他不会用机器语言编程。那是编译器该做的事。至于 Cobol，他不知道人们怎么能用它完成任何事情。它甚至没有 x（你选择的 Blub 特性）。</p><p>As long as our hypothetical Blub programmer is looking down the power continuum, he knows he’s looking down. Languages less powerful than Blub are obviously less powerful, because they’re missing some feature he’s used to. But when our hypothetical Blub programmer looks in the other direction, up the power continuum, he doesn’t realize he’s looking up. What he sees are merely weird languages. He probably considers them about equivalent in power to Blub, but with all this other hairy stuff thrown in as well. Blub is good enough for him, because he thinks in Blub. </p><p>(注：power continuum暂时无法直译 老实说作者举这个例子根本就是一个败笔，没有把事情讲清楚反而引发了一堆误会。简言之：低维生物无法理解高维生物。)</p><p>只要我们假设的 Blub 程序员向下看能力连续体，他就知道自己在向下看。比 Blub 能力更弱的语言显然更弱，因为它们缺少他习惯使用的某些特性。但当我们假设的 Blub 程序员向另一个方向看，即向上看能力连续体时，他没有意识到自己在向上看。他看到的只是奇怪的语言。他可能认为它们在能力上与 Blub 相当，只是还包含了其他一些难以理解的东西。Blub 对他来说已经足够好了，因为他是用 Blub 来思考的。</p><p>When we switch to the point of view of a programmer using any of the languages higher up the power continuum, however, we find that he in turn looks down upon Blub. How can you get anything done in Blub? It doesn’t even have y. </p><p>然而，当我们转换到使用能力连续体中更高级语言的程序员的视角时，我们会发现，他反过来会看不起 Blub。你怎么能用 Blub 完成任何事情呢？它甚至没有 y。</p><p>By induction, the only programmers in a position to see all the differences in power between the various languages are those who understand the most powerful one. (This is probably what Eric Raymond meant about Lisp making you a better programmer.) You can’t trust the opinions of the others, because of the Blub paradox: they’re satisfied with whatever language they happen to use, because it dictates the way they think about programs. </p><p>通过归纳法可知，只有理解最强大语言的程序员才能看到各种语言之间能力的所有差异。（这可能就是埃里克・雷蒙德所说的 Lisp 能让你成为更好的程序员的意思。）你不能相信其他人的观点，因为存在 Blub 悖论：他们对自己碰巧使用的任何语言都感到满意，因为这种语言决定了他们思考程序的方式。</p><p>I know this from my own experience, as a high school kid writing programs in Basic. That language didn’t even support recursion. It’s hard to imagine writing programs without using recursion, but I didn’t miss it at the time. I thought in Basic. And I was a whiz at it. Master of all I surveyed. </p><p>我从自己的经历中知道这一点，我在高中时用 Basic 编程。那种语言甚至不支持递归。很难想象不使用递归编写程序，但我当时并不觉得缺少什么。我是用 Basic 来思考的。而且我在这方面很出色。我是我所涉足领域的大师。</p><p>The five languages that Eric Raymond recommends to hackers fall at various points on the power continuum. Where they fall relative to one another is a sensitive topic. What I will say is that I think Lisp is at the top. And to support this claim I’ll tell you about one of the things I find missing when I look at the other four languages. How can you get anything done in them, I think, without macros? [5] </p><p>埃里克・雷蒙德推荐给黑客的五种语言处于能力连续体的不同位置。它们相对位置如何是一个敏感话题。我想说的是，我认为 Lisp 处于顶端。为了支持这一说法，我会告诉你，当我看其他四种语言时，我发现它们缺少的东西之一。我想，如果没有宏，怎么能用它们完成任何事情呢？</p><p>Many languages have something called a macro. But Lisp macros are unique. And believe it or not, what they do is related to the parentheses. The designers of Lisp didn’t put all those parentheses in the language just to be different. To the Blub programmer, Lisp code looks weird. But those parentheses are there for a reason. They are the outward evidence of a fundamental difference between Lisp and other languages. </p><p>很多语言都有叫做宏的东西。但 Lisp 的宏是独特的。信不信由你，它们的功能与括号有关。Lisp 的设计者在语言中使用那么多括号并不是为了与众不同。对于 Blub 程序员来说，Lisp 代码看起来很奇怪。但这些括号是有原因的。它们是 Lisp 与其他语言根本区别的外在表现。</p><p>Lisp code is made out of Lisp data objects. And not in the trivial sense that the source files contain characters, and strings are one of the data types supported by the language. Lisp code, after it’s read by the parser, is made of data structures that you can traverse. </p><p>Lisp 代码是由 Lisp 数据对象组成的。这并不是说源文件包含字符，而字符串是语言支持的数据类型之一这种简单的意义。Lisp 代码在被解析器读取后，是由你可以遍历的数据结构组成的。</p><p>If you understand how compilers work, what’s really going on is not so much that Lisp has a strange syntax as that Lisp has no syntax. You write programs in the parse trees that get generated within the compiler when other languages are parsed. But these parse trees are fully accessible to your programs. You can write programs that manipulate them. In Lisp, these programs are called macros. They are programs that write programs. </p><p>如果你了解编译器的工作原理，那么实际情况与其说是 Lisp 有奇怪的语法，不如说是 Lisp 没有语法。你在用其他语言解析时在编译器中生成的解析树来编写程序。但这些解析树对你的程序是完全可访问的。你可以编写程序来操作它们。在 Lisp 中，这些程序被称为宏。它们是编写程序的程序。</p><p>Programs that write programs? When would you ever want to do that? Not very often, if you think in Cobol. All the time, if you think in Lisp. It would be convenient here if I could give an example of a powerful macro, and say there! how about that? But if I did, it would just look like gibberish to someone who didn’t know Lisp; there isn’t room here to explain everything you’d need to know to understand what it meant. In Ansi Common Lisp I tried to move things along as fast as I could, and even so I didn’t get to macros until page 160. </p><p>编写程序的程序？你什么时候会想这样做呢？如果你用 Cobol 思考，这种情况很少会出现。但如果你用 Lisp 思考，这种情况会一直出现。如果我能在这里举一个强大宏的例子，然后说 “看！怎么样？”，那会很方便。但如果我这样做了，对于不懂 Lisp 的人来说，这看起来就像是胡言乱语；这里没有足够的空间来解释理解它所需的所有知识。在《ANSI Common Lisp》这本书中，我尽可能快地介绍内容，但即便如此，我直到第 160 页才讲到宏。</p><p>But I think I can give a kind of argument that might be convincing. The source code of the Viaweb editor was probably about 20-25% macros. Macros are harder to write than ordinary Lisp functions, and it’s considered to be bad style to use them when they’re not necessary. So every macro in that code is there because it has to be. What that means is that at least 20-25% of the code in this program is doing things that you can’t easily do in any other language. However skeptical the Blub programmer might be about my claims for the mysterious powers of Lisp, this ought to make him curious. We weren’t writing this code for our own amusement. We were a tiny startup, programming as hard as we could in order to put technical barriers between us and our competitors. </p><p>但我想我可以给出一种可能有说服力的论据。Viaweb 编辑器的源代码中可能大约有 20%-25% 是宏。宏比普通的 Lisp 函数更难编写，而且在不必要的时候使用宏被认为是不好的风格。所以那段代码中的每个宏都是必不可少的。这意味着这个程序中至少有 20%-25% 的代码在做其他任何语言都不容易做到的事情。无论 Blub 程序员对我所说的 Lisp 的神秘力量有多么怀疑，这都应该让他感到好奇。我们编写这段代码不是为了自娱自乐。我们是一家小型初创公司，尽可能努力地编程，以便在我们和竞争对手之间设置技术障碍。</p><p>A suspicious person might begin to wonder if there was some correlation here. A big chunk of our code was doing things that are very hard to do in other languages. The resulting software did things our competitors’ software couldn’t do. Maybe there was some kind of connection. I encourage you to follow that thread. There may be more to that old man hobbling along on his crutches than meets the eye. </p><p>一个多疑的人可能会开始怀疑这里是否存在某种关联。我们的很大一部分代码在做其他语言很难做到的事情。最终得到的软件能实现我们竞争对手的软件无法实现的功能。也许这之间存在某种联系。我鼓励你顺着这条线索思考。那个拄着拐杖蹒跚而行的老人可能有更多不为人知的秘密。</p><p>Aikido for Startups </p><p>But I don’t expect to convince anyone (over 25) to go out and learn Lisp. The purpose of this article is not to change anyone’s mind, but to reassure people already interested in using Lisp– people who know that Lisp is a powerful language, but worry because it isn’t widely used. In a competitive situation, that’s an advantage. Lisp’s power is multiplied by the fact that your competitors don’t get it. </p><p>但我并不期望说服任何（25 岁以上的）人去学习 Lisp。本文的目的不是为了改变任何人的想法，而是为了让已经对使用 Lisp 感兴趣的人放心 —— 这些人知道 Lisp 是一种强大的语言，但因为它没有被广泛使用而感到担忧。在竞争环境中，这是一种优势。Lisp 的力量因你的竞争对手不理解它而被放大。</p><p>If you think of using Lisp in a startup, you shouldn’t worry that it isn’t widely understood. You should hope that it stays that way. And it’s likely to. It’s the nature of programming languages to make most people satisfied with whatever they currently use. Computer hardware changes so much faster than personal habits that programming practice is usually ten to twenty years behind the processor. At places like MIT they were writing programs in high-level languages in the early 1960s, but many companies continued to write code in machine language well into the 1980s. I bet a lot of people continued to write machine language until the processor, like a bartender eager to close up and go home, finally kicked them out by switching to a risc instruction set. </p><p>如果你考虑在初创公司使用 Lisp，不必担心它未被广泛理解。你反而应该希望它保持这种状态 —— 而且这很可能成真。编程语言的本质是，大多数人会满足于自己当前使用的语言。计算机硬件的变化速度远超人类习惯的改变，因此编程实践通常比处理器的发展落后 10 到 20 年。早在 20 世纪 60 年代初，麻省理工学院（MIT）等地就已开始用高级语言编程，但许多公司直到 80 年代仍在使用机器语言写代码。我敢说，不少人坚持用机器语言编程，直到处理器像急于打烊的酒保一样，通过转向 RISC 指令集最终把他们 “赶出去”。</p><p>Ordinarily technology changes fast. But programming languages are different: programming languages are not just technology, but what programmers think in. They’re half technology and half religion.[6] </p><p>通常来说，技术变化很快。但编程语言不同：它们不仅是技术，更是程序员的思维载体。它们一半是技术，一半是信仰。</p><p>And so the median language, meaning whatever language the median programmer uses, moves as slow as an iceberg. Garbage collection, introduced by Lisp in about 1960, is now widely considered to be a good thing. Runtime typing, ditto, is growing in popularity. Lexical closures, introduced by Lisp in the early 1970s, are now, just barely, on the radar screen. Macros, introduced by Lisp in the mid 1960s, are still terra incognita. </p><p>因此，“中位数语言”—— 即大多数程序员使用的语言 —— 像冰山一样移动缓慢。Lisp 在 1960 年左右引入的垃圾回收机制，如今已被广泛认可为有益功能；同样源自 Lisp 的运行时类型检查，普及率也在上升；20 世纪 70 年代初 Lisp 引入的词法闭包，如今才刚刚进入大众视野；而 60 年代中期 Lisp 提出的宏，至今仍是一片未知领域。</p><p>Obviously, the median language has enormous momentum. I’m not proposing that you can fight this powerful force. What I’m proposing is exactly the opposite: that, like a practitioner of Aikido, you can use it against your opponents. </p><p>显然，中位数语言具有巨大的惯性。我并非建议你对抗这种强大的力量，恰恰相反：你可以像合气道选手一样，借力打力，用它来对付对手。</p><p>If you work for a big company, this may not be easy. You will have a hard time convincing the pointy-haired boss to let you build things in Lisp, when he has just read in the paper that some other language is poised, like Ada was twenty years ago, to take over the world. But if you work for a startup that doesn’t have pointy-haired bosses yet, you can, like we did, turn the Blub paradox to your advantage: you can use technology that your competitors, glued immovably to the median language, will never be able to match. </p><p>如果你在大公司工作，这可能不容易。当你那 “地中海发型老板” 刚在报纸上看到某语言（就像 20 年前的 Ada）即将 “统治世界” 时，你很难说服他让你用 Lisp 开发。但如果你在一家还没有 “地中海老板” 的初创公司，就能像我们一样，将 “Blub 悖论” 转化为优势：你可以使用那些被中位数语言牢牢束缚的竞争对手永远无法匹敌的技术。</p><p>If you ever do find yourself working for a startup, here’s a handy tip for evaluating competitors. Read their job listings. Everything else on their site may be stock photos or the prose equivalent, but the job listings have to be specific about what they want, or they’ll get the wrong candidates. </p><p>如果你真的在初创公司工作，这里有个评估竞争对手的实用技巧：看他们的招聘信息。他们网站上的其他内容可能都是库存图片或套话，但招聘信息必须明确说明需求，否则会招到不合适的人。</p><p>During the years we worked on Viaweb I read a lot of job descriptions. A new competitor seemed to emerge out of the woodwork every month or so. The first thing I would do, after checking to see if they had a live online demo, was look at their job listings. After a couple years of this I could tell which companies to worry about and which not to. The more of an IT flavor the job descriptions had, the less dangerous the company was. The safest kind were the ones that wanted Oracle experience. You never had to worry about those. You were also safe if they said they wanted C++ or Java developers. If they wanted Perl or Python programmers, that would be a bit frightening– that’s starting to sound like a company where the technical side, at least, is run by real hackers. If I had ever seen a job posting looking for Lisp hackers, I would have been really worried.  </p><p>在开发 Viaweb 的那些年里，我读了很多招聘描述。几乎每个月都会冒出新的竞争对手。查看他们是否有在线演示后，我做的第一件事就是看招聘信息。几年下来，我已经能判断哪些公司值得警惕，哪些不必在意。招聘信息越有 “IT 味”，这家公司的威胁就越小。最安全的是那些要求 “Oracle 经验” 的公司 —— 你永远不必担心他们。如果他们招 C++ 或 Java 开发者，你也很安全。如果他们要 Perl 或 Python 程序员，那就要小心了 —— 这听起来像是一家至少技术层面由真正黑客主导的公司。而如果我看到哪家公司招 Lisp 黑客，那才真的会坐立难安。</p><p>Notes </p><p>[1] Viaweb at first had two parts: the editor, written in Lisp, which people used to build their sites, and the ordering system, written in C, which handled orders. The first version was mostly Lisp, because the ordering system was small. Later we added two more modules, an image generator written in C, and a back-office manager written mostly in Perl. In January 2003, Yahoo released a new version of the editor written in C++ and Perl. It’s hard to say whether the program is no longer written in Lisp, though, because to translate this program into C++ they literally had to write a Lisp interpreter: the source files of all the page-generating templates are still, as far as I know, Lisp code. (See Greenspun’s Tenth Rule.) </p><p>[1] Viaweb 最初分为两部分：用于搭建网站的编辑器（用 Lisp 编写），和处理订单的订单系统（用 C 编写）。第一版以 Lisp 为主，因为订单系统规模很小。后来我们新增了两个模块：用 C 写的图像生成器，和主要用 Perl 写的后台管理工具。2003 年 1 月，雅虎发布了用 C++ 和 Perl 重写的新版编辑器。但很难说这个程序从此就与 Lisp 无关了 —— 因为要把原程序翻译成 C++，他们实际上不得不写一个 Lisp 解释器：据我所知，所有页面生成模板的源代码仍然是 Lisp 代码（参见格林斯潘第十法则）。</p><p>[2] Robert Morris says that I didn’t need to be secretive, because even if our competitors had known we were using Lisp, they wouldn’t have understood why: “If they were that smart they’d already be programming in Lisp.” </p><p>[2] 罗伯特・莫里斯说，我其实不必保密，因为即便竞争对手知道我们用 Lisp，也不会明白原因：“如果他们足够聪明，早就开始用 Lisp 编程了。”</p><p>[3] All languages are equally powerful in the sense of being Turing equivalent, but that’s not the sense of the word programmers care about. (No one wants to program a Turing machine.) The kind of power programmers care about may not be formally definable, but one way to explain it would be to say that it refers to features you could only get in the less powerful language by writing an interpreter for the more powerful language in it. If language A has an operator for removing spaces from strings and language B doesn’t, that probably doesn’t make A more powerful, because you can probably write a subroutine to do it in B. But if A supports, say, recursion, and B doesn’t, that’s not likely to be something you can fix by writing library functions. </p><p>[3] 从图灵等价的角度看，所有语言的能力相同，但这并非程序员关心的 “能力”。（没人想用图灵机编程。）程序员关注的能力或许无法被形式化定义，但可以这样解释：如果在较弱的语言中实现较强语言的某个特性，必须为此编写一个解释器，那么这个特性就体现了语言能力的差异。例如，语言 A 有移除字符串空格的运算符，而语言 B 没有，这未必说明 A 更强 —— 因为 B 可以用子程序实现；但如果 A 支持递归而 B 不支持，这就很难通过库函数弥补了。</p><p>[4] Note to nerds: or possibly a lattice, narrowing toward the top; it’s not the shape that matters here but the idea that there is at least a partial order. </p><p>[4] 给技术宅的注：也可能是一个向上收窄的格状结构；重要的不是形状，而是语言能力存在某种 “部分排序” 关系。</p><p>[5] It is a bit misleading to treat macros as a separate feature. In practice their usefulness is greatly enhanced by other Lisp features like lexical closures and rest parameters. </p><p>[5] 把宏视为独立特性有点误导。实际上，宏的价值很大程度上依赖于 Lisp 的其他特性，如词法闭包和剩余参数。</p><p>[6] As a result, comparisons of programming languages either take the form of religious wars or undergraduate textbooks so determinedly neutral that they’re really works of anthropology. People who value their peace, or want tenure, avoid the topic. But the question is only half a religious one; there is something there worth studying, especially if you want to design new languages. </p><p>[6] 因此，编程语言的比较要么沦为 “宗教战争”，要么像本科教材那样刻意中立，实则成了人类学研究。想保平安或求 tenure 的人会避开这个话题。但这个问题只有一半是 “宗教性” 的 —— 其中有值得研究的内容，尤其是对想设计新语言的人而言。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从用户那里我学到了什么</title>
    <link href="/2025/07/28/what-i-have-learned-from-users/"/>
    <url>/2025/07/28/what-i-have-learned-from-users/</url>
    
    <content type="html"><![CDATA[<h2 id="What-I’ve-Learned-from-Users"><a href="#What-I’ve-Learned-from-Users" class="headerlink" title="What I’ve Learned from Users"></a>What I’ve Learned from Users</h2><p>原文链接: <a href="https://paulgraham.com/users.html">https://paulgraham.com/users.html</a></p><p>September 2022 </p><p>I recently told applicants to Y Combinator that the best advice I could give for getting in, per word, was: </p><p>最近，我对 Y Combinator（简称 YC）的申请者说，若论 “每字价值”，能给出的最佳申请建议是：</p><blockquote><p> Explain what you’ve learned from users. </p></blockquote><blockquote><p><strong>解释你从用户身上学到了什么。</strong></p></blockquote><p>That tests a lot of things: whether you’re paying attention to users, how well you understand them, and even how much they need what you’re making. </p><p>这句话能检验出很多东西：你是否关注用户、对用户的理解有多深，甚至用户对你所做产品的需求有多迫切。</p><p>Afterward I asked myself the same question. What have I learned from YC’s users, the startups we’ve funded? </p><p>之后，我问了自己同样的问题：我从 YC 的用户 —— 也就是我们投资的初创公司身上，学到了什么？</p><p>The first thing that came to mind was that most startups have the same problems. No two have exactly the same problems, but it’s surprising how much the problems remain the same, regardless of what they’re making. Once you’ve advised 100 startups all doing different things, you rarely encounter problems you haven’t seen before. </p><p>首先想到的是，大多数初创公司面临的问题是相似的。没有两家公司的问题完全相同，但无论它们做什么业务，问题的共性之高都令人惊讶。当你为 100 家业务各异的初创公司提供过建议后，几乎不会遇到从未见过的新问题。</p><p>This fact is one of the things that makes YC work. But I didn’t know it when we started YC. I only had a few data points: our own startup, and those started by friends. It was a surprise to me how often the same problems recur in different forms. Many later stage investors might never realize this, because later stage investors might not advise 100 startups in their whole career, but a YC partner will get this much experience in the first year or two. </p><p>这一事实正是 YC 能够有效运作的原因之一。但在创办 YC 时，我并不知道这一点。当时我只有几个案例：我们自己的初创公司，以及朋友创办的公司。后来发现，同样的问题会以不同形式反复出现，这让我很意外。许多后期投资者可能永远不会意识到这一点，因为他们整个职业生涯中或许都不会为 100 家初创公司提供建议，但 YC 的合伙人在入职头一两年就能积累这样的经验。</p><p>That’s one advantage of funding large numbers of early stage companies rather than smaller numbers of later-stage ones. You get a lot of data. Not just because you’re looking at more companies, but also because more goes wrong. </p><p>这正是投资大量早期公司而非少量后期公司的优势之一：能获得大量数据。不仅因为关注的公司更多，还因为早期公司出的问题更多。</p><p>But knowing (nearly) all the problems startups can encounter doesn’t mean that advising them can be automated, or reduced to a formula. There’s no substitute for individual office hours with a YC partner. Each startup is unique, which means they have to be advised by specific partners who know them well. [1] </p><p>但即便（几乎）了解初创公司可能遇到的所有问题，也不意味着可以将咨询流程自动化或简化成公式。与 YC 合伙人的一对一办公时间是无可替代的。每家初创公司都是独特的，这意味着需要由熟悉它们的特定合伙人提供针对性建议。[1]</p><p>We learned that the hard way, in the notorious “batch that broke YC” in the summer of 2012. Up till that point we treated the partners as a pool. When a startup requested office hours, they got the next available slot posted by any partner. That meant every partner had to know every startup. This worked fine up to 60 startups, but when the batch grew to 80, everything broke. The founders probably didn’t realize anything was wrong, but the partners were confused and unhappy because halfway through the batch they still didn’t know all the companies yet. [2] </p><p>我们是从惨痛经历中明白这一点的 ——2012 年夏天那个 “搞垮了 YC” 的批次。在此之前，我们把合伙人当作一个 “资源池”：当某家初创公司申请办公时间时，会分配给任何合伙人的下一个空闲时段。这意味着每个合伙人都必须了解所有初创公司。这种模式在 60 家公司时还行得通，但当批次规模扩大到 80 家，一切就乱了。创始人可能没意识到有问题，但合伙人却感到困惑和不满，因为批次进行到一半时，他们仍没了解所有公司。[2]</p><p>At first I was puzzled. How could things be fine at 60 startups and broken at 80? It was only a third more. Then I realized what had happened. We were using an O(n2) algorithm. So of course it blew up. </p><p>起初我很困惑：为什么 60 家公司时一切顺利，80 家就出问题了？不过才多了三分之一而已。后来我意识到，我们用的是 “O (n²)” 算法（复杂度随数量平方增长），所以必然会崩溃。</p><p>The solution we adopted was the classic one in these situations. We sharded the batch into smaller groups of startups, each overseen by a dedicated group of partners. That fixed the problem, and has worked fine ever since. But the batch that broke YC was a powerful demonstration of how individualized the process of advising startups has to be. </p><p>我们采取的解决办法很经典：将批次拆分成更小的初创公司组，每组由专门的合伙人团队负责。问题就此解决，且沿用至今。但 “搞垮 YC 的批次” 有力地证明了：为初创公司提供咨询必须个性化。</p><p>Another related surprise is how bad founders can be at realizing what their problems are. Founders will sometimes come in to talk about some problem, and we’ll discover another much bigger one in the course of the conversation. For example (and this case is all too common), founders will come in to talk about the difficulties they’re having raising money, and after digging into their situation, it turns out the reason is that the company is doing badly, and investors can tell. Or founders will come in worried that they still haven’t cracked the problem of user acquisition, and the reason turns out to be that their product isn’t good enough. There have been times when I’ve asked “Would you use this yourself, if you hadn’t built it?” and the founders, on thinking about it, said “No.” Well, there’s the reason you’re having trouble getting users. </p><p>另一个相关的意外发现是：创始人往往看不清自己的问题所在。有时他们来讨论某个问题，我们却在交谈中发现了一个严重得多的问题。比如（这种情况太常见了），创始人来谈融资困难，深入了解后却发现，原因是公司业务表现不佳，而投资者一眼就能看穿。又或者，他们担心用户获取难题，实则是产品不够好。有好几次，我问：“如果这不是你自己做的，你会用吗？” 创始人想了想回答 “不会”—— 这就是用户获取难的原因。</p><p>Often founders know what their problems are, but not their relative importance. [3] </p><p>通常，创始人知道自己有哪些问题，但分不清它们的重要性。[3] </p><p>They’ll come in to talk about three problems they’re worrying about. One is of moderate importance, one doesn’t matter at all, and one will kill the company if it isn’t addressed immediately. It’s like watching one of those horror movies where the heroine is deeply upset that her boyfriend cheated on her, and only mildly curious about the door that’s mysteriously ajar. You want to say: never mind about your boyfriend, think about that door! Fortunately in office hours you can. So while startups still die with some regularity, it’s rarely because they wandered into a room containing a murderer. The YC partners can warn them where the murderers are. </p><p>他们可能带着三个担忧来咨询：一个中等重要，一个完全无关紧要，还有一个若不立即解决就会置公司于死地。这就像恐怖电影里的场景：女主角为男友出轨而崩溃，却对神秘敞开的门只略感好奇。你真想对她说：别管男友了，看看那扇门！好在办公时间里，我们可以直接点出来。因此，尽管初创公司仍会倒闭，但很少是因为 “误入有凶手的房间”——YC 合伙人会提醒他们哪里有 “凶手”。</p><p>Not that founders listen. That was another big surprise: how often founders don’t listen to us. A couple weeks ago I talked to a partner who had been working for YC for a couple batches and was starting to see the pattern. “They come back a year later,” she said, “and say ‘We wish we’d listened to you.’” </p><p>但问题是，创始人未必会听。这是另一个令人惊讶的发现：他们常常不听我们的建议。几周前，一位共事了几个批次的合伙人跟我说，她发现了一个规律：“一年后，他们会回来对我说‘真该听你的’。”</p><p>It took me a long time to figure out why founders don’t listen. At first I thought it was mere stubbornness. That’s part of the reason, but another and probably more important reason is that so much about startups is counterintuitive. And when you tell someone something counterintuitive, what it sounds to them is wrong. So the reason founders don’t listen to us is that they don’t believe us. At least not till experience teaches them otherwise. [4] </p><p>我花了很久才弄明白创始人不听建议的原因。起初以为是固执，这确实是部分原因，但更重要的是，初创公司的很多事都违背直觉。当你告诉别人一件反直觉的事，在他们听来就是错的。所以，创始人不听建议，是因为不相信 —— 至少在亲身经历证明我们是对的之前不相信。[4]</p><p>The reason startups are so counterintuitive is that they’re so different from most people’s other experiences. No one knows what it’s like except those who’ve done it. Which is why YC partners should usually have been founders themselves. But strangely enough, the counterintuitiveness of startups turns out to be another of the things that make YC work. If it weren’t counterintuitive, founders wouldn’t need our advice about how to do it. </p><p>初创公司之所以反直觉，是因为它们与大多数人的其他经历截然不同。只有亲身经历过的人才懂。这也是为什么 YC 合伙人通常自己也做过创始人。但奇妙的是，这种反直觉恰恰是 YC 能发挥作用的另一个原因：如果一切都符合直觉，创始人就不需要我们的建议了。</p><p>Focus is doubly important for early stage startups, because not only do they have a hundred different problems, they don’t have anyone to work on them except the founders. If the founders focus on things that don’t matter, there’s no one focusing on the things that do. So the essence of what happens at YC is to figure out which problems matter most, then cook up ideas for solving them — ideally at a resolution of a week or less — and then try those ideas and measure how well they worked. The focus is on action, with measurable, near-term results. </p><p>专注对早期初创公司尤为重要，因为它们不仅有上百个问题，还没人能分担 —— 只能靠创始人自己。如果创始人专注于无关紧要的事，就没人去管真正重要的事了。因此，YC 的核心工作是：找出最关键的问题，想出解决办法（最好能在一周内见效），然后尝试并衡量效果。重点是行动，以及可衡量的短期结果。</p><p>This doesn’t imply that founders should rush forward regardless of the consequences. If you correct course at a high enough frequency, you can be simultaneously decisive at a micro scale and tentative at a macro scale. The result is a somewhat winding path, but executed very rapidly, like the path a running back takes downfield. And in practice there’s less backtracking than you might expect. Founders usually guess right about which direction to run in, especially if they have someone experienced like a YC partner to bounce their hypotheses off. And when they guess wrong, they notice fast, because they’ll talk about the results at office hours the next week. [5] </p><p>这并不意味着创始人应该不顾后果地贸然行动。如果能高频调整方向，就能在微观层面果断决策，同时在宏观层面保持试探。结果可能是一条曲折的路，但推进速度极快，就像橄榄球跑卫带球冲阵的路线。实际上，回头路比想象中少：创始人通常能猜对方向，尤其是在有 YC 合伙人这样的过来人帮他们验证假设的情况下。即便猜错了，也能很快发现 —— 因为下周的办公时间他们就要汇报结果了。[5]</p><p>A small improvement in navigational ability can make you a lot faster, because it has a double effect: the path is shorter, and you can travel faster along it when you’re more certain it’s the right one. That’s where a lot of YC’s value lies, in helping founders get an extra increment of focus that lets them move faster. And since moving fast is the essence of a startup, YC in effect makes startups more startup-like. </p><p>导航能力的微小提升能大幅加快速度，原因有二：路径更短，且在确定方向正确时能跑得更快。这正是 YC 的核心价值之一：帮助创始人多一分专注，从而加速前进。而既然速度是初创公司的核心，YC 实际上是让初创公司更 “初创”。</p><p>Speed defines startups. Focus enables speed. YC improves focus. </p><p>速度定义初创公司，专注成就速度，YC 提升专注。</p><p>Why are founders uncertain about what to do? Partly because startups almost by definition are doing something new, which means no one knows how to do it yet, or in most cases even what “it” is. Partly because startups are so counterintuitive generally. And partly because many founders, especially young and ambitious ones, have been trained to win the wrong way. That took me years to figure out. The educational system in most countries trains you to win by hacking the test instead of actually doing whatever it’s supposed to measure. But that stops working when you start a startup. So part of what YC does is to retrain founders to stop trying to hack the test. (It takes a surprisingly long time. A year in, you still see them reverting to their old habits.) </p><p>创始人为何不确定该做什么？部分原因是，初创公司本质上在做新事，没人知道该怎么做，甚至多数时候连 “要做的事到底是什么” 都不清楚。另一部分原因是，初创公司本身就充满反直觉的事。还有一部分原因是，许多创始人 —— 尤其是年轻且有野心的 —— 被训练成了 “为考试而投机” 而非 “为目标而行动”。我花了好几年才意识到这一点。多数国家的教育体系训练人通过 “钻考试空子” 获胜，而非真正做好考试本应衡量的事。但在初创公司里，这一套行不通了。因此，YC 的部分工作是重新训练创始人：别再试图 “钻空子”（这需要的时间长得惊人，一年后仍能看到他们重拾旧习）。</p><p>YC is not simply more experienced founders passing on their knowledge. It’s more like specialization than apprenticeship. The knowledge of the YC partners and the founders have different shapes: It wouldn’t be worthwhile for a founder to acquire the encyclopedic knowledge of startup problems that a YC partner has, just as it wouldn’t be worthwhile for a YC partner to acquire the depth of domain knowledge that a founder has. That’s why it can still be valuable for an experienced founder to do YC, just as it can still be valuable for an experienced athlete to have a coach. </p><p>YC 不只是有经验的创始人传授知识，更像是 “专业化分工” 而非 “学徒制”。YC 合伙人与创始人的知识结构不同：创始人没必要像 YC 合伙人那样掌握关于初创公司问题的百科全书式知识，就像 YC 合伙人也没必要拥有创始人那样深厚的领域知识。这也是为什么即使是有经验的创始人，参加 YC 也仍有价值 —— 就像有经验的运动员也需要教练。</p><p>The other big thing YC gives founders is colleagues, and this may be even more important than the advice of partners. If you look at history, great work clusters around certain places and institutions: Florence in the late 15th century, the University of Göttingen in the late 19th, The New Yorker under Ross, Bell Labs, Xerox PARC. However good you are, good colleagues make you better. Indeed, very ambitious people probably need colleagues more than anyone else, because they’re so starved for them in everyday life. </p><p>YC 给创始人的另一大财富是同伴，这可能比合伙人的建议更重要。纵观历史，伟大的成就往往扎堆出现在特定地点和机构：15 世纪末的佛罗伦萨、19 世纪末的哥廷根大学、罗斯执掌的《纽约客》、贝尔实验室、施乐 PARC。无论你多优秀，优秀的同伴都能让你更出色。事实上，有远大抱负的人或许最需要同伴，因为日常生活中很难找到同类。</p><p>Whether or not YC manages one day to be listed alongside those famous clusters, it won’t be for lack of trying. We were very aware of this historical phenomenon and deliberately designed YC to be one. By this point it’s not bragging to say that it’s the biggest cluster of great startup founders. Even people trying to attack YC concede that. </p><p>无论 YC 未来能否跻身这些著名 “集群” 之列，我们都在努力。我们深知这种历史现象，因此在设计 YC 时就刻意朝这个方向努力。如今可以毫不夸张地说，这里聚集了最多优秀的初创公司创始人 —— 就连批评 YC 的人也不得不承认这一点。</p><p>Colleagues and startup founders are two of the most powerful forces in the world, so you’d expect it to have a big effect to combine them. Before YC, to the extent people thought about the question at all, most assumed they couldn’t be combined — that loneliness was the price of independence. That was how it felt to us when we started our own startup in Boston in the 1990s. We had a handful of older people we could go to for advice (of varying quality), but no peers. There was no one we could commiserate with about the misbehavior of investors, or speculate with about the future of technology. I often tell founders to make something they themselves want, and YC is certainly that: it was designed to be exactly what we wanted when we were starting a startup. </p><p>在 YC 之前，人们即便想到这个问题，也大多认为 “同伴” 与 “初创公司” 不可兼得 —— 孤独是独立创业的代价。20 世纪 90 年代，我们在波士顿创办自己的初创公司时就是这种感受：能咨询的前辈寥寥无几（且建议质量参差不齐），却没有同行。没人能一起吐槽投资者的奇葩行为，也没人能一起畅想技术未来。我常对创始人说 “做自己想要的产品”，YC 本身就是如此 —— 它正是我们创业时渴望拥有的东西。</p><p>One thing we wanted was to be able to get seed funding without having to make the rounds of random rich people. That has become a commodity now, at least in the US. But great colleagues can never become a commodity, because the fact that they cluster in some places means they’re proportionally absent from the rest. </p><p>我们当时想要的，包括不必挨个找随机的富人就能拿到种子轮融资。如今，这在美国已不算难事。但优秀的同伴永远无法 “批量复制”—— 正因为他们聚集在某些地方，其他地方才会稀缺。</p><p>Something magical happens where they do cluster though. The energy in the room at a YC dinner is like nothing else I’ve experienced. We would have been happy just to have one or two other startups to talk to. When you have a whole roomful it’s another thing entirely. </p><p>而当同伴真正聚集时，奇迹就会发生。YC 晚宴上的那种活力，是我在别处从未见过的。我们当初能有一两家同行交流就很满足了，而一屋子同行的感觉完全不同。</p><p>YC founders aren’t just inspired by one another. They also help one another. That’s the happiest thing I’ve learned about startup founders: how generous they can be in helping one another. We noticed this in the first batch and consciously designed YC to magnify it. The result is something far more intense than, say, a university. Between the partners, the alumni, and their batchmates, founders are surrounded by people who want to help them, and can.      </p><p>YC 的创始人不仅相互启发，还彼此帮助。这是我从初创公司创始人身上学到的最令人欣慰的事：他们在帮助同行时能如此慷慨。我们在第一个批次就发现了这一点，并刻意设计 YC 来放大这种精神。结果是，这里的氛围比大学等场所浓烈得多。在合伙人、校友和同批次伙伴的围绕下，创始人身边全是愿意且有能力帮助他们的人。</p><p>Notes </p><p>[1] This is why I’ve never liked it when people refer to YC as a “bootcamp.” It’s intense like a bootcamp, but the opposite in structure. Instead of everyone doing the same thing, they’re each talking to YC partners to figure out what their specific startup needs. </p><p>[1] 这也是我不喜欢人们把 YC 称为 “训练营” 的原因。它和训练营一样高强度，但结构完全相反：不是所有人都做同样的事，而是各自与 YC 合伙人沟通，找到自己公司的特定需求。</p><p>[2] When I say the summer 2012 batch was broken, I mean it felt to the partners that something was wrong. Things weren’t yet so broken that the startups had a worse experience. In fact that batch did unusually well. </p><p>[2] 我说 2012 年夏天的批次 “垮了”，是指合伙人觉得有问题。当时还没到影响初创公司体验的地步，事实上那个批次的表现异常好。</p><p>[3] This situation reminds me of the research showing that people are much better at answering questions than they are at judging how accurate their answers are. The two phenomena feel very similar. </p><p>[3] 这种情况让我想到一项研究：人们回答问题的能力，远好于判断自己答案准确性的能力。这两种现象很相似。</p><p>[4] The Airbnbs were particularly good at listening — partly because they were flexible and disciplined, but also because they’d had such a rough time during the preceding year. They were ready to listen. </p><p>[4] Airbnb 的创始人尤其善于倾听 —— 部分因为他们灵活且自律，也因为前一年经历了太多困境，他们已经做好了倾听的准备。</p><p>[5] The optimal unit of decisiveness depends on how long it takes to get results, and that depends on the type of problem you’re solving. When you’re negotiating with investors, it could be a couple days, whereas if you’re building hardware it could be months.  Thanks to Trevor Blackwell, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.</p><p>[5] 决策的最佳周期取决于获得结果的时间，而这又取决于问题类型。与投资者谈判可能需要几天，而硬件研发可能需要几个月。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天才的集邮理论</title>
    <link href="/2025/07/26/the-bus-ticket-theory-of-genius/"/>
    <url>/2025/07/26/the-bus-ticket-theory-of-genius/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Bus-Ticket-Theory-of-Genius"><a href="#The-Bus-Ticket-Theory-of-Genius" class="headerlink" title="The Bus Ticket Theory of Genius"></a>The Bus Ticket Theory of Genius</h2><p>原文链接: <a href="https://paulgraham.com/genius.html">https://paulgraham.com/genius.html</a></p><p>November 2019 </p><p>(注：原文直译 The Bus Ticket Theory 为公交车票理论，意指美国有人喜欢不带功利主义的收集不同种类的车票，但国内其实没有这种公交车票，故标题改为集邮理论比较贴切。)</p><p>Everyone knows that to do great work you need both natural ability and determination. But there’s a third ingredient that’s not as well understood: an obsessive interest in a particular topic. </p><p>众所周知，要做出伟大的成就，既需要天赋，也需要决心。但还有第三个要素，其重要性却鲜为人知：对某个特定领域近乎痴迷的兴趣。</p><p>To explain this point I need to burn my reputation with some group of people, and I’m going to choose bus ticket collectors. There are people who collect old bus tickets. Like many collectors, they have an obsessive interest in the minutiae of what they collect. They can keep track of distinctions between different types of bus tickets that would be hard for the rest of us to remember. Because we don’t care enough. What’s the point of spending so much time thinking about old bus tickets? </p><p>要解释这一点，我可能得得罪一部分人 —— 我选择拿公交车票收集者开刀。有些人会收集旧公交车票。和许多收藏者一样，他们会痴迷于所藏物品的细枝末节。他们能分辨出不同公交车票之间的细微差别，而这些差别对我们其他人来说，可能很难记住。因为我们没那么在乎。花这么多时间琢磨旧公交车票，有什么意义呢？</p><p>Which leads us to the second feature of this kind of obsession: there is no point. A bus ticket collector’s love is disinterested. They’re not doing it to impress us or to make themselves rich, but for its own sake. </p><p>这就引出了这种痴迷的第二个特点：它本身没有 “意义”。公交车票收集者的热爱是不带功利心的。他们这么做不是为了给我们留下深刻印象，也不是为了发财，而是单纯因为热爱。</p><p>When you look at the lives of people who’ve done great work, you see a consistent pattern. They often begin with a bus ticket collector’s obsessive interest in something that would have seemed pointless to most of their contemporaries. One of the most striking features of Darwin’s book about his voyage on the Beagle is the sheer depth of his interest in natural history. His curiosity seems infinite. Ditto for Ramanujan, sitting by the hour working out on his slate what happens to series. </p><p>纵观那些做出伟大成就的人的生平，你会发现一个一致的模式：他们往往始于一种类似 “公交车票收集者” 的痴迷 —— 痴迷于某件在同时代大多数人看来毫无意义的事。达尔文在《贝格尔号航行记》中，对自然史的兴趣之深令人惊叹，他的好奇心仿佛无穷无尽。拉马努金也是如此，他会一连几个小时坐在石板前，演算级数的变化。</p><p>It’s a mistake to think they were “laying the groundwork” for the discoveries they made later. There’s too much intention in that metaphor. Like bus ticket collectors, they were doing it because they liked it. </p><p>认为他们是在为后来的发现 “奠定基础”，这是一种误解。这个比喻里包含了太多 “刻意”。就像公交车票收集者一样，他们做这些事，只是因为喜欢。</p><p>But there is a difference between Ramanujan and a bus ticket collector. Series matter, and bus tickets don’t. </p><p>但拉马努金和公交车票收集者之间有一个区别：级数是重要的，而公交车票不是。</p><p>If I had to put the recipe for genius into one sentence, that might be it: to have a disinterested obsession with something that matters. </p><p>如果非要用一句话概括天才的秘诀，或许是：对某个重要的事物抱有不带功利心的痴迷。</p><p>Aren’t I forgetting about the other two ingredients? Less than you might think. An obsessive interest in a topic is both a proxy for ability and a substitute for determination. Unless you have sufficient mathematical aptitude, you won’t find series interesting. And when you’re obsessively interested in something, you don’t need as much determination: you don’t need to push yourself as hard when curiosity is pulling you. </p><p>我是不是忽略了另外两个要素？其实没有你想的那么严重。对一个领域的痴迷，既是能力的体现，也能替代决心。除非你有足够的数学天赋，否则你不会觉得级数有趣。而当你痴迷于某件事时，你就不需要那么多决心了：当好奇心在 “拉着” 你时，你就不用费那么大劲 “推” 自己了。</p><p>An obsessive interest will even bring you luck, to the extent anything can. Chance, as Pasteur said, favors the prepared mind, and if there’s one thing an obsessed mind is, it’s prepared. </p><p>这种痴迷甚至能给你带来运气 —— 如果说 “运气” 真的存在的话。正如巴斯德所说，机遇偏爱有准备的头脑，而痴迷的头脑，无疑是 “有准备” 的。</p><p>The disinterestedness of this kind of obsession is its most important feature. Not just because it’s a filter for earnestness, but because it helps you discover new ideas. </p><p>这种痴迷的 “非功利性” 是其最重要的特点。不仅因为它能筛选出真正的热忱，更因为它能帮你发现新想法。</p><p>The paths that lead to new ideas tend to look unpromising. If they looked promising, other people would already have explored them. How do the people who do great work discover these paths that others overlook? The popular story is that they simply have better vision: because they’re so talented, they see paths that others miss. But if you look at the way great discoveries are made, that’s not what happens. Darwin didn’t pay closer attention to individual species than other people because he saw that this would lead to great discoveries, and they didn’t. He was just really, really interested in such things. </p><p>通往新想法的道路，往往看起来毫无前景。如果它们看起来前途光明，其他人早就去探索了。那些做出伟大成就的人，是如何发现这些被他人忽视的道路的？人们普遍认为，他们只是视力更好：因为天赋异禀，所以能看到别人看不到的路。但如果你仔细观察伟大发现的诞生过程，就会发现事实并非如此。达尔文对单个物种的关注比其他人更密切，不是因为他预见到这会带来伟大的发现，而别人没预见到 —— 他只是真的对这些东西非常非常感兴趣。</p><p>Darwin couldn’t turn it off. Neither could Ramanujan. They didn’t discover the hidden paths that they did because they seemed promising, but because they couldn’t help it. That’s what allowed them to follow paths that someone who was merely ambitious would have ignored. </p><p>达尔文无法停止这种兴趣，拉马努金也一样。他们发现那些被隐藏的道路，不是因为这些路看起来有前景，而是因为他们忍不住。这正是他们能沿着那些 “仅仅有野心的人” 会忽略的道路走下去的原因。</p><p>What rational person would decide that the way to write great novels was to begin by spending several years creating an imaginary elvish language, like Tolkien, or visiting every household in southwestern Britain, like Trollope? No one, including Tolkien and Trollope. </p><p>哪个理性的人会决定，写伟大的小说要从花几年时间创造一种虚构的精灵语开始（比如托尔金），或者去拜访英国西南部的每一户人家（比如特罗洛普）？没人会，包括托尔金和特罗洛普自己。</p><p>The bus ticket theory is similar to Carlyle’s famous definition of genius as an infinite capacity for taking pains. But there are two differences. The bus ticket theory makes it clear that the source of this infinite capacity for taking pains is not infinite diligence, as Carlyle seems to have meant, but the sort of infinite interest that collectors have. It also adds an important qualification: an infinite capacity for taking pains about something that matters. </p><p>这个 “公交车票理论” 有点像卡莱尔对天才的著名定义 ——“无穷的吃苦耐劳能力”。但两者有两个区别。公交车票理论明确指出，这种 “无穷的吃苦耐劳能力” 的源头，并非卡莱尔所暗示的 “无穷的勤奋”，而是收藏者那种 “无穷的兴趣”；此外，它还加了一个重要限定：这种 “无穷的吃苦耐劳” 要针对 “重要的事物”。</p><p>So what matters? You can never be sure. It’s precisely because no one can tell in advance which paths are promising that you can discover new ideas by working on what you’re interested in. </p><p>那么，什么是 “重要的事物”？你永远无法确定。正因为没人能提前知道哪些道路有前景，你才能通过钻研自己感兴趣的事，发现新想法。</p><p>But there are some heuristics you can use to guess whether an obsession might be one that matters. For example, it’s more promising if you’re creating something, rather than just consuming something someone else creates. It’s more promising if something you’re interested in is difficult, especially if it’s more difficult for other people than it is for you. And the obsessions of talented people are more likely to be promising. When talented people become interested in random things, they’re not truly random. </p><p>但有一些方法可以帮你猜测一种痴迷是否可能 “重要”。比如，如果你在 “创造” 某样东西，而不是仅仅 “消费” 别人创造的东西，这种痴迷更有前景；如果你感兴趣的事很难，尤其是对别人比对你更难，这种痴迷更有前景；有天赋的人的痴迷，也更可能有前景 —— 当有天赋的人对 “随机的事” 产生兴趣时，这些事往往并非真的随机。</p><p>But you can never be sure. In fact, here’s an interesting idea that’s also rather alarming if it’s true: it may be that to do great work, you also have to waste a lot of time. </p><p>但你永远无法完全确定。事实上，有一个有趣但可能令人不安的想法：要做出伟大的成就，或许你也得浪费很多时间。</p><p>In many different areas, reward is proportionate to risk. If that rule holds here, then the way to find paths that lead to truly great work is to be willing to expend a lot of effort on things that turn out to be every bit as unpromising as they seem. </p><p>在很多领域，回报与风险成正比。如果这个规律在这里也成立，那么找到能通向伟大成就的道路的方法，就是愿意在那些看起来毫无前景的事情上投入大量精力。</p><p>I’m not sure if this is true. On one hand, it seems surprisingly difficult to waste your time so long as you’re working hard on something interesting. So much of what you do ends up being useful. But on the other hand, the rule about the relationship between risk and reward is so powerful that it seems to hold wherever risk occurs. Newton’s case, at least, suggests that the risk&#x2F;reward rule holds here. He’s famous for one particular obsession of his that turned out to be unprecedentedly fruitful: using math to describe the world. But he had two other obsessions, alchemy and theology, that seem to have been complete wastes of time. He ended up net ahead. His bet on what we now call physics paid off so well that it more than compensated for the other two. But were the other two necessary, in the sense that he had to take big risks to make such big discoveries? I don’t know. </p><p>我不确定这是否正确。一方面，只要你在努力钻研自己感兴趣的事，似乎就很难 “浪费时间”—— 你做的很多事最终都会派上用场。但另一方面，风险与回报的规律如此强大，似乎在所有存在风险的领域都成立。至少牛顿的例子说明，这个规律在这里是成立的。他因对 “用数学描述世界” 的痴迷而闻名，这种痴迷的成果前所未有；但他还有另外两个痴迷 —— 炼金术和神学，它们似乎完全是浪费时间。最终他是 “净赚” 的：他在我们如今所说的 “物理学” 上的投入，回报之高足以弥补另外两个领域的 “亏损”。但问题是，另外两个 “亏损” 是否有必要？也就是说，他是否必须冒巨大的风险，才能有巨大的发现？我不知道。</p><p>Here’s an even more alarming idea: might one make all bad bets? It probably happens quite often. But we don’t know how often, because these people don’t become famous. </p><p>还有一个更令人不安的想法：会不会有人所有的 “赌注” 都下错了？这可能经常发生。但我们不知道有多频繁，因为这些人不会出名。</p><p>It’s not merely that the returns from following a path are hard to predict. They change dramatically over time. 1830 was a really good time to be obsessively interested in natural history. If Darwin had been born in 1709 instead of 1809, we might never have heard of him. </p><p>不仅回报难以预测，其本身还会随时间发生巨大变化。1830 年是痴迷自然史的黄金时代。如果达尔文出生在 1709 年而不是 1809 年，我们可能永远不会听说他。</p><p>What can one do in the face of such uncertainty? One solution is to hedge your bets, which in this case means to follow the obviously promising paths instead of your own private obsessions. But as with any hedge, you’re decreasing reward when you decrease risk. If you forgo working on what you like in order to follow some more conventionally ambitious path, you might miss something wonderful that you’d otherwise have discovered. That too must happen all the time, perhaps even more often than the genius whose bets all fail. </p><p>面对这种不确定性，人能做些什么？一种办法是 “对冲赌注”—— 也就是选择那些明显有前景的道路，而非自己私人的痴迷。但就像所有对冲行为一样，降低风险的同时，你也降低了回报。如果你放弃钻研自己喜欢的事，转而去追随那些被同行公认 “有前景” 的道路，你可能会错过那些本可以发现的精彩。这种情况肯定也经常发生，甚至比 “天才押错赌注” 更常见。</p><p>The other solution is to let yourself be interested in lots of different things. You don’t decrease your upside if you switch between equally genuine interests based on which seems to be working so far. But there is a danger here too: if you work on too many different projects, you might not get deeply enough into any of them. </p><p>另一种办法是让自己对很多不同的事感兴趣。如果你能在几个同样真诚的兴趣之间切换（根据哪一个目前看起来更有进展），你的 “上限” 不会降低。但这里也有风险：如果同时做太多不同的项目，你可能在任何一个项目上都无法钻研得足够深。</p><p>One interesting thing about the bus ticket theory is that it may help explain why different types of people excel at different kinds of work. Interest is much more unevenly distributed than ability. If natural ability is all you need to do great work, and natural ability is evenly distributed, you have to invent elaborate theories to explain the skewed distributions we see among those who actually do great work in various fields. But it may be that much of the skew has a simpler explanation: different people are interested in different things. </p><p>“公交车票理论” 的一个有趣之处在于，它或许能解释为什么不同的人擅长不同的工作。兴趣的分布比能力的分布更不均衡。如果说 “只要有天赋就能做出伟大成就”，而天赋的分布是均衡的，那么我们就必须编造复杂的理论来解释：为什么在各个领域做出伟大成就的人，其分布如此不均？但或许，这种不均有一个更简单的解释：不同的人对不同的事感兴趣。</p><p>The bus ticket theory also explains why people are less likely to do great work after they have children. Here interest has to compete not just with external obstacles, but with another interest, and one that for most people is extremely powerful. It’s harder to find time for work after you have kids, but that’s the easy part. The real change is that you don’t want to. </p><p>这个理论也能解释为什么人有了孩子之后，就不太可能做出伟大的成就了。这时，兴趣不仅要与外部障碍竞争，还要与另一种兴趣竞争 —— 对大多数人来说，这种兴趣极其强烈。有了孩子后，很难找到时间工作，但这只是简单的部分。真正的变化是：你不想工作了。</p><p>But the most exciting implication of the bus ticket theory is that it suggests ways to encourage great work. If the recipe for genius is simply natural ability plus hard work, all we can do is hope we have a lot of ability, and work as hard as we can. But if interest is a critical ingredient in genius, we may be able, by cultivating interest, to cultivate genius. </p><p>但 “公交车票理论” 最令人兴奋的启示是：它指出了培养伟大成就的方法。如果天才的秘诀只是 “天赋 + 努力”，我们能做的就只有祈祷自己天赋异禀，并拼命努力。但如果兴趣是天才的关键要素，那么通过培养兴趣，我们或许就能培养出天才。</p><p>For example, for the very ambitious, the bus ticket theory suggests that the way to do great work is to relax a little. Instead of gritting your teeth and diligently pursuing what all your peers agree is the most promising line of research, maybe you should try doing something just for fun. And if you’re stuck, that may be the vector along which to break out. </p><p>比如，对于那些极具野心的人来说，“公交车票理论” 暗示：做出伟大成就的方法是 “放松一点”。与其咬紧牙关、兢兢业业地追逐那些被同行一致认为 “最有前景” 的研究方向，不如试着做点纯粹为了好玩的事。如果你陷入瓶颈，这或许就是突破的方向。</p><p>I’ve always liked Hamming’s famous double-barrelled question: what are the most important problems in your field, and why aren’t you working on one of them? It’s a great way to shake yourself up. But it may be overfitting a bit. It might be at least as useful to ask yourself: if you could take a year off to work on something that probably wouldn’t be important but would be really interesting, what would it be? </p><p>我一直很喜欢汉明那个著名的 “双问”：你所在领域最重要的问题是什么？你为什么没在研究其中一个？这是一个很棒的自我警醒的方法。但它可能有点 “过度拟合” 了。或许，问自己另一个问题也同样有用：如果你能休假一年，去做一件可能不重要但真的很有趣的事，那会是什么？</p><p>The bus ticket theory also suggests a way to avoid slowing down as you get older. Perhaps the reason people have fewer new ideas as they get older is not simply that they’re losing their edge. It may also be because once you become established, you can no longer mess about with irresponsible side projects the way you could when you were young and no one cared what you did. </p><p>“公交车票理论” 还指出了避免随年龄增长而 “停滞” 的方法。人年纪越大，新想法越少，或许不只是因为 “能力衰退”。也可能是因为，一旦你功成名就，就再也不能像年轻时那样，肆无忌惮地摆弄那些 “不务正业的副业” 了 —— 那时没人在乎你做什么。</p><p>The solution to that is obvious: remain irresponsible. It will be hard, though, because the apparently random projects you take up to stave off decline will read to outsiders as evidence of it. And you yourself won’t know for sure that they’re wrong. But it will at least be more fun to work on what you want. </p><p>解决办法很明显：保持 “不务正业”。但这很难，因为你为了延缓衰退而投身的那些看似随机的项目，在外界看来可能正是 “衰退的证据”。你自己也无法确定他们是不是错的。但至少，做自己想做的事会更有趣。</p><p>It may even be that we can cultivate a habit of intellectual bus ticket collecting in kids. The usual plan in education is to start with a broad, shallow focus, then gradually become more specialized. But I’ve done the opposite with my kids. I know I can count on their school to handle the broad, shallow part, so I take them deep. </p><p>我们甚至可以培养孩子 “智力上的公交车票收集习惯”。教育的常规思路是：先广泛而浅显地涉猎，再逐渐专业化。但我对自己的孩子反其道而行之。我知道学校会负责 “广泛而浅显” 的部分，所以我会带他们 “深入”。</p><p>When they get interested in something, however random, I encourage them to go preposterously, bus ticket collectorly, deep. I don’t do this because of the bus ticket theory. I do it because I want them to feel the joy of learning, and they’re never going to feel that about something I’m making them learn. It has to be something they’re interested in. I’m just following the path of least resistance; depth is a byproduct. But if in trying to show them the joy of learning I also end up training them to go deep, so much the better. </p><p>当他们对某件事产生兴趣 —— 无论多随机 —— 我都会鼓励他们钻得极深、深到像公交车票收集者那样 “离谱”。我这么做不是因为 “公交车票理论”，而是因为我想让他们感受到学习的乐趣。如果是我逼他们学的东西，他们永远不会有这种乐趣。必须是他们自己感兴趣的事。我只是在 “顺水推舟”，而 “深入” 只是副产品。但如果在向他们展示学习乐趣的过程中，顺便培养了他们 “钻研深入” 的能力，那就更好了。</p><p>Will it have any effect? I have no idea. But that uncertainty may be the most interesting point of all. There is so much more to learn about how to do great work. As old as human civilization feels, it’s really still very young if we haven’t nailed something so basic. It’s exciting to think there are still discoveries to make about discovery. If that’s the sort of thing you’re interested in.      </p><p>这会有效果吗？我不知道。但这种不确定性或许是最有趣的一点。关于 “如何做出伟大成就”，我们还有太多要学。人类文明看似悠久，但如果连这么基础的事都没搞明白，那它其实还很年轻。想到 “关于‘发现’本身，还有待发现的东西”，就很令人兴奋 —— 如果你也对这类事感兴趣的话。</p><p>Notes </p><p>[1] There are other types of collecting that illustrate this point better than bus tickets, but they’re also more popular. It seemed just as well to use an inferior example rather than offend more people by telling them their hobby doesn’t matter. </p><p>[1] 还有其他类型的收藏比公交车票更能说明这个问题，但这些收藏也更受欢迎。与其用那些例子得罪更多人（告诉他们他们的爱好无关紧要），不如用一个没那么贴切的例子。</p><p>[2] I worried a little about using the word “disinterested,” since some people mistakenly believe it means not interested. But anyone who expects to be a genius will have to know the meaning of such a basic word, so I figure they may as well start now. </p><p>[2] 我有点担心用 “disinterested” 这个词，因为有些人会误以为它的意思是 “不感兴趣”。但任何想成为天才的人，都必须知道这个基础词汇的含义，所以我觉得他们不妨从现在开始了解。</p><p>[3] Think how often genius must have been nipped in the bud by people being told, or telling themselves, to stop messing about and be responsible. Ramanujan’s mother was a huge enabler. Imagine if she hadn’t been. Imagine if his parents had made him go out and get a job instead of sitting around at home doing math. On the other hand, anyone quoting the preceding paragraph to justify not getting a job is probably mistaken. </p><p>[3] 想想看，有多少天才的萌芽，是因为有人（或自己）被告知 “别瞎折腾了，正经点” 而被扼杀的。拉马努金的母亲就是一个极大的支持者。试想如果她不是这样呢？如果他的父母逼着他出去找工作，而不是让他坐在家里研究数学呢？不过，要是有人引用上一段来为自己不找工作找借口，那他很可能是错的。</p><p>[4] 1709 Darwin is to time what the Milanese Leonardo is to space. </p><p>[4] 出生在 1709 年的达尔文（与时代错位），就好比出生在米兰的达芬奇（与地域错位）。</p><p>[5] “An infinite capacity for taking pains” is a paraphrase of what Carlyle wrote. What he wrote, in his History of Frederick the Great, was “… it is the fruit of ‘genius’ (which means transcendent capacity of taking trouble, first of all)….” Since the paraphrase seems the name of the idea at this point, I kept it. Carlyle’s History was published in 1858. In 1785 Hérault de Séchelles quoted Buffon as saying “Le génie n’est qu’une plus grande aptitude à la patience.” (Genius is only a greater aptitude for patience.) </p><p>[5] “无穷的吃苦耐劳能力” 是对卡莱尔原话的 paraphrase（意译 &#x2F; 改写）。他在《腓特烈大帝传》中写道：“…… 这是‘天才’的成果（而天才首先意味着超凡的吃苦耐劳能力）……” 既然这个改写版本已经成了这个观点的代名词，我就沿用了它。卡莱尔的《腓特烈大帝传》出版于 1858 年。1785 年，埃罗・德・塞谢勒引用布丰的话：“Le génie n’est qu’une plus grande aptitude à la patience.”（天才不过是更强的耐心罢了。）</p><p>[6] Trollope was establishing the system of postal routes. He himself sensed the obsessiveness with which he pursued this goal. It is amusing to watch how a passion will grow upon a man. During those two years it was the ambition of my life to cover the country with rural letter-carriers. </p><p>[6] 特罗洛普当时在建立邮政路线系统。他自己也意识到了这种追求背后的痴迷：<br>“看着一种热情如何在人身上滋长，是件很有趣的事。那两年，我毕生的志向就是让乡村邮递员遍布全国。”</p><p>Even Newton occasionally sensed the degree of his obsessiveness. After computing pi to 15 digits, he wrote in a letter to a friend: I am ashamed to tell you to how many figures I carried these computations, having no other business at the time. </p><p>就连牛顿也偶尔会意识到自己的痴迷程度。在将 π 计算到 15 位小数后，他在给朋友的信中写道：<br>“我不好意思告诉你我把这些计算做到了多少位，因为那时我没别的事可做。”</p><p>Incidentally, Ramanujan was also a compulsive calculator. As Kanigel writes in his excellent biography: One Ramanujan scholar, B. M. Wilson, later told how Ramanujan’s research into number theory was often “preceded by a table of numerical results, carried usually to a length from which most of us would shrink.” </p><p>顺便说一句，拉马努金也是个 “计算狂”。卡尼格尔在他那本出色的传记中写道：“拉马努金的研究者 B. M. 威尔逊后来提到，拉马努金对数论的研究，往往‘始于一张数值结果表，其长度通常会让我们大多数人望而却步’。”</p><p>[7] Working to understand the natural world counts as creating rather than consuming. Newton tripped over this distinction when he chose to work on theology. His beliefs did not allow him to see it, but chasing down paradoxes in nature is fruitful in a way that chasing down paradoxes in sacred texts is not. </p><p>[7] 努力理解自然世界属于 “创造”，而非 “消费”。牛顿在选择研究神学时，就混淆了这一点。他的信仰让他无法看清：探索自然界中的悖论，与探索宗教文本中的悖论，前者能带来成果，后者则不能。</p><p>[8] How much of people’s propensity to become interested in a topic is inborn? My experience so far suggests the answer is: most of it. Different kids get interested in different things, and it’s hard to make a child interested in something they wouldn’t otherwise be. Not in a way that sticks. The most you can do on behalf of a topic is to make sure it gets a fair showing — to make it clear to them, for example, that there’s more to math than the dull drills they do in school. After that it’s up to the child.</p><p>[8] 人们对某个领域产生兴趣的倾向，有多少是天生的？我的经验告诉我：大部分是。不同的孩子会对不同的事物感兴趣，很难让一个孩子对他本不感兴趣的东西产生兴趣 —— 至少无法让这种兴趣持久。你能为某个领域做的，最多是让它得到公平的展示机会 —— 比如让孩子明白，数学不只是学校里那些枯燥的练习。剩下的，就看孩子自己了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是以及如何努力工作</title>
    <link href="/2025/07/25/how-to-work-hard/"/>
    <url>/2025/07/25/how-to-work-hard/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Work-Hard"><a href="#How-to-Work-Hard" class="headerlink" title="How to Work Hard"></a>How to Work Hard</h2><p>原文链接: <a href="https://paulgraham.com/hwh.html">https://paulgraham.com/hwh.html</a></p><p>June 2021 </p><p>It might not seem there’s much to learn about how to work hard. Anyone who’s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes. </p><p>关于如何努力工作，似乎没什么太多可学的。任何上过学的人都知道努力工作意味着什么，即便他们选择不这么做。有些 12 岁的孩子就已经非常努力了。但如果问我现在对努力工作的理解是否比上学时更深，答案无疑是肯定的。</p><p>One thing I know is that if you want to do great things, you’ll have to work very hard. I wasn’t sure of that as a kid. Schoolwork varied in difficulty; one didn’t always have to work super hard to do well. And some of the things famous adults did, they seemed to do almost effortlessly. Was there, perhaps, some way to evade hard work through sheer brilliance? Now I know the answer to that question. There isn’t. </p><p>我知道的一点是，若想成就伟大的事业，就必须付出极大的努力。小时候我对此并不确定。学校的功课难度不一，有时不必拼尽全力也能做得很好。而且有些知名人士的成就，看似毫不费力就能达成。或许，仅凭过人的天赋就能规避努力工作的必要？如今我有了答案：不能。</p><p>The reason some subjects seemed easy was that my school had low standards. And the reason famous adults seemed to do things effortlessly was years of practice; they made it look easy. </p><p>有些科目看似简单，是因为我所在的学校标准太低。而那些知名人士看似轻松的成就，背后是多年的练习 —— 他们只是让一切看起来毫不费力。</p><p>Of course, those famous adults usually had a lot of natural ability too. There are three ingredients in great work: natural ability, practice, and effort. You can do pretty well with just two, but to do the best work you need all three: you need great natural ability and to have practiced a lot and to be trying very hard. [1] </p><p>当然，这些知名人士通常也极具天赋。伟大的成就由三个要素构成：天赋、练习和努力。具备其中两项就能做得不错，但要做到顶尖，三者缺一不可：你需要极高的天赋、大量的练习，以及全力以赴的努力。[1]</p><p>Bill Gates, for example, was among the smartest people in business in his era, but he was also among the hardest working. “I never took a day off in my twenties,” he said. “Not one.” It was similar with Lionel Messi. He had great natural ability, but when his youth coaches talk about him, what they remember is not his talent but his dedication and his desire to win. P. G. Wodehouse would probably get my vote for best English writer of the 20th century, if I had to choose. Certainly no one ever made it look easier. But no one ever worked harder. At 74, he wrote </p><blockquote><p>with each new book of mine I have, as I say, the feeling that this time I have picked a lemon in the garden of literature. A good thing, really, I suppose. Keeps one up on one’s toes and makes one rewrite every sentence ten times. Or in many cases twenty times. </p></blockquote><p>比如比尔・盖茨，他是自己时代商界最聪明的人之一，但也是最努力的人之一。他曾说：“我二十多岁时一天都没休息过，一天都没有。” 莱昂内尔・梅西也是如此。他天赋异禀，但青年时期的教练们回忆起他时，印象最深的不是他的天赋，而是他的专注和求胜欲。如果要我选 20 世纪最优秀的英语作家，P.G. 伍德豪斯或许会是我的答案。没人比他更能让写作看起来轻松，但也没人比他更努力。74 岁时，他写道：</p><blockquote><p>“就像我说的，每写一本新书，我都觉得自己像是在文学的花园里摘了个柠檬。不过或许这是件好事，能让我时刻保持警觉，把每句话改写十遍，很多时候甚至二十遍。”</p></blockquote><p>Sounds a bit extreme, you think. And yet Bill Gates sounds even more extreme. Not one day off in ten years? These two had about as much natural ability as anyone could have, and yet they also worked about as hard as anyone could work. You need both. </p><p>你可能觉得这有点极端，但比尔・盖茨的经历更极端。十年间一天都不休息？这两个人拥有常人难以企及的天赋，却也付出了常人难以想象的努力。两者你都需要。</p><p>That seems so obvious, and yet in practice we find it slightly hard to grasp. There’s a faint xor between talent and hard work. It comes partly from popular culture, where it seems to run very deep, and partly from the fact that the outliers are so rare. If great talent and great drive are both rare, then people with both are rare squared. Most people you meet who have a lot of one will have less of the other. But you’ll need both if you want to be an outlier yourself. And since you can’t really change how much natural talent you have, in practice doing great work, insofar as you can, reduces to working very hard. </p><p>这道理看似显而易见，但实践中我们却很难完全理解。人们似乎总觉得天赋和努力是 “非此即彼” 的。这种想法部分源于流行文化（其影响根深蒂固），部分源于 “异类” 本身极为罕见。如果极高的天赋和极强的驱动力都很稀有，那么两者兼具的人就更稀有了。你遇到的大多数人，往往在一方面突出，在另一方面就稍显不足。但如果你想成为 “异类”，就必须两者兼具。既然天赋难以改变，那么在实践中，成就伟大的事业（尽你所能）就归结为付出极大的努力。</p><p>It’s straightforward to work hard if you have clearly defined, externally imposed goals, as you do in school. There is some technique to it: you have to learn not to lie to yourself, not to procrastinate (which is a form of lying to yourself), not to get distracted, and not to give up when things go wrong. But this level of discipline seems to be within the reach of quite young children, if they want it. </p><p>如果目标明确且由外部设定（比如上学时），努力工作就很直接。这需要一些技巧：学会不欺骗自己，不拖延（拖延是欺骗自己的一种形式），不分心，遇到问题不放弃。但只要愿意，即便是小孩子也能达到这种自律水平。</p><p>What I’ve learned since I was a kid is how to work toward goals that are neither clearly defined nor externally imposed. You’ll probably have to learn both if you want to do really great things. </p><p>长大后我才明白，如何为那些既不明确也非外部设定的目标努力。若想成就真正伟大的事业，这两种努力方式你可能都得学会。</p><p>The most basic level of which is simply to feel you should be working without anyone telling you to. Now, when I’m not working hard, alarm bells go off. I can’t be sure I’m getting anywhere when I’m working hard, but I can be sure I’m getting nowhere when I’m not, and it feels awful. [2] </p><p>最基础的是，即便没人督促，你也能意识到自己应该工作。现在，如果我没在努力工作，警钟就会敲响。我不确定努力时是否一定有进展，但我确定不努力时一定毫无进展，这种感觉糟透了。[2]</p><p>There wasn’t a single point when I learned this. Like most little kids, I enjoyed the feeling of achievement when I learned or did something new. As I grew older, this morphed into a feeling of disgust when I wasn’t achieving anything. The one precisely dateable landmark I have is when I stopped watching TV, at age 13. </p><p>我并非在某个瞬间领悟到这一点。和大多数孩子一样，我小时候学到新东西或做成事时，会享受成就感。长大后，这种感觉渐渐变成了 “一事无成时的厌恶”。我能明确追溯的一个节点是 13 岁那年，我不再看电视了。</p><p>Several people I’ve talked to remember getting serious about work around this age. When I asked Patrick Collison when he started to find idleness distasteful, he said </p><blockquote><p>I think around age 13 or 14. I have a clear memory from around then of sitting in the sitting room, staring outside, and wondering why I was wasting my summer holiday. </p></blockquote><p>Perhaps something changes at adolescence. That would make sense. </p><p>我聊过的几个人都记得，大概在这个年纪开始认真对待工作。当我问帕特里克・科里森何时开始厌恶懒散时，他说：</p><blockquote><p>“大概 13 或 14 岁吧。我清楚记得，当时坐在客厅里，望着窗外，纳闷自己为什么在浪费暑假。”</p></blockquote><p>或许青春期会发生一些变化，这似乎说得通。</p><p>Strangely enough, the biggest obstacle to getting serious about work was probably school, which made work (what they called work) seem boring and pointless. I had to learn what real work was before I could wholeheartedly desire to do it. That took a while, because even in college a lot of the work is pointless; there are entire departments that are pointless. </p><p>奇怪的是，认真对待工作的最大障碍或许是学校 —— 学校让 “工作”（他们所谓的工作）显得枯燥又无意义。我必须先明白什么是 “真正的工作”，才能全身心投入。这花了些时间，因为即便是在大学里，很多工作也是无意义的；有些院系甚至完全是摆设。</p><p>But as I learned the shape of real work, I found that my desire to do it slotted into it as if they’d been made for each other. I suspect most people have to learn what work is before they can love it. </p><p>但当我逐渐了解了真正工作的模样后，我发现自己对工作的渴望与它完美契合，仿佛二者本就为彼此而生。我猜想，大多数人都得先弄明白工作究竟是什么，才可能爱上它。</p><p>Hardy wrote eloquently about this in A Mathematician’s Apology: </p><blockquote><p>I do not remember having felt, as a boy, any passion for mathematics, and such notions as I may have had of the career of a mathematician were far from noble. I thought of mathematics in terms of examinations and scholarships: I wanted to beat other boys, and this seemed to be the way in which I could do so most decisively. </p></blockquote><p>He didn’t learn what math was really about till part way through college, when he read Jordan’s Cours d’analyse. </p><blockquote><p>I shall never forget the astonishment with which I read that remarkable work, the first inspiration for so many mathematicians of my generation, and learnt for the first time as I read it what mathematics really meant. </p></blockquote><p>哈代在《一个数学家的辩白》中精辟地描述过这一点：</p><blockquote><p>“我记得小时候，对数学毫无热情，对数学家的职业想象也毫无崇高感。我只把数学和考试、奖学金联系在一起：我想打败其他男孩，而数学似乎是最有效的方式。” </p></blockquote><p>他直到大学期间读了若尔当的《分析教程》，才明白数学的真谛：</p><blockquote><p>“我永远忘不了读那本杰作时的震撼 —— 那是我第一次明白数学真正的意义，这本书也是我们这一代许多数学家的启蒙。”</p></blockquote><p>There are two separate kinds of fakeness you need to learn to discount in order to understand what real work is. One is the kind Hardy encountered in school. Subjects get distorted when they’re adapted to be taught to kids — often so distorted that they’re nothing like the work done by actual practitioners. [3] </p><p>要理解 “真正的工作”，你需要学会忽略两种 “虚假”。一种是哈代在学校遇到的：学科为了适应教学被扭曲，往往扭曲到和从业者的实际工作毫无关系。[3] </p><p>The other kind of fakeness is intrinsic to certain types of work. Some types of work are inherently bogus, or at best mere busywork. </p><p>另一种是某些工作本身固有的虚假 —— 有些工作本质上就是无意义的，顶多算是 “瞎忙”。</p><p>There’s a kind of solidity to real work. It’s not all writing the Principia, but it all feels necessary. That’s a vague criterion, but it’s deliberately vague, because it has to cover a lot of different types. [4] </p><p>真正的工作有一种 “实在感”。并非都像写《自然哲学的数学原理》那样伟大，但都让人觉得 “有必要”。这个标准很模糊，但故意如此，因为它要涵盖太多不同类型的工作。[4]</p><p>Once you know the shape of real work, you have to learn how many hours a day to spend on it. You can’t solve this problem by simply working every waking hour, because in many kinds of work there’s a point beyond which the quality of the result will start to decline. </p><p>明白真正的工作是什么样之后，你需要知道每天该花多少时间在上面。不能醒着就一直工作，因为很多工作超过某个临界点后，质量就会下降。</p><p>That limit varies depending on the type of work and the person. I’ve done several different kinds of work, and the limits were different for each. My limit for the harder types of writing or programming is about five hours a day. Whereas when I was running a startup, I could work all the time. At least for the three years I did it; if I’d kept going much longer, I’d probably have needed to take occasional vacations. [5] </p><p>这个临界点因工作类型和个人而异。我做过几种不同的工作，每种的临界点都不同。较难的写作或编程，我一天最多能做 5 小时。而运营初创公司时，我可以一直工作 —— 至少在那三年里是这样；如果再做更久，可能就得偶尔休假了。[5]</p><p>The only way to find the limit is by crossing it. Cultivate a sensitivity to the quality of the work you’re doing, and then you’ll notice if it decreases because you’re working too hard. Honesty is critical here, in both directions: you have to notice when you’re being lazy, but also when you’re working too hard. And if you think there’s something admirable about working too hard, get that idea out of your head. You’re not merely getting worse results, but getting them because you’re showing off — if not to other people, then to yourself. [6] </p><p>找到临界点的唯一方法是 “越过它”。培养对工作质量的敏感度，你就会注意到是否因过度工作而导致质量下降。诚实在这里至关重要：既要察觉自己是否懒散，也要发现是否工作过度。如果你觉得过度工作很 “可敬”，赶紧丢掉这个想法。你不仅会得到更差的结果，还会因为 “炫耀”（哪怕只是向自己炫耀）而搞砸工作。[6]</p><p>Finding the limit of working hard is a constant, ongoing process, not something you do just once. Both the difficulty of the work and your ability to do it can vary hour to hour, so you need to be constantly judging both how hard you’re trying and how well you’re doing. </p><p>找到努力工作的临界点是一个持续的过程，而非一劳永逸。工作难度和你的能力每时每刻都在变化，所以你需要不断判断自己的努力程度和工作状态。</p><p>Trying hard doesn’t mean constantly pushing yourself to work, though. There may be some people who do, but I think my experience is fairly typical, and I only have to push myself occasionally when I’m starting a project or when I encounter some sort of check. That’s when I’m in danger of procrastinating. But once I get rolling, I tend to keep going. </p><p>不过，努力不意味着一直强迫自己工作。或许有人这样做，但我的经历可能更典型：只有在启动项目或遇到阻碍时，才需要偶尔逼自己一把 —— 这时候最容易拖延。但一旦进入状态，就会自然而然地继续下去。</p><p>What keeps me going depends on the type of work. When I was working on Viaweb, I was driven by fear of failure. I barely procrastinated at all then, because there was always something that needed doing, and if I could put more distance between me and the pursuing beast by doing it, why wait? [7] Whereas what drives me now, writing essays, is the flaws in them. Between essays I fuss for a few days, like a dog circling while it decides exactly where to lie down. But once I get started on one, I don’t have to push myself to work, because there’s always some error or omission already pushing me. </p><p>支撑我坚持的动力因工作类型而异。运营 Viaweb 时，我被 “失败的恐惧” 驱动：总有事情要做，多做一点就能离失败远一点，何必等呢？[7] 而现在写文章，动力来自 “文章的缺陷”：构思期间我会纠结几天，像狗转圈选窝一样。但一旦开始写，就不用逼自己 —— 总有错误或疏漏在推着我前进。</p><p>I do make some amount of effort to focus on important topics. Many problems have a hard core at the center, surrounded by easier stuff at the edges. Working hard means aiming toward the center to the extent you can. Some days you may not be able to; some days you’ll only be able to work on the easier, peripheral stuff. But you should always be aiming as close to the center as you can without stalling. </p><p>我确实会努力聚焦于重要的话题。很多问题的核心很难，周围是容易的边缘内容。努力工作意味着尽可能瞄准核心。有些日子可能做不到，只能处理边缘内容，但你应该始终朝着核心努力。</p><p>The bigger question of what to do with your life is one of these problems with a hard core. There are important problems at the center, which tend to be hard, and less important, easier ones at the edges. So as well as the small, daily adjustments involved in working on a specific problem, you’ll occasionally have to make big, lifetime-scale adjustments about which type of work to do. And the rule is the same: working hard means aiming toward the center — toward the most ambitious problems. </p><p>“人生该做什么” 这个更大的问题，也有这样的 “核心”：中心是重要但困难的问题，边缘是次要且容易的。所以除了日常调整具体工作，你偶尔还需要做人生层面的重大调整：选择哪种工作。原则不变：努力工作意味着瞄准核心 —— 最有野心的问题。</p><p>By center, though, I mean the actual center, not merely the current consensus about the center. The consensus about which problems are most important is often mistaken, both in general and within specific fields. If you disagree with it, and you’re right, that could represent a valuable opportunity to do something new. </p><p>不过，“核心” 指的是 “真正的核心”，而非当前共识中的 “核心”。关于 “哪些问题最重要”，共识往往是错的，无论是在整体还是特定领域。如果你不同意共识且正确，那可能是个做新事的好机会。</p><p>The more ambitious types of work will usually be harder, but although you should not be in denial about this, neither should you treat difficulty as an infallible guide in deciding what to do. If you discover some ambitious type of work that’s a bargain in the sense of being easier for you than other people, either because of the abilities you happen to have, or because of some new way you’ve found to approach it, or simply because you’re more excited about it, by all means work on that. Some of the best work is done by people who find an easy way to do something hard. </p><p>更有野心的工作通常更难，但不必因此却步。如果你发现某种有野心的工作对你来说更容易 —— 因为你的天赋、新方法，或者仅仅是更感兴趣 —— 那就去做。有些最伟大的成就是由 “找到难事的简单解法” 的人完成的。</p><p>As well as learning the shape of real work, you need to figure out which kind you’re suited for. And that doesn’t just mean figuring out which kind your natural abilities match the best; it doesn’t mean that if you’re 7 feet tall, you have to play basketball. What you’re suited for depends not just on your talents but perhaps even more on your interests. A deep interest in a topic makes people work harder than any amount of discipline can. </p><p>除了理解真正的工作是什么样，你还需要找到适合自己的类型。这不只是看天赋匹配 —— 比如身高 7 英尺未必就得打篮球。适合与否不仅取决于天赋，更可能取决于兴趣。对一个领域的浓厚兴趣，能让人比任何纪律都更努力。</p><p>It can be harder to discover your interests than your talents. There are fewer types of talent than interest, and they start to be judged early in childhood, whereas interest in a topic is a subtle thing that may not mature till your twenties, or even later. The topic may not even exist earlier. Plus there are some powerful sources of error you need to learn to discount. Are you really interested in x, or do you want to work on it because you’ll make a lot of money, or because other people will be impressed with you, or because your parents want you to? [8] </p><p>发现兴趣比发现天赋更难。天赋的类型更少，从小就被评判；而对一个领域的兴趣很微妙，可能二十多岁甚至更晚才成熟，甚至这个领域之前都不存在。此外，你需要排除一些干扰：你真的对 X 感兴趣，还是因为能赚大钱、让人佩服，或者父母希望你做？[8]</p><p>The difficulty of figuring out what to work on varies enormously from one person to another. That’s one of the most important things I’ve learned about work since I was a kid. As a kid, you get the impression that everyone has a calling, and all they have to do is figure out what it is. That’s how it works in movies, and in the streamlined biographies fed to kids. Sometimes it works that way in real life. Some people figure out what to do as children and just do it, like Mozart. But others, like Newton, turn restlessly from one kind of work to another. Maybe in retrospect we can identify one as their calling — we can wish Newton spent more time on math and physics and less on alchemy and theology — but this is an illusion induced by hindsight bias. There was no voice calling to him that he could have heard. </p><p>“找到该做什么” 的难度因人而异，这是我长大后对工作最重要的领悟之一。小时候，我觉得每个人都有 “使命”，只需找到它就行 —— 电影和给孩子看的简化传记都这么说。现实中有时确实如此：有些人小时候就确定方向并坚持，比如莫扎特。但另一些人，比如牛顿，会不安地从一种工作转向另一种。或许回头看我们能认定他的 “使命”（希望他多花时间在数学和物理上，少在炼金术和神学上），但这是后见之明的错觉 —— 他从未听到过所谓的 “召唤”。</p><p>So while some people’s lives converge fast, there will be others whose lives never converge. And for these people, figuring out what to work on is not so much a prelude to working hard as an ongoing part of it, like one of a set of simultaneous equations. For these people, the process I described earlier has a third component: along with measuring both how hard you’re working and how well you’re doing, you have to think about whether you should keep working in this field or switch to another. If you’re working hard but not getting good enough results, you should switch. It sounds simple expressed that way, but in practice it’s very difficult. You shouldn’t give up on the first day just because you work hard and don’t get anywhere. You need to give yourself time to get going. But how much time? And what should you do if work that was going well stops going well? How much time do you give yourself then? [9] </p><p>所以，有些人的人生很快聚焦，有些人则永远不会。对后者来说，“找到该做什么” 不是努力工作的前奏，而是其一部分，就像一组联立方程。这些人需要不断判断：既要衡量努力程度和成果，也要思考是否该换个领域。如果努力了却没好结果，就该换。说起来简单，做起来很难：不能第一天没进展就放弃，需要给时间让自己进入状态。但给多久？如果曾经顺利的工作突然停滞，又该给多久？[9]</p><p>What even counts as good results? That can be really hard to decide. If you’re exploring an area few others have worked in, you may not even know what good results look like. History is full of examples of people who misjudged the importance of what they were working on. </p><p>“什么算好结果” 也很难判断。如果在很少人涉足的领域探索，你可能都不知道好结果是什么样。历史上很多人都误判了自己工作的重要性。</p><p>The best test of whether it’s worthwhile to work on something is whether you find it interesting. That may sound like a dangerously subjective measure, but it’s probably the most accurate one you’re going to get. You’re the one working on the stuff. Who’s in a better position than you to judge whether it’s important, and what’s a better predictor of its importance than whether it’s interesting? </p><p>判断一件事是否值得做，最好的标准是 “你是否觉得它有趣”。这听起来主观，但可能是最准确的。你是做这件事的人，谁比你更适合判断它是否重要？而 “有趣” 往往是 “重要” 的最佳预示。</p><p>For this test to work, though, you have to be honest with yourself. Indeed, that’s the most striking thing about the whole question of working hard: how at each point it depends on being honest with yourself. </p><p>但这需要你对自己诚实。事实上，努力工作的整个问题中，最突出的一点就是：每一步都取决于对自己诚实。</p><p>Working hard is not just a dial you turn up to 11. It’s a complicated, dynamic system that has to be tuned just right at each point. You have to understand the shape of real work, see clearly what kind you’re best suited for, aim as close to the true core of it as you can, accurately judge at each moment both what you’re capable of and how you’re doing, and put in as many hours each day as you can without harming the quality of the result. This network is too complicated to trick. But if you’re consistently honest and clear-sighted, it will automatically assume an optimal shape, and you’ll be productive in a way few people are.      </p><p>努力工作不是把 “旋钮” 拧到最大。它是一个复杂的动态系统，需要随时调整：你要理解真正的工作是什么样，看清自己最适合哪种，尽可能瞄准其核心，时刻判断自己的能力和状态，每天投入不影响质量的时间。这个系统太复杂，无法欺骗。但如果你始终诚实、清醒，它自然会达到最佳状态，让你拥有少数人才能达到的生产力。</p><p>Notes </p><p>[1] In “The Bus Ticket Theory of Genius” I said the three ingredients in great work were natural ability, determination, and interest. That’s the formula in the preceding stage; determination and interest yield practice and effort. </p><p>[1] 在《天才的公交车票理论》中，我说过伟大工作的三个要素是天赋、决心和兴趣。这是前期的公式；决心和兴趣会转化为练习和努力。</p><p>[2] I mean this at a resolution of days, not hours. You’ll often get somewhere while not working in the sense that the solution to a problem comes to you while taking a shower, or even in your sleep, but only because you were working hard on it the day before. It’s good to go on vacation occasionally, but when I go on vacation, I like to learn new things. I wouldn’t like just sitting on a beach. </p><p>[2] 我说的是按 “天” 来衡量，而非 “小时”。你常常会在 “不工作” 时有所进展 —— 比如洗澡时甚至睡梦中想到问题的解决方案，但这只是因为前一天你在这件事上付出了努力。偶尔度假是好的，但我度假时喜欢学新东西。我不喜欢只是坐在沙滩上。</p><p>[3] The thing kids do in school that’s most like the real version is sports. Admittedly because many sports originated as games played in schools. But in this one area, at least, kids are doing exactly what adults do. In the average American high school, you have a choice of pretending to do something serious, or seriously doing something pretend. Arguably the latter is no worse. </p><p>[3] 孩子们在学校做的事情中，最接近 “真实版本” 的是体育运动。诚然，很多运动起源于学校里的游戏。但至少在这一领域，孩子们做的和成年人完全一样。在普通的美国高中，你可以选择 “假装做正经事”，或者 “认真做假事”。可以说，后者并不比前者差。</p><p>[4] Knowing what you want to work on doesn’t mean you’ll be able to. Most people have to spend a lot of their time working on things they don’t want to, especially early on. But if you know what you want to do, you at least know what direction to nudge your life in. </p><p>[4] 知道自己想做什么工作，不代表就能去做。大多数人不得不花大量时间做自己不想做的事，尤其是在早期。但如果你知道自己想做什么，至少知道该把人生推向哪个方向。</p><p>[5] The lower time limits for intense work suggest a solution to the problem of having less time to work after you have kids: switch to harder problems. In effect I did that, though not deliberately. </p><p>[5] 高强度工作的时间限制较低，这为 “有孩子后工作时间减少” 的问题提供了一个解决方案：转向更难的问题。实际上我就是这么做的，尽管并非刻意。</p><p>[6] Some cultures have a tradition of performative hard work. I don’t love this idea, because (a) it makes a parody of something important and (b) it causes people to wear themselves out doing things that don’t matter. I don’t know enough to say for sure whether it’s net good or bad, but my guess is bad. </p><p>[6] 有些文化有 “表演式努力” 的传统。我不喜欢这个想法，因为（a）它把重要的事情变成了滑稽模仿；（b）它让人们在无意义的事情上耗尽精力。我了解得不够多，无法确定其整体是好是坏，但我猜是坏的。</p><p>[7] One of the reasons people work so hard on startups is that startups can fail, and when they do, that failure tends to be both decisive and conspicuous. </p><p>[7] 人们在初创公司如此努力的原因之一是：初创公司可能失败，而失败往往是决定性且显眼的。</p><p>[8] It’s ok to work on something to make a lot of money. You need to solve the money problem somehow, and there’s nothing wrong with doing that efficiently by trying to make a lot at once. I suppose it would even be ok to be interested in money for its own sake; whatever floats your boat. Just so long as you’re conscious of your motivations. The thing to avoid is unconsciously letting the need for money warp your ideas about what kind of work you find most interesting. </p><p>[8] 为了赚大钱而工作是没问题的。你总得解决钱的问题，通过努力一次性多赚点来高效解决，这没什么不对。我甚至觉得，为了钱本身而对钱感兴趣也没问题 —— 只要是你喜欢的就好。关键是要清楚自己的动机。要避免的是：无意识地让对钱的需求扭曲你对 “自己最感兴趣的工作” 的判断。</p><p>[9] Many people face this question on a smaller scale with individual projects. But it’s easier both to recognize and to accept a dead end in a single project than to abandon some type of work entirely. The more determined you are, the harder it gets. Like a Spanish Flu victim, you’re fighting your own immune system: Instead of giving up, you tell yourself, I should just try harder. And who can say you’re not right?</p><p>[9] 很多人在单个项目中也会遇到类似问题，只是规模更小。但承认某个项目走进死胡同，比彻底放弃某类工作要容易得多。你越有决心，就越难放弃。就像西班牙流感患者一样，你在和自己的免疫系统对抗：你告诉自己 “应该更努力”，而不是放弃。可谁又能说你不对呢？</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创办谷歌</title>
    <link href="/2025/07/24/how-to-start-google/"/>
    <url>/2025/07/24/how-to-start-google/</url>
    
    <content type="html"><![CDATA[<h2 id="HOW-TO-START-GOOGLE"><a href="#HOW-TO-START-GOOGLE" class="headerlink" title="HOW TO START GOOGLE"></a>HOW TO START GOOGLE</h2><p>原文链接: <a href="https://paulgraham.com/google.html">https://paulgraham.com/google.html</a></p><p>March 2024 </p><h3 id="一、创业——为自己的项目奋斗"><a href="#一、创业——为自己的项目奋斗" class="headerlink" title="一、创业——为自己的项目奋斗"></a>一、创业——为自己的项目奋斗</h3><p>(This is a talk I gave to 14 and 15 year olds about what to do now if they might want to start a startup later. Lots of schools think they should tell students something about startups. This is what I think they should tell them.) </p><p>（这是我给 14 至 15 岁青少年的演讲，内容关于如果未来想创业，现在应该做什么。许多学校认为需要向学生传授创业知识，以下是我认为他们该传达的内容。）</p><p>Most of you probably think that when you’re released into the so-called real world you’ll eventually have to get some kind of job. That’s not true, and today I’m going to talk about a trick you can use to avoid ever having to get a job. The trick is to start your own company. </p><p>你们中的大多数人可能认为，当你们进入所谓的 “现实世界” 后，最终都得找份工作。但事实并非如此。今天我要分享一个让你们永远不用打工的秘诀 —— 创办自己的公司。</p><p>So it’s not a trick for avoiding work, because if you start your own company you’ll work harder than you would if you had an ordinary job. But you will avoid many of the annoying things that come with a job, including a boss telling you what to do. </p><p>这并非逃避劳动的捷径，因为创业会比普通工作更辛苦，但你能避开职场中诸多烦心事，比如被老板颐指气使。</p><p>It’s more exciting to work on your own project than someone else’s. And you can also get a lot richer. In fact, this is the standard way to get really rich. If you look at the lists of the richest people that occasionally get published in the press, nearly all of them did it by starting their own companies. </p><p>为自己的项目奋斗比为他人打工更令人兴奋，也能让你更富有。事实上，这是通往财富的常规路径。看看媒体偶尔公布的富豪榜，几乎所有人都是通过创业积累财富的。</p><p>Starting your own company can mean anything from starting a barber shop to starting Google. I’m here to talk about one extreme end of that continuum. I’m going to tell you how to start Google. </p><p>创业可以是开理发店，也可以是创办谷歌。我今天要探讨的是这个光谱的极端 —— 如何创办谷歌。</p><p>The companies at the Google end of the continuum are called startups when they’re young. The reason I know about them is that my wife Jessica and I started something called Y Combinator that is basically a startup factory. Since 2005, Y Combinator has funded over 4000 startups. So we know exactly what you need to start a startup, because we’ve helped people do it for the last 19 years. </p><p>处于谷歌级别的初创公司在早期被称为 “startups”（初创企业）。我对这类公司的了解源于我和妻子杰西卡创立的 Y Combinator—— 一个 “初创企业工厂”。自 2005 年以来，我们已投资超过 4000 家初创公司，因此深知创业所需的要素，毕竟我们用了 19 年时间帮助人们实现这一目标。</p><p>You might have thought I was joking when I said I was going to tell you how to start Google. You might be thinking “How could we start Google?” But that’s effectively what the people who did start Google were thinking before they started it. If you’d told Larry Page and Sergey Brin, the founders of Google, that the company they were about to start would one day be worth over a trillion dollars, their heads would have exploded. </p><p>你可能觉得我在开玩笑，毕竟 “如何创办谷歌” 听起来遥不可及。但当年拉里・佩奇和谢尔盖・布林在创立谷歌前，也正是这么想的。如果当时告诉他们，这家即将成立的公司未来市值会超过万亿美元，他们肯定会惊掉下巴。</p><h3 id="二、怎样开始创业"><a href="#二、怎样开始创业" class="headerlink" title="二、怎样开始创业"></a>二、怎样开始创业</h3><p>All you can know when you start working on a startup is that it seems worth pursuing. You can’t know whether it will turn into a company worth billions or one that goes out of business. So when I say I’m going to tell you how to start Google, I mean I’m going to tell you how to get to the point where you can start a company that has as much chance of being Google as Google had of being Google. [1] </p><p>创业初期，你唯一能确定的是项目值得尝试，却无法预知它会成为价值千亿的巨头还是黯然倒闭。因此，当我说 “如何创办谷歌” 时，实际是指如何让你的公司拥有与谷歌当年相当的成功潜力。</p><p>How do you get from where you are now to the point where you can start a successful startup? You need three things. You need to be good at some kind of technology, you need an idea for what you’re going to build, and you need cofounders to start the company with. </p><p>从现在到成功创业，你需要具备三点：掌握某项技术、拥有产品创意、找到联合创始人。</p><h4 id="掌握技术"><a href="#掌握技术" class="headerlink" title="掌握技术"></a>掌握技术</h4><p>How do you get good at technology? And how do you choose which technology to get good at? Both of those questions turn out to have the same answer: work on your own projects. Don’t try to guess whether gene editing or LLMs or rockets will turn out to be the most valuable technology to know about. No one can predict that. Just work on whatever interests you the most. You’ll work much harder on something you’re interested in than something you’re doing because you think you’re supposed to. </p><p><strong>如何掌握技术？</strong> 答案很简单：动手做项目。别纠结于基因编辑、大语言模型或航天技术哪个更有前景，没人能预测未来。选择你最感兴趣的领域，因为兴趣驱动的学习效率远超被动任务。</p><p>If you’re not sure what technology to get good at, get good at programming. That has been the source of the median startup for the last 30 years, and this is probably not going to change in the next 10. </p><p>若不确定方向，编程是个稳妥选择。过去 30 年，编程是半数初创企业的核心技能，未来十年这一趋势看起来不会改变。</p><p>Those of you who are taking computer science classes in school may at this point be thinking, ok, we’ve got this sorted. We’re already being taught all about programming. But sorry, this is not enough. You have to be working on your own projects, not just learning stuff in classes. You can do well in computer science classes without ever really learning to program. In fact you can graduate with a degree in computer science from a top university and still not be any good at programming. That’s why tech companies all make you take a coding test before they’ll hire you, regardless of where you went to university or how well you did there. They know grades and exam results prove nothing. </p><p>现在正在上计算机课的同学可能会想：“好了，这部分我们搞定了，我们已经在学编程了。” 但抱歉，这还不够。你必须做自己的项目，而不只是在课堂上学习。就算计算机课成绩很好，也可能根本没学会编程。事实上，就算从顶尖大学的计算机系毕业，也可能还是不擅长编程。这就是为什么科技公司招人时都要让你参加编程测试，不管你毕业于哪所大学、成绩多好 —— 他们知道分数和考试结果说明不了什么。</p><p>If you really want to learn to program, you have to work on your own projects. You learn so much faster that way. Imagine you’re writing a game and there’s something you want to do in it, and you don’t know how. You’re going to figure out how a lot faster than you’d learn anything in a class. </p><p>如果真想学会编程，就得做自己的项目。用这种方式学习，速度会快得多。比如你在写一个游戏，遇到某个想实现的功能却不知道怎么做，你琢磨出来的速度会比在课堂上学任何东西都快。</p><p>You don’t have to learn programming, though. If you’re wondering what counts as technology, it includes practically everything you could describe using the words “make” or “build.” So welding would count, or making clothes, or making videos. Whatever you’re most interested in. The critical distinction is whether you’re producing or just consuming. Are you writing computer games, or just playing them? That’s the cutoff. </p><p>不过你也不一定非要学编程。要是好奇 “技术” 包括哪些，其实几乎所有能用 “制作” 或 “建造” 来描述的事都算：焊接、做衣服、拍视频等等，只要是你最感兴趣的就行。关键区别在于：你是在 “创造”，还是只是 “消费”？是在写电脑游戏，还是只是玩游戏？这是分水岭。</p><p>Steve Jobs, the founder of Apple, spent time when he was a teenager studying calligraphy — the sort of beautiful writing that you see in medieval manuscripts. No one, including him, thought that this would help him in his career. He was just doing it because he was interested in it. But it turned out to help him a lot. The computer that made Apple really big, the Macintosh, came out at just the moment when computers got powerful enough to make letters like the ones in printed books instead of the computery-looking letters you see in 8 bit games. Apple destroyed everyone else at this, and one reason was that Steve was one of the few people in the computer business who really got graphic design. </p><p>苹果公司创始人史蒂夫・乔布斯十几岁时学过书法 —— 就是那种中世纪手稿里的漂亮字体。当时没人（包括他自己）觉得这对他的职业生涯有帮助，他只是因为感兴趣才学的。但后来这事儿帮了他大忙。让苹果真正壮大的电脑 Macintosh 问世时，恰逢计算机性能足以呈现印刷书籍般的字体，而不是 8 位游戏里那种 “计算机感” 的字体。苹果在这方面碾压了所有对手，原因之一就是：乔布斯是当时计算机行业里少数真正懂平面设计的人。</p><p>Don’t feel like your projects have to be serious. They can be as frivolous as you like, so long as you’re building things you’re excited about. Probably 90% of programmers start out building games. They and their friends like to play games. So they build the kind of things they and their friends want. And that’s exactly what you should be doing at 15 if you want to start a startup one day. </p><p>别觉得你的项目必须 “正经”。只要是你热衷于打造的东西，哪怕再琐碎也没关系。大概 90% 的程序员都是从做游戏起步的。他们和朋友喜欢玩游戏，所以就做自己和朋友想要的东西。如果你 15 岁，未来想创业，就该这么做。</p><p>You don’t have to do just one project. In fact it’s good to learn about multiple things. Steve Jobs didn’t just learn calligraphy. He also learned about electronics, which was even more valuable. Whatever you’re interested in. (Do you notice a theme here?) </p><p>你也不用只做一个项目。其实多学几样东西是好事。史蒂夫・乔布斯不光学了书法，还学了电子学，后者甚至更有价值。总之，选你感兴趣的就行。（发现规律了吗？）</p><p>So that’s the first of the three things you need, to get good at some kind or kinds of technology. You do it the same way you get good at the violin or football: practice. If you start a startup at 22, and you start writing your own programs now, then by the time you start the company you’ll have spent at least 7 years practicing writing code, and you can get pretty good at anything after practicing it for 7 years. </p><p>以上就是三样东西中的第一样：精通一种或几种技术。做到这一点的方法，和学好小提琴或足球一样：练习。如果你 22 岁创业，现在就开始写程序，那么到创业时，你至少已经练了 7 年编程 —— 任何事练 7 年，都能做得相当不错。</p><h4 id="找到创业创意"><a href="#找到创业创意" class="headerlink" title="找到创业创意"></a>找到创业创意</h4><p>Let’s suppose you’re 22 and you’ve succeeded: You’re now really good at some technology. How do you get startup ideas? It might seem like that’s the hard part. Even if you are a good programmer, how do you get the idea to start Google?</p><p>假设你 22 岁时成功了：已经精通某种技术。那创业创意从哪来？这似乎是最难的部分。就算你是个优秀的程序员，怎么会想到要创办谷歌呢？</p><p>Actually it’s easy to get startup ideas once you’re good at technology. Once you’re good at some technology, when you look at the world you see dotted outlines around the things that are missing. You start to be able to see both the things that are missing from the technology itself, and all the broken things that could be fixed using it, and each one of these is a potential startup. </p><p>其实，一旦精通了某种技术，找创业创意就不难了。当你擅长某样技术，看世界时就会发现很多 “缺失的轮廓”：技术本身的不足、以及能用这项技术解决的各种问题，每一个都是潜在的创业机会。</p><p>In the town near our house there’s a shop with a sign warning that the door is hard to close. The sign has been there for several years. To the people in the shop it must seem like this mysterious natural phenomenon that the door sticks, and all they can do is put up a sign warning customers about it. But any carpenter looking at this situation would think “why don’t you just plane off the part that sticks?” </p><p>我家附近的镇上有个商店，门上挂着块牌子，提醒顾客 “门不好关”。这块牌子挂了好几年了。对店里的人来说，门老卡住可能像个神秘的自然现象，他们能做的只是挂个牌子提醒顾客。但任何一个木匠看到这种情况都会想：“为什么不把卡住的地方刨掉呢？”</p><p>Once you’re good at programming, all the missing software in the world starts to become as obvious as a sticking door to a carpenter. I’ll give you a real world example. Back in the 20th century, American universities used to publish printed directories with all the students’ names and contact info. When I tell you what these directories were called, you’ll know which startup I’m talking about. They were called facebooks, because they usually had a picture of each student next to their name. </p><p>一旦你擅长编程，世界上所有缺失的软件就会像木匠眼里卡住的门一样明显。举个真实的例子：20 世纪时，美国大学会出版纸质名录，上面有所有学生的名字和联系方式。我一说这些名录叫什么，你就知道我在说哪个初创企业了 —— 它们叫 “facebooks”（脸书），因为通常每个学生的名字旁边都有照片。</p><p>So Mark Zuckerberg shows up at Harvard in 2002, and the university still hasn’t gotten the facebook online. Each individual house has an online facebook, but there isn’t one for the whole university. The university administration has been diligently having meetings about this, and will probably have solved the problem in another decade or so. Most of the students don’t consciously notice that anything is wrong. But Mark is a programmer. He looks at this situation and thinks “Well, this is stupid. I could write a program to fix this in one night. Just let people upload their own photos and then combine the data into a new site for the whole university.” So he does. And almost literally overnight he has thousands of users. </p><p>2002 年，马克・扎克伯格来到哈佛大学，当时学校还没把 “facebooks” 搬到网上。各个学院有自己的在线名录，但全校范围的没有。学校管理层一直在开会讨论这事儿，可能再过十年才能解决。大多数学生没意识到这是个问题。但马克是个程序员，他看到这种情况就想：“这也太蠢了。我一晚上就能写个程序解决 —— 让大家上传自己的照片，然后把数据整合到一个全校性的新网站上。” 于是他就做了，几乎一夜之间就有了数千用户。</p><p>Of course Facebook was not a startup yet. It was just a… project. There’s that word again. Projects aren’t just the best way to learn about technology. They’re also the best source of startup ideas. </p><p>当然，当时的 Facebook 还不是初创企业，只是个…… 项目。又是 “项目” 这个词。项目不仅是学习技术的最佳方式，也是创业创意的最佳来源。</p><p>Facebook was not unusual in this respect. Apple and Google also began as projects. Apple wasn’t meant to be a company. Steve Wozniak just wanted to build his own computer. It only turned into a company when Steve Jobs said “Hey, I wonder if we could sell plans for this computer to other people.” That’s how Apple started. They weren’t even selling computers, just plans for computers. Can you imagine how lame this company seemed? </p><p>在这一点上，Facebook 并不特殊。苹果和谷歌最初也都是项目。苹果一开始根本没想做成公司，史蒂夫・沃兹尼亚克只是想自己造一台电脑。后来史蒂夫・乔布斯说：“说不定我们可以把电脑设计图卖给别人。” 苹果就这样诞生了 —— 他们当时甚至不卖电脑，只卖设计图。你能想象这家公司当时看起来多不起眼吗？</p><p>Ditto for Google. Larry and Sergey weren’t trying to start a company at first. They were just trying to make search better. Before Google, most search engines didn’t try to sort the results they gave you in order of importance. If you searched for “rugby” they just gave you every web page that contained the word “rugby.” And the web was so small in 1997 that this actually worked! Kind of. There might only be 20 or 30 pages with the word “rugby,” but the web was growing exponentially, which meant this way of doing search was becoming exponentially more broken. Most users just thought, “Wow, I sure have to look through a lot of search results to find what I want.” Door sticks. But like Mark, Larry and Sergey were programmers. Like Mark, they looked at this situation and thought “Well, this is stupid. Some pages about rugby matter more than others. Let’s figure out which those are and show them first.” </p><p>谷歌也是如此。拉里和谢尔盖一开始没打算创业，只是想改进搜索功能。在谷歌出现之前，大多数搜索引擎不会按重要性排序结果。如果你搜 “橄榄球”，它们只会列出所有包含 “橄榄球” 这个词的网页。1997 年时，互联网还很小，这种方式勉强能用 —— 可能只有 20、30 个网页包含这个词。但互联网在呈指数级增长，这意味着这种搜索方式的缺陷也在呈指数级扩大。大多数用户只会想：“哇，要翻这么多结果才能找到想要的。” 就像门卡住了一样。但和马克一样，拉里和谢尔盖是程序员，他们看到这种情况就想：“这也太蠢了。有些关于橄榄球的网页肯定比其他的重要，我们得找出哪些更重要，把它们排在前面。”</p><p>It’s obvious in retrospect that this was a great idea for a startup. It wasn’t obvious at the time. It’s never obvious. If it was obviously a good idea to start Apple or Google or Facebook, someone else would have already done it. That’s why the best startups grow out of projects that aren’t meant to be startups. You’re not trying to start a company. You’re just following your instincts about what’s interesting. And if you’re young and good at technology, then your unconscious instincts about what’s interesting are better than your conscious ideas about what would be a good company. </p><p>现在回头看，这显然是个伟大的创业创意，但当时并非如此。如果创办苹果、谷歌或 Facebook 的创意在当时就显而易见，早就有人做了。这就是为什么最好的初创企业都源于 “没打算做成初创企业” 的项目。你不是在刻意 “创业”，只是凭着直觉去做有趣的事。如果你年轻又擅长技术，那么你对 “什么有趣” 的潜意识直觉，会比你对 “什么能成好公司” 的有意识想法更靠谱。</p><p>So it’s critical, if you’re a young founder, to build things for yourself and your friends to use. The biggest mistake young founders make is to build something for some mysterious group of other people. But if you can make something that you and your friends truly want to use — something your friends aren’t just using out of loyalty to you, but would be really sad to lose if you shut it down — then you almost certainly have the germ of a good startup idea. It may not seem like a startup to you. It may not be obvious how to make money from it. But trust me, there’s a way. </p><p>所以对年轻创业者来说，关键是：做自己和朋友会用的东西。年轻创业者最大的错误，就是为某个神秘的 “其他人” 做东西。但如果你能做出自己和朋友真心想用的东西 —— 朋友用它不是因为对你的忠诚度，而是如果关掉它会真的很失落 —— 那你几乎肯定抓住了一个好创业创意的萌芽。它可能在你看来不像个 “初创企业”，可能也不清楚怎么靠它赚钱。但相信我，总有办法的。</p><p>What you need in a startup idea, and all you need, is something your friends actually want. And those ideas aren’t hard to see once you’re good at technology. There are sticking doors everywhere. [2] </p><p>一个创业创意需要的，也仅仅需要的，是你的朋友真的想要它。一旦你擅长技术，这种创意其实随处可见。到处都是 “卡住的门”。[2]</p><h4 id="找到联合创始人"><a href="#找到联合创始人" class="headerlink" title="找到联合创始人"></a>找到联合创始人</h4><p>Now for the third and final thing you need: a cofounder, or cofounders. The optimal startup has two or three founders, so you need one or two cofounders. How do you find them? Can you predict what I’m going to say next? It’s the same thing: projects. You find cofounders by working on projects with them. What you need in a cofounder is someone who’s good at what they do and that you work well with, and the only way to judge this is to work with them on things. </p><p>现在说第三样，也是最后一样你需要的东西：联合创始人（一个或多个）。最理想的初创企业有 2 到 3 个创始人，所以你需要 1 到 2 个联合创始人。怎么找到他们？能猜到我要说什么吗？还是那句话：项目。通过一起做项目找到联合创始人。你需要的联合创始人，得是擅长自己领域、且能和你默契合作的人，而判断这一点的唯一方法，就是和他们一起做事。</p><p>At this point I’m going to tell you something you might not want to hear. It really matters to do well in your classes, even the ones that are just memorization or blathering about literature, because you need to do well in your classes to get into a good university. And if you want to start a startup you should try to get into the best university you can, because that’s where the best cofounders are. It’s also where the best employees are. When Larry and Sergey started Google, they began by just hiring all the smartest people they knew out of Stanford, and this was a real advantage for them. </p><p>这里我要说件你们可能不爱听的事：功课一定要学好，哪怕是那些只需要死记硬背或空谈文学的课。因为你需要好成绩才能进好大学。如果你想创业，就得努力进最好的大学，因为最好的联合创始人在那里，最好的员工也在那里。拉里和谢尔盖创办谷歌时，一开始就从斯坦福招了所有他们认识的最聪明的人，这对他们来说是个巨大优势。</p><p>The empirical evidence is clear on this. If you look at where the largest numbers of successful startups come from, it’s pretty much the same as the list of the most selective universities. </p><p>实证很清楚：成功初创企业数量最多的地方，和最顶尖大学的名单几乎重合。</p><p>I don’t think it’s the prestigious names of these universities that cause more good startups to come out of them. Nor do I think it’s because the quality of the teaching is better. What’s driving this is simply the difficulty of getting in. You have to be pretty smart and determined to get into MIT or Cambridge, so if you do manage to get in, you’ll find the other students include a lot of smart and determined people. [3] </p><p>我不认为这是因为这些大学的名气大，也不是因为教学质量更好。真正的原因很简单：进这些大学很难。能进麻省理工或剑桥的人，往往很聪明、很有毅力。所以一旦你进去了，就会发现周围有很多聪明又有毅力的人。[3]</p><p>You don’t have to start a startup with someone you meet at university. The founders of Twitch met when they were seven. The founders of Stripe, Patrick and John Collison, met when John was born. But universities are the main source of cofounders. And because they’re where the cofounders are, they’re also where the ideas are, because the best ideas grow out of projects you do with the people who become your cofounders. </p><p>你不一定非要和大学里认识的人一起创业。Twitch 的创始人 7 岁就认识了，Stripe 的创始人帕特里克・科里森和约翰・科里森，在约翰出生时就 “认识” 了。但大学是联合创始人的主要来源。正因为那里有联合创始人，所以那里也有创意 —— 最好的创意都源于你和未来的联合创始人一起做的项目。</p><p>So the list of what you need to do to get from here to starting a startup is quite short. You need to get good at technology, and the way to do that is to work on your own projects. And you need to do as well in school as you can, so you can get into a good university, because that’s where the cofounders and the ideas are. </p><p>所以，从现在到能创业，你要做的事其实很简单：<br>一是精通技术，方法是做自己的项目；<br>二是功课尽量做好，以便能进好大学 —— 因为那里有联合创始人和创意。</p><p>That’s it, just two things, build stuff and do well in school.     </p><p>总的来说就这两件事：动手做一些东西，学好功课。</p><p>Notes </p><p>[1] The rhetorical trick in this sentence is that the “Google”s refer to different things. What I mean is: a company that has as much chance of growing as big as Google ultimately did as Larry and Sergey could have reasonably expected Google itself would at the time they started it. But I think the original version is zippier. </p><p>[1] 这句话的修辞技巧在于：两个 “谷歌” 指的是不同的东西。我的意思是：你创办的公司，要有 “像谷歌最终成长为巨头那样” 的可能性，就像当年拉里和谢尔盖创办谷歌时，谷歌本身具有的可能性一样。但我觉得原文的表达更简洁有力。</p><p>[2] Making something for your friends isn’t the only source of startup ideas. It’s just the best source for young founders, who have the least knowledge of what other people want, and whose own wants are most predictive of future demand. </p><p>[2] 为朋友做东西不是创业创意的唯一来源，只是对年轻创业者来说最好的来源 —— 因为他们最不了解 “其他人想要什么”，而他们自己的需求最能预示未来的市场需求。</p><p>[3] Strangely enough this is particularly true in countries like the US where undergraduate admissions are done badly. US admissions departments make applicants jump through a lot of arbitrary hoops that have little to do with their intellectual ability. But the more arbitrary a test, the more it becomes a test of mere determination and resourcefulness. And those are the two most important qualities in startup founders. So US admissions departments are better at selecting founders than they would be if they were better at selecting students.</p><p>[3] 奇怪的是，在本科录取机制不太合理的国家（比如美国），这一点尤其明显。美国的录取部门让申请者通过很多莫名其妙的关卡，这些关卡和智力几乎无关。但关卡越莫名其妙，就越能考验纯粹的毅力和应变能力 —— 而这正是初创企业创始人最重要的两种素质。所以美国的录取部门在 “筛选创始人” 方面，比在 “筛选学生” 方面做得更好。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样正确的区分执着与固执</title>
    <link href="/2025/07/23/the-right-kind-of-stubborn/"/>
    <url>/2025/07/23/the-right-kind-of-stubborn/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-RIGHT-KIND-OF-STUBBORN"><a href="#THE-RIGHT-KIND-OF-STUBBORN" class="headerlink" title="THE RIGHT KIND OF STUBBORN"></a>THE RIGHT KIND OF STUBBORN</h2><p>原文链接: <a href="https://paulgraham.com/persistence.html">https://paulgraham.com/persistence.html</a></p><p>July 2024</p><h3 id="一、没有刹车与无法转舵"><a href="#一、没有刹车与无法转舵" class="headerlink" title="一、没有刹车与无法转舵"></a>一、没有刹车与无法转舵</h3><p>Successful people tend to be persistent. New ideas often don’t work at first, but they’re not deterred. They keep trying and eventually find something that does. </p><p>成功人士往往具备执着的品质。新想法起初往往行不通，但他们不会因此却步，而是不断尝试，最终找到有效的方法。</p><p>Mere obstinacy, on the other hand, is a recipe for failure. Obstinate people are so annoying. They won’t listen. They beat their heads against a wall and get nowhere. </p><p>另一方面，单纯的固执则注定失败。固执的人很讨厌，他们不听劝，一味地撞南墙，却毫无进展。</p><p>But is there any real difference between these two cases? Are persistent and obstinate people actually behaving differently? Or are they doing the same thing, and we just label them later as persistent or obstinate depending on whether they turned out to be right or not? </p><p>但这两种情况真的有区别吗？执着的人和固执的人行为上是否真的不同？还是说他们做着同样的事，只是我们事后根据他们最终是否正确，才分别贴上 “执着” 或 “固执” 的标签？</p><p>If that’s the only difference then there’s nothing to be learned from the distinction. Telling someone to be persistent rather than obstinate would just be telling them to be right rather than wrong, and they already know that. Whereas if persistence and obstinacy are actually different kinds of behavior, it would be worthwhile to tease them apart. [1] </p><p>如果这是唯一的区别，那么这种区分就毫无借鉴意义。告诉别人要执着而非固执，无异于告诉他们要正确而非错误，而这一点他们早就知道了。然而，若执着与固执确实是两种不同的行为，那我们就有必要将它们区分开来。[1]</p><p>I’ve talked to a lot of determined people, and it seems to me that they’re different kinds of behavior. I’ve often walked away from a conversation thinking either “Wow, that guy is determined” or “Damn, that guy is stubborn,” and I don’t think I’m just talking about whether they seemed right or not. That’s part of it, but not all of it. </p><p>我和很多意志坚定的人聊过，在我看来，这两种行为确实不同。我常常在与人交谈后，要么想 “哇，这个人真执着”，要么想 “该死，这个人真固执”，而且我认为这不仅仅是因为他们看起来正确与否。这是一部分原因，但并非全部。</p><p>There’s something annoying about the obstinate that’s not simply due to being mistaken. They won’t listen. And that’s not true of all determined people. I can’t think of anyone more determined than the Collison brothers, and when you point out a problem to them, they not only listen, but listen with an almost predatory intensity. Is there a hole in the bottom of their boat? Probably not, but if there is, they want to know about it. </p><p>固执的人身上有种令人讨厌的特质，这不仅仅是因为他们犯错了。他们不听劝。但并非所有意志坚定的人都是如此。我想不出比科利森兄弟更执着的人了，当你向他们指出问题时，他们不仅会听，而且会带着近乎掠夺性的专注去听。他们的船底有洞吗？可能没有，但如果真有，他们一定想知道。</p><p>It’s the same with most successful people. They’re never more engaged than when you disagree with them. Whereas the obstinate don’t want to hear you. When you point out problems, their eyes glaze over, and their replies sound like ideologues talking about matters of doctrine. [2] </p><p>大多数成功人士都是如此。当你与他们意见相左时，他们会格外投入。而固执的人却不想听你说。当你指出问题时，他们眼神涣散，回答听起来就像理论家在谈论教条。[2]</p><p>The reason the persistent and the obstinate seem similar is that they’re both hard to stop. But they’re hard to stop in different senses. The persistent are like boats whose engines can’t be throttled back. The obstinate are like boats whose rudders can’t be turned. [3] </p><p>执着者和固执者看似相似，是因为他们都难以被阻止。但他们的 “难以被阻止” 意义不同。执着者就像引擎无法减速的船，而固执者就像舵无法转动的船。[3]</p><p>In the degenerate case they’re indistinguishable: when there’s only one way to solve a problem, your only choice is whether to give up or not, and persistence and obstinacy both say no. This is presumably why the two are so often conflated in popular culture. It assumes simple problems. But as problems get more complicated, we can see the difference between them. The persistent are much more attached to points high in the decision tree than to minor ones lower down, while the obstinate spray “don’t give up” indiscriminately over the whole tree. </p><p>在退化的情况下，两者难以区分：当解决问题只有一种方法时，你唯一的选择就是放弃或不放弃，而执着和固执都意味着不放弃。这大概就是为什么这两种特质在流行文化中常常被混为一谈。流行文化假设的是简单的问题。但随着问题变得越来越复杂，我们就能看出两者的区别了。执着的人更执着于决策树高层的要点，而对低层的次要要点则不那么在意，而固执的人则会不加区分地 “不放弃” 整个决策树。</p><h3 id="二、固执可能的起因与本质"><a href="#二、固执可能的起因与本质" class="headerlink" title="二、固执可能的起因与本质"></a>二、固执可能的起因与本质</h3><p>The persistent are attached to the goal. The obstinate are attached to their ideas about how to reach it. </p><p>执着的人执着于目标，而固执的人执着于自己达成目标的想法。</p><p>Worse still, that means they’ll tend to be attached to their first ideas about how to solve a problem, even though these are the least informed by the experience of working on it. So the obstinate aren’t merely attached to details, but disproportionately likely to be attached to wrong ones.  </p><p>更糟糕的是，这意味着他们往往会执着于自己解决问题的最初想法，尽管这些想法是最缺乏实践经验支撑的。因此，固执的人不仅执着于细节，而且极有可能执着于错误的细节。</p><p>Why are they like this? Why are the obstinate obstinate? One possibility is that they’re overwhelmed. They’re not very capable. They take on a hard problem. They’re immediately in over their head. So they grab onto ideas the way someone on the deck of a rolling ship might grab onto the nearest handhold. </p><p>为什么他们会这样？固执的人为什么会固执？一种可能是他们不堪重负。他们能力不足，却承担了一个艰难的任务，很快就力不从心了。于是他们抓住一些想法不放，就像在摇晃的船上，有人会抓住最近的扶手一样。</p><p>That was my initial theory, but on examination it doesn’t hold up. If being obstinate were simply a consequence of being in over one’s head, you could make persistent people become obstinate by making them solve harder problems. But that’s not what happens. If you handed the Collisons an extremely hard problem to solve, they wouldn’t become obstinate. If anything they’d become less obstinate. They’d know they had to be open to anything. </p><p>这是我最初的想法，但仔细想想，这并不成立。如果固执仅仅是因为力不从心，那么通过让执着的人去解决更难的问题，就能让他们变得固执。但事实并非如此。如果你让科利森兄弟去解决一个极难的问题，他们不会变得固执。如果说有什么不同的话，他们会变得不那么固执。他们知道自己必须对一切持开放态度。</p><p>Similarly, if obstinacy were caused by the situation, the obstinate would stop being obstinate when solving easier problems. But they don’t. And if obstinacy isn’t caused by the situation, it must come from within. It must be a feature of one’s personality. </p><p>同样，如果固执是由环境造成的，那么当固执的人去解决更容易的问题时，他们就不会再固执了。但他们并没有。如果固执不是由环境造成的，那它一定源于内在，一定是个人性格的一种特征。</p><p>Obstinacy is a reflexive resistance to changing one’s ideas. This is not identical with stupidity, but they’re closely related. A reflexive resistance to changing one’s ideas becomes a sort of induced stupidity as contrary evidence mounts. And obstinacy is a form of not giving up that’s easily practiced by the stupid. You don’t have to consider complicated tradeoffs; you just dig in your heels. It even works, up to a point. </p><p>固执是一种对改变想法的本能抗拒。这与愚蠢并不完全相同，但两者密切相关。随着反对证据的增多，这种对改变想法的本能抗拒会演变成一种诱发的愚蠢。固执是一种不放弃的表现，愚蠢的人很容易做到这一点。你不必考虑复杂的权衡，只需固执己见。在某种程度上，这甚至是有效的。</p><p>The fact that obstinacy works for simple problems is an important clue. Persistence and obstinacy aren’t opposites. The relationship between them is more like the relationship between the two kinds of respiration we can do: aerobic respiration, and the anaerobic respiration we inherited from our most distant ancestors. Anaerobic respiration is a more primitive process, but it has its uses. When you leap suddenly away from a threat, that’s what you’re using. </p><p>固执在简单问题上能奏效，这是一个重要的线索。执着和固执并非对立面。它们之间的关系更像是我们能进行的两种呼吸方式：有氧呼吸和我们从远古祖先那里继承的无氧呼吸。无氧呼吸是一种更原始的过程，但它有其用途。当你突然跳起来躲避威胁时，你用的就是无氧呼吸。</p><p>The optimal amount of obstinacy is not zero. It can be good if your initial reaction to a setback is an unthinking “I won’t give up,” because this helps prevent panic. But unthinking only gets you so far. The further someone is toward the obstinate end of the continuum, the less likely they are to succeed in solving hard problems. [4]  </p><p>固执的最佳量并非零。如果面对挫折，你的第一反应是不假思索地 “我不会放弃”，这可能是好事，因为这有助于防止恐慌。但不假思索的作用有限。一个人越是倾向于固执，就越不可能成功解决难题。[4]</p><p>Obstinacy is a simple thing. Animals have it. But persistence turns out to have a fairly complicated internal structure. </p><p>固执是一种简单的东西，动物也有。但事实证明，执着有着相当复杂的内在结构。</p><h3 id="三、执着可能的起因与本质"><a href="#三、执着可能的起因与本质" class="headerlink" title="三、执着可能的起因与本质"></a>三、执着可能的起因与本质</h3><p>One thing that distinguishes the persistent is their energy. At the risk of putting too much weight on words, they persist rather than merely resisting. They keep trying things. Which means the persistent must also be imaginative. To keep trying things, you have to keep thinking of things to try. Energy and imagination make a wonderful combination. Each gets the best out of the other. </p><p>执着者的一个特点是他们的精力。也许过分强调词语的含义不太好，但他们是 “坚持下去”，而不仅仅是 “抵抗”。他们不断尝试。这意味着执着的人还必须富有想象力。要不断尝试，你就必须不断想出新的点子。</p><p>Energy creates demand for the ideas produced by imagination, which thus produces more, and imagination gives energy somewhere to go. [5] </p><p>精力和想象力是一对绝妙的组合，彼此能让对方发挥出最佳水平。精力为想象力产生的想法创造需求，从而促使想象力产生更多想法，而想象力则为精力提供了方向。[5]</p><p>Merely having energy and imagination is quite rare. But to solve hard problems you need three more qualities: resilience, good judgement, and a focus on some kind of goal. </p><p>仅仅拥有精力和想象力是相当罕见的。但要解决难题，你还需要另外三种品质：韧性、良好的判断力和对某种目标的专注。</p><p>Resilience means not having one’s morale destroyed by setbacks. Setbacks are inevitable once problems reach a certain size, so if you can’t bounce back from them, you can only do good work on a small scale. But resilience is not the same as obstinacy. Resilience means setbacks can’t change your morale, not that they can’t change your mind. </p><p>韧性意味着不会因挫折而士气低落。一旦问题达到一定规模，挫折就不可避免，所以如果你不能从挫折中恢复过来，你就只能在小规模的事情上做出成绩。但韧性与固执不同。韧性意味着挫折不能改变你的士气，而不是说挫折不能改变你的想法。</p><p>Indeed, persistence often requires that one change one’s mind. That’s where good judgement comes in. The persistent are quite rational. They focus on expected value. It’s this, not recklessness, that lets them work on things that are unlikely to succeed. </p><p>事实上，执着往往需要人改变想法。这就需要良好的判断力了。执着的人非常理性，他们关注预期价值。正是这一点，而非鲁莽，让他们能够从事那些成功可能性不大的事情。</p><p>There is one point at which the persistent are often irrational though: at the very top of the decision tree. When they choose between two problems of roughly equal expected value, the choice usually comes down to personal preference. Indeed, they’ll often classify projects into deliberately wide bands of expected value in order to ensure that the one they want to work on still qualifies. </p><p>不过，在决策树的顶端，执着的人往往会不理性：当他们在两个预期价值大致相等的问题之间做出选择时，选择通常取决于个人偏好。事实上，他们往往会将项目故意划分为广泛的预期价值区间，以确保他们想做的项目仍然符合条件。</p><p>Empirically this doesn’t seem to be a problem. It’s ok to be irrational near the top of the decision tree. One reason is that we humans will work harder on a problem we love. But there’s another more subtle factor involved as well: our preferences among problems aren’t random. When we love a problem that other people don’t, it’s often because we’ve unconsciously noticed that it’s more important than they realize. </p><p>从经验来看，这似乎不是问题。在决策树的顶端不理性是可以接受的。一个原因是，我们人类会更努力地去解决自己喜欢的问题。但还有一个更微妙的因素：我们对那些别人不喜欢的问题的偏好，往往是因为我们下意识地注意到这些问题比别人意识到的更重要。</p><p>Which leads to our fifth quality: there needs to be some overall goal. If you’re like me you began, as a kid, merely with the desire to do something great. In theory that should be the most powerful motivator of all, since it includes everything that could possibly be done. But in practice it’s not much use, precisely because it includes too much. It doesn’t tell you what to do at this moment. </p><p>这就引出了第五种品质：需要有一个总体目标。如果你像我一样，小时候只是渴望做一些伟大的事情。理论上，这应该是最强大的动力，因为它包含了所有可能要做的事情。但实际上，它没什么用，正是因为它包含的太多了，它无法告诉你此刻该做什么。</p><p>So in practice your energy and imagination and resilience and good judgement have to be directed toward some fairly specific goal. Not too specific, or you might miss a great discovery adjacent to what you’re searching for, but not too general, or it won’t work to motivate you. [6] </p><p>所以，在实践中，你的精力、想象力、韧性和良好的判断力必须指向某个相当具体的目标。不能太具体，否则你可能会错过与你正在寻找的东西相关的重大发现，但也不能太笼统，否则就无法激励你。[6]</p><p>When you look at the internal structure of persistence, it doesn’t resemble obstinacy at all. It’s so much more complex. Five distinct qualities — energy, imagination, resilience, good judgement, and focus on a goal — combine to produce a phenomenon that seems a bit like obstinacy in the sense that it causes you not to give up. But the way you don’t give up is completely different. Instead of merely resisting change, you’re driven toward a goal by energy and resilience, through paths discovered by imagination and optimized by judgement. You’ll give way on any point low down in the decision tree, if its expected value drops sufficiently, but energy and resilience keep pushing you toward whatever you chose higher up. </p><p>当你审视执着的内在结构时，会发现它与固执一点也不像，它要复杂得多。五种不同的品质 —— 精力、想象力、韧性、良好的判断力和对目标的专注 —— 结合在一起，产生了一种看似有点像固执的现象，因为它让你不放弃。但你不放弃的方式完全不同。你不是仅仅抗拒改变，而是在精力和韧性的驱动下朝着目标前进，通过想象力发现路径，并通过判断力优化路径。如果决策树下层的某个要点的预期价值大幅下降，你会放弃它，但精力和韧性会推动你朝着你在决策树上层选择的目标前进。</p><p>Considering what it’s made of, it’s not surprising that the right kind of stubbornness is so much rarer than the wrong kind, or that it gets so much better results. Anyone can do obstinacy. Indeed, kids and drunks and fools are best at it. Whereas very few people have enough of all five of the qualities that produce the right kind of stubbornness, but when they do the results are magical.    </p><p>考虑到执着的构成，难怪正确的固执比错误的固执罕见得多，也难怪它能取得好得多的结果。任何人都可以固执，事实上，孩子、醉汉和傻瓜最擅长这个。而拥有产生正确固执的所有五种品质的人非常少，但当他们拥有这些品质时，结果是不可思议的。</p><p>Notes </p><p>[1] I’m going to use “persistent” for the good kind of stubborn and “obstinate” for the bad kind, but I can’t claim I’m simply following current usage. Conventional opinion barely distinguishes between good and bad kinds of stubbornness, and usage is correspondingly promiscuous. I could have invented a new word for the good kind, but it seemed better just to stretch “persistent.” </p><p>[1] 我将用 “执着（persistent）” 指代那种有益的固执，用 “固执（obstinate）” 指代有害的固执，但我并非完全遵循现有用法。传统观念几乎不区分固执的好坏，因此这两个词的使用也相应地混乱。我本可以为有益的固执创造一个新词，但似乎还是延伸 “执着” 的含义更好。</p><p>[2] There are some domains where one can succeed by being obstinate. Some political leaders have been notorious for it. But it won’t work in situations where you have to pass external tests. And indeed the political leaders who are famous for being obstinate are famous for getting power, not for using it well. </p><p>[2] 在某些领域，固执也能成功。有些政治领袖就因固执而出名。但在需要通过外部检验的情况下，固执行不通。事实上，那些因固执而闻名的政治领袖，出名的是他们获取权力的方式，而非运用权力的能力。</p><p>[3] There will be some resistance to turning the rudder of a persistent person, because there’s some cost to changing direction. </p><p>[3] 要改变执着者的方向（转动他们的 “舵”），多少会遇到一些阻力，因为改变方向总要付出代价。</p><p>[4] The obstinate do sometimes succeed in solving hard problems. One way is through luck: like the stopped clock that’s right twice a day, they seize onto some arbitrary idea, and it turns out to be right. Another is when their obstinacy cancels out some other form of error. For example, if a leader has overcautious subordinates, their estimates of the probability of success will always be off in the same direction. So if he mindlessly says “push ahead regardless” in every borderline case, he’ll usually turn out to be right. </p><p>[4] 固执的人有时也能解决难题。一种情况是靠运气：就像停摆的时钟每天也能准两次，他们抓住某个随意的想法，结果碰巧是对的。另一种情况是，他们的固执抵消了其他形式的错误。例如，若领导者的下属过于谨慎，他们对成功概率的估计总会偏向同一个错误方向。这时，若领导者在所有边缘案例中都盲目说 “无论如何都要推进”，往往最终会被证明是对的。</p><p>[5] If you stop there, at just energy and imagination, you get the conventional caricature of an artist or poet. </p><p>[5] 若仅停留在精力和想象力这两点，就会陷入人们对艺术家或诗人的固有刻板印象中。</p><p>[6] Start by erring on the small side. If you’re inexperienced you’ll inevitably err on one side or the other, and if you err on the side of making the goal too broad, you won’t get anywhere. Whereas if you err on the small side you’ll at least be moving forward. Then, once you’re moving, you expand the goal.</p><p>[6] 开始时，目标宁小勿大。缺乏经验时，你难免会在目标设定上有所偏差：若目标定得太宽泛，你会一事无成；若目标定得小一点，至少能向前推进。一旦开始行动，再逐步扩大目标范围。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读的必要</title>
    <link href="/2025/07/23/the-need-to-read/"/>
    <url>/2025/07/23/the-need-to-read/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-NEED-TO-READ"><a href="#THE-NEED-TO-READ" class="headerlink" title="THE NEED TO READ"></a>THE NEED TO READ</h2><p>原文链接: <a href="https://paulgraham.com/read.html">https://paulgraham.com/read.html</a></p><p>November 2022</p><p>In the science fiction books I read as a kid, reading had often been replaced by some more efficient way of acquiring knowledge. Mysterious “tapes” would load it into one’s brain like a program being loaded into a computer. </p><p>在我小时候读的科幻小说里，阅读往往已被某种更高效的知识获取方式取代。神秘的 “磁带” 能将知识载入大脑，就像给电脑加载程序一样。</p><p>That sort of thing is unlikely to happen anytime soon. Not just because it would be hard to build a replacement for reading, but because even if one existed, it would be insufficient. Reading about x doesn’t just teach you about x; it also teaches you how to write. [1] </p><p>这类事情短期内不太可能发生。不仅因为构建阅读的替代品难度极大，更因为即便存在这样的替代品，它也无法满足需求。阅读关于某事物的内容，不仅能让你了解该事物，还能教会你如何写作。[1]</p><p>Would that matter? If we replaced reading, would anyone need to be good at writing? </p><p>这很重要吗？如果我们找到了取代阅读的方法，还需要有人擅长写作吗？</p><p>The reason it would matter is that writing is not just a way to convey ideas, but also a way to have them. </p><p>重要的原因在于，写作不仅是传达思想的方式，更是产生思想的方式。</p><p>A good writer doesn’t just think, and then write down what he thought, as a sort of transcript. A good writer will almost always discover new things in the process of writing. And there is, as far as I know, no substitute for this kind of discovery. Talking about your ideas with other people is a good way to develop them. But even after doing this, you’ll find you still discover new things when you sit down to write. There is a kind of thinking that can only be done by writing. </p><p>优秀的作家并非先思考，再把想法像抄本一样写下来。优秀的作家几乎总会在写作过程中发现新东西。而且据我所知，这种发现是无可替代的。与他人探讨想法是完善思想的好方法，但即便如此，当你坐下来写作时，仍会发现新的东西。有一种思考，只能通过写作完成。</p><p>There are of course kinds of thinking that can be done without writing. If you don’t need to go too deeply into a problem, you can solve it without writing. If you’re thinking about how two pieces of machinery should fit together, writing about it probably won’t help much. And when a problem can be described formally, you can sometimes solve it in your head. But if you need to solve a complicated, ill-defined problem, it will almost always help to write about it. Which in turn means that someone who’s not good at writing will almost always be at a disadvantage in solving such problems. </p><p>当然，有些思考无需写作也能进行。如果不需要深入钻研某个问题，你可以不写就能解决它。比如思考两台机器如何组装时，写作可能没多大帮助。当一个问题可以被形式化描述时，有时也能在脑中解决。但如果要解决一个复杂且定义模糊的问题，写作几乎总能起到帮助。这意味着，不擅长写作的人在解决这类问题时，几乎总会处于劣势。</p><p>You can’t think well without writing well, and you can’t write well without reading well. And I mean that last “well” in both senses. You have to be good at reading, and read good things. [2] </p><p>写不好，就无法思考透彻；读不好，就写不好。这里的 “好” 有两层含义：你既要擅长阅读，也要读优秀的作品。[2]</p><p>People who just want information may find other ways to get it. But people who want to have ideas can’t afford to.      </p><p>只想获取信息的人或许能找到其他途径。但想要产生思想的人，却不能放弃阅读。</p><p>Notes </p><p>[1] Audiobooks can give you examples of good writing, but having them read to you doesn’t teach you as much about writing as reading them yourself. </p><p>[1] 有声书能为你提供优秀写作的范例，但听别人读，不如自己读更能教会你写作。</p><p>[2] By “good at reading” I don’t mean good at the mechanics of reading. You don’t have to be good at extracting words from the page so much as extracting meaning from the words.</p><p>[2] 我说的 “擅长阅读”，并非指阅读的技巧。你不必擅长从书页中识别文字，而应擅长从文字中提炼意义。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散文领域的格局</title>
    <link href="/2025/07/22/the-shape-of-the-essay-field/"/>
    <url>/2025/07/22/the-shape-of-the-essay-field/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-SHAPE-OF-THE-ESSAY-FIELD"><a href="#THE-SHAPE-OF-THE-ESSAY-FIELD" class="headerlink" title="THE SHAPE OF THE ESSAY FIELD"></a>THE SHAPE OF THE ESSAY FIELD</h2><p>原文链接: <a href="https://paulgraham.com/field.html">https://paulgraham.com/field.html</a></p><p>June 2025</p><p>An essay has to tell people something they don’t already know. But there are three different reasons people might not know something, and they yield three very different kinds of essays. </p><p>一篇散文必须告诉人们一些他们不知道的东西。但人们之所以不知道某件事，原因有三，而这三种原因催生出了三种截然不同的散文。</p><p>One reason people won’t know something is if it’s not important to know. That doesn’t mean it will make a bad essay. For example, you might write a good essay about a particular model of car. Readers would learn something from it. It would add to their picture of the world. For a handful of readers it might even spur some kind of epiphany. But unless this is a very unusual car it’s not critical for everyone to know about it. [1] </p><p>第一种原因是，这件事并不重要，不值得了解。但这并不意味着写这类内容就成不了好散文。比如，你可以写一篇关于某款特定车型的好散文。读者能从中学到东西，这会丰富他们对世界的认知。对少数读者来说，它甚至可能引发某种顿悟。但除非这是一款极不寻常的车，否则并非所有人都非了解它不可。[1]</p><p>If something isn’t important to know, there’s no answer to the question of why people don’t know it. Not knowing random facts is the default. But if you’re going to write about things that are important to know, you have to ask why your readers don’t already know them. Is it because they’re smart but inexperienced, or because they’re obtuse? </p><p>如果某件事不重要，那 “人们为什么不知道它” 这个问题就没有答案。不了解随机的琐事，本就是常态。但如果你要写的是值得了解的重要事物，就必须问自己：读者为什么偏偏不知道它？是因为他们聪明却缺乏经验，还是因为他们迟钝？</p><p>So the three reasons readers might not already know what you tell them are (a) that it’s not important, (b) that they’re obtuse, or (c) that they’re inexperienced. </p><p>所以，读者不知道你所要讲述的内容，原因有三：（a）内容不重要；（b）读者迟钝；（c）读者缺乏经验。</p><p>The reason I did this breakdown was to get at the following fact, which might have seemed controversial if I’d led with it, but should be obvious now. If you’re writing for smart people about important things, you’re writing for the young. </p><p>我做这种区分，是为了得出一个结论 —— 如果一开始就说，可能显得有争议，但现在看来应该很明显了：如果你要为聪明的人写重要的事，其实是在为年轻人写。</p><p>Or more precisely, that’s where you’ll have the most effect. Whatever you say should also be at least somewhat novel to you, however old you are. It’s not an essay otherwise, because an essay is something you write to figure something out. But whatever you figure out will presumably be more of a surprise to younger readers than it is to you. </p><p>更准确地说，这是你能产生最大影响的群体。无论你年龄多大，你所写的内容至少对自己来说也该有点新意。否则就不能称之为散文，因为散文本就是你为了弄明白某事而写的东西。但你弄明白的道理，对年轻读者来说，想必会比对你自己更令人惊讶。</p><p>There’s a continuum of surprise. At one extreme, something you read can change your whole way of thinking. The Selfish Gene did this to me. It was like suddenly seeing the other interpretation of an ambiguous image: you can treat genes rather than organisms as the protagonists, and evolution becomes easier to understand when you do. At the other extreme, writing merely puts into words something readers were already thinking — or thought they were. </p><p>惊喜是一个连续体。一端是，你读到的内容能彻底改变你的思维方式。《自私的基因》对我就是如此。这就像突然看懂了一幅模糊图像的另一种解读：你可以把基因而非生物体当作主角，这样一来，进化论就更容易理解了。另一端是，文字只是把读者已经在想（或者自以为在想）的东西表达出来而已。</p><p>The impact of an essay is how much it changes readers’ thinking multiplied by the importance of the topic. But it’s hard to do well at both. It’s hard to have big new ideas about important topics. So in practice there’s a tradeoff: you can change readers’ thinking a lot about moderately important things, or change it a little about very important ones. But with younger readers the tradeoff shifts. There’s more room to change their thinking, so there’s a bigger payoff for writing about important things. </p><p>一篇散文的影响力，等于它改变读者思维的程度乘以主题的重要性。但两者很难兼顾。对重要的主题产生重大的新见解，并非易事。所以实际上存在一种权衡：你可以在中等重要的事情上极大地改变读者的想法，或者在非常重要的事情上略微改变他们的想法。但对年轻读者而言，这种权衡会发生偏移。改变他们的思维有更大的空间，所以写重要的内容能带来更大的回报。</p><p>The tradeoff isn’t a conscious one, at least not for me. It’s more like a kind of gravitational field that writers work in. But every essayist works in it, whether they realize it or not. </p><p>这种权衡并非刻意为之，至少对我来说不是。它更像是作家身处的一种引力场。但每个散文作家，无论是否意识到，都身处其中。</p><p>This seems obvious once you state it, but it took me a long time to understand. I knew I wanted to write for smart people about important topics. I noticed empirically that I seemed to be writing for the young. But it took me years to understand that the latter was an automatic consequence of the former. In fact I only really figured it out as I was writing this essay. </p><p>说出来之后似乎显而易见，但我花了很久才明白这一点。我知道自己想为聪明的人写重要的事，也从经验中发现，自己似乎是在为年轻人写。但多年后我才明白，后者是前者的必然结果。事实上，直到写这篇散文时，我才真正想通。</p><p>Now that I know it, should I change anything? I don’t think so. In fact seeing the shape of the field that writers work in has reminded me that I’m not optimizing for returns in it. I’m not trying to surprise readers of any particular age; I’m trying to surprise myself. </p><p>既然明白了这一点，我应该做出改变吗？我觉得不必。事实上，看清作家所处领域的格局后，我反而意识到，自己并非在为追求回报而写作。我不是想给某个年龄段的读者带来惊喜，而是想给自己带来惊喜。</p><p>The way I usually decide what to write about is by following curiosity. I notice something new and dig into it. It would probably be a mistake to change that. But seeing the shape of the essay field has set me thinking. What would surprise young readers? Which important things do people tend to learn late? Interesting question. I should think about that.    </p><p>我通常通过追随好奇心来决定写什么。发现新事物，就深入挖掘。改变这种方式或许是个错误。但看清散文领域的格局后，我开始思考：什么能给年轻读者带来惊喜？哪些重要的东西，人们往往很晚才明白？这是个有趣的问题，我该好好想想。</p><p>Note </p><p>[1] It’s hard to write a really good essay about an unimportant topic, though, because a really good essayist will inevitably draw the topic into deeper waters. E. B. White could write an essay about how to boil potatoes that ended up being full of timeless wisdom. In which case, of course, it wouldn’t really be about how to boil potatoes; that would just have been the starting point. </p><p>[1] 不过，写一篇关于不重要话题的真正好散文并不容易，因为真正优秀的散文作家总会不可避免地将话题引向更深刻的层面。E.B. 怀特可以写一篇关于如何煮土豆的散文，最终却充满了永恒的智慧。当然，在这种情况下，文章其实并非真的在讲煮土豆，那只是一个起点而已。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何浪费时间与金钱</title>
    <link href="/2025/07/21/how-to-waste-time-and-money/"/>
    <url>/2025/07/21/how-to-waste-time-and-money/</url>
    
    <content type="html"><![CDATA[<h2 id="HOW-TO-WASTE-TIME-AND-MONEY"><a href="#HOW-TO-WASTE-TIME-AND-MONEY" class="headerlink" title="HOW TO WASTE TIME AND MONEY"></a>HOW TO WASTE TIME AND MONEY</h2><p>原文链接: <a href="https://paulgraham.com/selfindulgence.html">https://paulgraham.com/selfindulgence.html</a></p><p>July 2010</p><h3 id="一、如何对金钱流失保持警觉"><a href="#一、如何对金钱流失保持警觉" class="headerlink" title="一、如何对金钱流失保持警觉"></a>一、如何对金钱流失保持警觉</h3><p>When we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn’t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I’d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were. </p><p>1998 年，当我们卖掉自己的初创公司时，我突然有了一大笔钱。这时，我不得不开始思考一个此前从未想过的问题：如何守住这笔钱。我知道，人可以从贫穷变富有，同样也可能从富有变贫穷。过去几年，我花了大量时间研究从穷到富的路径，但对于从富到穷的路径，我几乎一无所知。而现在，为了避开这些陷阱，我必须弄清楚它们到底在哪里。</p><p>So I started to pay attention to how fortunes are lost. If you’d asked me as a kid how rich people became poor, I’d have said by spending all their money. That’s how it happens in books and movies, because that’s the colorful way to do it. But in fact the way most fortunes are lost is not through excessive expenditure, but through bad investments. </p><p>于是，我开始留意财富是如何流失的。小时候如果有人问我，富人是怎么变穷的，我会说他们是把钱都花光了。书籍和电影里都是这么演的，因为这种方式更富有戏剧性。但事实上，大多数财富的流失并非源于过度消费，而是糟糕的投资。</p><p>It’s hard to spend a fortune without noticing. Someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking “wow, I’m spending a lot of money.” Whereas if you start trading derivatives, you can lose a million dollars (as much as you want, really) in the blink of an eye. </p><p>大把花钱却毫无察觉，这很难做到。一个品味普通的人，花掉几万美元后，总会想 “哇，我花了好多钱”。但如果你开始做衍生品交易，可能一眨眼的功夫就会输掉 100 万美元（说真的，想输多少就能输多少）。</p><p>In most people’s minds, spending money on luxuries sets off alarms that making investments doesn’t. Luxuries seem self-indulgent. And unless you got the money by inheriting it or winning a lottery, you’ve already been thoroughly trained that self-indulgence leads to trouble. Investing bypasses those alarms. You’re not spending the money; you’re just moving it from one asset to another. Which is why people trying to sell you expensive things say “it’s an investment.” </p><p>在大多数人看来，花钱买奢侈品会让人警觉，但投资却不会。奢侈品似乎是放纵自己的表现。而且，除非你的钱是继承来的或者中彩票得来的，否则你早就被反复告诫：放纵会招致麻烦。而投资则绕过了这些警报 —— 你不是在花钱，只是把钱从一种资产转移到另一种资产而已。这也是为什么那些推销昂贵东西的人会说 “这是一项投资”。</p><p>The solution is to develop new alarms. This can be a tricky business, because while the alarms that prevent you from overspending are so basic that they may even be in our DNA, the ones that prevent you from making bad investments have to be learned, and are sometimes fairly counterintuitive. </p><p>解决办法是建立新的警报机制。这可能有点棘手，因为防止过度消费的警报机制非常基础，甚至可能存在于我们的基因中，而防止糟糕投资的警报机制则需要学习，有时还相当违背直觉。</p><p>A few days ago I realized something surprising: the situation with time is much the same as with money. The most dangerous way to lose time is not to spend it having fun, but to spend it doing fake work. When you spend time having fun, you know you’re being self-indulgent. Alarms start to go off fairly quickly. If I woke up one morning and sat down on the sofa and watched TV all day, I’d feel like something was terribly wrong. Just thinking about it makes me wince. I’d start to feel uncomfortable after sitting on a sofa watching TV for 2 hours, let alone a whole day. </p><h3 id="二、浪费时间最危险的方式"><a href="#二、浪费时间最危险的方式" class="headerlink" title="二、浪费时间最危险的方式"></a>二、浪费时间最危险的方式</h3><p>几天前，我意识到一件令人惊讶的事：时间的情况和金钱非常相似。浪费时间最危险的方式，不是花时间享乐，而是做 “虚假工作”。当你花时间享乐时，你知道自己在放纵，警报很快就会响起。如果我早上醒来，坐在沙发上看一整天电视，我会觉得哪里不对劲。光是想想就让我畏缩 —— 坐沙发上看两个小时电视我就会不舒服，更别说一整天了。</p><p>And yet I’ve definitely had days when I might as well have sat in front of a TV all day — days at the end of which, if I asked myself what I got done that day, the answer would have been: basically, nothing. I feel bad after these days too, but nothing like as bad as I’d feel if I spent the whole day on the sofa watching TV. If I spent a whole day watching TV I’d feel like I was descending into perdition. But the same alarms don’t go off on the days when I get nothing done, because I’m doing stuff that seems, superficially, like real work. Dealing with email, for example. You do it sitting at a desk. It’s not fun. So it must be work. </p><p>但我确实有过这样的日子：一整天下来，要是问自己做了什么，答案基本是 “什么也没做”。这样的日子过后我也会难受，但远不如看一整天电视那么难受。如果看了一整天电视，我会觉得自己在堕落。但在那些一事无成的日子里，警报却不会响起，因为我在做的事情表面上看起来像正经工作。比如处理邮件 —— 你坐在办公桌前做这件事，而且并不觉得有趣，所以它肯定是工作。</p><p>With time, as with money, avoiding pleasure is no longer enough to protect you. It probably was enough to protect hunter-gatherers, and perhaps all pre-industrial societies. So nature and nurture combine to make us avoid self-indulgence. But the world has gotten more complicated: the most dangerous traps now are new behaviors that bypass our alarms about self-indulgence by mimicking more virtuous types. And the worst thing is, they’re not even fun.</p><p>对待时间和对待金钱一样，仅仅避免享乐已经不够了。对于狩猎采集者，或许对所有前工业社会的人来说，这可能就够了。所以，先天本能和后天教育共同让我们避免放纵。但世界变得更复杂了：最危险的陷阱是那些新行为 —— 它们通过模仿更有益的行为，绕过了我们对放纵的警报。最糟糕的是，这些行为甚至毫无乐趣可言。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>养娃</title>
    <link href="/2025/07/21/having-kids/"/>
    <url>/2025/07/21/having-kids/</url>
    
    <content type="html"><![CDATA[<h2 id="HAVING-KIDS"><a href="#HAVING-KIDS" class="headerlink" title="HAVING KIDS"></a>HAVING KIDS</h2><p>原文链接: <a href="https://paulgraham.com/kids.html">https://paulgraham.com/kids.html</a></p><p>December 2019</p><h3 id="一、有小孩之前"><a href="#一、有小孩之前" class="headerlink" title="一、有小孩之前"></a>一、有小孩之前</h3><p>Before I had kids, I was afraid of having kids. Up to that point I felt about kids the way the young Augustine felt about living virtuously. I’d have been sad to think I’d never have children. But did I want them now? No. </p><p>在有孩子之前，我一直害怕要孩子。那时候，我对孩子的感觉，就像年轻时的奥古斯丁对 “过有德行的生活” 的感觉 —— 一想到自己永远不会有孩子，我会难过；但要说 “现在就想要”？不，我不想要。</p><p>If I had kids, I’d become a parent, and parents, as I’d known since I was a kid, were uncool. They were dull and responsible and had no fun. And while it’s not surprising that kids would believe that, to be honest I hadn’t seen much as an adult to change my mind. Whenever I’d noticed parents with kids, the kids seemed to be terrors, and the parents pathetic harried creatures, even when they prevailed. </p><p>如果有了孩子，我就会变成父母。而从我小时候起，父母在我眼里就是 “不酷” 的代名词：他们乏味、刻板，满脑子都是责任，完全无法享受生活。当然，孩子会这么想并不奇怪，但说实话，即便长大成人，我也没看到多少能改变这想法的事。每次看到带孩子的父母，孩子似乎都是些小恶魔，父母则是可怜兮兮、被折腾得焦头烂额的人 —— 哪怕他们最后 “镇住” 了孩子，也还是一副狼狈相。</p><p>When people had babies, I congratulated them enthusiastically, because that seemed to be what one did. But I didn’t feel it at all. “Better you than me,” I was thinking. </p><p>别人生孩子时，我会热情地祝贺，因为那似乎是 “该做的事”。但我心里毫无波澜，甚至在想：“还好是你，不是我。”</p><p>Now when people have babies I congratulate them enthusiastically and I mean it. Especially the first one. I feel like they just got the best gift in the world. </p><p>现在，别人生孩子时，我依然会热情祝贺，而且是发自内心的 —— 尤其是第一个孩子。我觉得他们像是收到了世界上最好的礼物。</p><p>What changed, of course, is that I had kids. Something I dreaded turned out to be wonderful. </p><p>当然，一切的转变都源于我自己有了孩子。曾经让我恐惧的事，最后竟成了美好的馈赠。</p><h3 id="二、有小孩之后"><a href="#二、有小孩之后" class="headerlink" title="二、有小孩之后"></a>二、有小孩之后</h3><p>Partly, and I won’t deny it, this is because of serious chemical changes that happened almost instantly when our first child was born. It was like someone flipped a switch. I suddenly felt protective not just toward our child, but toward all children. As I was driving my wife and new son home from the hospital, I approached a crosswalk full of pedestrians, and I found myself thinking “I have to be really careful of all these people. Every one of them is someone’s child!” </p><p>不得不承认，很大程度上是因为第一个孩子出生时，我体内瞬间发生了剧烈的化学变化。就像有人扳动了开关：我突然不仅想保护自己的孩子，还想保护所有孩子。记得开车载着妻子和刚出生的儿子从医院回家时，路过一个挤满行人的斑马线，我心里突然冒出一个念头：“我得对这些人万分小心。他们每一个，都是别人的孩子啊！”</p><p>So to some extent you can’t trust me when I say having kids is great. To some extent I’m like a religious cultist telling you that you’ll be happy if you join the cult too — but only because joining the cult will alter your mind in a way that will make you happy to be a cult member. </p><p>所以，当我说 “有孩子很棒” 时，你多少得打个折扣。某种程度上，我就像个邪教徒 —— 告诉你 “加入我们你就会快乐”，但真相是，只有加入后，你的大脑才会被改造，让你觉得作为教徒很快乐。</p><p>But not entirely. There were some things about having kids that I clearly got wrong before I had them. </p><p>但也不全是这样。有孩子这件事，我之前确实有很多明显的误解。</p><p>For example, there was a huge amount of selection bias in my observations of parents and children. Some parents may have noticed that I wrote “Whenever I’d noticed parents with kids.” Of course the times I noticed kids were when things were going wrong. I only noticed them when they made noise. And where was I when I noticed them? Ordinarily I never went to places with kids, so the only times I encountered them were in shared bottlenecks like airplanes. Which is not exactly a representative sample. Flying with a toddler is something very few parents enjoy. </p><p>比如，我对父母和孩子的观察存在严重的 “选择性偏差”。也许有父母注意到了，我写的是 “每次我‘注意到’带孩子的父母”。当然了，我会注意到孩子，往往是因为他们 “出状况” 的时候 —— 只有他们吵闹时，我才会留意到。而且，我是在什么场合注意到他们的呢？平时我根本不去有孩子的地方，唯一能碰到孩子的场合，都是像飞机这样的 “共用瓶颈” 场所。这显然不是有代表性的样本 —— 带学步的孩子坐飞机，没几个父母会觉得享受。</p><p>What I didn’t notice, because they tend to be much quieter, were all the great moments parents had with kids. People don’t talk about these much — the magic is hard to put into words, and all other parents know about them anyway — but one of the great things about having kids is that there are so many times when you feel there is nowhere else you’d rather be, and nothing else you’d rather be doing. You don’t have to be doing anything special. You could just be going somewhere together, or putting them to bed, or pushing them on the swings at the park. But you wouldn’t trade these moments for anything. One doesn’t tend to associate kids with peace, but that’s what you feel. You don’t need to look any further than where you are right now. </p><p>那些父母和孩子相处的美好时刻，我从来没注意到，因为它们大多安安静静的。人们很少谈论这些时刻 —— 那种魔力很难用语言描述，而且其他父母都懂 —— 但有孩子的一大好处是，你会频繁地觉得 “此刻就是最好的，做什么都不如现在”。不一定是做什么特别的事：可能只是一起出门，可能是哄他们睡觉，可能是在公园推他们荡秋千。但这些时刻，你无论如何都不愿交换。没人会把 “孩子” 和 “平静” 联系起来，但你真的会感到平静 —— 你会觉得，眼前的一切就足够了。</p><p>Before I had kids, I had moments of this kind of peace, but they were rarer. With kids it can happen several times a day. </p><p>有孩子之前，我也有过这种平静的时刻，但很少。有了孩子之后，一天能有好几次。</p><p>My other source of data about kids was my own childhood, and that was similarly misleading. I was pretty bad, and was always in trouble for something or other. So it seemed to me that parenthood was essentially law enforcement. I didn’t realize there were good times too. </p><p>我对孩子的另一个认知来源是自己的童年，这同样具有误导性。我小时候很调皮，总因为各种事被找麻烦。所以在我看来，为人父母本质上就是 “执法”—— 我从没想过，原来也有快乐的时候。</p><p>I remember my mother telling me once when I was about 30 that she’d really enjoyed having me and my sister. My god, I thought, this woman is a saint. She not only endured all the pain we subjected her to, but actually enjoyed it? Now I realize she was simply telling the truth. </p><p>记得 30 岁左右时，母亲曾对我说，她真的很享受养育我和妹妹的过程。当时我心想：天啊，这女人简直是圣人。她不仅忍受了我们带来的所有麻烦，竟然还觉得享受？现在我才明白，她只是在说真话。</p><p>She said that one reason she liked having us was that we’d been interesting to talk to. That took me by surprise when I had kids. You don’t just love them. They become your friends too. They’re really interesting. And while I admit small children are disastrously fond of repetition (anything worth doing once is worth doing fifty times) it’s often genuinely fun to play with them. That surprised me too. Playing with a 2 year old was fun when I was 2 and definitely not fun when I was 6. Why would it become fun again later? But it does. </p><p>她说喜欢养我们的一个原因是，和我们聊天很有意思。有了孩子后，这一点让我很意外：你不只是爱他们，他们还会成为你的朋友。他们真的很有趣。虽然我承认，小孩子对重复有种要命的执念（但凡值得做一次的事，就值得做五十次），但和他们玩常常是真的开心。这也让我意外：我两岁时和两岁的孩子玩很开心，六岁时就觉得无趣了，为什么长大后反而又觉得好玩了呢？但事实就是这样。</p><p>There are of course times that are pure drudgery. Or worse still, terror. Having kids is one of those intense types of experience that are hard to imagine unless you’ve had them. But it is not, as I implicitly believed before having kids, simply your DNA heading for the lifeboats. </p><p>当然，育儿也有纯粹枯燥的时候，甚至可怕的时刻。有孩子是一种极致的体验，没经历过的人很难想象。但它不像我之前默认的那样，只是 “DNA 在找救生艇”（指繁衍后代只是基因的本能）。</p><p>Some of my worries about having kids were right, though. They definitely make you less productive. I know having kids makes some people get their act together, but if your act was already together, you’re going to have less time to do it in. In particular, you’re going to have to work to a schedule. Kids have schedules. I’m not sure if it’s because that’s how kids are, or because it’s the only way to integrate their lives with adults’, but once you have kids, you tend to have to work on their schedule. </p><p>不过，我之前对有孩子的一些担忧是对的。他们确实会降低你的生产力。我知道有些人为了孩子会 “振作起来”，但如果你的生活本就有条理，那你能用来做事的时间会变少。尤其是，你得按时间表来。孩子有他们的作息 —— 不确定是因为孩子本身就这样，还是因为这是让他们的生活和成人生活融合的唯一方式 —— 但有了孩子后，你往往得按他们的时间表来。</p><p>You will have chunks of time to work. But you can’t let work spill promiscuously through your whole life, like I used to before I had kids. You’re going to have to work at the same time every day, whether inspiration is flowing or not, and there are going to be times when you have to stop, even if it is. </p><p>你还是会有整块的工作时间，但不能像以前那样，让工作随心所欲地填满生活。你得每天在固定时间工作，不管有没有灵感；也总会有不得不停下的时候，哪怕灵感正盛。</p><p>I’ve been able to adapt to working this way. Work, like love, finds a way. If there are only certain times it can happen, it happens at those times. So while I don’t get as much done as before I had kids, I get enough done. </p><p>我已经适应了这样的工作方式。工作和爱一样，总会找到出路。如果只有特定时间能做事，那就在那些时间做。所以虽然我做的事比没孩子时少，但也足够了。</p><p>I hate to say this, because being ambitious has always been a part of my identity, but having kids may make one less ambitious. It hurts to see that sentence written down. I squirm to avoid it. But if there weren’t something real there, why would I squirm? The fact is, once you have kids, you’re probably going to care more about them than you do about yourself. And attention is a zero-sum game. Only one idea at a time can be the top idea in your mind. Once you have kids, it will often be your kids, and that means it will less often be some project you’re working on. </p><p>这话我不想说，因为 “有野心” 一直是我身份的一部分，但有孩子可能会让人没那么有野心。写下这句话时，我都觉得别扭，想回避。但如果这不是事实，我何必回避呢？事实是，有了孩子后，你可能会更在乎他们，胜过在乎自己。而注意力是零和游戏 —— 脑子里一次只能有一个最重要的念头。有了孩子后，这个念头常常是他们，所以你放在工作项目上的心思就会少些。</p><p>I have some hacks for sailing close to this wind. For example, when I write essays, I think about what I’d want my kids to know. That drives me to get things right. And when I was writing Bel, I told my kids that once I finished it I’d take them to Africa. When you say that sort of thing to a little kid, they treat it as a promise. Which meant I had to finish or I’d be taking away their trip to Africa. Maybe if I’m really lucky such tricks could put me net ahead. But the wind is there, no question. </p><p>我有一些小技巧来应对这种情况。比如写文章时，我会想 “这是我想让孩子知道的事”，这会推动我把事情做好。写《贝尔》时，我跟孩子们说，写完就带他们去非洲。跟小孩子说这种话，他们会当真的 —— 这意味着我必须写完，不然就会剥夺他们的非洲之旅。也许运气好的话，这些技巧能让我总体上不输以前。但那种 “野心被稀释” 的趋势，确实存在。</p><p>On the other hand, what kind of wimpy ambition do you have if it won’t survive having kids? Do you have so little to spare? </p><p>但反过来想：如果你的野心连有孩子都承受不住，那它也太脆弱了吧？你就这么 “输不起” 吗？</p><p>And while having kids may be warping my present judgement, it hasn’t overwritten my memory. I remember perfectly well what life was like before. Well enough to miss some things a lot, like the ability to take off for some other country at a moment’s notice. That was so great. Why did I never do that? </p><p>虽然有孩子可能扭曲了我现在的判断，但它没抹去我的记忆。我清楚记得没孩子时的生活，清楚到会很想念一些事，比如随时能出发去别的国家。那多棒啊，我以前怎么没多做呢？</p><p>See what I did there? The fact is, most of the freedom I had before kids, I never used. I paid for it in loneliness, but I never used it. </p><p>发现了吗？事实是，没孩子时拥有的那些自由，我大多都没利用过。我为它付出了孤独的代价，却从未真正使用过。</p><p>I had plenty of happy times before I had kids. But if I count up happy moments, not just potential happiness but actual happy moments, there are more after kids than before. Now I practically have it on tap, almost any bedtime. </p><p>没孩子时，我有过很多快乐的时光。但如果数 “快乐的时刻”—— 不只是潜在的快乐，而是真实的快乐瞬间 —— 有孩子之后比之前多。现在，几乎每个哄睡的时刻，我都能感受到这种快乐，触手可及。</p><p>People’s experiences as parents vary a lot, and I know I’ve been lucky. But I think the worries I had before having kids must be pretty common, and judging by other parents’ faces when they see their kids, so must the happiness that kids bring.     </p><p>为人父母的体验因人而异，我知道自己很幸运。但我觉得，我之前对有孩子的担忧应该很普遍；而从其他父母看到孩子时的神情来看，孩子带来的快乐，大概也同样普遍。</p><p>Note </p><p>[1] Adults are sophisticated enough to see 2 year olds for the fascinatingly complex characters they are, whereas to most 6 year olds, 2 year olds are just defective 6 year olds.</p><p>[1] 成年人足够成熟，能发现两岁孩子身上那种迷人的复杂性，把他们看作独一无二的鲜活个体；而对大多数六岁孩子来说，两岁的小孩不过是 “发育不完全的六岁孩子” 罢了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何取得杰出成就</title>
    <link href="/2025/07/19/how-to-do-great-work/"/>
    <url>/2025/07/19/how-to-do-great-work/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Do-Great-Work"><a href="#How-to-Do-Great-Work" class="headerlink" title="How to Do Great Work"></a>How to Do Great Work</h2><p>原文链接: <a href="https://paulgraham.com/greatwork.html">https://paulgraham.com/greatwork.html</a></p><p>译文链接 [赛博禅心]: <a href="https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ">https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ</a></p><h3 id="一、成就伟大事业的关键"><a href="#一、成就伟大事业的关键" class="headerlink" title="一、成就伟大事业的关键"></a>一、成就伟大事业的关键</h3><p>If you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.</p><p>Partly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it’s not just a point labelled “work hard.”</p><p>The following recipe assumes you’re very ambitious.</p><p>如果让你收集在不同领域成就伟大事业的技巧列表，它们的交集会是什么呢？我决定通过实践来找出答案。</p><p>我的目标有两个，其一是创建一个可以为所有领域的从业者所用的指南，其二是我也对交集的形态感到好奇 —— 实践表明，这个交集确实有一个「明确的形状」，它不仅仅是一个标有「努力工作」字样的点。</p><p><strong>以下指南的前提假设是你拥有雄心壮志。</strong></p><h4 id="第一步：决定要做什么"><a href="#第一步：决定要做什么" class="headerlink" title="第一步：决定要做什么"></a>第一步：决定要做什么</h4><p>The first step is to decide what to work on. The work you choose needs to have three qualities: </p><ul><li>it has to be something you have a natural aptitude for, </li><li>that you have a deep interest in, </li><li>and that offers scope to do great work.</li></ul><p>**第一步是决定要做什么。**你所选择的工作需要具有三个特质：</p><ol><li>你对这件事有天赋；</li><li>你对这件事有深深的兴趣；</li><li>这件事拥有取得杰出成就的空间。</li></ol><p>In practice you don’t have to worry much about the third criterion. Ambitious people are if anything already too conservative about it. So all you need to do is find something you have an aptitude for and great interest in. [1]</p><p>在实践中，我们不必过于担心第三点 —— 对于具有雄心壮志的人来说，可见的空间已然过于保守 —— 所以<strong>我们需要做的就是找到有天赋和极大兴趣的事情。</strong>[1]</p><p>That sounds straightforward, but it’s often quite difficult. When you’re young you don’t know what you’re good at or what different kinds of work are like. Some kinds of work you end up doing may not even exist yet. So while some people know what they want to do at 14, most have to figure it out.</p><p>这听起来很简单，但往往很困难。当我们年轻时，并不知道自己擅长什么，或者不同类型的工作是什么样的，甚至我们最终做的一些工作可能当前还不存在。所以，虽然有些人在十四岁的时候就知道他们想做什么，但大多数人还需要时间去弄清楚。</p><p>The way to figure out what to work on is by working. If you’re not sure what to work on, guess. But pick something and get going. You’ll probably guess wrong some of the time, but that’s fine. It’s good to know about multiple things; some of the biggest discoveries come from noticing connections between different fields.</p><p>找出要做什么的方法是通过工作。如果我们不确定要做什么，那就猜，但是要选择一件事情并开始做。我们可能会猜错，但没关系，了解多种事物是好的 —— <strong>一些最伟大的发现来自于注意到不同领域之间的联系</strong>。</p><p>Develop a habit of working on your own projects. Don’t let “work” mean something other people tell you to do. If you do manage to do great work one day, it will probably be on a project of your own. It may be within some bigger project, but you’ll be driving your part of it.</p><p><strong>养成自己发起并推动项目的习惯</strong>。不要让「工作」这个词等同于别人告诉我们要做什么事情。如果我们有一天真的取得了杰出成就，那可能会始于我们自己发起的一个项目 —— 它可能包含在某个更大的项目中，但你会推动其中的一部分。</p><p>What should your projects be? Whatever seems to you excitingly ambitious. As you grow older and your taste in projects evolves, exciting and important will converge. At 7 it may seem excitingly ambitious to build huge things out of Lego, then at 14 to teach yourself calculus, till at 21 you’re starting to explore unanswered questions in physics. But always preserve excitingness.</p><p>我们的项目应该是什么？任何令自己感到兴奋的且可以让自己踌躇满志的事。随着年龄的增长，我们对项目的品味会进化，兴奋程度和重要性会趋于正相关 —— 七岁时，用乐高搭建巨大的模型可能看起来令人兴奋且斗志满满；十四岁时，可能是自学微积分；二十一岁时，则可能是开始探索物理学中的未解问题 —— 但，无论是什么，它们始终是令人兴奋的。</p><p>There’s a kind of excited curiosity that’s both the engine and the rudder of great work. It will not only drive you, but if you let it have its way, will also show you what to work on.</p><p>伴随着兴奋的好奇心是杰出成就的引擎和舵，它不仅会驱动我们前进，如果我们能让它发挥更大的作用，它还会告诉我们要做什么。</p><p>What are you excessively curious about — curious to a degree that would bore most other people? That’s what you’re looking for.</p><p><strong>我们对什么有着「过分的」好奇心，「过分」到其他大多数人会觉得无聊的程度？那就是我们所要寻找的事。</strong></p><h4 id="第二步：学习足够多的知识"><a href="#第二步：学习足够多的知识" class="headerlink" title="第二步：学习足够多的知识"></a>第二步：学习足够多的知识</h4><p>Once you’ve found something you’re excessively interested in, the next step is to learn enough about it to get you to one of the frontiers of knowledge. Knowledge expands fractally, and from a distance its edges look smooth, but once you learn enough to get close to one, they turn out to be full of gaps.</p><p>一旦找到了「过分」感兴趣的事，下一步就是学习足够多的知识，让我们能够到达此领域的知识前沿。知识以分形的方式扩展，从远处看，它的边缘看起来很平滑，但一旦我们学习得足够多，接近其中的部分边缘，会发现它们充满了缺口。</p><h4 id="第三步：关注所属领域的”缺口”"><a href="#第三步：关注所属领域的”缺口”" class="headerlink" title="第三步：关注所属领域的”缺口”"></a>第三步：关注所属领域的”缺口”</h4><p>The next step is to notice them. This takes some skill, because your brain wants to ignore such gaps in order to make a simpler model of the world. Many discoveries have come from asking questions about things that everyone else took for granted. [2]</p><p>下一步是注意到这些缺口。这需要一些技巧，因为我们的大脑想要忽略这些缺口，以便构建一个更简单的世界模型。许多伟大的发现来自于对大家都视为理所当然的事提出问题。[2]</p><p>If the answers seem strange, so much the better. Great work often has a tincture of strangeness. You see this from painting to math. It would be affected to try to manufacture it, but if it appears, embrace it.</p><p>如果答案看起来很奇怪，那就更好了 —— 杰出成就往往带有奇特色彩 —— 从绘画到数学，我们都可以看到这一点。试图制造这种奇特的行为是做作的，但如果它出现了，就接受它。</p><h4 id="第四步：探索其中有前景的缺口"><a href="#第四步：探索其中有前景的缺口" class="headerlink" title="第四步：探索其中有前景的缺口"></a>第四步：探索其中有前景的缺口</h4><p>Boldly chase outlier ideas, even if other people aren’t interested in them — in fact, especially if they aren’t. If you’re excited about some possibility that everyone else ignores, and you have enough expertise to say precisely what they’re all overlooking, that’s as good a bet as you’ll find. [3]</p><p><strong>大胆地追求不合群的想法，即使其他人对它们不感兴趣</strong> —— 事实上，尤其是他们不感兴趣的时候。如果我们对大家都忽视的某种可能性感到兴奋，并且有足够的专业知识来精确地说出他们都忽视了什么，那就是我们能找到的最好的赌注。[3]</p><p>Four steps: </p><ul><li>choose a field, </li><li>learn enough to get to the frontier, </li><li>notice gaps, </li><li>explore promising ones.</li></ul><p>四个步骤：</p><ol><li>选择一个领域；</li><li>学习足够多的知识以到达领域前沿；</li><li>注意到领域缺口；</li><li>探索其中有前景的缺口。</li></ol><p>This is how practically everyone who’s done great work has done it, from painters to physicists.</p><p>—— 这就是几乎所有取得杰出成就的人都是如何做到的，从画家到物理学家。</p><p>Steps two and four will require hard work. It may not be possible to prove that you have to work hard to do great things, but the empirical evidence is on the scale of the evidence for mortality. That’s why it’s essential to work on something you’re deeply interested in. Interest will drive you to work harder than mere diligence ever could.</p><p>第二步和第四步需要努力。我可能无法用语言证明一个人必须努力才能取得伟大成就，但实证证据就像死亡的证据一样确凿。这就是为什么我们必须从事自己深感兴趣的事情 —— 兴趣会驱使我们比单纯的勤奋工作更加努力。</p><p>The three most powerful motives are curiosity, delight, and the desire to do something impressive. Sometimes they converge, and that combination is the most powerful of all.</p><p>The big prize is to discover a new fractal bud. You notice a crack in the surface of knowledge, pry it open, and there’s a whole world inside.</p><p><strong>三个最强大的内在动机是好奇心、快乐和做出令人印象深刻的事情的欲望，当它们会汇聚在一起时，会成为最强大的组合。</strong></p><p>最大的奖励是发现一个新的分形芽。我们注意到了知识表面的一个裂缝，撬开它，里面有一个完整的世界。</p><h3 id="二、找出自己要做的事"><a href="#二、找出自己要做的事" class="headerlink" title="二、找出自己要做的事"></a>二、找出自己要做的事</h3><p>Let’s talk a little more about the complicated business of figuring out what to work on. The main reason it’s hard is that you can’t tell what most kinds of work are like except by doing them. Which means the four steps overlap: you may have to work at something for years before you know how much you like it or how good you are at it. And in the meantime you’re not doing, and thus not learning about, most other kinds of work. So in the worst case you choose late based on very incomplete information. [4]</p><p>我们多讨论一些关于弄清楚要做什么这个复杂的问题。其中，主要困难在于，除了做过的工作，我们无法知道大多数类型的工作是什么样的，这意味着前面所说的四个步骤是重叠的：我们可能需要花几年的时间做某件事，才能知道自己有多喜欢它或者我们在这方面有多好；同时，我们没有在做大多数其他类型的工作，也就没有在学习。所以在最坏的情况下，我们会在不正确的时机且信息非常不完整的情况下做出选择。[4]</p><p>The nature of ambition exacerbates this problem. Ambition comes in two forms, one that precedes interest in the subject and one that grows out of it. Most people who do great work have a mix, and the more you have of the former, the harder it will be to decide what to do.</p><p>雄心壮志的性质加剧了这个问题。雄心壮志有两种形式：一种是在对工作感兴趣之前就有的，另一种是在工作过程中生长出来的。取得伟大成就的大多数人的雄心都是混合的，但前者越少，就会越难决定要做什么。</p><p>The educational systems in most countries pretend it’s easy. They expect you to commit to a field long before you could know what it’s really like. And as a result an ambitious person on an optimal trajectory will often read to the system as an instance of breakage.</p><p>大多数国家的教育系统都假装决定要做什么很容易，他们期望我们在知道某个领域真正是什么样子之前就做出决定。因此，<strong>沿着最佳轨迹来看，一个有雄心壮志的人往往会被系统视为异类。</strong></p><p>It would be better if they at least admitted it — if they admitted that the system not only can’t do much to help you figure out what to work on, but is designed on the assumption that you’ll somehow magically guess as a teenager. They don’t tell you, but I will: when it comes to figuring out what to work on, you’re on your own. Some people get lucky and do guess correctly, but the rest will find themselves scrambling diagonally across tracks laid down on the assumption that everyone does.</p><p>如果这些系统至少承认这一点就好了 —— 系统不仅不能帮助我们弄清楚要做什么，而且还是在假设我们可以在十几岁的时候神奇地猜出来的基础上设计的。它们不会说，但在这里我要强调：<strong>当涉及到弄清楚要做什么时，我们只能靠自己</strong>。有些人运气好，一下就猜对了，但其他人会发现自己在假设每个人都会在的轨道上歪斜着奔跑。</p><p>What should you do if you’re young and ambitious but don’t know what to work on? What you should not do is drift along passively, assuming the problem will solve itself. You need to take action. But there is no systematic procedure you can follow. When you read biographies of people who’ve done great work, it’s remarkable how much luck is involved. They discover what to work on as a result of a chance meeting, or by reading a book they happen to pick up. So you need to make yourself a big target for luck, and the way to do that is to be curious. Try lots of things, meet lots of people, read lots of books, ask lots of questions. [5]</p><p>如果我们年轻并且有雄心但不知道要做什么，我们应该做什么？我们知道自己不应该被动漂流，假设问题会自己解决，同时我们需要采取行动，但没有可以遵循的系统性程序。当我们阅读取得杰出成就的人的传记时，会发现运气的参与程度是那么高：他们通过偶然的会面，或者读到他们碰巧拿起的一本书，就发现了要做什么。<strong>所以我们需要让自己成为运气的显眼目标，做到这一点的方法是保持好奇 —— 尝试很多事，见很多人，读很多书，问很多问题。</strong>[5]</p><p>When in doubt, optimize for interestingness. Fields change as you learn more about them. What mathematicians do, for example, is very different from what you do in high school math classes. So you need to give different types of work a chance to show you what they’re like. But a field should become increasingly interesting as you learn more about it. If it doesn’t, it’s probably not for you.</p><p>当我们感到疑惑时，优先考虑有趣的事情。随着对它们了解得越多，我们对领域的认知就会发生变化，例如，数学家做的事情与我们在高中数学课上做的事情非常不同 —— 所以我们需要给不同类型的工作一个展示它们是什么样的机会 —— 但是，当我们对一个领域了解得越多，它应该变得越来越有趣，如果没有，那可能就不适合自己。</p><p>Don’t worry if you find you’re interested in different things than other people. The stranger your tastes in interestingness, the better. Strange tastes are often strong ones, and a strong taste for work means you’ll be productive. And you’re more likely to find new things if you’re looking where few have looked before.</p><p>如果我们发现自己对其他人不感兴趣的事情感兴趣，不要担心，我们的兴趣越奇特，越好 —— 奇特的往往是强烈的，对工作有强烈的感受意味着我们会有超高的生产力。而且，如果我们在很少有人到达过的地方探索，那就更有可能找到新的东西。</p><p>One sign that you’re suited for some kind of work is when you like even the parts that other people find tedious or frightening.</p><p><strong>当我们喜欢其他人感到乏味或恐惧的工作时，这是一个我们适合这份工作的标志。</strong></p><p>But fields aren’t people; you don’t owe them any loyalty. If in the course of working on one thing you discover another that’s more exciting, don’t be afraid to switch.</p><p>但，领域不是人，我们完全不需要对它们保持忠诚。如果在做一件事的过程中，我们发现了另一件更令人兴奋的事，不要害怕切换。</p><p>If you’re making something for people, make sure it’s something they actually want. The best way to do this is to make something you yourself want. Write the story you want to read; build the tool you want to use. Since your friends probably have similar interests, this will also get you your initial audience.</p><p>如果我们正在为人们做点东西，要确保它是人们真正想要的。做到这一点的最好方法是做自己想要的东西：写自己想读的故事，制作自己想使用的工具。由于我们的朋友可能有类似的兴趣，这也会为我们带来初始「观众」。</p><p>This should follow from the excitingness rule. Obviously the most exciting story to write will be the one you want to read. The reason I mention this case explicitly is that so many people get it wrong. Instead of making what they want, they try to make what some imaginary, more sophisticated audience wants. And once you go down that route, you’re lost. [6]</p><p>这也可以从令人兴奋的规则中得出的 —— 显然，最令人兴奋的故事就是我们自己想读的故事。我特别提到这个例子的原因是，<strong>有很多人在这方面做错了，他们不是制作他们想要的东西，而是试图制作一些想象中的、更成熟的观众想要的东西。一旦我们走上这条路，就迷失了。</strong>[6]</p><p>There are a lot of forces that will lead you astray when you’re trying to figure out what to work on. Pretentiousness, fashion, fear, money, politics, other people’s wishes, eminent frauds. But if you stick to what you find genuinely interesting, you’ll be proof against all of them. If you’re interested, you’re not astray.</p><p>当我们试图弄清楚要做什么时，有很多力量会使我们误入歧途：矫饰、趋势、恐惧、金钱、政治、他人的愿望、狡猾的骗子。但如果我们坚持自己真正感兴趣的事情，就能抵御所有这些，如果我们感兴趣，就没有误入歧途。</p><h3 id="三、关于制定计划"><a href="#三、关于制定计划" class="headerlink" title="三、关于制定计划"></a>三、关于制定计划</h3><p>Following your interests may sound like a rather passive strategy, but in practice it usually means following them past all sorts of obstacles. You usually have to risk rejection and failure. So it does take a good deal of boldness.</p><p>追随自己的兴趣可能听起来像是一种相当被动的策略，但在实践中，它通常意味着要跨越各种障碍，我们通常需要冒着被拒绝和失败的风险，所以这确实需要相当大的勇气。</p><p>But while you need boldness, you don’t usually need much planning. In most cases the recipe for doing great work is simply: work hard on excitingly ambitious projects, and something good will come of it. Instead of making a plan and then executing it, you just try to preserve certain invariants.</p><p>但是，我们虽然需要勇气，但通常不需要太多计划。大多数情况下，成就伟大事业的方式很简单：在令人兴奋的、能够激发我们雄心壮志的项目上努力工作，好的事情就会自然发生 —— <strong>我们不需要制定一个计划然后执行它，只需要维持某些不变量</strong>。</p><p>The trouble with planning is that it only works for achievements you can describe in advance. You can win a gold medal or get rich by deciding to as a child and then tenaciously pursuing that goal, but you can’t discover natural selection that way.</p><p>计划的问题在于，它只适用于可以提前描述的成就。我们可以决定赢得金牌或者变得富有，然后坚持追求这个目标，但不能以这种方式实现自然选择。</p><p>I think for most people who want to do great work, the right strategy is not to plan too much. At each stage do whatever seems most interesting and gives you the best options for the future. I call this approach “staying upwind.” This is how most people who’ve done great work seem to have done it.</p><p>我认为，对于大多数想要取得伟大成就的人来说，正确的策略是不要计划太多。在每个阶段，做任何看起来最有趣并为未来提供最好选择的事，我称这种方法为「保持上风」—— 这似乎就是大多数伟大成就如何达成的。</p><h3 id="四、工作推进的策略技巧"><a href="#四、工作推进的策略技巧" class="headerlink" title="四、工作推进的策略技巧"></a>四、工作推进的策略技巧</h3><p>Even when you’ve found something exciting to work on, working on it is not always straightforward. There will be times when some new idea makes you leap out of bed in the morning and get straight to work. But there will also be plenty of times when things aren’t like that.</p><p>即使我们找到了令人兴奋的工作，进行这项工作也并不总是简单的。有时候，一些新的想法会让我们早上从床上跳起来，直接开始工作，但也有很多时候，事情恰恰相反。</p><p>You don’t just put out your sail and get blown forward by inspiration. There are headwinds and currents and hidden shoals. So there’s a technique to working, just as there is to sailing.</p><p>我们不能只是张开帆，让灵感把自己推向前方，会有逆风、潮汐和隐藏的暗礁。所以，<strong>工作就像航行一样，是有技巧的</strong>。</p><p>For example, while you must work hard, it’s possible to work too hard, and if you do that you’ll find you get diminishing returns: fatigue will make you stupid, and eventually even damage your health. The point at which work yields diminishing returns depends on the type. Some of the hardest types you might only be able to do for four or five hours a day.</p><p>例如，我们虽然必须努力工作，但是也有可能工作过度，在这种状态下，我们会发现收益递减：疲劳会让我们变得愚蠢，最终甚至可能损害我们的健康。工作产生递减收益的点取决于工作的类型，一些最艰难的类型，我们可能一天只能做四五个小时。</p><p>Ideally those hours will be contiguous. To the extent you can, try to arrange your life so you have big blocks of time to work in. You’ll shy away from hard tasks if you know you might be interrupted.</p><p>理想情况下，这些工时应该是连续的。尽可能地，试着安排自己的生活，让自己有大块的时间来工作，如果知道可能会被打断，那就回避艰难的任务。</p><p>It will probably be harder to start working than to keep working. You’ll often have to trick yourself to get over that initial threshold. Don’t worry about this; it’s the nature of work, not a flaw in your character. Work has a sort of activation energy, both per day and per project. And since this threshold is fake in the sense that it’s higher than the energy required to keep going, it’s ok to tell yourself a lie of corresponding magnitude to get over it.</p><p>开始工作可能比继续工作更难，你经常需要欺骗自己，才能越过初始门槛。不要担心，这是工作的性质，不是你性格中的缺陷。工作需要一种「激活能量」，每天，以及每个项目都有，但因为它比继续前进所需的能量高，这个门槛可以被视作是假的，所以可以对自己适度撒个谎来越过它。</p><p>It’s usually a mistake to lie to yourself if you want to do great work, but this is one of the rare cases where it isn’t. When I’m reluctant to start work in the morning, I often trick myself by saying “I’ll just read over what I’ve got so far.” Five minutes later I’ve found something that seems mistaken or incomplete, and I’m off.</p><p>如果我们想取得伟大成就，对自己撒谎通常是错的，但有少数几个例外。每当早上不愿意开始工作时，我经常欺骗自己说：「我只是看看自己到目前为止做了什么。」五分钟后，我发现了一些看起来错误或不完整的东西，就开始工作了。</p><p>Similar techniques work for starting new projects. It’s ok to lie to yourself about how much work a project will entail, for example. Lots of great things began with someone saying “How hard could it be?”</p><p>类似的技巧适用于开始新的项目。在预估项目所需的工作量时，向自己撒谎是可以的，<strong>许多伟大事业都是从某人说「这有什么难的？」开始的</strong>。</p><p>This is one case where the young have an advantage. They’re more optimistic, and even though one of the sources of their optimism is ignorance, in this case ignorance can sometimes beat knowledge.</p><p>这是年轻人有优势的例子之一 —— 他们更乐观 —— 尽管他们乐观的部分来源是无知，但在这种情况下，无知有时可以打败渊博。</p><p>Try to finish what you start, though, even if it turns out to be more work than you expected. Finishing things is not just an exercise in tidiness or self-discipline. In many projects a lot of the best work happens in what was meant to be the final stage.</p><p>尽管如此，我们要尽量完成己经开始的事情，即使它比预期的工作量要多很多。完成一件事不仅是整洁或自律的练习，在许多项目中，最佳成就点处于本应是最后阶段的地方。</p><p>Another permissible lie is to exaggerate the importance of what you’re working on, at least in your own mind. If that helps you discover something new, it may turn out not to have been a lie after all. [7]</p><p>另一个可以撒谎的点是在自己心中夸大我们正在做的事情的重要性。如果这有助于我们发现新的东西，那么它可能最终并不是一个谎言。[7]</p><p>Since there are two senses of starting work — per day and per project — there are also two forms of procrastination. Per-project procrastination is far the more dangerous. You put off starting that ambitious project from year to year because the time isn’t quite right. When you’re procrastinating in units of years, you can get a lot not done. [8]</p><p>由于「开始工作」的有两种定义 —— 每天和每个项目 —— 所以也有两种形式的拖延，<strong>以项目为单位的拖延远比以天为单位的拖延更危险</strong> —— 我们把开始那个雄心勃勃的项目推迟了一年又一年，因为时间还不够 —— 当以年为单位计算时，我们可以做很多事情。[8]</p><p>One reason per-project procrastination is so dangerous is that it usually camouflages itself as work. You’re not just sitting around doing nothing; you’re working industriously on something else. So per-project procrastination doesn’t set off the alarms that per-day procrastination does. You’re too busy to notice it.</p><p>项目的拖延之所以如此危险，其中一个原因是它通常会伪装成「工作」。我们不是坐在那里什么都不做，而是在其他事情上勤奋地工作。所以，项目的拖延不会像日期的拖延一样，触发拖延的警报 —— 我们太忙了，注意不到它。</p><p>The way to beat it is to stop occasionally and ask yourself: Am I working on what I most want to work on? When you’re young it’s ok if the answer is sometimes no, but this gets increasingly dangerous as you get older. [9]</p><p>**打败项目拖延的方法是偶尔停下来问自己：「我正在做我最想做的事吗？」**年轻的时候，如果答案有时是「不」，那是可以的，但随着年龄的增长，这会变得越来越危险。[9]</p><p>Great work usually entails spending what would seem to most people an unreasonable amount of time on a problem. You can’t think of this time as a cost, or it will seem too high. You have to find the work sufficiently engaging as it’s happening.</p><p>**杰出的成就通常需要我们在一个问题上花费大多数人认为超出了合理范围的大量时间。**我们不能把这个时间看作是成本，否则它会显得太高，我们必须在工作过程中找到足够的吸引力。</p><p>There may be some jobs where you have to work diligently for years at things you hate before you get to the good part, but this is not how great work happens. Great work happens by focusing consistently on something you’re genuinely interested in. When you pause to take stock, you’re surprised how far you’ve come.</p><p>有一些工作，我们可能必须在自己讨厌的事情上努力工作数年，才能接近喜欢的部分，但这不是杰出成就产生的方式，杰出的成就是通过持续关注自己真正感兴趣的事情来实现的 —— 当我们停下来盘点时，会惊讶于自己已经走了多远。</p><p>The reason we’re surprised is that we underestimate the cumulative effect of work. Writing a page a day doesn’t sound like much, but if you do it every day you’ll write a book a year. That’s the key: consistency. People who do great things don’t get a lot done every day. They get something done, rather than nothing.</p><p>我们往往会低估工作的累积效应。每天写一页字不算什么，但如果我们每天都这样做，一年就能写一本书 —— <strong>这就是关键：一致性</strong> —— 取得杰出成就的人并不是每天都做很多事情，他们只做一些事情，而不是什么都不做。</p><p>If you do work that compounds, you’ll get exponential growth. Most people who do this do it unconsciously, but it’s worth stopping to think about. Learning, for example, is an instance of this phenomenon: the more you learn about something, the easier it is to learn more. Growing an audience is another: the more fans you have, the more new fans they’ll bring you.</p><p>**如果我们做的工作有叠加效应，那么我们就会收获指数增长，**大多数在做此类工作的人都是无意识的，但这值得我们停下来认真思考。例如，学习就是这种现象的一个例子：我们对某件事了解得越多，学习更多的事情就越容易。「观众」的增长也是如此：我们的粉丝越多，他们就会为我们带来更多的新粉丝。</p><p>The trouble with exponential growth is that the curve feels flat in the beginning. It isn’t; it’s still a wonderful exponential curve. But we can’t grasp that intuitively, so we underrate exponential growth in its early stages.</p><p>指数增长的问题在于，曲线在开始时给人的感觉很平。但它不是，它仍然是一个美妙的指数曲线，只是我们无法直观地理解这一点，所以我们低估了指数增长的早期阶段。</p><p>Something that grows exponentially can become so valuable that it’s worth making an extraordinary effort to get it started. But since we underrate exponential growth early on, this too is mostly done unconsciously: people push through the initial, unrewarding phase of learning something new because they know from experience that learning new things always takes an initial push, or they grow their audience one fan at a time because they have nothing better to do. If people consciously realized they could invest in exponential growth, many more would do it.</p><p>一件可以指数增长的事可以变得非常有价值，值得我们付出特别的努力去启动。但由于我们在早期低估了指数增长，这也主要是无意识地完成的：人们在学习新事物的初始且无回报的阶段中坚持下去，因为他们从经验中知道学习新事物总是需要一个初始的推动力，或者他们一个一个地增加他们的「观众」，因为他们没有更好的事可做 —— 如果人们意识到他们可以投资于指数增长，会有更多的人去做。</p><p>Work doesn’t just happen when you’re trying to. There’s a kind of undirected thinking you do when walking or taking a shower or lying in bed that can be very powerful. By letting your mind wander a little, you’ll often solve problems you were unable to solve by frontal attack.</p><p>工作不仅仅在我们努力时发生的。当我们散步、洗澡或躺在床上时，会进行一种无明确目标的思考，这种思考可能非常有力量。<strong>通过让思绪稍微漫游一下，我们经常能够解决那些无法通过正面攻击解决的问题</strong>。</p><p>You have to be working hard in the normal way to benefit from this phenomenon, though. You can’t just walk around daydreaming. The daydreaming has to be interleaved with deliberate work that feeds it questions. [10]</p><p>然而，我们必须是在以正确的方式努力工作前提下，才能从这种现象中获益。我们不能只是四处游荡做白日梦。这种漫无目的的思考必须与有意识的工作交替进行，工作会引导我们思考问题。[10]</p><p>Everyone knows to avoid distractions at work, but it’s also important to avoid them in the other half of the cycle. When you let your mind wander, it wanders to whatever you care about most at that moment. So avoid the kind of distraction that pushes your work out of the top spot, or you’ll waste this valuable type of thinking on the distraction instead. (Exception: Don’t avoid love.)</p><p>每个人都知道在工作时要避免分心，但在周期的另一半避免分心也很重要。每当我们的思绪发散时，它会漫游向我们那一刻最关心的事情上。所以，要避免让会将工作挤出首位的事分散自己的注意力，否则我们会把这种宝贵的思考方式用在分心上（例外情况：不要回避爱情！）。</p><p>Consciously cultivate your taste in the work done in your field. Until you know which is the best and what makes it so, you don’t know what you’re aiming for.</p><p>**有意识地培养对自己领域工作的品味。**除非我们知道什么是最好的，以及是什么使它成为最好的，否则我们并不知道自己在追求什么。</p><p>And that is what you’re aiming for, because if you don’t try to be the best, you won’t even be good. This observation has been made by so many people in so many different fields that it might be worth thinking about why it’s true. </p><ul><li><p>It could be because ambition is a phenomenon where almost all the error is in one direction — where almost all the shells that miss the target miss by falling short. </p></li><li><p>Or it could be because ambition to be the best is a qualitatively different thing from ambition to be good. </p></li><li><p>Or maybe being good is simply too vague a standard.</p></li></ul><p>Probably all three are true. [11]</p><p>这就是我们所应追求的，因为如果我们不努力成为最好的，我们甚至都做不好。这一观察已经被许多不同领域的人指出了，所以这可能值得我们思考一下为什么会这样：</p><ol><li>可能是因为实现雄心壮志的途中有这样一种现象，几乎所有的错误都偏向一方 —— <strong>几乎所有未击中目标的炮弹都是落得不够远；</strong></li><li>可能是因为追求做到最好的雄心壮志与追求做好的抱负有着质的不同；</li><li>可能与「最好」不同，「好」只是一个过于模糊的标准。</li></ol><p>—— 这三个可能都是真的。[11]</p><p>Fortunately there’s a kind of economy of scale here. Though it might seem like you’d be taking on a heavy burden by trying to be the best, in practice you often end up net ahead. It’s exciting, and also strangely liberating. It simplifies things. In some ways it’s easier to try to be the best than to try merely to be good.</p><p>幸运的是，这里也存在规模经济。虽然努力做到最好可能看起来会为我们增加很大的负担，但实际上我们经常会得到净收益。这是令人兴奋的，也是一种奇妙的解放，事情被简化了 —— 在某些方面，努力做到最好比仅仅努力做好更容易。</p><p>One way to aim high is to try to make something that people will care about in a hundred years. Not because their opinions matter more than your contemporaries’, but because something that still seems good in a hundred years is more likely to be genuinely good.</p><p>追求高目标的方法之一是试图创造一些人们在一百年后还会关心的东西。并不是因为他们的观点比我们同时代的人更重要，而是因为<strong>一百年后仍然看起来不错的东西更有可能是真正好的东西。</strong></p><h3 id="五、真诚的表达自己与面对问题"><a href="#五、真诚的表达自己与面对问题" class="headerlink" title="五、真诚的表达自己与面对问题"></a>五、真诚的表达自己与面对问题</h3><p>Don’t try to work in a distinctive style. Just try to do the best job you can; you won’t be able to help doing it in a distinctive way.</p><p><strong>不要刻意尝试标新立异的工作风格</strong>，当你专注于把工作做到最好的时候，你很自然的会发现一条与众不同的路。</p><p>Style is doing things in a distinctive way without trying to. Trying to is affectation.</p><p>风格是在不刻意为之的情况下以独特的方式做事，刻意为之则是矫饰。</p><p>Affectation is in effect to pretend that someone other than you is doing the work. You adopt an impressive but fake persona, and while you’re pleased with the impressiveness, the fakeness is what shows in the work. [12]</p><p>矫饰实际上是假装工作的人不是自己，我们采用了一个令人印象深刻但虚假的人格。虽然我们可能会为给他人留下深刻印象感到满足，但工作中表现出来的是一种假人格。[12]</p><p>The temptation to be someone else is greatest for the young. They often feel like nobodies. But you never need to worry about that problem, because it’s self-solving if you work on sufficiently ambitious projects. If you succeed at an ambitious project, you’re not a nobody; you’re the person who did it. So just do the work and your identity will take care of itself.</p><p>年轻人最容易受到「成为他人」的诱惑，他们经常自认为是无名小卒。但永远不需要担心这个问题，因为如果我们持续做足够有前景的项目，这个问题就会逐渐自我消解。如果成功地完成了一个伟大的项目，我们就不是无名小卒，而是完成它的人。所以，只要工作，我们的身份就会自己变好。</p><p>“Avoid affectation” is a useful rule so far as it goes, but how would you express this idea positively? How would you say what to be, instead of what not to be? The best answer is earnest. If you’re earnest you avoid not just affectation but a whole set of similar vices.</p><p>「避免矫饰」是个有用的规则，这需要长期坚持，但我们如何用积极的方式表达自己的想法呢？我们如何说出要成为什么，而不是不要成为什么呢？最好的答案是真诚。如果我们是真诚的，那就不仅可以避免矫饰，还可以避免一整套类似的恶习。</p><p>The core of being earnest is being intellectually honest. We’re taught as children to be honest as an unselfish virtue — as a kind of sacrifice. But in fact it’s a source of power too. To see new ideas, you need an exceptionally sharp eye for the truth. You’re trying to see more truth than others have seen so far. And how can you have a sharp eye for the truth if you’re intellectually dishonest?</p><p>真诚的核心是诚实。我们从小就被教导要诚实，作为一种无私的美德 —— 作为一种牺牲。但事实上，它是一种力量的来源，要看到新的想法，我们需要对真相异常敏锐。假设我们正在试图看到比其他人到目前为止看到的更多的真相，如果我们在智力上不诚实，又怎么能对真相有敏锐的眼光呢？</p><p>One way to avoid intellectual dishonesty is to maintain a slight positive pressure in the opposite direction. Be aggressively willing to admit that you’re mistaken. Once you’ve admitted you were mistaken about something, you’re free. Till then you have to carry it. [13]</p><p>保持智力诚实（Intellectual Honesty）的一种方法是保持轻微的正压。愿意积极承认自己的错误 —— 一旦我们承认自己在某件事上犯了错误，就自由了 —— 在这之前，我们必须承担它。[13]</p><p>Another more subtle component of earnestness is informality. Informality is much more important than its grammatically negative name implies. It’s not merely the absence of something. It means focusing on what matters instead of what doesn’t.</p><p>真诚的另一个更微妙的组成部分是不拘小节。「不拘小节」比它的语法层面所暗示的要重要得多，<strong>它不仅仅意味着少做某些事，还意味着关注重要的事情，而不是无关的事情。</strong></p><p>What formality and affectation have in common is that as well as doing the work, you’re trying to seem a certain way as you’re doing it. But any energy that goes into how you seem comes out of being good. That’s one reason nerds have an advantage in doing great work: they expend little effort on seeming anything. In fact that’s basically the definition of a nerd.</p><p>拘泥于形式和矫饰的共同点是，你在做工作的同时，也试图以某种方式伪装。但任何投入到「表面功夫」中能量都会被从做重要的事情中分走。这就是为什么书呆子在做伟大的工作上有优势的一个原因：他们在表面功夫上花费的努力很小。事实上，这基本上就是书呆子的定义。</p><p>Nerds have a kind of innocent boldness that’s exactly what you need in doing great work. It’s not learned; it’s preserved from childhood. So hold onto it. Be the one who puts things out there rather than the one who sits back and offers sophisticated-sounding criticisms of them. “It’s easy to criticize” is true in the most literal sense, and the route to great work is never easy.</p><p>书呆子有一种天真的大胆，这正是你在做伟大的工作时所需要的。它不是学来的；它是从童年保留下来的，所以要保持它。<strong>成为那个把事情做出来的人，而不是坐在背后提供复杂的批评的人。</strong>「批评很容易」在最字面的意义上是真的，而取得伟大成就的路永远不容易。</p><p>There may be some jobs where it’s an advantage to be cynical and pessimistic, but if you want to do great work it’s an advantage to be optimistic, even though that means you’ll risk looking like a fool sometimes. There’s an old tradition of doing the opposite. The Old Testament says it’s better to keep quiet lest you look like a fool. But that’s advice for seeming smart. If you actually want to discover new things, it’s better to take the risk of telling people your ideas.</p><p>可能有一些工作，悲观是一个优势，但如果我们想去的杰出成就，乐观是一个优势，即便这意味着我们有时会冒看起来像一个傻瓜的风险。旧传统指导我们做相反的事，《旧约圣经》说：最好保持安静，以免看起来像一个傻瓜 —— 但这是为了看起来聪明的建议，如果我们真的想发现新的东西，最好冒险告诉人们自己的想法。</p><p>Some people are naturally earnest, and with others it takes a conscious effort. Either kind of earnestness will suffice. But I doubt it would be possible to do great work without being earnest. It’s so hard to do even if you are. You don’t have enough margin for error to accommodate the distortions introduced by being affected, intellectually dishonest, orthodox, fashionable, or cool. [14]</p><p>有些人天生就是真诚的，有些人需要有意识的努力，任何一种真诚都足够。但我怀疑，**如果没有真诚，就不可能做出伟大的工作，而且即使我们是真诚的，也很难做到。**我们没有足够的误差边际来容纳被影响、智力上的不诚实、拘泥于形式、流行或酷带来的现实扭曲。[14]</p><p>Great work is consistent not only with who did it, but with itself. It’s usually all of a piece. So if you face a decision in the middle of working on something, ask which choice is more consistent.</p><p>优秀的作品不仅与创作者保持一致，也与作品本身保持一致。通常而言，优秀的作品都是成体系的 —— 所以，如果我们在工作中面临抉择，问问自己哪个选择更有一致性。</p><p>You may have to throw things away and redo them. You won’t necessarily have to, but you have to be willing to. And that can take some effort; when there’s something you need to redo, status quo bias and laziness will combine to keep you in denial about it. To beat this ask: If I’d already made the change, would I want to revert to what I have now?</p><p>我们可能不得不放弃一些事情并重新开始，我们不一定必须这样做，但我们必须愿意这样做，这可能需要一些努力。当我们需要重做一些事情时，对维持现状的倾向性和懒惰会联合起来让我们否认这个想法。为了克服这个问题，问问自己：如果我已经做了改变，我是否想要恢复现在的状态？</p><p>Have the confidence to cut. Don’t keep something that doesn’t fit just because you’re proud of it, or because it cost you a lot of effort.</p><p>**要有放弃的信心与决心。**不要仅仅因为自己为其感到骄傲，或者花费了很多努力，就保留不合适的东西。</p><p>Indeed, in some kinds of work it’s good to strip whatever you’re doing to its essence. The result will be more concentrated; you’ll understand it better; and you won’t be able to lie to yourself about whether there’s anything real there.</p><p>实际上，在某些类型的工作中，层层剥离并探究自己正在做的事情的本质是好的。结果会更加直接明了，我们会更好地理解它，也将无法对自己撒谎，需要直面其中是否有真正重要的东西。</p><p>Mathematical elegance may sound like a mere metaphor, drawn from the arts. That’s what I thought when I first heard the term “elegant” applied to a proof. But now I suspect it’s conceptually prior — that the main ingredient in artistic elegance is mathematical elegance. At any rate it’s a useful standard well beyond math.</p><p>数学优雅（Mathematical Elegance）可能听起来像是一个纯粹的隐喻，来自艺术 —— 当我第一次听到用「优雅」这个词用来形容一个证明时，我就是这么想的。但现在我倾向于它在概念上是先行的 —— 艺术优雅的主要成分是数学优雅 —— 无论如何，这都是一个超越数学的有用标准。</p><p>Elegance can be a long-term bet, though. Laborious solutions will often have more prestige in the short term. They cost a lot of effort and they’re hard to understand, both of which impress people, at least temporarily.</p><p>然而，**优雅是一个长期的投注。**费力的解决方案在短期内通常会有更高的声望，它们需要大量的努力，而且很难理解，这两点都会让人印象深刻，但也许是暂时的。</p><p>Whereas some of the very best work will seem like it took comparatively little effort, because it was in a sense already there. It didn’t have to be built, just seen. It’s a very good sign when it’s hard to say whether you’re creating something or discovering it.</p><p>相反，完成一些最好的作品看起来好像只花费了相对较少的努力，因为它在某种意义上已经存在了，它不需要被创造，只需要被看到。<strong>当我们很难说自己是在创造某物还是在发现它时，这是一个非常好的迹象。</strong></p><p>When you’re doing work that could be seen as either creation or discovery, err on the side of discovery. Try thinking of yourself as a mere conduit through which the ideas take their natural shape.</p><p>当我们正在做的工作可以被看作是创造或发现时，请偏向于发现。试着把自己想象成一个管道，通过它，想法可以自然地形成。</p><p>(Strangely enough, one exception is the problem of choosing a problem to work on. This is usually seen as search, but in the best case it’s more like creating something. In the best case you create the field in the process of exploring it.)</p><p>（奇怪的是，选择要解决的问题这件事是一个例外。这通常被视为搜索，但在最好的情况下，它更像是创造一些东西，我们在探索过程中创造了某个领域。）</p><p>Similarly, if you’re trying to build a powerful tool, make it gratuitously unrestrictive. A powerful tool almost by definition will be used in ways you didn’t expect, so err on the side of eliminating restrictions, even if you don’t know what the benefit will be.</p><p>同样，如果我们试图构建一个强大的工具，那要让它尽可能地无限制。一个强大的工具会以我们没有预料到的方式被使用 —— 这几乎可以算作强大工具的定义，所以要倾向于消除限制，即使你不知道这样做会有什么好处。</p><p>Great work will often be tool-like in the sense of being something others build on. So it’s a good sign if you’re creating ideas that others could use, or exposing questions that others could answer. The best ideas have implications in many different areas.</p><p>伟大的作品通常会像工具一样，其他人可以基于其再构建作品。所以，如果我们正在创造其他人可以使用的想法，或者揭示出其他人可以回答的问题，那么这是一个好的迹象 —— 最好的想法在许多不同的领域都有影响。</p><p>If you express your ideas in the most general form, they’ll be truer than you intended.</p><p><strong>如果我们以最通用的形式表达自己的想法，它们会比我们预期中的更真实。</strong></p><h3 id="六、打破常规者人恒敬之"><a href="#六、打破常规者人恒敬之" class="headerlink" title="六、打破常规者人恒敬之"></a>六、打破常规者人恒敬之</h3><p>True by itself is not enough, of course. Great ideas have to be true and new. And it takes a certain amount of ability to see new ideas even once you’ve learned enough to get to one of the frontiers of knowledge.</p><p>当然，仅仅真实是不够的，<strong>伟大的想法必须是真实且新颖的</strong>。并且，即使我们已经学到足够的知识来到达知识的前沿，看到新的想法也需要一定的能力。</p><p>In English we give this ability names like originality, creativity, and imagination. And it seems reasonable to give it a separate name, because it does seem to some extent a separate skill. It’s possible to have a great deal of ability in other respects — to have a great deal of what’s often called technical ability — and yet not have much of this.</p><p>在英语中，我们给这种能力取了如原创性、创造性和想象力等名字。给它一个单独的名字似乎是合理的，因为在某种程度上它似乎是一个单独的技能。我们可能在其他方面有很高的能力 —— 很高的「技术性能力」—— 但可能没有这么多看到新想法的能力。</p><p>I’ve never liked the term “creative process.” It seems misleading. Originality isn’t a process, but a habit of mind. Original thinkers throw off new ideas about whatever they focus on, like an angle grinder throwing off sparks. They can’t help it.</p><p>我从未喜欢过「创新过程」这个词，它似乎有些误导性。原创不是一个过程，而是一种思维习惯。原创的思想家，无论他们关注的是什么，都会产生新的想法，就像角磨机抛出火花一样，没有人可以控制这种现象的发生。</p><p>If the thing they’re focused on is something they don’t understand very well, these new ideas might not be good. One of the most original thinkers I know decided to focus on dating after he got divorced. He knew roughly as much about dating as the average 15 year old, and the results were spectacularly colorful. But to see originality separated from expertise like that made its nature all the more clear.</p><p>如果一个人关注的事情是自己不太理解的事情，这些新的想法可能并不好。我认识的最具原创性的思考者之一在离婚后决定专注于约会，他对约会的了解不甚深入，大约与一般 15 岁的孩子一样，结果好得令人惊讶 —— 看到原创性与专业知识是分离的，它的本质就变得更加清晰。</p><p>I don’t know if it’s possible to cultivate originality, but there are definitely ways to make the most of however much you have. For example, you’re much more likely to have original ideas when you’re working on something. Original ideas don’t come from trying to have original ideas. They come from trying to build or understand something slightly too difficult. [15]</p><p>我不知道原创性是否可以被培养出来，但肯定有方法可以最大限度地利用自己所拥有的。例如，当我们在工作时，更有可能产生原创想法。原创想法并不来自于刻意的尝试，而是来自于尝试构建或理解稍微困难的东西。[15]</p><p>Talking or writing about the things you’re interested in is a good way to generate new ideas. When you try to put ideas into words, a missing idea creates a sort of vacuum that draws it out of you. Indeed, there’s a kind of thinking that can only be done by writing.</p><p>讨论或写作我们感兴趣的事情是产生新想法的好途径。当我们试图把想法用词语表达出来时，缺失的想法会产生一种「吸引力」，把新想法从自己身上「吸引」出来。实际上，有一种思考只能通过写作来完成。</p><p>Changing your context can help. If you visit a new place, you’ll often find you have new ideas there. The journey itself often dislodges them. But you may not have to go far to get this benefit. Sometimes it’s enough just to go for a walk. [16]</p><p>改变我们所处的环境可能有所帮助。如果我们到访一个新地方*（这里地方的定义是模糊的，不特指物理坐标）*，会发现自己在那里会产生新想法，旅行本身通常会使灵感涌现。但是，我们可能不必走得很远就能体会到这种妙处 —— 有时候，只需要去散步就足够了。[16]</p><p>It also helps to travel in topic space. You’ll have more new ideas if you explore lots of different topics, partly because it gives the angle grinder more surface area to work on, and partly because analogies are an especially fruitful source of new ideas.</p><p>了解不同的专业领域也会有所帮助。如果我们探索了许多不同的领域，会有更多新想法，这就像是给了角磨机更大的工作表面，另一部分原因则是，类比是新想法的丰富的来源。</p><p>Don’t divide your attention evenly between many topics though, or you’ll spread yourself too thin. You want to distribute it according to something more like a power law. [17] Be professionally curious about a few topics and idly curious about many more.</p><p>不过，**不要把注意力平均分配到许多领域上，**否则会分散得太薄。我们应该根据幂律分布的规则来分配它 [17] —— <strong>对少数几个主题「专业地好奇」，对更多的主题「随便地好奇」。</strong></p><p>Curiosity and originality are closely related. Curiosity feeds originality by giving it new things to work on. But the relationship is closer than that. Curiosity is itself a kind of originality; it’s roughly to questions what originality is to answers. And since questions at their best are a big component of answers, curiosity at its best is a creative force.</p><p>好奇心和原创性密切相关。表面上看，好奇心通过给原创性提供新事物来喂养它，但两者之间的关系比这更紧密 —— 好奇心本身就是一种原创性，它大致可以被视为问题的原创性，和答案的原创性一样。而且，既然在最理想的情况下，问题在答案中的权重很高，那么同样在最理想的情况下，好奇心就是创造力的一种。</p><p>Having new ideas is a strange game, because it usually consists of seeing things that were right under your nose. Once you’ve seen a new idea, it tends to seem obvious. Why did no one think of this before?</p><p>拥有新想法是一种奇怪的游戏，因为通常它还包括看到那些就在我们眼前的东西。一旦我们看到一个新的想法，它往往显得很明显 —— 为什么之前没有人想到这个？</p><p>When an idea seems simultaneously novel and obvious, it’s probably a good one.</p><p><strong>当一个想法看起来既新颖又显而易见时，它可能是个好主意。</strong></p><p>Seeing something obvious sounds easy. And yet empirically having new ideas is hard. What’s the source of this apparent contradiction? It’s that seeing the new idea usually requires you to change the way you look at the world. We see the world through models that both help and constrain us. When you fix a broken model, new ideas become obvious. But noticing and fixing a broken model is hard. That’s how new ideas can be both obvious and yet hard to discover: they’re easy to see after you do something hard.</p><p>看到显而易见的东西听起来很容易，然而，从经验上看，产生新想法是困难的，这个明显矛盾的源头是什么呢？那就是看到新的想法通常需要我们改变看世界的方式。我们通过模型看世界，这些模型既帮助着我们，也限制着我们，在修复有问题的世界模型的过程中，新的想法会变得显而易见，但注意到并修复一个有问题的模型是困难的，这就是新的想法既明显又难以发现的原因。在你做了一些困难的事情之后，它们就容易被看到。</p><p>One way to discover broken models is to be stricter than other people. Broken models of the world leave a trail of clues where they bash against reality. Most people don’t want to see these clues. It would be an understatement to say that they’re attached to their current model; it’s what they think in; so they’ll tend to ignore the trail of clues left by its breakage, however conspicuous it may seem in retrospect.</p><p>发现有问题的世界模型的方法之一是比其他人更严谨。有问题的模型在与现实发生冲突时会留下一些迹象，但大多数人不想看到这些迹象。保守的说法是，人们倾向于依赖于他们当前的模型，这就是他们的思维方式，所以他们倾向于忽略模型出现问题时留下的线索，无论这在反思中看起来多么明显。</p><p>To find new ideas you have to seize on signs of breakage instead of looking away. That’s what Einstein did. He was able to see the wild implications of Maxwell’s equations not so much because he was looking for new ideas as because he was stricter.</p><p>要找到新的想法，我们必须抓住这些迹象，而不是避而不见。这就是爱因斯坦做的，他能看到麦克斯韦方程的伟大意义，不是因为他在寻找新的想法，而是因为他更严谨。</p><p>The other thing you need is a willingness to break rules. Paradoxical as it sounds, if you want to fix your model of the world, it helps to be the sort of person who’s comfortable breaking rules. From the point of view of the old model, which everyone including you initially shares, the new model usually breaks at least implicit rules.</p><p>**我们所要做的另一件事是愿意打破规则。**虽然这听起来矛盾，但如果我们想修正自己的世界模型，那么成为一个习惯于打破规则的人会有所帮助。从旧模型的观点来看，这个模型通常至少会违反隐含的规则，包括我们自己最初也是这么认为的。</p><p>Few understand the degree of rule-breaking required, because new ideas seem much more conservative once they succeed. They seem perfectly reasonable once you’re using the new model of the world they brought with them. But they didn’t at the time; it took the greater part of a century for the heliocentric model to be generally accepted, even among astronomers, because it felt so wrong.</p><p>很少有人了解打破规则所需的程度，因为新的想法在成功后看起来更保守。一旦我们使用了新的世界模型，它们会看起来完全合理，但开始的时候并不是这样的，地心模型在天文学家中被普遍接受甚至都花了近一个世纪，在这期间，所有人都觉得它错的离谱。</p><p>Indeed, if you think about it, a good new idea has to seem bad to most people, or someone would have already explored it. So what you’re looking for is ideas that seem crazy, but the right kind of crazy. How do you recognize these? You can’t with certainty. Often ideas that seem bad are bad. But ideas that are the right kind of crazy tend to be exciting; they’re rich in implications; whereas ideas that are merely bad tend to be depressing.</p><p>实际上，如果我们思考一下会发现，一个好的新想法必须对大多数人来说看起来是坏的，否则就已经有人探索过了。所以**我们在寻找的是那些看起来疯狂，但是正确类别的疯狂想法。**我们如何识别他们呢？不能确定。通常看起来不好的想法就是不好的，但是，正确类别的疯狂想法往往是令人兴奋的，它们富有意蕴，而单纯的坏想法往往会让人感到沮丧。</p><p>There are two ways to be comfortable breaking rules: to enjoy breaking them, and to be indifferent to them. I call these two cases being aggressively and passively independent-minded.</p><p><strong>有两种方式可以让我们自然而然地打破规则：享受打破规则本身，或干脆无视规则 —— 我将它们分别称为积极和被动独立思考。</strong></p><p>The aggressively independent-minded are the naughty ones. Rules don’t merely fail to stop them; breaking rules gives them additional energy. For this sort of person, delight at the sheer audacity of a project sometimes supplies enough activation energy to get it started.</p><p>积极独立思考的是那些叛逆的人。规则不仅无法阻止他们，打破规则还会给他们额外的能量。对这类人来说，一个项目的纯粹胆大有时就可以提供足够的「激活能量」让它启动。</p><p>The other way to break rules is not to care about them, or perhaps even to know they exist. This is why novices and outsiders often make new discoveries; their ignorance of a field’s assumptions acts as a source of temporary passive independent-mindedness. Aspies also seem to have a kind of immunity to conventional beliefs. Several I know say that this helps them to have new ideas.</p><p>打破规则的另一种方式是不关心甚至不知道它们的存在 —— 这就是为什么新手和外行人经常做出新发现，他们对所在领域既有假设的无知可以作为一种暂时的被动独立思考的来源。自闭症患者似乎也对常规信条有着免疫力，我认识的几个人说这帮助他们有新的想法。</p><p>Strictness plus rule-breaking sounds like a strange combination. In popular culture they’re opposed. But popular culture has a broken model in this respect. It implicitly assumes that issues are trivial ones, and in trivial matters strictness and rule-breaking are opposed. But in questions that really matter, only rule-breakers can be truly strict.</p><p>「严谨 + 打破规则」听起来像是一个奇怪的组合。在主流文化中，他们是对立的，但在这方面，主流文化的模型是有问题的，它默认假设问题都是琐碎的，而在琐碎的事情中，严谨和打破规则确实是对立的，但<strong>在真正重要的问题中，只有打破规则的人才是真正严谨的。</strong></p><p>An overlooked idea often doesn’t lose till the semifinals. You do see it, subconsciously, but then another part of your subconscious shoots it down because it would be too weird, too risky, too much work, too controversial. This suggests an exciting possibility: if you could turn off such filters, you could see more new ideas.</p><p>一个被主流文化忽视的想法通常直到半决赛才败下阵来。我们在潜意识中看到了它，然而潜意识的另一部分会击败它，因为它太奇怪、太冒险、太麻烦、太有争议。但这隐含了一个令人兴奋的可能性：我们如果能关闭这些过滤器，就能看到更多的新想法。</p><p>One way to do that is to ask what would be good ideas for someone else to explore. Then your subconscious won’t shoot them down to protect you.</p><p>做到这一点的方式之一是问自己：什么是别人认为的好想法？这样我们的潜意识就不会为了自我保护而否决他们。</p><p>You could also discover overlooked ideas by working in the other direction: by starting from what’s obscuring them. Every cherished but mistaken principle is surrounded by a dead zone of valuable ideas that are unexplored because they contradict it.</p><p>我们也可以从掩盖它们的事物着手，来发现被忽视的想法。每个被珍视的错误原则周围，都存在一片有价值但因为它们与原则相矛盾而未被探索的想法的栖息地。</p><p>Religions are collections of cherished but mistaken principles. So anything that can be described either literally or metaphorically as a religion will have valuable unexplored ideas in its shadow. Copernicus and Darwin both made discoveries of this type. [18]</p><p>宗教是被珍视但错误原则的集合。所以无论是字面意义上或隐喻地，任何被描述为宗教的东西的阴影之下都存在有价值的但未被探索的想法，哥白尼和达尔文都做出了此类发现。[18]</p><p>What are people in your field religious about, in the sense of being too attached to some principle that might not be as self-evident as they think? What becomes possible if you discard it?</p><p><strong>在我们所在的领域，人们对什么规则过分依赖，以至于它们可能不像公认的那般可以自证其是？如果我们抛弃这个原则，会有什么可能性？</strong></p><p>People show much more originality in solving problems than in deciding which problems to solve. Even the smartest can be surprisingly conservative when deciding what to work on. People who’d never dream of being fashionable in any other way get sucked into working on fashionable problems.</p><p>人们在解决问题上所表现出的原创性远超在决定要解决哪些问题上。即使是最聪明的人，在决定要做什么时也可能惊人地保守，那些在其他任何方面都不会想要赶时髦的人也会被吸入到处理「时兴问题」的漩涡中。</p><p>One reason people are more conservative when choosing problems than solutions is that problems are bigger bets. A problem could occupy you for years, while exploring a solution might only take days. But even so I think most people are too conservative. They’re not merely responding to risk, but to fashion as well. Unfashionable problems are undervalued.</p><p>问题需要我们下大赌注，这也是人们选择问题比解决问题更保守的原因之一。一个问题可能伴随我们好几年的时间，而探索一个解决方案可能只需要几天。但即便如此，我认为大多数人都过于保守，他们不仅仅是在回避风险，也在迎合潮流，不流行的问题被低估了。</p><p>One of the most interesting kinds of unfashionable problem is the problem that people think has been fully explored, but hasn’t. Great work often takes something that already exists and shows its latent potential. Durer and Watt both did this. So if you’re interested in a field that others think is tapped out, don’t let their skepticism deter you. People are often wrong about this.</p><p>最有趣的一类不流行问题是那些人们认为已经完全探索过，但实际上并没有的。**杰出的成就往往源于已经存在的东西，但问题发现者深入探索并展现了其更多潜力，**杜勒尔和瓦特都做到了这一点。所以，如果我们对别人认为已经被充分探索的领域感兴趣，不要让他们的怀疑阻挡我们，人们往往会在这方面犯错。</p><p>Working on an unfashionable problem can be very pleasing. There’s no hype or hurry. Opportunists and critics are both occupied elsewhere. The existing work often has an old-school solidity. And there’s a satisfying sense of economy in cultivating ideas that would otherwise be wasted.</p><p>解决不流行的问题可能会非常愉快，工作过程中没有炒作或忙慌。机会主义者和批评者都在别处忙碌，这时我们的工作往往有一种气定神闲的稳定，在努力「培育」这些「否则会被浪费」的想法时，有一种令人满足的经济感。</p><p>But the most common type of overlooked problem is not explicitly unfashionable in the sense of being out of fashion. It just doesn’t seem to matter as much as it actually does. How do you find these? By being self-indulgent — by letting your curiosity have its way, and tuning out, at least temporarily, the little voice in your head that says you should only be working on “important” problems.</p><p>但最常见的被忽视的问题并不是明确地不流行，而是它们并未过时，只是似乎没有它实际上那么重要。我们怎么找到这些呢？通过自我放纵 —— 通过让自己的好奇心有其自由发挥的空间，至少暂时地屏蔽自己脑中那个说我们只应该在「重要」问题上工作的小声音。</p><p>You do need to work on important problems, but almost everyone is too conservative about what counts as one. And if there’s an important but overlooked problem in your neighborhood, it’s probably already on your subconscious radar screen. So try asking yourself: if you were going to take a break from “serious” work to work on something just because it would be really interesting, what would you do? The answer is probably more important than it seems.</p><p>我们确实需要将精力放在重要的问题上，但几乎每个人在评价什么算重要问题时都过于保守。而且，如果我们周围有一个重要但被忽视的问题，它可能已经在我们的潜意识雷达中了。所以，试着问自己：**如果我要从「严肃」的工作中抽出时间，只是因为这会非常有趣，我会做什么？**答案可能比看起来更重要。</p><p>Originality in choosing problems seems to matter even more than originality in solving them. That’s what distinguishes the people who discover whole new fields. So what might seem to be merely the initial step — deciding what to work on — is in a sense the key to the whole game.</p><p>**选择问题的原创性似乎比解决问题的原创性更重要，这是区分那些发现全新领域的人的关键点。**所以，可能看起来只是初步步骤的东西 —— 决定要做什么 —— 在某种意义上是整个游戏的关键。</p><p>Few grasp this. One of the biggest misconceptions about new ideas is about the ratio of question to answer in their composition. People think big ideas are answers, but often the real insight was in the question.</p><p>很少有人能理解这一点。关于新想法的最大的误解之一是关于他们的组成中问题与答案的比例，人们认为重要的部分是答案，但往往真正的洞察在于问题。</p><p>Part of the reason we underrate questions is the way they’re used in schools. In schools they tend to exist only briefly before being answered, like unstable particles. But a really good question can be much more than that. A really good question is a partial discovery. How do new species arise? Is the force that makes objects fall to earth the same as the one that keeps planets in their orbits? By even asking such questions you were already in excitingly novel territory.</p><p>我们低估问题的一部分原因是学校的教育方式。在学校里，问题往往只在被解决之前存在一段很短的时间，就像不稳定粒子一样。但一个真正好的问题可以是更多的东西，一个真正好的问题是发现的一部分：新物种是如何产生的？让物体向地球坠落的力量和让行星保持在它们轨道上的力量是同一个吗？通过甚至提出这样的问题，我们已经进入了令人兴奋的新领域。</p><p>Unanswered questions can be uncomfortable things to carry around with you. But the more you’re carrying, the greater the chance of noticing a solution — or perhaps even more excitingly, noticing that two unanswered questions are the same.</p><p>未解决的问题与我们如影随形，会让我们感到负担。但我们带着的问题越多，发现解决方案的机会就越大 —— 或者可能更令人兴奋的是，发现两个未回答的问题是同一个。</p><p>Sometimes you carry a question for a long time. Great work often comes from returning to a question you first noticed years before — in your childhood, even — and couldn’t stop thinking about. People talk a lot about the importance of keeping your youthful dreams alive, but it’s just as important to keep your youthful questions alive. [19]</p><p>有时候一个问题会伴随我们很长时间。杰出的成就往往出自我们多年前 —— 甚至我们的童年同期 —— 首次注意到的，而且无法停止思考的问题。人们经常谈论保持自己年轻时梦想活跃的重要性，但保持年轻时问题的活跃同样重要。[19]</p><p>This is one of the places where actual expertise differs most from the popular picture of it. In the popular picture, experts are certain. But actually the more puzzled you are, the better, so long as (a) the things you’re puzzled about matter, and (b) no one else understands them either.</p><p>专业知识的实际形态与大众印象最大的区别之一是，**在大众印象中，专家们是胸有成竹的，但实际上，我们越是困惑，越好，**只要（a）我们困惑的事情是重要的，并且（b）没有其他人也理解它们。</p><p>Think about what’s happening at the moment just before a new idea is discovered. Often someone with sufficient expertise is puzzled about something. Which means that originality consists partly of puzzlement — of confusion! You have to be comfortable enough with the world being full of puzzles that you’re willing to see them, but not so comfortable that you don’t want to solve them. [20]</p><p>想想新想法被发现的那一刻之前所发生的事，通常情况下，是一个具有足够专业知识的人对某事感到困惑，这意味着困惑是原创性的一部分 —— 混乱！我们必须愿意看到世界充满谜团，对此感到舒适，但也不能那么舒适，以至于不想解决它们。[20]</p><p>It’s a great thing to be rich in unanswered questions. And this is one of those situations where the rich get richer, because the best way to acquire new questions is to try answering existing ones. Questions don’t just lead to answers, but also to more questions.</p><p>拥有很多未解答的问题是一件很棒的事。这也是那些富有的人会变得更富的原因之一，<strong>获得新问题的最好方法是尝试回答现有的问题，问题不仅导向答案，而且也导向更多的问题。</strong></p><p>The best questions grow in the answering. You notice a thread protruding from the current paradigm and try pulling on it, and it just gets longer and longer. So don’t require a question to be obviously big before you try answering it. You can rarely predict that. It’s hard enough even to notice the thread, let alone to predict how much will unravel if you pull on it.</p><p>**最好的问题会在被回答的过程中成长。**我们注意到当前范式中一条显眼的线索，并试图拉扯它，它就会变得越来越长。所以，我们在试图回答问题之前，不要苛求问题的「大」是明确的，我们很少能预测到这一点，仅仅注意到线索就已经很难了，更不用说预测如果我们拉扯它，会有多少东西随之而来。</p><p>It’s better to be promiscuously curious — to pull a little bit on a lot of threads, and see what happens. Big things start small. The initial versions of big things were often just experiments, or side projects, or talks, which then grew into something bigger. So start lots of small things.</p><p>最好的方法是保持广泛的好奇心 —— 在许多线索上都稍微拉一拉，看看会发生什么。大事物开始时都很小，它们的初始版本通常只是实验、副项目或者演讲，然后逐渐发展成更大的事物 —— 所以，我们应该开始着手做很多小事情。</p><p>Being prolific is underrated. The more different things you try, the greater the chance of discovering something new. Understand, though, that trying lots of things will mean trying lots of things that don’t work. You can’t have a lot of good ideas without also having a lot of bad ones. [21]</p><p>**高产的作用是被低估的。**我们尝试的事情越多，发现新事物的机会就越大。然而，要知道，尝试很多事也将意味着尝试很多无用的事，我们不能只有很多好主意而没有同样多的坏主意。[21]</p><p>Though it sounds more responsible to begin by studying everything that’s been done before, you’ll learn faster and have more fun by trying stuff. And you’ll understand previous work better when you do look at it. So err on the side of starting. Which is easier when starting means starting small; those two ideas fit together like two puzzle pieces.</p><p>当我们进入一个领域时，虽然从学习前人的工作成果开始听起来更负责任，但通过尝试，我们会学得更快，也会收获更多的乐趣，而当我们去看前人的工作时，也会更好地理解它们。所以，在初始阶段不要害怕犯错，与此同时，这也意味着我们从小事着手更加容易，这两个想法就像两片相邻的拼图片一般契合。</p><p>How do you get from starting small to doing something great? By making successive versions. Great things are almost always made in successive versions. You start with something small and evolve it, and the final version is both cleverer and more ambitious than anything you could have planned.</p><p>我们如何从小事开始做出伟大的事情？通过做有连续性的事。伟大的事业几乎总是在一系列连续的工作中被成就的。我们从一些小事开始，逐渐发展它，最后的版本既比我们可能计划的任何东西更好，也更有想象空间。</p><p>It’s particularly useful to make successive versions when you’re making something for people — to get an initial version in front of them quickly, and then evolve it based on their response.</p><p>当我们为人们做东西时，制作连续的版本特别有用 —— 快速地将初始版本呈现给他们，然后根据他们的反应进行演变。</p><p>Begin by trying the simplest thing that could possibly work. Surprisingly often, it does. If it doesn’t, this will at least get you started.</p><p><strong>试试可能行得通的最简单的东西。出乎意料地，它经常会是有用的，如果没有，至少这会让我们启程。</strong></p><p>Don’t try to cram too much new stuff into any one version. There are names for doing this with the first version (taking too long to ship) and the second (the second system effect), but these are both merely instances of a more general principle.</p><p>不要试图在任何一个版本中塞进太多的新东西。对此有一些对应的名称，对第一个版本来说是呈现（delivery）花费太长时间，对第二个版本来说是第二系统效应，但这些都只是更具一般性原则的例子。</p><p>An early version of a new project will sometimes be dismissed as a toy. It’s a good sign when people do this. That means it has everything a new idea needs except scale, and that tends to follow. [22]</p><p>新项目的早期版本有时会被贬低为玩具。当人们这么做时，这是个好兆头，这意味着它具备新思想所需要的一切，只是缺乏规模，而那往往会随之而来。[22]</p><p>The alternative to starting with something small and evolving it is to plan in advance what you’re going to do. And planning does usually seem the more responsible choice. It sounds more organized to say “we’re going to do x and then y and then z” than “we’re going to try x and see what happens.” And it is more organized; it just doesn’t work as well.</p><p>从小发展的另一种选择是事先计划我们要做的事情。计划通常看起来是更负责任的选择，说「我们要做 x，然后做 y，然后做 z」听起来比「我们要试试 x，看看会发生什么」似乎更有组织，它确实更有组织，只是效果不那么好。</p><p>Planning per se isn’t good. It’s sometimes necessary, but it’s a necessary evil — a response to unforgiving conditions. It’s something you have to do because you’re working with inflexible media, or because you need to coordinate the efforts of a lot of people. If you keep projects small and use flexible media, you don’t have to plan as much, and your designs can evolve instead.</p><p>计划本身并不好，但有时候它是必要的，只是是一种必要的恶 —— 对无情条件的反应。我们必须这么做，因为我们正在使用不灵活的媒介，或者因为我们需要协调很多人的努力，如果我们保持项目小而使用灵活的媒介，就不必计划那么多，我们的设计可以逐步演变。</p><p>Take as much risk as you can afford. In an efficient market, risk is proportionate to reward, so don’t look for certainty, but for a bet with high expected value. If you’re not failing occasionally, you’re probably being too conservative.</p><p>尽可能承担我们负担得起的风险。**在有效市场中，风险与回报成比例，所以不要寻求确定性，而要寻找高期望价值的赌注。**如果我们不失败，偶尔可能是因为过于保守。</p><p>Though conservatism is usually associated with the old, it’s the young who tend to make this mistake. Inexperience makes them fear risk, but it’s when you’re young that you can afford the most.</p><p>虽然保守主义通常是老年人的代名词，但年轻人更容易犯这个错误。无经验让他们害怕风险，但实际上，我们年轻的时候承受得起的风险最大。</p><p>Even a project that fails can be valuable. In the process of working on it, you’ll have crossed territory few others have seen, and encountered questions few others have asked. And there’s probably no better source of questions than the ones you encounter in trying to do something slightly too hard.</p><p>即使一个项目失败了，也可以是有价值的。因为在处理它的过程中，我们会穿过很少有人见过的领域，遇到很少有人提出的问题。<strong>试图做一些稍微难一点的事情，在这个过程中遇到的问题可能是全新问题的最好来源。</strong></p><p>Use the advantages of youth when you have them, and the advantages of age once you have those. The advantages of youth are energy, time, optimism, and freedom. The advantages of age are knowledge, efficiency, money, and power. With effort you can acquire some of the latter when young and keep some of the former when old.</p><p>在我们有年轻人的优势时，使用它们，一旦我们有了有经验的优势，就使用那些。<strong>年轻人的优势是精力、时间、乐观和自由，有经验的优势是知识、效率、金钱和权力 —— 努力工作，我们可以在年轻时获取一些后者，并在经验渐长时保持一些前者。</strong></p><p>The old also have the advantage of knowing which advantages they have. The young often have them without realizing it. The biggest is probably time. The young have no idea how rich they are in time. The best way to turn this time to advantage is to use it in slightly frivolous ways: to learn about something you don’t need to know about, just out of curiosity, or to try building something just because it would be cool, or to become freakishly good at something.</p><p>有经验的人的另一个优势是知道自己有哪些优势。年轻人经常意识不到自己所拥有的优势 —— 最大的可能性来自时间，而年轻人对他们在时间上的富足没有任何概念。利用这个时间的最佳方式是以「略微任性」的方式来使用它：只是出于好奇心而去学习我们不需要知道的东西，或者只是因为一件事很酷而试图去建造一些东西，或者让自己变得非常擅长某事。</p><p>That “slightly” is an important qualification. Spend time lavishly when you’re young, but don’t simply waste it. There’s a big difference between doing something you worry might be a waste of time and doing something you know for sure will be. The former is at least a bet, and possibly a better one than you think. [23]</p><p>「略微」是一个重要的修饰词。当我们年轻的时候，可以挥霍时间，但不要简单地浪费它。做一些我们「担心可能是」浪费时间的事情和「确定会」浪费时间的事情之间有很大的区别 —— 前者至少是一次赌注，结果可能比我们认为的更好。[23]</p><p>The most subtle advantage of youth, or more precisely of inexperience, is that you’re seeing everything with fresh eyes. When your brain embraces an idea for the first time, sometimes the two don’t fit together perfectly. Usually the problem is with your brain, but occasionally it’s with the idea. A piece of it sticks out awkwardly and jabs you when you think about it. People who are used to the idea have learned to ignore it, but you have the opportunity not to. [24]</p><p><strong>年轻，或者说无经验的最微妙的优势，就是我们用全新的眼光看待一切</strong>。当我们的大脑第一次接受一个想法时，有时两者并不完全匹配，但通常问题出在我们的大脑上，偶尔在想法上。想法中的一部分突兀地冒出来，在我们思考时刺痛自己，习惯了这个感觉的人已经学会忽视它，但我们有机会不这样做。[24]</p><p>So when you’re learning about something for the first time, pay attention to things that seem wrong or missing. You’ll be tempted to ignore them, since there’s a 99% chance the problem is with you. And you may have to set aside your misgivings temporarily to keep progressing. But don’t forget about them. When you’ve gotten further into the subject, come back and check if they’re still there. If they’re still viable in the light of your present knowledge, they probably represent an undiscovered idea.</p><p>所以，当我们第一次学习某件事时，要注意那些似乎错误或缺失的东西。我们会被诱惑忽视它们，认为有 99% 的可能性问题在自己身上，并且我们可能必须暂时放下自己的疑虑以继续前进，但不要忘记它们 —— 当我们深入到领域中，再回来检查它们是否依然存在，如果在我们现在的知识水平下，它们仍然是可行的，那么它们可能代表着一个未被发现的想法。</p><p>One of the most valuable kinds of knowledge you get from experience is to know what you don’t have to worry about. The young know all the things that could matter, but not their relative importance. So they worry equally about everything, when they should worry much more about a few things and hardly at all about the rest.</p><p>**经验给我们带来的最有价值的知识之一是知道我们不必担心什么。**年轻人知道所有可能的事，但不知道它们的相对重要性，所以他们对所有事情都一样担忧，而我们应该只对几件事情担忧，对其他的事情几乎不需要担忧。</p><p>But what you don’t know is only half the problem with inexperience. The other half is what you do know that ain’t so. You arrive at adulthood with your head full of nonsense — bad habits you’ve acquired and false things you’ve been taught — and you won’t be able to do great work till you clear away at least the nonsense in the way of whatever type of work you want to do.</p><p>但我们的无知只是缺乏经验问题的其中一半，另一半是我们所熟知的那些错误的东西。我们带着满脑子毫无意义的东西进入成年期 —— 已经养成的坏习惯和被教导的错误观念 —— 在清除了至少是在自己想做的工作的路上的噪声前，我们无法取得杰出成就。</p><p>Much of the nonsense left in your head is left there by schools. We’re so used to schools that we unconsciously treat going to school as identical with learning, but in fact schools have all sorts of strange qualities that warp our ideas about learning and thinking.</p><p>我们头脑中许多无意义的噪声都是学校留下的。我们习惯于学校，以至于我们无意识地将「去学校」当作「学习」，但实际上学校有各种奇怪的价值观，扭曲了我们对学习和思考的观念。</p><p>For example, schools induce passivity. Since you were a small child, there was an authority at the front of the class telling all of you what you had to learn and then measuring whether you did. But neither classes nor tests are intrinsic to learning; they’re just artifacts of the way schools are usually designed.</p><p>例如，学校会引导我们进行被动学习。当我们还是小孩子的时候，课堂便利用其权威告诉我们所有人必须学习什么，然后测试我们是否做到了，但是课堂和考试并不是学习的本质，他们只是学校通常设计的产物。</p><p>The sooner you overcome this passivity, the better. If you’re still in school, try thinking of your education as your project, and your teachers as working for you rather than vice versa. That may seem a stretch, but it’s not merely some weird thought experiment. It’s the truth economically, and in the best case it’s the truth intellectually as well. The best teachers don’t want to be your bosses. They’d prefer it if you pushed ahead, using them as a source of advice, rather than being pulled by them through the material.</p><p>尽快克服这种被动性越好。如果还在学校，那就试着把教育当作自己的项目，老师是在为自己工作，而不是反过来。这可能看起来有些牵强，但这不仅仅是一种特别的思维实验，从经济上说，这是真的，在最好的情况下，从知识上说也是真的，最好的老师不想做我们的老板。他们宁愿我们推进，用他们作为一个建议的来源，而不是被他们通过材料拉动。</p><p>Schools also give you a misleading impression of what work is like. In school they tell you what the problems are, and they’re almost always soluble using no more than you’ve been taught so far. In real life you have to figure out what the problems are, and you often don’t know if they’re soluble at all.</p><p>学校也给我们工作是什么样的误导性印象。在学校里，他们告诉我们问题是什么，而且几乎总是可以使用我们到目前为止学到的东西来解决。在现实生活中，我们必须找出问题是什么，而且往往不知道它们是否可以解决。</p><p>But perhaps the worst thing schools do to you is train you to win by hacking the test. You can’t do great work by doing that. You can’t trick God. So stop looking for that kind of shortcut. The way to beat the system is to focus on problems and solutions that others have overlooked, not to skimp on the work itself.</p><p>但是学校教导我们最糟糕的事情可能就是训练我们通过成为「小镇做题家（hacking the test）」来胜出比赛。我们不能通过这样做取得杰出成就，所以要停止寻找此类捷径，击败系统的方法是专注于其他人忽视的问题和解决方案，而不是偷工减料。</p><p>Don’t think of yourself as dependent on some gatekeeper giving you a “big break.” Even if this were true, the best way to get it would be to focus on doing good work rather than chasing influential people.</p><p><strong>不要依赖某个「看门人」给自己一个「大机会」，即使这是真的，得到它的最好方式是专注于做好工作，而不是追逐有影响力的人。</strong></p><p>And don’t take rejection by committees to heart. The qualities that impress admissions officers and prize committees are quite different from those required to do great work. The decisions of selection committees are only meaningful to the extent that they’re part of a feedback loop, and very few are.</p><p>也不要把「委员会」的拒绝放在心上。让招生官员和管理委员会印象深刻的品质与做出伟大工作所需的品质完全不同。选择管理层的决定只有在它们是反馈循环的一部分时才有意义，而很少有决定是这样的</p><p>People new to a field will often copy existing work. There’s nothing inherently bad about that. There’s no better way to learn how something works than by trying to reproduce it. Nor does copying necessarily make your work unoriginal. Originality is the presence of new ideas, not the absence of old ones.</p><p>在一个领域里，新手经常会复制已有的工作。这本身并没有什么错，试图复制一件事是学习它是如何运作的最好方式，复制并不一定会使我们的工作失去原创性，<strong>原创性在于新想法的产生，而不是旧想法的缺失。</strong></p><p>There’s a good way to copy and a bad way. If you’re going to copy something, do it openly instead of furtively, or worse still, unconsciously. This is what’s meant by the famously misattributed phrase “Great artists steal.” The really dangerous kind of copying, the kind that gives copying a bad name, is the kind that’s done without realizing it, because you’re nothing more than a train running on tracks laid down by someone else. But at the other extreme, copying can be a sign of superiority rather than subordination. [25]</p><p>有好的复制方式，也有坏的。如果我们要复制一些东西，那么公开地去做，而不是偷偷摸摸，或者更糟糕，无意识地去做，这就是那句被误传的名言「伟大的艺术家都是窃贼」的含义。真正危险的复制类型，即给复制带来坏名声的那种，就是我们在不知不觉中做的复制，在这种情况下，我们只不过是在别人铺设的轨道上行驶的列车，但在另一个极端，<strong>复制可以是一种超越的标志，而不是从属关系。</strong>[25]</p><p>In many fields it’s almost inevitable that your early work will be in some sense based on other people’s. Projects rarely arise in a vacuum. They’re usually a reaction to previous work. When you’re first starting out, you don’t have any previous work; if you’re going to react to something, it has to be someone else’s. Once you’re established, you can react to your own. But while the former gets called derivative and the latter doesn’t, structurally the two cases are more similar than they seem.</p><p>在很多领域里，我们早期的工作几乎不可避免地在某种程度上是基于他人的。项目很少是凭空产生的，它们通常是对已有工作的反应：刚开始的时候，我们自己没有任何已有工作，如果我们要对某事有反应，那必然是别人的工作，一旦我们有了稳定的地位，就可以对自己的工作有所反应。尽管前者被认为派生的，后者不被认为派生的，但从结构上看，两种情况比看起来更相似。</p><p>Oddly enough, the very novelty of the most novel ideas sometimes makes them seem at first to be more derivative than they are. New discoveries often have to be conceived initially as variations of existing things, even by their discoverers, because there isn’t yet the conceptual vocabulary to express them.</p><p>有时候，足够新颖的、最新奇的想法一开始看起来更加像派生出来的。在最初构想阶段，新的发现通常需要被视为现有事物的变形，甚至他们的发现者也是这样做的，因为还没有对应的概念以及词汇来描述它们。</p><p>There are definitely some dangers to copying, though. One is that you’ll tend to copy old things — things that were in their day at the frontier of knowledge, but no longer are.</p><p>复制确实有些危险，其中之一是倾向于复制旧东西 —— 那些在过去是知识前沿，但现在已经不再是的东西。</p><p>And when you do copy something, don’t copy every feature of it. Some will make you ridiculous if you do. Don’t copy the manner of an eminent 50 year old professor if you’re 18, for example, or the idiom of a Renaissance poem hundreds of years later.</p><p>当我们复制某件事时，不要复制它的所有特性。如果我们复制某些部分的话，会看起来很荒谬。例如，我们 18 岁时不能复制一位 50 岁杰出教授的举止，或者几百年前文艺复兴时期诗歌的习语。</p><p>Some of the features of things you admire are flaws they succeeded despite. Indeed, the features that are easiest to imitate are the most likely to be the flaws.</p><p>我们所崇拜事物的一些特性是「尽管他们存在缺陷但依然取得成功的」。但事实上，最容易模仿的特性最有可能是缺陷。</p><p>This is particularly true for behavior. Some talented people are jerks, and this sometimes makes it seem to the inexperienced that being a jerk is part of being talented. It isn’t; being talented is merely how they get away with it.</p><p>对于行为尤其如此。一些有才华的人是混蛋，这有时使得无经验的人认为做混蛋是才华的一部分，并不是，才华只是他们得以逃脱的方式。</p><p>One of the most powerful kinds of copying is to copy something from one field into another. History is so full of chance discoveries of this type that it’s probably worth giving chance a hand by deliberately learning about other kinds of work. You can take ideas from quite distant fields if you let them be metaphors.</p><p>最有力的复制类型之一是从一个领域复制到另一个领域。历史上充满了这种类型的偶然发现，所以我们值得有意地去学习其他类型的工作，从而为这类偶然性提供帮助。我们可以从毫不相干的领域中获取想法，如果我们能够让它们成为灵感来源的话。</p><p>Negative examples can be as inspiring as positive ones. In fact you can sometimes learn more from things done badly than from things done well; sometimes it only becomes clear what’s needed when it’s missing.</p><p>负面的例子可能和积极的例子一样启发人。事实上，**我们有时可以从做得糟糕的事情中学到比从做得好的事情中更多的东西，**有时只有当它缺失时，才能清楚地看出完满需要什么。</p><p>If a lot of the best people in your field are collected in one place, it’s usually a good idea to visit for a while. It will increase your ambition, and also, by showing you that these people are human, increase your self-confidence. [26]</p><p>**如果我们所在领域的许多最好的人都集中在一个地方，那去那里待一段时间通常是个好主意。**这会增加我们的斗志，同时，通过向我们展示这些优秀的人都是人，增加我们的自信心。[26]</p><p>If you’re earnest you’ll probably get a warmer welcome than you might expect. Most people who are very good at something are happy to talk about it with anyone who’s genuinely interested. If they’re really good at their work, then they probably have a hobbyist’s interest in it, and hobbyists always want to talk about their hobbies.</p><p>如果我们是真诚的，可能会受到比自己期望的更热烈的欢迎。大多数在某件事上非常出色的人都很乐意和任何真正有兴趣的人谈论它 —— 如果他们真的很擅长自己的工作，那么他们可能对它存在一种类似业余爱好者般的心理，业余爱好者总是想谈论他们的爱好。</p><p>It may take some effort to find the people who are really good, though. Doing great work has such prestige that in some places, particularly universities, there’s a polite fiction that everyone is engaged in it. And that is far from true. People within universities can’t say so openly, but the quality of the work being done in different departments varies immensely. Some departments have people doing great work; others have in the past; others never have.</p><p>然而，找到那些真正优秀的人可能需要一些努力。取得杰出成就会带来巨大的威望，以至于在一些地方，特别是大学，大家都有一个礼貌的假设，那就是每个人都在从事它。而这并非事实，人们不能公开说明这点，但在大学内部，不同部门所做的工作的质量差距巨大 —— 一些部门有人做出了伟大的工作，其他的在过去有过，其他的从来没有过。</p><p>Seek out the best colleagues. There are a lot of projects that can’t be done alone, and even if you’re working on one that can be, it’s good to have other people to encourage you and to bounce ideas off.</p><p>**寻找最能够共事的人。**很多项目是无法独自完成的，即使我们正在从事可以独自完成的项目，也好有其他人来鼓励自己，和我们交流想法。</p><p>Colleagues don’t just affect your work, though; they also affect you. So work with people you want to become like, because you will.</p><p>然而，同事不仅会影响我们的工作，他们也会影响我们本身。所以，<strong>与我们想成为的人一起工作，因为我们将会变得像他们。</strong></p><p>Quality is more important than quantity in colleagues. It’s better to have one or two great ones than a building full of pretty good ones. In fact it’s not merely better, but necessary, judging from history: the degree to which great work happens in clusters suggests that one’s colleagues often make the difference between doing great work and not.</p><p>在同事方面，质量比数量更重要 —— 拥有一两个优秀的同事比拥有一个楼的还算不错的同事更好。实际上，不仅是更好，而且是必需的，从历史来看，在集群中取得杰出成就的案例表明，同事通常决定了我们是否能取得伟大成就。</p><p>How do you know when you have sufficiently good colleagues? In my experience, when you do, you know. Which means if you’re unsure, you probably don’t. But it may be possible to give a more concrete answer than that. Here’s an attempt: sufficiently good colleagues offer surprising insights. They can see and do things that you can’t. So if you have a handful of colleagues good enough to keep you on your toes in this sense, you’re probably over the threshold.</p><p>我们如何知道自己有足够好的同事呢？根据我的经验，当我们有的时候，你就知道了 —— 这意味着，如果我们不确定，那可能没有。可能有更具体的答案，但这里是一个尝试：**足够好的同事会提供令人惊讶的见解，他们能看到并做我们不能做的事。**所以，如果我们有一小撮足够好的同事，让我们在这个意义上保持警觉，他们可能就已经越过了「不错」的阈值。</p><p>Most of us can benefit from collaborating with colleagues, but some projects require people on a larger scale, and starting one of those is not for everyone. If you want to run a project like that, you’ll have to become a manager, and managing well takes aptitude and interest like any other kind of work. If you don’t have them, there is no middle path: you must either force yourself to learn management as a second language, or avoid such projects. [27]</p><p>我们大多数人都可以从与同事的合作中获益，但一些项目需要更大规模的人，并不是每个人都适合发起这样的项目。如果我们想参与这样的项目，将必须成为一个管理者，好的管理需要才能和兴趣，这和其他任何类型的工作一样，如果我们没有它们，就没有妥协的方案：我们必须强迫自己学习管理并将其作为第二技能，或者避免参与这样的项目。[27]</p><p>Husband your morale. It’s the basis of everything when you’re working on ambitious projects. You have to nurture and protect it like a living organism.</p><p>**珍惜自己的士气 —— 当我们从事雄心勃勃的项目时，这是一切的基础。**我们必须像呵护生命一样来培养和保护它。</p><p>Morale starts with your view of life. You’re more likely to do great work if you’re an optimist, and more likely to if you think of yourself as lucky than if you think of yourself as a victim.</p><p>士气从我们的人生观开始。如果我们是一个乐观主义者，则更有可能取得伟大成就，我们需要把自己看作是幸运的，而不是受害者。</p><p>Indeed, work can to some extent protect you from your problems. If you choose work that’s pure, its very difficulties will serve as a refuge from the difficulties of everyday life. If this is escapism, it’s a very productive form of it, and one that has been used by some of the greatest minds in history.</p><p>事实上，工作可以在某种程度上保护我们免受自己的问题的影响。如果我们选择的工作是纯洁的，那么其本身就会成为我们从日常生活的困难中寻求庇护的地方，这种逃避是非常有生产力的，一些历史上最伟大的思想家都利用过这种行为。</p><p>Morale compounds via work: high morale helps you do good work, which increases your morale and helps you do even better work. But this cycle also operates in the other direction: if you’re not doing good work, that can demoralize you and make it even harder to. Since it matters so much for this cycle to be running in the right direction, it can be a good idea to switch to easier work when you’re stuck, just so you start to get something done.</p><p>士气通过工作复合增长：高昂的士气帮助我们做好工作，这又增加了我们的士气，帮助我们做得更好。但这个周期也在反方向奏效：如果我们没有做好工作，那可能会让自己士气低落，使得做事更难。由于这个周期在正确的方向运行如此重要，当我们陷入困境时，切换到更简单的工作可能是个好主意，只要我们一直做事就好。</p><p>One of the biggest mistakes ambitious people make is to allow setbacks to destroy their morale all at once, like a balloon bursting. You can inoculate yourself against this by explicitly considering setbacks a part of your process. Solving hard problems always involves some backtracking.</p><p>雄心勃勃的人最大的错误之一就是让挫折一次性毁掉他们的士气，就像气球爆炸一样。我们可以通过明确挫折是我们过程的一部分来预防这一点，解决难题总是涉及到走回头路。</p><p>Doing great work is a depth-first search whose root node is the desire to. So “If at first you don’t succeed, try, try again” isn’t quite right. It should be: If at first you don’t succeed, either try again, or backtrack and then try again.</p><p>**取得杰出成就是一种深度优先搜索，其根节点是我们想成功的欲望。**所以，「如果一开始没有成功，再试一次」这句话并不完全正确，它应该是「如果一开始没有成功，要么再试一次，要么退回去，然后再试一次」。</p><p>“Never give up” is also not quite right. Obviously there are times when it’s the right choice to eject. A more precise version would be: Never let setbacks panic you into backtracking more than you need to. Corollary: Never abandon the root node.</p><p>「永不放弃」也不完全正确，显然，有时候选择退出是正确的选择。更准确的说法应该是：永远不要让挫折让我们慌乱地走比自己需要的更多的回头路 —— 推论：永远不要放弃根节点。</p><p>It’s not necessarily a bad sign if work is a struggle, any more than it’s a bad sign to be out of breath while running. It depends how fast you’re running. So learn to distinguish good pain from bad. Good pain is a sign of effort; bad pain is a sign of damage.</p><p>工作如果令人痛苦挣扎，不一定是坏的迹象，就像在跑步时呼吸困难不一定是坏的迹象一样，这取决于我们跑得多快。所以学会区分好的痛苦和坏的痛苦 —— 好的痛苦是努力的标志，坏的痛苦是损害的标志。</p><p>An audience is a critical component of morale. If you’re a scholar, your audience may be your peers; in the arts, it may be an audience in the traditional sense. Either way it doesn’t need to be big. The value of an audience doesn’t grow anything like linearly with its size. Which is bad news if you’re famous, but good news if you’re just starting out, because it means a small but dedicated audience can be enough to sustain you. If a handful of people genuinely love what you’re doing, that’s enough.</p><p>**「观众」是士气的关键组成部分。**学者的观众可能是他们的同行，在艺术领域，可能是传统意义上的观众 —— 无论哪种方式，观众的数量不需要很大，观众的价值并不像其大小那样成线性增长。这对于那些著名的人来说是个坏消息，但对于刚刚起步的人来说是个好消息，因为这意味着一小组专注的观众足以支持我们，如果有少数人真正喜欢我们在做的事，那就够了。</p><p>To the extent you can, avoid letting intermediaries come between you and your audience. In some types of work this is inevitable, but it’s so liberating to escape it that you might be better off switching to an adjacent type if that will let you go direct. [28]</p><p>尽可能避免让中间人介入我们和自己的观众之间。在某些类型的工作中，这种情况不可避免，但我们有极大的自由度摆脱这种情况，因此，如果能让我们直接面对自己的观众，那我们最好转而从事类似的工作。[28]</p><p>The people you spend time with will also have a big effect on your morale. You’ll find there are some who increase your energy and others who decrease it, and the effect someone has is not always what you’d expect. Seek out the people who increase your energy and avoid those who decrease it. Though of course if there’s someone you need to take care of, that takes precedence.</p><p>我们花时间在一起的人也会对我们的士气产生很大影响。我们会发现有些人增加了自己的能量，而有些人减少了我们的能量，而一个人对你产生的影响并不总是你期望的。寻找那些能增加我们能量的人，避开那些减少我们能量的人 —— 当然，如果有人需要我们照顾，那就优先考虑。</p><p>Don’t marry someone who doesn’t understand that you need to work, or sees your work as competition for your attention. If you’re ambitious, you need to work; it’s almost like a medical condition; so someone who won’t let you work either doesn’t understand you, or does and doesn’t care.</p><p>不要与一个不明白我们需要工作，或者与我们的工作竞争注意力的人结婚。如果我们有雄心壮志，我们需要工作，这无须多言，所以，如果一个人不让我们工作，要么就是不理解我们，要么就是理解但不在乎。</p><p>Ultimately morale is physical. You think with your body, so it’s important to take care of it. That means exercising regularly, eating and sleeping well, and avoiding the more dangerous kinds of drugs. Running and walking are particularly good forms of exercise because they’re good for thinking. [29]</p><p>最后，**士气其实也是物理的，我们用身体思考，所以照顾好它很重要。**这意味着定期运动、饮食以及保持良好睡眠，避免使用危险类型的药物。跑步和步行是特别好的锻炼方式，因为它们有利于思考。[29]</p><p>People who do great work are not necessarily happier than everyone else, but they’re happier than they’d be if they didn’t. In fact, if you’re smart and ambitious, it’s dangerous not to be productive. People who are smart and ambitious but don’t achieve much tend to become bitter.</p><p>取得杰出成就的人并不一定比其他人更快乐，但他们比不成功时更快乐。实际上，如果我们聪明而有雄心，不工作是危险的，那些聪明而有雄心，但没有成就很多的人往往会变得很痛苦。</p><p>It’s ok to want to impress other people, but choose the right people. The opinion of people you respect is signal. Fame, which is the opinion of a much larger group you might or might not respect, just adds noise.</p><p><strong>想要给别人留下印象是可以的，但要选择正确的人，我们所尊重的人的观点是信号；名声，也就是我们可能尊重或可能不尊重的更广泛群体的观点，只是噪音。</strong></p><p>The prestige of a type of work is at best a trailing indicator and sometimes completely mistaken. If you do anything well enough, you’ll make it prestigious. So the question to ask about a type of work is not how much prestige it has, but how well it could be done.</p><p>一种工作的声望最好的情况下是一个落后的指标，有时则是完全错误的标志。如果我们把任何事情做得足够好，我们就会使它有声望。所以，面对一种工作，我们的问题不应该是它有多大的声望，而是它可以被做到多好。</p><p>Competition can be an effective motivator, but don’t let it choose the problem for you; don’t let yourself get drawn into chasing something just because others are. In fact, don’t let competitors make you do anything much more specific than work harder.</p><p>竞争可以是一个有效的动力，但不要让它指导我们选择问题，不要仅仅因为别人在追求某件事就让自己被扯进去。事实上，不要让竞争者指导我们做任何比较具体的事，比如更加努力工作。</p><p>Curiosity is the best guide. Your curiosity never lies, and it knows more than you do about what’s worth paying attention to.</p><p><strong>好奇心是最好的指导者，好奇心永远不会撒谎，它比我们自己更了解什么值得关注。</strong></p><p>Notice how often that word has come up. If you asked an oracle the secret to doing great work and the oracle replied with a single word, my bet would be on “curiosity.”</p><p>注意这个词出现的频率。<strong>如果我们问一个预言家取得杰出成就的秘密，预言家用一个词回答，我赌就是「好奇心」。</strong></p><p>That doesn’t translate directly to advice. It’s not enough just to be curious, and you can’t command curiosity anyway. But you can nurture it and let it drive you.</p><p>这并不能直接被解释为建议。仅仅是好奇是不够的，我们也不能左右好奇，但是我们可以培养它，让它驱动我们。</p><p>Curiosity is the key to all four steps in doing great work: it will choose the field for you, get you to the frontier, cause you to notice the gaps in it, and drive you to explore them. The whole process is a kind of dance with curiosity.</p><p>好奇心是做伟大工作的所有四个步骤的关键：它会为我们选择领域，带我们到达领域边界，让我们注意到其中的空白，并驱使我们去探索它们 —— 整个过程都在与好奇心共舞。</p><p>Believe it or not, I tried to make this essay as short as I could. But its length at least means it acts as a filter. If you made it this far, you must be interested in doing great work. And if so you’re already further along than you might realize, because the set of people willing to want to is small.</p><p>信不信由你，我试图让这篇论文尽可能地短。但是它的长度至少意味着它起到了一个过滤器的作用 —— 如果你看到了这里，你一定对做伟大的工作感兴趣。如果是这样，你已经比你可能意识到的要进一步了，因为愿意去想的人的集合是很小的。</p><p>The factors in doing great work are factors in the literal, mathematical sense, and they are: ability, interest, effort, and luck. Luck by definition you can’t do anything about, so we can ignore that. And we can assume effort, if you do in fact want to do great work. So the problem boils down to ability and interest. Can you find a kind of work where your ability and interest will combine to yield an explosion of new ideas?</p><p>取得伟大成就的因素在字面上，数学上是因素，它们是：**能力、兴趣、努力和运气。**运气是我们无法左右的，所以可以忽略它；并且，如果确实想要取得伟大成就，我们可以假设每个人都很努力；<strong>所以问题归结为能力和兴趣 —— 我们能否找到一种工作，将自己的能力和兴趣结合起来，让新想法迸发？</strong></p><p>Here there are grounds for optimism. There are so many different ways to do great work, and even more that are still undiscovered. Out of all those different types of work, the one you’re most suited for is probably a pretty close match. Probably a comically close match. It’s just a question of finding it, and how far into it your ability and interest can take you. And you can only answer that by trying.</p><p>我们有乐观的理由。有很多不同的方式来取得伟大成就，与此同时，还有更多的方式还未被发现。在所有这些不同类型的工作中，我们最适合的那一种可能是非常接近的匹配，可能是一个滑稽的接近的匹配 —— 这其中只有一个问题，我们要找到它，以及我们的能力和兴趣能带自己走多远 —— 我们只能通过尝试来回答这个问题。</p><p>Many more people could try to do great work than do. What holds them back is a combination of modesty and fear. It seems presumptuous to try to be Newton or Shakespeare. It also seems hard; surely if you tried something like that, you’d fail. Presumably the calculation is rarely explicit. Few people consciously decide not to try to do great work. But that’s what’s going on subconsciously; they shy away from the question.</p><p>可以尝试取得伟大成就的人比实际做到的人多得多，但阻止他们的是一种由谦逊和恐惧组成的混合物，例如，「试图成为牛顿或莎士比亚似乎有点狂妄，这看起来也很难」，「如果试了这样的事情，一定会失败」，「经过推算，这样的概率很小，不做是明智的」等等。很少有人有意识地决定不去尝试取得伟大成就，但这就是潜意识里正在发生的事 —— 他们回避这个问题。</p><p>So I’m going to pull a sneaky trick on you. Do you want to do great work, or not? Now you have to decide consciously. Sorry about that. I wouldn’t have done it to a general audience. But we already know you’re interested.</p><p>现在我要与你玩个游戏了。你想取得伟大的成就，还是不想呢？现在你必须有意识地下决定 —— 对不起，对此我感到抱歉，我一般不会对读者这么做，但看到这里，我已经知道你感兴趣了。</p><p>Don’t worry about being presumptuous. You don’t have to tell anyone. And if it’s too hard and you fail, so what? Lots of people have worse problems than that. In fact you’ll be lucky if it’s the worst problem you have.</p><p>不要担心过于自大，你不需要讲这个决定告诉任何人。如果太难，失败了，那又怎样呢？很多人需要解决这更糟糕的问题 —— 实际上，如果这是你最糟糕的问题，那么你真的非常幸运。</p><p>Yes, you’ll have to work hard. But again, lots of people have to work hard. And if you’re working on something you find very interesting, which you necessarily will if you’re on the right path, the work will probably feel less burdensome than a lot of your peers’.</p><p>是的，我们必须努力工作。但再次，很多人必须努力工作。并且，如果我们在做自己觉得非常有趣的事情，我们必然会在正确的道路上，工作可能会感觉比我们很多同伴的轻松。</p><p>The discoveries are out there, waiting to be made. Why not by you?</p><p><strong>发现正在等待被发现，为什么不是由我们自己呢？</strong></p><p>Notes</p><p>[1] I don’t think you could give a precise definition of what counts as great work. Doing great work means doing something important so well that you expand people’s ideas of what’s possible. But there’s no threshold for importance. It’s a matter of degree, and often hard to judge at the time anyway. So I’d rather people focused on developing their interests rather than worrying about whether they’re important or not. Just try to do something amazing, and leave it to future generations to say if you succeeded.</p><p>[1] 我不认为我们可以给杰出成就一个精确的定义。取得杰出成就意味着做了某件很重要事情，做得很好，以至于扩大了人们对可能性的认识，但是，对于重要性并没有一个阈值，这是一个程度的问题，而且往往很难在当时进行判断。所以，我宁愿让人们专注于发展他们的兴趣，而不是担心它们是否重要 —— 只要试图做一些令人惊奇的事情，子孙后代会判断你是否成功。</p><p>[2] A lot of standup comedy is based on noticing anomalies in everyday life. “Did you ever notice…?” New ideas come from doing this about nontrivial things. Which may help explain why people’s reaction to a new idea is often the first half of laughing: Ha!</p><p>[2] 很多的单口喜剧都是基于在日常生活中发现的不寻常现象。「你有没有注意到…？」新的想法来自于关于非琐碎事情的这类观察，这可能有助于解释为什么人们对一个新想法的反应往往是笑：哈！</p><p>[3] That second qualifier is critical. If you’re excited about something most authorities discount, but you can’t give a more precise explanation than “they don’t get it,” then you’re starting to drift into the territory of cranks.</p><p>[3] 「有足够的专业知识来精确地说出他们都忽视了什么」这个限定是关键。如果我们对大部分权威都不认可的事情感到兴奋，但不能给出比「他们不懂」更精确的解释，那么我们自己就开始向怪人那一端发展了。</p><p>[4] Finding something to work on is not simply a matter of finding a match between the current version of you and a list of known problems. You’ll often have to coevolve with the problem. That’s why it can sometimes be so hard to figure out what to work on. The search space is huge. It’s the cartesian product of all possible types of work, both known and yet to be discovered, and all possible future versions of you.</p><p>[4] 找到一些事情来做并不仅仅是在当前版本和已知问题之间找到匹配的问题，我们往往必须要与问题共同发展，这就是为什么有时找出该做什么事会很困难。我们所能搜索的空间是巨大的，它是所有可能的工作类型（已知的和尚未发现的）和所有可能的未来版本的笛卡尔乘积。</p><p>There’s no way you could search this whole space, so you have to rely on heuristics to generate promising paths through it and hope the best matches will be clustered. Which they will not always be; different types of work have been collected together as much by accidents of history as by the intrinsic similarities between them.</p><p>我们没有办法搜索整个空间，所以必须依赖启发式方法在空间中生成有希望的路径，并希望最佳匹配会聚集在一起 —— 但是，它们并不总是会聚集在一起 —— 不同类型的工作被聚集在一起，多半是由于历史的偶然性，而非它们的内在相似性。</p><p>[5] There are many reasons curious people are more likely to do great work, but one of the more subtle is that, by casting a wide net, they’re more likely to find the right thing to work on in the first place.</p><p>[5] 好奇的人更有可能取得杰出成就有很多原因，但其中的一个微妙原因是，通过撒了一个宽广的网，他们更有可能在一开始就找到正确的事情来做。</p><p>[6] It can also be dangerous to make things for an audience you feel is less sophisticated than you, if that causes you to talk down to them. You can make a lot of money doing that, if you do it in a sufficiently cynical way, but it’s not the route to great work. Not that anyone using this m.o. would care.</p><p>[6] 如果我们感觉受众不如自己精明，我们可能会对他们居高临下，那么为他们制作出的东西可能也是糟糕的。如果我们抱着藐视一切的态度做产品，可以赚很多钱，但这不是通往杰出成就的路 —— 不过使用这种手段的人可能不会在意。</p><p>[7] This idea I learned from Hardy’s A Mathematician’s Apology, which I recommend to anyone ambitious to do great work, in any field.</p><p>[7] 这个想法我从哈代的《一个数学家的辩白》中学到的，我推荐任何有抱负，要取得伟大成就的人去阅读读，无论是在什么领域。</p><p>[8] Just as we overestimate what we can do in a day and underestimate what we can do over several years, we overestimate the damage done by procrastinating for a day and underestimate the damage done by procrastinating for several years.</p><p>[8] 就像我们高估了我们在一天内可以做什么，低估了我们在几年内可以做什么，我们高估了拖延一天造成的损害，低估了拖延几年造成的损害。</p><p>[9] You can’t usually get paid for doing exactly what you want, especially early on. There are two options: get paid for doing work close to what you want and hope to push it closer, or get paid for doing something else entirely and do your own projects on the side. Both can work, but both have drawbacks: in the first approach your work is compromised by default, and in the second you have to fight to get time to do it.</p><p>[9] 我们通常不能完全按照自己的意愿去做事，特别是在早期。有两个选择：做接近我们想做的工作并希望二者越来越接近，或者做完全不同的事情并在业余时间做自己的项目。两者都可行，但两者都有缺点：在第一种方法中，我们的工作默认被妥协了，在第二种我们必须努力找到时间去做。</p><p>[10] If you set your life up right, it will deliver the focus-relax cycle automatically. The perfect setup is an office you work in and that you walk to and from.</p><p>[10] 如果我们的生活安排得当，它会自动提供「专注 - 放松」的周期。完美的设置是我们在这个循环中工作，并且拥有可以步行往返的办公室。</p><p>[11] There may be some very unworldly people who do great work without consciously trying to. If you want to expand this rule to cover that case, it becomes: Don’t try to be anything except the best.</p><p>[11] 也许有一些非常超凡的人，他们可以取得杰出成就，而不需要有意识地去尝试。如果我们想拓展这个规则以取得同样的成功，它会变成：除了做最好的，别尝试做其他任何事情。</p><p>[12] This gets more complicated in work like acting, where the goal is to adopt a fake persona. But even here it’s possible to be affected. Perhaps the rule in such fields should be to avoid unintentional affectation.</p><p>[12] 在诸如表演之类的工作中，目标是展现一个假的人格，这就更复杂了。但是即使在这种情况下，也有可能被矫饰影响 —— 也许在这样的领域中的规则应该是避免无意的矫饰。</p><p>[13] It’s safe to have beliefs that you treat as unquestionable if and only if they’re also unfalsifiable. For example, it’s safe to have the principle that everyone should be treated equally under the law, because a sentence with a “should” in it isn’t really a statement about the world and is therefore hard to disprove. And if there’s no evidence that could disprove one of your principles, there can’t be any facts you’d need to ignore in order to preserve it.</p><p>[13] 如果我们有一个原则，如何判断它是否可以被视为是无可质疑的？只有在它是无法证伪的情况下才是安全的。例如，每个人都应该在法律面前平等，这是安全的原则，因为一个带有「应该」的句子实际上并不是关于世界观的陈述，因此很难被证明是错误的。如果我们不需要掩盖任何事实以维护它，那就没有证据可以证伪我们的某个原则。</p><p>[14] Affectation is easier to cure than intellectual dishonesty. Affectation is often a shortcoming of the young that burns off in time, while intellectual dishonesty is more of a character flaw.</p><p>[14] 矫饰比智力不诚实更容易治愈。矫饰往往是年轻人的缺点，随着时间的推移会消失，而智力不诚实更像是一个性格上的缺点。</p><p>[15] Obviously you don’t have to be working at the exact moment you have the idea, but you’ll probably have been working fairly recently.</p><p>[15] 显然，我们不必在有想法的那一刻就投入这项工作，但我们需要工作。</p><p>[16] Some say psychoactive drugs have a similar effect. I’m skeptical, but also almost totally ignorant of their effects.</p><p>[16] 有些人说精神活性药物有类似的效果。我持怀疑态度，但也对它们的影响几乎一无所知。</p><p>[17] For example you might give the nth most important topic (m-1)&#x2F;m^n of your attention, for some m &gt; 1. You couldn’t allocate your attention so precisely, of course, but this at least gives an idea of a reasonable distribution.</p><p>[17] 例如，我们可能会给第 n 个最重要的主题 (m-1)&#x2F;m^n 的注意力，m &gt; 1。当然，我们不能那么精确地分配自己的注意力，但这至少给出了一个合理分配的想法。</p><p>[18] The principles defining a religion have to be mistaken. Otherwise anyone might adopt them, and there would be nothing to distinguish the adherents of the religion from everyone else.</p><p>[18] 定义一个宗教的原则必须是错误的。否则，任何人都可能采用它们，那么就没有什么可以区分宗教信徒和其他人的了。</p><p>[19] It might be a good exercise to try writing down a list of questions you wondered about in your youth. You might find you’re now in a position to do something about some of them.</p><p>[19] 试着写下我们过去好奇的问题的列表可能是一个好的练习。我们可能会发现自己现在有能力去解决其中的一些问题。</p><p>[20] The connection between originality and uncertainty causes a strange phenomenon: because the conventional-minded are more certain than the independent-minded, this tends to give them the upper hand in disputes, even though they’re generally stupider.<br>The best lack all conviction, while the worst<br>Are full of passionate intensity.</p><p>[20] 原创性和不确定性之间的联系导致了一种奇特的现象：因为有传统思维的人比独立思维的人更确定，这往往给他们在争论中占上风，即使他们通常更愚蠢。最好的人都缺乏信念，而最差的人充满了顽固气息。</p><p>[21] Derived from Linus Pauling’s “If you want to have good ideas, you must have many ideas.”</p><p>[21] 来自 Linus Pauling 的「如果你想有好主意，你必须有很多主意。」</p><p>[22] Attacking a project as a “toy” is similar to attacking a statement as “inappropriate.” It means that no more substantial criticism can be made to stick.</p><p>[22] 称一个项目为「玩具」类似于称一个声明为「不适当」，这意味着没有更实质的批评可以给出。</p><p>[23] One way to tell whether you’re wasting time is to ask if you’re producing or consuming. Writing computer games is less likely to be a waste of time than playing them, and playing games where you create something is less likely to be a waste of time than playing games where you don’t.</p><p>[23] 判断我们是否在浪费时间的一个方法是问自己是否在生产还是在消费。写电脑游戏可能比玩它们浪费时间的可能性要小，而玩我们可以创造东西的游戏可能比玩不能创造东西的游戏浪费时间的可能性要小。</p><p>[24] Another related advantage is that if you haven’t said anything publicly yet, you won’t be biased toward evidence that supports your earlier conclusions. With sufficient integrity you could achieve eternal youth in this respect, but few manage to. For most people, having previously published opinions has an effect similar to ideology, just in quantity 1.</p><p>[24] 另一个相关的优点是，如果我们还没有公开地说过什么，就不会偏向于相信支持我们之前的结论的证据。以足够的中立态度，我们可以在这方面实现永恒青春，但很少有人能做到。对大多数人来说，以前公开过的意见有一种类似于意识形态的效果，只是在数量上为 1。</p><p>[25] In the early 1630s Daniel Mytens made a painting of Henrietta Maria handing a laurel wreath to Charles I. Van Dyck then painted his own version to show how much better he was.</p><p>[25] 1630 年代初，Daniel Mytens 画了一幅画，描绘了 Henrietta Maria 把月桂冠递给 Charles I 的场景，然后 Van Dyck 画了他自己的版本，以显示他有多么优秀。</p><p>[26] I’m being deliberately vague about what a place is. As of this writing, being in the same physical place has advantages that are hard to duplicate, but that could change.</p><p>[26] 我在这里故意模糊了什么是地方的定义。截至写这篇文章，身处同一物理地点具有难以复制的优势，但这可能会改变。</p><p>[27] This is false when the work the other people have to do is very constrained, as with SETI@home or Bitcoin. It may be possible to expand the area in which it’s false by defining similarly restricted protocols with more freedom of action in the nodes.</p><p>[27] 当其他人必须做的工作非常受限时，这是错误的，例如 SETI@home 或比特币。通过定义类似的受限协议，让节点有更大的行动自由，可能会使错误扩大。</p><p>[28] Corollary: Building something that enables people to go around intermediaries and engage directly with their audience is probably a good idea.</p><p>[28] 推论：构建能让人们绕过中介并直接与受众接触的东西可能是个好主意。</p><p>[29] It may be helpful always to walk or run the same route, because that frees attention for thinking. It feels that way to me, and there is some historical evidence for it.</p><p>[29] 一直走或跑同样的路线可能有所帮助，因为这给思考留出更多注意力。我有这种感觉，也有一些历史证据支持。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平凡而惊奇</title>
    <link href="/2025/07/17/general-and-surprising/"/>
    <url>/2025/07/17/general-and-surprising/</url>
    
    <content type="html"><![CDATA[<h2 id="GENERAL-AND-SURPRISING"><a href="#GENERAL-AND-SURPRISING" class="headerlink" title="GENERAL AND SURPRISING"></a>GENERAL AND SURPRISING</h2><p>原文链接: <a href="https://paulgraham.com/sun.html">https://paulgraham.com/sun.html</a></p><h3 id="一、最具价值的见解"><a href="#一、最具价值的见解" class="headerlink" title="一、最具价值的见解"></a>一、最具价值的见解</h3><p>The most valuable insights are both general and surprising. F &#x3D; ma for example. But general and surprising is a hard combination to achieve. That territory tends to be picked clean, precisely because those insights are so valuable. </p><p>最有价值的见解兼具普遍性和惊喜感。例如 F&#x3D;ma（牛顿第二运动定律）。但兼具普遍性和惊喜感是很难实现的，这类见解所在的领域往往已被挖掘殆尽，原因恰恰在于它们极具价值。</p><p>Ordinarily, the best that people can do is one without the other: either surprising without being general (e.g. gossip), or general without being surprising (e.g. platitudes). </p><p>通常情况下，鱼和熊掌不可兼得：要么有惊喜感却缺乏普遍性（比如八卦），要么有普遍性却毫无惊喜（比如陈词滥调）。</p><p>Where things get interesting is the moderately valuable insights. You get those from small additions of whichever quality was missing. The more common case is a small addition of generality: a piece of gossip that’s more than just gossip, because it teaches something interesting about the world. But another less common approach is to focus on the most general ideas and see if you can find something new to say about them. Because these start out so general, you only need a small delta of novelty to produce a useful insight. </p><p>真正有趣的是那些中等价值的见解。要获得这类见解，只需在缺失的特质上稍作补充。更常见的情况是补充少量普遍性：一条八卦之所以不只是八卦，是因为它能让人了解到关于世界的有趣之事。但另一种不太常见的方式是，聚焦于最具普遍性的观点，看看能否就它们说出些新东西。由于这些观点本身已经极具普遍性，因此只需一点新颖性的补充，就能产生有独到之处的见解。</p><h3 id="二、微小创意也能够带来巨大的不同"><a href="#二、微小创意也能够带来巨大的不同" class="headerlink" title="二、微小创意也能够带来巨大的不同"></a>二、微小创意也能够带来巨大的不同</h3><p>A small delta of novelty is all you’ll be able to get most of the time. Which means if you take this route, your ideas will seem a lot like ones that already exist. Sometimes you’ll find you’ve merely rediscovered an idea that did already exist. But don’t be discouraged. Remember the huge multiplier that kicks in when you do manage to think of something even a little new. </p><p>大多数时候，你能获得的只是少量的新颖性。这意味着如果你选择这条路径，你的观点看起来会和已有的观点十分相似。有时你会发现，自己只是重新发现了一个早已存在的观点。但不必气馁。记住，当你确实想到哪怕一点点新东西时，随之而来的乘法效应是巨大的。</p><p>Corollary: the more general the ideas you’re talking about, the less you should worry about repeating yourself. If you write enough, it’s inevitable you will. Your brain is much the same from year to year and so are the stimuli that hit it. I feel slightly bad when I find I’ve said something close to what I’ve said before, as if I were plagiarizing myself. But rationally one shouldn’t. You won’t say something exactly the same way the second time, and that variation increases the chance you’ll get that tiny but critical delta of novelty. </p><p>推论：你谈论的观点越具普遍性，就越不必担心重复自己。如果你写得足够多，重复是不可避免的。你的大脑年复一年变化不大，冲击它的刺激也大致相同。当我发现自己说的话和以前说过的很接近时，会略感不适，仿佛在抄袭自己。但理性而言，不必如此。你第二次不会用完全相同的方式表达，而这种差异会增加你获得那微小却关键的新颖性增量的机会。</p><h3 id="三、持续探索的勇气"><a href="#三、持续探索的勇气" class="headerlink" title="三、持续探索的勇气"></a>三、持续探索的勇气</h3><p>And of course, ideas beget ideas. (That sounds familiar.) An idea with a small amount of novelty could lead to one with more. But only if you keep going. So it’s doubly important not to let yourself be discouraged by people who say there’s not much new about something you’ve discovered. “Not much new” is a real achievement when you’re talking about the most general ideas. </p><p>当然，观点会催生新观点。（这话听着耳熟。）一个带有少量新颖性的观点可能会引出更具新颖性的观点，但前提是你要坚持下去。因此，当有人说你发现的东西没什么新意时，千万不要气馁，这一点尤为重要。当你谈论的是最具普遍性的观点时，“没太多新意” 其实是一项实实在在的成就。</p><p>It’s not true that there’s nothing new under the sun. There are some domains where there’s almost nothing new. But there’s a big difference between nothing and almost nothing, when it’s multiplied by the area under the sun.</p><p>“日光之下并无新事” 这句话并不正确。有些领域几乎没有新东西，但 “完全没有新东西” 和 “几乎没有新东西” 之间存在巨大差异，尤其是当它乘以 “日光之下的广阔领域” 时。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何时去追寻你所热爱</title>
    <link href="/2025/07/16/follow-your-passion/"/>
    <url>/2025/07/16/follow-your-passion/</url>
    
    <content type="html"><![CDATA[<h2 id="WHEN-TO-DO-WHAT-YOU-LOVE"><a href="#WHEN-TO-DO-WHAT-YOU-LOVE" class="headerlink" title="WHEN TO DO WHAT YOU LOVE"></a>WHEN TO DO WHAT YOU LOVE</h2><p>原文链接: <a href="https://paulgraham.com/when.html">https://paulgraham.com/when.html</a></p><h3 id="一、关于“追随热情”的争论"><a href="#一、关于“追随热情”的争论" class="headerlink" title="一、关于“追随热情”的争论"></a>一、关于“追随热情”的争论</h3><p>There’s some debate about whether it’s a good idea to “follow your passion.” In fact the question is impossible to answer with a simple yes or no. Sometimes you should and sometimes you shouldn’t, but the border between should and shouldn’t is very complicated. The only way to give a general answer is to trace it. </p><p>关于 “追随激情” 是否是个好主意，存在一些争议。事实上，这个问题无法用简单的 “是” 或 “否” 来回答。有时应该，有时不应该，但 “应该” 与 “不应该” 之间的界限非常复杂。给出一个一般性答案的唯一方法，是追溯其背后的逻辑。</p><p>When people talk about this question, there’s always an implicit “instead of.” All other things being equal, why wouldn’t you work on what interests you the most? So even raising the question implies that all other things aren’t equal, and that you have to choose between working on what interests you the most and something else, like what pays the best. </p><p>人们讨论这个问题时，总会隐含一个 “取而代之” 的前提。在其他条件相同的情况下，为什么不做自己最感兴趣的事呢？因此，即便提出这个问题，也意味着其他条件并不相同 —— 你必须在 “做最感兴趣的事” 和 “其他事”（比如薪资最高的事）之间做出选择。</p><p>And indeed if your main goal is to make money, you can’t usually afford to work on what interests you the most. People pay you for doing what they want, not what you want. But there’s an obvious exception: when you both want the same thing. For example, if you love football, and you’re good enough at it, you can get paid a lot to play it. </p><p>的确，若你的主要目标是赚钱，通常就没法只顾着做最感兴趣的事。人们付钱给你，是为了让你做他们想让你做的事，而非你自己想做的事。但有个明显的例外：当你和他们的需求一致时。比如，如果你热爱足球，且足够擅长，就能靠踢球赚很多钱。</p><p>Of course the odds are against you in a case like football, because so many other people like playing it too. This is not to say you shouldn’t try though. It depends how much ability you have and how hard you’re willing to work. </p><p>当然，在足球这类领域，成功的概率对你不利，因为太多人也喜欢踢球。但这并非说你不该尝试 —— 这取决于你的能力有多强，以及你愿意付出多少努力。</p><p>The odds are better when you have strange tastes: when you like something that pays well and that few other people like. For example, it’s clear that Bill Gates truly loved running a software company. He didn’t just love programming, which a lot of people do. He loved writing software for customers. That is a very strange taste indeed, but if you have it, you can make a lot by indulging it. </p><p>当你的喜好比较特别时，成功的概率会更高：比如你喜欢的事既能赚钱，又没多少人感兴趣。显然，比尔・盖茨是真的热爱经营软件公司。他不只是热爱编程（很多人都热爱编程），而是热爱为客户写软件。这确实是一种非常特别的喜好，但如果你有这种喜好，沉浸其中就能赚很多钱。</p><p>There are even some people who have a genuine intellectual interest in making money. This is distinct from mere greed. They just can’t help noticing when something is mispriced, and can’t help doing something about it. It’s like a puzzle for them. [1] </p><p>甚至有一些人，对赚钱有着真正的智力层面的兴趣。这和单纯的贪婪不同。他们总会不由自主地发现定价不合理的东西，也总会忍不住去做点什么。对他们来说，这就像一道谜题。[1]</p><h3 id="二、目标与兴趣的平衡"><a href="#二、目标与兴趣的平衡" class="headerlink" title="二、目标与兴趣的平衡"></a>二、目标与兴趣的平衡</h3><p>In fact there’s an edge case here so spectacular that it turns all the preceding advice on its head. If you want to make a really huge amount of money — hundreds of millions or even billions of dollars — it turns out to be very useful to work on what interests you the most. The reason is not the extra motivation you get from doing this, but that the way to make a really large amount of money is to start a startup, and working on what interests you is an excellent way to discover startup ideas. </p><p>事实上，这里有一个极端案例，它的影响之大，足以颠覆前面所有的建议。如果你想赚一大笔钱 —— 数亿甚至数十亿美元 —— 那么，做自己最感兴趣的事其实非常有用。原因并非做这些事能带来额外的动力，而是赚大钱的方式往往是创办初创公司，而做自己感兴趣的事，是发现初创公司创意的绝佳途径。</p><p>Many if not most of the biggest startups began as projects the founders were doing for fun. Apple, Google, and Facebook all began that way. Why is this pattern so common? Because the best ideas tend to be such outliers that you’d overlook them if you were consciously looking for ways to make money. Whereas if you’re young and good at technology, your unconscious instincts about what would be interesting to work on are very well aligned with what needs to be built. </p><p>即便不是大多数，也有很多顶尖的初创公司，最初都是创始人出于乐趣而做的项目。苹果、谷歌、脸书都是如此。为什么这种模式如此常见？因为最棒的创意往往太出格，如果你刻意追求赚钱，很可能会忽略它们。而如果你年轻且擅长技术，你对 “做什么事有趣” 的直觉，往往和 “该创造什么” 高度契合。</p><p>So there’s something like a midwit peak for making money. If you don’t need to make much, you can work on whatever you’re most interested in; if you want to become moderately rich, you can’t usually afford to; but if you want to become super rich, and you’re young and good at technology, working on what you’re most interested in becomes a good idea again. </p><p>所以，在赚钱这件事上，存在一种 “中等智慧峰值”：如果你不需要赚太多钱，就能做自己最感兴趣的事；如果你想变得小康，通常就不能只顾兴趣；但如果你想变得超级富有，且年轻又擅长技术，那么做自己最感兴趣的事又会成为一个好主意。</p><h3 id="三、何时做出抉择"><a href="#三、何时做出抉择" class="headerlink" title="三、何时做出抉择"></a>三、何时做出抉择</h3><p>What if you’re not sure what you want? What if you’re attracted to the idea of making money and more attracted to some kinds of work than others, but neither attraction predominates? How do you break ties? </p><p>如果你不确定自己想要什么呢？如果你既被赚钱的想法吸引，又对某些工作更感兴趣，但两者都没有绝对优势，该如何抉择？</p><p>The key here is to understand that such ties are only apparent. When you have trouble choosing between following your interests and making money, it’s never because you have complete knowledge of yourself and of the types of work you’re choosing between, and the options are perfectly balanced. When you can’t decide which path to take, it’s almost always due to ignorance. In fact you’re usually suffering from three kinds of ignorance simultaneously: you don’t know what makes you happy, what the various kinds of work are really like, or how well you could do them. [2] </p><p>关键在于，这种 “难以抉择” 往往只是表面现象。当你在 “追随兴趣” 和 “赚钱” 之间犹豫时，绝非因为你完全了解自己、了解可选的工作，且选项完美平衡。你无法决定，几乎总是因为信息不足 —— 你不知道什么能让自己快乐，不知道各种工作的真实情况，也不知道自己能把这些工作做得多好。[2]</p><p>In a way this ignorance is excusable. It’s often hard to predict these things, and no one even tells you that you need to. If you’re ambitious you’re told you should go to college, and this is good advice so far as it goes, but that’s where it usually ends. No one tells you how to figure out what to work on, or how hard this can be. </p><p>在某种程度上，这种信息不足是可以理解的。预测这些事往往很难，而且没人告诉你需要去弄清楚这些。如果你有野心，别人会告诉你应该上大学，这在某种程度上是个好建议，但通常也就到此为止了。没人告诉你该如何确定自己要做什么，也没人告诉你这件事有多难。</p><p>What do you do in the face of uncertainty? Get more certainty. And probably the best way to do that is to try working on things you’re interested in. That will get you more information about how interested you are in them, how good you are at them, and how much scope they offer for ambition. </p><p>面对不确定性该怎么办？去获取更多确定性。最好的方法可能就是尝试做自己感兴趣的事。这会让你更清楚自己对这件事的兴趣有多深、自己有多擅长，以及这件事能给你多大的发展空间。</p><p>Don’t wait. Don’t wait till the end of college to figure out what to work on. Don’t even wait for internships during college. You don’t necessarily need a job doing x in order to work on x; often you can just start doing it in some form yourself. And since figuring out what to work on is a problem that could take years to solve, the sooner you start, the better. </p><p>别等。别等到大学毕业才确定自己要做什么，甚至别等到大学期间的实习。你不一定非要找到一份做某件事的工作才能去做它 —— 通常你自己就能以某种形式开始。既然确定自己要做什么可能需要好几年，那么越早开始越好。</p><h3 id="四、时势造英雄"><a href="#四、时势造英雄" class="headerlink" title="四、时势造英雄"></a>四、时势造英雄</h3><p>One useful trick for judging different kinds of work is to look at who your colleagues will be. You’ll become like whoever you work with. Do you want to become like these people? </p><p>判断不同工作的一个有用技巧，是看看你未来的同事会是什么样的人。你会变得和他们越来越像。你想变成他们那样吗？</p><p>Indeed, the difference in character between different kinds of work is magnified by the fact that everyone else is facing the same decisions as you. If you choose a kind of work mainly for how well it pays, you’ll be surrounded by other people who chose it for the same reason, and that will make it even more soul-sucking than it seems from the outside. Whereas if you choose work you’re genuinely interested in, you’ll be surrounded mostly by other people who are genuinely interested in it, and that will make it extra inspiring. [3] </p><p>事实上，不同工作在 “人的特质” 上的差异，会因 “每个人都在做类似选择” 而被放大。如果你选一份工作主要是因为薪水高，身边就会围绕着同样为钱而来的人，这会让这份工作比表面看起来更让人身心俱疲。而如果你选择自己真正感兴趣的工作，身边大多会是同样感兴趣的人，这会让工作额外鼓舞人心。[3]</p><p>The other thing you do in the face of uncertainty is to make choices that are uncertainty-proof. The less sure you are about what to do, the more important it is to choose options that give you more options in the future. I call this “staying upwind.” If you’re unsure whether to major in math or economics, for example, choose math; math is upwind of economics in the sense that it will be easier to switch later from math to economics than from economics to math. </p><p>面对不确定性时，另一件要做的事是做 “抗不确定性” 的选择。你越不确定该做什么，就越要选那些能给未来留更多选项的事。我称之为 “保持在上风处”。比如，如果你不确定该选数学还是经济学专业，就选数学 —— 数学相对于经济学处于 “上风”，因为日后从数学转经济学比从经济学转数学更容易。</p><p>There’s one case, though, where it’s easy to say whether you should work on what interests you the most: if you want to do great work. This is not a sufficient condition for doing great work, but it is a necessary one. </p><p>不过，有一种情况，“是否该做自己最感兴趣的事” 的答案很明确：如果你想做出伟大的成就。这不是做出伟大成就的充分条件，但却是必要条件。</p><p>There’s a lot of selection bias in advice about whether to “follow your passion,” and this is the reason. Most such advice comes from people who are famously successful, and if you ask someone who’s famously successful how to do what they did, most will tell you that you have to work on what you’re most interested in. And this is in fact true. </p><p>关于 “是否该追随激情” 的建议，存在很强的选择性偏差，这就是原因所在。大多数这类建议来自那些非常成功的人，如果你问一个极其成功的人如何取得成就，大多数人会告诉你，必须做自己最感兴趣的事。而这其实是事实。</p><p>That doesn’t mean it’s the right advice for everyone. Not everyone can do great work, or wants to. But if you do want to, the complicated question of whether or not to work on what interests you the most becomes simple. The answer is yes. The root of great work is a sort of ambitious curiosity, and you can’t manufacture that.     </p><p>但这并不意味着这对每个人都是正确的建议。不是每个人都能或都想做出伟大的成就。但如果你想，那么 “是否该做自己最感兴趣的事” 这个复杂的问题就会变得简单 —— 答案是 “是”。伟大成就的根源，是一种充满野心的好奇心，而这种好奇心是无法刻意制造的。</p><p>Notes </p><p>[1] These examples show why it’s a mistake to assume that economic inequality must be evidence of some kind of brokenness or unfairness. It’s obvious that different people have different interests, and that some interests yield far more money than others, so how can it not be obvious that some people will end up much richer than others? In a world where some people like to write enterprise software and others like to make studio pottery, economic inequality is the natural outcome. </p><p>[1] 这些例子说明，认为 “经济不平等一定是某种缺陷或不公的证据” 是错误的。显然，不同的人有不同的兴趣，有些兴趣能带来多得多的钱，那么有些人比其他人富有得多，这不也是显而易见的吗？在一个有人喜欢写企业软件、有人喜欢做工作室陶艺的世界里，经济不平等是自然的结果。</p><p>[2] Difficulty choosing between interests is a different matter. That’s not always due to ignorance. It’s often intrinsically difficult. I still have trouble doing it. </p><p>[2] 在不同兴趣之间难以抉择则是另一回事。这并不总是因为信息不足，往往本质上就很难。我至今也很难做到。</p><p>[3] You can’t always take people at their word on this. Since it’s more prestigious to work on things you’re interested in than to be driven by money, people who are driven mainly by money will often claim to be more interested in their work than they actually are. One way to test such claims is by doing the following thought experiment: if their work didn’t pay well, would they take day jobs doing something else in order to do it in their spare time? Lots of mathematicians and scientists and engineers would. Historically lots have. But I don’t think as many investment bankers would.</p><p>[3] 在这一点上，你不能总是轻信别人的话。因为 “为兴趣工作” 比 “为钱工作” 更体面，所以那些主要为钱工作的人，往往会宣称自己对工作的兴趣比实际更深。检验这种说法的一个方法是做这样一个思想实验：如果他们的工作薪水不高，他们会做一份其他的日常工作，以便在业余时间继续做这份工作吗？很多数学家、科学家和工程师会这么做。历史上很多人都是如此。但我觉得，投资银行家里这么做的人不会太多。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好的写作</title>
    <link href="/2025/07/14/good-wrting/"/>
    <url>/2025/07/14/good-wrting/</url>
    
    <content type="html"><![CDATA[<h2 id="GOOD-WRITING"><a href="#GOOD-WRITING" class="headerlink" title="GOOD WRITING"></a>GOOD WRITING</h2><p>原文链接: <a href="https://paulgraham.com/goodwriting.html">https://paulgraham.com/goodwriting.html</a></p><h3 id="一、听起来好-与-观点正确"><a href="#一、听起来好-与-观点正确" class="headerlink" title="一、听起来好 与 观点正确"></a>一、听起来好 与 观点正确</h3><p>There are two senses in which writing can be good: it can sound good, and the ideas can be right. It can have nice, flowing sentences, and it can draw correct conclusions about important things. It might seem as if these two kinds of good would be unrelated, like the speed of a car and the color it’s painted. And yet I don’t think they are. I think writing that sounds good is more likely to be right. </p><p>好的写作可以体现在两个方面：一是<strong>听起来好</strong>，二是<strong>思想正确</strong>。它可以拥有流畅优美的句子，也可以对重要事物得出正确的结论。乍看之下，这两种“好”似乎毫无关联，就像汽车的速度和它的颜色一样互不相干。然而，我认为它们并非如此。<strong>我认为听起来好的文字，更可能是正确的。</strong></p><p>So here we have the most exciting kind of idea: one that seems both preposterous and true. Let’s examine it. How can this possibly be true? </p><p>于是，我们遇到了最令人兴奋的那种观点：一个看似荒谬却又真实的想法。让我们仔细审视它——这怎么可能成立？</p><p>I know it’s true from writing. You can’t simultaneously optimize two unrelated things; when you push one far enough, you always end up sacrificing the other. And yet no matter how hard I push, I never find myself having to choose between the sentence that sounds best and the one that expresses an idea best. If I did, it would be frivolous to care how sentences sound. But in practice it feels the opposite of frivolous. Fixing sentences that sound bad seems to help get the ideas right. [1] </p><p>我从写作中知道这是真的。你无法同时优化两件毫无关联的事情；当你把其中一件事推到极致时，总会牺牲另一件。然而，无论我如何努力，我从未发现自己必须在“听起来最好的句子”和“表达思想最准确的句子”之间做选择。如果真是这样，纠结句子的音律就显得轻浮了。但实践中，这种感觉恰恰相反——<strong>修改听起来别扭的句子，似乎能帮助理清思想</strong>[1]</p><p>By right I mean more than just true. Getting the ideas right means developing them well — drawing the conclusions that matter most, and exploring each one to the right level of detail. So getting the ideas right is not just a matter of saying true things, but saying the right true things. </p><p>这里的“正确”不仅仅是“真实”。思想正确意味着充分发展它们——得出最重要的结论，并以恰当的细节层次展开。因此，思想正确不只是说真话，而是说出<strong>该说的真话</strong>。</p><p>How could trying to make sentences sound good help you do that? The clue to the answer is something I noticed 30 years ago when I was doing the layout for my first book. Sometimes when you’re laying out text you have bad luck. For example, you get a section that runs one line longer than the page. I don’t know what ordinary typesetters do in this situation, but what I did was rewrite the section to make it a line shorter. You’d expect such an arbitrary constraint to make the writing worse. But I found, to my surprise, that it never did. I always ended up with something I liked better. </p><p>为什么追求句子的音律能帮助做到这一点？答案的线索来自30年前我为第一本书排版时的发现。排版时偶尔会遇到厄运：比如某个章节比页面多出一行。我不知道普通排版师会怎么做，但我的解决方法是重写那段，让它缩短一行。这种武断的限制本该让文字变得更糟，但出乎意料的是，结果总是更好。</p><h3 id="二、文章的重力定律"><a href="#二、文章的重力定律" class="headerlink" title="二、文章的重力定律"></a>二、文章的重力定律</h3><p>I don’t think this was because my writing was especially careless. I think if you pointed to a random paragraph in anything written by anyone and told them to make it slightly shorter (or longer), they’d probably be able to come up with something better.</p><p>The best analogy for this phenomenon is when you shake a bin full of different objects. The shakes are arbitrary motions. Or more precisely, they’re not calculated to make any two specific objects fit more closely together. And yet repeated shaking inevitably makes the objects discover brilliantly clever ways of packing themselves. Gravity won’t let them become less tightly packed, so any change has to be a change for the better. [2] </p><p>我不认为这是因为我的写作特别粗心。我相信，如果随机指一段别人的文字并要求稍作删减（或扩充），他们很可能改得更好。</p><p>这种现象的最佳类比是摇晃装满杂物的箱子。摇晃是随机的动作，或者说，它并非为了让某两件物品更紧密贴合。然而，反复摇晃最终会让物品找到绝妙的排列方式。重力不允许它们松散，所以任何变化都只能是优化[2]。</p><p>So it is with writing. If you have to rewrite an awkward passage, you’ll never do it in a way that makes it less true. You couldn’t bear it, any more than gravity could bear things floating upward. So any change in the ideas has to be a change for the better. </p><p>写作也是如此。如果你必须重写一段拗口的文字，绝不会以牺牲真实性为代价。你无法忍受这种妥协，就像重力无法接受物体向上飘浮。因此，思想上的任何调整都只能是改进。</p><p>It’s obvious once you think about it. Writing that sounds good is more likely to be right for the same reason that a well-shaken bin is more likely to be tightly packed. But there’s something else going on as well. Sounding good isn’t just a random external force that leaves the ideas in an essay better off. It actually helps you to get them right. </p><p>细想之下，这显而易见。<strong>听起来好的文字更可能是正确的，就像摇晃充分的箱子更可能紧凑</strong>。但还有另一层原因：音律并非只是随机外力，被动地优化文章思想——它<strong>主动</strong>帮助你理清思路。</p><h3 id="三、好的文章是易读的"><a href="#三、好的文章是易读的" class="headerlink" title="三、好的文章是易读的"></a>三、好的文章是易读的</h3><p>The reason is that it makes the essay easier to read. It’s less work to read writing that flows well. How does that help the writer? Because the writer is the first reader. When I’m working on an essay, I spend far more time reading than writing. I’ll reread some parts 50 or 100 times, replaying the thoughts in them and asking myself, like someone sanding a piece of wood, does anything catch? Does anything feel wrong? And the easier the essay is to read, the easier it is to notice if something catches. </p><p>因为音律让文章更易读。流畅的文字减轻了阅读负担。这对作者有何帮助？因为<strong>作者是第一位读者</strong>。写文章时，我花在阅读上的时间远多于写作。某些段落我会重读50甚至100遍，反复咀嚼其中的思想，像打磨木头一样自问：是否有阻滞？是否有不对劲？文章越易读，越容易发现这些问题。</p><p>So yes, the two senses of good writing are connected in at least two ways. Trying to make writing sound good makes you fix mistakes unconsciously, and also helps you fix them consciously; it shakes the bin of ideas, and also makes mistakes easier to see. But now that we’ve dissolved one layer of preposterousness, I can’t resist adding another. Does sounding good do more than just help you get the ideas right? Is writing that sounds good inherently more likely to be right? Crazy as it may seem, I think that’s true too. </p><p>因此，好的写作的两个维度至少通过两种方式关联：追求音律能让你无意识地修正错误，也有助于有意识地改进；它既“摇晃思想的箱子”，又让错误更易察觉。但既然我们已经揭开了一层荒谬，我不妨再添一层：**音律的作用是否不止于辅助思想正确？听起来好的文字是否天生更可能是正确的？**尽管看似疯狂，我认为确实如此。</p><p>Obviously there’s a connection at the level of individual words. There are lots of words in English that sound like what they mean, often in wonderfully subtle ways. Glitter. Round. Scrape. Prim. Cavalcade. But the sound of good writing depends even more on the way you put words together, and there’s a connection at that level too. </p><p>显然，单个词汇层面就存在关联。英语中许多词的发音暗示其含义，且方式精妙至极。比如“glitter”（闪烁）、“round”（圆润）、“scrape”（刮擦）、“prim”（刻板）、“cavalcade”（队列）。但好文章的音律更多取决于词语组合方式，而这一层面同样存在联系。</p><h3 id="四、好的节奏产生好的文章"><a href="#四、好的节奏产生好的文章" class="headerlink" title="四、好的节奏产生好的文章"></a>四、好的节奏产生好的文章</h3><p>When writing sounds good, it’s mostly because it has good rhythm. But the rhythm of good writing is not the rhythm of music, or the meter of verse. It’s not so regular. If it were, it wouldn’t be good, because the rhythm of good writing has to match the ideas in it, and ideas have all kinds of different shapes. Sometimes they’re simple and you just state them. But other times they’re more subtle, and you need longer, more complicated sentences to tease out all the implications. </p><p>文章听起来好，主要因其节奏得当。但优秀写作的节奏并非音乐的韵律或诗歌的格律，它没那么规整。如果规整，反而不好，因为好文章的节奏必须匹配其中的思想，而思想的形态千差万别。有时它们简单直接，只需陈述；有时则微妙复杂，需要更长的句子梳理全部内涵。</p><p>An essay is a cleaned up train of thought, in the same way dialogue is cleaned up conversation, and a train of thought has a natural rhythm. So when an essay sounds good, it’s not merely because it has a pleasing rhythm, but because it has its natural one. Which means you can use getting the rhythm right as a heuristic for getting the ideas right. And not just in principle: good writers do both simultaneously as a matter of course. Often I don’t even distinguish between the two problems. I just think Ugh, this doesn’t sound right; what do I mean to say here? [3] </p><p>文章是整理过的思路轨迹，如同对白是加工过的对话，而思路自有其自然节奏。因此，文章音律好不仅因为节奏悦耳，更因为节奏<strong>自然</strong>。这意味着你可以把节奏正确作为思想正确的启发式标准。而且不仅是理论上的——优秀作者在实践中会同步解决这两个问题。我常甚至不区分它们，只是觉得“呃，这里听起来不对——我到底想说什么？”[3]</p><p>The sound of writing turns out to be more like the shape of a plane than the color of a car. If it looks good, as Kelly Johnson used to say, it will fly well. </p><p>最终，文字的音律更像飞机的气动外形，而非汽车的颜色。正如凯利·约翰逊所言：“如果它看起来对，飞起来就不会差。”</p><p>This is only true of writing that’s used to develop ideas, though. It doesn’t apply when you have ideas in some other way and then write about them afterward — for example, if you build something, or conduct an experiment, and then write a paper about it. In such cases the ideas often live more in the work than the writing, so the writing can be bad even though the ideas are good. The writing in textbooks and popular surveys can be bad for the same reason: the author isn’t developing the ideas, merely describing other people’s. It’s only when you’re writing to develop ideas that there’s such a close connection between the two senses of doing it well. </p><p>不过，这仅适用于<strong>用于发展思想的写作</strong>。如果你通过其他方式（比如建造某物或做实验）获得思想后再写成文章，音律与思想的关联就会减弱。这类情况下，思想更多存在于工作中而非文字里，因此文章可能糟糕但思想正确。教科书和科普读物的文字不佳也源于此——作者并非发展思想，只是转述他人。<strong>唯有当你通过写作探索思想时，两种“好”才会紧密相连。</strong></p><h3 id="五、内部一致与真实的重合"><a href="#五、内部一致与真实的重合" class="headerlink" title="五、内部一致与真实的重合"></a>五、内部一致与真实的重合</h3><p>Ok, many people will be thinking, this seems plausible so far, but what about liars? Is it not notoriously possible for a smooth-tongued liar to write something beautiful that’s completely false? </p><p>读到此处，许多人会想：目前为止还算合理，但骗子呢？巧舌如簧的骗子难道不能写出优美而完全虚假的文字吗？</p><p>It is, of course. But not without method acting. The way to write something beautiful and false is to begin by making yourself almost believe it. So just like someone writing something beautiful and true, you’re presenting a perfectly-formed train of thought. The difference is the point where it attaches to the world. You’re saying something that would be true if certain false premises were. If for some bizarre reason the number of jobs in a country were fixed, then immigrants really would be taking our jobs. </p><p>当然可以。但前提是<strong>方法派演技</strong>。写出美丽谎言的方法，是先让自己几乎相信它。因此，与写出美丽真理的人一样，你呈现的是一段完美成型的思路。区别在于它和现实的连接点——你描述的是一种在虚假前提下成立的真实。比如，如果某国工作岗位数量固定（尽管这荒诞），那么移民确实会“抢走我们的工作”。</p><p>So it’s not quite right to say that better sounding writing is more likely to be true. Better sounding writing is more likely to be internally consistent. If the writer is honest, internal consistency and truth converge. But while we can’t safely conclude that beautiful writing is true, it’s usually safe to conclude the converse: something that seems clumsily written will usually have gotten the ideas wrong too. </p><p>因此，“音律好的文字更可能真实”并不完全准确。更准确的说法是：<strong>音律好的文字更可能内部一致</strong>。如果作者诚实，内部一致与真实自会重合。</p><p>Indeed, the two senses of good writing are more like two ends of the same thing. The connection between them is not a rigid one; the goodness of good writing is not a rod but a rope, with multiple overlapping connections running through it. But it’s hard to move one end without moving the other. It’s hard to be right without sounding right.</p><p>虽然我们不能断言优美文字必然真实，但通常可以安全地反推：<strong>笨拙的文字往往思想也有问题</strong>。</p><p>事实上，好的写作的两个维度更像是同一事物的两端。它们的联系并非 rigid（僵硬的杆），而是 rope（柔韧的绳），内含多重交织的关联。但你很难只移动一端而不牵动另一端。<strong>很难正确而不听起来正确。</strong></p><p>Notes </p><p>[1] The closest thing to an exception is when you have to go back and insert a new point into the middle of something you’ve written. This often messes up the flow, sometimes in ways you can never quite repair. But I think the ultimate source of this problem is that ideas are tree-shaped and essays are linear. You inevitably run into difficulties when you try to cram the former into the latter. Frankly it’s surprising how much you can get away with. But even so you sometimes have to resort to an endnote. </p><p>[1] 最接近例外的情况是：当你需要在已写好的内容中插入新观点时，常会破坏行文流畅性，有时甚至无法完全修复。我认为根本原因在于思想是树状结构，而文章是线性的。将前者塞进后者时难免遇到困难。说实话，能勉强做到的程度已令人惊讶。但即便如此，有时你仍不得不借助尾注。</p><p>[2] Obviously if you shake the bin hard enough the objects in it can become less tightly packed. And similarly, if you imposed some huge external constraint on your writing, like using alternating one and two syllable words, the ideas would start to suffer. </p><p>[2] 显然，如果摇晃过于剧烈，箱内物品反而会变松散。同理，如果对写作施加某些极端限制（比如交替使用单双音节词），思想就会受损。</p><p>[3] Bizarrely enough, this happened in the writing of this very paragraph. An earlier version shared several phrases in common with the preceding paragraph, and the repetition bugged me each time I reread it. When I got annoyed enough to fix it, I discovered that the repetition reflected a problem in the underlying ideas, and I fixed both simultaneously.</p><p>[3] 诡异的是，这段文字的写作过程就印证了这一点。初稿与前一段有多个重复短语，每次重读都让我不适。当我终于忍无可忍去修改时，发现重复反映了底层思想的问题，于是同步修正了两者。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
