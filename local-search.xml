<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优秀的黑客</title>
    <link href="/2025/08/19/great-hackers/"/>
    <url>/2025/08/19/great-hackers/</url>
    
    <content type="html"><![CDATA[<h1 id="Great-Hackers"><a href="#Great-Hackers" class="headerlink" title="Great Hackers"></a>Great Hackers</h1><p>原文链接: <a href="https://paulgraham.com/gh.html">https://paulgraham.com/gh.html</a></p><p>July 2004</p><p>(This essay is derived from a talk at Oscon 2004.)<br>（本文改编自 2004 年在 Oscon 大会上的演讲。）</p><p>A few months ago I finished a new book, and in reviews I keep noticing words like “provocative’’ and “controversial.’’ To say nothing of “idiotic.’’<br>几个月前我完成了一本新书，在书评中，我总能看到 “挑衅性的”“有争议的” 这类词，更别提 “愚蠢的” 了。</p><p>I didn’t mean to make the book controversial. I was trying to make it efficient. I didn’t want to waste people’s time telling them things they already knew. It’s more efficient just to give them the diffs. But I suppose that’s bound to yield an alarming book.<br>我并非有意让这本书引发争议，只是想让它更高效 —— 不想浪费读者的时间去讲他们已经知道的事，直接给出 “差异点” 会更高效。但我猜，这样写难免会让书显得 “扎眼”。</p><h3 id="Edisons"><a href="#Edisons" class="headerlink" title="Edisons"></a><strong>Edisons</strong></h3><p><strong>爱迪生们</strong></p><p>There’s no controversy about which idea is most controversial: the suggestion that variation in wealth might not be as big a problem as we think.<br>书中最具争议的观点毫无争议：财富差异或许没我们想的那么大问题。</p><p>I didn’t say in the book that variation in wealth was in itself a good thing. I said in some situations it might be a sign of good things. A throbbing headache is not a good thing, but it can be a sign of a good thing– for example, that you’re recovering consciousness after being hit on the head.<br>我在书中并没有说财富差异本身是好事，而是说在某些情况下，它可能是好事的信号。剧烈头痛不是好事，但它可能意味着好事 —— 比如，你头部受击后正在恢复意识。</p><p>Variation in wealth can be a sign of variation in productivity. (In a society of one, they’re identical.) And that is almost certainly a good thing: if your society has no variation in productivity, it’s probably not because everyone is Thomas Edison. It’s probably because you have no Thomas Edisons.<br>财富差异可能是生产力差异的体现（在只有一个人的社会里，两者是一回事）。而生产力差异几乎肯定是好事：如果一个社会的生产力毫无差异，大概率不是因为每个人都是托马斯・爱迪生，而是因为根本没有爱迪生那样的人。</p><p>In a low-tech society you don’t see much variation in productivity. If you have a tribe of nomads collecting sticks for a fire, how much more productive is the best stick gatherer going to be than the worst? A factor of two? Whereas when you hand people a complex tool like a computer, the variation in what they can do with it is enormous.<br>在低技术社会，生产力差异不大。如果有一群游牧部落的人捡柴生火，最能干的捡柴人比最差的能强多少？两倍？但当你给人们一台像电脑这样复杂的工具时，他们用它能做出的成果差异就大得惊人了。</p><p>That’s not a new idea. Fred Brooks wrote about it in 1974, and the study he quoted was published in 1968. But I think he underestimated the variation between programmers. He wrote about productivity in lines of code: the best programmers can solve a given problem in a tenth the time. But what if the problem isn’t given? In programming, as in many fields, the hard part isn’t solving problems, but deciding what problems to solve. Imagination is hard to measure, but in practice it dominates the kind of productivity that’s measured in lines of code.<br>这不是什么新观点。弗雷德・布鲁克斯在 1974 年就写过相关内容，他引用的研究发表于 1968 年。但我觉得他低估了程序员之间的差异。他用代码行数衡量生产力：最优秀的程序员解决特定问题的时间是其他人的十分之一。但如果问题不是 “给定的” 呢？在编程领域，和许多其他领域一样，难的不是解决问题，而是决定要解决什么问题。想象力难以衡量，但实际上，它对生产力的影响远超过代码行数这种衡量方式。</p><p>Productivity varies in any field, but there are few in which it varies so much. The variation between programmers is so great that it becomes a difference in kind. I don’t think this is something intrinsic to programming, though. In every field, technology magnifies differences in productivity. I think what’s happening in programming is just that we have a lot of technological leverage. But in every field the lever is getting longer, so the variation we see is something that more and more fields will see as time goes on. And the success of companies, and countries, will depend increasingly on how they deal with it.<br>任何领域都存在生产力差异，但很少有领域的差异大到这种程度。程序员之间的差异如此显著，甚至成了 “质” 的不同。不过我不认为这是编程本身固有的特性。在所有领域，技术都会放大生产力差异。编程领域的情况只是因为我们拥有强大的技术杠杆。但每个领域的 “杠杆” 都在变长，所以这种差异会随着时间推移出现在越来越多的领域。公司乃至国家的成功，将越来越取决于它们如何应对这种差异。</p><p>If variation in productivity increases with technology, then the contribution of the most productive individuals will not only be disproportionately large, but will actually grow with time. When you reach the point where 90% of a group’s output is created by 1% of its members, you lose big if something (whether Viking raids, or central planning) drags their productivity down to the average.<br>如果生产力差异随技术发展而扩大，那么最高效个体的贡献不仅会大得不成比例，还会随时间增长。当一个群体 90% 的产出来自 1% 的成员时，若有什么因素（无论是维京人的劫掠，还是中央计划）把这些人的生产力拉到平均水平，损失就太大了。</p><p>If we want to get the most out of them, we need to understand these especially productive people. What motivates them? What do they need to do their jobs? How do you recognize them? How do you get them to come and work for you? And then of course there’s the question, how do you become one?<br>如果想充分发挥他们的潜力，我们需要理解这些高效个体：他们的动力是什么？工作需要什么条件？如何识别他们？如何让他们来为你工作？当然，还有一个问题：如何成为他们中的一员？</p><h3 id="More-than-Money"><a href="#More-than-Money" class="headerlink" title="More than Money"></a><strong>More than Money</strong></h3><p><strong>不止是钱</strong></p><p>I know a handful of super-hackers, so I sat down and thought about what they have in common. Their defining quality is probably that they really love to program. Ordinary programmers write code to pay the bills. Great hackers think of it as something they do for fun, and which they’re delighted to find people will pay them for.<br>我认识几个超级黑客，于是坐下来思考他们的共同点。他们最显著的特质或许是真心热爱编程。普通程序员写代码是为了谋生，而优秀的黑客则视编程为乐趣，能靠这个赚钱还让他们很开心。</p><p>Great programmers are sometimes said to be indifferent to money. This isn’t quite true. It is true that all they really care about is doing interesting work. But if you make enough money, you get to work on whatever you want, and for that reason hackers are attracted by the idea of making really large amounts of money. But as long as they still have to show up for work every day, they care more about what they do there than how much they get paid for it.<br>人们有时说优秀的程序员对金钱漠不关心，这并不完全对。他们确实只在乎做有趣的工作，但如果你赚了足够多的钱，就能做任何想做的事 —— 因此黑客们其实也向往赚大钱。但只要还得每天上班，他们就更在乎工作内容，而非报酬多少。</p><p>Economically, this is a fact of the greatest importance, because it means you don’t have to pay great hackers anything like what they’re worth. A great programmer might be ten or a hundred times as productive as an ordinary one, but he’ll consider himself lucky to get paid three times as much. As I’ll explain later, this is partly because great hackers don’t know how good they are. But it’s also because money is not the main thing they want.<br>从经济角度看，这一点极其重要：你不必按优秀黑客的实际价值付薪。一个优秀程序员的生产力可能是普通程序员的 10 倍甚至 100 倍，但如果能拿到 3 倍工资，他就觉得很幸运了。后面我会解释，部分原因是优秀黑客不知道自己有多厉害，更重要的是，钱不是他们最想要的。</p><p>What do hackers want? Like all craftsmen, hackers like good tools. In fact, that’s an understatement. Good hackers find it unbearable to use bad tools. They’ll simply refuse to work on projects with the wrong infrastructure.<br>黑客想要什么？和所有工匠一样，他们喜欢好工具。其实这么说都太保守了。优秀的黑客无法忍受用烂工具，遇到基础设施不行的项目，他们会直接拒绝参与。</p><p>At a startup I once worked for, one of the things pinned up on our bulletin board was an ad from IBM. It was a picture of an AS400, and the headline read, I think, “hackers despise it.’’ [1]<br>我曾工作过的一家创业公司，布告栏上贴过一张 IBM 的广告，上面是 AS400 的图片，标题我记得是 “黑客鄙视它”。[1]</p><p>When you decide what infrastructure to use for a project, you’re not just making a technical decision. You’re also making a social decision, and this may be the more important of the two. For example, if your company wants to write some software, it might seem a prudent choice to write it in Java. But when you choose a language, you’re also choosing a community. The programmers you’ll be able to hire to work on a Java project won’t be as smart as the ones you could get to work on a project written in Python. And the quality of your hackers probably matters more than the language you choose. Though, frankly, the fact that good hackers prefer Python to Java should tell you something about the relative merits of those languages.<br>为项目选择基础设施时，你不只是做技术决策，更是在做社会决策 —— 后者可能更重要。比如，公司要开发软件，用 Java 似乎是稳妥的选择。但选择编程语言时，你也在选择一个社区。能雇来做 Java 项目的程序员，可能不如能雇来做 Python 项目的聪明。而黑客的质量，可能比编程语言的选择更重要。不过说实话，优秀黑客更喜欢 Python 而非 Java，这本身就说明了两种语言的相对优劣。</p><p>Business types prefer the most popular languages because they view languages as standards. They don’t want to bet the company on Betamax. The thing about languages, though, is that they’re not just standards. If you have to move bits over a network, by all means use TCP&#x2F;IP. But a programming language isn’t just a format. A programming language is a medium of expression.<br>商界人士喜欢最流行的语言，因为他们视语言为标准，不想把公司押在 “Beta 制大尺寸磁带”（指小众标准）上。但语言不只是标准。如果要在网络上传输数据，用 TCP&#x2F;IP 没问题，但编程语言不只是一种格式，它是一种表达媒介。</p><p>I’ve read that Java has just overtaken Cobol as the most popular language. As a standard, you couldn’t wish for more. But as a medium of expression, you could do a lot better. Of all the great programmers I can think of, I know of only one who would voluntarily program in Java. And of all the great programmers I can think of who don’t work for Sun, on Java, I know of zero.<br>我看到报道说 Java 刚超过 Cobol 成为最流行的语言。作为标准，它无可挑剔，但作为表达媒介，还有很大提升空间。在我能想到的所有优秀程序员中，只有一个人会自愿用 Java 编程。而在那些不为 Sun 公司工作、不做 Java 相关项目的优秀程序员里，这个数字是零。</p><p>Great hackers also generally insist on using open source software. Not just because it’s better, but because it gives them more control. Good hackers insist on control. This is part of what makes them good hackers: when something’s broken, they need to fix it. You want them to feel this way about the software they’re writing for you. You shouldn’t be surprised when they feel the same way about the operating system.<br>优秀的黑客通常还坚持用开源软件，不仅因为开源更好，还因为它能给他们更多控制权。优秀的黑客执着于掌控 —— 这也是他们优秀的原因之一：东西坏了，他们就得修好。你希望他们对给你写的软件有这种态度，那么他们对操作系统有同样的态度，也不足为奇。</p><p>A couple years ago a venture capitalist friend told me about a new startup he was involved with. It sounded promising. But the next time I talked to him, he said they’d decided to build their software on Windows NT, and had just hired a very experienced NT developer to be their chief technical officer. When I heard this, I thought, these guys are doomed. One, the CTO couldn’t be a first rate hacker, because to become an eminent NT developer he would have had to use NT voluntarily, multiple times, and I couldn’t imagine a great hacker doing that; and two, even if he was good, he’d have a hard time hiring anyone good to work for him if the project had to be built on NT. [2]<br>几年前，一个风投朋友跟我说他参与的一家新创业公司，听起来很有前景。但下次见面时，他说他们决定基于 Windows NT 开发软件，还雇了一个经验丰富的 NT 开发者当首席技术官。我一听就觉得，这公司完了。一来，这个 CTO 不可能是一流黑客 —— 要成为知名的 NT 开发者，就得自愿多次使用 NT，而我无法想象优秀的黑客会这么做；二来，就算他很厉害，项目要基于 NT 开发，也很难招到优秀的人。[2]</p><h3 id="The-Final-Frontier"><a href="#The-Final-Frontier" class="headerlink" title="The Final Frontier"></a><strong>The Final Frontier</strong></h3><p><strong>最后的前沿</strong></p><p>After software, the most important tool to a hacker is probably his office. Big companies think the function of office space is to express rank. But hackers use their offices for more than that: they use their office as a place to think in. And if you’re a technology company, their thoughts are your product. So making hackers work in a noisy, distracting environment is like having a paint factory where the air is full of soot.<br>除了软件，黑客最重要的工具可能是他的办公室。大公司认为办公空间的作用是彰显等级，但黑客对办公室的使用不止于此 —— 他们把办公室当作思考的地方。如果你是科技公司，他们的想法就是你的产品。所以让黑客在嘈杂、易分心的环境中工作，就像在油漆厂让空气里满是煤烟。</p><p>The cartoon strip Dilbert has a lot to say about cubicles, and with good reason. All the hackers I know despise them. The mere prospect of being interrupted is enough to prevent hackers from working on hard problems. If you want to get real work done in an office with cubicles, you have two options: work at home, or come in early or late or on a weekend, when no one else is there. Don’t companies realize this is a sign that something is broken? An office environment is supposed to be something that helps you work, not something you work despite.<br>漫画《呆伯特》里对隔间有很多吐槽，这是有道理的。我认识的所有黑客都鄙视隔间。仅仅是可能被打扰，就足以让黑客无法解决难题。如果想在有隔间的办公室里真正完成工作，只有两个选择：在家工作，或者在其他人不在的时候（早到、晚走、周末）来公司。公司难道没意识到这说明哪里出问题了吗？办公环境本该是助力工作的，而不是需要克服的障碍。</p><p>Companies like Cisco are proud that everyone there has a cubicle, even the CEO. But they’re not so advanced as they think; obviously they still view office space as a badge of rank. Note too that Cisco is famous for doing very little product development in house. They get new technology by buying the startups that created it– where presumably the hackers did have somewhere quiet to work.<br>像思科这样的公司，会为 “包括 CEO 在内所有人都用隔间” 而自豪，但他们并没有自己想的那么先进 —— 显然他们仍把办公空间当作等级的象征。还要注意，思科以很少在内部做产品开发闻名，他们通过收购创造新技术的创业公司来获取技术 —— 而那些创业公司里的黑客，想必有安静的地方工作。</p><p>One big company that understands what hackers need is Microsoft. I once saw a recruiting ad for Microsoft with a big picture of a door. Work for us, the premise was, and we’ll give you a place to work where you can actually get work done. And you know, Microsoft is remarkable among big companies in that they are able to develop software in house. Not well, perhaps, but well enough.<br>有一家大公司懂黑客的需求，那就是微软。我曾见过微软的招聘广告，上面是一扇门的大图，大意是：来为我们工作，我们给你一个能真正完成工作的地方。要知道，在大公司里，微软能在内部开发软件是很厉害的 —— 或许做得不算顶尖，但足够好了。</p><p>If companies want hackers to be productive, they should look at what they do at home. At home, hackers can arrange things themselves so they can get the most done. And when they work at home, hackers don’t work in noisy, open spaces; they work in rooms with doors. They work in cosy, neighborhoody places with people around and somewhere to walk when they need to mull something over, instead of in glass boxes set in acres of parking lots. They have a sofa they can take a nap on when they feel tired, instead of sitting in a coma at their desk, pretending to work. There’s no crew of people with vacuum cleaners that roars through every evening during the prime hacking hours. There are no meetings or, God forbid, corporate retreats or team-building exercises. And when you look at what they’re doing on that computer, you’ll find it reinforces what I said earlier about tools. They may have to use Java and Windows at work, but at home, where they can choose for themselves, you’re more likely to find them using Perl and Linux.<br>如果公司想让黑客高效工作，应该看看他们在家怎么做。在家时，黑客会自己安排环境以高效工作：他们不在嘈杂的开放空间工作，而是在带门的房间；在舒适、有邻里感的地方工作，周围有人，想琢磨事情时能散步，而不是在停车场环绕的玻璃盒子里；累了能在沙发上小睡，而不是在办公桌前昏昏沉沉地假装工作；没有清洁工在晚上的黄金编程时间轰隆隆地用吸尘器；没有会议，更别提公司团建或拓展了。再看他们在家用电脑做什么，会印证我之前说的工具问题：他们在工作中可能不得不使用 Java 和 Windows，但在家能自主选择时，更可能用 Perl 和 Linux。</p><p>Indeed, these statistics about Cobol or Java being the most popular language can be misleading. What we ought to look at, if we want to know what tools are best, is what hackers choose when they can choose freely– that is, in projects of their own. When you ask that question, you find that open source operating systems already have a dominant market share, and the number one language is probably Perl.<br>其实，Cobol 或 Java 是最流行语言的统计数据可能有误导性。如果想知道什么工具最好，应该看黑客在能自由选择时 —— 也就是在自己的项目中 —— 会选什么。这时你会发现，开源操作系统已占据主导地位，而最受欢迎的语言可能是 Perl。</p><h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a><strong>Interesting</strong></h3><p><strong>有趣的事</strong></p><p>Along with good tools, hackers want interesting projects. What makes a project interesting? Well, obviously overtly sexy applications like stealth planes or special effects software would be interesting to work on. But any application can be interesting if it poses novel technical challenges. So it’s hard to predict which problems hackers will like, because some become interesting only when the people working on them discover a new kind of solution. Before ITA (who wrote the software inside Orbitz), the people working on airline fare searches probably thought it was one of the most boring applications imaginable. But ITA made it interesting by redefining the problem in a more ambitious way.<br>除了好工具，黑客还想要有趣的项目。什么让项目有趣？显然，像隐形飞机或特效软件这样 “酷炫” 的应用会很有趣，但任何应用只要有新颖的技术挑战，就可能变得有趣。所以很难预测黑客会喜欢什么问题，因为有些问题只有在解决者找到新解法时才变得有趣。在 ITA（Orbitz 的内部软件开发者）之前，做机票价格搜索的人可能觉得这是最无聊的应用之一，但 ITA 通过更有野心地重新定义问题，让它变得有趣了。</p><p>I think the same thing happened at Google. When Google was founded, the conventional wisdom among the so-called portals was that search was boring and unimportant. But the guys at Google didn’t think search was boring, and that’s why they do it so well.<br>谷歌的情况也类似。谷歌成立时，所谓的门户网站普遍认为搜索既无聊又不重要，但谷歌的人不觉得搜索无聊，所以他们才能做得这么好。</p><p>This is an area where managers can make a difference. Like a parent saying to a child, I bet you can’t clean up your whole room in ten minutes, a good manager can sometimes redefine a problem as a more interesting one. Steve Jobs seems to be particularly good at this, in part simply by having high standards. There were a lot of small, inexpensive computers before the Mac. He redefined the problem as: make one that’s beautiful. And that probably drove the developers harder than any carrot or stick could.<br>这是管理者能发挥作用的地方。就像家长对孩子说 “我打赌你十分钟内收拾不好整个房间”，优秀的管理者有时能把问题重新定义得更有趣。史蒂夫・乔布斯在这方面尤其擅长，部分原因是他标准极高。在 Mac 之前，有很多小型廉价电脑，他把问题重新定义为 “做一台漂亮的电脑”，这对开发者的驱动力可能比任何奖惩都强。</p><p>They certainly delivered. When the Mac first appeared, you didn’t even have to turn it on to know it would be good; you could tell from the case. A few weeks ago I was walking along the street in Cambridge, and in someone’s trash I saw what appeared to be a Mac carrying case. I looked inside, and there was a Mac SE. I carried it home and plugged it in, and it booted. The happy Macintosh face, and then the finder. My God, it was so simple. It was just like … Google.<br>他们确实做到了。Mac 刚出现时，甚至不用开机就知道它很棒，从外壳就能看出来。几周前我在剑桥的街上走，在别人的垃圾桶里看到一个像是 Mac 的包，打开一看是一台 Mac SE。我带回家插上电，它启动了 —— 出现了苹果的笑脸，然后是 finder 界面。天啊，太简单了，就像…… 谷歌。</p><p>Hackers like to work for people with high standards. But it’s not enough just to be exacting. You have to insist on the right things. Which usually means that you have to be a hacker yourself. I’ve seen occasional articles about how to manage programmers. Really there should be two articles: one about what to do if you are yourself a programmer, and one about what to do if you’re not. And the second could probably be condensed into two words: give up.<br>黑客喜欢为高标准的人工作，但光严格还不够，必须坚持对的事 —— 这通常意味着你自己也得是黑客。我偶尔会看到关于 “如何管理程序员” 的文章，其实应该分两篇：一篇给本身是程序员的管理者，一篇给不是的。后者或许可以浓缩成两个字：放弃。</p><p>The problem is not so much the day to day management. Really good hackers are practically self-managing. The problem is, if you’re not a hacker, you can’t tell who the good hackers are. A similar problem explains why American cars are so ugly. I call it the design paradox. You might think that you could make your products beautiful just by hiring a great designer to design them. But if you yourself don’t have good taste, how are you going to recognize a good designer? By definition you can’t tell from his portfolio. And you can’t go by the awards he’s won or the jobs he’s had, because in design, as in most fields, those tend to be driven by fashion and schmoozing, with actual ability a distant third. There’s no way around it: you can’t manage a process intended to produce beautiful things without knowing what beautiful is. American cars are ugly because American car companies are run by people with bad taste.<br>问题不在于日常管理 —— 真正优秀的黑客几乎能自我管理。问题是，如果你不是黑客，就无法识别谁是优秀的黑客。类似的问题解释了为什么美国车这么丑，我称之为 “设计悖论”。你可能觉得雇个伟大的设计师就能做出漂亮的产品，但如果你自己审美不行，怎么识别优秀的设计师？按理说，你从他的作品集里看不出来，也不能看他得过什么奖或做过什么工作 —— 因为在设计领域，和多数领域一样，这些往往由潮流和人脉驱动，实际能力排第三。没办法：如果不知道 “美” 是什么，就无法管理一个旨在产出美的过程。美国车丑，是因为美国汽车公司的管理者审美差。</p><p>Many people in this country think of taste as something elusive, or even frivolous. It is neither. To drive design, a manager must be the most demanding user of a company’s products. And if you have really good taste, you can, as Steve Jobs does, make satisfying you the kind of problem that good people like to work on.<br>这个国家很多人认为审美难以捉摸，甚至无关紧要，其实都不是。要推动设计，管理者必须是公司产品最挑剔的用户。如果你真的很有审美，就能像乔布斯那样，让 “满足你” 成为优秀人才愿意为之努力的问题。</p><h3 id="Nasty-Little-Problems"><a href="#Nasty-Little-Problems" class="headerlink" title="Nasty Little Problems"></a><strong>Nasty Little Problems</strong></h3><p><strong>讨厌的小问题</strong></p><p>It’s pretty easy to say what kinds of problems are not interesting: those where instead of solving a few big, clear, problems, you have to solve a lot of nasty little ones. One of the worst kinds of projects is writing an interface to a piece of software that’s full of bugs. Another is when you have to customize something for an individual client’s complex and ill-defined needs. To hackers these kinds of projects are the death of a thousand cuts.<br>很容易说哪些问题不有趣：不是解决几个大而清晰的问题，而是要解决一堆讨厌的小问题。最糟糕的项目之一是给充满漏洞的软件写接口，另一个是为个别客户复杂且模糊的需求定制东西。对黑客来说，这类项目是 “千刀万剐” 式的折磨。</p><p>The distinguishing feature of nasty little problems is that you don’t learn anything from them. Writing a compiler is interesting because it teaches you what a compiler is. But writing an interface to a buggy piece of software doesn’t teach you anything, because the bugs are random. [3] So it’s not just fastidiousness that makes good hackers avoid nasty little problems. It’s more a question of self-preservation. Working on nasty little problems makes you stupid. Good hackers avoid it for the same reason models avoid cheeseburgers.<br>讨厌的小问题的特点是，你从中学不到任何东西。写编译器很有趣，因为能让你理解编译器是什么，但给有漏洞的软件写接口学不到东西，因为漏洞是随机的。[3] 所以优秀的黑客避开这些小问题，不只是因为挑剔，更是自我保护 —— 做这些事会让人变蠢。优秀黑客避开它们，就像模特避开芝士汉堡一样。</p><p>Of course some problems inherently have this character. And because of supply and demand, they pay especially well. So a company that found a way to get great hackers to work on tedious problems would be very successful. How would you do it?<br>当然，有些问题本身就有这种特质，而且因为供需关系，报酬特别高。所以如果公司能让优秀黑客去做枯燥的问题，会非常成功。怎么做呢？</p><p>One place this happens is in startups. At our startup we had Robert Morris working as a system administrator. That’s like having the Rolling Stones play at a bar mitzvah. You can’t hire that kind of talent. But people will do any amount of drudgery for companies of which they’re the founders. [4]<br>创业公司里会有这种情况。我们创业时，罗伯特・莫里斯做系统管理员，这就像让滚石乐队在成人礼上表演 —— 你雇不来这种人才，但创始人会为自己的公司做任何枯燥的事。[4]</p><p>Bigger companies solve the problem by partitioning the company. They get smart people to work for them by establishing a separate R&amp;D department where employees don’t have to work directly on customers’ nasty little problems. [5] In this model, the research department functions like a mine. They produce new ideas; maybe the rest of the company will be able to use them.<br>大公司通过拆分公司来解决这个问题：设立独立的研发部门，让员工不用直接处理客户那些讨厌的小问题，以此吸引聪明人。[5] 在这种模式下，研发部门就像矿场，产出新想法，公司其他部门或许能用上。</p><p>You may not have to go to this extreme. Bottom-up programming suggests another way to partition the company: have the smart people work as toolmakers. If your company makes software to do x, have one group that builds tools for writing software of that type, and another that uses these tools to write the applications. This way you might be able to get smart people to write 99% of your code, but still keep them almost as insulated from users as they would be in a traditional research department. The toolmakers would have users, but they’d only be the company’s own developers. [6]<br>或许不用这么极端。自底向上的编程方式提供了另一种拆分方式：让聪明人做工具制造者。如果公司做 x 类软件，就分一组人开发写这类软件的工具，另一组用这些工具写应用。这样，聪明人可能写出 99% 的代码，同时几乎像在传统研发部门一样不受用户干扰 —— 工具制造者有用户，但只有公司自己的开发者。[6]</p><p>If Microsoft used this approach, their software wouldn’t be so full of security holes, because the less smart people writing the actual applications wouldn’t be doing low-level stuff like allocating memory. Instead of writing Word directly in C, they’d be plugging together big Lego blocks of Word-language. (Duplo, I believe, is the technical term.)<br>如果微软用这种方式，他们的软件就不会有这么多安全漏洞，因为写实际应用的不那么聪明的人就不用做内存分配之类的底层工作。他们不会直接用 C 写 Word，而是把 “Word 语言” 的大乐高积木拼起来（我觉得技术上应该叫 “得宝”）。</p><h3 id="Clumping"><a href="#Clumping" class="headerlink" title="Clumping"></a><strong>Clumping</strong></h3><p><strong>聚集</strong></p><p>Along with interesting problems, what good hackers like is other good hackers. Great hackers tend to clump together– sometimes spectacularly so, as at Xerox Parc. So you won’t attract good hackers in linear proportion to how good an environment you create for them. The tendency to clump means it’s more like the square of the environment. So it’s winner take all. At any given time, there are only about ten or twenty places where hackers most want to work, and if you aren’t one of them, you won’t just have fewer great hackers, you’ll have zero.<br>除了有趣的问题，优秀的黑客还喜欢其他优秀的黑客。伟大的黑客往往聚集在一起 —— 有时非常显著，比如施乐帕洛阿尔托研究中心。所以你为他们创造的环境有多好，吸引优秀黑客的数量并非线性增长，聚集效应意味着更接近环境质量的平方关系。因此是赢家通吃：任何时候，只有十来个或二十来个地方是黑客最想去的，如果你不在其中，就不只是优秀黑客少，而是一个都没有。</p><p>Having great hackers is not, by itself, enough to make a company successful. It works well for Google and ITA, which are two of the hot spots right now, but it didn’t help Thinking Machines or Xerox. Sun had a good run for a while, but their business model is a down elevator. In that situation, even the best hackers can’t save you.<br>有优秀的黑客本身并不足以让公司成功。谷歌和 ITA 现在是热门，这招对它们有用，但对 “思维机器” 公司或施乐没用。太阳微系统公司曾辉煌过，但商业模式走下坡路时，再好的黑客也救不了。</p><p>I think, though, that all other things being equal, a company that can attract great hackers will have a huge advantage. There are people who would disagree with this. When we were making the rounds of venture capital firms in the 1990s, several told us that software companies didn’t win by writing great software, but through brand, and dominating channels, and doing the right deals.<br>但我认为，在其他条件相同的情况下，能吸引优秀黑客的公司会有巨大优势。有人不同意这种说法。20 世纪 90 年代我们去风投公司融资时，有几家说软件公司的成功不靠写优秀软件，而靠品牌、渠道主导和做对交易。</p><p>They really seemed to believe this, and I think I know why. I think what a lot of VCs are looking for, at least unconsciously, is the next Microsoft. And of course if Microsoft is your model, you shouldn’t be looking for companies that hope to win by writing great software. But VCs are mistaken to look for the next Microsoft, because no startup can be the next Microsoft unless some other company is prepared to bend over at just the right moment and be the next IBM.<br>他们似乎真的相信这一点，我觉得我知道原因：很多风投至少潜意识里在找下一个微软。当然，如果以微软为榜样，就不该找那些希望靠写优秀软件取胜的公司。但风投找下一个微软是错的，因为除非有另一家公司准备好在恰当时刻 “弯腰” 成为下一个 IBM，否则没有创业公司能成为下一个微软。</p><p>It’s a mistake to use Microsoft as a model, because their whole culture derives from that one lucky break. Microsoft is a bad data point. If you throw them out, you find that good products do tend to win in the market. What VCs should be looking for is the next Apple, or the next Google.<br>以微软为榜样是错的，因为他们的整个文化都源于那次幸运的突破。微软是个不好的例子。抛开它，你会发现好产品往往能在市场上胜出。风投应该找的是下一个苹果，或下一个谷歌。</p><p>I think Bill Gates knows this. What worries him about Google is not the power of their brand, but the fact that they have better hackers. [7]<br>我觉得比尔・盖茨明白这一点。谷歌让他担心的不是品牌影响力，而是谷歌有更优秀的黑客。[7]</p><h3 id="Recognition"><a href="#Recognition" class="headerlink" title="Recognition"></a><strong>Recognition</strong></h3><p><strong>识别</strong></p><p>So who are the great hackers? How do you know when you meet one? That turns out to be very hard. Even hackers can’t tell. I’m pretty sure now that my friend Trevor Blackwell is a great hacker. You may have read on Slashdot how he made his own Segway. The remarkable thing about this project was that he wrote all the software in one day (in Python, incidentally).<br>那么，谁是优秀的黑客？遇到时怎么识别？这其实很难，连黑客自己都分不清。我现在很确定我的朋友特雷弗・布莱克韦尔是优秀的黑客。你可能在 Slashdot 上看到过他自己做赛格威的事，这个项目了不起的是，他一天就写完了所有软件（顺便说一句，用的是 Python）。</p><p>For Trevor, that’s par for the course. But when I first met him, I thought he was a complete idiot. He was standing in Robert Morris’s office babbling at him about something or other, and I remember standing behind him making frantic gestures at Robert to shoo this nut out of his office so we could go to lunch. Robert says he misjudged Trevor at first too. Apparently when Robert first met him, Trevor had just begun a new scheme that involved writing down everything about every aspect of his life on a stack of index cards, which he carried with him everywhere. He’d also just arrived from Canada, and had a strong Canadian accent and a mullet.<br>对特雷弗来说，这很平常。但我第一次见他时，觉得他是个彻头彻尾的白痴。他站在罗伯特・莫里斯的办公室里，对着罗伯特喋喋不休，我记得我站在他身后，疯狂地给罗伯特打手势，想把这个疯子赶出去好去吃午饭。罗伯特说他一开始也看错了特雷弗。显然，罗伯特第一次见他时，特雷弗刚搞了个新名堂：把生活方方面面的事都写在一叠索引卡上，走到哪带到哪。他刚从加拿大来，带着浓重的加拿大口音，留着胭脂鱼发型。</p><p>The problem is compounded by the fact that hackers, despite their reputation for social obliviousness, sometimes put a good deal of effort into seeming smart. When I was in grad school I used to hang around the MIT AI Lab occasionally. It was kind of intimidating at first. Everyone there spoke so fast. But after a while I learned the trick of speaking fast. You don’t have to think any faster; just use twice as many words to say everything.<br>更麻烦的是，尽管黑客以不懂社交闻名，有时却会费尽心机显得聪明。我读研究生时偶尔去麻省理工学院人工智能实验室逛，一开始有点吓人，那里的人说话都超快。但过了一阵子，我学会了说话快的诀窍：不用想更快，只要说每件事都用两倍的词就行。</p><p>With this amount of noise in the signal, it’s hard to tell good hackers when you meet them. I can’t tell, even now. You also can’t tell from their resumes. It seems like the only way to judge a hacker is to work with him on something.<br>信号里有这么多噪音，见面时很难判断谁是优秀的黑客，我现在也做不到。从简历里也看不出来。似乎只有和他一起做件事才能判断。</p><p>And this is the reason that high-tech areas only happen around universities. The active ingredient here is not so much the professors as the students. Startups grow up around universities because universities bring together promising young people and make them work on the same projects. The smart ones learn who the other smart ones are, and together they cook up new projects of their own.<br>这就是高科技区域只出现在大学周边的原因。关键因素与其说是教授，不如说是学生。创业公司在大学周边成长，因为大学把有潜力的年轻人聚集起来，让他们一起做项目。聪明的人会知道谁和自己一样聪明，然后一起搞新项目。</p><p>Because you can’t tell a great hacker except by working with him, hackers themselves can’t tell how good they are. This is true to a degree in most fields. I’ve found that people who are great at something are not so much convinced of their own greatness as mystified at why everyone else seems so incompetent.<br>因为只有一起工作才能识别优秀的黑客，所以黑客自己也不知道自己有多厉害。多数领域都有这种情况。我发现，在某方面很厉害的人，与其说是确信自己很厉害，不如说是困惑于为什么其他人看起来这么无能。</p><p>But it’s particularly hard for hackers to know how good they are, because it’s hard to compare their work. This is easier in most other fields. In the hundred meters, you know in 10 seconds who’s fastest. Even in math there seems to be a general consensus about which problems are hard to solve, and what constitutes a good solution. But hacking is like writing. Who can say which of two novels is better? Certainly not the authors.<br>但黑客尤其难知道自己有多厉害，因为他们的工作很难比较。多数其他领域更简单：百米赛跑 10 秒内就知道谁最快；甚至数学领域，大家对哪些问题难、什么是好解法也有共识。但编程就像写作，谁能说两本小说哪本更好？作者肯定说不出来。</p><p>With hackers, at least, other hackers can tell. That’s because, unlike novelists, hackers collaborate on projects. When you get to hit a few difficult problems over the net at someone, you learn pretty quickly how hard they hit them back. But hackers can’t watch themselves at work. So if you ask a great hacker how good he is, he’s almost certain to reply, I don’t know. He’s not just being modest. He really doesn’t know.<br>但至少其他黑客能判断谁是优秀的黑客，因为和小说家不同，黑客会合作项目。当你通过网络向某人抛出几个难题，很快就知道他能回击得多有力。但黑客看不到自己的工作状态，所以如果你问优秀的黑客他有多厉害，他几乎肯定会说 “不知道”—— 这不是谦虚，是真不知道。</p><p>And none of us know, except about people we’ve actually worked with. Which puts us in a weird situation: we don’t know who our heroes should be. The hackers who become famous tend to become famous by random accidents of PR. Occasionally I need to give an example of a great hacker, and I never know who to use. The first names that come to mind always tend to be people I know personally, but it seems lame to use them. So, I think, maybe I should say Richard Stallman, or Linus Torvalds, or Alan Kay, or someone famous like that. But I have no idea if these guys are great hackers. I’ve never worked with them on anything.<br>除了和我们一起工作过的人，我们谁也不了解，这让我们陷入一种奇怪的境地：不知道该以谁为榜样。出名的黑客往往是因为公关偶然事件才出名。我偶尔需要举一个优秀黑客的例子，却不知道选谁。脑子里最先冒出来的总是认识的人，但用他们又显得没说服力。所以我想，或许该说理查德・斯托曼、莱纳斯・托瓦兹、艾伦・凯之类的名人，但我不知道他们是不是优秀的黑客 —— 我从没和他们一起做过事。</p><p>If there is a Michael Jordan of hacking, no one knows, including him.<br>如果编程界有 “迈克尔・乔丹”，没人知道是谁，包括他自己。</p><h3 id="Cultivation"><a href="#Cultivation" class="headerlink" title="Cultivation"></a><strong>Cultivation</strong></h3><p><strong>培养</strong></p><p>Finally, the question the hackers have all been wondering about: how do you become a great hacker? I don’t know if it’s possible to make yourself into one. But it’s certainly possible to do things that make you stupid, and if you can make yourself stupid, you can probably make yourself smart too.<br>最后，是所有黑客都想知道的问题：如何成为优秀的黑客？我不知道能不能把自己变成这样的人，但肯定能做些让自己变蠢的事 —— 如果能变蠢，或许也能变聪明。</p><p>The key to being a good hacker may be to work on what you like. When I think about the great hackers I know, one thing they have in common is the extreme difficulty of making them work on anything they don’t want to. I don’t know if this is cause or effect; it may be both.<br>成为优秀黑客的关键可能是做自己喜欢的事。想到我认识的优秀黑客，他们的共同点是：很难让他们做不想做的事。我不知道这是原因还是结果，或许两者都是。</p><p>To do something well you have to love it. So to the extent you can preserve hacking as something you love, you’re likely to do it well. Try to keep the sense of wonder you had about programming at age 14. If you’re worried that your current job is rotting your brain, it probably is.<br>要做好一件事，必须热爱它。所以，只要能保持对编程的热爱，你就可能做得很好。试着保留 14 岁时对编程的那种好奇。如果你担心现在的工作会让你变蠢，那很可能确实如此。</p><p>The best hackers tend to be smart, of course, but that’s true in a lot of fields. Is there some quality that’s unique to hackers? I asked some friends, and the number one thing they mentioned was curiosity. I’d always supposed that all smart people were curious– that curiosity was simply the first derivative of knowledge. But apparently hackers are particularly curious, especially about how things work. That makes sense, because programs are in effect giant descriptions of how things work.<br>当然，最优秀的黑客往往很聪明，但很多领域都是如此。有没有黑客独有的特质？我问了些朋友，他们提到最多的是好奇心。我一直以为所有聪明人都好奇 —— 好奇心不过是知识的一阶导数。但显然黑客尤其好奇，特别是对事物的原理。这说得通，因为程序本质上是对事物原理的详细描述。</p><p>Several friends mentioned hackers’ ability to concentrate– their ability, as one put it, to “tune out everything outside their own heads.’’ I’ve certainly noticed this. And I’ve heard several hackers say that after drinking even half a beer they can’t program at all. So maybe hacking does require some special ability to focus. Perhaps great hackers can load a large amount of context into their head, so that when they look at a line of code, they see not just that line but the whole program around it. John McPhee wrote that Bill Bradley’s success as a basketball player was due partly to his extraordinary peripheral vision. “Perfect’’ eyesight means about 47 degrees of vertical peripheral vision. Bill Bradley had 70; he could see the basket when he was looking at the floor. Maybe great hackers have some similar inborn ability. (I cheat by using a very dense language, which shrinks the court.)<br>几个朋友提到了黑客的专注力 —— 用其中一个人的话说，是 “屏蔽脑海外所有东西” 的能力。我确实注意到了这一点。还听几个黑客说，喝半杯啤酒就完全写不了代码了。所以编程可能需要特殊的专注力：优秀的黑客或许能在脑海中加载大量上下文，看到一行代码时，不只是这行，还有周围的整个程序。约翰・麦克菲曾写道，比尔・布拉德利篮球打得好，部分原因是他非凡的周边视觉：“完美” 视力的垂直周边视野约 47 度，而他有 70 度，看地板时能看到篮筐。或许优秀的黑客也有类似的天赋（我作弊的方式是用非常简洁的语言，缩小 “球场”）。</p><p>This could explain the disconnect over cubicles. Maybe the people in charge of facilities, not having any concentration to shatter, have no idea that working in a cubicle feels to a hacker like having one’s brain in a blender. (Whereas Bill, if the rumors of autism are true, knows all too well.)<br>这或许能解释为什么在隔间问题上存在分歧：负责办公设施的人可能没什么专注力可被破坏，所以完全不知道在隔间工作对黑客来说就像脑子被放进了搅拌机（而如果关于比尔有自闭症的传言是真的，他就太懂这种感受了）。</p><p>One difference I’ve noticed between great hackers and smart people in general is that hackers are more politically incorrect. To the extent there is a secret handshake among good hackers, it’s when they know one another well enough to express opinions that would get them stoned to death by the general public. And I can see why political incorrectness would be a useful quality in programming. Programs are very complex and, at least in the hands of good programmers, very fluid. In such situations it’s helpful to have a habit of questioning assumptions.<br>我注意到优秀黑客和一般聪明人之间的一个区别：黑客更 “政治不正确”。如果说优秀黑客之间有什么 “秘密暗号”，那就是彼此足够熟悉后，能说出那些会被大众 “乱石砸死” 的观点。我能理解为什么 “政治不正确” 在编程中是有用的特质：程序非常复杂，而且在优秀程序员手中极具流动性，这种情况下，有质疑假设的习惯是有帮助的。</p><p>Can you cultivate these qualities? I don’t know. But you can at least not repress them. So here is my best shot at a recipe. If it is possible to make yourself into a great hacker, the way to do it may be to make the following deal with yourself: you never have to work on boring projects (unless your family will starve otherwise), and in return, you’ll never allow yourself to do a half-assed job. All the great hackers I know seem to have made that deal, though perhaps none of them had any choice in the matter.<br>这些特质能培养吗？我不知道。但至少可以不压抑它们。所以我斗胆给出一个 “配方”：如果有可能让自己成为优秀的黑客，方法或许是和自己达成协议 —— 绝不做无聊的项目（除非家人要挨饿），作为回报，绝不敷衍了事。我认识的所有优秀黑客似乎都达成了这个协议，或许他们别无选择。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注意差距</title>
    <link href="/2025/08/19/mind-the-gap/"/>
    <url>/2025/08/19/mind-the-gap/</url>
    
    <content type="html"><![CDATA[<h2 id="Mind-the-Gap"><a href="#Mind-the-Gap" class="headerlink" title="Mind the Gap"></a>Mind the Gap</h2><p>原文链接: <a href="https://paulgraham.com/gap.html">https://paulgraham.com/gap.html</a></p><p>May 2004</p><p>When people care enough about something to do it well, those who do it best tend to be far better than everyone else. There’s a huge gap between Leonardo and second-rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top-ranked professional chess player could play ten thousand games against an ordinary club player without losing once.</p><p>当人们足够在乎某件事并力求做好时，做得最好的人往往会远超其他人。莱昂纳多和博尔戈尼奥内这类二流同代人之间存在巨大差距；雷蒙德・钱德勒和普通侦探小说作家之间也有同样的差距；顶级职业国际象棋选手和普通俱乐部选手对弈一万局，可能一局都不会输。</p><p>Like chess or painting or writing novels, making money is a very specialized skill. But for some reason we treat this skill differently. No one complains when a few people surpass all the rest at playing chess or writing novels, but when a few people make more money than the rest, we get editorials saying this is wrong.</p><p>和下棋、绘画、写小说一样，赚钱是一种非常专业的技能。但出于某种原因，我们对这种技能的态度不同。当少数人在象棋或小说创作上远超他人时，没人会抱怨；但当少数人比其他人赚更多钱时，就会有社论指责这是错误的。</p><p>Why? The pattern of variation seems no different than for any other skill. What causes people to react so strongly when the skill is making money?</p><p>为什么会这样？这种差异模式似乎和其他任何技能都没什么不同。为什么当这种技能是赚钱时，人们的反应会如此强烈？</p><p>I think there are three reasons we treat making money as different: the misleading model of wealth we learn as children; the disreputable way in which, till recently, most fortunes were accumulated; and the worry that great variations in income are somehow bad for society. As far as I can tell, the first is mistaken, the second outdated, and the third empirically false. Could it be that, in a modern democracy, variation in income is actually a sign of health?</p><p>我认为我们把赚钱视为不同的事情，有三个原因：我们小时候学到的关于财富的误导性模型；直到最近，大多数财富积累的不光彩方式；以及担心收入差距过大对社会有害。在我看来，第一个原因是错误的，第二个已经过时，第三个则与事实不符。难道在现代民主社会中，收入差异实际上是健康的标志？</p><h3 id="The-Daddy-Model-of-Wealth"><a href="#The-Daddy-Model-of-Wealth" class="headerlink" title="The Daddy Model of Wealth"></a><strong>The Daddy Model of Wealth</strong></h3><p><strong>财富的爸爸模型</strong></p><p>When I was five I thought electricity was created by electric sockets. I didn’t realize there were power plants out there generating it. Likewise, it doesn’t occur to most kids that wealth is something that has to be generated. It seems to be something that flows from parents.</p><p>我五岁时以为电是插座产生的，没意识到外面有发电厂在发电。同样，大多数孩子不会想到财富是需要创造的，他们觉得财富似乎是从父母那里来的。</p><p>Because of the circumstances in which they encounter it, children tend to misunderstand wealth. They confuse it with money. They think that there is a fixed amount of it. And they think of it as something that’s distributed by authorities (and so should be distributed equally), rather than something that has to be created (and might be created unequally).</p><p>由于孩子们接触财富的环境，他们往往会误解财富。他们把财富和金钱混为一谈，认为财富的总量是固定的，还认为财富是由权威人士分配的（因此应该平均分配），而不是需要创造出来的（且创造出来的数量可能不均等）。</p><p>In fact, wealth is not money. Money is just a convenient way of trading one form of wealth for another. Wealth is the underlying stuff—the goods and services we buy. When you travel to a rich or poor country, you don’t have to look at people’s bank accounts to tell which kind you’re in. You can see wealth—in buildings and streets, in the clothes and the health of the people.</p><p>事实上，财富不是金钱。金钱只是一种将一种形式的财富换成另一种形式的便捷方式。财富是根本 —— 是我们购买的商品和服务。当你去一个富裕或贫穷的国家旅行时，不必看人们的银行账户就能分辨出是哪种国家。你能看到财富 —— 在建筑和街道上，在人们的衣着和健康状况中。</p><p>Where does wealth come from? People make it. This was easier to grasp when most people lived on farms, and made many of the things they wanted with their own hands. Then you could see in the house, the herds, and the granary the wealth that each family created. It was obvious then too that the wealth of the world was not a fixed quantity that had to be shared out, like slices of a pie. If you wanted more wealth, you could make it.</p><p>财富从何而来？是人们创造出来的。以前大多数人住在农场，亲手制作许多自己需要的东西时，这一点更容易理解。那时，你能从房子、牲畜和谷仓中看到每个家庭创造的财富。而且很明显，世界上的财富不是像馅饼一样固定不变、必须分割的数量。如果你想要更多财富，你可以去创造。</p><p>This is just as true today, though few of us create wealth directly for ourselves (except for a few vestigial domestic tasks). Mostly we create wealth for other people in exchange for money, which we then trade for the forms of wealth we want. [1]</p><p>如今这一点依然正确，尽管我们中很少有人直接为自己创造财富（除了一些残留的家务）。大多数时候，我们为别人创造财富，以此换取金钱，然后用金钱去换取我们想要的财富形式。[1]</p><p>Because kids are unable to create wealth, whatever they have has to be given to them. And when wealth is something you’re given, then of course it seems that it should be distributed equally. [2] As in most families it is. The kids see to that. “Unfair,” they cry, when one sibling gets more than another.</p><p>因为孩子们无法创造财富，他们所拥有的一切都必须是别人给予的。当财富是被给予的东西时，当然看起来应该平均分配。[2] 大多数家庭也是这样做的。孩子们会监督这一点：当一个兄弟姐妹得到的比另一个多时，他们会大喊 “不公平”。</p><p>In the real world, you can’t keep living off your parents. If you want something, you either have to make it, or do something of equivalent value for someone else, in order to get them to give you enough money to buy it. In the real world, wealth is (except for a few specialists like thieves and speculators) something you have to create, not something that’s distributed by Daddy. And since the ability and desire to create it vary from person to person, it’s not made equally.</p><p>在现实世界中，你不能一直靠父母生活。如果你想要某样东西，要么自己制作，要么为别人做同等价值的事情，以便让他们给你足够的钱去买。在现实世界中，财富（除了小偷和投机者等少数人）是需要创造的，而不是由 “爸爸” 分配的。而且由于创造财富的能力和意愿因人而异，财富的创造也不会均等。</p><p>You get paid by doing or making something people want, and those who make more money are often simply better at doing what people want. Top actors make a lot more money than B-list actors. The B-list actors might be almost as charismatic, but when people go to the theater and look at the list of movies playing, they want that extra oomph that the big stars have.</p><p>你通过做人们想要的事或制作人们想要的东西获得报酬，那些赚更多钱的人往往只是更擅长做人们想要的事。顶级演员比二线演员赚得多得多。二线演员可能也差不多有魅力，但当人们去电影院看排片表时，他们想要的是大明星所具有的那种额外的吸引力。</p><p>Doing what people want is not the only way to get money, of course. You could also rob banks, or solicit bribes, or establish a monopoly. Such tricks account for some variation in wealth, and indeed for some of the biggest individual fortunes, but they are not the root cause of variation in income. The root cause of variation in income, as Occam’s Razor implies, is the same as the root cause of variation in every other human skill.</p><p>当然，做人们想要的事并不是赚钱的唯一方式。你也可以抢劫银行、索取贿赂或建立垄断。这些手段导致了一些财富差异，甚至一些最大的个人财富也是如此，但它们并不是收入差异的根本原因。正如奥卡姆剃刀原理所暗示的，收入差异的根本原因与其他人类技能差异的根本原因是一样的。</p><p>In the United States, the CEO of a large public company makes about 100 times as much as the average person. [3] Basketball players make about 128 times as much, and baseball players 72 times as much. Editorials quote this kind of statistic with horror. But I have no trouble imagining that one person could be 100 times as productive as another. In ancient Rome the price of slaves varied by a factor of 50 depending on their skills. [4] And that’s without considering motivation, or the extra leverage in productivity that you can get from modern technology.</p><p>在美国，大型上市公司的首席执行官收入大约是普通人的 100 倍。[3] 篮球运动员大约是 128 倍，棒球运动员是 72 倍。社论引用这类数据时带着恐惧，但我完全能想象一个人的生产力可能是另一个人的 100 倍。在古罗马，奴隶的价格因技能不同而相差 50 倍。[4] 这还没考虑到动力，以及现代技术带来的生产力额外优势。</p><p>Editorials about athletes’ or CEOs’ salaries remind me of early Christian writers, arguing from first principles about whether the Earth was round, when they could just walk outside and check. [5] How much someone’s work is worth is not a policy question. It’s something the market already determines.</p><p>关于运动员或首席执行官薪水的社论让我想起早期的基督教作家，他们从基本原理上争论地球是否是圆的，而他们本可以出去看看就能验证。[5] 一个人的工作值多少钱不是政策问题，市场已经做出了决定。</p><p>“Are they really worth 100 of us?” editorialists ask. Depends on what you mean by worth. If you mean worth in the sense of what people will pay for their skills, the answer is yes, apparently.</p><p>“他们真的抵得上我们 100 个人吗？” 社论作者问道。这取决于 “ worth（价值）” 的含义。如果指的是人们愿意为他们的技能支付多少钱，答案显然是肯定的。</p><p>A few CEOs’ incomes reflect some kind of wrongdoing. But are there not others whose incomes really do reflect the wealth they generate? Steve Jobs saved a company that was in a terminal decline. And not merely in the way a turnaround specialist does, by cutting costs; he had to decide what Apple’s next products should be. Few others could have done it. And regardless of the case with CEOs, it’s hard to see how anyone could argue that the salaries of professional basketball players don’t reflect supply and demand.</p><p>少数首席执行官的收入反映了某种不当行为。但难道没有其他人的收入真的反映了他们创造的财富吗？史蒂夫・乔布斯拯救了一家濒临破产的公司。而且他不只是像扭亏为盈专家那样通过削减成本，他还必须决定苹果的下一款产品是什么。很少有人能做到这一点。而且不管首席执行官的情况如何，很难想象有人会认为职业篮球运动员的薪水不反映供求关系。</p><p>It may seem unlikely in principle that one individual could really generate so much more wealth than another. The key to this mystery is to revisit that question, are they really worth 100 of us? Would a basketball team trade one of their players for 100 random people? What would Apple’s next product look like if you replaced Steve Jobs with a committee of 100 random people? [6] These things don’t scale linearly. Perhaps the CEO or the professional athlete has only ten times (whatever that means) the skill and determination of an ordinary person. But it makes all the difference that it’s concentrated in one individual.</p><p>原则上，一个人真的能比另一个人创造多得多的财富，这似乎不太可能。解开这个谜团的关键是重新审视那个问题：他们真的抵得上我们 100 个人吗？一支篮球队会用他们的一名球员去换 100 个随机挑选的人吗？如果用 100 个随机挑选的人组成的委员会取代史蒂夫・乔布斯，苹果的下一款产品会是什么样子？[6] 这些事情不是线性递增的。也许首席执行官或职业运动员的技能和决心只是普通人的十倍（不管这意味着什么），但关键在于这些能力集中在一个人身上，这就完全不同了。</p><p>When we say that one kind of work is overpaid and another underpaid, what are we really saying? In a free market, prices are determined by what buyers want. People like baseball more than poetry, so baseball players make more than poets. To say that a certain kind of work is underpaid is thus identical with saying that people want the wrong things.</p><p>当我们说一种工作报酬过高而另一种过低时，我们真正在说什么？在自由市场中，价格由购买者的需求决定。人们更喜欢棒球而不是诗歌，所以棒球运动员比诗人赚得多。因此，说某种工作报酬过低，就等同于说人们想要的东西是错误的。</p><p>Well, of course people want the wrong things. It seems odd to be surprised by that. And it seems even odder to say that it’s unjust that certain kinds of work are underpaid. [7] Then you’re saying that it’s unjust that people want the wrong things. It’s lamentable that people prefer reality TV and corndogs to Shakespeare and steamed vegetables, but unjust? That seems like saying that blue is heavy, or that up is circular.</p><p>当然，人们会想要错误的东西。对此感到惊讶似乎很奇怪，而说某些工作报酬过低是不公正的，就更奇怪了。[7] 这相当于说人们想要错误的东西是不公正的。人们喜欢真人秀和玉米热狗胜过莎士比亚和蒸蔬菜，这很令人遗憾，但这是不公正吗？这就像说蓝色是沉重的，或者向上是圆形的一样荒谬。</p><p>The appearance of the word “unjust” here is the unmistakable spectral signature of the Daddy Model. Why else would this idea occur in this odd context? Whereas if the speaker were still operating on the Daddy Model, and saw wealth as something that flowed from a common source and had to be shared out, rather than something generated by doing what other people wanted, this is exactly what you’d get on noticing that some people made much more than others.</p><p>“不公正” 这个词的出现，是 “爸爸模型” 的明显特征。否则，这个想法怎么会出现在这种奇怪的语境中呢？如果说话者仍然按照 “爸爸模型” 思考，把财富看作是从一个共同来源流出、必须分配的东西，而不是通过做别人想要的事情创造出来的东西，那么当注意到有些人比其他人赚得多时，就会产生这种想法。</p><p>When we talk about “unequal distribution of income,” we should also ask, where does that income come from? [8] Who made the wealth it represents? Because to the extent that income varies simply according to how much wealth people create, the distribution may be unequal, but it’s hardly unjust.</p><p>当我们谈论 “收入分配不均” 时，我们还应该问，这些收入来自哪里？[8] 是谁创造了它所代表的财富？因为如果收入差异仅仅是由人们创造的财富多少决定的，那么这种分配可能不均等，但很难说是不公正的。</p><h3 id="Stealing-It"><a href="#Stealing-It" class="headerlink" title="Stealing It"></a><strong>Stealing It</strong></h3><p><strong>窃取财富</strong></p><p>The second reason we tend to find great disparities of wealth alarming is that for most of human history the usual way to accumulate a fortune was to steal it: in pastoral societies by cattle raiding; in agricultural societies by appropriating others’ estates in times of war, and taxing them in times of peace.</p><p>我们倾向于认为巨大的财富差距令人担忧的第二个原因是，在人类历史的大部分时间里，积累财富的通常方式是窃取：在游牧社会通过抢牛；在农业社会通过战争时期侵占他人财产，和平时期对其征税。</p><p>In conflicts, those on the winning side would receive the estates confiscated from the losers. In England in the 1060s, when William the Conqueror distributed the estates of the defeated Anglo-Saxon nobles to his followers, the conflict was military. By the 1530s, when Henry VIII distributed the estates of the monasteries to his followers, it was mostly political. [9] But the principle was the same. Indeed, the same principle is at work now in Zimbabwe.</p><p>在冲突中，获胜方会获得从失败者那里没收的财产。11 世纪 60 年代的英格兰，征服者威廉将战败的盎格鲁 - 撒克逊贵族的财产分给追随者，当时的冲突是军事性质的。到 16 世纪 30 年代，亨利八世将修道院的财产分给追随者时，这主要是政治行为。[9] 但原则是一样的。事实上，同样的原则现在在津巴布韦也在起作用。</p><p>In more organized societies, like China, the ruler and his officials used taxation instead of confiscation. But here too we see the same principle: the way to get rich was not to create wealth, but to serve a ruler powerful enough to appropriate it.</p><p>在更有组织的社会，比如中国，统治者及其官员用征税代替没收。但这里我们也看到同样的原则：致富的方式不是创造财富，而是为一个有足够权力侵占财富的统治者服务。</p><p>This started to change in Europe with the rise of the middle class. Now we think of the middle class as people who are neither rich nor poor, but originally they were a distinct group. In a feudal society, there are just two classes: a warrior aristocracy, and the serfs who work their estates. The middle class were a new, third group who lived in towns and supported themselves by manufacturing and trade.</p><p>随着中产阶级在欧洲的兴起，这种情况开始改变。现在我们认为中产阶级是既不富也不穷的人，但最初他们是一个独特的群体。在封建社会，只有两个阶级：武士贵族和为他们耕种土地的农奴。中产阶级是一个新的第三群体，他们住在城镇，靠制造业和贸易为生。</p><p>Starting in the tenth and eleventh centuries, petty nobles and former serfs banded together in towns that gradually became powerful enough to ignore the local feudal lords. [10] Like serfs, the middle class made a living largely by creating wealth. (In port cities like Genoa and Pisa, they also engaged in piracy.) But unlike serfs they had an incentive to create a lot of it. Any wealth a serf created belonged to his master. There was not much point in making more than you could hide. Whereas the independence of the townsmen allowed them to keep whatever wealth they created.</p><p>从 10 世纪和 11 世纪开始，小贵族和前农奴在城镇联合起来，这些城镇逐渐强大到可以无视当地封建领主。[10] 和农奴一样，中产阶级主要靠创造财富谋生（在热那亚和比萨等港口城市，他们也从事海盗活动）。但与农奴不同的是，他们有动力创造大量财富。农奴创造的任何财富都属于他的主人，创造出超过能隐藏的数量没有多大意义。而城镇居民的独立性使他们能够保留自己创造的所有财富。</p><p>Once it became possible to get rich by creating wealth, society as a whole started to get richer very rapidly. Nearly everything we have was created by the middle class. Indeed, the other two classes have effectively disappeared in industrial societies, and their names been given to either end of the middle class. (In the original sense of the word, Bill Gates is middle class.)</p><p>一旦通过创造财富可以致富，整个社会就开始迅速变得富裕起来。我们拥有的几乎所有东西都是中产阶级创造的。事实上，在工业社会中，另外两个阶级已经实际上消失了，他们的名称被赋予了中产阶级的两端（从这个词的原始意义来说，比尔・盖茨是中产阶级）。</p><p>But it was not till the Industrial Revolution that wealth creation definitively replaced corruption as the best way to get rich. In England, at least, corruption only became unfashionable (and in fact only started to be called “corruption”) when there started to be other, faster ways to get rich.</p><p>但直到工业革命，创造财富才明确取代腐败成为致富的最佳方式。至少在英国，当出现其他更快的致富方式时，腐败才变得不合时宜（实际上才开始被称为 “腐败”）。</p><p>Seventeenth-century England was much like the third world today, in that government office was a recognized route to wealth. The great fortunes of that time still derived more from what we would now call corruption than from commerce. [11] By the nineteenth century that had changed. There continued to be bribes, as there still are everywhere, but politics had by then been left to men who were driven more by vanity than greed. Technology had made it possible to create wealth faster than you could steal it. The prototypical rich man of the nineteenth century was not a courtier but an industrialist.</p><p>17 世纪的英格兰很像今天的第三世界，政府职位是公认的致富途径。当时的巨额财富更多来自我们现在所说的腐败，而不是商业。[11] 到了 19 世纪，情况发生了变化。贿赂仍然存在，就像现在各地一样，但那时的政治已经由那些更多受虚荣心而非贪婪驱使的人掌控。技术使得创造财富的速度超过了窃取财富的速度。19 世纪典型的富人不是朝臣，而是实业家。</p><p>With the rise of the middle class, wealth stopped being a zero-sum game. Jobs and Wozniak didn’t have to make us poor to make themselves rich. Quite the opposite: they created things that made our lives materially richer. They had to, or we wouldn’t have paid for them.</p><p>随着中产阶级的兴起，财富不再是零和游戏。乔布斯和沃兹尼亚克不必让我们变穷就能让自己变富。恰恰相反：他们创造的东西让我们的物质生活更加丰富。他们必须这样做，否则我们不会为他们的产品付钱。</p><p>But since for most of the world’s history the main route to wealth was to steal it, we tend to be suspicious of rich people. Idealistic undergraduates find their unconsciously preserved child’s model of wealth confirmed by eminent writers of the past. It is a case of the mistaken meeting the outdated.</p><p>但由于在世界历史的大部分时间里，致富的主要途径是窃取，我们往往对富人持怀疑态度。理想主义的大学生发现，他们潜意识中保留的儿童式财富模型，被过去的著名作家所证实。这是错误与过时的结合。</p><p>“Behind every great fortune, there is a crime,” Balzac wrote. Except he didn’t. What he actually said was that a great fortune with no apparent cause was probably due to a crime well enough executed that it had been forgotten. If we were talking about Europe in 1000, or most of the third world today, the standard misquotation would be spot on. But Balzac lived in nineteenth-century France, where the Industrial Revolution was well advanced. He knew you could make a fortune without stealing it. After all, he did himself, as a popular novelist. [12]</p><p>“每一笔巨大的财富背后，都有一桩罪行。” 巴尔扎克写道。但他其实没说过这句话。他实际上说的是，一笔没有明显原因的巨大财富，可能源于一桩实施得极为巧妙以至于被遗忘的罪行。如果我们谈论的是 1000 年的欧洲，或者今天的大多数第三世界国家，这种常见的误引是准确的。但巴尔扎克生活在 19 世纪的法国，那时工业革命已经很发达。他知道不通过窃取也能积累财富。毕竟，他自己作为一名畅销小说家就做到了。[12]</p><p>Only a few countries (by no coincidence, the richest ones) have reached this stage. In most, corruption still has the upper hand. In most, the fastest way to get wealth is by stealing it. And so when we see increasing differences in income in a rich country, there is a tendency to worry that it’s sliding back toward becoming another Venezuela. I think the opposite is happening. I think you’re seeing a country a full step ahead of Venezuela.</p><p>只有少数国家（并非巧合，都是最富裕的国家）达到了这个阶段。在大多数国家，腐败仍然占上风，致富最快的方式是窃取。因此，当我们看到一个富裕国家的收入差距在扩大时，往往会担心它会退化成另一个委内瑞拉。但我认为情况恰恰相反，我认为你看到的是一个比委内瑞拉领先一大步的国家。</p><h3 id="The-Lever-of-Technology"><a href="#The-Lever-of-Technology" class="headerlink" title="The Lever of Technology"></a><strong>The Lever of Technology</strong></h3><p><strong>技术的杠杆</strong></p><p>Will technology increase the gap between rich and poor? It will certainly increase the gap between the productive and the unproductive. That’s the whole point of technology. With a tractor an energetic farmer could plow six times as much land in a day as he could with a team of horses. But only if he mastered a new kind of farming.</p><p>技术会扩大贫富差距吗？它肯定会扩大有生产力和无生产力的人之间的差距。这就是技术的核心意义。有了拖拉机，一个精力充沛的农民一天能耕种的土地是用马队的六倍，但前提是他掌握了新的耕作方式。</p><p>I’ve seen the lever of technology grow visibly in my own time. In high school I made money by mowing lawns and scooping ice cream at Baskin-Robbins. This was the only kind of work available at the time. Now high school kids could write software or design web sites. But only some of them will; the rest will still be scooping ice cream.</p><p>在我自己的时代，我亲眼目睹了技术杠杆的显著增长。高中时，我靠割草坪和在巴斯金 - 罗宾斯冰淇淋店舀冰淇淋赚钱，那是当时唯一能找到的工作。现在的高中生可以编写软件或设计网站，但只有一部分人会这样做，其他人仍然会去舀冰淇淋。</p><p>I remember very vividly when in 1985 improved technology made it possible for me to buy a computer of my own. Within months I was using it to make money as a freelance programmer. A few years before, I couldn’t have done this. A few years before, there was no such thing as a freelance programmer. But Apple created wealth, in the form of powerful, inexpensive computers, and programmers immediately set to work using it to create more.</p><p>我清楚地记得，1985 年，技术的进步让我能够买到自己的电脑。几个月内，我就用它作为自由程序员赚钱了。几年前，我还做不到这一点，那时根本没有自由程序员这种职业。但苹果公司以强大而廉价的电脑形式创造了财富，程序员们立即开始利用它创造更多财富。</p><p>As this example suggests, the rate at which technology increases our productive capacity is probably exponential, rather than linear. So we should expect to see ever-increasing variation in individual productivity as time goes on. Will that increase the gap between rich and the poor? Depends which gap you mean.</p><p>正如这个例子所表明的，技术提高我们生产力的速度可能是指数级的，而不是线性的。因此，我们应该预料到，随着时间的推移，个人生产力的差异会越来越大。这会扩大贫富差距吗？这取决于你指的是哪种差距。</p><p>Technology should increase the gap in income, but it seems to decrease other gaps. A hundred years ago, the rich led a different kind of life from ordinary people. They lived in houses full of servants, wore elaborately uncomfortable clothes, and travelled about in carriages drawn by teams of horses which themselves required their own houses and servants. Now, thanks to technology, the rich live more like the average person.</p><p>技术应该会扩大收入差距，但似乎会缩小其他差距。一百年前，富人的生活与普通人截然不同。他们住在满是仆人的房子里，穿着精致却不舒服的衣服，乘坐由马队牵引的马车出行，而马本身也需要住所和仆人照料。现在，多亏了技术，富人的生活更像普通人了。</p><p>Cars are a good example of why. It’s possible to buy expensive, handmade cars that cost hundreds of thousands of dollars. But there is not much point. Companies make more money by building a large number of ordinary cars than a small number of expensive ones. So a company making a mass-produced car can afford to spend a lot more on its design. If you buy a custom-made car, something will always be breaking. The only point of buying one now is to advertise that you can.</p><p>汽车就是一个很好的例子。你可以买到价值数十万美元的昂贵手工汽车，但没什么意义。公司生产大量普通汽车比生产少量昂贵汽车更赚钱，所以生产量产车的公司有能力在设计上投入更多。如果你买一辆定制汽车，总会有东西出故障。现在买定制车的唯一意义就是炫耀你买得起。</p><p>Or consider watches. Fifty years ago, by spending a lot of money on a watch you could get better performance. When watches had mechanical movements, expensive watches kept better time. Not any more. Since the invention of the quartz movement, an ordinary Timex is more accurate than a Patek Philippe costing hundreds of thousands of dollars. [13] Indeed, as with expensive cars, if you’re determined to spend a lot of money on a watch, you have to put up with some inconvenience to do it: as well as keeping worse time, mechanical watches have to be wound.</p><p>再看看手表。五十年前，花很多钱买一块手表能获得更好的性能。当时手表是机械机芯，昂贵的手表走时更准。现在不是这样了。自从石英机芯发明以来，一块普通的天美时手表比价值数十万美元的百达翡丽更准确。[13] 事实上，就像昂贵的汽车一样，如果你执意要花很多钱买一块手表，你就得忍受一些不便：机械表不仅走时更不准，还得上发条。</p><p>The only thing technology can’t cheapen is brand. Which is precisely why we hear ever more about it. Brand is the residue left as the substantive differences between rich and poor evaporate. But what label you have on your stuff is a much smaller matter than having it versus not having it. In 1900, if you kept a carriage, no one asked what year or brand it was. If you had one, you were rich. And if you weren’t rich, you took the omnibus or walked. Now even the poorest Americans drive cars, and it is only because we’re so well trained by advertising that we can even recognize the especially expensive ones. [14]</p><p>技术唯一无法降低成本的是品牌。这正是我们越来越多地听到品牌的原因。随着富人和穷人之间的实质性差异消失，品牌成了残留的东西。但你的东西上有什么标签，比起拥有它和没有它来说，是件小事。1900 年，如果你有一辆马车，没人会问是哪一年的或什么牌子的，有马车就说明你富有。如果你不富有，就只能坐公共马车或步行。现在，即使是最贫穷的美国人也能开车，我们之所以能认出那些特别昂贵的车，只是因为广告对我们的影响太深了。[14]</p><p>The same pattern has played out in industry after industry. If there is enough demand for something, technology will make it cheap enough to sell in large volumes, and the mass-produced versions will be, if not better, at least more convenient. [15] And there is nothing the rich like more than convenience. The rich people I know drive the same cars, wear the same clothes, have the same kind of furniture, and eat the same foods as my other friends. Their houses are in different neighborhoods, or if in the same neighborhood are different sizes, but within them life is similar. The houses are made using the same construction techniques and contain much the same objects. It’s inconvenient to do something expensive and custom.</p><p>同样的模式在一个又一个行业上演。如果某样东西有足够的需求，技术会让它变得足够便宜，从而可以大量销售，而量产版本即使不是更好，至少也更方便。[15] 富人最喜欢的莫过于方便。我认识的富人，和我的其他朋友开一样的车、穿一样的衣服、用一样的家具、吃一样的食物。他们的房子可能在不同的社区，或者在同一个社区但大小不同，但房子里的生活是相似的。房子用同样的建筑技术建造，里面的东西也大致相同。做昂贵的定制化事情是很不方便的。</p><p>The rich spend their time more like everyone else too. Bertie Wooster seems long gone. Now, most people who are rich enough not to work do anyway. It’s not just social pressure that makes them; idleness is lonely and demoralizing.</p><p>富人的时间安排也越来越像普通人了。伯蒂・伍斯特式的闲人似乎早已消失。现在，大多数足够富有可以不工作的人仍然在工作。这不仅仅是社会压力使然，无所事事是孤独且令人消沉的。</p><p>Nor do we have the social distinctions there were a hundred years ago. The novels and etiquette manuals of that period read now like descriptions of some strange tribal society. “With respect to the continuance of friendships…” hints Mrs. Beeton’s Book of Household Management (1880), “it may be found necessary, in some cases, for a mistress to relinquish, on assuming the responsibility of a household, many of those commenced in the earlier part of her life.” A woman who married a rich man was expected to drop friends who didn’t. You’d seem a barbarian if you behaved that way today. You’d also have a very boring life. People still tend to segregate themselves somewhat, but much more on the basis of education than wealth. [16]</p><p>我们也不再有一百年前的社会阶层差异了。那个时期的小说和礼仪手册现在读起来就像对某种奇怪部落社会的描述。《比顿夫人的家庭管理全书》（1880 年）中暗示：“关于友谊的延续…… 在某些情况下，女主人在承担起家庭责任后，可能有必要放弃她早年建立的许多友谊。” 嫁给富人的女人被期望疏远那些不富裕的朋友。如今，如果你那样做，会显得像个野蛮人，而且你的生活也会非常无聊。人们仍然倾向于在一定程度上自我隔离，但更多是基于教育程度而非财富。[16]</p><p>Materially and socially, technology seems to be decreasing the gap between the rich and the poor, not increasing it. If Lenin walked around the offices of a company like Yahoo or Intel or Cisco, he’d think communism had won. Everyone would be wearing the same clothes, have the same kind of office (or rather, cubicle) with the same furnishings, and address one another by their first names instead of by honorifics. Everything would seem exactly as he’d predicted, until he looked at their bank accounts. Oops.</p><p>在物质和社会层面，技术似乎在缩小而不是扩大贫富差距。如果列宁走进雅虎、英特尔或思科这样的公司办公室，他会认为共产主义已经胜利了。每个人都穿着同样的衣服，拥有同样的办公室（或者说隔间）和同样的家具，彼此称呼名字而不是尊称。一切似乎都和他预测的完全一样，直到他看到他们的银行账户。哎呀。</p><p>Is it a problem if technology increases that gap? It doesn’t seem to be so far. As it increases the gap in income, it seems to decrease most other gaps.</p><p>如果技术扩大了收入差距，这是个问题吗？到目前为止似乎不是。因为当它扩大收入差距时，似乎缩小了大多数其他差距。</p><h3 id="Alternative-to-an-Axiom"><a href="#Alternative-to-an-Axiom" class="headerlink" title="Alternative to an Axiom"></a><strong>Alternative to an Axiom</strong></h3><p><strong>公理的替代观点</strong></p><p>One often hears a policy criticized on the grounds that it would increase the income gap between rich and poor. As if it were an axiom that this would be bad. It might be true that increased variation in income would be bad, but I don’t see how we can say it’s axiomatic.</p><p>人们经常听到一项政策因会扩大贫富收入差距而受到批评，仿佛这必然是坏事一样。收入差异扩大可能确实是坏事，但我不明白为什么这会被视为公理。</p><p>Indeed, it may even be false, in industrial democracies. In a society of serfs and warlords, certainly, variation in income is a sign of an underlying problem. But serfdom is not the only cause of variation in income. A 747 pilot doesn’t make 40 times as much as a checkout clerk because he is a warlord who somehow holds her in thrall. His skills are simply much more valuable.</p><p>事实上，在工业民主国家，这甚至可能是错误的。在一个由农奴和军阀组成的社会里，收入差异当然是潜在问题的标志。但农奴制并不是收入差异的唯一原因。一架 747 客机的飞行员收入是收银员的 40 倍，不是因为他是一个以某种方式控制着收银员的军阀，而仅仅是因为他的技能更有价值。</p><p>I’d like to propose an alternative idea: that in a modern society, increasing variation in income is a sign of health. Technology seems to increase the variation in productivity at faster than linear rates. If we don’t see corresponding variation in income, there are three possible explanations: (a) that technical innovation has stopped, (b) that the people who would create the most wealth aren’t doing it, or (c) that they aren’t getting paid for it.</p><p>我想提出一个替代观点：在现代社会，收入差异的扩大是健康的标志。技术似乎以快于线性的速度扩大生产力差异。如果我们没有看到相应的收入差异，可能有三个原因：（a）技术创新已经停止；（b）那些能创造最多财富的人没有去创造；（c）他们创造了财富却没有得到报酬。</p><p>I think we can safely say that (a) and (b) would be bad. If you disagree, try living for a year using only the resources available to the average Frankish nobleman in 800, and report back to us. (I’ll be generous and not send you back to the stone age.)</p><p>我认为可以肯定地说，（a）和（b）都是坏事。如果你不同意，试着用 800 年法兰克贵族平均能拥有的资源生活一年，然后回来告诉我们（我会宽宏大量，不会让你回到石器时代）。</p><p>The only option, if you’re going to have an increasingly prosperous society without increasing variation in income, seems to be (c), that people will create a lot of wealth without being paid for it. That Jobs and Wozniak, for example, will cheerfully work 20-hour days to produce the Apple computer for a society that allows them, after taxes, to keep just enough of their income to match what they would have made working 9 to 5 at a big company.</p><p>如果你想拥有一个日益繁荣的社会，同时又不扩大收入差异，唯一的选择似乎是（c）：人们创造大量财富却得不到报酬。例如，乔布斯和沃兹尼亚克会心甘情愿地每天工作 20 小时来生产苹果电脑，而社会只允许他们在税后保留足够的收入，仅相当于他们在大公司朝九晚五工作的收入。</p><p>Will people create wealth if they can’t get paid for it? Only if it’s fun. People will write operating systems for free. But they won’t install them, or take support calls, or train customers to use them. And at least 90% of the work that even the highest tech companies do is of this second, unedifying kind.</p><p>如果得不到报酬，人们会创造财富吗？只有当这件事有趣的时候才会。人们会免费编写操作系统，但他们不会去安装、接听支持电话或培训客户使用。即使是最高科技的公司，至少 90% 的工作都是这种不那么有趣的工作。</p><p>All the unfun kinds of wealth creation slow dramatically in a society that confiscates private fortunes. We can confirm this empirically. Suppose you hear a strange noise that you think may be due to a nearby fan. You turn the fan off, and the noise stops. You turn the fan back on, and the noise starts again. Off, quiet. On, noise. In the absence of other information, it would seem the noise is caused by the fan.</p><p>在一个没收私人财富的社会里，所有那些不有趣的财富创造都会急剧减少。我们可以通过经验来证实这一点。假设你听到一个奇怪的声音，你认为可能是附近的风扇发出的。你关掉风扇，声音停止了；你再打开风扇，声音又开始了；关掉，安静；打开，有声音。在没有其他信息的情况下，似乎可以确定声音是风扇引起的。</p><p>At various times and places in history, whether you could accumulate a fortune by creating wealth has been turned on and off. Northern Italy in 800, off (warlords would steal it). Northern Italy in 1100, on. Central France in 1100, off (still feudal). England in 1800, on. England in 1974, off (98% tax on investment income). United States in 1974, on. We’ve even had a twin study: West Germany, on; East Germany, off. In every case, the creation of wealth seems to appear and disappear like the noise of a fan as you switch on and off the prospect of keeping it.</p><p>在历史上的不同时间和地点，通过创造财富积累财富的可能性时有时无。800 年的意大利北部，不可能（军阀会窃取）；1100 年的意大利北部，可能；1100 年的法国中部，不可能（仍处于封建制）；1800 年的英国，可能；1974 年的英国，不可能（投资收入税率 98%）；1974 年的美国，可能。我们甚至有一个 “双胞胎研究”：西德，可能；东德，不可能。在所有这些案例中，财富创造的出现和消失，就像你打开或关闭保留财富的可能性时风扇发出的声音一样。</p><p>There is some momentum involved. It probably takes at least a generation to turn people into East Germans (luckily for England). But if it were merely a fan we were studying, without all the extra baggage that comes from the controversial topic of wealth, no one would have any doubt that the fan was causing the noise.</p><p>这其中涉及到一些惯性。把人变成东德人那样可能至少需要一代人的时间（对英国来说幸运的是）。但如果我们研究的仅仅是风扇，没有财富这个有争议的话题带来的额外包袱，没人会怀疑是风扇发出了声音。</p><p>If you suppress variations in income, whether by stealing private fortunes, as feudal rulers used to do, or by taxing them away, as some modern governments have done, the result always seems to be the same. Society as a whole ends up poorer.</p><p>如果你抑制收入差异，无论是像封建统治者那样窃取私人财富，还是像一些现代政府那样通过税收剥夺，结果似乎总是一样的：整个社会最终会变得更贫穷。</p><p>If I had a choice of living in a society where I was materially much better off than I am now, but was among the poorest, or in one where I was the richest, but much worse off than I am now, I’d take the first option. If I had children, it would arguably be immoral not to. It’s absolute poverty you want to avoid, not relative poverty. If, as the evidence so far implies, you have to have one or the other in your society, take relative poverty.</p><p>如果我可以选择住在这样一个社会：我在物质上比现在好得多，但属于最贫穷的人；或者住在另一个社会：我是最富有的人，但物质上比现在差得多，我会选择第一个选项。如果我有孩子，不这样选择可能是不道德的。你想要避免的是绝对贫困，而不是相对贫困。如果正如迄今为止的证据所暗示的那样，你的社会必须有其中一种贫困，那就选择相对贫困吧。</p><p>You need rich people in your society not so much because in spending their money they create jobs, but because of what they have to do to get rich. I’m not talking about the trickle-down effect here. I’m not saying that if you let Henry Ford get rich, he’ll hire you as a waiter at his next party. I’m saying that he’ll make you a tractor to replace your horse.</p><p>社会需要富人，与其说是因为他们花钱创造了就业机会，不如说是因为他们为了致富所必须做的事情。我这里说的不是涓滴效应。我不是说如果你让亨利・福特致富，他会在下次派对上雇你当服务员。我是说他会为你制造一台拖拉机来取代你的马。</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><strong>Notes</strong></h3><p>[1] Part of the reason this subject is so contentious is that some of those most vocal on the subject of wealth—university students, heirs, professors, politicians, and journalists—have the least experience creating it. (This phenomenon will be familiar to anyone who has overheard conversations about sports in a bar.)</p><p>[1] 这个话题争议性很大，部分原因在于，在财富话题上最直言不讳的一些人 —— 大学生、继承人、教授、政客和记者 —— 恰恰是创造财富经验最少的人。（任何在酒吧里听过人们谈论体育的人，都会对这种现象感到熟悉。）</p><p>Students are mostly still on the parental dole, and have not stopped to think about where that money comes from. Heirs will be on the parental dole for life. Professors and politicians live within socialist eddies of the economy, at one remove from the creation of wealth, and are paid a flat rate regardless of how hard they work. And journalists as part of their professional code segregate themselves from the revenue-collecting half of the businesses they work for (the ad sales department). Many of these people never come face to face with the fact that the money they receive represents wealth—wealth that, except in the case of journalists, someone else created earlier. They live in a world in which income is doled out by a central authority according to some abstract notion of fairness (or randomly, in the case of heirs), rather than given by other people in return for something they wanted, so it may seem to them unfair that things don’t work the same in the rest of the economy.</p><p>学生大多还在靠父母资助，没有想过那些钱是从哪里来的。继承人则一辈子都靠父母留下的钱生活。教授和政客生活在经济中的社会主义漩涡里，与财富创造隔了一层，无论工作多努力，都拿固定报酬。而记者作为职业规范的一部分，与他们所在机构负责创收的部门（广告销售部）隔离开来。这些人中的许多人从未正视过一个事实：他们收到的钱代表着财富 —— 除了记者的情况之外，这些财富都是别人早先创造出来的。他们生活在这样一个世界里：收入由一个中央权威根据某种抽象的公平概念分配（对继承人来说则是随机分配），而不是别人为了换取自己想要的东西而给予的。因此，在他们看来，经济的其他领域不是这样运作的，这似乎不公平。</p><p>(Some professors do create a great deal of wealth for society. But the money they’re paid isn’t a quid pro quo. It’s more in the nature of an investment.)</p><p>（有些教授确实为社会创造了大量财富。但他们得到的报酬并非等价交换，而更像是一种投资。）</p><p>[2] When one reads about the origins of the Fabian Society, it sounds like something cooked up by the high-minded Edwardian child-heroes of Edith Nesbit’s The Wouldbegoods.</p><p>[2] 当人们读到费边社的起源时，会觉得那像是伊迪丝・内斯比特的《准好孩子》中那些高尚的爱德华时代儿童主人公凭空想出来的东西。</p><p>[3] According to a study by the Corporate Library, the median total compensation, including salary, bonus, stock grants, and the exercise of stock options, of S&amp;P 500 CEOs in 2002 was $3.65 million. According to Sports Illustrated, the average NBA player’s salary during the 2002-03 season was $4.54 million, and the average major league baseball player’s salary at the start of the 2003 season was $2.56 million. According to the Bureau of Labor Statistics, the mean annual wage in the US in 2002 was $35,560.</p><p>[3] 根据企业图书馆的一项研究，2002 年标准普尔 500 指数成分股公司首席执行官的总薪酬中位数（包括薪水、奖金、股票授予和股票期权行权）为 365 万美元。据《体育画报》报道，2002-03 赛季 NBA 球员的平均薪水为 454 万美元，2003 赛季开始时美国职业棒球大联盟球员的平均薪水为 256 万美元。根据美国劳工统计局的数据，2002 年美国的平均年薪为 35,560 美元。</p><p>[4] In the early empire the price of an ordinary adult slave seems to have been about 2,000 sestertii (e.g. Horace, Sat. ii.7.43). A servant girl cost 600 (Martial vi.66), while Columella (iii.3.8) says that a skilled vine-dresser was worth 8,000. A doctor, P. Decimus Eros Merula, paid 50,000 sestertii for his freedom (Dessau, Inscriptiones 7812). Seneca (Ep. xxvii.7) reports that one Calvisius Sabinus paid 100,000 sestertii apiece for slaves learned in the Greek classics. Pliny (Hist. Nat. vii.39) says that the highest price paid for a slave up to his time was 700,000 sestertii, for the linguist (and presumably teacher) Daphnis, but that this had since been exceeded by actors buying their own freedom.</p><p>[4] 在罗马帝国早期，一个普通成年奴隶的价格似乎约为 2,000 塞斯特斯（如贺拉斯《讽刺诗》ii.7.43）。一个女仆价值 600 塞斯特斯（马提亚尔《讽刺诗》vi.66），而科卢梅拉（《论农业》iii.3.8）说一个熟练的葡萄园丁值 8,000 塞斯特斯。一位名叫 P・德西姆斯・埃罗斯・梅鲁拉的医生为换取自由支付了 50,000 塞斯特斯（德绍《拉丁铭文集成》7812）。塞内加（《书信集》xxvii.7）记载，一个叫卡尔维西乌斯・萨比努斯的人为每个精通希腊古典文献的奴隶支付 100,000 塞斯特斯。普林尼（《自然史》vii.39）说，在他那个时代，为奴隶支付的最高价格是 700,000 塞斯特斯，买的是语言学家（大概也是教师）达芙妮，但后来演员为换取自己自由所支付的价格超过了这个数。</p><p>Classical Athens saw a similar variation in prices. An ordinary laborer was worth about 125 to 150 drachmae. Xenophon (Mem. ii.5) mentions prices ranging from 50 to 6,000 drachmae (for the manager of a silver mine).</p><p>古典时期的雅典也存在类似的价格差异。一个普通劳工约值 125 到 150 德拉克马。色诺芬（《回忆录》ii.5）提到奴隶价格从 50 到 6,000 德拉克马不等（6,000 德拉克马是银矿经理的价格）。</p><p>For more on the economics of ancient slavery see:</p><p>关于古代奴隶制的经济学更多内容，参见：</p><p>Jones, A. H. M., “Slavery in the Ancient World,” Economic History Review, 2:9 (1956), 185-199, reprinted in Finley, M. I. (ed.), Slavery in Classical Antiquity, Heffer, 1964.</p><p>A・H・M・琼斯：《古代世界的奴隶制》，《经济史评论》，2:9（1956），185-199，重印于 M・I・芬利（编）：《古典时代的奴隶制》，赫弗出版社，1964 年。</p><p>[5] Eratosthenes (276—195 BC) used shadow lengths in different cities to estimate the Earth’s circumference. He was off by only about 2%.</p><p>[5] 埃拉托色尼（公元前 276— 前 195 年）利用不同城市的影子长度估算地球周长，误差仅约 2%。</p><p>[6] No, and Windows, respectively.</p><p>[6] 答案分别是 “不会” 和 “Windows 系统”。</p><p>[7] One of the biggest divergences between the Daddy Model and reality is the valuation of hard work. In the Daddy Model, hard work is in itself deserving. In reality, wealth is measured by what one delivers, not how much effort it costs. If I paint someone’s house, the owner shouldn’t pay me extra for doing it with a toothbrush.</p><p>[7] “爸爸模型” 与现实之间最大的分歧之一在于对努力工作的评价。在 “爸爸模型” 中，努力工作本身就值得回报。而在现实中，财富的衡量标准是一个人交付了什么，而不是付出了多少努力。如果我给别人粉刷房子，房主不应该因为我用牙刷刷就多付钱。</p><p>It will seem to someone still implicitly operating on the Daddy Model that it is unfair when someone works hard and doesn’t get paid much. To help clarify the matter, get rid of everyone else and put our worker on a desert island, hunting and gathering fruit. If he’s bad at it he’ll work very hard and not end up with much food. Is this unfair? Who is being unfair to him?</p><p>对于那些仍然下意识地按照 “爸爸模型” 思考的人来说，当一个人努力工作却没得到多少报酬时，会觉得这是不公平的。为了把事情说清楚，我们可以假设其他所有人都不存在，只让这个工人处在一个荒岛上，靠打猎和采集果实为生。如果他不擅长这些，他会非常努力地工作，却最终得不到多少食物。这是不公平吗？谁对他不公平了？</p><p>[8] Part of the reason for the tenacity of the Daddy Model may be the dual meaning of “distribution.” When economists talk about “distribution of income,” they mean statistical distribution. But when you use the phrase frequently, you can’t help associating it with the other sense of the word (as in e.g. “distribution of alms”), and thereby subconsciously seeing wealth as something that flows from some central tap. The word “regressive” as applied to tax rates has a similar effect, at least on me; how can anything regressive be good?</p><p>[8] “爸爸模型” 之所以根深蒂固，部分原因可能在于 “distribution（分配）” 一词的双重含义。当经济学家谈论 “收入分配（distribution of income）” 时，他们指的是统计分布。但当你频繁使用这个短语时，会不由自主地将其与该词的另一种含义联系起来（如 “施舍的分配（distribution of alms）”），从而下意识地把财富看作是从某个中央水龙头流出的东西。“累退的（regressive）” 一词用于描述税率时也有类似的效果，至少对我来说是这样：一个 “后退的” 东西怎么可能是好的呢？</p><p>[9] “From the beginning of the reign Thomas Lord Roos was an assiduous courtier of the young Henry VIII and was soon to reap the rewards. In 1525 he was made a Knight of the Garter and given the Earldom of Rutland. In the thirties his support of the breach with Rome, his zeal in crushing the Pilgrimage of Grace, and his readiness to vote the death-penalty in the succession of spectacular treason trials that punctuated Henry’s erratic matrimonial progress made him an obvious candidate for grants of monastic property.”</p><p>[9] “从亨利八世统治初期开始，托马斯・鲁斯勋爵就是这位年轻国王的殷勤朝臣，并很快获得了回报。1525 年，他被授予嘉德骑士爵位，并获封拉特兰伯爵。在 30 年代，他支持与罗马教廷决裂，积极镇压‘求恩巡礼’运动，在亨利八世变幻莫测的婚姻进程中所引发的一系列引人注目的叛国罪审判中，他都准备好投票支持死刑判决，这使他成为获得修道院财产赏赐的当然人选。”</p><p>Stone, Lawrence, Family and Fortune: Studies in Aristocratic Finance in the Sixteenth and Seventeenth Centuries, Oxford University Press, 1973, p. 166.</p><p>劳伦斯・斯通：《家庭与财富：16 至 17 世纪贵族财政研究》，牛津大学出版社，1973 年，第 166 页。</p><p>[10] There is archaeological evidence for large settlements earlier, but it’s hard to say what was happening in them.</p><p>[10] 有考古证据表明更早之前就有大型定居点，但很难说这些定居点里发生了什么。</p><p>Hodges, Richard and David Whitehouse, Mohammed, Charlemagne and the Origins of Europe, Cornell University Press, 1983.</p><p>理查德・霍奇斯、戴维・怀特豪斯：《穆罕默德、查理曼与欧洲的起源》，康奈尔大学出版社，1983 年。</p><p>[11] William Cecil and his son Robert were each in turn the most powerful minister of the crown, and both used their position to amass fortunes among the largest of their times. Robert in particular took bribery to the point of treason. “As Secretary of State and the leading advisor to King James on foreign policy, [he] was a special recipient of favour, being offered large bribes by the Dutch not to make peace with Spain, and large bribes by Spain to make peace.” (Stone, op. cit., p. 17.)</p><p>[11] 威廉・塞西尔和他的儿子罗伯特先后担任英国最有权势的王室大臣，两人都利用职位积累了当时数一数二的财富。尤其是罗伯特，受贿到了叛国的地步。“作为国务卿和詹姆斯国王外交政策的主要顾问，[他] 是各方争相讨好的对象，荷兰人向他巨额行贿，希望他阻止英国与西班牙讲和；西班牙人也向他巨额行贿，希望促成和谈。”（斯通，同前引，第 17 页。）</p><p>[12] Though Balzac made a lot of money from writing, he was notoriously improvident and was troubled by debts all his life.</p><p>[12] 尽管巴尔扎克通过写作赚了很多钱，但他挥霍无度是出了名的，一辈子都被债务缠身。</p><p>[13] A Timex will gain or lose about .5 seconds per day. The most accurate mechanical watch, the Patek Philippe 10 Day Tourbillon, is rated at -1.5 to +2 seconds. Its retail price is about $220,000.</p><p>[13] 一块天美时手表每天的误差约为 0.5 秒。最精准的机械表百达翡丽 10 日陀飞轮表，误差在 - 1.5 到 + 2 秒之间，其零售价约为 22 万美元。</p><p>[14] If asked to choose which was more expensive, a well-preserved 1989 Lincoln Town Car ten-passenger limousine ($5,000) or a 2004 Mercedes S600 sedan ($122,000), the average Edwardian might well guess wrong.</p><p>[14] 如果让一个爱德华时代的普通人来选哪样更贵：一辆保存完好的 1989 年产林肯城市十座豪华轿车（5,000 美元），还是一辆 2004 年产梅赛德斯 - 奔驰 S600 轿车（122,000 美元），他很可能会猜错。</p><p>[15] To say anything meaningful about income trends, you have to talk about real income, or income as measured in what it can buy. But the usual way of calculating real income ignores much of the growth in wealth over time, because it depends on a consumer price index created by bolting end to end a series of numbers that are only locally accurate, and that don’t include the prices of new inventions until they become so common that their prices stabilize.</p><p>[15] 要对收入趋势说些有意义的话，就必须谈论实际收入，即按购买力衡量的收入。但通常计算实际收入的方法忽略了随着时间推移财富的大部分增长，因为这种方法依赖于消费者价格指数，而该指数是通过将一系列仅在局部准确的数字拼接而成的，并且在新发明变得足够普遍、价格稳定之前，不会将其价格纳入其中。</p><p>So while we might think it was very much better to live in a world with antibiotics or air travel or an electric power grid than without, real income statistics calculated in the usual way will prove to us that we are only slightly richer for having these things.</p><p>因此，尽管我们可能认为生活在一个有抗生素、航空旅行或电网的世界里比没有这些东西要好得多，但按通常方法计算的实际收入统计数据会向我们证明，拥有这些东西只会让我们稍微富裕一点。</p><p>Another approach would be to ask, if you were going back to the year x in a time machine, how much would you have to spend on trade goods to make your fortune? For example, if you were going back to 1970 it would certainly be less than $500, because the processing power you can get for $500 today would have been worth at least $150 million in 1970. The function goes asymptotic fairly quickly, because for times over a hundred years or so you could get all you needed in present-day trash. In 1800 an empty plastic drink bottle with a screw top would have seemed a miracle of workmanship.</p><p>另一种方法是问：如果你乘坐时光机回到 x 年，需要花多少钱购买贸易商品才能发家致富？例如，如果你回到 1970 年，肯定用不了 500 美元，因为如今 500 美元能买到的处理能力，在 1970 年至少值 1.5 亿美元。这个函数会很快趋近于极限，因为对于一百多年前的时代，你从当今的垃圾中就能找到所有需要的东西。在 1800 年，一个带螺旋盖的空塑料饮料瓶会被视为工艺的奇迹。</p><p>[16] Some will say this amounts to the same thing, because the rich have better opportunities for education. That’s a valid point. It is still possible, to a degree, to buy your kids’ way into top colleges by sending them to private schools that in effect hack the college admissions process.</p><p>[16] 有些人会说这其实是一回事，因为富人有更好的教育机会。这一点有道理。在某种程度上，通过送孩子去私立学校，实际上是钻了大学招生流程的空子，从而为孩子买到进入顶尖大学的机会，这仍然是可能的。</p><p>According to a 2002 report by the National Center for Education Statistics, about 1.7% of American kids attend private, non-sectarian schools. At Princeton, 36% of the class of 2007 came from such schools. (Interestingly, the number at Harvard is significantly lower, about 28%.) Obviously this is a huge loophole. It does at least seem to be closing, not widening.</p><p>根据美国国家教育统计中心 2002 年的一份报告，约 1.7% 的美国孩子就读于非宗教类私立学校。在普林斯顿大学 2007 届学生中，36% 来自这类学校。（有趣的是，哈佛大学的这一比例明显更低，约为 28%。）显然，这是一个巨大的漏洞。但至少这个漏洞似乎在缩小，而不是扩大。</p><p>Perhaps the designers of admissions processes should take a lesson from the example of computer security, and instead of just assuming that their system can’t be hacked, measure the degree to which it is.</p><p>或许大学招生流程的设计者应该从计算机安全的例子中吸取教训，不要只是假设他们的系统不会被 “黑客攻击”，而应该去衡量被攻击的程度。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哪些东西不能说</title>
    <link href="/2025/08/18/what-you-cannot-say/"/>
    <url>/2025/08/18/what-you-cannot-say/</url>
    
    <content type="html"><![CDATA[<h2 id="What-You-Can’t-Say"><a href="#What-You-Can’t-Say" class="headerlink" title="What You Can’t Say"></a>What You Can’t Say</h2><p>原文链接: <a href="https://paulgraham.com/say.html">https://paulgraham.com/say.html</a></p><p>January 2004</p><p>Have you ever seen an old photo of yourself and been embarrassed at the way you looked? Did we actually dress like that? We did. And we had no idea how silly we looked. It’s the nature of fashion to be invisible, in the same way the movement of the earth is invisible to all of us riding on it.</p><p>你有没有看过自己以前的老照片，为当时的样子感到尴尬？我们真的穿成那样吗？确实穿成那样。而且我们完全没意识到自己看起来有多傻。时尚的本质就是让人察觉不到，就像我们所有人都在地球上，但地球的运动对我们来说是看不见的一样。</p><p>What scares me is that there are moral fashions too. They’re just as arbitrary, and just as invisible to most people. But they’re much more dangerous. Fashion is mistaken for good design; moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired, ostracized, imprisoned, or even killed.</p><p>让我害怕的是，道德时尚也是存在的。它们同样武断，对大多数人来说也同样难以察觉。但它们危险得多。时尚被误认为是好的设计；道德时尚被误认为是 “好” 本身。穿着古怪会让你被嘲笑，而违背道德时尚可能会让你被解雇、排斥、监禁，甚至被杀。</p><p>If you could travel back in a time machine, one thing would be true no matter where you went: you’d have to watch what you said. Opinions we consider harmless could have gotten you in big trouble. I’ve already said at least one thing that would have gotten me in big trouble in most of Europe in the seventeenth century, and did get Galileo in big trouble when he said it — that the earth moves. [1]</p><p>如果你能乘坐时光机回到过去，无论去哪个时代，有一件事都是肯定的：你必须小心自己说的话。我们现在认为无伤大雅的观点，在当时可能会给你惹上大麻烦。我已经说过至少一件事 —— 地球在运动 —— 这在 17 世纪的欧洲大部分地区会让我大难临头，而伽利略说这话时确实惹了大麻烦。</p><p>It seems to be a constant throughout history: In every period, people believed things that were just ridiculous, and believed them so strongly that you would have gotten in terrible trouble for saying otherwise.</p><p>这似乎是历史上的一个常态：每个时代，人们都会相信一些荒谬的东西，而且信得无比坚定，如果你提出反对，就会陷入可怕的麻烦。</p><p>Is our time any different? To anyone who has read any amount of history, the answer is almost certainly no. It would be a remarkable coincidence if ours were the first era to get everything just right.</p><p>我们这个时代有什么不同吗？对任何读过一些历史的人来说，答案几乎肯定是否定的。如果我们这个时代是第一个把所有事情都弄对的时代，那也太巧合了。</p><p>It’s tantalizing to think we believe things that people in the future will find ridiculous. What would someone coming back to visit us in a time machine have to be careful not to say? That’s what I want to study here. But I want to do more than just shock everyone with the heresy du jour. I want to find general recipes for discovering what you can’t say, in any era.</p><p>想到我们现在相信的东西，在未来的人看来可能很荒谬，这很有趣。如果有人乘时光机回到我们这个时代，他们必须小心不能说的话是什么？这正是我想探讨的。但我不想仅仅用当下的异端邪说来震惊所有人，我想找到一种通用的方法，来发现任何时代都 “不能说的话”。</p><h3 id="The-Conformist-Test"><a href="#The-Conformist-Test" class="headerlink" title="The Conformist Test"></a><strong>The Conformist Test</strong></h3><p><strong>从众测试</strong></p><p>Let’s start with a test: Do you have any opinions that you would be reluctant to express in front of a group of your peers?</p><p>我们先从一个测试开始：你有没有一些观点，不愿意在同龄人面前表达？</p><p>If the answer is no, you might want to stop and think about that. If everything you believe is something you’re supposed to believe, could that possibly be a coincidence? Odds are it isn’t. Odds are you just think what you’re told.</p><p>如果答案是否定的，你或许应该停下来想一想。如果你相信的所有事情，都是你 “应该” 相信的，这可能是巧合吗？大概率不是。大概率是你只是在想别人告诉你的东西。</p><p>The other alternative would be that you independently considered every question and came up with the exact same answers that are now considered acceptable. That seems unlikely, because you’d also have to make the same mistakes. Mapmakers deliberately put slight mistakes in their maps so they can tell when someone copies them. If another map has the same mistake, that’s very convincing evidence.</p><p>另一种可能是，你独立思考了每一个问题，然后得出的答案恰好和现在被认为 “可接受” 的答案完全一致。这似乎不太可能，因为你还得犯同样的错误。地图绘制者会故意在地图上留一些小错误，这样就能发现谁抄袭了他们。如果另一张地图有同样的错误，那就是非常有力的证据。</p><p>Like every other era in history, our moral map almost certainly contains a few mistakes. And anyone who makes the same mistakes probably didn’t do it by accident. It would be like someone claiming they had independently decided in 1972 that bell-bottom jeans were a good idea.</p><p>就像历史上的其他时代一样，我们的 “道德地图” 几乎肯定存在一些错误。而任何犯下同样错误的人，大概率都不是偶然的。这就好比有人说，他们在 1972 年独立得出结论：喇叭裤是个好主意。</p><p>If you believe everything you’re supposed to now, how can you be sure you wouldn’t also have believed everything you were supposed to if you had grown up among the plantation owners of the pre-Civil War South, or in Germany in the 1930s — or among the Mongols in 1200, for that matter? Odds are you would have.</p><p>如果你现在相信所有 “应该” 相信的东西，那你怎么能确定，如果你生长在内战前美国南方的种植园主中、20 世纪 30 年代的德国，或者 1200 年的蒙古人中，不会同样相信当时 “应该” 相信的一切呢？大概率你会的。</p><p>Back in the era of terms like “well-adjusted,” the idea seemed to be that there was something wrong with you if you thought things you didn’t dare say out loud. This seems backward. Almost certainly, there is something wrong with you if you don’t think things you don’t dare say out loud.</p><p>在 “适应良好” 这类词流行的时代，人们似乎认为，如果你心里想的事情不敢大声说出来，那你一定有问题。这其实搞反了。几乎可以肯定，如果你心里没有不敢大声说的想法，那才是有问题。</p><h3 id="Trouble"><a href="#Trouble" class="headerlink" title="Trouble"></a><strong>Trouble</strong></h3><p><strong>麻烦</strong></p><p>What can’t we say? One way to find these ideas is simply to look at things people do say, and get in trouble for. [2]</p><p>我们不能说的话是什么？一种找到这些观点的方法，就是看看人们说了什么，然后因此惹上麻烦。</p><p>Of course, we’re not just looking for things we can’t say. We’re looking for things we can’t say that are true, or at least have enough chance of being true that the question should remain open. But many of the things people get in trouble for saying probably do make it over this second, lower threshold. No one gets in trouble for saying that 2 + 2 is 5, or that people in Pittsburgh are ten feet tall. Such obviously false statements might be treated as jokes, or at worst as evidence of insanity, but they are not likely to make anyone mad. The statements that make people mad are the ones they worry might be believed. I suspect the statements that make people maddest are those they worry might be true.</p><p>当然，我们不只是找 “不能说的话”，我们要找的是那些 “不能说但可能是真的” 的话，或者至少是有足够可能性为真、值得继续探讨的话。但人们因为说了某些话而惹上麻烦，很多时候这些话很可能达到了这个较低的标准。没人会因为说 “2+2&#x3D;5” 或 “匹兹堡人有十英尺高” 而惹麻烦。这种明显错误的说法可能会被当成玩笑，最坏也只是被认为是疯话，但不太可能让人愤怒。让人愤怒的话，是那些他们担心别人会相信的话。我怀疑，最让人愤怒的话，是那些他们担心可能是真的话。</p><p>If Galileo had said that people in Padua were ten feet tall, he would have been regarded as a harmless eccentric. Saying the earth orbited the sun was another matter. The church knew this would set people thinking.</p><p>如果伽利略说帕多瓦人有十英尺高，他可能会被当成一个无害的怪人。但说地球绕着太阳转，情况就完全不同了。教会知道，这话会让人们开始思考。</p><p>Certainly, as we look back on the past, this rule of thumb works well. A lot of the statements people got in trouble for seem harmless now. So it’s likely that visitors from the future would agree with at least some of the statements that get people in trouble today. Do we have no Galileos? Not likely.</p><p>当然，当我们回顾过去时，这个经验法则很管用。很多过去让人惹上麻烦的话，现在看来都无伤大雅。所以，未来的人很可能会认同至少一部分现在让人惹麻烦的话。我们这个时代没有伽利略式的人物吗？不太可能。</p><p>To find them, keep track of opinions that get people in trouble, and start asking, could this be true? Ok, it may be heretical (or whatever modern equivalent), but might it also be true?</p><p>要找到这些话，就要留意那些让人惹上麻烦的观点，然后开始问：这可能是真的吗？好吧，它可能是异端邪说（或任何现代的等价说法），但它会不会也是真的？</p><h3 id="Heresy"><a href="#Heresy" class="headerlink" title="Heresy"></a><strong>Heresy</strong></h3><p><strong>异端邪说</strong></p><p>This won’t get us all the answers, though. What if no one happens to have gotten in trouble for a particular idea yet? What if some idea would be so radioactively controversial that no one would dare express it in public? How can we find these too?</p><p>但这还不能给我们所有答案。如果某个观点还没人因为说它而惹上麻烦呢？如果某个观点争议性太大，以至于没人敢在公共场合表达呢？我们又该怎么找到这些观点？</p><p>Another approach is to follow that word, heresy. In every period of history, there seem to have been labels that got applied to statements to shoot them down before anyone had a chance to ask if they were true or not. “Blasphemy”, “sacrilege”, and “heresy” were such labels for a good part of western history, as in more recent times “indecent”, “improper”, and “unamerican” have been. By now these labels have lost their sting. They always do. By now they’re mostly used ironically. But in their time, they had real force.</p><p>另一种方法是追踪 “异端邪说” 这个词。历史上的每个时期，似乎都有一些标签被贴在某些言论上，不等别人质疑其真假就将其否定。在西方历史的大部分时间里，“亵渎神明”“亵渎圣物”“异端邪说” 就是这样的标签；而在更近的时代，“不雅”“不当”“非美国式” 也扮演了同样的角色。现在这些标签已经失去了杀伤力。它们总会走到这一步。现在它们大多被用于讽刺。但在当时，它们的力量是实实在在的。</p><p>The word “defeatist”, for example, has no particular political connotations now. But in Germany in 1917 it was a weapon, used by Ludendorff in a purge of those who favored a negotiated peace. At the start of World War II it was used extensively by Churchill and his supporters to silence their opponents. In 1940, any argument against Churchill’s aggressive policy was “defeatist”. Was it right or wrong? Ideally, no one got far enough to ask that.</p><p>比如 “失败主义者” 这个词，现在没有特别的政治含义。但在 1917 年的德国，它成了一种武器，鲁登道夫用它来清洗那些主张和谈的人。二战初期，丘吉尔及其支持者广泛使用这个词来压制反对者。1940 年，任何反对丘吉尔激进政策的言论都被称为 “失败主义”。这种说法对不对？理想情况下，没人有机会去问这个问题。</p><p>We have such labels today, of course, quite a lot of them, from the all-purpose “inappropriate” to the dreaded “divisive.” In any period, it should be easy to figure out what such labels are, simply by looking at what people call ideas they disagree with besides untrue. When a politician says his opponent is mistaken, that’s a straightforward criticism, but when he attacks a statement as “divisive” or “racially insensitive” instead of arguing that it’s false, we should start paying attention.</p><p>当然，我们现在也有这样的标签，而且很多，从万能的 “不合适” 到可怕的 “分裂性”。在任何时代，要找出这些标签都很容易，只需看看人们除了说 “错误” 之外，还用什么词来形容他们不认同的观点。当一个政客说对手错了，这是直截了当的批评；但如果他不反驳观点的真实性，而是攻击其 “具有分裂性” 或 “种族不敏感”，我们就该留意了。</p><p>So another way to figure out which of our taboos future generations will laugh at is to start with the labels. Take a label — “sexist”, for example — and try to think of some ideas that would be called that. Then for each ask, might this be true?</p><p>所以，另一种找出哪些禁忌会被未来 generations 嘲笑的方法，是从这些标签入手。选一个标签 —— 比如 “性别歧视”—— 然后试着想一些会被贴上这个标签的观点。然后对每个观点问：这可能是真的吗？</p><p>Just start listing ideas at random? Yes, because they won’t really be random. The ideas that come to mind first will be the most plausible ones. They’ll be things you’ve already noticed but didn’t let yourself think.</p><p>只是随机列出观点吗？是的，因为它们不会真的随机。最先想到的观点往往是最合理的，是你已经注意到但不敢去想的事情。</p><p>In 1989 some clever researchers tracked the eye movements of radiologists as they scanned chest images for signs of lung cancer. [3] They found that even when the radiologists missed a cancerous lesion, their eyes had usually paused at the site of it. Part of their brain knew there was something there; it just didn’t percolate all the way up into conscious knowledge. I think many interesting heretical thoughts are already mostly formed in our minds. If we turn off our self-censorship temporarily, those will be the first to emerge.</p><p>1989 年，一些聪明的研究人员追踪了放射科医生在扫描胸部图像寻找肺癌迹象时的眼球运动。他们发现，即使放射科医生漏掉了癌变病灶，他们的眼睛通常也会在病灶处停顿。他们大脑的一部分知道那里有问题，只是没有完全上升到有意识的认知层面。我认为，很多有趣的异端想法在我们脑海中已经基本形成。如果我们暂时关掉自我审查，这些想法就会最先冒出来。</p><h3 id="Time-and-Space"><a href="#Time-and-Space" class="headerlink" title="Time and Space"></a><strong>Time and Space</strong></h3><p><strong>时间与空间</strong></p><p>If we could look into the future it would be obvious which of our taboos they’d laugh at. We can’t do that, but we can do something almost as good: we can look into the past. Another way to figure out what we’re getting wrong is to look at what used to be acceptable and is now unthinkable.</p><p>如果我们能看到未来，就会清楚哪些禁忌会被他们嘲笑。我们做不到这一点，但可以做一件差不多的事：回顾过去。另一种找出我们哪里出错的方法，是看看过去能被接受但现在难以想象的事情。</p><p>Changes between the past and the present sometimes do represent progress. In a field like physics, if we disagree with past generations it’s because we’re right and they’re wrong. But this becomes rapidly less true as you move away from the certainty of the hard sciences. By the time you get to social questions, many changes are just fashion. The age of consent fluctuates like hemlines.</p><p>过去与现在的变化有时确实代表进步。在物理学这样的领域，如果我们与前人观点不同，是因为我们对了，他们错了。但当你离开硬科学的确定性领域时，这一点就越来越不成立了。到了社会问题上，很多变化只是时尚而已。法定同意年龄的波动就像裙摆的长短一样。</p><p>We may imagine that we are a great deal smarter and more virtuous than past generations, but the more history you read, the less likely this seems. People in past times were much like us. Not heroes, not barbarians. Whatever their ideas were, they were ideas reasonable people could believe.</p><p>我们可能会想象自己比前人聪明得多、道德得多，但你读的历史越多，就越会觉得这不可能。过去的人和我们很像，既不是英雄，也不是野蛮人。无论他们的想法是什么，都是理性的人可能相信的。</p><p>So here is another source of interesting heresies. Diff present ideas against those of various past cultures, and see what you get. [4] Some will be shocking by present standards. Ok, fine; but which might also be true?</p><p>所以，这是另一个有趣的异端思想来源。将现在的观点与不同过去文化的观点进行对比，看看会发现什么。有些观点按现在的标准来看会很惊人。好吧，那又怎样；但其中哪些可能也是真的呢？</p><p>You don’t have to look into the past to find big differences. In our own time, different societies have wildly varying ideas of what’s ok and what isn’t. So you can try diffing other cultures’ ideas against ours as well. (The best way to do that is to visit them.) Any idea that’s considered harmless in a significant percentage of times and places, and yet is taboo in ours, is a candidate for something we’re mistaken about.</p><p>你不必回溯过去就能发现巨大差异。在我们这个时代，不同社会对 “可接受” 和 “不可接受” 的定义差异很大。所以你也可以试着将其他文化的观点与我们的进行对比（最好的方法是去那些地方看看）。如果一个观点在相当多的时代和地方都被认为是无害的，但在我们这里却是禁忌，那它很可能是我们搞错了。</p><p>For example, at the high water mark of political correctness in the early 1990s, Harvard distributed to its faculty and staff a brochure saying, among other things, that it was inappropriate to compliment a colleague or student’s clothes. No more “nice shirt.” I think this principle is rare among the world’s cultures, past or present. There are probably more where it’s considered especially polite to compliment someone’s clothing than where it’s considered improper. Odds are this is, in a mild form, an example of one of the taboos a visitor from the future would have to be careful to avoid if he happened to set his time machine for Cambridge, Massachusetts, 1992. [5]</p><p>例如，在 20 世纪 90 年代初政治正确达到顶峰时，哈佛大学向教职工分发了一本手册，其中提到，赞美同事或学生的衣服是不合适的，不能再说 “衬衫真好看”。我认为，无论在过去还是现在的世界文化中，这种原则都很罕见。在更多文化中，赞美别人的衣服被视为特别礼貌，而不是不当行为。很可能，这是一个温和的例子：如果未来的人乘时光机来到 1992 年的马萨诸塞州剑桥市，这就是他们必须小心避免的禁忌之一。</p><h3 id="Prigs"><a href="#Prigs" class="headerlink" title="Prigs"></a><strong>Prigs</strong></h3><p><strong>一本正经的人</strong></p><p>Of course, if they have time machines in the future they’ll probably have a separate reference manual just for Cambridge. This has always been a fussy place, a town of i dotters and t crossers, where you’re liable to get both your grammar and your ideas corrected in the same conversation. And that suggests another way to find taboos. Look for prigs, and see what’s inside their heads.</p><p>当然，如果未来有时间机器，他们可能会为剑桥单独准备一本参考手册。这地方向来挑剔，是个连 i 都要加点、t 都要加横的小镇，在一次对话中，你的语法和观点都可能被纠正。这提示了另一种发现禁忌的方法：看看那些一本正经的人，想想他们脑子里装着什么。</p><p>Kids’ heads are repositories of all our taboos. It seems fitting to us that kids’ ideas should be bright and clean. The picture we give them of the world is not merely simplified, to suit their developing minds, but sanitized as well, to suit our ideas of what kids ought to think. [6]</p><p>孩子们的头脑里装满了我们所有的禁忌。我们觉得，孩子们的想法就应该是纯洁无瑕的。我们给他们描绘的世界，不仅为了适应他们正在发育的心智而简化，还为了符合我们对 “孩子应该想什么” 的设想而净化。</p><p>You can see this on a small scale in the matter of dirty words. A lot of my friends are starting to have children now, and they’re all trying not to use words like “fuck” and “shit” within baby’s hearing, lest baby start using these words too. But these words are part of the language, and adults use them all the time. So parents are giving their kids an inaccurate idea of the language by not using them. Why do they do this? Because they don’t think it’s fitting that kids should use the whole language. We like children to seem innocent. [7]</p><p>在脏话这件事上，你能看到一个小缩影。我的很多朋友开始有孩子了，他们都尽量不在婴儿能听到的地方说 “他妈的”“狗屁” 之类的词，生怕孩子也学会说。但这些词是语言的一部分，成年人一直在用。所以父母们通过不说这些词，给了孩子一个不真实的语言印象。他们为什么要这么做？因为他们觉得孩子不应该使用完整的语言，我们喜欢孩子看起来天真无邪。</p><p>Most adults, likewise, deliberately give kids a misleading view of the world. One of the most obvious examples is Santa Claus. We think it’s cute for little kids to believe in Santa Claus. I myself think it’s cute for little kids to believe in Santa Claus. But one wonders, do we tell them this stuff for their sake, or for ours?</p><p>同样，大多数成年人故意给孩子一个误导性的世界观。最明显的例子之一就是圣诞老人。我们觉得小孩子相信圣诞老人很可爱，我自己也这么觉得。但有人会想，我们告诉他们这些，是为了他们，还是为了我们自己？</p><p>I’m not arguing for or against this idea here. It is probably inevitable that parents should want to dress up their kids’ minds in cute little baby outfits. I’ll probably do it myself. The important thing for our purposes is that, as a result, a well brought-up teenage kid’s brain is a more or less complete collection of all our taboos — and in mint condition, because they’re untainted by experience. Whatever we think that will later turn out to be ridiculous, it’s almost certainly inside that head.</p><p>我在这里不争论这种做法的对错。父母想把孩子的思想打扮得像可爱的婴儿装一样，这可能是不可避免的，我自己可能也会这么做。对我们的目的来说，重要的是：因此，一个教养良好的青少年的头脑，差不多就是我们所有禁忌的集合 —— 而且完好无损，因为它们还没被经验污染。无论我们现在相信的什么东西将来会被证明是荒谬的，几乎肯定都在那个头脑里。</p><p>How do we get at these ideas? By the following thought experiment. Imagine a kind of latter-day Conrad character who has worked for a time as a mercenary in Africa, for a time as a doctor in Nepal, for a time as the manager of a nightclub in Miami. The specifics don’t matter — just someone who has seen a lot. Now imagine comparing what’s inside this guy’s head with what’s inside the head of a well-behaved sixteen year old girl from the suburbs. What does he think that would shock her? He knows the world; she knows, or at least embodies, present taboos. Subtract one from the other, and the result is what we can’t say.</p><p>我们如何理解这些观点？可以做一个思想实验。想象一个类似康拉德笔下的现代人物：他在非洲当过雇佣兵，在尼泊尔当过医生，在迈阿密当过夜总会经理。具体经历不重要，重要的是他见多识广。现在，想象把他脑子里的想法和一个来自郊区、行为端正的 16 岁女孩脑子里的想法做对比。他的哪些想法会让她震惊？他了解世界，而她知道（或者至少体现了）当下的禁忌。用前者减去后者，结果就是我们不能说的话。</p><h3 id="Mechanism"><a href="#Mechanism" class="headerlink" title="Mechanism"></a><strong>Mechanism</strong></h3><p><strong>机制</strong></p><p>I can think of one more way to figure out what we can’t say: to look at how taboos are created. How do moral fashions arise, and why are they adopted? If we can understand this mechanism, we may be able to see it at work in our own time.</p><p>我还能想到另一种找出 “不能说的话” 的方法：看看禁忌是如何产生的。道德时尚是如何兴起的？人们为什么会接受它们？如果我们能理解这个机制，或许就能看到它在我们这个时代的运作。</p><p>Moral fashions don’t seem to be created the way ordinary fashions are. Ordinary fashions seem to arise by accident when everyone imitates the whim of some influential person. The fashion for broad-toed shoes in late fifteenth century Europe began because Charles VIII of France had six toes on one foot. The fashion for the name Gary began when the actor Frank Cooper adopted the name of a tough mill town in Indiana. Moral fashions more often seem to be created deliberately. When there’s something we can’t say, it’s often because some group doesn’t want us to.</p><p>道德时尚的产生方式似乎和普通时尚不同。普通时尚往往是偶然兴起的：所有人都模仿某个有影响力的人的一时兴起。15 世纪末欧洲流行宽头鞋，是因为法国查理八世一只脚有六个脚趾。“加里” 这个名字的流行，始于演员弗兰克・库珀采用了印第安纳州一个粗犷的工厂小镇的名字。而道德时尚似乎更多是刻意创造的。当有些话我们不能说时，往往是因为某个群体不希望我们说。</p><p>The prohibition will be strongest when the group is nervous. The irony of Galileo’s situation was that he got in trouble for repeating Copernicus’s ideas. Copernicus himself didn’t. In fact, Copernicus was a canon of a cathedral, and dedicated his book to the pope. But by Galileo’s time the church was in the throes of the Counter-Reformation and was much more worried about unorthodox ideas.</p><p>当一个群体感到不安时，禁令会最严格。伽利略的遭遇很讽刺：他因为重复哥白尼的观点而惹上麻烦，哥白尼本人却没有。事实上，哥白尼是一个大教堂的教士，还把他的书献给了教皇。但到了伽利略时代，教会正处于反宗教改革的阵痛中，对非正统思想更加担忧。</p><p>To launch a taboo, a group has to be poised halfway between weakness and power. A confident group doesn’t need taboos to protect it. It’s not considered improper to make disparaging remarks about Americans, or the English. And yet a group has to be powerful enough to enforce a taboo. Coprophiles, as of this writing, don’t seem to be numerous or energetic enough to have had their interests promoted to a lifestyle.</p><p>要发起一个禁忌，一个群体必须处于弱势与强势之间。一个自信的群体不需要用禁忌来保护自己。说美国人或英国人的坏话，不会被认为是不当行为。但一个群体必须有足够的力量来执行禁忌。就目前而言，嗜粪者的数量和活力似乎还不足以让他们的喜好被提升为一种生活方式。</p><p>I suspect the biggest source of moral taboos will turn out to be power struggles in which one side only barely has the upper hand. That’s where you’ll find a group powerful enough to enforce taboos, but weak enough to need them.</p><p>我怀疑，道德禁忌的最大来源是权力斗争 —— 其中一方只是勉强占上风。在这种情况下，你会发现一个群体有足够的力量执行禁忌，但又弱到需要禁忌来保护自己。</p><p>Most struggles, whatever they’re really about, will be cast as struggles between competing ideas. The English Reformation was at bottom a struggle for wealth and power, but it ended up being cast as a struggle to preserve the souls of Englishmen from the corrupting influence of Rome. It’s easier to get people to fight for an idea. And whichever side wins, their ideas will also be considered to have triumphed, as if God wanted to signal his agreement by selecting that side as the victor.</p><p>大多数斗争，无论其本质是什么，都会被包装成不同思想之间的斗争。英国宗教改革本质上是一场争夺财富和权力的斗争，但最终被包装成一场保护英国人的灵魂免受罗马腐败影响的斗争。让人们为一个理念而战更容易。而且，无论哪一方获胜，他们的理念也会被认为是胜利的，仿佛上帝通过选择这一方作为胜利者来表明他的认同。</p><p>We often like to think of World War II as a triumph of freedom over totalitarianism. We conveniently forget that the Soviet Union was also one of the winners.</p><p>我们常常喜欢把二战看作是自由对极权主义的胜利。我们轻易忘记了，苏联也是胜利者之一。</p><p>I’m not saying that struggles are never about ideas, just that they will always be made to seem to be about ideas, whether they are or not. And just as there is nothing so unfashionable as the last, discarded fashion, there is nothing so wrong as the principles of the most recently defeated opponent. Representational art is only now recovering from the approval of both Hitler and Stalin. [8]</p><p>我不是说斗争从不涉及理念，只是说无论是否涉及，它们总会被包装成与理念有关。就像没有什么比上一个被抛弃的时尚更过时一样，没有什么比最近被击败的对手的原则更 “错误” 的了。写实艺术直到现在才从希特勒和斯大林都对其表示认可的阴影中恢复过来。</p><p>Although moral fashions tend to arise from different sources than fashions in clothing, the mechanism of their adoption seems much the same. The early adopters will be driven by ambition: self-consciously cool people who want to distinguish themselves from the common herd. As the fashion becomes established they’ll be joined by a second, much larger group, driven by fear. [9] This second group adopt the fashion not because they want to stand out but because they are afraid of standing out.</p><p>尽管道德时尚的起源与服装时尚不同，但人们接受它们的机制似乎很相似。早期接受者受野心驱动：那些刻意追求酷、想与大众区分开的人。当这种时尚确立后，会有第二个、规模大得多的群体加入，他们受恐惧驱动。这第二个群体接受时尚，不是因为想脱颖而出，而是因为害怕脱颖而出。</p><p>So if you want to figure out what we can’t say, look at the machinery of fashion and try to predict what it would make unsayable. What groups are powerful but nervous, and what ideas would they like to suppress? What ideas were tarnished by association when they ended up on the losing side of a recent struggle? If a self-consciously cool person wanted to differentiate himself from preceding fashions (e.g. from his parents), which of their ideas would he tend to reject? What are conventional-minded people afraid of saying?</p><p>所以，如果你想找出我们不能说的话，就看看时尚的运作机制，试着预测它会让哪些话变得不能说。哪些群体有权势但内心不安？他们想压制哪些观点？哪些观点因为与最近斗争中的失败者有关联而被抹黑？如果一个刻意追求酷的人想与之前的时尚（比如他父母的时尚）区分开，他会倾向于拒绝哪些观点？思想保守的人害怕说什么？</p><p>This technique won’t find us all the things we can’t say. I can think of some that aren’t the result of any recent struggle. Many of our taboos are rooted deep in the past. But this approach, combined with the preceding four, will turn up a good number of unthinkable ideas.</p><p>这种方法不能帮我们找到所有不能说的话。我能想到一些并非源于最近斗争的禁忌，我们的很多禁忌都深深植根于过去。但这种方法与前面四种方法结合起来，会发现很多 “不可想象” 的观点。</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a><strong>Why</strong></h3><p><strong>为什么</strong></p><p>Some would ask, why would one want to do this? Why deliberately go poking around among nasty, disreputable ideas? Why look under rocks?</p><p>有人会问，为什么要这么做？为什么要故意去探究那些令人不快、名声不好的想法？为什么要去翻石头？</p><p>I do it, first of all, for the same reason I did look under rocks as a kid: plain curiosity. And I’m especially curious about anything that’s forbidden. Let me see and decide for myself.</p><p>首先，我这么做的原因和小时候翻石头一样：纯粹的好奇心。而且我对任何被禁止的东西都特别好奇。让我自己看看，自己做判断。</p><p>Second, I do it because I don’t like the idea of being mistaken. If, like other eras, we believe things that will later seem ridiculous, I want to know what they are so that I, at least, can avoid believing them.</p><p>其次，是因为我不喜欢犯错。如果和其他时代一样，我们现在相信的东西将来会显得荒谬，我想知道它们是什么，这样至少我可以避免相信它们。</p><p>Third, I do it because it’s good for the brain. To do good work you need a brain that can go anywhere. And you especially need a brain that’s in the habit of going where it’s not supposed to.</p><p>第三，是因为这对大脑有好处。要做好工作，你需要一个能去往任何地方的大脑。尤其需要一个习惯去那些 “不应该去” 的地方的大脑。</p><p>Great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one that’s unthinkable. Natural selection, for example. It’s so simple. Why didn’t anyone think of it before? Well, that is all too obvious. Darwin himself was careful to tiptoe around the implications of his theory. He wanted to spend his time thinking about biology, not arguing with people who accused him of being an atheist.</p><p>伟大的成就往往源于别人忽视的想法，而没有什么想法比 “不可想象” 的想法更被忽视的了。比如自然选择理论，它如此简单，为什么以前没人想到？答案太明显了。达尔文自己都小心翼翼地回避他理论的隐含意义。他想把时间花在思考生物学上，而不是和指责他是无神论者的人争论。</p><p>In the sciences, especially, it’s a great advantage to be able to question assumptions. The m.o. of scientists, or at least of the good ones, is precisely that: look for places where conventional wisdom is broken, and then try to pry apart the cracks and see what’s underneath. That’s where new theories come from.</p><p>尤其是在科学领域，能够质疑假设是一个巨大的优势。科学家（至少是优秀的科学家）的做法正是如此：寻找传统观念出错的地方，然后试着撬开裂缝，看看下面是什么。新理论就是这么来的。</p><p>A good scientist, in other words, does not merely ignore conventional wisdom, but makes a special effort to break it. Scientists go looking for trouble. This should be the m.o. of any scholar, but scientists seem much more willing to look under rocks. [10]</p><p>换句话说，优秀的科学家不仅无视传统观念，还会特意去打破它。科学家主动寻找麻烦。这应该是所有学者的做法，但科学家似乎更愿意去翻石头。</p><p>Why? It could be that the scientists are simply smarter; most physicists could, if necessary, make it through a PhD program in French literature, but few professors of French literature could make it through a PhD program in physics. Or it could be because it’s clearer in the sciences whether theories are true or false, and this makes scientists bolder. (Or it could be that, because it’s clearer in the sciences whether theories are true or false, you have to be smart to get jobs as a scientist, rather than just a good politician.)</p><p>为什么？可能是因为科学家更聪明：大多数物理学家如果有必要，能完成法国文学的博士课程，但很少有法国文学教授能完成物理学的博士课程。也可能是因为在科学领域，理论的对错更清晰，这让科学家更大胆。（或者，正因为科学领域理论的对错更清晰，要成为科学家就必须聪明，而不只是擅长搞政治。）</p><p>Whatever the reason, there seems a clear correlation between intelligence and willingness to consider shocking ideas. This isn’t just because smart people actively work to find holes in conventional thinking. I think conventions also have less hold over them to start with. You can see that in the way they dress.</p><p>无论原因是什么，智力和愿意考虑惊人想法之间似乎有明显的相关性。这不仅仅是因为聪明人主动寻找传统思维的漏洞，我认为传统观念对他们的束缚从一开始就更少。你从他们的穿着就能看出来。</p><p>It’s not only in the sciences that heresy pays off. In any competitive field, you can win big by seeing things that others daren’t. And in every field there are probably heresies few dare utter. Within the US car industry there is a lot of hand-wringing now about declining market share. Yet the cause is so obvious that any observant outsider could explain it in a second: they make bad cars. And they have for so long that by now the US car brands are antibrands — something you’d buy a car despite, not because of. Cadillac stopped being the Cadillac of cars in about 1970. And yet I suspect no one dares say this. [11] Otherwise these companies would have tried to fix the problem.</p><p>异端思想带来回报的不只是科学领域。在任何竞争领域，看到别人不敢看的东西，你都能大获成功。而且每个领域可能都有很少人敢说的异端思想。现在美国汽车行业对市场份额下降忧心忡忡，但原因很明显，任何敏锐的外人都能一眼看穿：他们造的车不好。而且这种情况持续了太久，现在美国汽车品牌成了 “反品牌”—— 你买它们的车是尽管有这个品牌，而不是因为这个品牌。凯迪拉克大约在 1970 年就不再是 “汽车中的凯迪拉克” 了。但我怀疑没人敢说这话，否则这些公司早就试着解决问题了。</p><p>Training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves. It’s like stretching. When you stretch before running, you put your body into positions much more extreme than any it will assume during the run. If you can think things so outside the box that they’d make people’s hair stand on end, you’ll have no trouble with the small trips outside the box that people call innovative.</p><p>训练自己去想 “不可想象” 的想法，好处不止于想法本身。这就像拉伸运动：跑步前拉伸时，你的身体会摆出比跑步时任何姿势都更极端的姿势。如果你能想出跳出常规到让人震惊的想法，那么那些人们称之为 “创新” 的小突破对你来说就不在话下了。</p><h3 id="Pensieri-Stretti"><a href="#Pensieri-Stretti" class="headerlink" title="Pensieri Stretti"></a><strong>Pensieri Stretti</strong></h3><p><strong>内心封闭</strong></p><p>When you find something you can’t say, what do you do with it? My advice is, don’t say it. Or at least, pick your battles.</p><p>当你发现不能说的话时，该怎么办？我的建议是，别说。或者至少，选好要打的仗。</p><p>Suppose in the future there is a movement to ban the color yellow. Proposals to paint anything yellow are denounced as “yellowist”, as is anyone suspected of liking the color. People who like orange are tolerated but viewed with suspicion. Suppose you realize there is nothing wrong with yellow. If you go around saying this, you’ll be denounced as a yellowist too, and you’ll find yourself having a lot of arguments with anti-yellowists. If your aim in life is to rehabilitate the color yellow, that may be what you want. But if you’re mostly interested in other questions, being labelled as a yellowist will just be a distraction. Argue with idiots, and you become an idiot.</p><p>假设未来有一场禁止黄色的运动。任何提议把东西涂成黄色的人都被谴责为 “黄色主义者”，任何被怀疑喜欢黄色的人也是如此。喜欢橙色的人会被容忍，但会受到怀疑。假设你意识到黄色没什么问题，如果你到处说这话，也会被谴责为黄色主义者，还会和反黄色主义者发生很多争论。如果你的人生目标是为黄色正名，那这可能是你想要的。但如果你主要对其他问题感兴趣，被贴上黄色主义者的标签只会让你分心。和傻瓜争论，你也会变成傻瓜。</p><p>The most important thing is to be able to think what you want, not to say what you want. And if you feel you have to say everything you think, it may inhibit you from thinking improper thoughts. I think it’s better to follow the opposite policy. Draw a sharp line between your thoughts and your speech. Inside your head, anything is allowed. Within my head I make a point of encouraging the most outrageous thoughts I can imagine. But, as in a secret society, nothing that happens within the building should be told to outsiders. The first rule of Fight Club is, you do not talk about Fight Club.</p><p>最重要的是能够想你所想，而不是说你所想。如果你觉得必须把所有想法都说出来，可能会抑制你去想 “不当” 的想法。我认为更好的做法是相反的策略：在思想和言论之间划一条清晰的界限。在你的头脑里，任何想法都被允许。我会特意在自己的头脑里鼓励最离谱的想法。但就像秘密社团一样，社团内部发生的事情不能告诉外人。《搏击俱乐部》的第一条规则就是：不许谈论搏击俱乐部。</p><p>When Milton was going to visit Italy in the 1630s, Sir Henry Wootton, who had been ambassador to Venice, told him his motto should be “i pensieri stretti &amp; il viso sciolto.” Closed thoughts and an open face. Smile at everyone, and don’t tell them what you’re thinking. This was wise advice. Milton was an argumentative fellow, and the Inquisition was a bit restive at that time. But I think the difference between Milton’s situation and ours is only a matter of degree. Every era has its heresies, and if you don’t get imprisoned for them you will at least get in enough trouble that it becomes a complete distraction.</p><p>17 世纪 30 年代，弥尔顿准备访问意大利时，曾担任威尼斯大使的亨利・沃顿爵士告诉他，他的座右铭应该是 “i pensieri stretti &amp; il viso sciolto”（内心封闭，表情开放）。对每个人微笑，但不告诉他们你在想什么。这是明智的建议。弥尔顿爱争论，而当时宗教裁判所有些不安分。但我认为，弥尔顿的处境和我们的处境只是程度不同。每个时代都有异端邪说，如果你不会因此入狱，至少也会惹上足够多的麻烦，让你完全分心。</p><p>I admit it seems cowardly to keep quiet. When I read about the harassment to which the Scientologists subject their critics [12], or that pro-Israel groups are “compiling dossiers” on those who speak out against Israeli human rights abuses [13], or about people being sued for violating the DMCA [14], part of me wants to say, “All right, you bastards, bring it on.” The problem is, there are so many things you can’t say. If you said them all you’d have no time left for your real work. You’d have to turn into Noam Chomsky. [15]</p><p>我承认，保持沉默看起来像懦弱。当我读到山达基教会骚扰批评者，或亲以色列团体 “汇编档案” 对付那些公开反对以色列侵犯人权的人，或有人因违反《数字千年版权法》而被起诉时，我心里有个声音想说：“好吧，你们这些混蛋，放马过来。” 但问题是，不能说的话太多了。如果你把它们都说出来，就没时间做真正的工作了，你就得变成诺姆・乔姆斯基那样。</p><p>The trouble with keeping your thoughts secret, though, is that you lose the advantages of discussion. Talking about an idea leads to more ideas. So the optimal plan, if you can manage it, is to have a few trusted friends you can speak openly to. This is not just a way to develop ideas; it’s also a good rule of thumb for choosing friends. The people you can say heretical things to without getting jumped on are also the most interesting to know.</p><p>但把想法藏在心里的问题是，你会失去讨论的好处。谈论一个想法会产生更多想法。所以，如果你能做到，最好的计划是有几个可以坦诚交谈的 trusted 朋友。这不仅是发展想法的方式，也是选择朋友的好经验法则。那些你可以对他们说异端邪说而不被攻击的人，也是最有趣的人。</p><h3 id="Viso-Sciolto"><a href="#Viso-Sciolto" class="headerlink" title="Viso Sciolto?"></a><strong>Viso Sciolto?</strong></h3><p><strong>笑脸相迎？</strong></p><p>I don’t think we need the viso sciolto so much as the pensieri stretti. Perhaps the best policy is to make it plain that you don’t agree with whatever zealotry is current in your time, but not to be too specific about what you disagree with. Zealots will try to draw you out, but you don’t have to answer them. If they try to force you to treat a question on their terms by asking “are you with us or against us?” you can always just answer “neither”.</p><p>我认为我们不需要 “笑脸相迎”，更需要 “守口如瓶”。或许最好的策略是表明你不同意当下任何狂热的观点，但不必具体说明不同意什么。狂热分子会试图让你表态，但你不必回答他们。如果他们试图用 “你是支持我们还是反对我们” 来逼你按他们的方式看待问题，你总能回答 “都不是”。</p><p>Better still, answer “I haven’t decided.” That’s what Larry Summers did when a group tried to put him in this position. Explaining himself later, he said “I don’t do litmus tests.” [16] A lot of the questions people get hot about are actually quite complicated. There is no prize for getting the answer quickly.</p><p>更好的是回答 “我还没决定”。拉里・萨默斯在遇到有人试图逼他表态时就是这么做的。后来他解释说：“我不搞石蕊测试（即非黑即白的测试）。” 很多让人们激动的问题其实相当复杂，快速给出答案没有奖励。</p><p>If the anti-yellowists seem to be getting out of hand and you want to fight back, there are ways to do it without getting yourself accused of being a yellowist. Like skirmishers in an ancient army, you want to avoid directly engaging the main body of the enemy’s troops. Better to harass them with arrows from a distance.</p><p>如果反黄色主义者似乎失控了，而你想反击，有一些方法可以让你不被指责为黄色主义者。就像古代军队的散兵一样，你要避免直接与敌人的主力交战，最好从远处用箭骚扰他们。</p><p>One way to do this is to ratchet the debate up one level of abstraction. If you argue against censorship in general, you can avoid being accused of whatever heresy is contained in the book or film that someone is trying to censor. You can attack labels with meta-labels: labels that refer to the use of labels to prevent discussion. The spread of the term “political correctness” meant the beginning of the end of political correctness, because it enabled one to attack the phenomenon as a whole without being accused of any of the specific heresies it sought to suppress.</p><p>一种方法是将辩论提升一个抽象层次。如果你笼统地反对审查制度，就可以避免被指责为支持某本书或电影中被审查的异端思想。你可以用 “元标签” 来攻击标签：即指代 “用标签阻止讨论” 这种行为的标签。“政治正确” 这个词的流行，意味着政治正确的终结开始了，因为它让人可以攻击整个现象，而不被指责为支持它试图压制的任何具体异端思想。</p><p>Another way to counterattack is with metaphor. Arthur Miller undermined the House Un-American Activities Committee by writing a play, “The Crucible,” about the Salem witch trials. He never referred directly to the committee and so gave them no way to reply. What could HUAC do, defend the Salem witch trials? And yet Miller’s metaphor stuck so well that to this day the activities of the committee are often described as a “witch-hunt.”</p><p>另一种反击方式是使用隐喻。阿瑟・米勒通过写一部关于塞勒姆女巫审判的戏剧《炼狱》，削弱了众议院非美活动调查委员会的影响力。他从未直接提及该委员会，所以他们无从反驳。非美委员会能怎么办？为塞勒姆女巫审判辩护吗？但米勒的隐喻太贴切了，直到今天，该委员会的行为仍常被描述为 “猎巫”。</p><p>Best of all, probably, is humor. Zealots, whatever their cause, invariably lack a sense of humor. They can’t reply in kind to jokes. They’re as unhappy on the territory of humor as a mounted knight on a skating rink. Victorian prudishness, for example, seems to have been defeated mainly by treating it as a joke. Likewise its reincarnation as political correctness. “I am glad that I managed to write ‘The Crucible,’” Arthur Miller wrote, “but looking back I have often wished I’d had the temperament to do an absurd comedy, which is what the situation deserved.” [17]</p><p>或许最好的方式是幽默。无论为了什么事业，狂热分子总是缺乏幽默感。他们无法用笑话来回应笑话。在幽默的领域，他们就像滑冰场上的骑士一样不自在。例如，维多利亚时代的伪善似乎主要是被当成笑话而被击败的，它的转世 “政治正确” 也是如此。阿瑟・米勒写道：“我很高兴写出了《炼狱》，但回想起来，我常常希望自己有那种气质去写一部荒诞喜剧，那才是这种情况应得的。”</p><h3 id="ABQ"><a href="#ABQ" class="headerlink" title="ABQ"></a><strong>ABQ</strong></h3><p><strong>阿尔布开克</strong></p><p>A Dutch friend says I should use Holland as an example of a tolerant society. It’s true they have a long tradition of comparative open-mindedness. For centuries the low countries were the place to go to say things you couldn’t say anywhere else, and this helped to make the region a center of scholarship and industry (which have been closely tied for longer than most people realize). Descartes, though claimed by the French, did much of his thinking in Holland.</p><p>一个荷兰朋友说，我应该用荷兰作为宽容社会的例子。的确，他们有悠久的相对开放的传统。几个世纪以来，低地国家（荷兰等）都是人们去说在其他地方不能说的话的地方，这帮助该地区成为学术和工业中心（学术和工业的紧密联系比大多数人意识到的要早得多）。笛卡尔虽然被法国人视为自己人，但他的很多思考是在荷兰完成的。</p><p>And yet, I wonder. The Dutch seem to live their lives up to their necks in rules and regulations. There’s so much you can’t do there; is there really nothing you can’t say?</p><p>然而，我很疑惑。荷兰人的生活似乎被各种规章制度包围，有太多事情不能做，难道真的没有不能说的话吗？</p><p>Certainly the fact that they value open-mindedness is no guarantee. Who thinks they’re not open-minded? Our hypothetical prim miss from the suburbs thinks she’s open-minded. Hasn’t she been taught to be? Ask anyone, and they’ll say the same thing: they’re pretty open-minded, though they draw the line at things that are really wrong. (Some tribes may avoid “wrong” as judgemental, and may instead use a more neutral sounding euphemism like “negative” or “destructive”.)</p><p>当然，他们重视开放思想这一事实并不能保证没有禁忌。谁会认为自己不开放呢？我们假设的那个来自郊区的一本正经的女孩，就认为自己是开放的。难道她没被教导要开放吗？问任何人，他们都会说同样的话：他们相当开放，但在 “真正错误” 的事情上会划清界限。（有些群体可能避免用 “错误” 这种评判性词汇，而是用更中性的委婉说法，比如 “负面的” 或 “破坏性的”。）</p><p>When people are bad at math, they know it, because they get the wrong answers on tests. But when people are bad at open-mindedness they don’t know it. In fact they tend to think the opposite. Remember, it’s the nature of fashion to be invisible. It wouldn’t work otherwise. Fashion doesn’t seem like fashion to someone in the grip of it. It just seems like the right thing to do. It’s only by looking from a distance that we see oscillations in people’s idea of the right thing to do, and can identify them as fashions.</p><p>当人们数学不好时，他们知道，因为他们在测试中会答错。但当人们不开放时，他们不知道，事实上他们往往认为自己很开放。记住，时尚的本质是让人察觉不到，否则就不起作用了。对深陷其中的人来说，时尚不像是时尚，而只是 “正确的做法”。只有从远处看，我们才能看到人们对 “正确做法” 的看法在波动，并意识到它们是时尚。</p><p>Time gives us such distance for free. Indeed, the arrival of new fashions makes old fashions easy to see, because they seem so ridiculous by contrast. From one end of a pendulum’s swing, the other end seems especially far away.</p><p>时间免费给了我们这种距离。事实上，新时尚的到来让旧时尚变得明显，因为对比之下它们显得很荒谬。从钟摆摆动的一端看，另一端似乎特别遥远。</p><p>To see fashion in your own time, though, requires a conscious effort. Without time to give you distance, you have to create distance yourself. Instead of being part of the mob, stand as far away from it as you can and watch what it’s doing. And pay especially close attention whenever an idea is being suppressed. Web filters for children and employees often ban sites containing pornography, violence, and hate speech. What counts as pornography and violence? And what, exactly, is “hate speech?” This sounds like a phrase out of 1984.</p><p>然而，要看到自己时代的时尚，需要有意识的努力。没有时间给你距离，你就得自己创造距离。不要成为群体的一员，而要尽可能远离它，观察它在做什么。而且，每当一个观点被压制时，要特别留意。针对儿童和员工的网络过滤器通常会屏蔽包含色情、暴力和仇恨言论的网站。什么算色情和暴力？“仇恨言论” 到底是什么？这听起来像《1984》里的词。</p><p>Labels like that are probably the biggest external clue. If a statement is false, that’s the worst thing you can say about it. You don’t need to say that it’s heretical. And if it isn’t false, it shouldn’t be suppressed. So when you see statements being attacked as x-ist or y-ic (substitute your current values of x and y), whether in 1630 or 2030, that’s a sure sign that something is wrong. When you hear such labels being used, ask why.</p><p>这样的标签可能是最大的外部线索。如果一个说法是错误的，那就是对它最糟糕的评价，你不需要说它是异端。如果它不是错误的，就不应该被压制。所以，无论在 1630 年还是 2030 年，当你看到某些言论被攻击为 “x 主义” 或 “y 性质”（代入你当下的 x 和 y）时，这肯定是有问题的信号。当你听到这样的标签时，问问为什么。</p><p>Especially if you hear yourself using them. It’s not just the mob you need to learn to watch from a distance. You need to be able to watch your own thoughts from a distance. That’s not a radical idea, by the way; it’s the main difference between children and adults. When a child gets angry because he’s tired, he doesn’t know what’s happening. An adult can distance himself enough from the situation to say “never mind, I’m just tired.” I don’t see why one couldn’t, by a similar process, learn to recognize and discount the effects of moral fashions.</p><p>尤其是当你听到自己在用这些标签时。你不仅需要学会从远处观察群体，还需要能从远处观察自己的想法。顺便说一句，这不是什么激进的想法，而是儿童和成人的主要区别。当孩子因为累而生气时，他不知道发生了什么。成人则能与情境保持足够距离，说 “没关系，我只是累了”。我不明白为什么不能通过类似的过程，学会识别并淡化道德时尚的影响。</p><p>You have to take that extra step if you want to think clearly. But it’s harder, because now you’re working against social customs instead of with them. Everyone encourages you to grow up to the point where you can discount your own bad moods. Few encourage you to continue to the point where you can discount society’s bad moods.</p><p>如果你想清晰思考，就必须迈出这额外的一步。但这更难，因为你现在是在与社会习俗对抗，而不是顺应它们。每个人都鼓励你成熟到能忽视自己的坏情绪，但很少有人鼓励你进一步成熟到能忽视社会的坏情绪。</p><p>How can you see the wave, when you’re the water? Always be questioning. That’s the only defence. What can’t you say? And why?</p><p>当你是水时，如何能看到波浪？永远保持质疑。这是唯一的防御。你不能说的话是什么？为什么不能说？</p><p>Notes</p><p>Thanks to Sarah Harlin, Trevor Blackwell, Jessica Livingston, Robert Morris, Eric Raymond and Bob van der Zwaan for reading drafts of this essay, and to Lisa Randall, Jackie McDonough, Ryan Stanley and Joel Rainey for conversations about heresy. Needless to say they bear no blame for opinions expressed in it, and especially for opinions not expressed in it.</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑客与画家</title>
    <link href="/2025/08/18/hackers-and-painters/"/>
    <url>/2025/08/18/hackers-and-painters/</url>
    
    <content type="html"><![CDATA[<h2 id="Hackers-and-Painters"><a href="#Hackers-and-Painters" class="headerlink" title="Hackers and Painters"></a>Hackers and Painters</h2><p>原文链接: <a href="https://paulgraham.com/hp.html">https://paulgraham.com/hp.html</a></p><p>May 2003</p><p>(This essay is derived from a guest lecture at Harvard, which incorporated an earlier talk at Northeastern.)<br>（本文改编自哈佛大学的一次客座讲座，其中融入了之前在东北大学的一次演讲内容。）</p><p>When I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work– that hacking was cold, precise, and methodical, and that painting was the frenzied expression of some primal urge.<br>当我从计算机科学研究生院毕业时，我去了艺术学校学习绘画。很多人似乎对一个对计算机感兴趣的人同时也对绘画感兴趣感到惊讶。他们似乎认为，黑客技术和绘画是截然不同的工作 —— 黑客技术是冰冷、精确且有条理的，而绘画是某种原始冲动的狂热表达。</p><p>Both of these images are wrong. Hacking and painting have a lot in common. In fact, of all the different types of people I’ve known, hackers and painters are among the most alike.<br>这两种印象都是错误的。黑客技术和绘画有很多共同点。事实上，在我认识的所有不同类型的人中，黑客和画家是最相似的群体之一。</p><p>What hackers and painters have in common is that they’re both makers. Along with composers, architects, and writers, what hackers and painters are trying to do is make good things. They’re not doing research per se, though if in the course of trying to make good things they discover some new technique, so much the better.<br>黑客和画家的共同点在于，他们都是创作者。和作曲家、建筑师、作家一样，黑客和画家努力做的事情是创造优秀的作品。他们本身并不是在做研究，不过如果在努力创造优秀作品的过程中发现了某种新技术，那再好不过了。</p><p>I’ve never liked the term “computer science.” The main reason I don’t like it is that there’s no such thing. Computer science is a grab bag of tenuously related areas thrown together by an accident of history, like Yugoslavia. At one end you have people who are really mathematicians, but call what they’re doing computer science so they can get DARPA grants. In the middle you have people working on something like the natural history of computers– studying the behavior of algorithms for routing data through networks, for example. And then at the other extreme you have the hackers, who are trying to write interesting software, and for whom computers are just a medium of expression, as concrete is for architects or paint for painters. It’s as if mathematicians, physicists, and architects all had to be in the same department.<br>我一直不喜欢 “计算机科学” 这个术语。主要原因是，根本不存在 “计算机科学” 这种东西。计算机科学是一个由历史偶然事件拼凑起来的、包含多个勉强相关领域的大杂烩，就像南斯拉夫一样。一端是那些实际上是数学家的人，却把自己做的事称为计算机科学，这样他们就能获得美国国防部高级研究计划局的资助。中间是那些研究类似 “计算机自然史” 的人 —— 比如研究网络数据路由算法的行为。而另一端，则是黑客们，他们试图编写有趣的软件，对他们来说，计算机只是一种表达媒介，就像混凝土之于建筑师、颜料之于画家一样。这就好比数学家、物理学家和建筑师都必须隶属于同一个院系。</p><p>Sometimes what the hackers do is called “software engineering,” but this term is just as misleading. Good software designers are no more engineers than architects are. The border between architecture and engineering is not sharply defined, but it’s there. It falls between what and how: architects decide what to do, and engineers figure out how to do it.<br>有时，黑客所做的事情被称为 “软件工程”，但这个术语同样具有误导性。优秀的软件设计师并不比建筑师更像工程师。建筑学和工程学之间的界限并不清晰，但它确实存在。这条界限存在于 “做什么” 和 “怎么做” 之间：建筑师决定做什么，工程师则想办法怎么做。</p><p>What and how should not be kept too separate. You’re asking for trouble if you try to decide what to do without understanding how to do it. But hacking can certainly be more than just deciding how to implement some spec. At its best, it’s creating the spec– though it turns out the best way to do that is to implement it.<br>“做什么” 和 “怎么做” 不应该分得太开。如果不理解怎么做就试图决定做什么，那就是自找麻烦。但黑客技术肯定不只是决定如何实现某个规范。在最佳状态下，它是在创造规范 —— 尽管事实证明，创造规范的最佳方式就是去实现它。</p><p>Perhaps one day “computer science” will, like Yugoslavia, get broken up into its component parts. That might be a good thing. Especially if it meant independence for my native land, hacking.<br>也许有一天，“计算机科学” 会像南斯拉夫一样，分裂成它的组成部分。这或许是件好事。尤其是如果这意味着我所在的 “领地”—— 黑客技术 —— 能获得独立的话。</p><p>Bundling all these different types of work together in one department may be convenient administratively, but it’s confusing intellectually. That’s the other reason I don’t like the name “computer science.” Arguably the people in the middle are doing something like an experimental science. But the people at either end, the hackers and the mathematicians, are not actually doing science.<br>把所有这些不同类型的工作捆绑在一个院系里，在行政上可能很方便，但在学术上却令人困惑。这是我不喜欢 “计算机科学” 这个名称的另一个原因。可以说，中间那部分人在做类似实验科学的工作。但两端的人 —— 黑客和数学家 —— 实际上并不是在做科学研究。</p><p>The mathematicians don’t seem bothered by this. They happily set to work proving theorems like the other mathematicians over in the math department, and probably soon stop noticing that the building they work in says &#96;&#96;computer science’’ on the outside. But for the hackers this label is a problem. If what they’re doing is called science, it makes them feel they ought to be acting scientific. So instead of doing what they really want to do, which is to design beautiful software, hackers in universities and research labs feel they ought to be writing research papers.<br>数学家们似乎并不为此困扰。他们像数学系的其他数学家一样，愉快地投入到定理证明中，或许很快就不再注意到他们工作的大楼外面写着 “计算机科学”。但对黑客来说，这个标签是个问题。如果他们所做的事情被称为科学，会让他们觉得自己应该表现得像搞科学的。因此，大学里和研究实验室里的黑客们，本想设计优秀的软件，却觉得自己应该去写研究论文。</p><p>In the best case, the papers are just a formality. Hackers write cool software, and then write a paper about it, and the paper becomes a proxy for the achievement represented by the software. But often this mismatch causes problems. It’s easy to drift away from building beautiful things toward building ugly things that make more suitable subjects for research papers.<br>最好的情况下，论文只是一种形式。黑客写出很棒的软件，然后写一篇关于它的论文，论文成了软件所代表的成就的替代物。但这种错位往往会引发问题。人们很容易从创造美好的事物，转向创造那些更适合作为研究论文主题的丑陋事物。</p><p>Unfortunately, beautiful things don’t always make the best subjects for papers. Number one, research must be original– and as anyone who has written a PhD dissertation knows, the way to be sure that you’re exploring virgin territory is to stake out a piece of ground that no one wants. Number two, research must be substantial– and awkward systems yield meatier papers, because you can write about the obstacles you have to overcome in order to get things done. Nothing yields meaty problems like starting with the wrong assumptions. Most of AI is an example of this rule; if you assume that knowledge can be represented as a list of predicate logic expressions whose arguments represent abstract concepts, you’ll have a lot of papers to write about how to make this work. As Ricky Ricardo used to say, “Lucy, you got a lot of explaining to do.”<br>不幸的是，美好的事物并不总是最适合作为论文主题。第一，研究必须具有原创性 —— 任何写过博士论文的人都知道，确保自己在探索处女地的方法，是圈出一块没人想要的领域。第二，研究必须有实质内容 —— 蹩脚的系统能产出更有分量的论文，因为你可以写为了完成任务必须克服的障碍。没有什么比从错误的假设出发更能产生有分量的问题了。人工智能的大部分研究就是这个规则的例子：如果你假设知识可以表示为一系列谓词逻辑表达式，其参数代表抽象概念，那么你就有很多关于如何让这一假设奏效的论文可写。就像瑞奇・里卡多曾经说的：“露西，你有很多要解释的。”</p><p>The way to create something beautiful is often to make subtle tweaks to something that already exists, or to combine existing ideas in a slightly new way. This kind of work is hard to convey in a research paper.<br>创造美好事物的方式，往往是对已有的东西做细微调整，或者以一种稍新的方式组合现有想法。这种工作很难在研究论文中体现出来。</p><p>So why do universities and research labs continue to judge hackers by publications? For the same reason that “scholastic aptitude” gets measured by simple-minded standardized tests, or the productivity of programmers gets measured in lines of code. These tests are easy to apply, and there is nothing so tempting as an easy test that kind of works.<br>那么，为什么大学和研究实验室仍然用论文发表来评判黑客呢？原因和 “学术能力” 用头脑简单的标准化测试来衡量，或者程序员的生产力用代码行数来衡量是一样的。这些测试容易实施，而没有什么比一个看似有效的简单测试更诱人的了。</p><p>Measuring what hackers are actually trying to do, designing beautiful software, would be much more difficult. You need a good sense of design to judge good design. And there is no correlation, except possibly a negative one, between people’s ability to recognize good design and their confidence that they can.<br>衡量黑客真正在努力做的事情 —— 设计优秀的软件 —— 要困难得多。评判优秀的设计需要良好的设计感。而人们识别优秀设计的能力，与他们对自己能做到这一点的信心之间，没有相关性，甚至可能是负相关。</p><p>The only external test is time. Over time, beautiful things tend to thrive, and ugly things tend to get discarded. Unfortunately, the amounts of time involved can be longer than human lifetimes. Samuel Johnson said it took a hundred years for a writer’s reputation to converge. You have to wait for the writer’s influential friends to die, and then for all their followers to die.<br>唯一的外部检验是时间。随着时间的推移，美好的事物往往会蓬勃发展，而丑陋的事物则会被抛弃。不幸的是，所需的时间可能比人的寿命还要长。塞缪尔・约翰逊说过，一个作家的声誉需要一百年才能稳定下来。你得等作家那些有影响力的朋友去世，然后等他们所有的追随者去世。</p><p>I think hackers just have to resign themselves to having a large random component in their reputations. In this they are no different from other makers. In fact, they’re lucky by comparison. The influence of fashion is not nearly so great in hacking as it is in painting.<br>我认为，黑客们只能接受自己的声誉中存在很大的随机性。在这一点上，他们和其他创作者没有区别。事实上，相比之下他们是幸运的。时尚对黑客技术的影响，远不如对绘画的影响大。</p><p>There are worse things than having people misunderstand your work. A worse danger is that you will yourself misunderstand your work. Related fields are where you go looking for ideas. If you find yourself in the computer science department, there is a natural temptation to believe, for example, that hacking is the applied version of what theoretical computer science is the theory of. All the time I was in graduate school I had an uncomfortable feeling in the back of my mind that I ought to know more theory, and that it was very remiss of me to have forgotten all that stuff within three weeks of the final exam.<br>比让别人误解你的工作更糟糕的事情还有很多。更危险的是你自己误解自己的工作。相关领域是你寻找灵感的地方。例如，如果你身处计算机科学系，很自然会倾向于认为，黑客技术是理论计算机科学的应用版本。在研究生院的那段时间里，我心里一直有种不安的感觉：我应该多学点理论，而我在期末考试后三周内就把那些东西全忘了，这实在是太疏忽了。</p><p>Now I realize I was mistaken. Hackers need to understand the theory of computation about as much as painters need to understand paint chemistry. You need to know how to calculate time and space complexity and about Turing completeness. You might also want to remember at least the concept of a state machine, in case you have to write a parser or a regular expression library. Painters in fact have to remember a good deal more about paint chemistry than that.<br>现在我意识到我错了。黑客需要理解计算理论的程度，就像画家需要理解颜料化学一样。你需要知道如何计算时间和空间复杂度，以及图灵完备性。你可能还需要至少记住状态机的概念，以防万一要写解析器或正则表达式库。事实上，画家需要记住的颜料化学知识比这多得多。</p><p>I’ve found that the best sources of ideas are not the other fields that have the word “computer” in their names, but the other fields inhabited by makers. Painting has been a much richer source of ideas than the theory of computation.<br>我发现，最好的灵感来源不是其他名字里带 “计算机” 的领域，而是其他由创作者构成的领域。绘画比计算理论能提供丰富得多的灵感。</p><p>For example, I was taught in college that one ought to figure out a program completely on paper before even going near a computer. I found that I did not program this way. I found that I liked to program sitting in front of a computer, not a piece of paper. Worse still, instead of patiently writing out a complete program and assuring myself it was correct, I tended to just spew out code that was hopelessly broken, and gradually beat it into shape. Debugging, I was taught, was a kind of final pass where you caught typos and oversights. The way I worked, it seemed like programming consisted of debugging.<br>例如，我在大学里学到的是，应该在靠近电脑之前，在纸上把程序完全构思好。但我发现我不是这样编程的。我喜欢坐在电脑前编程，而不是对着一张纸。更糟的是，我没有耐心写出完整的程序并确保它是正确的，而是倾向于先写出一堆漏洞百出的代码，然后逐渐把它修改成型。我学到的是，调试是最后一步，用来找出拼写错误和疏忽。但以我的工作方式来看，编程似乎就是由调试组成的。</p><p>For a long time I felt bad about this, just as I once felt bad that I didn’t hold my pencil the way they taught me to in elementary school. If I had only looked over at the other makers, the painters or the architects, I would have realized that there was a name for what I was doing: sketching. As far as I can tell, the way they taught me to program in college was all wrong. You should figure out programs as you’re writing them, just as writers and painters and architects do.<br>很长一段时间里，我为此感到内疚，就像我曾经因为没有按照小学教的方式握铅笔而感到内疚一样。如果我当时看看其他创作者，比如画家或建筑师，我就会意识到我所做的事情有一个名字：草图绘制。在我看来，大学里教我的编程方法全是错的。你应该在写程序的过程中构思程序，就像作家、画家和建筑师那样。</p><p>Realizing this has real implications for software design. It means that a programming language should, above all, be malleable. A programming language is for thinking of programs, not for expressing programs you’ve already thought of. It should be a pencil, not a pen. Static typing would be a fine idea if people actually did write programs the way they taught me to in college. But that’s not how any of the hackers I know write programs. We need a language that lets us scribble and smudge and smear, not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler.<br>意识到这一点对软件设计有实际意义。这意味着，编程语言首先应该具有可塑性。编程语言是用来思考程序的，而不是用来表达你已经想好的程序。它应该是铅笔，而不是钢笔。如果人们真的按照大学里教我的方式写程序，静态类型会是个好主意。但我认识的所有黑客都不是这样写程序的。我们需要一种能让我们随意涂写、修改的语言，而不是一种让你膝盖上小心翼翼放着 “类型” 茶杯，还要和编译器这位严厉的老阿姨礼貌交谈的语言。</p><p>While we’re on the subject of static typing, identifying with the makers will save us from another problem that afflicts the sciences: math envy. Everyone in the sciences secretly believes that mathematicians are smarter than they are. I think mathematicians also believe this. At any rate, the result is that scientists tend to make their work look as mathematical as possible. In a field like physics this probably doesn’t do much harm, but the further you get from the natural sciences, the more of a problem it becomes.<br>说到静态类型，认同自己是 “创作者” 能让我们避免另一个困扰科学界的问题：数学嫉妒。科学界的每个人都暗自认为数学家比自己更聪明。我觉得数学家自己也这么认为。无论如何，结果就是科学家们倾向于让自己的工作看起来尽可能像数学。在物理学这样的领域，这可能没什么危害，但离自然科学越远，这个问题就越严重。</p><p>A page of formulas just looks so impressive. (Tip: for extra impressiveness, use Greek variables.) And so there is a great temptation to work on problems you can treat formally, rather than problems that are, say, important.<br>一页公式看起来就是那么令人印象深刻。（小贴士：想更令人印象深刻，就用希腊字母变量。）因此，人们很容易倾向于研究那些可以用形式化方法处理的问题，而不是那些，比如说，重要的问题。</p><p>If hackers identified with other makers, like writers and painters, they wouldn’t feel tempted to do this. Writers and painters don’t suffer from math envy. They feel as if they’re doing something completely unrelated. So are hackers, I think.<br>如果黑客认同其他创作者，比如作家和画家，他们就不会有这样的冲动。作家和画家不会有数学嫉妒。他们觉得自己在做的事情与之完全无关。我认为黑客也是如此。</p><p>If universities and research labs keep hackers from doing the kind of work they want to do, perhaps the place for them is in companies. Unfortunately, most companies won’t let hackers do what they want either. Universities and research labs force hackers to be scientists, and companies force them to be engineers.<br>如果大学和研究实验室阻止黑客做他们想做的工作，或许公司是他们的去处。不幸的是，大多数公司也不让黑客做他们想做的事。大学和研究实验室迫使黑客成为科学家，而公司则迫使他们成为工程师。</p><p>I only discovered this myself quite recently. When Yahoo bought Viaweb, they asked me what I wanted to do. I had never liked the business side very much, and said that I just wanted to hack. When I got to Yahoo, I found that what hacking meant to them was implementing software, not designing it. Programmers were seen as technicians who translated the visions (if that is the word) of product managers into code.<br>我自己也是最近才发现这一点的。雅虎收购 Viaweb 时，他们问我想做什么。我一直不太喜欢商业方面的工作，就说我只想做黑客技术相关的事。到了雅虎后，我发现对他们来说，“黑客技术” 指的是实现软件，而不是设计软件。程序员被视为技术人员，负责将产品经理的 “愿景”（如果能这么说的话）翻译成代码。</p><p>This seems to be the default plan in big companies. They do it because it decreases the standard deviation of the outcome. Only a small percentage of hackers can actually design software, and it’s hard for the people running a company to pick these out. So instead of entrusting the future of the software to one brilliant hacker, most companies set things up so that it is designed by committee, and the hackers merely implement the design.<br>这似乎是大公司的默认模式。他们这么做是为了降低结果的标准差。只有一小部分黑客真正有能力设计软件，而公司管理者很难挑选出这些人。因此，大多数公司没有把软件的未来托付给一个才华横溢的黑客，而是设置成由委员会来设计，黑客们只是负责实现设计。</p><p>If you want to make money at some point, remember this, because this is one of the reasons startups win. Big companies want to decrease the standard deviation of design outcomes because they want to avoid disasters. But when you damp oscillations, you lose the high points as well as the low. This is not a problem for big companies, because they don’t win by making great products. Big companies win by sucking less than other big companies.<br>如果你想在某个时候赚钱，记住这一点，因为这是初创公司能获胜的原因之一。大公司想降低设计结果的标准差，是为了避免灾难。但当你抑制波动时，你既会失去低谷，也会失去高峰。这对大公司来说不是问题，因为它们的胜利不是靠做出伟大的产品，而是靠比其他大公司 “不那么糟糕”。</p><p>So if you can figure out a way to get in a design war with a company big enough that its software is designed by product managers, they’ll never be able to keep up with you. These opportunities are not easy to find, though. It’s hard to engage a big company in a design war, just as it’s hard to engage an opponent inside a castle in hand to hand combat. It would be pretty easy to write a better word processor than Microsoft Word, for example, but Microsoft, within the castle of their operating system monopoly, probably wouldn’t even notice if you did.<br>所以，如果你能想办法和一家足够大的公司展开设计战 —— 这家公司的软件是由产品经理设计的 —— 他们永远跟不上你。不过，这样的机会并不容易找到。让大公司卷入设计战很难，就像让城堡里的对手和你近身搏斗一样难。例如，写出一个比微软 Word 更好的文字处理器可能相当容易，但微软身处其操作系统垄断的城堡中，就算你做到了，他们可能也不会注意到。</p><p>The place to fight design wars is in new markets, where no one has yet managed to establish any fortifications. That’s where you can win big by taking the bold approach to design, and having the same people both design and implement the product. Microsoft themselves did this at the start. So did Apple. And Hewlett-Packard. I suspect almost every successful startup has.<br><strong>打设计战的地方是新市场</strong>，那里还没有人建立起任何防御工事。在那里，你可以通过大胆的设计方法，让同一批人既负责设计又负责实现产品，从而大获全胜。微软一开始就是这么做的。苹果也是。惠普也是。我怀疑几乎所有成功的初创公司都是如此。</p><p>So one way to build great software is to start your own startup. There are two problems with this, though. One is that in a startup you have to do so much besides write software. At Viaweb I considered myself lucky if I got to hack a quarter of the time. And the things I had to do the other three quarters of the time ranged from tedious to terrifying. I have a benchmark for this, because I once had to leave a board meeting to have some cavities filled. I remember sitting back in the dentist’s chair, waiting for the drill, and feeling like I was on vacation.<br>所以，打造优秀软件的一种方式是自己创办初创公司。不过，这有两个问题。一是在初创公司里，除了写软件，你还得做很多其他事情。在 Viaweb，我如果能有四分之一的时间做黑客技术相关的工作，就觉得自己很幸运了。而另外四分之三的时间里，我要做的事情从枯燥乏味到令人恐惧不等。我有一个衡量标准，因为有一次我不得不离开董事会会议去补牙。我记得坐在牙医的椅子上，等着钻头开始工作，却感觉像是在度假。</p><p>The other problem with startups is that there is not much overlap between the kind of software that makes money and the kind that’s interesting to write. Programming languages are interesting to write, and Microsoft’s first product was one, in fact, but no one will pay for programming languages now. If you want to make money, you tend to be forced to work on problems that are too nasty for anyone to solve for free.<br>初创公司的另一个问题是，能赚钱的软件和写起来有趣的软件之间没有太多重叠。编程语言写起来很有趣，事实上微软的第一个产品就是编程语言，但现在没人会为编程语言付费了。如果你想赚钱，往往会被迫去解决那些太棘手、没人愿意免费解决的问题。</p><p>All makers face this problem. Prices are determined by supply and demand, and there is just not as much demand for things that are fun to work on as there is for things that solve the mundane problems of individual customers. Acting in off-Broadway plays just doesn’t pay as well as wearing a gorilla suit in someone’s booth at a trade show. Writing novels doesn’t pay as well as writing ad copy for garbage disposals. And hacking programming languages doesn’t pay as well as figuring out how to connect some company’s legacy database to their Web server.<br>所有创作者都面临这个问题。价格由供求决定，人们对做起来有趣的事情的需求，远不如对解决个人客户日常问题的事情的需求大。在百老汇外的剧院演戏，收入远不如在贸易展上穿大猩猩服装站在别人的展位里。写小说不如为垃圾处理器写广告文案赚钱。做编程语言相关的黑客技术工作，不如解决某公司的遗留数据库与 Web 服务器的连接问题赚钱。</p><p>I think the answer to this problem, in the case of software, is a concept known to nearly all makers: the day job. This phrase began with musicians, who perform at night. More generally, it means that you have one kind of work you do for money, and another for love.<br>我认为，在软件领域，这个问题的答案是一个几乎所有创作者都知道的概念：日常工作（day job）。这个短语始于音乐家，他们晚上演出，白天做其他工作。更一般地说，它指的是你有一份为了赚钱而做的工作，还有一份为了热爱而做的工作。</p><p>Nearly all makers have day jobs early in their careers. Painters and writers notoriously do. If you’re lucky you can get a day job that’s closely related to your real work. Musicians often seem to work in record stores. A hacker working on some programming language or operating system might likewise be able to get a day job using it. [1]<br>几乎所有创作者在职业生涯早期都有日常工作。画家和作家就是出了名的例子。如果你幸运的话，你能找到一份和你真正想做的工作密切相关的日常工作。音乐家似乎经常在唱片店工作。一个研究某种编程语言或操作系统的黑客，同样可能找到一份使用该语言或系统的日常工作。[1]</p><p>When I say that the answer is for hackers to have day jobs, and work on beautiful software on the side, I’m not proposing this as a new idea. This is what open-source hacking is all about. What I’m saying is that open-source is probably the right model, because it has been independently confirmed by all the other makers.<br>我说黑客应该有日常工作，同时在业余时间开发优秀软件，这并不是什么新观点。这正是开源黑客技术的核心。我想说的是，开源可能是正确的模式，因为所有其他创作者都以各自的方式印证了这一点。</p><p>It seems surprising to me that any employer would be reluctant to let hackers work on open-source projects. At Viaweb, we would have been reluctant to hire anyone who didn’t. When we interviewed programmers, the main thing we cared about was what kind of software they wrote in their spare time. You can’t do anything really well unless you love it, and if you love to hack you’ll inevitably be working on projects of your own. [2]<br>我觉得奇怪的是，竟然会有雇主不愿意让黑客参与开源项目。在 Viaweb，我们不愿意雇佣那些不参与开源项目的人。我们面试程序员时，最关心的是他们在业余时间写什么样的软件。除非你热爱一件事，否则你不可能把它做得非常好；如果你热爱黑客技术，你必然会从事自己的项目。[2]</p><p>Because hackers are makers rather than scientists, the right place to look for metaphors is not in the sciences, but among other kinds of makers. What else can painting teach us about hacking?<br>因为黑客是创作者而不是科学家，所以寻找隐喻的地方不应该是科学领域，而应该是其他创作者群体。绘画还能教给我们关于黑客技术的哪些东西呢？</p><p>One thing we can learn, or at least confirm, from the example of painting is how to learn to hack. You learn to paint mostly by doing it. Ditto for hacking. Most hackers don’t learn to hack by taking college courses in programming. They learn to hack by writing programs of their own at age thirteen. Even in college classes, you learn to hack mostly by hacking. [3]<br>从绘画的例子中，我们可以学到（或者至少确认）的一点是如何学习黑客技术。学习绘画主要是通过实践。学习黑客技术也是如此。大多数黑客不是通过大学的编程课程学会黑客技术的。他们在 13 岁时就通过自己写程序来学习。即使在大学课堂上，学习黑客技术主要也是通过实践。[3]</p><p>Because painters leave a trail of work behind them, you can watch them learn by doing. If you look at the work of a painter in chronological order, you’ll find that each painting builds on things that have been learned in previous ones. When there’s something in a painting that works very well, you can usually find version 1 of it in a smaller form in some earlier painting.<br>因为画家会留下一系列作品，你可以看到他们是通过实践来学习的。如果按时间顺序看一位画家的作品，你会发现每一幅画都建立在之前作品所学的基础上。如果一幅画中有某个部分效果很好，你通常能在更早的某幅画中找到它的雏形，只是形式更小。</p><p>I think most makers work this way. Writers and architects seem to as well. Maybe it would be good for hackers to act more like painters, and regularly start over from scratch, instead of continuing to work for years on one project, and trying to incorporate all their later ideas as revisions.<br>我认为大多数创作者都是这样工作的。作家和建筑师似乎也是如此。或许黑客应该更像画家，定期从零开始，而不是多年来一直专注于一个项目，并试图把后来的想法都作为修订加入其中。</p><p>The fact that hackers learn to hack by doing it is another sign of how different hacking is from the sciences. Scientists don’t learn science by doing it, but by doing labs and problem sets. Scientists start out doing work that’s perfect, in the sense that they’re just trying to reproduce work someone else has already done for them. Eventually, they get to the point where they can do original work. Whereas hackers, from the start, are doing original work; it’s just very bad. So hackers start original, and get good, and scientists start good, and get original.<br>黑客通过实践学习黑客技术这一事实，再次表明黑客技术与科学有多么不同。科学家不是通过实践来学习科学的，而是通过做实验和习题。科学家一开始做的工作是 “完美的”，因为他们只是试图重现别人已经完成的工作。最终，他们才能达到能做原创工作的程度。而黑客从一开始就在做原创工作，只是做得很糟糕。所以，黑客是从原创开始，逐渐变好；科学家是从做好开始，逐渐原创。</p><p>The other way makers learn is from examples. For a painter, a museum is a reference library of techniques. For hundreds of years it has been part of the traditional education of painters to copy the works of the great masters, because copying forces you to look closely at the way a painting is made.<br>创作者学习的另一种方式是通过范例。对画家来说，博物馆是技术的参考图书馆。数百年来，临摹大师的作品一直是画家传统教育的一部分，因为临摹会迫使你仔细观察一幅画的创作方式。</p><p>Writers do this too. Benjamin Franklin learned to write by summarizing the points in the essays of Addison and Steele and then trying to reproduce them. Raymond Chandler did the same thing with detective stories.<br>作家也会这样做。本杰明・富兰克林通过总结艾迪生和斯蒂尔散文中的观点，然后试图重现这些观点来学习写作。雷蒙德・钱德勒在侦探小说上也做过同样的事。</p><p>Hackers, likewise, can learn to program by looking at good programs– not just at what they do, but the source code too. One of the less publicized benefits of the open-source movement is that it has made it easier to learn to program. When I learned to program, we had to rely mostly on examples in books. The one big chunk of code available then was Unix, but even this was not open source. Most of the people who read the source read it in illicit photocopies of John Lions’ book, which though written in 1977 was not allowed to be published until 1996.<br>同样，黑客可以通过研究优秀的程序来学习编程 —— 不仅要看程序的功能，还要看源代码。开源运动一个不太为人知的好处是，它让学习编程变得更容易了。我学习编程的时候，主要得依靠书中的例子。当时能获得的一大段代码是 Unix，但它也不是开源的。大多数阅读其源代码的人，都是通过约翰・莱昂斯那本书的非法复印件，这本书虽然写于 1977 年，却直到 1996 年才被允许出版。</p><p>Another example we can take from painting is the way that paintings are created by gradual refinement. Paintings usually begin with a sketch. Gradually the details get filled in. But it is not merely a process of filling in. Sometimes the original plans turn out to be mistaken. Countless paintings, when you look at them in xrays, turn out to have limbs that have been moved or facial features that have been readjusted.<br>我们能从绘画中借鉴的另一个例子是，绘画是通过逐步完善来创作的。绘画通常从草图开始，然后逐渐填充细节。但这不仅仅是填充的过程。有时，最初的计划被证明是错误的。无数画作在 X 光下显示，肢体被移动过，面部特征被调整过。</p><p>Here’s a case where we can learn from painting. I think hacking should work this way too. It’s unrealistic to expect that the specifications for a program will be perfect. You’re better off if you admit this up front, and write programs in a way that allows specifications to change on the fly.<br>这是我们可以从绘画中学习的一点。我认为黑客技术也应该这样。期望一个程序的规范是完美的，这是不现实的。如果你事先承认这一点，并以允许规范随时更改的方式编写程序，会更好。</p><p>(The structure of large companies makes this hard for them to do, so here is another place where startups have an advantage.)<br>（大公司的结构使其难以做到这一点，因此这是初创公司的另一个优势所在。）</p><p>Everyone by now presumably knows about the danger of premature optimization. I think we should be just as worried about premature design– deciding too early what a program should do.<br>想必现在每个人都知道过早优化的危险。我认为我们也应该同样担心过早设计 —— 过早决定一个程序应该做什么。</p><p>The right tools can help us avoid this danger. A good programming language should, like oil paint, make it easy to change your mind. Dynamic typing is a win here because you don’t have to commit to specific data representations up front. But the key to flexibility, I think, is to make the language very abstract. The easiest program to change is one that’s very short.<br>合适的工具可以帮助我们避免这种危险。一种好的编程语言应该像油画颜料一样，让你可以轻松改变想法。动态类型在这里是个优势，因为你不必事先确定特定的数据表示方式。但我认为，灵活性的关键是让语言非常抽象。最容易修改的程序是非常简短的程序。</p><p>This sounds like a paradox, but a great painting has to be better than it has to be. For example, when Leonardo painted the portrait of Ginevra de Benci in the National Gallery, he put a juniper bush behind her head. In it he carefully painted each individual leaf. Many painters might have thought, this is just something to put in the background to frame her head. No one will look that closely at it.<br>这听起来像是个悖论，但一幅伟大的画作必须超越其 “必要” 的程度。例如，列奥纳多在国家美术馆为吉内薇拉・德・本奇画肖像时，在她头后画了一丛杜松。他仔细地画出了每一片叶子。很多画家可能会想，这只是用来衬托她头部的背景，没人会看得那么仔细。</p><p>Not Leonardo. How hard he worked on part of a painting didn’t depend at all on how closely he expected anyone to look at it. He was like Michael Jordan. Relentless.<br>但列奥纳多不这么想。他在一幅画的某个部分投入多少精力，完全不取决于他预计有人会多么仔细地看这个部分。他就像迈克尔・乔丹，执着不懈。</p><p>Relentlessness wins because, in the aggregate, unseen details become visible. When people walk by the portrait of Ginevra de Benci, their attention is often immediately arrested by it, even before they look at the label and notice that it says Leonardo da Vinci. All those unseen details combine to produce something that’s just stunning, like a thousand barely audible voices all singing in tune.<br>执着不懈会获胜，因为总体而言，那些不被注意的细节会变得引人注目。当人们走过吉内薇拉・德・本奇的肖像时，往往会立刻被它吸引，甚至在看到标签并注意到上面写着 “列奥纳多・达・芬奇” 之前就已如此。所有那些不被注意的细节结合在一起，产生了令人惊叹的效果，就像一千个几乎听不见的声音和谐地歌唱。</p><p>Great software, likewise, requires a fanatical devotion to beauty. If you look inside good software, you find that parts no one is ever supposed to see are beautiful too. I’m not claiming I write great software, but I know that when it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. It drives me crazy to see code that’s badly indented, or that uses ugly variable names.<br>同样，伟大的软件需要对美的狂热追求。如果你深入研究优秀的软件，会发现那些永远不会有人看到的部分也是优美的。我不是说我能写出伟大的软件，但我知道，在代码方面，我的行为方式如果用在日常生活中，可能都需要吃处方药了。看到缩进糟糕的代码，或者用了难看的变量名，我会抓狂。</p><p>If a hacker were a mere implementor, turning a spec into code, then he could just work his way through it from one end to the other like someone digging a ditch. But if the hacker is a creator, we have to take inspiration into account.<br>如果黑客仅仅是一个实现者，把规范转换成代码，那么他可以像挖沟一样从一端做到另一端。但如果黑客是创作者，我们就必须考虑灵感的因素。</p><p>In hacking, like painting, work comes in cycles. Sometimes you get excited about some new project and you want to work sixteen hours a day on it. Other times nothing seems interesting.<br>在黑客技术领域，就像在绘画领域一样，工作有周期性。有时你会对某个新项目感到兴奋，想一天工作 16 个小时。其他时候，似乎没有什么事情是有趣的。</p><p>To do good work you have to take these cycles into account, because they’re affected by how you react to them. When you’re driving a car with a manual transmission on a hill, you have to back off the clutch sometimes to avoid stalling. Backing off can likewise prevent ambition from stalling. In both painting and hacking there are some tasks that are terrifyingly ambitious, and others that are comfortingly routine. It’s a good idea to save some easy tasks for moments when you would otherwise stall.<br>要做出好的工作，你必须考虑到这些周期，因为它们会受到你对其反应的影响。当你开着手动挡汽车上山时，有时必须松开离合器以避免熄火。同样，适当放松可以防止雄心壮志 “熄火”。在绘画和黑客技术中，都有一些极具挑战性的任务，也有一些令人安心的常规任务。把一些简单的任务留到你可能 “熄火” 的时刻去做，是个好主意。</p><p>In hacking, this can literally mean saving up bugs. I like debugging: it’s the one time that hacking is as straightforward as people think it is. You have a totally constrained problem, and all you have to do is solve it. Your program is supposed to do x. Instead it does y. Where does it go wrong? You know you’re going to win in the end. It’s as relaxing as painting a wall.<br>在黑客技术中，这可能真的意味着积攒一些 bug。我喜欢调试：这是黑客技术像人们想象的那样简单直接的时刻。你面临一个完全受限的问题，你所要做的就是解决它。你的程序应该做 x，却做了 y。问题出在哪里？你知道最终你会成功。这就像刷墙一样令人放松。</p><p>The example of painting can teach us not only how to manage our own work, but how to work together. A lot of the great art of the past is the work of multiple hands, though there may only be one name on the wall next to it in the museum. Leonardo was an apprentice in the workshop of Verrocchio and painted one of the angels in his Baptism of Christ. This sort of thing was the rule, not the exception. Michelangelo was considered especially dedicated for insisting on painting all the figures on the ceiling of the Sistine Chapel himself.<br>绘画的例子不仅能教我们如何管理自己的工作，还能教我们如何协作。过去很多伟大的艺术作品是多人合作的成果，尽管博物馆里作品旁边可能只写着一个名字。列奥纳多曾是韦罗基奥工作室的学徒，他在韦罗基奥的《基督受洗》中画了其中一个天使。这种情况是常规，而非例外。米开朗基罗因为坚持自己画西斯廷教堂天顶的所有人物而被认为特别敬业。</p><p>As far as I know, when painters worked together on a painting, they never worked on the same parts. It was common for the master to paint the principal figures and for assistants to paint the others and the background. But you never had one guy painting over the work of another.<br>据我所知，当画家们合作一幅画时，他们从不会在同一个部分工作。通常是大师画主要人物，助手画其他人物和背景。但从不会有一个人在另一个人的作品上作画。</p><p>I think this is the right model for collaboration in software too. Don’t push it too far. When a piece of code is being hacked by three or four different people, no one of whom really owns it, it will end up being like a common-room. It will tend to feel bleak and abandoned, and accumulate cruft. The right way to collaborate, I think, is to divide projects into sharply defined modules, each with a definite owner, and with interfaces between them that are as carefully designed and, if possible, as articulated as programming languages.<br>我认为这也是软件协作的正确模式。不要过度协作。当一段代码被三四个不同的人修改，且没有人真正 “拥有” 它时，它最终会像一个公共休息室 —— 感觉凄凉、被遗弃，还会堆积杂物。我认为，正确的协作方式是将项目分成定义清晰的模块，每个模块有明确的所有者，模块之间的接口要像编程语言一样精心设计，尽可能清晰明确。</p><p>Like painting, most software is intended for a human audience. And so hackers, like painters, must have empathy to do really great work. You have to be able to see things from the user’s point of view.<br>和绘画一样，大多数软件是为人类受众设计的。因此，黑客和画家一样，要做出真正伟大的作品，必须有同理心。你必须能够从用户的角度看问题。</p><p>When I was a kid I was always being told to look at things from someone else’s point of view. What this always meant in practice was to do what someone else wanted, instead of what I wanted. This of course gave empathy a bad name, and I made a point of not cultivating it.<br>小时候，我总被教导要从别人的角度看问题。但实际上，这往往意味着要做别人想做的事，而不是我想做的事。这当然给同理心起了个坏名声，我也刻意不去培养它。</p><p>Boy, was I wrong. It turns out that looking at things from other people’s point of view is practically the secret of success. It doesn’t necessarily mean being self-sacrificing. Far from it. Understanding how someone else sees things doesn’t imply that you’ll act in his interest; in some situations– in war, for example– you want to do exactly the opposite. [4]<br>天哪，我错了。事实证明，从别人的角度看问题几乎是成功的秘诀。这并不一定意味着要自我牺牲。远非如此。理解别人如何看待事物，并不意味着你会为他的利益行事；在某些情况下 —— 比如在战争中 —— 你可能想做完全相反的事。[4]</p><p>Most makers make things for a human audience. And to engage an audience you have to understand what they need. Nearly all the greatest paintings are paintings of people, for example, because people are what people are interested in.<br>大多数创作者为人类受众创作。要吸引受众，你必须理解他们的需求。例如，几乎所有最伟大的画作都是人物画，因为人们对人感兴趣。</p><p>Empathy is probably the single most important difference between a good hacker and a great one. Some hackers are quite smart, but when it comes to empathy are practically solipsists. It’s hard for such people to design great software [5], because they can’t see things from the user’s point of view.<br>同理心可能是优秀黑客和伟大黑客之间最重要的区别。有些黑客很聪明，但在同理心方面几乎是唯我论者。这样的人很难设计出伟大的软件 [5]，因为他们无法从用户的角度看问题。</p><p>One way to tell how good people are at empathy is to watch them explain a technical question to someone without a technical background. We probably all know people who, though otherwise smart, are just comically bad at this. If someone asks them at a dinner party what a programming language is, they’ll say something like &#96;&#96;Oh, a high-level language is what the compiler uses as input to generate object code.’’ High-level language? Compiler? Object code? Someone who doesn’t know what a programming language is obviously doesn’t know what these things are, either.<br>判断一个人同理心有多强的一种方式，是看他们如何向没有技术背景的人解释技术问题。我们可能都认识这样的人：尽管在其他方面很聪明，但在这方面却糟糕得可笑。如果有人在晚宴上问他们什么是编程语言，他们会说：“哦，高级语言是编译器用来生成目标代码的输入。” 高级语言？编译器？目标代码？一个不知道什么是编程语言的人，显然也不知道这些东西是什么。</p><p>Part of what software has to do is explain itself. So to write good software you have to understand how little users understand. They’re going to walk up to the software with no preparation, and it had better do what they guess it will, because they’re not going to read the manual. The best system I’ve ever seen in this respect was the original Macintosh, in 1985. It did what software almost never does: it just worked. [6]<br>软件必须做到的一点是自我解释。因此，要写出好的软件，你必须明白用户的理解有多有限。他们会毫无准备地使用软件，软件最好能如他们所猜测的那样工作，因为他们不会去读手册。在这方面，我见过的最好的系统是 1985 年的初代 Macintosh。它做到了软件几乎从未做到的事：就是能正常工作。[6]</p><p>Source code, too, should explain itself. If I could get people to remember just one quote about programming, it would be the one at the beginning of Structure and Interpretation of Computer Programs.<br>源代码也应该能自我解释。如果我能让人们只记住一句关于编程的话，那会是《计算机程序的构造和解释》开头的那句话：</p><p>Programs should be written for people to read, and only incidentally for machines to execute.<br>程序是为了让人读而写的，只是顺便让机器执行。</p><p>You need to have empathy not just for your users, but for your readers. It’s in your interest, because you’ll be one of them. Many a hacker has written a program only to find on returning to it six months later that he has no idea how it works. I know several people who’ve sworn off Perl after such experiences. [7]<br>你不仅需要对用户有同理心，还需要对读者有同理心。这符合你的利益，因为你自己也会是读者之一。很多黑客写了一个程序，六个月后再回头看，却发现自己完全不知道它是怎么工作的。我认识几个人，有过这样的经历后就发誓再也不用 Perl 了。[7]</p><p>Lack of empathy is associated with intelligence, to the point that there is even something of a fashion for it in some places. But I don’t think there’s any correlation. You can do well in math and the natural sciences without having to learn empathy, and people in these fields tend to be smart, so the two qualities have come to be associated. But there are plenty of dumb people who are bad at empathy too. Just listen to the people who call in with questions on talk shows. They ask whatever it is they’re asking in such a roundabout way that the hosts often have to rephrase the question for them.<br>缺乏同理心常与智力联系在一起，甚至在某些地方形成了一种时尚。但我认为两者没有任何关联。你可以在数学和自然科学领域表现出色，而不必学习同理心，而这些领域的人往往很聪明，因此这两种特质就被联系起来了。但也有很多愚蠢的人同样缺乏同理心。听听那些在脱口秀节目中打电话提问的人就知道了。他们问问题的方式如此迂回，主持人常常不得不为他们重新表述问题。</p><p>So, if hacking works like painting and writing, is it as cool? After all, you only get one life. You might as well spend it working on something great.<br>那么，如果黑客技术的工作方式和绘画、写作一样，它有那么酷吗？毕竟，人只有一次生命。你不妨把它花在做一些伟大的事情上。</p><p>Unfortunately, the question is hard to answer. There is always a big time lag in prestige. It’s like light from a distant star. Painting has prestige now because of great work people did five hundred years ago. At the time, no one thought these paintings were as important as we do today. It would have seemed very odd to people at the time that Federico da Montefeltro, the Duke of Urbino, would one day be known mostly as the guy with the strange nose in a painting by Piero della Francesca.<br>不幸的是，这个问题很难回答。声誉总是存在很大的时间滞后。这就像来自遥远恒星的光。绘画现在有声誉，是因为五百年前人们的伟大作品。在当时，没有人认为这些画会像我们今天认为的那么重要。在当时的人看来，乌尔比诺公爵费德里科・达・蒙泰费尔特罗，有一天会主要因为在皮耶罗・德拉・弗朗切斯卡的画中长着一个奇怪的鼻子而被人记住，这似乎是很奇怪的。</p><p>So while I admit that hacking doesn’t seem as cool as painting now, we should remember that painting itself didn’t seem as cool in its glory days as it does now.<br>所以，虽然我承认现在看来黑客技术不如绘画酷，但我们应该记住，绘画在它的辉煌时期，也不像现在这么酷。</p><p>What we can say with some confidence is that these are the glory days of hacking. In most fields the great work is done early on. The paintings made between 1430 and 1500 are still unsurpassed. Shakespeare appeared just as professional theater was being born, and pushed the medium so far that every playwright since has had to live in his shadow. Albrecht Durer did the same thing with engraving, and Jane Austen with the novel.<br>我们有一定把握可以说，现在是黑客技术的辉煌时期。在大多数领域，伟大的作品都出现在早期。1430 年至 1500 年间创作的画作至今仍无与伦比。莎士比亚出现在专业戏剧诞生之时，他把这一媒介推向了极致，此后所有剧作家都不得不活在他的阴影下。阿尔布雷希特・丢勒在版画领域、简・奥斯汀在小说领域也是如此。</p><p>Over and over we see the same pattern. A new medium appears, and people are so excited about it that they explore most of its possibilities in the first couple generations. Hacking seems to be in this phase now.<br>我们一次又一次地看到同样的模式。一种新媒介出现，人们对它非常兴奋，在前几代人中就探索了它的大部分可能性。黑客技术现在似乎正处于这个阶段。</p><p>Painting was not, in Leonardo’s time, as cool as his work helped make it. How cool hacking turns out to be will depend on what we can do with this new medium.<br>在列奥纳多的时代，绘画并不像他的作品所成就的那样酷。黑客技术最终会有多酷，将取决于我们能用这种新媒介做出什么。</p><p>Notes</p><p>[1] The greatest damage that photography has done to painting may be the fact that it killed the best day job. Most of the great painters in history supported themselves by painting portraits.<br>[1] 摄影对绘画造成的最大伤害，或许是它毁掉了最理想的日常工作。历史上大多数伟大的画家都是靠画肖像谋生的。</p><p>[2] I’ve been told that Microsoft discourages employees from contributing to open-source projects, even in their spare time. But so many of the best hackers work on open-source projects now that the main effect of this policy may be to ensure that they won’t be able to hire any first-rate programmers.<br>[2] 有人告诉我，微软不鼓励员工参与开源项目，即使是在业余时间。但如今太多优秀的黑客都在从事开源项目，这一政策的主要效果可能是让他们无法招聘到任何一流的程序员。</p><p>[3] What you learn about programming in college is much like what you learn about books or clothes or dating: what bad taste you had in high school.<br>[3] 你在大学里学到的编程知识，很像你学到的关于书籍、衣服或约会的道理：不过是让你明白自己高中时的品味有多差。</p><p>[4] Here’s an example of applied empathy. At Viaweb, if we couldn’t decide between two alternatives, we’d ask, what would our competitors hate most? At one point a competitor added a feature to their software that was basically useless, but since it was one of few they had that we didn’t, they made much of it in the trade press. We could have tried to explain that the feature was useless, but we decided it would annoy our competitor more if we just implemented it ourselves, so we hacked together our own version that afternoon.<br>[4] 这是一个应用同理心的例子。在 Viaweb 时，如果我们在两个选项之间难以抉择，就会问自己：我们的竞争对手最讨厌什么？有一次，一个竞争对手在他们的软件中添加了一个基本没用的功能，但由于这是他们有而我们没有的少数功能之一，他们在行业媒体上大做文章。我们本可以解释这个功能毫无用处，但我们认为，自己实现这个功能会更让竞争对手恼火，于是那天下午就匆匆编写出了我们自己的版本。</p><p>[5] Except text editors and compilers. Hackers don’t need empathy to design these, because they are themselves typical users.<br>[5] 文本编辑器和编译器除外。黑客设计这些工具时不需要同理心，因为他们自己就是典型用户。</p><p>[6] Well, almost. They overshot the available RAM somewhat, causing much inconvenient disk swapping, but this could be fixed within a few months by buying an additional disk drive.<br>[6] 嗯，差不多是这样。初代 Macintosh 在可用内存上有些超标，导致频繁的磁盘交换，很不方便，但这个问题几个月内就能通过额外购买一个磁盘驱动器解决。</p><p>[7] The way to make programs easy to read is not to stuff them with comments. I would take Abelson and Sussman’s quote a step further. Programming languages should be designed to express algorithms, and only incidentally to tell computers how to execute them. A good programming language ought to be better for explaining software than English. You should only need comments when there is some kind of kludge you need to warn readers about, just as on a road there are only arrows on parts with unexpectedly sharp curves.<br>[7] 让程序易于阅读的方法，不是塞满注释。我想把艾布尔森和萨斯曼的话再推进一步：编程语言的设计应该是为了表达算法，只是顺便告诉计算机如何执行。一种好的编程语言用来解释软件，应该比英语更有效。你只在需要提醒读者注意某些蹩脚的权宜之计时才需要注释，就像道路上只有在出现意外急弯的地方才会有箭头标识一样。</p><p>Thanks to Trevor Blackwell, Robert Morris, Dan Giffin, and Lisa Randall for reading drafts of this, and to Henry Leitner and Larry Finkelstein for inviting me to speak.<br>感谢特雷弗・布莱克韦尔、罗伯特・莫里斯、丹・吉芬和莉萨・兰德尔阅读本文的草稿，也感谢亨利・莱特纳和拉里・芬克尔斯坦邀请我做这次演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散文的时代</title>
    <link href="/2025/08/15/the-age-of-essay/"/>
    <url>/2025/08/15/the-age-of-essay/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Age-of-the-Essay"><a href="#The-Age-of-the-Essay" class="headerlink" title="The Age of the Essay"></a>The Age of the Essay</h2><p>原文链接: <a href="https://paulgraham.com/essay.html">https://paulgraham.com/essay.html</a></p><p>September 2004</p><p>Remember the essays you had to write in high school? Topic sentence, introductory paragraph, supporting paragraphs, conclusion. The conclusion being, say, that Ahab in Moby Dick was a Christ-like figure.</p><p>你还记得高中时必须写的那些散文吗？主题句、引言段、支撑段、结论。结论嘛，比如说，《白鲸记》里的亚哈是个类似基督的人物。</p><p>Oy. So I’m going to try to give the other side of the story: what an essay really is, and how you write one. Or at least, how I write one.</p><p>唉。所以我打算试着讲讲事情的另一面：真正的散文是什么，以及如何写一篇散文。或者至少，讲讲我是怎么写的。</p><h3 id="Mods"><a href="#Mods" class="headerlink" title="Mods"></a><strong>Mods</strong></h3><p><strong>拙劣模仿</strong></p><p>The most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about English literature. Certainly schools should teach students how to write. But due to a series of historical accidents the teaching of writing has gotten mixed together with the study of literature. And so all over the country students are writing not about how a baseball team with a small budget might compete with the Yankees, or the role of color in fashion, or what constitutes a good dessert, but about symbolism in Dickens.</p><p>真正的散文和学校里要求写的东西之间，最明显的区别是：真正的散文并不只关乎英国文学。学校当然应该教学生写作，但由于一系列历史偶然事件，写作教学和文学研究混在了一起。于是，全国各地的学生写的不是预算紧张的棒球队如何与扬基队竞争，不是色彩在时尚中的作用，也不是什么构成了美味的甜点，而是狄更斯作品中的象征主义。</p><p>With the result that writing is made to seem boring and pointless. Who cares about symbolism in Dickens? Dickens himself would be more interested in an essay about color or baseball.</p><p>结果就是，写作被弄得既无聊又无意义。谁会在乎狄更斯作品里的象征主义呢？狄更斯本人可能会对比一篇关于色彩或棒球的散文更感兴趣。</p><p>How did things get this way? To answer that we have to go back almost a thousand years. Around 1100, Europe at last began to catch its breath after centuries of chaos, and once they had the luxury of curiosity they rediscovered what we call “the classics.” The effect was rather as if we were visited by beings from another solar system. These earlier civilizations were so much more sophisticated that for the next several centuries the main work of European scholars, in almost every field, was to assimilate what they knew.</p><p>事情怎么会变成这样呢？要回答这个问题，我们得回到近一千年前。大约在 1100 年，经过几个世纪的混乱后，欧洲终于开始缓过气来，一旦他们有了好奇的闲情逸致，就重新发现了我们所说的 “古典文献”。其影响就好比有来自其他太阳系的生物造访了我们。这些早期文明要复杂得多，以至于在接下来的几个世纪里，欧洲学者在几乎所有领域的主要工作，都是吸收这些文明的知识。</p><p>During this period the study of ancient texts acquired great prestige. It seemed the essence of what scholars did. As European scholarship gained momentum it became less and less important; by 1350 someone who wanted to learn about science could find better teachers than Aristotle in his own era. [1] But schools change slower than scholarship. In the 19th century the study of ancient texts was still the backbone of the curriculum.</p><p>在这一时期，对古代文献的研究获得了极高的声望，似乎成了学者工作的核心。随着欧洲学术的发展，这项研究的重要性越来越低；到 1350 年，想要学习科学的人在自己的时代能找到比亚里士多德更好的老师。[1] 但学校的变化比学术的变化慢。到 19 世纪，对古代文献的研究仍然是课程的核心。</p><p>The time was then ripe for the question: if the study of ancient texts is a valid field for scholarship, why not modern texts? The answer, of course, is that the original raison d’etre of classical scholarship was a kind of intellectual archaeology that does not need to be done in the case of contemporary authors. But for obvious reasons no one wanted to give that answer. The archaeological work being mostly done, it implied that those studying the classics were, if not wasting their time, at least working on problems of minor importance.</p><p>于是，一个问题应运而生：如果研究古代文献是一个合理的学术领域，那为什么不能研究现代文献呢？答案当然是，古典学术最初的存在理由是一种知识考古，而对于当代作家来说，这种考古是不必要的。但出于明显的原因，没人愿意给出这个答案。既然考古工作大多已经完成，这就意味着那些研究古典文献的人，就算不是在浪费时间，至少也是在研究不太重要的问题。</p><p>And so began the study of modern literature. There was a good deal of resistance at first. The first courses in English literature seem to have been offered by the newer colleges, particularly American ones. Dartmouth, the University of Vermont, Amherst, and University College, London taught English literature in the 1820s. But Harvard didn’t have a professor of English literature until 1876, and Oxford not till 1885. (Oxford had a chair of Chinese before it had one of English.) [2]</p><p>于是，现代文学研究开始了。起初阻力很大。第一批英国文学课程似乎是由较新的学院开设的，尤其是美国的学院。达特茅斯学院、佛蒙特大学、阿默斯特学院和伦敦大学学院在 19 世纪 20 年代就开设了英国文学课程。但哈佛大学直到 1876 年才有英国文学教授，牛津大学则要到 1885 年。（牛津大学设立中文教席比设立英文教席还早。）[2]</p><p>What tipped the scales, at least in the US, seems to have been the idea that professors should do research as well as teach. This idea (along with the PhD, the department, and indeed the whole concept of the modern university) was imported from Germany in the late 19th century. Beginning at Johns Hopkins in 1876, the new model spread rapidly.</p><p>至少在美国，打破平衡的似乎是这样一种观念：教授既要教学也要做研究。这种观念（以及博士学位、系的设置，甚至整个现代大学的概念）是 19 世纪末从德国引入的。1876 年从约翰・霍普金斯大学开始，这种新模式迅速传播开来。</p><p>Writing was one of the casualties. Colleges had long taught English composition. But how do you do research on composition? The professors who taught math could be required to do original math, the professors who taught history could be required to write scholarly articles about history, but what about the professors who taught rhetoric or composition? What should they do research on? The closest thing seemed to be English literature. [3]</p><p>写作成了牺牲品之一。大学长期以来都教授英语写作。但怎么对写作进行研究呢？教数学的教授可以被要求做原创性的数学研究，教历史的教授可以被要求写关于历史的学术文章，但教修辞或写作的教授呢？他们应该研究什么？最接近的似乎是英国文学。[3]</p><p>And so in the late 19th century the teaching of writing was inherited by English professors. This had two drawbacks: (a) an expert on literature need not himself be a good writer, any more than an art historian has to be a good painter, and (b) the subject of writing now tends to be literature, since that’s what the professor is interested in.</p><p>于是在 19 世纪末，写作教学落到了英语教授手中。这有两个弊端：（a）文学专家本身不一定是好作家，就像艺术史学家不一定是好画家一样；（b）写作的主题现在往往是文学，因为这是教授感兴趣的领域。</p><p>High schools imitate universities. The seeds of our miserable high school experiences were sown in 1892, when the National Education Association “formally recommended that literature and composition be unified in the high school course.” [4] The ‘riting component of the 3 Rs then morphed into English, with the bizarre consequence that high school students now had to write about English literature– to write, without even realizing it, imitations of whatever English professors had been publishing in their journals a few decades before.</p><p>高中模仿大学。我们痛苦的高中经历的种子是在 1892 年种下的，当时全国教育协会 “正式建议在高中课程中将文学和写作统一起来”。[4] 后来，“3R”（读、写、算）中的 “写” 逐渐演变成了英语课的一部分，结果就出现了一种奇怪的现象：高中生现在必须写关于英国文学的内容 —— 他们在写作时甚至没有意识到，自己是在模仿几十年前英语教授们在期刊上发表的东西。</p><p>It’s no wonder if this seems to the student a pointless exercise, because we’re now three steps removed from real work: the students are imitating English professors, who are imitating classical scholars, who are merely the inheritors of a tradition growing out of what was, 700 years ago, fascinating and urgently needed work.</p><p>难怪在学生看来，这似乎是一项无意义的练习，因为我们现在已经与真正的工作隔了三层：学生在模仿英语教授，英语教授在模仿古典学者，而古典学者只不过是一种传统的继承者，这种传统源于 700 年前一项有趣且急需的工作。</p><h3 id="No-Defense"><a href="#No-Defense" class="headerlink" title="No Defense"></a><strong>No Defense</strong></h3><p><strong>没有辩护</strong></p><p>The other big difference between a real essay and the things they make you write in school is that a real essay doesn’t take a position and then defend it. That principle, like the idea that we ought to be writing about literature, turns out to be another intellectual hangover of long forgotten origins.</p><p>真正的散文和学校里要求写的东西之间的另一个大区别是：真正的散文不会先确立一个立场然后为之辩护。这个原则，就像我们应该写文学的观念一样，其实是另一种被遗忘已久的思想残余。</p><p>It’s often mistakenly believed that medieval universities were mostly seminaries. In fact they were more law schools. And at least in our tradition lawyers are advocates, trained to take either side of an argument and make as good a case for it as they can. Whether cause or effect, this spirit pervaded early universities. The study of rhetoric, the art of arguing persuasively, was a third of the undergraduate curriculum. [5] And after the lecture the most common form of discussion was the disputation. This is at least nominally preserved in our present-day thesis defense: most people treat the words thesis and dissertation as interchangeable, but originally, at least, a thesis was a position one took and the dissertation was the argument by which one defended it.</p><p>人们常常误以为中世纪的大学主要是神学院。事实上，它们更像是法学院。至少在我们的传统中，律师是辩护者，受过训练，能站在论点的任何一方，并尽可能为其辩护。无论因果如何，这种精神弥漫在早期的大学中。修辞学（有说服力的辩论艺术）的学习占了本科课程的三分之一。[5] 讲座之后，最常见的讨论形式是辩论。这至少在名义上保留在我们现在的论文答辩中：大多数人把 “thesis” 和 “dissertation” 当作同义词，但至少在最初，“thesis” 是一个人所持的立场，而 “dissertation” 是为这个立场辩护的论据。</p><p>Defending a position may be a necessary evil in a legal dispute, but it’s not the best way to get at the truth, as I think lawyers would be the first to admit. It’s not just that you miss subtleties this way. The real problem is that you can’t change the question.</p><p>在法律纠纷中，为一个立场辩护可能是一种必要之恶，但这并不是探求真相的最佳方式，我想律师会是第一个承认这一点的人。这不仅仅是因为这样会忽略细节，真正的问题是你不能改变问题本身。</p><p>And yet this principle is built into the very structure of the things they teach you to write in high school. The topic sentence is your thesis, chosen in advance, the supporting paragraphs the blows you strike in the conflict, and the conclusion– uh, what is the conclusion? I was never sure about that in high school. It seemed as if we were just supposed to restate what we said in the first paragraph, but in different enough words that no one could tell. Why bother? But when you understand the origins of this sort of “essay,” you can see where the conclusion comes from. It’s the concluding remarks to the jury.</p><p>然而，这个原则却被植入了高中教你写的文章的结构中。主题句是你预先选定的论点，支撑段是你在辩论中打出的 “重拳”，而结论 —— 嗯，结论是什么呢？高中时我一直不确定。似乎我们只是应该重述第一段说过的话，但要用足够不同的措辞，让人看不出来。何必呢？但当你理解了这种 “散文” 的起源，你就会明白结论来自哪里 —— 它是对陪审团的总结陈词。</p><p>Good writing should be convincing, certainly, but it should be convincing because you got the right answers, not because you did a good job of arguing. When I give a draft of an essay to friends, there are two things I want to know: which parts bore them, and which seem unconvincing. The boring bits can usually be fixed by cutting. But I don’t try to fix the unconvincing bits by arguing more cleverly. I need to talk the matter over.</p><p>好的写作当然应该有说服力，但这种说服力应该来自你得出了正确的答案，而不是因为你辩论得很巧妙。当我把一篇散文的草稿给朋友看时，我想知道两件事：哪些部分让他们觉得无聊，哪些部分看起来没有说服力。无聊的部分通常可以通过删减来修正。但我不会试图通过更巧妙的辩论来修正那些没有说服力的部分，我需要把事情好好谈一谈。</p><p>At the very least I must have explained something badly. In that case, in the course of the conversation I’ll be forced to come up a with a clearer explanation, which I can just incorporate in the essay. More often than not I have to change what I was saying as well. But the aim is never to be convincing per se. As the reader gets smarter, convincing and true become identical, so if I can convince smart readers I must be near the truth.</p><p>至少，我肯定有什么地方解释得不好。在这种情况下，在谈话过程中，我会被迫想出一个更清晰的解释，然后把它融入散文中。很多时候，我还得改变自己原本想说的话。但目的从来不是为了有说服力本身。随着读者越来越聪明，有说服力和真实会变得一致，所以如果我能说服聪明的读者，我一定是接近真相了。</p><p>The sort of writing that attempts to persuade may be a valid (or at least inevitable) form, but it’s historically inaccurate to call it an essay. An essay is something else.</p><p>试图说服他人的写作可能是一种合理的（或者至少是不可避免的）形式，但从历史角度来说，称其为 “散文” 是不准确的。散文是另一回事。</p><h3 id="Trying"><a href="#Trying" class="headerlink" title="Trying"></a><strong>Trying</strong></h3><p><strong>不断尝试</strong></p><p>To understand what a real essay is, we have to reach back into history again, though this time not so far. To Michel de Montaigne, who in 1580 published a book of what he called “essais.” He was doing something quite different from what lawyers do, and the difference is embodied in the name. Essayer is the French verb meaning “to try” and an essai is an attempt. An essay is something you write to try to figure something out.</p><p>要理解真正的散文是什么，我们得再次回顾历史，不过这次不用回溯那么远。要说到米歇尔・德・蒙田，他在 1580 年出版了一本他称之为 “essais” 的书。他所做的事情与律师所做的大不相同，这种区别体现在这个词的含义中。“Essayer” 是法语动词，意思是 “尝试”，而 “essai” 就是一种尝试。散文是你为了弄明白某件事而写的东西。</p><p>Figure out what? You don’t know yet. And so you can’t begin with a thesis, because you don’t have one, and may never have one. An essay doesn’t begin with a statement, but with a question. In a real essay, you don’t take a position and defend it. You notice a door that’s ajar, and you open it and walk in to see what’s inside.</p><p>弄明白什么呢？你还不知道。所以你不能从一个论点开始，因为你没有论点，而且可能永远也不会有。散文不是以陈述开始，而是以问题开始。在一篇真正的散文中，你不会确立一个立场并为之辩护。你会注意到一扇半开的门，然后你打开它，走进去看看里面有什么。</p><p>If all you want to do is figure things out, why do you need to write anything, though? Why not just sit and think? Well, there precisely is Montaigne’s great discovery. Expressing ideas helps to form them. Indeed, helps is far too weak a word. Most of what ends up in my essays I only thought of when I sat down to write them. That’s why I write them.</p><p>不过，如果你只想弄明白事情，为什么需要写下来呢？为什么不只是坐着思考呢？这恰恰是蒙田的重大发现。表达想法有助于形成想法。事实上，“有助于” 这个词太弱了。我散文里的大部分内容，都是在坐下来写的时候才想到的。这就是我写散文的原因。</p><p>In the things you write in school you are, in theory, merely explaining yourself to the reader. In a real essay you’re writing for yourself. You’re thinking out loud.</p><p>在学校里写的东西，理论上，你只是在向读者解释自己。而在真正的散文中，你是为自己而写，你是在出声思考。</p><p>But not quite. Just as inviting people over forces you to clean up your apartment, writing something that other people will read forces you to think well. So it does matter to have an audience. The things I’ve written just for myself are no good. They tend to peter out. When I run into difficulties, I find I conclude with a few vague questions and then drift off to get a cup of tea.</p><p>但也不完全是。就像邀请别人来家里会迫使你打扫公寓一样，写一些别人会读的东西会迫使你好好思考。所以有读者是很重要的。我只为自己写的东西都不怎么样，它们往往会不了了之。当我遇到困难时，我发现自己会以几个模糊的问题结束，然后就起身去喝杯茶了。</p><p>Many published essays peter out in the same way. Particularly the sort written by the staff writers of newsmagazines. Outside writers tend to supply editorials of the defend-a-position variety, which make a beeline toward a rousing (and foreordained) conclusion. But the staff writers feel obliged to write something “balanced.” Since they’re writing for a popular magazine, they start with the most radioactively controversial questions, from which– because they’re writing for a popular magazine– they then proceed to recoil in terror. Abortion, for or against? This group says one thing. That group says another. One thing is certain: the question is a complex one. (But don’t get mad at us. We didn’t draw any conclusions.)</p><p>很多已发表的散文也是这样不了了之，尤其是那些新闻杂志的专职撰稿人写的。外部撰稿人往往会提供那种为立场辩护的社论，直奔一个激动人心（且早已注定）的结论。但专职撰稿人觉得有义务写得 “平衡”。因为他们是为大众杂志写作，所以会从最具争议性的问题入手，然后 —— 因为他们是为大众杂志写作 —— 又会吓得退缩。堕胎，支持还是反对？这个群体这么说，那个群体那么说。有一点是肯定的：这个问题很复杂。（但别生我们的气，我们没有得出任何结论。）</p><h3 id="The-River"><a href="#The-River" class="headerlink" title="The River"></a><strong>The River</strong></h3><p><strong>模仿河流</strong></p><p>Questions aren’t enough. An essay has to come up with answers. They don’t always, of course. Sometimes you start with a promising question and get nowhere. But those you don’t publish. Those are like experiments that get inconclusive results. An essay you publish ought to tell the reader something he didn’t already know.</p><p>只有问题是不够的。散文必须得出答案。当然，并非总能如此。有时你从一个有希望的问题开始，却毫无进展。但这样的散文你不会发表，它们就像得出不确定结果的实验。你发表的散文应该告诉读者一些他不知道的东西。</p><p>But what you tell him doesn’t matter, so long as it’s interesting. I’m sometimes accused of meandering. In defend-a-position writing that would be a flaw. There you’re not concerned with truth. You already know where you’re going, and you want to go straight there, blustering through obstacles, and hand-waving your way across swampy ground. But that’s not what you’re trying to do in an essay. An essay is supposed to be a search for truth. It would be suspicious if it didn’t meander.</p><p>但你告诉读者什么并不重要，只要它有趣就行。我有时会被指责行文散漫。在为立场辩护的写作中，这会是一个缺点。在那种写作中，你不关心真相，你已经知道自己要去哪里，你想直奔目的地，冲破障碍，在沼泽地上挥手示意着前进。但这不是你写散文时要做的事。散文应该是对真相的探索，如果它不 “散漫”，反而会让人怀疑。</p><p>The Meander (aka Menderes) is a river in Turkey. As you might expect, it winds all over the place. But it doesn’t do this out of frivolity. The path it has discovered is the most economical route to the sea. [6]</p><p>米安德河（又称门德雷斯河）是土耳其的一条河。正如你所料，它蜿蜒曲折。但它这么做并非出于轻率，它找到的路径是通往大海最经济的路线。[6]</p><p>The river’s algorithm is simple. At each step, flow down. For the essayist this translates to: flow interesting. Of all the places to go next, choose the most interesting. One can’t have quite as little foresight as a river. I always know generally what I want to write about. But not the specific conclusions I want to reach; from paragraph to paragraph I let the ideas take their course.</p><p>河流的法则很简单：每一步都向下流动。对散文作家来说，这意味着：朝着有趣的方向流动。在所有接下来可以去的地方中，选择最有趣的那个。人不可能像河流那样毫无远见。我总是大致知道自己想写什么，但不知道具体要得出什么结论；我让想法一段一段地自然发展。</p><p>This doesn’t always work. Sometimes, like a river, one runs up against a wall. Then I do the same thing the river does: backtrack. At one point in this essay I found that after following a certain thread I ran out of ideas. I had to go back seven paragraphs and start over in another direction.</p><p>这并不总能奏效。有时，就像河流一样，你会遇到阻碍。这时我会做和河流一样的事：回溯。在写这篇散文时，有一次我发现沿着某个思路写下去，想法枯竭了。我不得不回到七段之前，从另一个方向重新开始。</p><p>Fundamentally an essay is a train of thought– but a cleaned-up train of thought, as dialogue is cleaned-up conversation. Real thought, like real conversation, is full of false starts. It would be exhausting to read. You need to cut and fill to emphasize the central thread, like an illustrator inking over a pencil drawing. But don’t change so much that you lose the spontaneity of the original.</p><p>从根本上说，散文是一连串的想法 —— 但这是经过梳理的想法，就像对话是经过整理的交谈一样。真正的思考，就像真正的交谈一样，充满了错误的开端，读起来会让人疲惫。你需要删减和补充，以突出中心思路，就像插画师在铅笔稿上描墨一样。但不要改动太多，以免失去原作的自发性。</p><p>Err on the side of the river. An essay is not a reference work. It’s not something you read looking for a specific answer, and feel cheated if you don’t find it. I’d much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course.</p><p>宁愿像河流那样 “散漫”。散文不是参考书，不是你为了寻找某个特定答案而读的东西，也不会因为没找到答案就觉得受骗。我宁愿读一篇朝着意想不到但有趣的方向发展的散文，也不愿读一篇沿着规定路线乏味前行的散文。</p><h3 id="Surprise"><a href="#Surprise" class="headerlink" title="Surprise"></a><strong>Surprise</strong></h3><p><strong>制造惊喜</strong></p><p>So what’s interesting? For me, interesting means surprise. Interfaces, as Geoffrey James has said, should follow the principle of least astonishment. A button that looks like it will make a machine stop should make it stop, not speed up. Essays should do the opposite. Essays should aim for maximum surprise.</p><p>那么，什么是有趣呢？对我来说，有趣意味着惊喜。正如杰弗里・詹姆斯所说，界面设计应该遵循 “最小惊讶原则”。一个看起来会让机器停止的按钮，就应该让机器停止，而不是加速。散文则应该相反，散文应该以制造最大惊喜为目标。</p><p>I was afraid of flying for a long time and could only travel vicariously. When friends came back from faraway places, it wasn’t just out of politeness that I asked what they saw. I really wanted to know. And I found the best way to get information out of them was to ask what surprised them. How was the place different from what they expected? This is an extremely useful question. You can ask it of the most unobservant people, and it will extract information they didn’t even know they were recording.</p><p>我很长一段时间都害怕坐飞机，只能 vicariously（通过他人）旅行。当朋友们从远方回来时，我问他们看到了什么，不仅仅是出于礼貌，我是真的想知道。我发现从他们那里获取信息的最好方法是问他们什么让他们感到惊讶，那个地方和他们预期的有什么不同。这是一个非常有用的问题，你可以问最不善于观察的人，它会激发出他们自己都不知道自己记录了的信息。</p><p>Surprises are things that you not only didn’t know, but that contradict things you thought you knew. And so they’re the most valuable sort of fact you can get. They’re like a food that’s not merely healthy, but counteracts the unhealthy effects of things you’ve already eaten.</p><p>惊喜是那些你不仅不知道，而且与你认为自己知道的事情相矛盾的东西。因此，它们是你能得到的最有价值的事实。它们就像一种食物，不仅有益健康，还能抵消你已经吃下去的不健康食物的影响。</p><p>How do you find surprises? Well, therein lies half the work of essay writing. (The other half is expressing yourself well.) The trick is to use yourself as a proxy for the reader. You should only write about things you’ve thought about a lot. And anything you come across that surprises you, who’ve thought about the topic a lot, will probably surprise most readers.</p><p>如何找到惊喜呢？这正是写散文一半的工作量所在（另一半是把自己表达清楚）。诀窍是把自己当作读者的替身。你应该只写那些你思考了很久的事情。而任何让深入思考过这个话题的你感到惊讶的东西，很可能也会让大多数读者感到惊讶。</p><p>For example, in a recent essay I pointed out that because you can only judge computer programmers by working with them, no one knows who the best programmers are overall. I didn’t realize this when I began that essay, and even now I find it kind of weird. That’s what you’re looking for.</p><p>例如，在最近的一篇散文中，我指出，因为你只能通过与计算机程序员一起工作来评判他们，所以没有人知道总体上谁是最好的程序员。我开始写那篇散文时并没有意识到这一点，即使现在我也觉得这有点奇怪。这正是你要寻找的东西。</p><p>So if you want to write essays, you need two ingredients: a few topics you’ve thought about a lot, and some ability to ferret out the unexpected.</p><p>所以，如果你想写散文，你需要两个要素：几个你深入思考过的话题，以及一些发现意外的能力。</p><p>What should you think about? My guess is that it doesn’t matter– that anything can be interesting if you get deeply enough into it. One possible exception might be things that have deliberately had all the variation sucked out of them, like working in fast food. In retrospect, was there anything interesting about working at Baskin-Robbins? Well, it was interesting how important color was to the customers. Kids a certain age would point into the case and say that they wanted yellow. Did they want French Vanilla or Lemon? They would just look at you blankly. They wanted yellow. And then there was the mystery of why the perennial favorite Pralines ‘n’ Cream was so appealing. (I think now it was the salt.) And the difference in the way fathers and mothers bought ice cream for their kids: the fathers like benevolent kings bestowing largesse, the mothers harried, giving in to pressure. So, yes, there does seem to be some material even in fast food.</p><p>你应该思考些什么呢？我猜这并不重要 —— 任何事情，只要你足够深入地去探究，都能变得有趣。一个可能的例外是那些被刻意剥夺了所有变化的事情，比如在快餐店工作。回想一下，在巴斯金 - 罗宾斯（冰淇淋店）工作有什么有趣的地方吗？嗯，顾客对颜色的重视程度很有趣。某个年龄段的孩子会指着展示柜说他们想要黄色的。他们想要法式香草味还是柠檬味？他们只会茫然地看着你，他们就想要黄色的。还有一个谜团：为什么常年受欢迎的 “果仁糖奶油味” 如此吸引人（我现在觉得是因为盐）。还有父母给孩子买冰淇淋的方式差异：父亲们像仁慈的国王一样慷慨赠予，母亲们则疲惫不堪，向压力妥协。所以，是的，即使是在快餐行业，似乎也有可写的素材。</p><p>I didn’t notice those things at the time, though. At sixteen I was about as observant as a lump of rock. I can see more now in the fragments of memory I preserve of that age than I could see at the time from having it all happening live, right in front of me.</p><p>不过，当时我并没有注意到这些。16 岁时，我像一块石头一样不善于观察。现在，从那段岁月留存的记忆碎片中，我能看到的东西，比当时这一切就在我眼前发生时看到的还要多。</p><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a><strong>Observation</strong></h3><p><strong>持续观察</strong></p><p>So the ability to ferret out the unexpected must not merely be an inborn one. It must be something you can learn. How do you learn it?</p><p>所以，发现意外的能力不仅仅是天生的，它一定是可以学习的。如何学习呢？</p><p>To some extent it’s like learning history. When you first read history, it’s just a whirl of names and dates. Nothing seems to stick. But the more you learn, the more hooks you have for new facts to stick onto– which means you accumulate knowledge at an exponential rate. Once you remember that Normans conquered England in 1066, it will catch your attention when you hear that other Normans conquered southern Italy at about the same time. Which will make you wonder about Normandy, and take note when a third book mentions that Normans were not, like most of what is now called France, tribes that flowed in as the Roman empire collapsed, but Vikings (norman &#x3D; north man) who arrived four centuries later in 911. Which makes it easier to remember that Dublin was also established by Vikings in the 840s. Etc, etc squared.</p><p>在某种程度上，这就像学习历史。当你第一次读历史时，看到的只是一堆混乱的名字和日期，似乎什么都记不住。但你学得越多，就有越多的 “钩子” 来挂住新的事实 —— 这意味着你积累知识的速度是呈指数级的。一旦你记住了 1066 年诺曼人征服了英格兰，当你听说其他诺曼人大约在同一时间征服了意大利南部时，就会引起你的注意。这会让你对诺曼底产生好奇，当第三本书提到诺曼人不像现在被称为法国的大部分地区的部落那样，是在罗马帝国崩溃时涌入的，而是四个世纪后（911 年）到来的维京人（“诺曼人” 即 “北方人”）时，你就会留意。这会让你更容易记住都柏林也是维京人在 9 世纪 40 年代建立的，以此类推，知识会不断叠加。</p><p>Collecting surprises is a similar process. The more anomalies you’ve seen, the more easily you’ll notice new ones. Which means, oddly enough, that as you grow older, life should become more and more surprising. When I was a kid, I used to think adults had it all figured out. I had it backwards. Kids are the ones who have it all figured out. They’re just mistaken.</p><p>收集惊喜是一个类似的过程。你见过的异常越多，就越容易注意到新的异常。奇怪的是，这意味着随着你年龄的增长，生活应该会变得越来越令人惊喜。小时候，我曾以为成年人什么都懂。我弄反了。其实是孩子们觉得自己什么都懂，只是他们错了。</p><p>When it comes to surprises, the rich get richer. But (as with wealth) there may be habits of mind that will help the process along. It’s good to have a habit of asking questions, especially questions beginning with Why. But not in the random way that three year olds ask why. There are an infinite number of questions. How do you find the fruitful ones?</p><p>说到惊喜，就是 “富者愈富”。但（就像财富一样）可能有一些思维习惯会有助于这个过程。养成提问的习惯是好的，尤其是以 “为什么” 开头的问题。但不要像三岁孩子那样随意地问 “为什么”。问题有无数个，如何找到有成效的那些呢？</p><p>I find it especially useful to ask why about things that seem wrong. For example, why should there be a connection between humor and misfortune? Why do we find it funny when a character, even one we like, slips on a banana peel? There’s a whole essay’s worth of surprises there for sure.</p><p>我发现，对那些看起来不对劲的事情问 “为什么” 特别有用。例如，为什么幽默和不幸之间会有联系？为什么当一个角色（即使是我们喜欢的角色）踩在香蕉皮上滑倒时，我们会觉得好笑？这里面肯定有一整篇散文值得挖掘的惊喜。</p><p>If you want to notice things that seem wrong, you’ll find a degree of skepticism helpful. I take it as an axiom that we’re only achieving 1% of what we could. This helps counteract the rule that gets beaten into our heads as children: that things are the way they are because that is how things have to be. For example, everyone I’ve talked to while writing this essay felt the same about English classes– that the whole process seemed pointless. But none of us had the balls at the time to hypothesize that it was, in fact, all a mistake. We all thought there was just something we weren’t getting.</p><p>如果你想注意到那些看起来不对劲的事情，一定程度的怀疑态度会有所帮助。我有一个公理：我们只实现了我们潜能的 1%。这有助于抵消我们小时候被灌输的观念：事情之所以是这样，是因为它们必须是这样。例如，在写这篇散文时，我交谈过的每个人都对英语课有同样的感受 —— 整个过程似乎毫无意义。但当时我们中没有人有勇气假设，事实上，这一切都是个错误。我们都以为只是自己没理解什么。</p><p>I have a hunch you want to pay attention not just to things that seem wrong, but things that seem wrong in a humorous way. I’m always pleased when I see someone laugh as they read a draft of an essay. But why should I be? I’m aiming for good ideas. Why should good ideas be funny? The connection may be surprise. Surprises make us laugh, and surprises are what one wants to deliver.</p><p>我有一种预感，你不仅要注意那些看起来不对劲的事情，还要注意那些以幽默方式显得不对劲的事情。当我看到有人读散文草稿时笑起来，我总是很高兴。但我为什么会高兴呢？我的目标是好的想法。为什么好的想法会好笑呢？这可能和惊喜有关。惊喜会让我们笑，而惊喜正是我们想要传递的东西。</p><p>I write down things that surprise me in notebooks. I never actually get around to reading them and using what I’ve written, but I do tend to reproduce the same thoughts later. So the main value of notebooks may be what writing things down leaves in your head.</p><p>我把让我惊讶的事情写在笔记本上。我其实从来没来得及去读它们，也没用到我写的东西，但后来我确实会反复产生同样的想法。所以笔记本的主要价值可能在于，把东西写下来后在你脑海中留下的印记。</p><p>People trying to be cool will find themselves at a disadvantage when collecting surprises. To be surprised is to be mistaken. And the essence of cool, as any fourteen year old could tell you, is nil admirari. When you’re mistaken, don’t dwell on it; just act like nothing’s wrong and maybe no one will notice.</p><p>那些试图装酷的人在收集惊喜时会发现自己处于不利地位。感到惊讶意味着你错了。而酷的本质，任何一个 14 岁的孩子都能告诉你，是 “不为所动”（nil admirari）。当你犯错时，不要纠缠于此，只要表现得若无其事，也许就没人会注意到。</p><p>One of the keys to coolness is to avoid situations where inexperience may make you look foolish. If you want to find surprises you should do the opposite. Study lots of different things, because some of the most interesting surprises are unexpected connections between different fields. For example, jam, bacon, pickles, and cheese, which are among the most pleasing of foods, were all originally intended as methods of preservation. And so were books and paintings.</p><p>酷的关键之一是避免那些可能因缺乏经验而让你显得愚蠢的场合。如果你想找到惊喜，你应该做相反的事。学习很多不同的东西，因为一些最有趣的惊喜是不同领域之间意想不到的联系。例如，果酱、培根、泡菜和奶酪，这些最受欢迎的食物，最初都是为了保存食物。书籍和绘画也是如此。</p><p>Whatever you study, include history– but social and economic history, not political history. History seems to me so important that it’s misleading to treat it as a mere field of study. Another way to describe it is all the data we have so far.</p><p>无论你学什么，都要包括历史 —— 但要学社会史和经济史，而不是政治史。在我看来，历史如此重要，把它仅仅当作一个研究领域是有误导性的。另一种描述方式是，历史是我们迄今为止拥有的所有数据。</p><p>Among other things, studying history gives one confidence that there are good ideas waiting to be discovered right under our noses. Swords evolved during the Bronze Age out of daggers, which (like their flint predecessors) had a hilt separate from the blade. Because swords are longer the hilts kept breaking off. But it took five hundred years before someone thought of casting hilt and blade as one piece.</p><p>除此之外，学习历史能让人相信，好的想法就在我们眼前，等待被发现。青铜时代的剑是由匕首演变而来的，匕首（就像它们的燧石前身一样）的剑柄和剑身是分开的。因为剑更长，剑柄总是断裂。但过了五百年，才有人想到把剑柄和剑身铸成一体。</p><h3 id="Disobedience"><a href="#Disobedience" class="headerlink" title="Disobedience"></a><strong>Disobedience</strong></h3><p><strong>打破预期</strong></p><p>Above all, make a habit of paying attention to things you’re not supposed to, either because they’re “inappropriate,” or not important, or not what you’re supposed to be working on. If you’re curious about something, trust your instincts. Follow the threads that attract your attention. If there’s something you’re really interested in, you’ll find they have an uncanny way of leading back to it anyway, just as the conversation of people who are especially proud of something always tends to lead back to it.</p><p>最重要的是，养成关注那些你不应该关注的事情的习惯，无论是因为它们 “不合适”、不重要，还是不属于你应该做的事。如果你对某件事好奇，相信你的直觉。跟随吸引你注意力的线索。如果你真的对某件事感兴趣，你会发现这些线索总会以一种不可思议的方式回到这件事上，就像那些对某件事特别自豪的人，他们的谈话总会回到这件事上一样。</p><p>For example, I’ve always been fascinated by comb-overs, especially the extreme sort that make a man look as if he’s wearing a beret made of his own hair. Surely this is a lowly sort of thing to be interested in– the sort of superficial quizzing best left to teenage girls. And yet there is something underneath. The key question, I realized, is how does the comber-over not see how odd he looks? And the answer is that he got to look that way incrementally. What began as combing his hair a little carefully over a thin patch has gradually, over 20 years, grown into a monstrosity. Gradualness is very powerful. And that power can be used for constructive purposes too: just as you can trick yourself into looking like a freak, you can trick yourself into creating something so grand that you would never have dared to plan such a thing. Indeed, this is just how most good software gets created. You start by writing a stripped-down kernel (how hard can it be?) and gradually it grows into a complete operating system. Hence the next leap: could you do the same thing in painting, or in a novel?</p><p>例如，我一直对折中发型（把一边的头发梳到另一边掩盖秃顶）很着迷，尤其是那种极端的，让一个男人看起来像戴着一顶用自己头发做的贝雷帽的发型。当然，对这种事情感兴趣似乎很肤浅 —— 这种表面的探究最好留给十几岁的女孩。但这背后有更深层的东西。我意识到，关键问题是：留这种发型的人为什么看不出自己看起来有多奇怪？答案是，他是逐渐变成那样的。一开始只是小心翼翼地把头发梳过一小块稀疏的地方，20 年来，逐渐变成了一种怪异的样子。渐进的力量是很强大的。这种力量也可以用于建设性的目的：就像你可以不知不觉地让自己看起来像个怪人一样，你也可以不知不觉地创造出一些宏伟的东西，而这些东西是你永远不敢计划的。事实上，大多数好的软件都是这样创造出来的。你从写一个精简的内核开始（能有多难呢？），然后它逐渐成长为一个完整的操作系统。由此产生下一个飞跃：你能在绘画或小说中做同样的事情吗？</p><p>See what you can extract from a frivolous question? If there’s one piece of advice I would give about writing essays, it would be: don’t do as you’re told. Don’t believe what you’re supposed to. Don’t write the essay readers expect; one learns nothing from what one expects. And don’t write the way they taught you to in school.</p><p>看到你能从一个看似无聊的问题中挖掘出什么了吗？如果关于写散文我有一条建议，那就是：不要按别人告诉你的去做。不要相信那些你 “应该” 相信的东西。不要写读者期望的散文，从预期中你学不到任何东西。也不要按学校教你的方式去写。</p><p>The most important sort of disobedience is to write essays at all. Fortunately, this sort of disobedience shows signs of becoming rampant. It used to be that only a tiny number of officially approved writers were allowed to write essays. Magazines published few of them, and judged them less by what they said than who wrote them; a magazine might publish a story by an unknown writer if it was good enough, but if they published an essay on x it had to be by someone who was at least forty and whose job title had x in it. Which is a problem, because there are a lot of things insiders can’t say precisely because they’re insiders.</p><p>最重要的一种 “不服从” 是根本就去写散文。幸运的是，这种 “不服从” 有泛滥的迹象。过去，只有极少数官方认可的作家被允许写散文。杂志发表的散文很少，评判它们时，更多看是谁写的，而不是写了什么；一本杂志可能会发表一个不知名作家的故事，如果故事足够好的话，但如果要发表一篇关于 x 的散文，作者必须至少 40 岁，且 job title（职位头衔）中包含 x。这是个问题，因为有很多事情，业内人士恰恰因为是业内人士而无法说出口。</p><p>The Internet is changing that. Anyone can publish an essay on the Web, and it gets judged, as any writing should, by what it says, not who wrote it. Who are you to write about x? You are whatever you wrote.</p><p>互联网正在改变这一点。任何人都可以在网上发表散文，而且它会像任何作品一样，根据内容而不是作者来评判。你凭什么写关于 x 的内容？你写的东西就定义了你。</p><p>Popular magazines made the period between the spread of literacy and the arrival of TV the golden age of the short story. The Web may well make this the golden age of the essay. And that’s certainly not something I realized when I started writing this.</p><p>在识字率普及到电视出现之间的这段时间里，通俗杂志造就了短篇小说的黄金时代。互联网很可能会让现在成为散文的黄金时代。这一点，我在开始写这篇散文时肯定没有意识到。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垃圾邮件应对方案</title>
    <link href="/2025/08/15/a-plan-for-spam/"/>
    <url>/2025/08/15/a-plan-for-spam/</url>
    
    <content type="html"><![CDATA[<h2 id="A-Plan-for-Spam"><a href="#A-Plan-for-Spam" class="headerlink" title="A Plan for Spam"></a>A Plan for Spam</h2><p>原文链接: <a href="https://paulgraham.com/spam.html">https://paulgraham.com/spam.html</a></p><p>August 2002</p><p>(This article describes the spam-filtering techniques used in the spamproof web-based mail reader we built to exercise Arc. An improved algorithm is described in Better Bayesian Filtering.)</p><p>（本文介绍了我们为测试 Arc 语言而开发的防垃圾邮件网页邮件阅读器中使用的垃圾邮件过滤技术。更完善的算法详见《更好的贝叶斯过滤》。）</p><p>I think it’s possible to stop spam, and that content-based filters are the way to do it. The Achilles heel of the spammers is their message. They can circumvent any other barrier you set up. They have so far, at least. But they have to deliver their message, whatever it is. If we can write software that recognizes their messages, there is no way they can get around that.</p><p>我认为阻止垃圾邮件是有可能的，而基于内容的过滤器是实现这一目标的方法。垃圾邮件发送者的致命弱点在于他们的邮件内容。他们能绕过你设置的任何其他障碍 —— 至少到目前为止是这样。但无论内容是什么，他们总得传递信息。如果我们能写出识别这些信息的软件，他们就无从遁形了。</p><hr><p>To the recipient, spam is easily recognizable. If you hired someone to read your mail and discard the spam, they would have little trouble doing it. How much do we have to do, short of AI, to automate this process?</p><p>对收件人来说，垃圾邮件很容易识别。如果雇人读邮件并删掉垃圾邮件，他们做起来毫不费力。抛开人工智能不谈，要实现这个过程的自动化，我们需要做到什么程度呢？</p><p>I think we will be able to solve the problem with fairly simple algorithms. In fact, I’ve found that you can filter present-day spam acceptably well using nothing more than a Bayesian combination of the spam probabilities of individual words. Using a slightly tweaked (as described below) Bayesian filter, we now miss less than 5 per 1000 spams, with 0 false positives.</p><p>我认为我们能用相当简单的算法解决这个问题。事实上，我发现仅通过对单个单词的垃圾邮件概率进行贝叶斯组合，就能很好地过滤当前的垃圾邮件。使用经过轻微调整（如下所述）的贝叶斯过滤器，我们现在每 1000 封垃圾邮件中漏过的不到 5 封，且误判率为 0。</p><p>The statistical approach is not usually the first one people try when they write spam filters. Most hackers’ first instinct is to try to write software that recognizes individual properties of spam. You look at spams and you think, the gall of these guys to try sending me mail that begins “Dear Friend” or has a subject line that’s all uppercase and ends in eight exclamation points. I can filter out that stuff with about one line of code.</p><p>人们编写垃圾邮件过滤器时，通常不会首先尝试统计方法。大多数黑客的第一反应是编写能识别垃圾邮件个别特征的软件。看到垃圾邮件时，你会想：这些人竟然敢给我发以 “亲爱的朋友” 开头、或主题全是大写且以八个感叹号结尾的邮件。我用一行代码就能过滤掉这类东西。</p><p>And so you do, and in the beginning it works. A few simple rules will take a big bite out of your incoming spam. Merely looking for the word “click” will catch 79.7% of the emails in my spam corpus, with only 1.2% false positives.</p><p>于是你就这么做了，一开始确实有效。几条简单的规则就能大幅减少收到的垃圾邮件。仅搜索 “click” 这个词，就能拦截我垃圾邮件语料库中 79.7% 的邮件，误判率仅为 1.2%。</p><p>I spent about six months writing software that looked for individual spam features before I tried the statistical approach. What I found was that recognizing that last few percent of spams got very hard, and that as I made the filters stricter I got more false positives.</p><p>在尝试统计方法之前，我花了大约六个月时间编写识别垃圾邮件个别特征的软件。我发现，识别最后那几个百分点的垃圾邮件变得非常困难，而且随着过滤器越来越严格，误判也越来越多。</p><p>False positives are innocent emails that get mistakenly identified as spams. For most users, missing legitimate email is an order of magnitude worse than receiving spam, so a filter that yields false positives is like an acne cure that carries a risk of death to the patient.</p><p>误判指的是正常邮件被错误地标记为垃圾邮件。对大多数用户来说，错过合法邮件比收到垃圾邮件要糟糕得多，所以产生误判的过滤器就像一种痤疮疗法，却有导致患者死亡的风险。</p><p>The more spam a user gets, the less likely he’ll be to notice one innocent mail sitting in his spam folder. And strangely enough, the better your spam filters get, the more dangerous false positives become, because when the filters are really good, users will be more likely to ignore everything they catch.</p><p>用户收到的垃圾邮件越多，就越难注意到垃圾邮件文件夹里有一封正常邮件。奇怪的是，你的垃圾邮件过滤器越好，误判就越危险，因为当过滤器非常出色时，用户更可能忽略它拦截的所有内容。</p><p>I don’t know why I avoided trying the statistical approach for so long. I think it was because I got addicted to trying to identify spam features myself, as if I were playing some kind of competitive game with the spammers. (Nonhackers don’t often realize this, but most hackers are very competitive.) When I did try statistical analysis, I found immediately that it was much cleverer than I had been. It discovered, of course, that terms like “virtumundo” and “teens” were good indicators of spam. But it also discovered that “per” and “FL” and “ff0000” are good indicators of spam. In fact, “ff0000” (html for bright red) turns out to be as good an indicator of spam as any pornographic term.</p><p>我不知道为什么我这么久都没尝试统计方法。我想是因为我沉迷于自己识别垃圾邮件特征，就像在和垃圾邮件发送者玩一种竞争性游戏（非黑客往往意识不到，但大多数黑客都极具竞争性）。当我尝试统计分析时，立刻发现它比我聪明得多。当然，它发现了 “virtumundo” 和 “teens” 这类词是垃圾邮件的良好指示器，但也发现 “per”“FL” 和 “ff0000” 也是如此。事实上，“ff0000”（HTML 中表示亮红色）作为垃圾邮件指示器的效果，和任何色情词汇一样好。</p><hr><p>Here’s a sketch of how I do statistical filtering. I start with one corpus of spam and one of nonspam mail. At the moment each one has about 4000 messages in it. I scan the entire text, including headers and embedded html and javascript, of each message in each corpus. I currently consider alphanumeric characters, dashes, apostrophes, and dollar signs to be part of tokens, and everything else to be a token separator. (There is probably room for improvement here.) I ignore tokens that are all digits, and I also ignore html comments, not even considering them as token separators.</p><p>下面简要介绍我进行统计过滤的方法。我从一个垃圾邮件语料库和一个非垃圾邮件语料库开始。目前每个语料库大约有 4000 条消息。我扫描每个语料库中每条消息的全部文本，包括标题、嵌入的 HTML 和 JavaScript。目前，我将字母数字字符、连字符、撇号和美元符号视为令牌的一部分，其他所有字符都作为令牌分隔符（这方面可能还有改进空间）。我忽略全是数字的令牌，也忽略 HTML 注释，甚至不把它们当作令牌分隔符。</p><p>I count the number of times each token (ignoring case, currently) occurs in each corpus. At this stage I end up with two large hash tables, one for each corpus, mapping tokens to number of occurrences.</p><p>我统计每个令牌（目前不区分大小写）在每个语料库中出现的次数。在这个阶段，我得到两个大型哈希表，每个语料库一个，用于将令牌映射到出现次数。</p><p>Next I create a third hash table, this time mapping each token to the probability that an email containing it is a spam, which I calculate as follows [1]:</p><p>接下来，我创建第三个哈希表，这次是将每个令牌映射到包含该令牌的邮件是垃圾邮件的概率，计算方法如下 [1]：</p><p>(let ((g (* 2 (or (gethash word good) 0)))<br>(b (or (gethash word bad) 0)))<br>(unless (&lt; (+ g b) 5)<br>(max .01<br>(min .99 (float (&#x2F; (min 1 (&#x2F; b nbad))<br>(+ (min 1 (&#x2F; g ngood))<br>(min 1 (&#x2F; b nbad)))))))))<br>where word is the token whose probability we’re calculating, good and bad are the hash tables I created in the first step, and ngood and nbad are the number of nonspam and spam messages respectively.</p><p>其中，word 是我们要计算概率的令牌，good 和 bad 是第一步创建的哈希表，ngood 和 nbad 分别是非垃圾邮件和垃圾邮件的数量。</p><p>I explained this as code to show a couple of important details. I want to bias the probabilities slightly to avoid false positives, and by trial and error I’ve found that a good way to do it is to double all the numbers in good. This helps to distinguish between words that occasionally do occur in legitimate email and words that almost never do. I only consider words that occur more than five times in total (actually, because of the doubling, occurring three times in nonspam mail would be enough). And then there is the question of what probability to assign to words that occur in one corpus but not the other. Again by trial and error I chose .01 and .99. There may be room for tuning here, but as the corpus grows such tuning will happen automatically anyway.</p><p>我用代码来解释是为了展示几个重要细节。我想略微调整概率以避免误判，通过反复试验发现，一个好方法是将 good 中的所有数值加倍。这有助于区分偶尔出现在合法邮件中的单词和几乎从不出现的单词。我只考虑总出现次数超过 5 次的单词（实际上，由于加倍处理，在非垃圾邮件中出现 3 次就足够了）。还有一个问题是，对于在一个语料库中出现而在另一个中不出现的单词，该分配什么概率。我再次通过反复试验选择了 0.01 和 0.99。这里可能有调整的空间，但随着语料库的扩大，这种调整会自动进行。</p><p>The especially observant will notice that while I consider each corpus to be a single long stream of text for purposes of counting occurrences, I use the number of emails in each, rather than their combined length, as the divisor in calculating spam probabilities. This adds another slight bias to protect against false positives.</p><p>观察力特别敏锐的人会注意到，虽然为了统计出现次数，我将每个语料库视为一个连续的长文本流，但在计算垃圾邮件概率时，我使用每个语料库中的邮件数量作为除数，而不是它们的总长度。这又增加了一个轻微的偏向，以防止误判。</p><p>When new mail arrives, it is scanned into tokens, and the most interesting fifteen tokens, where interesting is measured by how far their spam probability is from a neutral .5, are used to calculate the probability that the mail is spam. If probs is a list of the fifteen individual probabilities, you calculate the combined probability thus:</p><p>当新邮件到达时，它会被扫描成令牌，然后选取 15 个最 “有趣” 的令牌（“有趣” 的衡量标准是它们的垃圾邮件概率与中性值 0.5 的距离）来计算该邮件是垃圾邮件的概率。如果 probs 是这 15 个单独概率的列表，那么联合概率的计算方法如下：</p><p>(let ((prod (apply #’* probs)))<br>(&#x2F; prod (+ prod (apply #’* (mapcar #’(lambda (x)<br>(- 1 x))<br>probs)))))<br>One question that arises in practice is what probability to assign to a word you’ve never seen, i.e. one that doesn’t occur in the hash table of word probabilities. I’ve found, again by trial and error, that .4 is a good number to use. If you’ve never seen a word before, it is probably fairly innocent; spam words tend to be all too familiar.</p><p>在实际应用中出现的一个问题是，对于从未见过的单词（即在单词概率哈希表中没有出现的单词），该分配什么概率。我再次通过反复试验发现，0.4 是个不错的数值。如果你从未见过某个单词，它很可能是无害的；而垃圾邮件中出现的单词往往都很常见。</p><p>There are examples of this algorithm being applied to actual emails in an appendix at the end.</p><p>文末的附录中有该算法应用于实际邮件的例子。</p><p>I treat mail as spam if the algorithm above gives it a probability of more than .9 of being spam. But in practice it would not matter much where I put this threshold, because few probabilities end up in the middle of the range.</p><p>如果上述算法给出的邮件是垃圾邮件的概率超过 0.9，我就将其视为垃圾邮件。但实际上，这个阈值设在哪里影响不大，因为很少有概率会落在中间范围。</p><hr><p>One great advantage of the statistical approach is that you don’t have to read so many spams. Over the past six months, I’ve read literally thousands of spams, and it is really kind of demoralizing. Norbert Wiener said if you compete with slaves you become a slave, and there is something similarly degrading about competing with spammers. To recognize individual spam features you have to try to get into the mind of the spammer, and frankly I want to spend as little time inside the minds of spammers as possible.</p><p>统计方法的一大优势是你不必阅读那么多垃圾邮件。在过去六个月里，我确实读了数千封垃圾邮件，这真的很让人泄气。诺伯特・维纳说过，与奴隶竞争，你会变成奴隶；与垃圾邮件发送者竞争，也有类似的屈辱感。要识别垃圾邮件的个别特征，你就得试图钻进垃圾邮件发送者的脑子里，坦率地说，我想尽可能少花时间去琢磨他们的想法。</p><p>But the real advantage of the Bayesian approach, of course, is that you know what you’re measuring. Feature-recognizing filters like SpamAssassin assign a spam “score” to email. The Bayesian approach assigns an actual probability. The problem with a “score” is that no one knows what it means. The user doesn’t know what it means, but worse still, neither does the developer of the filter. How many points should an email get for having the word “sex” in it? A probability can of course be mistaken, but there is little ambiguity about what it means, or how evidence should be combined to calculate it. Based on my corpus, “sex” indicates a .97 probability of the containing email being a spam, whereas “sexy” indicates .99 probability. And Bayes’ Rule, equally unambiguous, says that an email containing both words would, in the (unlikely) absence of any other evidence, have a 99.97% chance of being a spam.</p><p>当然，贝叶斯方法的真正优势在于你知道自己在衡量什么。像 SpamAssassin 这样的特征识别过滤器会给邮件分配一个垃圾邮件 “分数”，而贝叶斯方法则给出实际概率。“分数” 的问题在于没人知道它意味着什么。用户不知道，更糟糕的是，过滤器的开发者也不知道。邮件中出现 “sex” 一词应该扣多少分？概率当然可能出错，但它的含义以及如何结合证据计算概率，几乎没有歧义。根据我的语料库，“sex” 意味着包含它的邮件有 97% 的概率是垃圾邮件，而 “sexy” 则意味着 99% 的概率。同样明确的是，根据贝叶斯法则，在（不太可能的）没有其他证据的情况下，同时包含这两个词的邮件有 99.97% 的概率是垃圾邮件。</p><p>Because it is measuring probabilities, the Bayesian approach considers all the evidence in the email, both good and bad. Words that occur disproportionately rarely in spam (like “though” or “tonight” or “apparently”) contribute as much to decreasing the probability as bad words like “unsubscribe” and “opt-in” do to increasing it. So an otherwise innocent email that happens to include the word “sex” is not going to get tagged as spam.</p><p>由于贝叶斯方法是在衡量概率，它会考虑邮件中所有的证据，包括有利的和不利的。在垃圾邮件中出现频率异常低的词（如 “though”“tonight”“apparently”）在降低概率方面的作用，与 “unsubscribe”“opt-in” 等不利词汇在提高概率方面的作用相当。因此，一封原本正常、只是碰巧包含 “sex” 一词的邮件不会被标记为垃圾邮件。</p><p>Ideally, of course, the probabilities should be calculated individually for each user. I get a lot of email containing the word “Lisp”, and (so far) no spam that does. So a word like that is effectively a kind of password for sending mail to me. In my earlier spam-filtering software, the user could set up a list of such words and mail containing them would automatically get past the filters. On my list I put words like “Lisp” and also my zipcode, so that (otherwise rather spammy-sounding) receipts from online orders would get through. I thought I was being very clever, but I found that the Bayesian filter did the same thing for me, and moreover discovered of a lot of words I hadn’t thought of.</p><p>当然，理想情况下，概率应该为每个用户单独计算。我收到很多包含 “Lisp” 一词的邮件，（到目前为止）没有垃圾邮件包含这个词。所以像这样的词实际上是给我发邮件的一种 “密码”。在我早期的垃圾邮件过滤软件中，用户可以设置这样的单词列表，包含这些单词的邮件会自动通过过滤器。我在自己的列表中加入了 “Lisp” 和我的邮政编码，这样（否则听起来很像垃圾邮件的）在线订单收据就能通过。我以为自己很聪明，但发现贝叶斯过滤器也为我做了同样的事，而且还发现了很多我没想到的单词。</p><p>When I said at the start that our filters let through less than 5 spams per 1000 with 0 false positives, I’m talking about filtering my mail based on a corpus of my mail. But these numbers are not misleading, because that is the approach I’m advocating: filter each user’s mail based on the spam and nonspam mail he receives. Essentially, each user should have two delete buttons, ordinary delete and delete-as-spam. Anything deleted as spam goes into the spam corpus, and everything else goes into the nonspam corpus.</p><p>我一开始说我们的过滤器每 1000 封垃圾邮件中漏过的不到 5 封，且误判率为 0，指的是基于我自己的邮件语料库过滤我的邮件。但这些数字并不具有误导性，因为这正是我所倡导的方法：根据每个用户收到的垃圾邮件和非垃圾邮件来过滤他们的邮件。本质上，每个用户应该有两个删除按钮，一个是普通删除，一个是标记为垃圾邮件删除。标记为垃圾邮件删除的内容进入垃圾邮件语料库，其他内容进入非垃圾邮件语料库。</p><p>You could start users with a seed filter, but ultimately each user should have his own per-word probabilities based on the actual mail he receives. This (a) makes the filters more effective, (b) lets each user decide their own precise definition of spam, and (c) perhaps best of all makes it hard for spammers to tune mails to get through the filters. If a lot of the brain of the filter is in the individual databases, then merely tuning spams to get through the seed filters won’t guarantee anything about how well they’ll get through individual users’ varying and much more trained filters.</p><p>可以给用户一个初始过滤器，但最终每个用户都应该根据自己收到的实际邮件拥有自己的单词概率。这（a）能提高过滤器的效率；（b）让每个用户可以自己定义垃圾邮件；（c）或许最重要的是，让垃圾邮件发送者难以调整邮件以通过过滤器。如果过滤器的核心部分存在于各个用户的数据库中，那么仅仅调整垃圾邮件以通过初始过滤器，并不能保证它们能顺利通过每个用户各不相同且训练更充分的过滤器。</p><p>Content-based spam filtering is often combined with a whitelist, a list of senders whose mail can be accepted with no filtering. One easy way to build such a whitelist is to keep a list of every address the user has ever sent mail to. If a mail reader has a delete-as-spam button then you could also add the from address of every email the user has deleted as ordinary trash.</p><p>基于内容的垃圾邮件过滤通常与白名单结合使用，白名单是指可以无过滤接收邮件的发送者列表。构建这种白名单的一个简单方法是保存用户曾经发送过邮件的所有地址。如果邮件阅读器有 “标记为垃圾邮件删除” 按钮，还可以添加用户以普通方式删除的所有邮件的发件人地址。</p><p>I’m an advocate of whitelists, but more as a way to save computation than as a way to improve filtering. I used to think that whitelists would make filtering easier, because you’d only have to filter email from people you’d never heard from, and someone sending you mail for the first time is constrained by convention in what they can say to you. Someone you already know might send you an email talking about sex, but someone sending you mail for the first time would not be likely to. The problem is, people can have more than one email address, so a new from-address doesn’t guarantee that the sender is writing to you for the first time. It is not unusual for an old friend (especially if he is a hacker) to suddenly send you an email with a new from-address, so you can’t risk false positives by filtering mail from unknown addresses especially stringently.</p><p>我支持使用白名单，但更多是作为节省计算资源的方式，而非改进过滤效果的方式。我曾经认为白名单会让过滤更容易，因为你只需要过滤来自陌生发件人的邮件，而第一次给你发邮件的人在内容上会受到惯例的约束。你认识的人可能会给你发谈论性的邮件，但第一次给你发邮件的人不太可能这样做。问题是，人们可能有多个电子邮件地址，所以一个新的发件人地址并不能保证发送者是第一次给你写信。老朋友（尤其是黑客朋友）突然用新地址给你发邮件并不罕见，所以不能为了严格过滤陌生地址的邮件而冒误判的风险。</p><p>In a sense, though, my filters do themselves embody a kind of whitelist (and blacklist) because they are based on entire messages, including the headers. So to that extent they “know” the email addresses of trusted senders and even the routes by which mail gets from them to me. And they know the same about spam, including the server names, mailer versions, and protocols.</p><p>不过，从某种意义上说，我的过滤器本身就包含了一种白名单（和黑名单），因为它们基于整个邮件，包括标题。因此，它们在一定程度上 “知道” 可信发送者的电子邮件地址，甚至知道邮件从他们那里发送到我这里的路径。它们对垃圾邮件也有同样的了解，包括服务器名称、邮件程序版本和协议。</p><hr><p>If I thought that I could keep up current rates of spam filtering, I would consider this problem solved. But it doesn’t mean much to be able to filter out most present-day spam, because spam evolves. Indeed, most antispam techniques so far have been like pesticides that do nothing more than create a new, resistant strain of bugs.</p><p>如果我认为能保持目前的垃圾邮件过滤效率，我会认为这个问题已经解决了。但能过滤掉大多数当前的垃圾邮件意义不大，因为垃圾邮件在不断演变。事实上，到目前为止，大多数反垃圾邮件技术就像杀虫剂，只是催生了新的、有抗药性的 “虫子”。</p><p>I’m more hopeful about Bayesian filters, because they evolve with the spam. So as spammers start using “c0ck” instead of “cock” to evade simple-minded spam filters based on individual words, Bayesian filters automatically notice. Indeed, “c0ck” is far more damning evidence than “cock”, and Bayesian filters know precisely how much more.</p><p>我对贝叶斯过滤器更有信心，因为它们能随垃圾邮件一起演变。所以当垃圾邮件发送者开始用 “c0ck” 代替 “cock” 来规避基于单个单词的简单垃圾邮件过滤器时，贝叶斯过滤器会自动注意到。事实上，“c0ck” 比 “cock” 更能证明是垃圾邮件，而贝叶斯过滤器能精确地知道其程度。</p><p>Still, anyone who proposes a plan for spam filtering has to be able to answer the question: if the spammers knew exactly what you were doing, how well could they get past you? For example, I think that if checksum-based spam filtering becomes a serious obstacle, the spammers will just switch to mad-lib techniques for generating message bodies.</p><p>不过，任何提出垃圾邮件过滤方案的人都必须能够回答这个问题：如果垃圾邮件发送者确切知道你在做什么，他们能有多容易绕过你？例如，我认为如果基于校验和的垃圾邮件过滤成为一个严重障碍，垃圾邮件发送者就会转向用 “疯狂填词” 技术生成邮件正文。</p><p>To beat Bayesian filters, it would not be enough for spammers to make their emails unique or to stop using individual naughty words. They’d have to make their mails indistinguishable from your ordinary mail. And this I think would severely constrain them. Spam is mostly sales pitches, so unless your regular mail is all sales pitches, spams will inevitably have a different character. And the spammers would also, of course, have to change (and keep changing) their whole infrastructure, because otherwise the headers would look as bad to the Bayesian filters as ever, no matter what they did to the message body. I don’t know enough about the infrastructure that spammers use to know how hard it would be to make the headers look innocent, but my guess is that it would be even harder than making the message look innocent.</p><p>要击败贝叶斯过滤器，垃圾邮件发送者仅仅让他们的邮件独一无二或停止使用个别不雅词汇是不够的。他们必须让自己的邮件与你的普通邮件无法区分。而我认为这会严重限制他们。垃圾邮件大多是推销信息，所以除非你的常规邮件全是推销信息，否则垃圾邮件必然会有不同的特征。当然，垃圾邮件发送者还必须改变（并不断改变）他们的整个基础设施，否则无论他们对邮件正文做什么，标题在贝叶斯过滤器看来仍会和以前一样可疑。我对垃圾邮件发送者使用的基础设施了解不够，不知道要让标题看起来无害有多难，但我猜这比让邮件正文看起来无害更难。</p><p>Assuming they could solve the problem of the headers, the spam of the future will probably look something like this:</p><p>Hey there. Thought you should check out the following:<br><a href="http://www.27meg.com/foo">http://www.27meg.com/foo</a><br>because that is about as much sales pitch as content-based filtering will leave the spammer room to make. (Indeed, it will be hard even to get this past filters, because if everything else in the email is neutral, the spam probability will hinge on the url, and it will take some effort to make that look neutral.)</p><p>假设他们能解决标题的问题，未来的垃圾邮件可能会是这样的：</p><p>嘿，觉得你应该看看这个：<br><a href="http://www.27meg.com/foo">http://www.27meg.com/foo</a></p><p>因为这差不多是基于内容的过滤留给垃圾邮件发送者的推销空间了。（实际上，甚至这样的邮件也很难通过过滤器，因为如果邮件中其他内容都是中性的，垃圾邮件概率就取决于网址，而要让网址看起来中性需要下一番功夫。）</p><p>Spammers range from businesses running so-called opt-in lists who don’t even try to conceal their identities, to guys who hijack mail servers to send out spams promoting porn sites. If we use filtering to whittle their options down to mails like the one above, that should pretty much put the spammers on the “legitimate” end of the spectrum out of business; they feel obliged by various state laws to include boilerplate about why their spam is not spam, and how to cancel your “subscription,” and that kind of text is easy to recognize.</p><p>垃圾邮件发送者形形色色，既有运营所谓 “选择加入” 列表、甚至不试图隐瞒身份的企业，也有劫持邮件服务器发送推广色情网站垃圾邮件的人。如果我们通过过滤将他们的选择范围缩小到上面这样的邮件，应该能让那些处于 “合法” 端的垃圾邮件发送者倒闭；他们迫于各州法律的规定，会在邮件中加入一些套话，说明他们的垃圾邮件不是垃圾邮件、如何取消 “订阅” 等，而这类文本很容易识别。</p><p>(I used to think it was naive to believe that stricter laws would decrease spam. Now I think that while stricter laws may not decrease the amount of spam that spammers send, they can certainly help filters to decrease the amount of spam that recipients actually see.)</p><p>（我曾经认为相信更严格的法律会减少垃圾邮件是天真的。现在我认为，虽然更严格的法律可能不会减少垃圾邮件发送者发送的垃圾邮件数量，但它们肯定能帮助过滤器减少收件人实际看到的垃圾邮件数量。）</p><p>All along the spectrum, if you restrict the sales pitches spammers can make, you will inevitably tend to put them out of business. That word business is an important one to remember. The spammers are businessmen. They send spam because it works. It works because although the response rate is abominably low (at best 15 per million, vs 3000 per million for a catalog mailing), the cost, to them, is practically nothing. The cost is enormous for the recipients, about 5 man-weeks for each million recipients who spend a second to delete the spam, but the spammer doesn’t have to pay that.</p><p>在整个范围内，如果你限制垃圾邮件发送者能进行的推销，就必然会让他们逐渐倒闭。“商业” 这个词很重要，要记住。垃圾邮件发送者是商人，他们发送垃圾邮件是因为这招管用。之所以管用，是因为虽然回复率极低（最多每百万封有 15 封回复，而目录邮件每百万封有 3000 封回复），但对他们来说，成本几乎为零。而对收件人来说，成本巨大 —— 每百万收件人花一秒钟删除垃圾邮件，就相当于 5 个人周的工作量，但垃圾邮件发送者不必支付这笔费用。</p><p>Sending spam does cost the spammer something, though. [2] So the lower we can get the response rate– whether by filtering, or by using filters to force spammers to dilute their pitches– the fewer businesses will find it worth their while to send spam.</p><p>不过，发送垃圾邮件确实会让发送者付出一些代价 [2]。所以，我们能把回复率压得越低 —— 无论是通过过滤，还是通过过滤器迫使垃圾邮件发送者淡化他们的推销 —— 就会有越少的企业觉得值得发送垃圾邮件。</p><p>The reason the spammers use the kinds of sales pitches that they do is to increase response rates. This is possibly even more disgusting than getting inside the mind of a spammer, but let’s take a quick look inside the mind of someone who responds to a spam. This person is either astonishingly credulous or deeply in denial about their sexual interests. In either case, repulsive or idiotic as the spam seems to us, it is exciting to them. The spammers wouldn’t say these things if they didn’t sound exciting. And “thought you should check out the following” is just not going to have nearly the pull with the spam recipient as the kinds of things that spammers say now. Result: if it can’t contain exciting sales pitches, spam becomes less effective as a marketing vehicle, and fewer businesses want to use it.</p><p>垃圾邮件发送者使用这类推销话术是为了提高回复率。这可能比琢磨垃圾邮件发送者的想法更令人反感，但我们还是快速看看回复垃圾邮件的人的想法吧。这类人要么极其轻信，要么在性趣方面极力否认。不管是哪种情况，尽管垃圾邮件在我们看来令人厌恶或愚蠢，但对他们来说却很有吸引力。如果这些话听起来没有吸引力，垃圾邮件发送者是不会说的。而 “觉得你应该看看下面这个” 对垃圾邮件收件人的吸引力，远不及垃圾邮件发送者现在说的那些话。结果就是：如果垃圾邮件不能包含吸引人的推销话术，作为营销手段，它的效果就会大打折扣，使用它的企业也会更少。</p><p>That is the big win in the end. I started writing spam filtering software because I didn’t want have to look at the stuff anymore. But if we get good enough at filtering out spam, it will stop working, and the spammers will actually stop sending it.</p><p>这才是最终的巨大胜利。我开始编写垃圾邮件过滤软件是因为我不想再看到这些东西了。但如果我们的垃圾邮件过滤足够出色，垃圾邮件就会失去作用，发送者最终会停止发送。</p><hr><p>Of all the approaches to fighting spam, from software to laws, I believe Bayesian filtering will be the single most effective. But I also think that the more different kinds of antispam efforts we undertake, the better, because any measure that constrains spammers will tend to make filtering easier. And even within the world of content-based filtering, I think it will be a good thing if there are many different kinds of software being used simultaneously. The more different filters there are, the harder it will be for spammers to tune spams to get through them.</p><p>在所有打击垃圾邮件的方法中，从软件到法律，我认为贝叶斯过滤将是最有效的。但我也认为，我们采取的反垃圾邮件措施种类越多越好，因为任何限制垃圾邮件发送者的措施都可能让过滤变得更容易。即使在基于内容的过滤领域，我认为同时使用多种不同的软件也是件好事。过滤器种类越多，垃圾邮件发送者就越难调整邮件以通过它们。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计与研究</title>
    <link href="/2025/08/15/design-and-research/"/>
    <url>/2025/08/15/design-and-research/</url>
    
    <content type="html"><![CDATA[<h2 id="Design-and-Research"><a href="#Design-and-Research" class="headerlink" title="Design and Research"></a>Design and Research</h2><p>原文链接: <a href="https://paulgraham.com/desres.html">https://paulgraham.com/desres.html</a></p><p>January 2003</p><p>(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)</p><p>（本文源自 2002 年秋季 NEPLS 会议上的主题演讲。）</p><p>Visitors to this country are often surprised to find that Americans like to begin a conversation by asking “what do you do?” I’ve never liked this question. I’ve rarely had a neat answer to it. But I think I have finally solved the problem. Now, when someone asks me what I do, I look them straight in the eye and say “I’m designing a new dialect of Lisp.” I recommend this answer to anyone who doesn’t like being asked what they do. The conversation will turn immediately to other topics.</p><p>来这个国家的游客常常会惊讶地发现，美国人喜欢以 “你是做什么的？” 开启一段对话。我从来不喜欢这个问题，也很少能给出一个简洁的答案。但我想我终于解决了这个问题。现在，当有人问我是做什么的，我会直视他们的眼睛说：“我正在设计 Lisp 的一种新方言。” 我把这个答案推荐给所有不喜欢被问 “你是做什么的” 的人，这样对话会立刻转向其他话题。</p><p>I don’t consider myself to be doing research on programming languages. I’m just designing one, in the same way that someone might design a building or a chair or a new typeface. I’m not trying to discover anything new. I just want to make a language that will be good to program in. In some ways, this assumption makes life a lot easier.</p><p>我不认为自己在做编程语言研究。我只是在设计一种编程语言，就像有人设计一座建筑、一把椅子或一种新字体那样。我不是要去发现什么新东西，只是想做出一种好用的编程语言。在某些方面，这种定位让事情变得简单多了。</p><p>The difference between design and research seems to be a question of new versus good. Design doesn’t have to be new, but it has to be good. Research doesn’t have to be good, but it has to be new. I think these two paths converge at the top: the best design surpasses its predecessors by using new ideas, and the best research solves problems that are not only new, but actually worth solving. So ultimately we’re aiming for the same destination, just approaching it from different directions.</p><p>设计和研究的区别似乎在于 “新” 与 “好” 的差异。设计不一定需要新颖，但必须出色；研究不一定需要出色，但必须新颖。我认为这两条路径在顶端会交汇：最好的设计通过运用新思想超越前人，最好的研究解决的问题不仅是新的，而且是真正值得解决的。所以最终我们的目标是一致的，只是从不同方向接近而已。</p><p>What I’m going to talk about today is what your target looks like from the back. What do you do differently when you treat programming languages as a design problem instead of a research topic?</p><p>我今天要谈的是，当你从 “后端” 看待目标时会是什么样子。当你把编程语言当作一个设计问题而非研究课题时，做法会有哪些不同？</p><p>The biggest difference is that you focus more on the user. Design begins by asking, who is this for and what do they need from it? A good architect, for example, does not begin by creating a design that he then imposes on the users, but by studying the intended users and figuring out what they need.</p><p>最大的不同是你会更关注用户。设计始于这样的问题：这是为谁设计的？他们需要从中得到什么？例如，一位优秀的建筑师不会先设计出方案再强加给用户，而是先研究目标用户，弄清楚他们的需求。</p><p>Notice I said “what they need,” not “what they want.” I don’t mean to give the impression that working as a designer means working as a sort of short-order cook, making whatever the client tells you to. This varies from field to field in the arts, but I don’t think there is any field in which the best work is done by the people who just make exactly what the customers tell them to.</p><p>注意我说的是 “他们需要的”，而不是 “他们想要的”。我不是说设计师的工作就像快餐厨师，客户说要什么就做什么。艺术领域的情况各不相同，但我认为没有哪个领域里，最好的作品是由那些完全按客户要求制作的人完成的。</p><p>The customer is always right in the sense that the measure of good design is how well it works for the user. If you make a novel that bores everyone, or a chair that’s horribly uncomfortable to sit in, then you’ve done a bad job, period. It’s no defense to say that the novel or the chair is designed according to the most advanced theoretical principles.</p><p>从 “好设计的衡量标准是它对用户的适用性” 这个角度来说，客户总是对的。如果你写了一本让所有人都觉得无聊的小说，或者做了一把坐起来极其不舒服的椅子，那你就是做得不好，没什么可说的。说这本小说或这把椅子是按照最先进的理论原则设计的，这可不是什么辩解。</p><p>And yet, making what works for the user doesn’t mean simply making what the user tells you to. Users don’t know what all the choices are, and are often mistaken about what they really want.</p><p>然而，做出对用户有用的东西，并不意味着简单地按照用户说的去做。用户不知道所有的选择，而且常常对自己真正想要的东西存在误解。</p><p>The answer to the paradox, I think, is that you have to design for the user, but you have to design what the user needs, not simply what he says he wants. It’s much like being a doctor. You can’t just treat a patient’s symptoms. When a patient tells you his symptoms, you have to figure out what’s actually wrong with him, and treat that.</p><p>我认为，这个矛盾的答案是：你必须为用户设计，但你要设计的是用户需要的东西，而不仅仅是他们说自己想要的。这很像医生的工作，你不能只治疗病人的症状。当病人告诉你他的症状时，你必须弄清楚他实际的问题是什么，然后对症治疗。</p><p>This focus on the user is a kind of axiom from which most of the practice of good design can be derived, and around which most design issues center.</p><p>这种对用户的关注是一种公理，优秀设计的大部分实践都源于此，而且大多数设计问题也围绕此展开。</p><p>If good design must do what the user needs, who is the user? When I say that design must be for users, I don’t mean to imply that good design aims at some kind of lowest common denominator. You can pick any group of users you want. If you’re designing a tool, for example, you can design it for anyone from beginners to experts, and what’s good design for one group might be bad for another. The point is, you have to pick some group of users. I don’t think you can even talk about good or bad design except with reference to some intended user.</p><p>如果好的设计必须满足用户的需求，那用户是谁呢？当我说设计必须为用户服务时，我并不是说优秀的设计要以某种 “最低共同标准” 为目标。你可以选择任何用户群体。例如，如果你在设计一个工具，你可以为从初学者到专家的任何人群设计，对一个群体来说是好的设计，对另一个群体可能就是糟糕的。关键是，你必须选定某个用户群体。我认为，脱离特定的目标用户，根本无法谈论设计的好坏。</p><p>You’re most likely to get good design if the intended users include the designer himself. When you design something for a group that doesn’t include you, it tends to be for people you consider to be less sophisticated than you, not more sophisticated.</p><p>如果目标用户包括设计者自己，那么你最有可能做出好的设计。当你为一个不包括自己的群体设计东西时，这个群体往往会被你认为是比自己更不成熟的人，而不是更成熟的人。</p><p>That’s a problem, because looking down on the user, however benevolently, seems inevitably to corrupt the designer. I suspect that very few housing projects in the US were designed by architects who expected to live in them. You can see the same thing in programming languages. C, Lisp, and Smalltalk were created for their own designers to use. Cobol, Ada, and Java, were created for other people to use.</p><p>这是个问题，因为轻视用户 —— 无论多么善意 —— 似乎不可避免地会毁掉设计师。我怀疑美国很少有住宅项目是由那些打算住进去的建筑师设计的。在编程语言中也能看到同样的情况：C、Lisp 和 Smalltalk 是为设计者自己使用而创建的；Cobol、Ada 和 Java 则是为其他人使用而创建的。</p><p>If you think you’re designing something for idiots, the odds are that you’re not designing something good, even for idiots.</p><p>如果你认为自己在为 “傻瓜” 设计东西，那么很可能你设计的东西即使对 “傻瓜” 来说也不是好东西。</p><p>Even if you’re designing something for the most sophisticated users, though, you’re still designing for humans. It’s different in research. In math you don’t choose abstractions because they’re easy for humans to understand; you choose whichever make the proof shorter. I think this is true for the sciences generally. Scientific ideas are not meant to be ergonomic.</p><p>然而，即使你在为最成熟的用户设计东西，你仍然是在为人类设计。研究则不同。在数学中，你选择抽象概念不是因为它们容易被人类理解，而是因为它们能让证明更简洁。我认为这一点在整个科学界都成立：科学思想并不旨在符合人体工学。</p><p>Over in the arts, things are very different. Design is all about people. The human body is a strange thing, but when you’re designing a chair, that’s what you’re designing for, and there’s no way around it. All the arts have to pander to the interests and limitations of humans. In painting, for example, all other things being equal a painting with people in it will be more interesting than one without. It is not merely an accident of history that the great paintings of the Renaissance are all full of people. If they hadn’t been, painting as a medium wouldn’t have the prestige that it does.</p><p>在艺术领域，情况则大不相同。设计完全是关于人的。人体是一种奇特的存在，但当你设计一把椅子时，你就是在为人体设计，这是无法回避的。所有艺术都必须迎合人类的兴趣和局限。例如，在绘画中，在其他条件相同的情况下，有人物的画会比没有人物的画更有趣。文艺复兴时期的伟大画作都充满了人物，这不仅仅是历史的偶然。如果不是这样，绘画作为一种媒介就不会有现在的声望。</p><p>Like it or not, programming languages are also for people, and I suspect the human brain is just as lumpy and idiosyncratic as the human body. Some ideas are easy for people to grasp and some aren’t. For example, we seem to have a very limited capacity for dealing with detail. It’s this fact that makes programing languages a good idea in the first place; if we could handle the detail, we could just program in machine language.</p><p>不管你喜不喜欢，编程语言也是为人服务的，而且我怀疑人类的大脑和人体一样，都是不规整且独特的。有些概念人们很容易理解，有些则不然。例如，我们处理细节的能力似乎非常有限。正是这个事实使得编程语言首先成为一个好主意 —— 如果我们能处理这些细节，我们直接用机器语言编程就可以了。</p><p>Remember, too, that languages are not primarily a form for finished programs, but something that programs have to be developed in. Anyone in the arts could tell you that you might want different mediums for the two situations. Marble, for example, is a nice, durable medium for finished ideas, but a hopelessly inflexible one for developing new ideas.</p><p>还要记住，语言主要不是成品程序的形式，而是开发程序的工具。艺术领域的任何人都会告诉你，这两种情况可能需要不同的媒介。例如，大理石是呈现成品想法的好材料，耐用且精美，但用它来开发新想法则死板得无可救药。</p><p>A program, like a proof, is a pruned version of a tree that in the past has had false starts branching off all over it. So the test of a language is not simply how clean the finished program looks in it, but how clean the path to the finished program was. A design choice that gives you elegant finished programs may not give you an elegant design process. For example, I’ve written a few macro-defining macros full of nested backquotes that look now like little gems, but writing them took hours of the ugliest trial and error, and frankly, I’m still not entirely sure they’re correct.</p><p>一个程序，就像一个证明，是一棵树经过修剪后的版本，这棵树在过去曾有过无数错误的分支。所以，衡量一种语言的标准不仅仅是成品程序在其中看起来有多简洁，还要看通向成品程序的过程有多顺畅。能产生优雅成品程序的设计选择，未必能带来优雅的设计过程。例如，我写过一些宏定义宏，里面满是嵌套的反引号，现在看起来像小宝石一样精致，但写它们时却花了好几个小时进行极其丑陋的试错，而且坦白说，我至今仍不能完全确定它们是正确的。</p><p>We often act as if the test of a language were how good finished programs look in it. It seems so convincing when you see the same program written in two languages, and one version is much shorter. When you approach the problem from the direction of the arts, you’re less likely to depend on this sort of test. You don’t want to end up with a programming language like marble.</p><p>我们常常把 “成品程序在语言中呈现的效果” 当作衡量语言的标准。当你看到同一个程序用两种语言编写，其中一种版本短得多时，这种标准似乎很有说服力。但当你从艺术的角度来看待这个问题时，就不太可能依赖这种测试了。你不会想最终得到一种像大理石一样的编程语言。</p><p>For example, it is a huge win in developing software to have an interactive toplevel, what in Lisp is called a read-eval-print loop. And when you have one this has real effects on the design of the language. It would not work well for a language where you have to declare variables before using them, for example. When you’re just typing expressions into the toplevel, you want to be able to set x to some value and then start doing things to x. You don’t want to have to declare the type of x first. You may dispute either of the premises, but if a language has to have a toplevel to be convenient, and mandatory type declarations are incompatible with a toplevel, then no language that makes type declarations mandatory could be convenient to program in.</p><p>例如，在软件开发中，拥有一个交互式顶层环境（在 Lisp 中称为读取 - 求值 - 打印循环）是一个巨大的优势。而一旦有了这样的环境，就会对语言的设计产生实际影响。例如，对于那种必须先声明变量才能使用的语言来说，这种环境就不太适用。当你只是在顶层输入表达式时，你希望能把 x 设为某个值，然后直接对 x 进行操作，而不是先声明 x 的类型。你可能会对这两个前提中的任何一个提出异议，但如果一种语言必须有顶层环境才能方便使用，而强制类型声明与顶层环境不兼容，那么任何强制要求类型声明的语言都不可能便于编程。</p><p>In practice, to get good design you have to get close, and stay close, to your users. You have to calibrate your ideas on actual users constantly, especially in the beginning. One of the reasons Jane Austen’s novels are so good is that she read them out loud to her family. That’s why she never sinks into self-indulgently arty descriptions of landscapes, or pretentious philosophizing. (The philosophy’s there, but it’s woven into the story instead of being pasted onto it like a label.) If you open an average “literary” novel and imagine reading it out loud to your friends as something you’d written, you’ll feel all too keenly what an imposition that kind of thing is upon the reader.</p><p>在实践中，要做出好的设计，你必须贴近用户，并一直保持贴近。你必须不断根据实际用户来校准你的想法，尤其是在初期。简・奥斯汀的小说之所以如此出色，原因之一就是她会把小说大声读给家人听。这就是为什么她从不会沉溺于自我放纵的艺术性风景描写，也不会进行自命不凡的哲学议论（哲学思想是存在的，但它被融入故事中，而不是像标签一样贴在上面）。如果你翻开一本普通的 “文学” 小说，想象着把它作为自己写的东西大声读给朋友听，你会强烈地感受到这种内容对读者来说是一种负担。</p><p>In the software world, this idea is known as Worse is Better. Actually, there are several ideas mixed together in the concept of Worse is Better, which is why people are still arguing about whether worse is actually better or not. But one of the main ideas in that mix is that if you’re building something new, you should get a prototype in front of users as soon as possible.</p><p>在软件界，这种理念被称为 “差即是好”。实际上，“差即是好” 的概念中混合了几个观点，这也是人们仍在争论 “差是否真的好” 的原因。但其中一个主要观点是：如果你在构建新东西，应该尽快让原型呈现在用户面前。</p><p>The alternative approach might be called the Hail Mary strategy. Instead of getting a prototype out quickly and gradually refining it, you try to create the complete, finished, product in one long touchdown pass. As far as I know, this is a recipe for disaster. Countless startups destroyed themselves this way during the Internet bubble. I’ve never heard of a case where it worked.</p><p>另一种方法可以称为 “孤注一掷策略”。它不是快速推出原型并逐步改进，而是试图通过一次 “长传达阵” 就创造出完整的成品。据我所知，这是导致灾难的做法。在互联网泡沫时期，无数初创公司因此自我毁灭，我从未听说过这种方法成功的案例。</p><p>What people outside the software world may not realize is that Worse is Better is found throughout the arts. In drawing, for example, the idea was discovered during the Renaissance. Now almost every drawing teacher will tell you that the right way to get an accurate drawing is not to work your way slowly around the contour of an object, because errors will accumulate and you’ll find at the end that the lines don’t meet. Instead you should draw a few quick lines in roughly the right place, and then gradually refine this initial sketch.</p><p>软件界之外的人可能没有意识到，“差即是好” 的理念在整个艺术领域都存在。例如，在绘画中，这个理念在文艺复兴时期就被发现了。现在几乎每个绘画老师都会告诉你，画出精准画作的正确方法不是沿着物体的轮廓慢慢勾勒，因为错误会累积，最后你会发现线条无法闭合。相反，你应该在大致正确的位置快速画几条线，然后逐步完善这个初始草图。</p><p>In most fields, prototypes have traditionally been made out of different materials. Typefaces to be cut in metal were initially designed with a brush on paper. Statues to be cast in bronze were modelled in wax. Patterns to be embroidered on tapestries were drawn on paper with ink wash. Buildings to be constructed from stone were tested on a smaller scale in wood.</p><p>在大多数领域，传统上原型是用不同材料制作的。要在金属上雕刻的字体最初是用刷子在纸上设计的；要铸成青铜的雕像先用蜡塑造模型；要绣在挂毯上的图案先用墨水洗刷在纸上绘制；要用石头建造的建筑先以较小的比例用木头做测试。</p><p>What made oil paint so exciting, when it first became popular in the fifteenth century, was that you could actually make the finished work from the prototype. You could make a preliminary drawing if you wanted to, but you weren’t held to it; you could work out all the details, and even make major changes, as you finished the painting.</p><p>15 世纪油画首次流行时，让人兴奋的是你实际上可以从原型直接创作成品。你可以画一个初步的草图（如果你想的话），但不必受其束缚；在完成画作的过程中，你可以完善所有细节，甚至做出重大修改。</p><p>You can do this in software too. A prototype doesn’t have to be just a model; you can refine it into the finished product. I think you should always do this when you can. It lets you take advantage of new insights you have along the way. But perhaps even more important, it’s good for morale.</p><p>在软件中你也可以这样做。原型不一定只是一个模型，你可以把它完善成成品。我认为只要有可能，就应该这样做。这能让你利用过程中产生的新见解，而或许更重要的是，这对士气有好处。</p><p>Morale is key in design. I’m surprised people don’t talk more about it. One of my first drawing teachers told me: if you’re bored when you’re drawing something, the drawing will look boring. For example, suppose you have to draw a building, and you decide to draw each brick individually. You can do this if you want, but if you get bored halfway through and start making the bricks mechanically instead of observing each one, the drawing will look worse than if you had merely suggested the bricks.</p><p>士气在设计中是关键。我很惊讶人们不常谈论这一点。我的第一位绘画老师告诉我：如果你画画时感到无聊，画出来的东西也会显得无聊。例如，假设你要画一座建筑，你决定把每一块砖都单独画出来。如果你愿意，你可以这样做，但如果你中途感到无聊，开始机械地画砖而不是观察每一块砖，那么画出来的效果会比你只是大致勾勒出砖的样子更差。</p><p>Building something by gradually refining a prototype is good for morale because it keeps you engaged. In software, my rule is: always have working code. If you’re writing something that you’ll be able to test in an hour, then you have the prospect of an immediate reward to motivate you. The same is true in the arts, and particularly in oil painting. Most painters start with a blurry sketch and gradually refine it. If you work this way, then in principle you never have to end the day with something that actually looks unfinished. Indeed, there is even a saying among painters: “A painting is never finished, you just stop working on it.” This idea will be familiar to anyone who has worked on software.</p><p>通过逐步完善原型来构建东西对士气有好处，因为它能让你保持投入。在软件领域，我的原则是：始终要有可运行的代码。如果你正在写的东西一小时后就能测试，那么你就有了即时回报的预期，这会激励你。艺术领域也是如此，尤其是油画。大多数画家从模糊的草图开始，然后逐步完善。如果你用这种方式工作，原则上你永远不必在一天结束时留下一个看起来确实未完成的作品。事实上，画家中间甚至有这样一种说法：“一幅画永远不会完成，你只是停止对它的创作。” 任何做过软件的人都会对这个想法感到熟悉。</p><p>Morale is another reason that it’s hard to design something for an unsophisticated user. It’s hard to stay interested in something you don’t like yourself. To make something good, you have to be thinking, “wow, this is really great,” not “what a piece of shit; those fools will love it.”</p><p>士气是难以给不成熟的用户设计东西的另一个原因。要对自己不喜欢的东西保持兴趣是很难的。要做出好东西，你必须想 “哇，这真的很棒”，而不是 “什么破烂玩意儿，那些傻瓜会喜欢的”。</p><p>Design means making things for humans. But it’s not just the user who’s human. The designer is human too.</p><p>设计意味着为人类制作东西。但不只是用户是人，设计师也是人。</p><p>Notice all this time I’ve been talking about “the designer.” Design usually has to be under the control of a single person to be any good. And yet it seems to be possible for several people to collaborate on a research project. This seems to me one of the most interesting differences between research and design.</p><p>注意到一直以来我都在说 “设计师”（单数）。设计通常必须由一个人掌控才能出色，而研究项目则可以由多个人合作完成。在我看来，这是研究和设计之间最有趣的区别之一。</p><p>There have been famous instances of collaboration in the arts, but most of them seem to have been cases of molecular bonding rather than nuclear fusion. In an opera it’s common for one person to write the libretto and another to write the music. And during the Renaissance, journeymen from northern Europe were often employed to do the landscapes in the backgrounds of Italian paintings. But these aren’t true collaborations. They’re more like examples of Robert Frost’s “good fences make good neighbors.” You can stick instances of good design together, but within each individual project, one person has to be in control.</p><p>艺术领域有一些著名的合作案例，但大多数似乎是 “分子键合” 而非 “核聚变”。在歌剧中，一个人写歌词、另一个人谱曲是很常见的；文艺复兴时期，北欧的工匠常被雇来绘制意大利画作的背景风景。但这些都不是真正的合作，更像是罗伯特・弗罗斯特所说的 “好篱笆促成好邻居”。你可以把优秀设计的各个部分拼接起来，但在每个独立的项目中，必须有一个人掌控全局。</p><p>I’m not saying that good design requires that one person think of everything. There’s nothing more valuable than the advice of someone whose judgement you trust. But after the talking is done, the decision about what to do has to rest with one person.</p><p>我不是说优秀的设计需要一个人想出所有东西。没有什么比你信任的人的判断更有价值的了。但讨论结束后，该做什么的决定必须由一个人来做。</p><p>Why is it that research can be done by collaborators and design can’t? This is an interesting question. I don’t know the answer. Perhaps, if design and research converge, the best research is also good design, and in fact can’t be done by collaborators. A lot of the most famous scientists seem to have worked alone. But I don’t know enough to say whether there is a pattern here. It could be simply that many famous scientists worked when collaboration was less common.</p><p>为什么研究可以由合作者完成而设计不能？这是一个有趣的问题，我没有答案。或许，如果设计和研究在顶端交汇，那么最好的研究也是优秀的设计，事实上也不能由合作者完成。很多最著名的科学家似乎都是独自工作的，但我了解得不够多，无法确定这是否是一种模式。这可能只是因为许多著名科学家工作的时代，合作并不普遍。</p><p>Whatever the story is in the sciences, true collaboration seems to be vanishingly rare in the arts. Design by committee is a synonym for bad design. Why is that so? Is there some way to beat this limitation?</p><p>无论科学界的情况如何，艺术领域的真正合作似乎极其罕见。“委员会设计” 是糟糕设计的同义词。为什么会这样？有没有办法克服这个局限？</p><p>I’m inclined to think there isn’t– that good design requires a dictator. One reason is that good design has to be all of a piece. Design is not just for humans, but for individual humans. If a design represents an idea that fits in one person’s head, then the idea will fit in the user’s head too.</p><p>我倾向于认为没有 —— 优秀的设计需要一个 “独裁者”。一个原因是，优秀的设计必须是浑然一体的。设计不仅是为人类，更是为个体的人。如果一个设计所代表的想法能装进一个人的头脑，那么这个想法也能装进用户的头脑。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书呆子的复仇</title>
    <link href="/2025/08/14/revenge-of-the-nerds/"/>
    <url>/2025/08/14/revenge-of-the-nerds/</url>
    
    <content type="html"><![CDATA[<h2 id="Revenge-of-the-Nerds"><a href="#Revenge-of-the-Nerds" class="headerlink" title="Revenge of the Nerds"></a>Revenge of the Nerds</h2><p>原文链接: <a href="https://paulgraham.com/icad.html">https://paulgraham.com/icad.html</a></p><p>May 2002</p><p>“We were after the C++ programmers. We managed to drag a lot of them about halfway to Lisp.”<br>“我们盯上了 C++ 程序员。我们成功把他们中的很多人拉到了接近 Lisp 的水平。”</p><ul><li>Guy Steele, co-author of the Java spec<br>—— 盖伊・斯蒂尔，Java 规范的合著者</li></ul><p>In the software business there is an ongoing struggle between the pointy-headed academics, and another equally formidable force, the pointy-haired bosses. Everyone knows who the pointy-haired boss is, right? I think most people in the technology world not only recognize this cartoon character, but know the actual person in their company that he is modelled upon.<br>在软件行业，一直存在着一场斗争：一方是脑袋尖尖的学者，另一方是同样难对付的势力 ——“尖头老板”。每个人都知道尖头老板是谁，对吧？我觉得科技圈的大多数人不仅认得这个卡通形象，还能在自己公司里找到他的现实原型。</p><p>The pointy-haired boss miraculously combines two qualities that are common by themselves, but rarely seen together: (a) he knows nothing whatsoever about technology, and (b) he has very strong opinions about it.<br>尖头老板神奇地兼具两种特质 —— 这两种特质单独看很常见，但同时出现却很少见：（a）他对技术一窍不通；（b）他对技术却有着强烈的主见。</p><p>Suppose, for example, you need to write a piece of software. The pointy-haired boss has no idea how this software has to work, and can’t tell one programming language from another, and yet he knows what language you should write it in. Exactly. He thinks you should write it in Java.<br>举个例子，假设你需要写一个软件。尖头老板完全不知道这个软件该怎么运行，也分不清各种编程语言的区别，但他却 “知道” 你应该用什么语言来写。没错，他觉得你应该用 Java。</p><p>Why does he think this? Let’s take a look inside the brain of the pointy-haired boss. What he’s thinking is something like this. Java is a standard. I know it must be, because I read about it in the press all the time. Since it is a standard, I won’t get in trouble for using it. And that also means there will always be lots of Java programmers, so if the programmers working for me now quit, as programmers working for me mysteriously always do, I can easily replace them.<br>他为什么会这么想？我们来窥探一下尖头老板的大脑。他大概在想：Java 是个标准。我肯定这一点，因为我总在媒体上看到它。既然是标准，用它就不会惹麻烦。而且这意味着总会有很多 Java 程序员，所以如果现在的程序员辞职了（他们总会莫名其妙地辞职），我能轻松找到替代者。</p><p>Well, this doesn’t sound that unreasonable. But it’s all based on one unspoken assumption, and that assumption turns out to be false. The pointy-haired boss believes that all programming languages are pretty much equivalent. If that were true, he would be right on target. If languages are all equivalent, sure, use whatever language everyone else is using.<br>嗯，这听起来似乎不算太离谱。但这一切都基于一个未说出口的假设，而这个假设其实是错误的。尖头老板认为所有编程语言几乎都是等价的。如果真是这样，他的想法就没错。要是语言都一样，那当然可以用大家都在用的那种。</p><p>But all languages are not equivalent, and I think I can prove this to you without even getting into the differences between them. If you asked the pointy-haired boss in 1992 what language software should be written in, he would have answered with as little hesitation as he does today. Software should be written in C++. But if languages are all equivalent, why should the pointy-haired boss’s opinion ever change? In fact, why should the developers of Java have even bothered to create a new language?<br>但并非所有语言都等价，而且我不用深入讨论它们的区别就能证明这一点。如果在 1992 年问尖头老板应该用什么语言写软件，他会像现在一样毫不犹豫地回答：应该用 C++。可如果语言都等价，他的观点为什么会变？事实上，Java 的开发者又何必费心创造一种新语言呢？</p><p>Presumably, if you create a new language, it’s because you think it’s better in some way than what people already had. And in fact, Gosling makes it clear in the first Java white paper that Java was designed to fix some problems with C++. So there you have it: languages are not all equivalent. If you follow the trail through the pointy-haired boss’s brain to Java and then back through Java’s history to its origins, you end up holding an idea that contradicts the assumption you started with.<br>想必，创造新语言是因为觉得它在某些方面比已有的更好。事实上，高斯林在第一份 Java 白皮书中明确表示，Java 的设计就是为了修复 C++ 的一些问题。所以结论很明显：语言并非都等价。顺着尖头老板对 Java 的执念，追溯到 Java 的起源，你最终会得到一个与最初假设矛盾的结论。</p><p>So, who’s right? James Gosling, or the pointy-haired boss? Not surprisingly, Gosling is right. Some languages are better, for certain problems, than others. And you know, that raises some interesting questions. Java was designed to be better, for certain problems, than C++. What problems? When is Java better and when is C++? Are there situations where other languages are better than either of them?<br>那么，谁是对的？詹姆斯・高斯林，还是尖头老板？毫不意外，高斯林是对的。对于特定问题，有些语言就是比其他的更好。这就引出了一些有趣的问题：Java 被设计成在某些问题上比 C++ 更好，是哪些问题？什么时候 Java 更好，什么时候 C++ 更好？有没有其他语言比这两种都更适合的情况？</p><p>Once you start considering this question, you have opened a real can of worms. If the pointy-haired boss had to think about the problem in its full complexity, it would make his brain explode. As long as he considers all languages equivalent, all he has to do is choose the one that seems to have the most momentum, and since that is more a question of fashion than technology, even he can probably get the right answer. But if languages vary, he suddenly has to solve two simultaneous equations, trying to find an optimal balance between two things he knows nothing about: the relative suitability of the twenty or so leading languages for the problem he needs to solve, and the odds of finding programmers, libraries, etc. for each. If that’s what’s on the other side of the door, it is no surprise that the pointy-haired boss doesn’t want to open it.<br>一旦开始思考这个问题，你就等于打开了潘多拉魔盒。如果尖头老板必须面对这个问题的全部复杂性，他的大脑可能会爆炸。只要他认为所有语言都等价，他只需要选一个看起来最流行的就行 —— 而流行更多是时尚问题而非技术问题，就算是他也可能选对。但如果语言有差异，他突然就要解两个联立方程：在二十多种主流语言中，找到既适合当前问题、又容易找到程序员和库的最优平衡 —— 而这两样他都一窍不通。如果门后是这些，尖头老板不想开门也就不奇怪了。</p><p>The disadvantage of believing that all programming languages are equivalent is that it’s not true. But the advantage is that it makes your life a lot simpler. And I think that’s the main reason the idea is so widespread. It is a comfortable idea.<br>认为所有编程语言都等价的坏处是 —— 这不是事实。但好处是，这能让生活简单得多。我觉得这就是这个想法广为流传的主要原因：它让人安心。</p><p>We know that Java must be pretty good, because it is the cool, new programming language. Or is it? If you look at the world of programming languages from a distance, it looks like Java is the latest thing. (From far enough away, all you can see is the large, flashing billboard paid for by Sun.) But if you look at this world up close, you find that there are degrees of coolness. Within the hacker subculture, there is another language called Perl that is considered a lot cooler than Java. Slashdot, for example, is generated by Perl. I don’t think you would find those guys using Java Server Pages. But there is another, newer language, called Python, whose users tend to look down on Perl, and more waiting in the wings.<br>我们觉得 Java 肯定很棒，因为它是酷炫的新编程语言。真的是这样吗？从远处看编程语言的世界，Java 似乎是最新潮的（离得足够远，你只能看到 Sun 公司花钱做的巨大闪光广告牌）。但近距离观察会发现，“酷炫” 是分等级的。在黑客圈子里，Perl 被认为比 Java 酷得多。比如，Slashdot 就是用 Perl 开发的。我觉得那些人绝不会用 Java Server Pages。但还有一种更新的语言叫 Python，它的用户往往瞧不上 Perl，而且还有更多语言在排队等着上位。</p><p>If you look at these languages in order, Java, Perl, Python, you notice an interesting pattern. At least, you notice this pattern if you are a Lisp hacker. Each one is progressively more like Lisp. Python copies even features that many Lisp hackers consider to be mistakes. You could translate simple Lisp programs into Python line for line. It’s 2002, and programming languages have almost caught up with 1958.<br>如果按 Java、Perl、Python 的顺序看，你会发现一个有趣的模式 —— 至少，如果你是 Lisp 黑客的话会发现。它们一个比一个像 Lisp。Python 甚至借鉴了很多 Lisp 黑客认为是 “错误” 的特性。简单的 Lisp 程序几乎能逐行翻译成 Python。现在是 2002 年，编程语言总算快追上 1958 年了。</p><h3 id="Catching-Up-with-Math"><a href="#Catching-Up-with-Math" class="headerlink" title="Catching Up with Math"></a><strong>Catching Up with Math</strong></h3><p><strong>靠数学追赶</strong></p><p>What I mean is that Lisp was first discovered by John McCarthy in 1958, and popular programming languages are only now catching up with the ideas he developed then.<br>我的意思是，Lisp 是约翰・麦卡锡在 1958 年提出的，而现在流行的编程语言才刚刚开始追上他当时提出的理念。</p><p>Now, how could that be true? Isn’t computer technology something that changes very rapidly? I mean, in 1958, computers were refrigerator-sized behemoths with the processing power of a wristwatch. How could any technology that old even be relevant, let alone superior to the latest developments?<br>这怎么可能呢？计算机技术不是变化很快吗？要知道，1958 年的计算机还是冰箱大小的庞然大物，处理能力只相当于一块手表。一个这么古老的技术怎么可能还有用，更别说比最新的发展还强了？</p><p>I’ll tell you how. It’s because Lisp was not really designed to be a programming language, at least not in the sense we mean today. What we mean by a programming language is something we use to tell a computer what to do. McCarthy did eventually intend to develop a programming language in this sense, but the Lisp that we actually ended up with was based on something separate that he did as a theoretical exercise– an effort to define a more convenient alternative to the Turing Machine. As McCarthy said later,<br>我来告诉你原因。因为 Lisp 其实不是被设计成编程语言的，至少不是我们现在所说的 “编程语言”。我们所说的编程语言是用来告诉计算机该做什么的工具。麦卡锡最终确实想开发这样一种语言，但我们现在使用的 Lisp，其实源于他另一项理论研究 —— 他试图定义一种比图灵机更方便的替代方案。正如麦卡锡后来所说：</p><p>Another way to show that Lisp was neater than Turing machines was to write a universal Lisp function and show that it is briefer and more comprehensible than the description of a universal Turing machine. This was the Lisp function eval…, which computes the value of a Lisp expression…. Writing eval required inventing a notation representing Lisp functions as Lisp data, and such a notation was devised for the purposes of the paper with no thought that it would be used to express Lisp programs in practice.<br>要证明 Lisp 比图灵机更简洁，另一种方法是编写一个通用 Lisp 函数，并证明它比通用图灵机的描述更简短、更易懂。这就是 Lisp 的 eval 函数…… 它能计算 Lisp 表达式的值…… 编写 eval 需要发明一种符号，把 Lisp 函数表示为 Lisp 数据。这种符号是为了论文而设计的，当时根本没想过会在实际中用来表达 Lisp 程序。</p><p>What happened next was that, some time in late 1958, Steve Russell, one of McCarthy’s grad students, looked at this definition of eval and realized that if he translated it into machine language, the result would be a Lisp interpreter.<br>接下来发生的事是，1958 年底的某个时候，麦卡锡的研究生史蒂夫・拉塞尔看到了 eval 的定义，意识到如果把它翻译成机器语言，结果会是一个 Lisp 解释器。</p><p>This was a big surprise at the time. Here is what McCarthy said about it later in an interview:<br>这在当时是个大惊喜。麦卡锡后来在采访中说：</p><p>Steve Russell said, look, why don’t I program this eval…, and I said to him, ho, ho, you’re confusing theory with practice, this eval is intended for reading, not for computing. But he went ahead and did it. That is, he compiled the eval in my paper into [IBM] 704 machine code, fixing bugs, and then advertised this as a Lisp interpreter, which it certainly was. So at that point Lisp had essentially the form that it has today….<br>史蒂夫・拉塞尔说：“你看，我来把这个 eval 编成程序怎么样？” 我对他说：“呵，呵，你把理论和实践搞混了，这个 eval 是用来读的，不是用来计算的。” 但他还是做了。他把我论文里的 eval 编译成了（IBM）704 的机器码，修复了 bug，然后宣称这是一个 Lisp 解释器 —— 它确实是。从那时起，Lisp 就基本有了现在的样子……</p><p>Suddenly, in a matter of weeks I think, McCarthy found his theoretical exercise transformed into an actual programming language– and a more powerful one than he had intended.<br>我觉得，短短几周内，麦卡锡突然发现他的理论研究变成了一种实际的编程语言 —— 而且比他预想的更强大。</p><p>So the short explanation of why this 1950s language is not obsolete is that it was not technology but math, and math doesn’t get stale. The right thing to compare Lisp to is not 1950s hardware, but, say, the Quicksort algorithm, which was discovered in 1960 and is still the fastest general-purpose sort.<br>所以，这种 50 年代的语言之所以不过时，简单说就是：它不是技术，而是数学 —— 数学不会过时。拿 Lisp 来比，不该和 50 年代的硬件比，而应该和 1960 年发明的快速排序算法比 —— 后者至今仍是最快的通用排序算法。</p><p>There is one other language still surviving from the 1950s, Fortran, and it represents the opposite approach to language design. Lisp was a piece of theory that unexpectedly got turned into a programming language. Fortran was developed intentionally as a programming language, but what we would now consider a very low-level one.<br>50 年代还有另一种语言留存至今，那就是 Fortran，它代表了语言设计的另一种思路。Lisp 是理论意外变成了编程语言，而 Fortran 则是被刻意设计成编程语言的，但按现在的标准看，它的级别很低。</p><p>Fortran I, the language that was developed in 1956, was a very different animal from present-day Fortran. Fortran I was pretty much assembly language with math. In some ways it was less powerful than more recent assembly languages; there were no subroutines, for example, only branches. Present-day Fortran is now arguably closer to Lisp than to Fortran I.<br>1956 年的 Fortran I 和现在的 Fortran 大不相同。Fortran I 基本上是带数学功能的汇编语言。在某些方面，它甚至不如后来的汇编语言 —— 比如没有子程序，只有分支。可以说，现在的 Fortran 比之于 Fortran I，更接近 Lisp。</p><p>Lisp and Fortran were the trunks of two separate evolutionary trees, one rooted in math and one rooted in machine architecture. These two trees have been converging ever since. Lisp started out powerful, and over the next twenty years got fast. So-called mainstream languages started out fast, and over the next forty years gradually got more powerful, until now the most advanced of them are fairly close to Lisp. Close, but they are still missing a few things….<br>Lisp 和 Fortran 是两棵不同进化树的主干：一棵根植于数学，另一棵根植于机器架构。这两棵树从那以后就一直在靠近。Lisp 一开始就很强大，之后二十年变得更快；所谓的主流语言一开始很快，之后四十年逐渐变得更强大，直到现在，最先进的主流语言已经相当接近 Lisp 了。但只是接近，仍有一些东西缺失……</p><h3 id="What-Made-Lisp-Different"><a href="#What-Made-Lisp-Different" class="headerlink" title="What Made Lisp Different"></a><strong>What Made Lisp Different</strong></h3><p><strong>Lisp 的独特之处</strong></p><p>When it was first developed, Lisp embodied nine new ideas. Some of these we now take for granted, others are only seen in more advanced languages, and two are still unique to Lisp. The nine ideas are, in order of their adoption by the mainstream,<br>Lisp 刚出现时，包含了九个新想法。其中一些现在已被视为理所当然，另一些只在更高级的语言中出现，还有两个仍是 Lisp 独有的。按被主流采纳的顺序，这九个想法是：</p><p><strong>1.Conditionals.</strong> A conditional is an if-then-else construct. We take these for granted now, but Fortran I didn’t have them. It had only a conditional goto closely based on the underlying machine instruction.<br>条件语句。条件语句即 if-then-else 结构。我们现在觉得这很平常，但 Fortran I 没有这种结构，只有基于底层机器指令的条件跳转。</p><p><strong>2.A function type.</strong> In Lisp, functions are a data type just like integers or strings. They have a literal representation, can be stored in variables, can be passed as arguments, and so on.<br>函数类型。在 Lisp 中，函数和整数、字符串一样是一种数据类型。它们有字面表示，能存在变量里，能作为参数传递，等等。</p><p><strong>3.Recursion.</strong> Lisp was the first programming language to support it.<br>递归。Lisp 是第一种支持递归的编程语言。</p><p><strong>4.Dynamic typing.</strong> In Lisp, all variables are effectively pointers. Values are what have types, not variables, and assigning or binding variables means copying pointers, not what they point to.<br>动态类型。在 Lisp 中，所有变量本质上都是指针。类型属于值，而非变量；给变量赋值或绑定变量，只是复制指针，而非指针指向的内容。</p><p><strong>5.Garbage-collection.</strong></p><p>垃圾回收。</p><p><strong>6.Programs composed of expressions.</strong> Lisp programs are trees of expressions, each of which returns a value. This is in contrast to Fortran and most succeeding languages, which distinguish between expressions and statements.<br>由表达式构成的程序。Lisp 程序是表达式树，每个表达式都返回一个值。这与 Fortran 及后来的大多数语言不同，它们区分表达式和语句。</p><p>It was natural to have this distinction in Fortran I because you could not nest statements. And so while you needed expressions for math to work, there was no point in making anything else return a value, because there could not be anything waiting for it.<br>Fortran I 中有这种区分是很自然的，因为它不能嵌套语句。所以，虽然做数学运算需要表达式，但让其他东西返回值是没意义的 —— 因为没有东西会等着接收这个值。</p><p>This limitation went away with the arrival of block-structured languages, but by then it was too late. The distinction between expressions and statements was entrenched. It spread from Fortran into Algol and then to both their descendants.<br>随着块结构语言的出现，这个限制消失了，但为时已晚。表达式和语句的区分已经根深蒂固，从 Fortran 传到 Algol，再传到它们的所有后代语言。</p><p><strong>7.A symbol type.</strong> Symbols are effectively pointers to strings stored in a hash table. So you can test equality by comparing a pointer, instead of comparing each character.<br>符号类型。符号本质上是指向哈希表中字符串的指针。所以判断相等时，只需比较指针，不用逐个比较字符。</p><p><strong>8.A notation for code using trees of symbols and constants.</strong><br>用符号和常量树表示代码的记法。</p><p><strong>9.The whole language there all the time.</strong> There is no real distinction between read-time, compile-time, and runtime. You can compile or run code while reading, read or run code while compiling, and read or compile code at runtime.<br>整个语言始终可用。读时、编译时和运行时之间没有真正的界限。你可以在读代码时编译或运行代码，编译时读或运行代码，运行时读或编译代码。</p><p>Running code at read-time lets users reprogram Lisp’s syntax; running code at compile-time is the basis of macros; compiling at runtime is the basis of Lisp’s use as an extension language in programs like Emacs; and reading at runtime enables programs to communicate using s-expressions, an idea recently reinvented as XML.<br>在 read-time 运行代码，让用户可以重新定义 Lisp 的语法；在编译时运行代码，是宏的基础；在运行时编译，是 Lisp 能作为 Emacs 等程序的扩展语言的基础；在运行时读取代码，让程序能通过 s 表达式通信 —— 这个想法最近被重新发明为 XML。</p><p>When Lisp first appeared, these ideas were far removed from ordinary programming practice, which was dictated largely by the hardware available in the late 1950s. Over time, the default language, embodied in a succession of popular languages, has gradually evolved toward Lisp. Ideas 1-5 are now widespread. Number 6 is starting to appear in the mainstream. Python has a form of 7, though there doesn’t seem to be any syntax for it.<br>Lisp 刚出现时，这些想法与当时的常规编程实践相去甚远 —— 当时的实践很大程度上受限于 50 年代末的硬件。随着时间推移，主流语言（以一系列流行语言为代表）逐渐向 Lisp 进化。想法 1-5 现已普及；想法 6 开始进入主流；Python 有了想法 7 的某种形式，尽管似乎没有对应的语法。</p><p>As for number 8, this may be the most interesting of the lot. Ideas 8 and 9 only became part of Lisp by accident, because Steve Russell implemented something McCarthy had never intended to be implemented. And yet these ideas turn out to be responsible for both Lisp’s strange appearance and its most distinctive features. Lisp looks strange not so much because it has a strange syntax as because it has no syntax; you express programs directly in the parse trees that get built behind the scenes when other languages are parsed, and these trees are made of lists, which are Lisp data structures.<br>至于想法 8，它可能是其中最有趣的。想法 8 和 9 能成为 Lisp 的一部分纯属偶然 —— 因为史蒂夫・拉塞尔实现了麦卡锡从未想过要实现的东西。但正是这些想法造就了 Lisp 奇特的外观和最独特的特性。Lisp 看起来奇怪，不是因为语法奇怪，而是因为它 “没有语法”：你直接用解析树来表达程序 —— 其他语言解析时会在后台生成这种树，而 Lisp 的解析树是由列表（Lisp 的数据结构）构成的。</p><p>Expressing the language in its own data structures turns out to be a very powerful feature. Ideas 8 and 9 together mean that you can write programs that write programs. That may sound like a bizarre idea, but it’s an everyday thing in Lisp. The most common way to do it is with something called a macro.<br>用语言自身的数据结构来表示语言，是一个非常强大的特性。想法 8 和 9 结合起来意味着：你可以编写 “编写程序的程序”。这听起来可能很奇怪，但在 Lisp 中是家常便饭。最常见的方式是通过 “宏”。</p><p>The term “macro” does not mean in Lisp what it means in other languages. A Lisp macro can be anything from an abbreviation to a compiler for a new language. If you want to really understand Lisp, or just expand your programming horizons, I would learn more about macros.<br>Lisp 中的 “宏” 和其他语言中的 “宏” 意思不同。Lisp 宏可以是缩写，也可以是新语言的编译器。如果你想真正理解 Lisp，或者只是想拓宽编程视野，建议多了解宏。</p><p>Macros (in the Lisp sense) are still, as far as I know, unique to Lisp. This is partly because in order to have macros you probably have to make your language look as strange as Lisp. It may also be because if you do add that final increment of power, you can no longer claim to have invented a new language, but only a new dialect of Lisp.<br>据我所知，（Lisp 意义上的）宏仍是 Lisp 独有的。部分原因是，要支持宏，你的语言可能就得像 Lisp 一样看起来奇怪。也可能是因为，一旦你加上了这最后一点强大的特性，你就不能再声称发明了新语言，而只是 Lisp 的新方言。</p><p>I mention this mostly as a joke, but it is quite true. If you define a language that has car, cdr, cons, quote, cond, atom, eq, and a notation for functions expressed as lists, then you can build all the rest of Lisp out of it. That is in fact the defining quality of Lisp: it was in order to make this so that McCarthy gave Lisp the shape it has.<br>我这么说主要是开玩笑，但确实是事实。如果你定义一种语言，包含 car、cdr、cons、quote、cond、atom、eq，以及用列表表示函数的记法，那么你就能用这些构建出 Lisp 的其余部分。这其实是 Lisp 的定义性特质：麦卡锡赋予 Lisp 这样的形态，正是为了实现这一点。</p><h3 id="Where-Languages-Matter"><a href="#Where-Languages-Matter" class="headerlink" title="Where Languages Matter"></a><strong>Where Languages Matter</strong></h3><p><strong>语言的重要性何在</strong></p><p>So suppose Lisp does represent a kind of limit that mainstream languages are approaching asymptotically– does that mean you should actually use it to write software? How much do you lose by using a less powerful language? Isn’t it wiser, sometimes, not to be at the very edge of innovation? And isn’t popularity to some extent its own justification? Isn’t the pointy-haired boss right, for example, to want to use a language for which he can easily hire programmers?<br>假设 Lisp 确实代表了主流语言正在逐渐接近的一种极限 —— 那这意味着你真的应该用它来写软件吗？用一种不够强大的语言，你会损失多少？有时候，不站在创新最前沿，是不是更明智？流行在某种程度上不就是合理性的证明吗？比如，尖头老板想用人容易招的语言，难道不对吗？</p><p>There are, of course, projects where the choice of programming language doesn’t matter much. As a rule, the more demanding the application, the more leverage you get from using a powerful language. But plenty of projects are not demanding at all. Most programming probably consists of writing little glue programs, and for little glue programs you can use any language that you’re already familiar with and that has good libraries for whatever you need to do. If you just need to feed data from one Windows app to another, sure, use Visual Basic.<br>当然，有些项目中，编程语言的选择不那么重要。一般来说，应用的要求越高，使用强大的语言带来的优势就越大。但很多项目的要求并不高。大多数编程工作可能只是写些小的 “胶水程序”，对于这类程序，你可以用任何自己熟悉、且有合适库的语言。如果你只是需要把数据从一个 Windows 应用传到另一个，用 Visual Basic 就行。</p><p>You can write little glue programs in Lisp too (I use it as a desktop calculator), but the biggest win for languages like Lisp is at the other end of the spectrum, where you need to write sophisticated programs to solve hard problems in the face of fierce competition. A good example is the airline fare search program that ITA Software licenses to Orbitz. These guys entered a market already dominated by two big, entrenched competitors, Travelocity and Expedia, and seem to have just humiliated them technologically.<br>你也可以用 Lisp 写小胶水程序（我就把它当桌面计算器用），但 Lisp 这类语言的最大优势体现在另一端：当你需要写复杂程序，在激烈竞争中解决难题时。一个很好的例子是 ITA 软件公司授权给 Orbitz 的机票价格搜索程序。他们进入的市场早已被 Travelocity 和 Expedia 这两个巨头占据，但他们似乎在技术上轻松碾压了对手。</p><p>The core of ITA’s application is a 200,000 line Common Lisp program that searches many orders of magnitude more possibilities than their competitors, who apparently are still using mainframe-era programming techniques. (Though ITA is also in a sense using a mainframe-era programming language.) I have never seen any of ITA’s code, but according to one of their top hackers they use a lot of macros, and I am not surprised to hear it.<br>ITA 应用的核心是一个 20 万行的 Common Lisp 程序，它搜索的可能性比竞争对手多好几个数量级 —— 竞争对手显然还在用大型机时代的编程技术（尽管从某种意义上说，ITA 用的也是大型机时代的编程语言）。我没见过 ITA 的代码，但据他们的一位顶尖黑客说，他们大量使用宏，我对此并不意外。</p><h3 id="Centripetal-Forces"><a href="#Centripetal-Forces" class="headerlink" title="Centripetal Forces"></a><strong>Centripetal Forces</strong></h3><p><strong>向心力</strong></p><p>I’m not saying there is no cost to using uncommon technologies. The pointy-haired boss is not completely mistaken to worry about this. But because he doesn’t understand the risks, he tends to magnify them.<br>我不是说用不常见的技术没有代价。尖头老板对此的担忧并非完全没道理。但因为他不理解其中的风险，往往会夸大它们。</p><p>I can think of three problems that could arise from using less common languages. Your programs might not work well with programs written in other languages. You might have fewer libraries at your disposal. And you might have trouble hiring programmers.<br>我能想到使用冷门语言可能带来的三个问题：你的程序可能和其他语言写的程序兼容不好；可用的库可能更少；可能很难招到程序员。</p><p>How much of a problem is each of these? The importance of the first varies depending on whether you have control over the whole system. If you’re writing software that has to run on a remote user’s machine on top of a buggy, closed operating system (I mention no names), there may be advantages to writing your application in the same language as the OS. But if you control the whole system and have the source code of all the parts, as ITA presumably does, you can use whatever languages you want. If any incompatibility arises, you can fix it yourself.<br>这些问题有多严重？第一个问题的重要性取决于你是否能控制整个系统。如果你写的软件必须在远程用户的机器上运行，而用户的操作系统又有 bug、且是封闭的（我就不点名了），那么用和操作系统相同的语言写应用可能有优势。但如果你像 ITA 那样，能控制整个系统，且拥有所有部分的源代码，你就可以用任何语言。如果出现不兼容，你自己就能修复。</p><p>In server-based applications you can get away with using the most advanced technologies, and I think this is the main cause of what Jonathan Erickson calls the “programming language renaissance.” This is why we even hear about new languages like Perl and Python. We’re not hearing about these languages because people are using them to write Windows apps, but because people are using them on servers. And as software shifts off the desktop and onto servers (a future even Microsoft seems resigned to), there will be less and less pressure to use middle-of-the-road technologies.<br>在基于服务器的应用中，你可以放心使用最先进的技术。我认为这是乔纳森・埃里克森所说的 “编程语言复兴” 的主要原因。这也是我们会听说 Perl、Python 等新语言的原因 —— 不是因为人们用它们写 Windows 应用，而是因为人们在服务器上用它们。随着软件从桌面转向服务器（连微软似乎都接受了这个未来），使用中庸技术的压力会越来越小。</p><p>As for libraries, their importance also depends on the application. For less demanding problems, the availability of libraries can outweigh the intrinsic power of the language. Where is the breakeven point? Hard to say exactly, but wherever it is, it is short of anything you’d be likely to call an application. If a company considers itself to be in the software business, and they’re writing an application that will be one of their products, then it will probably involve several hackers and take at least six months to write. In a project of that size, powerful languages probably start to outweigh the convenience of pre-existing libraries.<br>至于库，其重要性也取决于应用。对于要求不高的问题，库的可用性可能比语言本身的强大更重要。平衡点在哪里？很难说清楚，但可以肯定的是，它远低于 “应用” 的级别。如果一家公司认为自己是做软件的，并且在写一个将成为其产品之一的应用，那么这个项目可能需要几个黑客，至少花六个月时间。在这种规模的项目中，强大的语言可能开始比现有库的便利性更重要。</p><p>The third worry of the pointy-haired boss, the difficulty of hiring programmers, I think is a red herring. How many hackers do you need to hire, after all? Surely by now we all know that software is best developed by teams of less than ten people. And you shouldn’t have trouble hiring hackers on that scale for any language anyone has ever heard of. If you can’t find ten Lisp hackers, then your company is probably based in the wrong city for developing software.<br>尖头老板的第三个担忧 —— 招程序员难，我觉得是个无关紧要的问题。毕竟，你需要招多少黑客？现在大家肯定都知道，软件最好由不到十人的团队开发。对于任何有点名气的语言，招这么多人应该都不难。如果连十个 Lisp 黑客都找不到，那你的公司可能选错了软件开发的城市。</p><p>In fact, choosing a more powerful language probably decreases the size of the team you need, because (a) if you use a more powerful language you probably won’t need as many hackers, and (b) hackers who work in more advanced languages are likely to be smarter.<br>事实上，选择更强大的语言可能会减少所需的团队规模，因为：（a）用更强大的语言，可能不需要那么多黑客；（b）用更高级语言的黑客可能更聪明。</p><p>I’m not saying that you won’t get a lot of pressure to use what are perceived as “standard” technologies. At Viaweb (now Yahoo Store), we raised some eyebrows among VCs and potential acquirers by using Lisp. But we also raised eyebrows by using generic Intel boxes as servers instead of “industrial strength” servers like Suns, for using a then-obscure open-source Unix variant called FreeBSD instead of a real commercial OS like Windows NT, for ignoring a supposed e-commerce standard called SET that no one now even remembers, and so on.<br>我不是说你不会面临使用 “标准” 技术的压力。在 Viaweb（现在的 Yahoo Store），我们用 Lisp 让风投和潜在收购方大跌眼镜。但我们还用普通英特尔机器当服务器（而非 Sun 那样的 “工业级” 服务器）、用当时鲜为人知的开源 Unix 变体 FreeBSD（而非 Windows NT 这样的商业操作系统）、无视所谓的电子商务标准 SET（现在没人记得了）等等，同样让他们惊讶。</p><p>You can’t let the suits make technical decisions for you. Did it alarm some potential acquirers that we used Lisp? Some, slightly, but if we hadn’t used Lisp, we wouldn’t have been able to write the software that made them want to buy us. What seemed like an anomaly to them was in fact cause and effect.<br>你不能让西装革履的人替你做技术决策。我们用 Lisp 有没有让一些潜在收购方不安？有一些，轻微的。但如果我们不用 Lisp，就写不出让他们想买的软件。在他们看来是反常的事，其实是因果关系。</p><p>If you start a startup, don’t design your product to please VCs or potential acquirers. Design your product to please the users. If you win the users, everything else will follow. And if you don’t, no one will care how comfortingly orthodox your technology choices were.<br>如果你创业，不要为了讨好风投或潜在收购方而设计产品。要为了讨好用户而设计。赢得用户，其他一切都会随之而来。如果赢不了用户，没人会在乎你的技术选择有多 “正统”、多让人安心。</p><h3 id="The-Cost-of-Being-Average"><a href="#The-Cost-of-Being-Average" class="headerlink" title="The Cost of Being Average"></a><strong>The Cost of Being Average</strong></h3><p><strong>平庸的代价</strong></p><p>How much do you lose by using a less powerful language? There is actually some data out there about that.<br>用不够强大的语言，你会损失多少？其实有一些相关数据。</p><p>The most convenient measure of power is probably code size. The point of high-level languages is to give you bigger abstractions– bigger bricks, as it were, so you don’t need as many to build a wall of a given size. So the more powerful the language, the shorter the program (not simply in characters, of course, but in distinct elements).<br>衡量语言强大程度最方便的指标可能是代码长度。高级语言的意义在于提供更大的抽象 —— 可以说，是更大的砖块，所以建同样大小的墙，需要的砖块更少。因此，语言越强大，程序就越短（当然，不是指字符数，而是指不同元素的数量）。</p><p>How does a more powerful language enable you to write shorter programs? One technique you can use, if the language will let you, is something called bottom-up programming. Instead of simply writing your application in the base language, you build on top of the base language a language for writing programs like yours, then write your program in it. The combined code can be much shorter than if you had written your whole program in the base language– indeed, this is how most compression algorithms work. A bottom-up program should be easier to modify as well, because in many cases the language layer won’t have to change at all.<br>更强大的语言怎么能让程序更短？如果语言支持，你可以用一种叫 “自底向上编程” 的技术。不是直接用基础语言写应用，而是在基础语言之上构建一种适合写这类应用的语言，再用这种语言写应用。这样一来，总代码量会比全用基础语言写短得多 —— 其实，大多数压缩算法也是这个原理。自底向上编写的程序也更容易修改，因为很多情况下，语言层根本不需要改动。</p><p>Code size is important, because the time it takes to write a program depends mostly on its length. If your program would be three times as long in another language, it will take three times as long to write– and you can’t get around this by hiring more people, because beyond a certain size new hires are actually a net lose. Fred Brooks described this phenomenon in his famous book The Mythical Man-Month, and everything I’ve seen has tended to confirm what he said.<br>代码长度很重要，因为写程序的时间主要取决于长度。如果用另一种语言，你的程序会变长三倍，那么写它的时间也会变成三倍 —— 而且你不能通过多招人来解决，因为超过一定规模后，新员工实际上是净损耗。弗雷德・布鲁克斯在他的名著《人月神话》中描述了这种现象，我所见的一切都印证了他的说法。</p><p>So how much shorter are your programs if you write them in Lisp? Most of the numbers I’ve heard for Lisp versus C, for example, have been around 7-10x. But a recent article about ITA in New Architect magazine said that “one line of Lisp can replace 20 lines of C,” and since this article was full of quotes from ITA’s president, I assume they got this number from ITA. If so then we can put some faith in it; ITA’s software includes a lot of C and C++ as well as Lisp, so they are speaking from experience.<br>那么，用 Lisp 写程序，代码会短多少？比如，我听说的 Lisp 对 C 的比例大多在 7-10 倍左右。但《新架构师》杂志最近一篇关于 ITA 的文章说，“一行 Lisp 能替代 20 行 C”。因为文章里有很多 ITA 总裁的引言，我猜这个数字来自 ITA。如果是这样，我们可以相信它 ——ITA 的软件既用了很多 C 和 C++，也用了 Lisp，所以他们是有经验的。</p><p>My guess is that these multiples aren’t even constant. I think they increase when you face harder problems and also when you have smarter programmers. A really good hacker can squeeze more out of better tools.<br>我猜这个倍数不是固定的。面对更难的问题，或者有更聪明的程序员时，这个倍数会更大。真正优秀的黑客能从更好的工具中榨取出更多价值。</p><p>As one data point on the curve, at any rate, if you were to compete with ITA and chose to write your software in C, they would be able to develop software twenty times faster than you. If you spent a year on a new feature, they’d be able to duplicate it in less than three weeks. Whereas if they spent just three months developing something new, it would be five years before you had it too.<br>无论如何，有一个数据可以参考：如果你要和 ITA 竞争，却选择用 C 写软件，他们的开发速度会是你的 20 倍。你花一年开发的新功能，他们不到三周就能复制；而他们花三个月开发的新东西，你可能要五年才能做出来。</p><p>And you know what? That’s the best-case scenario. When you talk about code-size ratios, you’re implicitly assuming that you can actually write the program in the weaker language. But in fact there are limits on what programmers can do. If you’re trying to solve a hard problem with a language that’s too low-level, you reach a point where there is just too much to keep in your head at once.<br>你知道吗？这还是最好的情况。谈论代码长度比时，你隐含的假设是：用较弱的语言确实能写出这个程序。但事实上，程序员的能力是有限的。如果你用太低级的语言解决难题，最终会发现，要同时记住的东西太多，根本记不住。</p><p>So when I say it would take ITA’s imaginary competitor five years to duplicate something ITA could write in Lisp in three months, I mean five years if nothing goes wrong. In fact, the way things work in most companies, any development project that would take five years is likely never to get finished at all.<br>所以，当我说 ITA 的假想竞争对手要用五年复制 ITA 用 Lisp 三个月能完成的东西时，我指的是 “如果一切顺利” 的情况。但事实上，在大多数公司里，任何需要五年的开发项目，很可能根本完不成。</p><p>I admit this is an extreme case. ITA’s hackers seem to be unusually smart, and C is a pretty low-level language. But in a competitive market, even a differential of two or three to one would be enough to guarantee that you’d always be behind.<br>我承认这是个极端案例。ITA 的黑客似乎异常聪明，而 C 确实是很低级的语言。但在竞争激烈的市场中，哪怕只是 2-3 倍的差距，也足以保证你永远落后。</p><h3 id="A-Recipe"><a href="#A-Recipe" class="headerlink" title="A Recipe"></a><strong>A Recipe</strong></h3><p><strong>一个秘诀</strong></p><p>This is the kind of possibility that the pointy-haired boss doesn’t even want to think about. And so most of them don’t. Because, you know, when it comes down to it, the pointy-haired boss doesn’t mind if his company gets their ass kicked, so long as no one can prove it’s his fault. The safest plan for him personally is to stick close to the center of the herd.<br>这种可能性是尖头老板连想都不愿想的。所以他们大多不会去想。因为，说到底，尖头老板不在乎公司是否会被碾压，只要没人能证明是他的错就行。对他个人来说，最安全的计划就是紧跟大流。</p><p>Within large organizations, the phrase used to describe this approach is “industry best practice.” Its purpose is to shield the pointy-haired boss from responsibility: if he chooses something that is “industry best practice,” and the company loses, he can’t be blamed. He didn’t choose, the industry did.<br>在大公司里，描述这种做法的词是 “行业最佳实践”。它的目的是为尖头老板推卸责任：如果他选择了 “行业最佳实践”，而公司输了，他不用背锅。不是他选的，是行业选的。</p><p>I believe this term was originally used to describe accounting methods and so on. What it means, roughly, is don’t do anything weird. And in accounting that’s probably a good idea. The terms “cutting-edge” and “accounting” do not sound good together. But when you import this criterion into decisions about technology, you start to get the wrong answers.<br>我认为这个词最初是用来描述会计方法等的。它大致意思是 “别做怪事”。在会计领域，这可能是个好主意 ——“前沿” 和 “会计” 放在一起确实不搭。但把这个标准用到技术决策上，你就会得到错误的答案。</p><p>Technology often should be cutting-edge. In programming languages, as Erann Gat has pointed out, what “industry best practice” actually gets you is not the best, but merely the average. When a decision causes you to develop software at a fraction of the rate of more aggressive competitors, “best practice” is a misnomer.<br>技术往往就该是前沿的。正如埃兰・盖特指出的，在编程语言领域，“行业最佳实践” 给你的不是最好，只是平均水平。当一个决策让你的软件开发速度只有更激进竞争对手的几分之一时，“最佳实践” 就是个误称。</p><p>So here we have two pieces of information that I think are very valuable. In fact, I know it from my own experience. Number 1, languages vary in power. Number 2, most managers deliberately ignore this. Between them, these two facts are literally a recipe for making money. ITA is an example of this recipe in action. If you want to win in a software business, just take on the hardest problem you can find, use the most powerful language you can get, and wait for your competitors’ pointy-haired bosses to revert to the mean.<br>所以，我觉得有两个信息非常有价值。其实，我自己的经验也证明了这一点。第一，语言的强大程度不同。第二，大多数管理者故意忽视这一点。这两个事实加起来，简直就是赚钱的秘诀。ITA 就是这个秘诀的实践者。如果你想在软件行业获胜，就去解决你能找到的最难的问题，用你能得到的最强大的语言，然后等着竞争对手的尖头老板们回归平庸就行了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前路殊途</title>
    <link href="/2025/08/14/the-other-road-ahead/"/>
    <url>/2025/08/14/the-other-road-ahead/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Other-Road-Ahead"><a href="#The-Other-Road-Ahead" class="headerlink" title="The Other Road Ahead"></a>The Other Road Ahead</h2><p>原文链接: <a href="https://paulgraham.com/road.html">https://paulgraham.com/road.html</a></p><p>September 2001</p><p>(This article explains why much of the next generation of software may be server-based, what that will mean for programmers, and why this new kind of software is a great opportunity for startups. It’s derived from a talk at BBN Labs.)</p><p>（本文将阐述为何下一代软件可能多为基于服务器的形式，这对程序员意味着什么，以及这种新型软件为何对初创公司是重大机遇。本文改编自作者在 BBN 实验室的演讲。）</p><p>In the summer of 1995, my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape’s IPO was running full blast then, and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web, all made by hand. If there were going to be a lot of online stores, there would need to be software for making them, so we decided to write some.</p><p>1995 年夏天，我和朋友罗伯特・莫里斯决定创办一家初创公司。当时，网景（Netscape）IPO 前的公关宣传正搞得如火如荼，媒体上充斥着关于在线商务的讨论。那时，互联网上可能只有 30 家真正的在线商店，而且都是手工搭建的。我们意识到，若未来会出现大量在线商店，就一定需要搭建它们的软件，于是决定着手开发。</p><p>For the first week or so we intended to make this an ordinary desktop application. Then one day we had the idea of making the software run on our Web server, using the browser as an interface. We tried rewriting the software to work over the Web, and it was clear that this was the way to go. If we wrote our software to run on the server, it would be a lot easier for the users and for us as well.</p><p>最初一周左右，我们本想把它做成一款普通的桌面应用。但某天，我们突然想到：让软件运行在我们的 Web 服务器上，用浏览器作为界面。我们尝试重写软件以适配网络，结果发现这才是正确的方向。如果软件运行在服务器上，对用户和我们自己来说都会简单得多。</p><p>This turned out to be a good plan. Now, as Yahoo Store, this software is the most popular online store builder, with about 14,000 users.</p><p>事实证明这是个好计划。如今，这款软件以 “雅虎商店”（Yahoo Store）之名成为最受欢迎的在线商店搭建工具，拥有约 1.4 万名用户。</p><p>When we started Viaweb, hardly anyone understood what we meant when we said that the software ran on the server. It was not until Hotmail was launched a year later that people started to get it. Now everyone knows that this is a valid approach. There is a name now for what we were: an Application Service Provider, or ASP.</p><p>我们创办 Viaweb 时，几乎没人理解 “软件运行在服务器上” 是什么意思。直到一年后 Hotmail 推出，人们才开始明白。现在，所有人都知道这是一种可行的模式 —— 我们这类公司如今有了一个名字：应用服务提供商（Application Service Provider，简称 ASP）。</p><p>I think that a lot of the next generation of software will be written on this model. Even Microsoft, who have the most to lose, seem to see the inevitablity of moving some things off the desktop. If software moves off the desktop and onto servers, it will mean a very different world for developers. This article describes the surprising things we saw, as some of the first visitors to this new world. To the extent software does move onto servers, what I’m describing here is the future.</p><p>我认为，下一代软件中的很大一部分都会采用这种模式。即便是微软 —— 这家可能因此损失最大的公司 —— 似乎也意识到，有些功能必然会从桌面转移出去。如果软件从桌面转移到服务器，开发者的世界将截然不同。本文将讲述我们作为这个新世界的早期探索者，所看到的那些令人惊讶的现象。只要软件确实向服务器迁移，我所描述的就将是未来。</p><h3 id="The-Next-Thing"><a href="#The-Next-Thing" class="headerlink" title="The Next Thing?"></a><strong>The Next Thing?</strong></h3><p><strong>新事物？</strong></p><p>When we look back on the desktop software era, I think we’ll marvel at the inconveniences people put up with, just as we marvel now at what early car owners put up with. For the first twenty or thirty years, you had to be a car expert to own a car. But cars were such a big win that lots of people who weren’t car experts wanted to have them as well.</p><p>回望桌面软件时代，我想人们会惊叹于当年用户忍受的种种不便 —— 就像我们现在惊叹于早期车主的遭遇一样。汽车发明后的二三十年间，你必须是汽车专家才能拥有一辆车。但汽车的价值太大了，即便不是专家的人也想拥有它。</p><p>Computers are in this phase now. When you own a desktop computer, you end up learning a lot more than you wanted to know about what’s happening inside it. But more than half the households in the US own one. My mother has a computer that she uses for email and for keeping accounts. About a year ago she was alarmed to receive a letter from Apple, offering her a discount on a new version of the operating system. There’s something wrong when a sixty-five year old woman who wants to use a computer for email and accounts has to think about installing new operating systems. Ordinary users shouldn’t even know the words “operating system,” much less “device driver” or “patch.”</p><p>如今的计算机正处于类似阶段。当你拥有一台台式机，最终会被迫了解许多本不想知道的内部运作。但美国超过一半的家庭都有电脑。我母亲用电脑发邮件、记账，大约一年前，她收到苹果的一封信，说可以折扣升级操作系统，这让她很不安。一个只想用电脑发邮件和记账的 65 岁老人，竟然要考虑安装新操作系统 —— 这显然不对劲。普通用户甚至不该知道 “操作系统” 这个词，更别提 “设备驱动” 或 “补丁” 了。</p><p>There is now another way to deliver software that will save users from becoming system administrators. Web-based applications are programs that run on Web servers and use Web pages as the user interface. For the average user this new kind of software will be easier, cheaper, more mobile, more reliable, and often more powerful than desktop software.</p><p>现在，有一种新的软件交付方式可以让用户不必成为系统管理员：基于 Web 的应用。这类程序运行在 Web 服务器上，用网页作为用户界面。对普通用户而言，这种新型软件比桌面软件更简单、更便宜、更易移动、更可靠，往往也更强大。</p><p>With Web-based software, most users won’t have to think about anything except the applications they use. All the messy, changing stuff will be sitting on a server somewhere, maintained by the kind of people who are good at that kind of thing. And so you won’t ordinarily need a computer, per se, to use software. All you’ll need will be something with a keyboard, a screen, and a Web browser. Maybe it will have wireless Internet access. Maybe it will also be your cell phone. Whatever it is, it will be consumer electronics: something that costs about $200, and that people choose mostly based on how the case looks. You’ll pay more for Internet services than you do for the hardware, just as you do now with telephones. [1]</p><p>有了基于 Web 的软件，大多数用户只需关注自己使用的应用即可。所有繁琐、易变的部分都放在某个服务器上，由擅长处理这些的人维护。因此，严格来说，你甚至不需要 “电脑” 就能使用软件 —— 只需一个带键盘、屏幕和浏览器的设备。它可能有无线互联网接入，也可能是你的手机。无论是什么，它都会是消费电子产品：售价约 200 美元，人们选择它主要看外观。你花在互联网服务上的钱会比硬件多，就像现在的电话一样。[1]</p><p>It will take about a tenth of a second for a click to get to the server and back, so users of heavily interactive software, like Photoshop, will still want to have the computations happening on the desktop. But if you look at the kind of things most people use computers for, a tenth of a second latency would not be a problem. My mother doesn’t really need a desktop computer, and there are a lot of people like her.</p><p>点击指令从发出到服务器再返回，大约需要 0.1 秒。因此，像 Photoshop 这类高度交互的软件用户可能仍希望运算在本地进行。但大多数人用电脑做的事，0.1 秒的延迟根本不是问题。我母亲其实不需要台式机，像她这样的人还有很多。</p><h3 id="The-Win-for-Users"><a href="#The-Win-for-Users" class="headerlink" title="The Win for Users"></a><strong>The Win for Users</strong></h3><p><strong>对用户的好处</strong></p><p>Near my house there is a car with a bumper sticker that reads “death before inconvenience.” Most people, most of the time, will take whatever choice requires least work. If Web-based software wins, it will be because it’s more convenient. And it looks as if it will be, for users and developers both.</p><p>我家附近有辆车，保险杠贴纸上写着 “宁死不受麻烦”。大多数人在大多数时候，都会选择最省事的选项。如果基于 Web 的软件能胜出，那一定是因为它更方便 —— 而且看起来，它对用户和开发者都是如此。</p><p>To use a purely Web-based application, all you need is a browser connected to the Internet. So you can use a Web-based application anywhere. When you install software on your desktop computer, you can only use it on that computer. Worse still, your files are trapped on that computer. The inconvenience of this model becomes more and more evident as people get used to networks.</p><p>使用纯 Web 应用，你只需要一个联网的浏览器，因此可以在任何地方使用。而桌面软件一旦安装，就只能在那台电脑上用，更糟的是，你的文件也被困在那里。随着人们习惯了网络，这种模式的不便会越来越明显。</p><p>The thin end of the wedge here was Web-based email. Millions of people now realize that you should have access to email messages no matter where you are. And if you can see your email, why not your calendar? If you can discuss a document with your colleagues, why can’t you edit it? Why should any of your data be trapped on some computer sitting on a faraway desk?</p><p>这种变化的开端是 Web 邮箱。如今，数百万人意识到，无论在哪里都能查看邮件。既然能看邮件，为什么不能看日历？既然能和同事讨论文档，为什么不能一起编辑？为什么你的数据要被困在一台遥远的电脑里？</p><p>The whole idea of “your computer” is going away, and being replaced with “your data.” You should be able to get at your data from any computer. Or rather, any client, and a client doesn’t have to be a computer.</p><p>“你的电脑” 这个概念正在消失，取而代之的是 “你的数据”。你应该能从任何电脑（或者说，任何客户端 —— 客户端未必是电脑）访问自己的数据。</p><p>Clients shouldn’t store data; they should be like telephones. In fact they may become telephones, or vice versa. And as clients get smaller, you have another reason not to keep your data on them: something you carry around with you can be lost or stolen. Leaving your PDA in a taxi is like a disk crash, except that your data is handed to someone else instead of being vaporized.</p><p>客户端不应存储数据，它们应该像电话一样。事实上，客户端可能会变成电话，或者反之。而且，客户端越小，就越不该在上面存数据：随身携带的东西可能丢失或被盗。把 PDA 落在出租车上，后果堪比硬盘崩溃，只是数据会落到别人手里，而非消失。</p><p>With purely Web-based software, neither your data nor the applications are kept on the client. So you don’t have to install anything to use it. And when there’s no installation, you don’t have to worry about installation going wrong. There can’t be incompatibilities between the application and your operating system, because the software doesn’t run on your operating system.</p><p>纯 Web 软件中，数据和应用都不在客户端。因此，使用时无需安装，也不必担心安装出错。应用和操作系统之间不会有兼容性问题，因为软件根本不在你的操作系统上运行。</p><p>Because it needs no installation, it will be easy, and common, to try Web-based software before you “buy” it. You should expect to be able to test-drive any Web-based application for free, just by going to the site where it’s offered. At Viaweb our whole site was like a big arrow pointing users to the test drive.</p><p>由于无需安装，试用 Web 软件会变得简单而普遍。你应该能免费试用任何 Web 应用，只需访问其网站即可。在 Viaweb，我们的整个网站都像一个巨大的箭头，指引用户去试用。</p><p>After trying the demo, signing up for the service should require nothing more than filling out a brief form (the briefer the better). And that should be the last work the user has to do. With Web-based software, you should get new releases without paying extra, or doing any work, or possibly even knowing about it.</p><p>试用后，注册服务只需填写一个简短的表单（越短越好）—— 这应该是用户要做的最后一件事。有了 Web 软件，你无需额外付费或操作，甚至可能都没察觉，就能用上新版本。</p><p>Upgrades won’t be the big shocks they are now. Over time applications will quietly grow more powerful. This will take some effort on the part of the developers. They will have to design software so that it can be updated without confusing the users. That’s a new problem, but there are ways to solve it.</p><p>升级不会再像现在这样令人头疼。随着时间推移，应用会悄悄变得更强大。这需要开发者付出努力：他们必须设计出能在更新时不困扰用户的软件。这是个新问题，但有解决办法。</p><p>With Web-based applications, everyone uses the same version, and bugs can be fixed as soon as they’re discovered. So Web-based software should have far fewer bugs than desktop software. At Viaweb, I doubt we ever had ten known bugs at any one time. That’s orders of magnitude better than desktop software.</p><p>Web 应用的所有用户都使用同一版本，bug 一旦发现就能立即修复。因此，Web 软件的 bug 应该比桌面软件少得多。在 Viaweb，任何时候已知的 bug 都不到 10 个，这比桌面软件好太多了。</p><p>Web-based applications can be used by several people at the same time. This is an obvious win for collaborative applications, but I bet users will start to want this in most applications once they realize it’s possible. It will often be useful to let two people edit the same document, for example. Viaweb let multiple users edit a site simultaneously, more because that was the right way to write the software than because we expected users to want to, but it turned out that many did.</p><p>Web 应用可以多人同时使用。这对协作类应用显然是优势，但我敢说，一旦用户意识到这一点，大多数应用都会需要这个功能。比如，两人同时编辑一份文档就很有用。Viaweb 允许多个用户同时编辑一个站点，起初只是因为这是编写软件的正确方式，而非我们预期用户需要，但后来发现很多用户确实需要。</p><p>When you use a Web-based application, your data will be safer. Disk crashes won’t be a thing of the past, but users won’t hear about them anymore. They’ll happen within server farms. And companies offering Web-based applications will actually do backups– not only because they’ll have real system administrators worrying about such things, but because an ASP that does lose people’s data will be in big, big trouble. When people lose their own data in a disk crash, they can’t get that mad, because they only have themselves to be mad at. When a company loses their data for them, they’ll get a lot madder.</p><p>使用 Web 应用时，你的数据更安全。硬盘崩溃不会消失，但用户不会再听说这类事 —— 它们只会发生在服务器集群里。提供 Web 应用的公司会认真做备份：不仅因为有专业的系统管理员负责，更因为如果 ASP 丢失用户数据，麻烦就大了。用户自己弄丢数据，最多怪自己；但如果是公司弄丢，他们会愤怒得多。</p><p>Finally, Web-based software should be less vulnerable to viruses. If the client doesn’t run anything except a browser, there’s less chance of running viruses, and no data locally to damage. And a program that attacked the servers themselves should find them very well defended. [2]</p><p>最后，Web 软件更不容易受病毒攻击。如果客户端只运行浏览器，运行病毒的机会就少了，本地也没有可破坏的数据。而攻击服务器的程序会发现，服务器的防御非常严密。[2]</p><p>For users, Web-based software will be less stressful. I think if you looked inside the average Windows user you’d find a huge and pretty much untapped desire for software meeting that description. Unleashed, it could be a powerful force.</p><p>对用户来说，Web 软件的压力更小。我想，若能看透普通 Windows 用户的内心，会发现他们对 “低压力软件” 有着巨大却未被满足的渴望。这种渴望一旦释放，将成为强大的力量。</p><h3 id="City-of-Code"><a href="#City-of-Code" class="headerlink" title="City of Code"></a><strong>City of Code</strong></h3><p><strong>代码之城</strong></p><p>To developers, the most conspicuous difference between Web-based and desktop software is that a Web-based application is not a single piece of code. It will be a collection of programs of different types rather than a single big binary. And so designing Web-based software is like desiging a city rather than a building: as well as buildings you need roads, street signs, utilities, police and fire departments, and plans for both growth and various kinds of disasters.</p><p>对开发者而言，Web 软件与桌面软件最显著的区别是：Web 应用不是单一代码块，而是不同类型程序的集合，而非一个巨大的二进制文件。因此，设计 Web 软件就像设计一座城市，而非一栋建筑：除了建筑，你还需要道路、路标、公共设施、警察和消防部门，以及应对增长和各种灾难的计划。</p><p>At Viaweb, software included fairly big applications that users talked to directly, programs that those programs used, programs that ran constantly in the background looking for problems, programs that tried to restart things if they broke, programs that ran occasionally to compile statistics or build indexes for searches, programs we ran explicitly to garbage-collect resources or to move or restore data, programs that pretended to be users (to measure performance or expose bugs), programs for diagnosing network troubles, programs for doing backups, interfaces to outside services, software that drove an impressive collection of dials displaying real-time server statistics (a hit with visitors, but indispensable for us too), modifications (including bug fixes) to open-source software, and a great many configuration files and settings. Trevor Blackwell wrote a spectacular program for moving stores to new servers across the country, without shutting them down, after we were bought by Yahoo. Programs paged us, sent faxes and email to users, conducted transactions with credit card processors, and talked to one another through sockets, pipes, http requests, ssh, udp packets, shared memory, and files. Some of Viaweb even consisted of the absence of programs, since one of the keys to Unix security is not to run unnecessary utilities that people might use to break into your servers.</p><p>在 Viaweb，软件包括用户直接交互的大型应用、这些应用调用的程序、后台持续运行的故障监测程序、重启崩溃进程的程序、定期运行的统计编译或搜索索引构建程序、我们手动运行的资源清理或数据迁移 &#x2F; 恢复程序、模拟用户的程序（用于测试性能或暴露 bug）、网络诊断程序、备份程序、外部服务接口、驱动实时服务器统计仪表盘的软件（访客喜欢看，对我们也必不可少）、开源软件的修改（包括 bug 修复），以及大量配置文件和设置。被雅虎收购后，特雷弗・布莱克韦尔写了一个出色的程序，能在不关闭商店的情况下，将全国的商店迁移到新服务器上。程序会给我们发寻呼、给用户发传真和邮件、与信用卡处理器进行交易，还通过套接字、管道、HTTP 请求、SSH、UDP 数据包、共享内存和文件相互通信。Viaweb 的一部分甚至是 “不存在的程序”—— 因为 Unix 安全的关键之一，就是不运行那些可能被用来入侵服务器的非必要工具。</p><p>It did not end with software. We spent a lot of time thinking about server configurations. We built the servers ourselves, from components– partly to save money, and partly to get exactly what we wanted. We had to think about whether our upstream ISP had fast enough connections to all the backbones. We serially dated RAID suppliers.</p><p>这还不止于软件。我们花了很多时间考虑服务器配置，自己用零件组装服务器 —— 部分是为了省钱，部分是为了完全符合需求。我们得考虑上游 ISP 与所有主干网的连接速度是否足够快，还得挨个考察 RAID 供应商。</p><p>But hardware is not just something to worry about. When you control it you can do more for users. With a desktop application, you can specify certain minimum hardware, but you can’t add more. If you administer the servers, you can in one step enable all your users to page people, or send faxes, or send commands by phone, or process credit cards, etc, just by installing the relevant hardware. We always looked for new ways to add features with hardware, not just because it pleased users, but also as a way to distinguish ourselves from competitors who (either because they sold desktop software, or resold Web-based applications through ISPs) didn’t have direct control over the hardware.</p><p>但硬件不只是需要担心的问题。当你掌控硬件时，能为用户做更多事。桌面软件只能指定最低硬件要求，但无法添加更多功能。而如果你管理服务器，只需安装相关硬件，就能一步到位地让所有用户实现寻呼、发传真、电话指令或信用卡处理等功能。我们总在寻找用硬件增加功能的新方法 —— 不仅因为用户会高兴，还因为这能让我们区别于那些（因销售桌面软件或通过 ISP 转售 Web 应用而）无法直接控制硬件的竞争对手。</p><p>Because the software in a Web-based application will be a collection of programs rather than a single binary, it can be written in any number of different languages. When you’re writing desktop software, you’re practically forced to write the application in the same language as the underlying operating system– meaning C and C++. And so these languages (especially among nontechnical people like managers and VCs) got to be considered as the languages for “serious” software development. But that was just an artifact of the way desktop software had to be delivered. For server-based software you can use any language you want. [3] Today a lot of the top hackers are using languages far removed from C and C++: Perl, Python, and even Lisp.</p><p>由于 Web 应用是程序集合而非单一二进制文件，它可以用多种语言编写。开发桌面软件时，你几乎被迫使用与底层操作系统相同的语言 —— 通常是 C 和 C++。因此，这些语言（尤其在管理者和风投等非技术人士眼中）成了 “严肃” 软件开发的代名词。但这只是桌面软件交付方式带来的假象。对基于服务器的软件而言，你可以用任何语言。[3] 如今，很多顶尖黑客在用与 C 和 C++ 相去甚远的语言：Perl、Python，甚至 Lisp。</p><p>With server-based software, no one can tell you what language to use, because you control the whole system, right down to the hardware. Different languages are good for different tasks. You can use whichever is best for each. And when you have competitors, “you can” means “you must” (we’ll return to this later), because if you don’t take advantage of this possibility, your competitors will.</p><p>有了服务器软件，没人能规定你用什么语言 —— 因为你掌控着整个系统，包括硬件。不同语言适用于不同任务，你可以为每个任务选择最合适的。而当你有竞争对手时，“可以选择” 就意味着 “必须选择”（后文会详述）—— 因为如果你不利用这个优势，对手就会利用。</p><p>Most of our competitors used C and C++, and this made their software visibly inferior because (among other things), they had no way around the statelessness of CGI scripts. If you were going to change something, all the changes had to happen on one page, with an Update button at the bottom. As I’ve written elsewhere, by using Lisp, which many people still consider a research language, we could make the Viaweb editor behave more like desktop software.</p><p>我们的大多数竞争对手用 C 和 C++，这导致他们的软件明显落后 —— 比如，他们无法解决 CGI 脚本的无状态问题。如果要修改内容，所有操作都得在一个页面完成，底部放一个 “更新” 按钮。正如我在别处写的，通过使用仍被很多人视为 “研究性语言” 的 Lisp，我们能让 Viaweb 编辑器的体验更接近桌面软件。</p><h3 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a><strong>Releases</strong></h3><p><strong>发布方式</strong></p><p>One of the most important changes in this new world is the way you do releases. In the desktop software business, doing a release is a huge trauma, in which the whole company sweats and strains to push out a single, giant piece of code. Obvious comparisons suggest themselves, both to the process and the resulting product.</p><p>这个新世界中，最重要的变化之一是发布方式。在桌面软件行业，发布是一场巨大的阵痛：全公司都在为推出一个庞大的代码块而全力以赴。无论是过程还是结果，都能找到恰当的类比。</p><p>With server-based software, you can make changes almost as you would in a program you were writing for yourself. You release software as a series of incremental changes instead of an occasional big explosion. A typical desktop software company might do one or two releases a year. At Viaweb we often did three to five releases a day.</p><p>而服务器软件的发布，几乎就像你为自己写程序时那样，可以通过一系列增量变化来更新，而非偶尔的 “大爆炸”。典型的桌面软件公司一年可能发布一两个版本，而 Viaweb 常常一天发布 3 到 5 次。</p><p>When you switch to this new model, you realize how much software development is affected by the way it is released. Many of the nastiest problems you see in the desktop software business are due to catastrophic nature of releases.</p><p>当你转向这种新模式，会发现软件开发深受发布方式的影响。桌面软件行业的很多棘手问题，都源于发布的 “灾难性” 本质。</p><p>When you release only one new version a year, you tend to deal with bugs wholesale. Some time before the release date you assemble a new version in which half the code has been torn out and replaced, introducing countless bugs. Then a squad of QA people step in and start counting them, and the programmers work down the list, fixing them. They do not generally get to the end of the list, and indeed, no one is sure where the end is. It’s like fishing rubble out of a pond. You never really know what’s happening inside the software. At best you end up with a statistical sort of correctness.</p><p>如果你一年只发布一个新版本，就会倾向于批量处理 bug。发布日前一段时间，你会组装一个新版本，其中一半代码被替换，引入无数 bug。然后一群测试人员介入，开始统计 bug，程序员再按列表逐个修复。他们通常修不完，而且没人知道列表的尽头在哪里 —— 就像从池塘里捞碎石，你永远不知道软件内部到底发生了什么。最好的情况，也只是达到一种 “统计意义上的正确”。</p><p>With server-based software, most of the change is small and incremental. That in itself is less likely to introduce bugs. It also means you know what to test most carefully when you’re about to release software: the last thing you changed. You end up with a much firmer grip on the code. As a general rule, you do know what’s happening inside it. You don’t have the source code memorized, of course, but when you read the source you do it like a pilot scanning the instrument panel, not like a detective trying to unravel some mystery.</p><p>服务器软件的变化大多是微小且增量的，这本身就不太可能引入 bug。而且，你很清楚发布前最需要仔细测试的部分：最后修改的内容。你对代码的掌控会牢固得多。一般来说，你知道软件内部在发生什么。当然，你不会记住所有源代码，但阅读代码时，你像飞行员扫视仪表盘，而非侦探破解谜案。</p><p>Desktop software breeds a certain fatalism about bugs. You know that you’re shipping something loaded with bugs, and you’ve even set up mechanisms to compensate for it (e.g. patch releases). So why worry about a few more? Soon you’re releasing whole features you know are broken. Apple did this earlier this year. They felt under pressure to release their new OS, whose release date had already slipped four times, but some of the software (support for CDs and DVDs) wasn’t ready. The solution? They released the OS without the unfinished parts, and users will have to install them later.</p><p>桌面软件让人们对 bug 产生了某种宿命论：你知道发布的软件充满 bug，甚至还设置了补偿机制（比如补丁）。那再多几个又何妨？很快，你会发布明知有问题的功能。苹果今年早些时候就这么做了。他们迫于压力发布新系统（发布日期已四次推迟），但部分功能（CD 和 DVD 支持）尚未就绪。解决方案？发布不含未完成部分的系统，让用户日后再安装。</p><p>With Web-based software, you never have to release software before it works, and you can release it as soon as it does work.</p><p>而 Web 软件，你永远不必在功能就绪前发布，且功能一就绪就能发布。</p><p>The industry veteran may be thinking, it’s a fine-sounding idea to say that you never have to release software before it works, but what happens when you’ve promised to deliver a new version of your software by a certain date? With Web-based software, you wouldn’t make such a promise, because there are no versions. Your software changes gradually and continuously. Some changes might be bigger than others, but the idea of versions just doesn’t naturally fit onto Web-based software.</p><p>行业老兵可能会想：“不发布未就绪软件” 听起来不错，但如果承诺了在某日期前交付新版本呢？对 Web 软件而言，你不会做这种承诺，因为根本没有 “版本”。软件在持续、渐进地变化。有些变化可能更大，但 “版本” 概念并不适用于 Web 软件。</p><p>If anyone remembers Viaweb this might sound odd, because we were always announcing new versions. This was done entirely for PR purposes. The trade press, we learned, thinks in version numbers. They will give you major coverage for a major release, meaning a new first digit on the version number, and generally a paragraph at most for a point release, meaning a new digit after the decimal point.</p><p>如果有人记得 Viaweb，可能会觉得奇怪 —— 我们总在宣布新版本。但这完全是为了公关。我们发现，行业媒体只认版本号：重大版本（主版本号升级）会得到大幅报道，而小更新（小数点后数字升级）最多给一段文字。</p><p>Some of our competitors were offering desktop software and actually had version numbers. And for these releases, the mere fact of which seemed to us evidence of their backwardness, they would get all kinds of publicity. We didn’t want to miss out, so we started giving version numbers to our software too. When we wanted some publicity, we’d make a list of all the features we’d added since the last “release,” stick a new version number on the software, and issue a press release saying that the new version was available immediately. Amazingly, no one ever called us on it.</p><p>我们的竞争对手提供桌面软件，确实有版本号。而这些在我们看来象征着落后的 “发布”，却能给他们带来各种曝光。我们不想错过，于是也开始给软件标版本号。想搞曝光时，就列出上次 “发布” 后新增的所有功能，贴个新版本号，发新闻稿说新版本已上线。令人惊讶的是，没人质疑。</p><p>By the time we were bought, we had done this three times, so we were on Version 4. Version 4.1 if I remember correctly. After Viaweb became Yahoo Store, there was no longer such a desperate need for publicity, so although the software continued to evolve, the whole idea of version numbers was quietly dropped.</p><p>被收购时，我们已经这么做了三次，所以是 “4.0 版”—— 我记得是 4.1 版。Viaweb 变成雅虎商店后，对曝光的需求没那么迫切了，尽管软件仍在进化，但版本号的概念悄然消失了。</p><h3 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a><strong>Bugs</strong></h3><p><strong>漏洞（Bugs）</strong></p><p>The other major technical advantage of Web-based software is that you can reproduce most bugs. You have the users’ data right there on your disk. If someone breaks your software, you don’t have to try to guess what’s going on, as you would with desktop software: you should be able to reproduce the error while they’re on the phone with you. You might even know about it already, if you have code for noticing errors built into your application.</p><p>Web 软件的另一大技术优势是：大多数 bug 可以复现。用户数据就在你的磁盘上，如果有人用崩了软件，你不必像处理桌面软件那样猜测原因 —— 用户打电话时，你就能复现错误。甚至，如果你在应用中内置了错误监测代码，可能早就知道了。</p><p>Web-based software gets used round the clock, so everything you do is immediately put through the wringer. Bugs turn up quickly.</p><p>Web 软件全天候运行，任何改动都会立即受到考验，bug 会很快暴露。</p><p>Software companies are sometimes accused of letting the users debug their software. And that is just what I’m advocating. For Web-based software it’s actually a good plan, because the bugs are fewer and transient. When you release software gradually you get far fewer bugs to start with. And when you can reproduce errors and release changes instantly, you can find and fix most bugs as soon as they appear. We never had enough bugs at any one time to bother with a formal bug-tracking system.</p><p>软件公司有时被指责 “让用户调试软件”—— 而这正是我所倡导的。对 Web 软件来说，这其实是个好策略，因为 bug 更少且更短暂。渐进式发布本身就减少了 bug，而且你能复现错误并立即发布修复。我们从未需要正式的 bug 跟踪系统，因为任何时候的 bug 都不多。</p><p>You should test changes before you release them, of course, so no major bugs should get released. Those few that inevitably slip through will involve borderline cases and will only affect the few users that encounter them before someone calls in to complain. As long as you fix bugs right away, the net effect, for the average user, is far fewer bugs. I doubt the average Viaweb user ever saw a bug.</p><p>当然，发布前你得测试，确保没有重大 bug。少数漏网之鱼通常涉及边缘情况，且只会影响在有人投诉前遇到它们的少数用户。只要立即修复，对普通用户来说，整体 bug 会少得多。我怀疑 Viaweb 的普通用户从未见过 bug。</p><p>Fixing fresh bugs is easier than fixing old ones. It’s usually fairly quick to find a bug in code you just wrote. When it turns up you often know what’s wrong before you even look at the source, because you were already worrying about it subconsciously. Fixing a bug in something you wrote six months ago (the average case if you release once a year) is a lot more work. And since you don’t understand the code as well, you’re more likely to fix it in an ugly way, or even introduce more bugs. [4]</p><p>修复新 bug 比旧 bug 容易。刚写的代码出了问题，通常很快就能找到原因。bug 出现时，你甚至不用看源码就知道大概哪里错了 —— 因为潜意识里早就在担心了。而修复六个月前写的代码（一年发布一次的话，这是常态）要麻烦得多。而且，由于你对代码的理解没那么深，很可能修复得很丑陋，甚至引入更多 bug。[4]</p><p>When you catch bugs early, you also get fewer compound bugs. Compound bugs are two separate bugs that interact: you trip going downstairs, and when you reach for the handrail it comes off in your hand. In software this kind of bug is the hardest to find, and also tends to have the worst consequences. [5] The traditional “break everything and then filter out the bugs” approach inherently yields a lot of compound bugs. And software that’s released in a series of small changes inherently tends not to. The floors are constantly being swept clean of any loose objects that might later get stuck in something.</p><p>及早发现 bug 还能减少 “复合 bug”。复合 bug 是两个独立 bug 的相互作用：比如你下楼时绊倒，伸手抓扶手，结果扶手掉了。这类 bug 最难找，后果也往往最严重。[5] 传统的 “先破坏一切再过滤 bug” 的方式必然会产生大量复合 bug，而通过一系列小变化发布的软件则不会。就像地面被不断清扫，不会留下日后可能卡住东西的杂物。</p><p>It helps if you use a technique called functional programming. Functional programming means avoiding side-effects. It’s something you’re more likely to see in research papers than commercial software, but for Web-based applications it turns out to be really useful. It’s hard to write entire programs as purely functional code, but you can write substantial chunks this way. It makes those parts of your software easier to test, because they have no state, and that is very convenient in a situation where you are constantly making and testing small modifications. I wrote much of Viaweb’s editor in this style, and we made our scripting language, RTML, a purely functional language.</p><p>使用一种叫 “函数式编程” 的技术会有帮助。函数式编程意味着避免副作用。这种技术在研究论文中比商业软件中更常见，但对 Web 应用来说非常有用。很难将整个程序写成纯函数式代码，但你可以用这种方式写很大一部分。这会让软件的这些部分更易测试 —— 因为它们没有状态，而这在你不断进行小修改和测试时非常方便。Viaweb 的编辑器有很大一部分是我用这种风格写的，我们的脚本语言 RTML 也是纯函数式语言。</p><p>People from the desktop software business will find this hard to credit, but at Viaweb bugs became almost a game. Since most released bugs involved borderline cases, the users who encountered them were likely to be advanced users, pushing the envelope. Advanced users are more forgiving about bugs, especially since you probably introduced them in the course of adding some feature they were asking for. In fact, because bugs were rare and you had to be doing sophisticated things to see them, advanced users were often proud to catch one. They would call support in a spirit more of triumph than anger, as if they had scored points off us.</p><p>桌面软件行业的人可能难以相信，但在 Viaweb，找 bug 几乎成了一种游戏。由于大多数已发布的 bug 涉及边缘情况，遇到它们的往往是那些 “探索极限” 的高级用户。高级用户对 bug 更宽容，尤其是如果 bug 是在添加他们要求的功能时引入的。事实上，因为 bug 很少，而且只有做复杂操作才能发现，高级用户甚至会为抓到一个 bug 而自豪。他们打电话给客服时，更多的是胜利感而非愤怒，就像赢了我们一分。</p><h3 id="Support"><a href="#Support" class="headerlink" title="Support"></a><strong>Support</strong></h3><p><strong>客服</strong></p><p>When you can reproduce errors, it changes your approach to customer support. At most software companies, support is offered as a way to make customers feel better. They’re either calling you about a known bug, or they’re just doing something wrong and you have to figure out what. In either case there’s not much you can learn from them. And so you tend to view support calls as a pain in the ass that you want to isolate from your developers as much as possible.</p><p>当你能复现错误时，客服方式也会改变。在大多数软件公司，客服只是为了让客户感觉好一点。客户要么是在说已知的 bug，要么是操作错了，你得弄清楚问题所在。不管哪种情况，你都学不到太多东西。因此，你会觉得客服电话很麻烦，总想让开发者尽量远离。</p><p>This was not how things worked at Viaweb. At Viaweb, support was free, because we wanted to hear from customers. If someone had a problem, we wanted to know about it right away so that we could reproduce the error and release a fix.</p><p>但 Viaweb 不是这样。我们的客服是免费的，因为我们想听到客户的声音。如果有人遇到问题，我们希望立即知道，以便复现错误并发布修复。</p><p>So at Viaweb the developers were always in close contact with support. The customer support people were about thirty feet away from the programmers, and knew that they could always interrupt anything with a report of a genuine bug. We would leave a board meeting to fix a serious bug.</p><p>因此，在 Viaweb，开发者和客服始终保持密切联系。客服人员离程序员只有约 30 英尺（约 9 米）远，他们知道，只要报告真正的 bug，随时可以打断任何工作。遇到严重 bug 时，我们甚至会离开董事会去修复。</p><p>Our approach to support made everyone happier. The customers were delighted. Just imagine how it would feel to call a support line and be treated as someone bringing important news. The customer support people liked it because it meant they could help the users, instead of reading scripts to them. And the programmers liked it because they could reproduce bugs instead of just hearing vague second-hand reports about them.</p><p>这种客服方式让所有人都更开心。客户很满意 —— 想象一下，打电话给客服，自己被当成带来重要消息的人，是什么感觉。客服人员也喜欢，因为他们能真正帮助用户，而不是念脚本。程序员也喜欢，因为他们能复现 bug，而不是听模糊的二手报告。</p><p>Our policy of fixing bugs on the fly changed the relationship between customer support people and hackers. At most software companies, support people are underpaid human shields, and hackers are little copies of God the Father, creators of the world. Whatever the procedure for reporting bugs, it is likely to be one-directional: support people who hear about bugs fill out some form that eventually gets passed on (possibly via QA) to programmers, who put it on their list of things to do. It was very different at Viaweb. Within a minute of hearing about a bug from a customer, the support people could be standing next to a programmer hearing him say “Shit, you’re right, it’s a bug.” It delighted the support people to hear that “you’re right” from the hackers. They used to bring us bugs with the same expectant air as a cat bringing you a mouse it has just killed. It also made them more careful in judging the seriousness of a bug, because now their honor was on the line.</p><p>我们即时修复 bug 的政策改变了客服人员和黑客（程序员）的关系。在大多数软件公司，客服是低收入的 “人肉盾牌”，而黑客则像创世主一样高高在上。无论 bug 报告流程如何，都可能是单向的：客服听到 bug 后填表单，最终（可能经测试部门）传给程序员，程序员再把它加入待办清单。但在 Viaweb 完全不同。客服从客户那里听到 bug 后，一分钟内就能站到程序员旁边，听他说 “该死，你说得对，这是个 bug”。客服人员听到黑客说 “你是对的” 会很开心，他们带着 bug 来找我们时，那种期待的神情就像猫叼来刚抓到的老鼠。这也让他们在判断 bug 严重性时更谨慎，因为现在这关系到他们的信誉。</p><p>After we were bought by Yahoo, the customer support people were moved far away from the programmers. It was only then that we realized that they were effectively QA and to some extent marketing as well. In addition to catching bugs, they were the keepers of the knowledge of vaguer, buglike things, like features that confused users. [6] They were also a kind of proxy focus group; we could ask them which of two new features users wanted more, and they were always right.</p><p>被雅虎收购后，客服人员被调到离程序员很远的地方。直到那时我们才意识到，他们其实还承担着测试的角色，在某种程度上还负责营销。除了发现 bug，他们还掌握着一些模糊的、类似 bug 的信息，比如让用户困惑的功能。[6] 他们还像一个 “代理焦点小组”：我们问他们用户更想要两个新功能中的哪一个，他们总是对的。</p><h3 id="Morale"><a href="#Morale" class="headerlink" title="Morale"></a><strong>Morale</strong></h3><p><strong>士气</strong></p><p>Being able to release software immediately is a big motivator. Often as I was walking to work I would think of some change I wanted to make to the software, and do it that day. This worked for bigger features as well. Even if something was going to take two weeks to write (few projects took longer), I knew I could see the effect in the software as soon as it was done.</p><p>能立即发布软件是很大的动力。我经常在上班路上想到要改软件，当天就能动手。这对更大的功能也适用。即便某个功能需要两周时间编写（很少有项目更长），我也知道，一旦完成就能立即看到效果。</p><p>If I’d had to wait a year for the next release, I would have shelved most of these ideas, for a while at least. The thing about ideas, though, is that they lead to more ideas. Have you ever noticed that when you sit down to write something, half the ideas that end up in it are ones you thought of while writing it? The same thing happens with software. Working to implement one idea gives you more ideas. So shelving an idea costs you not only that delay in implementing it, but also all the ideas that implementing it would have led to. In fact, shelving an idea probably even inhibits new ideas: as you start to think of some new feature, you catch sight of the shelf and think “but I already have a lot of new things I want to do for the next release.”</p><p>如果要等一年才能发布，我多半会把这些想法搁置，至少暂时如此。但想法的特点是，一个会引出更多。你有没有注意过，坐下来写东西时，最终写进去的想法有一半是写作时才想到的？软件也是如此。实现一个想法的过程会催生更多想法。因此，搁置一个想法不仅意味着延迟实现它，还会失去它可能引出的所有想法。事实上，搁置想法甚至可能抑制新想法：当你开始构思某个新功能时，一想到 “待办清单” 就会想 “但我已经有很多要为下一个版本做的新东西了”。</p><p>What big companies do instead of implementing features is plan them. At Viaweb we sometimes ran into trouble on this account. Investors and analysts would ask us what we had planned for the future. The truthful answer would have been, we didn’t have any plans. We had general ideas about things we wanted to improve, but if we knew how we would have done it already. What were we going to do in the next six months? Whatever looked like the biggest win. I don’t know if I ever dared give this answer, but that was the truth. Plans are just another word for ideas on the shelf. When we thought of good ideas, we implemented them.</p><p>大公司不直接实现功能，而是先规划。Viaweb 有时会因此遇到麻烦。投资者和分析师会问我们未来的计划。实话是，我们没有计划。我们有一些想改进的大致方向，但如果知道具体怎么做，早就做了。未来六个月要做什么？做那些看起来最有价值的事。我不知道自己是否敢这么回答，但这是事实。计划不过是 “搁置的想法” 的另一种说法。想到好主意，我们就去实现。</p><p>At Viaweb, as at many software companies, most code had one definite owner. But when you owned something you really owned it: no one except the owner of a piece of software had to approve (or even know about) a release. There was no protection against breakage except the fear of looking like an idiot to one’s peers, and that was more than enough. I may have given the impression that we just blithely plowed forward writing code. We did go fast, but we thought very carefully before we released software onto those servers. And paying attention is more important to reliability than moving slowly. Because he pays close attention, a Navy pilot can land a 40,000 lb. aircraft at 140 miles per hour on a pitching carrier deck, at night, more safely than the average teenager can cut a bagel.</p><p>和很多软件公司一样，Viaweb 的大多数代码都有明确的负责人。但 “负责” 意味着真正的掌控：除了负责人，没人需要批准（甚至知道）发布。防止出错的唯一保障，是怕在同行面前出丑 —— 而这已经足够了。我可能给人一种印象，觉得我们只是轻率地埋头写代码。我们确实很快，但发布到服务器前会非常谨慎。对可靠性来说，专注比慢更重要。正因为专注，海军飞行员能在夜间、在颠簸的航母甲板上，以 140 英里 &#x2F; 小时的速度降落 4 万磅的飞机，比普通青少年切百吉饼还安全。</p><p>This way of writing software is a double-edged sword of course. It works a lot better for a small team of good, trusted programmers than it would for a big company of mediocre ones, where bad ideas are caught by committees instead of the people that had them.</p><p>当然，这种软件开发方式是把双刃剑。它对由优秀、可信的程序员组成的小团队更有效，而对由平庸者组成的大公司则不然 —— 在大公司，坏主意要靠委员会发现，而非提出者自己。</p><h3 id="Brooks-in-Reverse"><a href="#Brooks-in-Reverse" class="headerlink" title="Brooks in Reverse"></a><strong>Brooks in Reverse</strong></h3><p><strong>反向的布鲁克斯定律</strong></p><p>Fortunately, Web-based software does require fewer programmers. I once worked for a medium-sized desktop software company that had over 100 people working in engineering as a whole. Only 13 of these were in product development. All the rest were working on releases, ports, and so on. With Web-based software, all you need (at most) are the 13 people, because there are no releases, ports, and so on.</p><p>幸运的是，Web 软件需要的程序员更少。我曾在一家中等规模的桌面软件公司工作，整个工程部门有 100 多人，其中只有 13 人负责产品开发，其余都在做发布、移植等工作。而 Web 软件最多只需要这 13 人，因为没有发布、移植等环节。</p><p>Viaweb was written by just three people. [7] I was always under pressure to hire more, because we wanted to get bought, and we knew that buyers would have a hard time paying a high price for a company with only three programmers. (Solution: we hired more, but created new projects for them.)</p><p>Viaweb 仅由三个人编写。[7] 我一直有压力要多招人，因为我们想被收购，而我们知道，收购方很难给只有三个程序员的公司出高价。（解决方案：我们招了更多人，但给他们安排了新项目。）</p><p>When you can write software with fewer programmers, it saves you more than money. As Fred Brooks pointed out in The Mythical Man-Month, adding people to a project tends to slow it down. The number of possible connections between developers grows exponentially with the size of the group. The larger the group, the more time they’ll spend in meetings negotiating how their software will work together, and the more bugs they’ll get from unforeseen interactions. Fortunately, this process also works in reverse: as groups get smaller, software development gets exponentially more efficient. I can’t remember the programmers at Viaweb ever having an actual meeting. We never had more to say at any one time than we could say as we were walking to lunch.</p><p>能用更少的程序员开发软件，节省的不只是钱。正如弗雷德・布鲁克斯在《人月神话》中指出的，给项目加人往往会拖慢进度。开发者之间的可能连接数随团队规模呈指数增长。团队越大，花在会议上协商软件如何协作的时间就越多，因未预见的交互产生的 bug 也越多。幸运的是，这个过程可逆：团队越小，软件开发效率越高。我不记得 Viaweb 的程序员开过正式会议。任何时候，我们要讨论的事都能在去吃午饭的路上说完。</p><p>If there is a downside here, it is that all the programmers have to be to some degree system administrators as well. When you’re hosting software, someone has to be watching the servers, and in practice the only people who can do this properly are the ones who wrote the software. At Viaweb our system had so many components and changed so frequently that there was no definite border between software and infrastructure. Arbitrarily declaring such a border would have constrained our design choices. And so although we were constantly hoping that one day (“in a couple months”) everything would be stable enough that we could hire someone whose job was just to worry about the servers, it never happened.</p><p>如果说有缺点，那就是所有程序员在某种程度上还得兼任系统管理员。托管软件时，总得有人盯着服务器，而实际上，只有写软件的人才能做好这件事。Viaweb 的系统组件太多，变化太频繁，软件和基础设施之间没有明确界限。随意划定界限会限制设计选择。因此，尽管我们总希望有一天（“再过几个月”）系统足够稳定，能雇人专门负责服务器，但这一天从未到来。</p><p>I don’t think it could be any other way, as long as you’re still actively developing the product. Web-based software is never going to be something you write, check in, and go home. It’s a live thing, running on your servers right now. A bad bug might not just crash one user’s process; it could crash them all. If a bug in your code corrupts some data on disk, you have to fix it. And so on. We found that you don’t have to watch the servers every minute (after the first year or so), but you definitely want to keep an eye on things you’ve changed recently. You don’t release code late at night and then go home.</p><p>我认为，只要还在积极开发产品，情况就只能如此。Web 软件永远不是你写完、提交、然后回家就能不管的东西。它是活的，正在你的服务器上运行。一个严重的 bug 可能不只是崩溃一个用户的进程，而是所有用户的。如果代码中的 bug 损坏了磁盘上的数据，你就得修复。等等。我们发现，（一年后）不必每分钟都盯着服务器，但最近修改的部分必须留意。你不会在深夜发布代码然后回家。</p><h3 id="Watching-Users"><a href="#Watching-Users" class="headerlink" title="Watching Users"></a><strong>Watching Users</strong></h3><p><strong>观察用户</strong></p><p>With server-based software, you’re in closer touch with your code. You can also be in closer touch with your users. Intuit is famous for introducing themselves to customers at retail stores and asking to follow them home. If you’ve ever watched someone use your software for the first time, you know what surprises must have awaited them.</p><p>有了服务器软件，你能更贴近代码，也能更贴近用户。财捷集团（Intuit）因在零售店向客户自我介绍并请求跟着回家而闻名。如果你见过有人第一次用你的软件，就会知道他们一定会遇到惊喜（指意外问题）。</p><p>Software should do what users think it will. But you can’t have any idea what users will be thinking, believe me, until you watch them. And server-based software gives you unprecedented information about their behavior. You’re not limited to small, artificial focus groups. You can see every click made by every user. You have to consider carefully what you’re going to look at, because you don’t want to violate users’ privacy, but even the most general statistical sampling can be very useful.</p><p>软件应该按用户预期的方式工作。但相信我，除非观察他们，否则你根本不知道用户在想什么。服务器软件能提供关于用户行为的前所未有的信息。你不限于小型、人为的焦点小组，能看到每个用户的每一次点击。你必须仔细考虑要看什么 —— 因为不想侵犯用户隐私 —— 但即便是最一般的统计抽样也非常有用。</p><p>When you have the users on your server, you don’t have to rely on benchmarks, for example. Benchmarks are simulated users. With server-based software, you can watch actual users. To decide what to optimize, just log into a server and see what’s consuming all the CPU. And you know when to stop optimizing too: we eventually got the Viaweb editor to the point where it was memory-bound rather than CPU-bound, and since there was nothing we could do to decrease the size of users’ data (well, nothing easy), we knew we might as well stop there.</p><p>比如，当用户在你的服务器上时，不必依赖基准测试。基准测试是模拟用户，而服务器软件能让你观察真实用户。要决定优化什么，只需登录服务器看看什么占用了最多 CPU。你也知道何时停止优化：我们最终让 Viaweb 编辑器达到了内存受限而非 CPU 受限的程度，而由于无法（轻易）减小用户数据量，我们知道可以就此打住。</p><p>Efficiency matters for server-based software, because you’re paying for the hardware. The number of users you can support per server is the divisor of your capital cost, so if you can make your software very efficient you can undersell competitors and still make a profit. At Viaweb we got the capital cost per user down to about $5. It would be less now, probably less than the cost of sending them the first month’s bill. Hardware is free now, if your software is reasonably efficient.</p><p>效率对服务器软件很重要，因为你要为硬件付费。每台服务器能支持的用户数是资本成本的除数，因此，如果软件效率很高，你就能以更低的价格销售，仍能盈利。在 Viaweb，每个用户的资本成本降至约 5 美元。现在会更低，可能低于给他们寄第一个月账单的成本。如果软件效率尚可，硬件几乎是免费的。</p><p>Watching users can guide you in design as well as optimization. Viaweb had a scripting language called RTML that let advanced users define their own page styles. We found that RTML became a kind of suggestion box, because users only used it when the predefined page styles couldn’t do what they wanted. Originally the editor put button bars across the page, for example, but after a number of users used RTML to put buttons down the left side, we made that an option (in fact the default) in the predefined page styles.</p><p>观察用户不仅能指导优化，还能指导设计。Viaweb 有一种叫 RTML 的脚本语言，让高级用户可以自定义页面样式。我们发现，RTML 成了一种 “意见箱”—— 因为用户只有在预设样式无法满足需求时才会用它。例如，编辑器最初在页面顶部放按钮栏，但很多用户用 RTML 把按钮移到左侧后，我们就把这作为预设样式的一个选项（实际上成了默认）。</p><p>Finally, by watching users you can often tell when they’re in trouble. And since the customer is always right, that’s a sign of something you need to fix. At Viaweb the key to getting users was the online test drive. It was not just a series of slides built by marketing people. In our test drive, users actually used the software. It took about five minutes, and at the end of it they had built a real, working store.</p><p>最后，通过观察用户，你常常能发现他们何时遇到麻烦。而既然客户永远是对的，这就意味着有东西需要修复。在 Viaweb，获取用户的关键是在线试用。这不仅仅是营销人员制作的一系列幻灯片 —— 在我们的试用中，用户真的在使用软件。整个过程约 5 分钟，结束时他们已经搭建了一个真实可用的商店。</p><p>The test drive was the way we got nearly all our new users. I think it will be the same for most Web-based applications. If users can get through a test drive successfully, they’ll like the product. If they get confused or bored, they won’t. So anything we could do to get more people through the test drive would increase our growth rate.</p><p>试用几乎是我们获取所有新用户的方式。我认为大多数 Web 应用也会如此。如果用户能成功完成试用，就会喜欢产品；如果感到困惑或无聊，就不会。因此，任何能让更多人完成试用的事，都能提高增长率。</p><p>I studied click trails of people taking the test drive and found that at a certain step they would get confused and click on the browser’s Back button. (If you try writing Web-based applications, you’ll find that the Back button becomes one of your most interesting philosophical problems.) So I added a message at that point, telling users that they were nearly finished, and reminding them not to click on the Back button. Another great thing about Web-based software is that you get instant feedback from changes: the number of people completing the test drive rose immediately from 60% to 90%. And since the number of new users was a function of the number of completed test drives, our revenue growth increased by 50%, just from that change.</p><p>我研究了试用用户的点击轨迹，发现他们在某个步骤会困惑并点击浏览器的 “后退” 按钮。（如果你尝试写 Web 应用，会发现 “后退” 按钮成了最有趣的哲学问题之一。）于是我在那个步骤加了一条消息，告诉用户快完成了，提醒他们不要点后退。Web 软件的另一个好处是，修改能立即得到反馈：完成试用的人数立即从 60% 升至 90%。而由于新用户数量取决于完成试用的人数，仅这一个修改就让收入增长率提高了 50%。</p><h3 id="Money"><a href="#Money" class="headerlink" title="Money"></a><strong>Money</strong></h3><p><strong>盈利</strong></p><p>In the early 1990s I read an article in which someone said that software was a subscription business. At first this seemed a very cynical statement. But later I realized that it reflects reality: software development is an ongoing process. I think it’s cleaner if you openly charge subscription fees, instead of forcing people to keep buying and installing new versions so that they’ll keep paying you. And fortunately, subscriptions are the natural way to bill for Web-based applications.</p><p>20 世纪 90 年代初，我读过一篇文章，说软件是订阅业务。起初这听起来很愤世嫉俗，但后来我意识到这反映了现实：软件开发是一个持续的过程。我认为，公开收取订阅费更合理，而不是强迫人们不断购买和安装新版本来让他们持续付费。幸运的是，订阅是 Web 应用的自然计费方式。</p><p>Hosting applications is an area where companies will play a role that is not likely to be filled by freeware. Hosting applications is a lot of stress, and has real expenses. No one is going to want to do it for free.</p><p>托管应用是企业将发挥作用的领域，不太可能被免费软件取代。托管应用压力大，且有实际成本，没人愿意免费做。</p><p>For companies, Web-based applications are an ideal source of revenue. Instead of starting each quarter with a blank slate, you have a recurring revenue stream. Because your software evolves gradually, you don’t have to worry that a new model will flop; there never need be a new model, per se, and if you do something to the software that users hate, you’ll know right away. You have no trouble with uncollectable bills; if someone won’t pay you can just turn off the service. And there is no possibility of piracy.</p><p>对公司来说，Web 应用是理想的收入来源。你不必每个季度从零开始，而是有持续的收入流。由于软件逐渐进化，不必担心新模式会失败 —— 本质上不需要新模式，而且如果做了用户讨厌的改动，能立即知道。不会有收不到钱的问题：如果有人不付费，关掉服务就行。也不存在盗版问题。</p><p>That last “advantage” may turn out to be a problem. Some amount of piracy is to the advantage of software companies. If some user really would not have bought your software at any price, you haven’t lost anything if he uses a pirated copy. In fact you gain, because he is one more user helping to make your software the standard– or who might buy a copy later, when he graduates from high school.</p><p>最后这个 “优势” 可能成问题。一定程度的盗版对软件公司有利。如果某个用户无论如何都不会买你的软件，他用盗版对你没损失。事实上你还能获益，因为他多了一个帮你的软件成为标准的用户 —— 或者他高中毕业后可能会买一份。</p><p>When they can, companies like to do something called price discrimination, which means charging each customer as much as they can afford. [8] Software is particularly suitable for price discrimination, because the marginal cost is close to zero. This is why some software costs more to run on Suns than on Intel boxes: a company that uses Suns is not interested in saving money and can safely be charged more. Piracy is effectively the lowest tier of price discrimination. I think that software companies understand this and deliberately turn a blind eye to some kinds of piracy. [9] With server-based software they are going to have to come up with some other solution.</p><p>公司在可能的情况下会进行 “价格歧视”，即向每个客户收取他们能承受的最高价格。[8] 软件特别适合价格歧视，因为边际成本接近零。这就是为什么有些软件在 Sun 机上运行比在 Intel 机上贵：用 Sun 机的公司不在乎省钱，可以放心多收费。盗版实际上是价格歧视的最底层。我认为软件公司明白这一点，故意对某些盗版视而不见。[9] 有了服务器软件，他们得想出其他解决方案。</p><p>Web-based software sells well, especially in comparison to desktop software, because it’s easy to buy. You might think that people decide to buy something, and then buy it, as two separate steps. That’s what I thought before Viaweb, to the extent I thought about the question at all. In fact the second step can propagate back into the first: if something is hard to buy, people will change their mind about whether they wanted it. And vice versa: you’ll sell more of something when it’s easy to buy. I buy more books because Amazon exists. Web-based software is just about the easiest thing in the world to buy, especially if you have just done an online demo. Users should not have to do much more than enter a credit card number. (Make them do more at your peril.)</p><p>Web 软件卖得好，尤其是相比桌面软件，因为它容易购买。你可能认为，人们先决定买，再购买，是两个独立步骤。在 Viaweb 之前，我也是这么想的（如果我想过这个问题的话）。但实际上，第二步会影响第一步：如果购买很麻烦，人们会改变是否想要的想法。反之，容易购买的东西会卖得更多。因为有亚马逊，我买的书更多了。Web 软件几乎是世界上最容易购买的东西，尤其是刚做完在线演示后。用户只需输入信用卡号就行（让他们多做一步，后果自负）。</p><p>Sometimes Web-based software is offered through ISPs acting as resellers. This is a bad idea. You have to be administering the servers, because you need to be constantly improving both hardware and software. If you give up direct control of the servers, you give up most of the advantages of developing Web-based applications.</p><p>有时 Web 软件通过 ISP 作为经销商提供。这是个坏主意。你必须管理服务器，因为需要不断改进硬件和软件。如果放弃对服务器的直接控制，就放弃了开发 Web 应用的大部分优势。</p><p>Several of our competitors shot themselves in the foot this way– usually, I think, because they were overrun by suits who were excited about this huge potential channel, and didn’t realize that it would ruin the product they hoped to sell through it. Selling Web-based software through ISPs is like selling sushi through vending machines.</p><p>我们的几个竞争对手就这样自食其果 —— 我认为，通常是因为他们被西装革履的人（指管理人员）主导，这些人对这个巨大的潜在渠道很兴奋，却没意识到这会毁掉他们想通过渠道销售的产品。通过 ISP 卖 Web 软件，就像通过自动售货机卖寿司。</p><h3 id="Customers"><a href="#Customers" class="headerlink" title="Customers"></a><strong>Customers</strong></h3><p><strong>客户</strong></p><p>Who will the customers be? At Viaweb they were initially individuals and smaller companies, and I think this will be the rule with Web-based applications. These are the users who are ready to try new things, partly because they’re more flexible, and partly because they want the lower costs of new technology.</p><p>客户会是谁？在 Viaweb，最初是个人和小公司，我认为 Web 应用也会如此。这些用户愿意尝试新事物，部分因为他们更灵活，部分因为他们想要新技术带来的低成本。</p><p>Web-based applications will often be the best thing for big companies too (though they’ll be slow to realize it). The best intranet is the Internet. If a company uses true Web-based applications, the software will work better, the servers will be better administered, and employees will have access to the system from anywhere.</p><p>Web 应用对大公司往往也是最好的选择（尽管他们会迟迟意识不到）。最好的内网就是互联网。如果公司使用真正的 Web 应用，软件会更好用，服务器管理更到位，员工在任何地方都能访问系统。</p><p>The argument against this approach usually hinges on security: if access is easier for employees, it will be for bad guys too. Some larger merchants were reluctant to use Viaweb because they thought customers’ credit card information would be safer on their own servers. It was not easy to make this point diplomatically, but in fact the data was almost certainly safer in our hands than theirs. Who can hire better people to manage security, a technology startup whose whole business is running servers, or a clothing retailer? Not only did we have better people worrying about security, we worried more about it. If someone broke into the clothing retailer’s servers, it would affect at most one merchant, could probably be hushed up, and in the worst case might get one person fired. If someone broke into ours, it could affect thousands of merchants, would probably end up as news on CNet, and could put us out of business.</p><p>反对这种方式的论点通常围绕安全：如果员工更容易访问，坏人也会更容易。一些大商家不愿用 Viaweb，因为他们认为客户的信用卡信息在自己的服务器上更安全。委婉地说明这一点并不容易，但事实上，数据在我们手里几乎肯定比在他们那里更安全。谁能雇到更好的人来管理安全？是一家以运行服务器为核心业务的科技初创公司，还是一家服装零售商？我们不仅有更优秀的人负责安全，还更重视它。如果有人入侵服装零售商的服务器，最多影响一个商家，可能被掩盖，最坏情况是有人被解雇。如果有人入侵我们的服务器，可能影响数千商家，很可能登上 CNet 新闻，甚至让我们倒闭。</p><p>If you want to keep your money safe, do you keep it under your mattress at home, or put it in a bank? This argument applies to every aspect of server administration: not just security, but uptime, bandwidth, load management, backups, etc. Our existence depended on doing these things right. Server problems were the big no-no for us, like a dangerous toy would be for a toy maker, or a salmonella outbreak for a food processor.</p><p>如果你想让钱安全，是放在家里的床垫下，还是存入银行？这个论点适用于服务器管理的方方面面：不仅是安全，还有 uptime（运行时间）、带宽、负载管理、备份等。我们的生存取决于把这些事做好。服务器问题对我们来说是绝对禁忌，就像危险玩具对玩具制造商、沙门氏菌爆发对食品加工商一样。</p><p>A big company that uses Web-based applications is to that extent outsourcing IT. Drastic as it sounds, I think this is generally a good idea. Companies are likely to get better service this way than they would from in-house system administrators. System administrators can become cranky and unresponsive because they’re not directly exposed to competitive pressure: a salesman has to deal with customers, and a developer has to deal with competitors’ software, but a system administrator, like an old bachelor, has few external forces to keep him in line. [10] At Viaweb we had external forces in plenty to keep us in line. The people calling us were customers, not just co-workers. If a server got wedged, we jumped; just thinking about it gives me a jolt of adrenaline, years later.</p><p>使用 Web 应用的大公司，在某种程度上是将 IT 外包。听起来很激进，但我认为这通常是个好主意。公司通过这种方式得到的服务，可能比内部系统管理员提供的更好。系统管理员可能变得暴躁且反应迟钝，因为他们不直接面临竞争压力：销售人员要应对客户，开发者要应对竞争对手的软件，而系统管理员就像老光棍，没什么外部力量约束他们。[10] 在 Viaweb，有足够的外部力量约束我们。打电话给我们的是客户，不只是同事。如果服务器卡住，我们会立即行动；多年后想到这，我仍会肾上腺素飙升。</p><p>So Web-based applications will ordinarily be the right answer for big companies too. They will be the last to realize it, however, just as they were with desktop computers. And partly for the same reason: it will be worth a lot of money to convince big companies that they need something more expensive.</p><p>因此，Web 应用通常对大公司也是正确选择。但他们会最后才意识到，就像当年对台式机一样。部分原因相同：说服大公司他们需要更贵的东西，能赚很多钱。</p><p>There is always a tendency for rich customers to buy expensive solutions, even when cheap solutions are better, because the people offering expensive solutions can spend more to sell them. At Viaweb we were always up against this. We lost several high-end merchants to Web consulting firms who convinced them they’d be better off if they paid half a million dollars for a custom-made online store on their own server. They were, as a rule, not better off, as more than one discovered when Christmas shopping season came around and loads rose on their server. Viaweb was a lot more sophisticated than what most of these merchants got, but we couldn’t afford to tell them. At $300 a month, we couldn’t afford to send a team of well-dressed and authoritative-sounding people to make presentations to customers.</p><p>富有的客户总是倾向于购买昂贵的解决方案，即使便宜的更好 —— 因为提供昂贵方案的人能花更多钱去推销。在 Viaweb，我们一直面临这种情况。有几个高端商家被 Web 咨询公司抢走，这些公司说服他们，花 50 万美元在自己的服务器上定制在线商店会更好。但通常情况下，他们的处境并没有变好，不止一个商家在圣诞购物季来临时，因服务器负载上升而发现了这一点。Viaweb 比这些商家得到的大多数解决方案要复杂得多，但我们没有能力去告诉他们。每月 300 美元的价格，我们负担不起派一队衣着光鲜、听起来很权威的人去给客户做演示。</p><p>A large part of what big companies pay extra for is the cost of selling expensive things to them. (If the Defense Department pays a thousand dollars for toilet seats, it’s partly because it costs a lot to sell toilet seats for a thousand dollars.) And this is one reason intranet software will continue to thrive, even though it is probably a bad idea. It’s simply more expensive. There is nothing you can do about this conundrum, so the best plan is to go for the smaller customers first. The rest will come in time.</p><p>大公司多支付的很大一部分钱，其实是向他们推销昂贵产品的成本。（如果国防部花 1000 美元买一个马桶圈，部分原因是把马桶圈卖到 1000 美元需要花很多钱。）这也是内部网软件会继续繁荣的原因之一，尽管它可能不是个好主意。只是因为它更贵而已。对于这个难题，你无能为力，所以最好的计划是先争取小客户。其余的客户迟早会来。</p><h3 id="Son-of-Server"><a href="#Son-of-Server" class="headerlink" title="Son of Server"></a><strong>Son of Server</strong></h3><p><strong>服务器之子</strong></p><p>Running software on the server is nothing new. In fact it’s the old model: mainframe applications are all server-based. If server-based software is such a good idea, why did it lose last time? Why did desktop computers eclipse mainframes?</p><p>在服务器上运行软件并不是什么新鲜事。事实上，这是一种旧模式：大型机应用程序都是基于服务器的。如果基于服务器的软件是个好主意，那它上次为什么会失败？为什么桌面电脑会超越大型机？</p><p>At first desktop computers didn’t look like much of a threat. The first users were all hackers– or hobbyists, as they were called then. They liked microcomputers because they were cheap. For the first time, you could have your own computer. The phrase “personal computer” is part of the language now, but when it was first used it had a deliberately audacious sound, like the phrase “personal satellite” would today.</p><p>起初，桌面电脑看起来并不构成太大威胁。第一批用户都是黑客 —— 或者当时被称为爱好者。他们喜欢微型计算机，因为它们便宜。第一次，人们可以拥有自己的电脑。“个人电脑” 这个词现在已经是日常用语了，但它刚出现时，听起来故意很大胆，就像现在说 “个人卫星” 一样。</p><p>Why did desktop computers take over? I think it was because they had better software. And I think the reason microcomputer software was better was that it could be written by small companies.</p><p>桌面电脑为什么会占据主导地位？我认为是因为它们有更好的软件。而微型计算机软件更好的原因，是小公司也能编写。</p><p>I don’t think many people realize how fragile and tentative startups are in the earliest stage. Many startups begin almost by accident– as a couple guys, either with day jobs or in school, writing a prototype of something that might, if it looks promising, turn into a company. At this larval stage, any significant obstacle will stop the startup dead in its tracks. Writing mainframe software required too much commitment up front. Development machines were expensive, and because the customers would be big companies, you’d need an impressive-looking sales force to sell it to them. Starting a startup to write mainframe software would be a much more serious undertaking than just hacking something together on your Apple II in the evenings. And so you didn’t get a lot of startups writing mainframe applications.</p><p>我觉得很多人没有意识到，初创公司在最早期是多么脆弱和不确定。许多初创公司几乎是偶然诞生的 —— 几个有正职或在上学的人，写一个原型，如果看起来有前景，可能就会变成一家公司。在这个 “幼虫” 阶段，任何重大障碍都会让初创公司戛然而止。编写大型机软件需要前期投入太多。开发机器很贵，而且由于客户是大公司，你需要一支看起来很厉害的销售团队来推销。创办一家开发大型机软件的初创公司，比晚上在 Apple II 上随便编点东西要严肃得多。因此，没有多少初创公司会去编写大型机应用程序。</p><p>The arrival of desktop computers inspired a lot of new software, because writing applications for them seemed an attainable goal to larval startups. Development was cheap, and the customers would be individual people that you could reach through computer stores or even by mail-order.</p><p>桌面电脑的出现催生了很多新软件，因为对处于 “幼虫” 阶段的初创公司来说，为桌面电脑编写应用程序似乎是一个可以实现的目标。开发成本低，客户是个人，你可以通过电脑商店甚至邮购接触到他们。</p><p>The application that pushed desktop computers out into the mainstream was VisiCalc, the first spreadsheet. It was written by two guys working in an attic, and yet did things no mainframe software could do. [11] VisiCalc was such an advance, in its time, that people bought Apple IIs just to run it. And this was the beginning of a trend: desktop computers won because startups wrote software for them.</p><p>将桌面电脑推向主流的应用程序是 VisiCalc，第一个电子表格软件。它是由两个在阁楼里工作的人编写的，但却能做大型机软件做不到的事情。[11] 在当时，VisiCalc 是一项巨大的进步，人们买 Apple II 电脑就是为了运行它。这开启了一个趋势：桌面电脑之所以成功，是因为初创公司为它们编写了软件。</p><p>It looks as if server-based software will be good this time around, because startups will write it. Computers are so cheap now that you can get started, as we did, using a desktop computer as a server. Inexpensive processors have eaten the workstation market (you rarely even hear the word now) and are most of the way through the server market; Yahoo’s servers, which deal with loads as high as any on the Internet, all have the same inexpensive Intel processors that you have in your desktop machine. And once you’ve written the software, all you need to sell it is a Web site. Nearly all our users came direct to our site through word of mouth and references in the press. [12]</p><p>这次，基于服务器的软件似乎会有好前景，因为初创公司会去编写它。现在电脑很便宜，你可以像我们一样，用一台桌面电脑作为服务器开始创业。廉价处理器已经占领了工作站市场（现在几乎听不到这个词了），并且在服务器市场也占据了大部分份额；雅虎的服务器处理着互联网上最高的负载，却都使用着和你桌面电脑一样的廉价英特尔处理器。而且一旦你编写好软件，只需一个网站就能销售它。我们几乎所有的用户都是通过口碑和媒体报道直接来到我们的网站的。[12]</p><p>Viaweb was a typical larval startup. We were terrified of starting a company, and for the first few months comforted ourselves by treating the whole thing as an experiment that we might call off at any moment. Fortunately, there were few obstacles except technical ones. While we were writing the software, our Web server was the same desktop machine we used for development, connected to the outside world by a dialup line. Our only expenses in that phase were food and rent.</p><p>Viaweb 是一个典型的 “幼虫” 阶段初创公司。我们害怕创办公司，在最初的几个月里，我们把整件事当作一个随时可以取消的实验来安慰自己。幸运的是，除了技术障碍外，几乎没有其他障碍。我们编写软件时，Web 服务器就是我们用于开发的那台桌面电脑，通过拨号线路连接到外部世界。那个阶段我们唯一的开支是食物和房租。</p><p>There is all the more reason for startups to write Web-based software now, because writing desktop software has become a lot less fun. If you want to write desktop software now you do it on Microsoft’s terms, calling their APIs and working around their buggy OS. And if you manage to write something that takes off, you may find that you were merely doing market research for Microsoft.</p><p>现在初创公司更有理由去编写基于 Web 的软件，因为编写桌面软件已经变得无趣多了。现在如果你想写桌面软件，就得按微软的规则来：调用他们的 API，还要绕过他们漏洞百出的操作系统。而且如果你成功写出了一款受欢迎的软件，你可能会发现自己只是在为微软做市场调研。</p><p>If a company wants to make a platform that startups will build on, they have to make it something that hackers themselves will want to use. That means it has to be inexpensive and well-designed. The Mac was popular with hackers when it first came out, and a lot of them wrote software for it. [13] You see this less with Windows, because hackers don’t use it. The kind of people who are good at writing software tend to be running Linux or FreeBSD now.</p><p>如果一家公司想打造一个让初创公司可以在此基础上开发的平台，就必须让黑客自己也想用它。这意味着它必须廉价且设计精良。Mac 刚推出时很受黑客欢迎，很多黑客为它编写软件。[13] 而 Windows 就很少有这种情况，因为黑客不用它。现在擅长写软件的人，往往运行的是 Linux 或 FreeBSD。</p><p>I don’t think we would have started a startup to write desktop software, because desktop software has to run on Windows, and before we could write software for Windows we’d have to use it. The Web let us do an end-run around Windows, and deliver software running on Unix direct to users through the browser. That is a liberating prospect, a lot like the arrival of PCs twenty-five years ago.</p><p>我认为我们不会创办一家开发桌面软件的初创公司，因为桌面软件必须在 Windows 上运行，而在为 Windows 编写软件之前，我们就得先使用它。Web 让我们绕开了 Windows，通过浏览器将运行在 Unix 上的软件直接交付给用户。这是一个令人解放的前景，很像 25 年前个人电脑的出现。</p><h3 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a><strong>Microsoft</strong></h3><p><strong>微软</strong></p><p>Back when desktop computers arrived, IBM was the giant that everyone was afraid of. It’s hard to imagine now, but I remember the feeling very well. Now the frightening giant is Microsoft, and I don’t think they are as blind to the threat facing them as IBM was. After all, Microsoft deliberately built their business in IBM’s blind spot.</p><p>桌面电脑出现时，IBM 是所有人都害怕的巨头。现在很难想象，但我清楚地记得那种感觉。现在，令人恐惧的巨头是微软，但我认为他们不像 IBM 那样对面临的威胁视而不见。毕竟，微软就是故意在 IBM 的盲点上建立了自己的业务。</p><p>I mentioned earlier that my mother doesn’t really need a desktop computer. Most users probably don’t. That’s a problem for Microsoft, and they know it. If applications run on remote servers, no one needs Windows. What will Microsoft do? Will they be able to use their control of the desktop to prevent, or constrain, this new generation of software?</p><p>我 earlier 提到过，我母亲其实不需要桌面电脑。大多数用户可能也不需要。这对微软来说是个问题，他们也知道这一点。如果应用程序在远程服务器上运行，就没人需要 Windows 了。微软会怎么做？他们能利用对桌面的控制来阻止或限制这新一代软件吗？</p><p>My guess is that Microsoft will develop some kind of server&#x2F;desktop hybrid, where the operating system works together with servers they control. At a minimum, files will be centrally available for users who want that. I don’t expect Microsoft to go all the way to the extreme of doing the computations on the server, with only a browser for a client, if they can avoid it. If you only need a browser for a client, you don’t need Microsoft on the client, and if Microsoft doesn’t control the client, they can’t push users towards their server-based applications.</p><p>我猜微软会开发某种服务器 &#x2F; 桌面混合体，让操作系统与他们控制的服务器协同工作。至少，文件会集中存储，供需要的用户使用。如果可以避免，我不认为微软会走到极端：所有计算都在服务器上进行，客户端只需要一个浏览器。如果客户端只需要浏览器，就不需要微软的客户端软件；如果微软不控制客户端，就无法推动用户使用他们的基于服务器的应用程序。</p><p>I think Microsoft will have a hard time keeping the genie in the bottle. There will be too many different types of clients for them to control them all. And if Microsoft’s applications only work with some clients, competitors will be able to trump them by offering applications that work from any client. [14]</p><p>我认为微软很难把精灵关在瓶子里。客户端类型太多，他们无法全部控制。如果微软的应用程序只能在某些客户端上运行，竞争对手就能通过提供适用于任何客户端的应用程序来击败他们。[14]</p><p>In a world of Web-based applications, there is no automatic place for Microsoft. They may succeed in making themselves a place, but I don’t think they’ll dominate this new world as they did the world of desktop applications.</p><p>在基于 Web 的应用程序的世界里，微软并没有天然的位置。他们可能会成功为自己找到一席之地，但我认为他们不会像主导桌面应用程序世界那样主导这个新世界。</p><p>It’s not so much that a competitor will trip them up as that they will trip over themselves. With the rise of Web-based software, they will be facing not just technical problems but their own wishful thinking. What they need to do is cannibalize their existing business, and I can’t see them facing that. The same single-mindedness that has brought them this far will now be working against them. IBM was in exactly the same situation, and they could not master it. IBM made a late and half-hearted entry into the microcomputer business because they were ambivalent about threatening their cash cow, mainframe computing. Microsoft will likewise be hampered by wanting to save the desktop. A cash cow can be a damned heavy monkey on your back.</p><p>与其说是竞争对手会绊倒他们，不如说是他们会自己绊倒自己。随着基于 Web 的软件的兴起，他们面临的不仅是技术问题，还有自己的一厢情愿。他们需要做的是蚕食自己现有的业务，但我看不到他们会这么做。那种让他们走到今天的专注，现在会反过来阻碍他们。IBM 曾处于完全相同的境地，却未能掌控局面。IBM 很晚才半心半意地进入微型计算机业务，因为他们对威胁到自己的摇钱树 —— 大型机计算 —— 感到矛盾。微软同样会因为想要保住桌面业务而受阻。摇钱树有时会变成背上一个该死的沉重包袱。</p><p>I’m not saying that no one will dominate server-based applications. Someone probably will eventually. But I think that there will be a good long period of cheerful chaos, just as there was in the early days of microcomputers. That was a good time for startups. Lots of small companies flourished, and did it by making cool things.</p><p>我不是说没人会主导基于服务器的应用程序。最终可能会有这样的公司。但我认为，将会有很长一段愉快的混乱时期，就像微型计算机早期那样。那是初创公司的好时代。很多小公司蓬勃发展，靠的是做出很酷的东西。</p><h3 id="Startups-but-More-So"><a href="#Startups-but-More-So" class="headerlink" title="Startups but More So"></a><strong>Startups but More So</strong></h3><p><strong>初创公司，但不止于此</strong></p><p>The classic startup is fast and informal, with few people and little money. Those few people work very hard, and technology magnifies the effect of the decisions they make. If they win, they win big.</p><p>典型的初创公司速度快、不拘形式，人少钱少。这少数几个人工作非常努力，而技术放大了他们决策的影响。如果成功，他们会大获全胜。</p><p>In a startup writing Web-based applications, everything you associate with startups is taken to an extreme. You can write and launch a product with even fewer people and even less money. You have to be even faster, and you can get away with being more informal. You can literally launch your product as three guys sitting in the living room of an apartment, and a server collocated at an ISP. We did.</p><p>在开发基于 Web 的应用程序的初创公司中，所有与初创公司相关的特点都被推向了极端。你可以用更少的人和更少的钱编写并推出产品。你必须更快，也可以更不拘形式。你真的可以靠三个坐在公寓客厅里的人，加上一台托管在 ISP 的服务器，就能推出产品。我们就是这么做的。</p><p>Over time the teams have gotten smaller, faster, and more informal. In 1960, software development meant a roomful of men with horn rimmed glasses and narrow black neckties, industriously writing ten lines of code a day on IBM coding forms. In 1980, it was a team of eight to ten people wearing jeans to the office and typing into vt100s. Now it’s a couple of guys sitting in a living room with laptops. (And jeans turn out not to be the last word in informality.)</p><p>随着时间的推移，团队变得更小、更快、更不拘形式。1960 年，软件开发意味着一屋子戴角质框眼镜、系黑色窄领带的人，每天在 IBM 编码表格上勤奋地写 10 行代码。1980 年，是 8 到 10 个人的团队，穿着牛仔裤上班，在 vt100 终端上打字。现在，是几个坐在客厅里、拿着笔记本电脑的人。（而且牛仔裤原来并不是不拘形式的极致。）</p><p>Startups are stressful, and this, unfortunately, is also taken to an extreme with Web-based applications. Many software companies, especially at the beginning, have periods where the developers slept under their desks and so on. The alarming thing about Web-based software is that there is nothing to prevent this becoming the default. The stories about sleeping under desks usually end: then at last we shipped it and we all went home and slept for a week. Web-based software never ships. You can work 16-hour days for as long as you want to. And because you can, and your competitors can, you tend to be forced to. You can, so you must. It’s Parkinson’s Law running in reverse.</p><p>初创公司压力很大，不幸的是，在基于 Web 的应用程序领域，这种压力也被推向了极端。许多软件公司，尤其是在初期，都有过开发人员睡在办公桌下之类的经历。基于 Web 的软件令人担忧的一点是，没有什么能阻止这种情况成为常态。那些睡在办公桌下的故事通常会有这样的结局：最后我们发布了产品，然后所有人回家睡了一个星期。但基于 Web 的软件永远不会 “发布”。你可以每天工作 16 小时，想多久就多久。而且因为你可以，你的竞争对手也可以，你往往就被迫这么做。你能做到，所以你必须做到。这是帕金森定律的反向运作。</p><p>The worst thing is not the hours but the responsibility. Programmers and system administrators traditionally each have their own separate worries. Programmers have to worry about bugs, and system administrators have to worry about infrastructure. Programmers may spend a long day up to their elbows in source code, but at some point they get to go home and forget about it. System administrators never quite leave the job behind, but when they do get paged at 4:00 AM, they don’t usually have to do anything very complicated. With Web-based applications, these two kinds of stress get combined. The programmers become system administrators, but without the sharply defined limits that ordinarily make the job bearable.</p><p>最糟糕的不是工作时长，而是责任。传统上，程序员和系统管理员各有各的烦恼。程序员要担心 bug，系统管理员要担心基础设施。程序员可能一整天都埋头于源代码，但到了某个时候，他们可以回家，把工作抛在脑后。系统管理员永远无法完全摆脱工作，但当他们在凌晨 4 点接到电话时，通常不需要做什么复杂的事情。而在基于 Web 的应用程序中，这两种压力结合在了一起。程序员变成了系统管理员，却没有了通常让这份工作可以忍受的明确界限。</p><p>At Viaweb we spent the first six months just writing software. We worked the usual long hours of an early startup. In a desktop software company, this would have been the part where we were working hard, but it felt like a vacation compared to the next phase, when we took users onto our server. The second biggest benefit of selling Viaweb to Yahoo (after the money) was to be able to dump ultimate responsibility for the whole thing onto the shoulders of a big company.</p><p>在 Viaweb，我们头六个月只做一件事：写软件。我们像早期初创公司一样，工作时长很长。在桌面软件公司，这可能已经是很辛苦的阶段了，但与下一阶段 —— 让用户使用我们的服务器 —— 相比，这感觉就像度假。把 Viaweb 卖给雅虎的第二大好处（仅次于钱），是能够把整件事的最终责任甩给一家大公司。</p><p>Desktop software forces users to become system administrators. Web-based software forces programmers to. There is less stress in total, but more for the programmers. That’s not necessarily bad news. If you’re a startup competing with a big company, it’s good news. [15] Web-based applications offer a straightforward way to outwork your competitors. No startup asks for more.</p><p>桌面软件迫使用户成为系统管理员。基于 Web 的软件迫使程序员成为系统管理员。总体压力可能更小，但程序员的压力更大。这未必是坏消息。如果你是一家与大公司竞争的初创公司，这就是好消息。[15] 基于 Web 的应用程序提供了一种直接的方式，可以比竞争对手更努力地工作。没有哪家初创公司会不想要这个优势。</p><h3 id="Just-Good-Enough"><a href="#Just-Good-Enough" class="headerlink" title="Just Good Enough"></a><strong>Just Good Enough</strong></h3><p><strong>过犹不及</strong></p><p>One thing that might deter you from writing Web-based applications is the lameness of Web pages as a UI. That is a problem, I admit. There were a few things we would have really liked to add to HTML and HTTP. What matters, though, is that Web pages are just good enough.</p><p>有一件事可能会阻碍你编写基于 Web 的应用程序，那就是网页作为用户界面（UI）的局限性。我承认这是个问题。我们确实想给 HTML 和 HTTP 添加一些功能。但重要的是，网页已经足够好了。</p><p>There is a parallel here with the first microcomputers. The processors in those machines weren’t actually intended to be the CPUs of computers. They were designed to be used in things like traffic lights. But guys like Ed Roberts, who designed the Altair, realized that they were just good enough. You could combine one of these chips with some memory (256 bytes in the first Altair), and front panel switches, and you’d have a working computer. Being able to have your own computer was so exciting that there were plenty of people who wanted to buy them, however limited.</p><p>这与早期的微型计算机有相似之处。那些机器里的处理器实际上并不是为计算机的 CPU 设计的。它们是为交通信号灯之类的东西设计的。但像设计 Altair 的埃德・罗伯茨这样的人意识到，这些处理器已经足够好了。你可以把这样的芯片与一些内存（第一台 Altair 有 256 字节）和前面板开关结合起来，就有了一台能工作的电脑。能拥有自己的电脑是一件非常令人兴奋的事，所以尽管功能有限，还是有很多人想买。</p><p>Web pages weren’t designed to be a UI for applications, but they’re just good enough. And for a significant number of users, software that you can use from any browser will be enough of a win in itself to outweigh any awkwardness in the UI. Maybe you can’t write the best-looking spreadsheet using HTML, but you can write a spreadsheet that several people can use simultaneously from different locations without special client software, or that can incorporate live data feeds, or that can page you when certain conditions are triggered. More importantly, you can write new kinds of applications that don’t even have names yet. VisiCalc was not merely a microcomputer version of a mainframe application, after all– it was a new type of application.</p><p>网页并不是为应用程序的用户界面设计的，但它们已经足够好了。而且对很多用户来说，能在任何浏览器上使用的软件本身就是一个足够大的优势，足以抵消用户界面上的任何不便。也许你不能用 HTML 写出最漂亮的电子表格，但你可以写出这样的电子表格：多个人可以在不同地点同时使用，不需要特殊的客户端软件；或者可以整合实时数据馈送；或者在特定条件触发时给你发提示。更重要的是，你可以编写全新类型的应用程序，它们甚至还没有名字。毕竟，VisiCalc 不仅仅是大型机应用程序的微型计算机版本 —— 它是一种新型应用程序。</p><p>Of course, server-based applications don’t have to be Web-based. You could have some other kind of client. But I’m pretty sure that’s a bad idea. It would be very convenient if you could assume that everyone would install your client– so convenient that you could easily convince yourself that they all would– but if they don’t, you’re hosed. Because Web-based software assumes nothing about the client, it will work anywhere the Web works. That’s a big advantage already, and the advantage will grow as new Web devices proliferate. Users will like you because your software just works, and your life will be easier because you won’t have to tweak it for every new client. [16]</p><p>当然，基于服务器的应用程序不一定非得是基于 Web 的。你可以有其他类型的客户端。但我很确定这是个坏主意。如果能假设每个人都会安装你的客户端，那会很方便 —— 方便到你很容易说服自己他们都会安装 —— 但如果他们不安装，你就完了。因为基于 Web 的软件对客户端没有任何假设，所以只要有 Web 的地方，它就能工作。这已经是一个很大的优势，而且随着新的 Web 设备激增，这个优势还会扩大。用户会喜欢你，因为你的软件 “就是能用”；你的日子也会更轻松，因为你不必为每个新客户端调整软件。[16]</p><p>I feel like I’ve watched the evolution of the Web as closely as anyone, and I can’t predict what’s going to happen with clients. Convergence is probably coming, but where? I can’t pick a winner. One thing I can predict is conflict between AOL and Microsoft. Whatever Microsoft’s .NET turns out to be, it will probably involve connecting the desktop to servers. Unless AOL fights back, they will either be pushed aside or turned into a pipe between Microsoft client and server software. If Microsoft and AOL get into a client war, the only thing sure to work on both will be browsing the Web, meaning Web-based applications will be the only kind that work everywhere.</p><p>我感觉自己像任何人一样密切关注着 Web 的发展，但我无法预测客户端会发生什么。融合可能正在到来，但会走向何方？我无法选出赢家。但有一件事我可以预测：美国在线（AOL）和微软之间会有冲突。无论微软的.NET 最终是什么样子，它很可能涉及将桌面与服务器连接起来。除非 AOL 反击，否则他们要么被排挤，要么变成微软客户端和服务器软件之间的管道。如果微软和 AOL 陷入客户端大战，唯一能在两者上都正常工作的就是 Web 浏览，这意味着基于 Web 的应用程序将是唯一能在所有地方运行的应用程序。</p><p>How will it all play out? I don’t know. And you don’t have to know if you bet on Web-based applications. No one can break that without breaking browsing. The Web may not be the only way to deliver software, but it’s one that works now and will continue to work for a long time. Web-based applications are cheap to develop, and easy for even the smallest startup to deliver. They’re a lot of work, and of a particularly stressful kind, but that only makes the odds better for startups.</p><p>这一切会如何发展？我不知道。但如果你押注于基于 Web 的应用程序，你就不必知道答案。没人能在不破坏浏览功能的情况下破坏它。Web 可能不是交付软件的唯一方式，但它是现在可行且将长期可行的方式。基于 Web 的应用程序开发成本低，即使是最小的初创公司也能轻松交付。它们需要大量工作，而且压力特别大，但这只会让初创公司的胜算更大。</p><h3 id="Why-Not"><a href="#Why-Not" class="headerlink" title="Why Not?"></a><strong>Why Not?</strong></h3><p><strong>为什么不呢？</strong></p><p>E. B. White was amused to learn from a farmer friend that many electrified fences don’t have any current running through them. The cows apparently learn to stay away from them, and after that you don’t need the current. “Rise up, cows!” he wrote, “Take your liberty while despots snore!”</p><p>E.B. 怀特从一个农民朋友那里得知，很多电围栏其实没有电流通过，这让他觉得很有趣。显然，奶牛们学会了远离围栏，之后就不需要电流了。“站起来，奶牛们！” 他写道，“趁暴君打鼾时，夺回你们的自由！”</p><p>If you’re a hacker who has thought of one day starting a startup, there are probably two things keeping you from doing it. One is that you don’t know anything about business. The other is that you’re afraid of competition. Neither of these fences have any current in them.</p><p>如果你是一个黑客，曾想过有一天创办一家初创公司，可能有两件事阻碍着你：一是你不懂商业，二是你害怕竞争。但这两道围栏都没有电流。</p><p>There are only two things you have to know about business: build something users love, and make more than you spend. If you get these two right, you’ll be ahead of most startups. You can figure out the rest as you go.</p><p>关于商业，你只需要知道两件事：做出用户喜欢的东西，以及收入大于支出。如果你做好了这两件事，你就已经领先于大多数初创公司了。其余的可以边做边学。</p><p>You may not at first make more than you spend, but as long as the gap is closing fast enough you’ll be ok. If you start out underfunded, it will at least encourage a habit of frugality. The less you spend, the easier it is to make more than you spend. Fortunately, it can be very cheap to launch a Web-based application. We launched on under $10,000, and it would be even cheaper today. We had to spend thousands on a server, and thousands more to get SSL. (The only company selling SSL software at the time was Netscape.) Now you can rent a much more powerful server, with SSL included, for less than we paid for bandwidth alone. You could launch a Web-based application now for less than the cost of a fancy office chair.</p><p>一开始，你可能收入不大于支出，但只要这个差距在快速缩小，你就没问题。如果创业初期资金不足，至少能养成节俭的习惯。你花得越少，就越容易实现收入大于支出。幸运的是，推出基于 Web 的应用程序成本很低。我们当时的启动资金不到 1 万美元，而现在成本会更低。我们当时花了几千美元买服务器，又花了几千美元买 SSL（当时唯一卖 SSL 软件的公司是网景）。现在，你可以租一台功能强大得多的服务器，还包含 SSL，费用比我们当时仅花在带宽上的钱还少。现在推出一个基于 Web 的应用程序，成本可能比一把高档办公椅还低。</p><p>As for building something users love, here are some general tips. Start by making something clean and simple that you would want to use yourself. Get a version 1.0 out fast, then continue to improve the software, listening closely to the users as you do. The customer is always right, but different customers are right about different things; the least sophisticated users show you what you need to simplify and clarify, and the most sophisticated tell you what features you need to add. The best thing software can be is easy, but the way to do this is to get the defaults right, not to limit users’ choices. Don’t get complacent if your competitors’ software is lame; the standard to compare your software to is what it could be, not what your current competitors happen to have. Use your software yourself, all the time. Viaweb was supposed to be an online store builder, but we used it to make our own site too. Don’t listen to marketing people or designers or product managers just because of their job titles. If they have good ideas, use them, but it’s up to you to decide; software has to be designed by hackers who understand design, not designers who know a little about software. If you can’t design software as well as implement it, don’t start a startup.</p><p>至于如何做出用户喜欢的东西，这里有一些通用建议。先做一个干净、简单、你自己也想用的东西。快速推出 1.0 版本，然后不断改进软件，同时密切倾听用户的意见。客户永远是对的，但不同的客户在不同的事情上是对的：最不懂行的用户会告诉你需要简化和澄清什么，最懂行的用户会告诉你需要添加什么功能。软件最好的状态是 “易用”，但做到这一点的方法是把默认设置做好，而不是限制用户的选择。如果竞争对手的软件很糟糕，不要自满；衡量你的软件的标准是它 “可能达到的样子”，而不是当前竞争对手的水平。自己要一直用自己的软件。Viaweb 本是一个在线商店搭建工具，但我们也用它来做自己的网站。不要仅仅因为头衔就听从营销人员、设计师或产品经理的话。如果他们有好主意，就采纳，但决定权在你；软件必须由懂设计的黑客来设计，而不是懂一点软件的设计师。如果你既不能设计软件，又不能实现软件，就不要创业。</p><p>Now let’s talk about competition. What you’re afraid of is not presumably groups of hackers like you, but actual companies, with offices and business plans and salesmen and so on, right? Well, they are more afraid of you than you are of them, and they’re right. It’s a lot easier for a couple of hackers to figure out how to rent office space or hire sales people than it is for a company of any size to get software written. I’ve been on both sides, and I know. When Viaweb was bought by Yahoo, I suddenly found myself working for a big company, and it was like trying to run through waist-deep water.</p><p>现在我们来谈谈竞争。你害怕的大概不是像你一样的黑客团队，而是有办公室、商业计划和销售人员的正规公司，对吧？但他们比你更害怕你，而且他们是对的。几个黑客弄明白如何租办公室或雇销售人员，要比任何规模的公司弄明白如何编写软件容易得多。我两边都经历过，我知道。当 Viaweb 被雅虎收购后，我突然发现自己在一家大公司工作，感觉就像在齐腰深的水里跑步。</p><p>I don’t mean to disparage Yahoo. They had some good hackers, and the top management were real butt-kickers. For a big company, they were exceptional. But they were still only about a tenth as productive as a small startup. No big company can do much better than that. What’s scary about Microsoft is that a company so big can develop software at all. They’re like a mountain that can walk.</p><p>我不是要贬低雅虎。他们有一些优秀的黑客，高层管理人员也很有魄力。作为一家大公司，他们已经很出色了。但他们的效率仍然只有小型初创公司的十分之一左右。没有哪家大公司能比这好多少。微软的可怕之处在于，这么大的公司竟然还能开发软件。他们就像一座会走路的山。</p><p>Don’t be intimidated. You can do as much that Microsoft can’t as they can do that you can’t. And no one can stop you. You don’t have to ask anyone’s permission to develop Web-based applications. You don’t have to do licensing deals, or get shelf space in retail stores, or grovel to have your application bundled with the OS. You can deliver software right to the browser, and no one can get between you and potential users without preventing them from browsing the Web.</p><p>不要被吓倒。你能做很多微软做不到的事，就像他们能做很多你做不到的事一样。而且没人能阻止你。开发基于 Web 的应用程序，你不需要征得任何人的许可。你不需要做许可交易，不需要在零售店争取货架空间，不需要卑躬屈膝地让你的应用程序与操作系统捆绑。你可以直接把软件交付到浏览器，没人能在不阻止用户浏览 Web 的情况下，挡在你和潜在用户之间。</p><p>You may not believe it, but I promise you, Microsoft is scared of you. The complacent middle managers may not be, but Bill is, because he was you once, back in 1975, the last time a new way of delivering software appeared.</p><p>你可能不信，但我向你保证，微软害怕你。自满的中层管理者可能不怕，但比尔（盖茨）怕，因为他曾经就是你，那是在 1975 年，上一次软件交付的新方式出现的时候。</p><p>Notes</p><p>[1] Realizing that much of the money is in the services, companies building lightweight clients have usually tried to combine the hardware with an online service. This approach has not worked well, partly because you need two different kinds of companies to build consumer electronics and to run an online service, and partly because users hate the idea. Giving away the razor and making money on the blades may work for Gillette, but a razor is much smaller commitment than a Web terminal. Cell phone handset makers are satisfied to sell hardware without trying to capture the service revenue as well. That should probably be the model for Internet clients too. If someone just sold a nice-looking little box with a Web browser that you could use to connect through any ISP, every technophobe in the country would buy one.</p><p>[1] 意识到大部分收益来自服务后，制造轻型客户端的公司通常试图将硬件与在线服务结合。但这种方式效果不佳，部分原因是制造消费电子产品和运营在线服务需要两类不同的公司，另一部分原因是用户讨厌这种模式。“赠送剃须刀，靠刀片赚钱” 对吉列可能有效，但剃须刀比网络终端的投入小得多。手机制造商满足于只卖硬件，不试图抢占服务收入 —— 这或许也该是互联网客户端的模式。如果有人推出一款外观漂亮、自带浏览器、可连接任何 ISP 的小盒子，全国的技术恐惧症患者都会买。</p><p>[2] Security always depends more on not screwing up than any design decision, but the nature of server-based software will make developers pay more attention to not screwing up. Compromising a server could cause such damage that ASPs (that want to stay in business) are likely to be careful about security.</p><p>[2] 安全更多取决于 “不犯错” 而非设计决策，但服务器软件的特性会让开发者更注重避免出错。入侵服务器可能造成巨大损失，因此（想继续经营的）ASP 很可能会重视安全。</p><p>[3] In 1995, when we started Viaweb, Java applets were supposed to be the technology everyone was going to use to develop server-based applications. Applets seemed to us an old-fashioned idea. Download programs to run on the client? Simpler just to go all the way and run the programs on the server. We wasted little time on applets, but countless other startups must have been lured into this tar pit. Few can have escaped alive, or Microsoft could not have gotten away with dropping Java in the most recent version of Explorer.</p><p>[3] 1995 年我们创办 Viaweb 时，Java 小程序本应是开发服务器应用的主流技术。但在我们看来，小程序是过时的想法 —— 下载程序到客户端运行？不如直接让程序在服务器上运行。我们没在小程序上浪费时间，但无数初创公司肯定被这个 “焦油坑” 诱惑，很少能全身而退，否则微软也不敢在最新版 IE 中弃用 Java。</p><p>[4] This point is due to Trevor Blackwell, who adds “the cost of writing software goes up more than linearly with its size. Perhaps this is mainly due to fixing old bugs, and the cost can be more linear if all bugs are found quickly.”</p><p>[4] 这一点来自特雷弗・布莱克韦尔，他补充道：“软件开发成本的增长远超其规模的线性增长。这可能主要源于修复旧 bug，而如果所有 bug 都能快速发现，成本可能更接近线性。”</p><p>[5] The hardest kind of bug to find may be a variant of compound bug where one bug happens to compensate for another. When you fix one bug, the other becomes visible. But it will seem as if the fix is at fault, since that was the last thing you changed.</p><p>[5] 最难找的 bug 可能是复合 bug 的变种：一个 bug 恰好抵消了另一个。修复其中一个后，另一个就会暴露，但看起来像是修复出了问题 —— 因为这是你最后修改的部分。</p><p>[6] Within Viaweb we once had a contest to describe the worst thing about our software. Two customer support people tied for first prize with entries I still shiver to recall. We fixed both problems immediately.</p><p>[6] 在 Viaweb 内部，我们曾举办过一场 “描述软件最烂之处” 的比赛。两位客服人员并列第一，他们的答案至今让我不寒而栗。我们立即修复了这两个问题。</p><p>[7] Robert Morris wrote the ordering system, which shoppers used to place orders. Trevor Blackwell wrote the image generator and the manager, which merchants used to retrieve orders, view statistics, and configure domain names etc. I wrote the editor, which merchants used to build their sites. The ordering system and image generator were written in C and C++, the manager mostly in Perl, and the editor in Lisp.</p><p>[7] 罗伯特・莫里斯编写了订单系统（购物者用于下单）；特雷弗・布莱克韦尔编写了图像生成器和管理工具（商家用于查看订单、统计数据、配置域名等）；我编写了编辑器（商家用于搭建网站）。订单系统和图像生成器用 C 和 C++ 编写，管理工具主要用 Perl，编辑器用 Lisp。</p><p>[8] Price discrimination is so pervasive (how often have you heard a retailer claim that their buying power meant lower prices for you?) that I was surprised to find it was outlawed in the U.S. by the Robinson-Patman Act of 1936. This law does not appear to be vigorously enforced.</p><p>[8] 价格歧视非常普遍（你多久会听到一次零售商宣称 “我们的采购能力能为你带来更低价格”？），但我惊讶地发现，美国 1936 年的《罗宾逊 - 帕特曼法案》将其定为非法 —— 不过这项法律似乎并未被严格执行。</p><p>[9] In No Logo, Naomi Klein says that clothing brands favored by “urban youth” do not try too hard to prevent shoplifting because in their target market the shoplifters are also the fashion leaders.</p><p>[9] 娜奥米・克莱因在《拒绝品牌》中提到，受 “城市青年” 青睐的服装品牌不会竭力阻止偷窃，因为在目标市场中，偷窃者也是时尚引领者。</p><p>[10] Companies often wonder what to outsource and what not to. One possible answer: outsource any job that’s not directly exposed to competitive pressure, because outsourcing it will thereby expose it to competitive pressure.</p><p>[10] 公司常纠结于哪些业务该外包、哪些不该。一个可能的答案是：外包所有不直接面临竞争压力的工作，因为外包能让它暴露在竞争压力下。</p><p>[11] The two guys were Dan Bricklin and Bob Frankston. Dan wrote a prototype in Basic in a couple days, then over the course of the next year they worked together (mostly at night) to make a more powerful version written in 6502 machine language. Dan was at Harvard Business School at the time and Bob nominally had a day job writing software. “There was no great risk in doing a business,” Bob wrote, “If it failed it failed. No big deal.”</p><p>[11] 那两个人是丹・布里克林和鲍勃・弗兰克斯坦。丹用 Basic 在几天内写出原型，随后一年里，他们（主要在夜间）合作开发了更强大的版本，用 6502 机器语言编写。当时丹在哈佛商学院，鲍勃名义上有份编写软件的正职。“创业没什么大风险，” 鲍勃写道，“失败了就失败了，没什么大不了。”</p><p>[12] It’s not quite as easy as I make it sound. It took a painfully long time for word of mouth to get going, and we did not start to get a lot of press coverage until we hired a PR firm (admittedly the best in the business) for $16,000 per month. However, it was true that the only significant channel was our own Web site.</p><p>[12] 事情没我说的那么容易。口碑传播花了长得令人痛苦的时间，直到我们以每月 1.6 万美元聘请了一家公关公司（诚然是业内最好的），才开始获得大量媒体报道。但确实，唯一重要的渠道是我们自己的网站。</p><p>[13] If the Mac was so great, why did it lose? Cost, again. Microsoft concentrated on the software business, and unleashed a swarm of cheap component suppliers on Apple hardware. It did not help, either, that suits took over during a critical period.</p><p>[13] 既然 Mac 这么好，为什么会失败？还是因为成本。微软专注于软件业务，放任大量廉价组件供应商冲击苹果硬件。关键时期被管理人员接管，也没起到帮助。</p><p>[14] One thing that would help Web-based applications, and help keep the next generation of software from being overshadowed by Microsoft, would be a good open-source browser. Mozilla is open-source but seems to have suffered from having been corporate software for so long. A small, fast browser that was actively maintained would be a great thing in itself, and would probably also encourage companies to build little Web appliances.</p><p>[14] 一款优秀的开源浏览器既能助力 Web 应用，又能防止下一代软件被微软压制。Mozilla 是开源的，但似乎因长期作为企业软件而受损。一款小型、快速、持续维护的浏览器本身就是好事，或许还能鼓励企业制造小型网络设备。</p><p>Among other things, a proper open-source browser would cause HTTP and HTML to continue to evolve (as e.g. Perl has). It would help Web-based applications greatly to be able to distinguish between selecting a link and following it; all you’d need to do this would be a trivial enhancement of HTTP, to allow multiple urls in a request. Cascading menus would also be good.</p><p>此外，合适的开源浏览器会推动 HTTP 和 HTML 持续进化（如 Perl）。若能区分 “选中链接” 和 “跟随链接”，对 Web 应用会大有帮助 —— 只需对 HTTP 做个小改进，允许请求中包含多个 URL。级联菜单也会很有用。</p><p>If you want to change the world, write a new Mosaic. Think it’s too late? In 1998 a lot of people thought it was too late to launch a new search engine, but Google proved them wrong. There is always room for something new if the current options suck enough. Make sure it works on all the free OSes first– new things start with their users.</p><p>想改变世界？那就写一个新的 Mosaic。觉得太晚了？1998 年很多人认为推出新搜索引擎太晚，但谷歌证明他们错了。如果现有选项足够糟糕，新事物总有空间。先确保它能在所有免费操作系统上运行 —— 新事物从用户开始。</p><p>[15] Trevor Blackwell, who probably knows more about this from personal experience than anyone, writes:</p><p>[15] 特雷弗・布莱克韦尔的个人经历或许让他对此理解最深，他写道：</p><p>“I would go farther in saying that because server-based software is so hard on the programmers, it causes a fundamental economic shift away from large companies. It requires the kind of intensity and dedication from programmers that they will only be willing to provide when it’s their own company. Software companies can hire skilled people to work in a not-too-demanding environment, and can hire unskilled people to endure hardships, but they can’t hire highly skilled people to bust their asses. Since capital is no longer needed, big companies have little to bring to the table.”</p><p>“我想进一步说，由于服务器软件对程序员要求极高，它会引发根本的经济变革，远离大公司。它需要程序员付出的专注和投入，只有在是自己的公司时，他们才愿意提供。软件公司能雇到技能型人才在不苛刻的环境中工作，也能雇到非技能型人才忍受艰苦，但雇不到高技能人才拼命干。既然不再需要资本，大公司就没什么可贡献的了。”</p><p>[16] In the original version of this essay, I advised avoiding Javascript. That was a good plan in 2001, but Javascript now works.</p><p>[16] 本文初稿中，我建议避免使用 Javascript。2001 年这是个好建议，但现在 Javascript 已经好用了。</p><p>Thanks to Sarah Harlin, Trevor Blackwell, Robert Morris, Eric Raymond, Ken Anderson, and Dan Giffin for reading drafts of this paper; to Dan Bricklin and Bob Frankston for information about VisiCalc; and again to Ken Anderson for inviting me to speak at BBN.</p><p>感谢萨拉・哈林、特雷弗・布莱克韦尔、罗伯特・莫里斯、埃里克・雷蒙德、肯・安德森和丹・吉芬阅读本文草稿；感谢丹・布里克林和鲍勃・弗兰克斯坦提供关于 VisiCalc 的信息；再次感谢肯・安德森邀请我在 BBN 演讲。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程语言的流行之道</title>
    <link href="/2025/08/13/being-popular/"/>
    <url>/2025/08/13/being-popular/</url>
    
    <content type="html"><![CDATA[<h2 id="Being-Popular"><a href="#Being-Popular" class="headerlink" title="Being Popular"></a>Being Popular</h2><p>May 2001</p><p>(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)</p><p>（本文最初是作为一种新语言的 “商业计划” 撰写的。因此，它忽略了（或想当然地认为）优秀编程语言最重要的特性：强大的抽象能力。）</p><p>A friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time, that programming languages don’t become popular or unpopular based on their merits, and so no matter how good his language was, no one would use it. At least, that was what had happened to the language he had designed.</p><p>我有个朋友曾跟一位著名的操作系统专家说，他想设计一种真正优秀的编程语言。专家告诉他这是浪费时间 —— 编程语言的流行与否并不取决于其本身的优劣，所以无论他的语言多好，都不会有人用。至少，专家自己设计的语言就遭遇了这种命运。</p><p>What does make a language popular? Do popular languages deserve their popularity? Is it worth trying to define a good programming language? How would you do it?</p><p>那么，究竟是什么让一种语言流行起来？流行的语言真的配得上它们的热度吗？费心设计一种好语言值得吗？又该如何设计呢？</p><p>I think the answers to these questions can be found by looking at hackers, and learning what they want. Programming languages are for hackers, and a programming language is good as a programming language (rather than, say, an exercise in denotational semantics or compiler design) if and only if hackers like it.</p><p>我认为，答案可以从 “黑客”（优秀程序员）身上找到 —— 关键是弄清楚他们想要什么。编程语言是为黑客服务的，一种编程语言之所以优秀（而非仅仅是符号语义或编译器设计的练习），<strong>当且仅当黑客喜欢它</strong>。</p><h3 id="1-The-Mechanics-of-Popularity"><a href="#1-The-Mechanics-of-Popularity" class="headerlink" title="1 The Mechanics of Popularity"></a><strong>1 The Mechanics of Popularity</strong></h3><p><strong>1 流行的机制</strong></p><p>It’s true, certainly, that most people don’t choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. And yet I think the effect of such external factors on the popularity of programming languages is not as great as it’s sometimes thought to be. I think a bigger problem is that a hacker’s idea of a good programming language is not the same as most language designers’.</p><p>诚然，大多数人选择编程语言并非单纯看其本身的优点。多数程序员是听别人的指令选择语言的。但我认为，这种外部因素对编程语言流行度的影响，并没有人们想象中那么大。更大的问题在于：黑客对 “好语言” 的定义，与多数语言设计者的理解根本不同。</p><p>Between the two, the hacker’s opinion is the one that matters. Programming languages are not theorems. They’re tools, designed for people, and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. If a shoe pinches when you put it on, it’s a bad shoe, however elegant it may be as a piece of sculpture.</p><p>两者中，黑客的观点才是关键。编程语言不是定理，而是为人设计的工具 —— 它们必须适配人类的优缺点，就像鞋子必须适配人类的脚一样。如果一只鞋穿上就夹脚，哪怕它作为雕塑再精致，也是一只烂鞋</p><p>It may be that the majority of programmers can’t tell a good language from a bad one. But that’s no different with any other tool. It doesn’t mean that it’s a waste of time to try designing a good language. Expert hackers can tell a good language when they see one, and they’ll use it. Expert hackers are a tiny minority, admittedly, but that tiny minority write all the good software, and their influence is such that the rest of the programmers will tend to use whatever language they use. Often, indeed, it is not merely influence but command: often the expert hackers are the very people who, as their bosses or faculty advisors, tell the other programmers what language to use.</p><p>或许多数程序员分不清语言的好坏，但这在任何工具上都一样。这并不意味着设计好语言是浪费时间。顶尖黑客一眼就能识别好语言，而且会主动使用它。诚然，顶尖黑客只是极少数，但正是这极少数人写出了所有优秀软件，他们的影响力足以让其他程序员跟风使用他们选择的语言。事实上，这往往不止是影响力，更是 “命令”：顶尖黑客常常是老板或导师，直接告诉其他程序员该用什么语言。</p><p>The opinion of expert hackers is not the only force that determines the relative popularity of programming languages — legacy software (Cobol) and hype (Ada, Java) also play a role — but I think it is the most powerful force over the long term. Given an initial critical mass and enough time, a programming language probably becomes about as popular as it deserves to be. And popularity further separates good languages from bad ones, because feedback from real live users always leads to improvements. Look at how much any popular language has changed during its life. Perl and Fortran are extreme cases, but even Lisp has changed a lot. Lisp 1.5 didn’t have macros, for example; these evolved later, after hackers at MIT had spent a couple years using Lisp to write real programs. [1]</p><p>顶尖黑客的看法并非决定编程语言流行度的唯一因素 —— 遗留软件（如 Cobol）和炒作（如 Ada、Java）也有影响 —— 但长期来看，它是最强大的力量。只要有初始的 “临界规模” 和足够的时间，一种编程语言的流行度大致会与其 “应得的” 相匹配。而流行度会进一步拉开好语言与坏语言的差距：真实用户的反馈总能推动语言改进。看看任何流行语言在其生命周期中的变化就知道了。Perl 和 Fortran 是极端例子，但即便是 Lisp 也变了很多 —— 比如 Lisp 1.5 原本没有宏，是麻省理工的黑客用它写了几年实际程序后，才逐步演化出来的。[1]</p><p>So whether or not a language has to be good to be popular, I think a language has to be popular to be good. And it has to stay popular to stay good. The state of the art in programming languages doesn’t stand still. And yet the Lisps we have today are still pretty much what they had at MIT in the mid-1980s, because that’s the last time Lisp had a sufficiently large and demanding user base.</p><p>所以，无论 “优秀” 是不是 “流行” 的前提，我认为 “流行” 是 “优秀” 的前提 —— 而且语言必须保持流行才能保持优秀。编程语言的技术水平不会停滞不前。但如今的 Lisp 几乎还停留在 20 世纪 80 年代中期麻省理工的水平，因为那是 Lisp 最后一次拥有足够庞大且高要求的用户群体。</p><p>Of course, hackers have to know about a language before they can use it. How are they to hear? From other hackers. But there has to be some initial group of hackers using the language for others even to hear about it. I wonder how large this group has to be; how many users make a critical mass? Off the top of my head, I’d say twenty. If a language had twenty separate users, meaning twenty users who decided on their own to use it, I’d consider it to be real.</p><p>当然，黑客得先知道一种语言，才可能用它。他们怎么知道呢？从其他黑客那里。但必须有一群初始用户先用起来，别人才可能听说它。我好奇这个 “临界规模” 需要多大 —— 多少用户才算足够？凭直觉说，20 个吧。如果一种语言有 20 个独立用户（即 20 个主动选择使用它的人），我就认为它 “站稳脚跟” 了。</p><p>Getting there can’t be easy. I would not be surprised if it is harder to get from zero to twenty than from twenty to a thousand. The best way to get those initial twenty users is probably to use a trojan horse: to give people an application they want, which happens to be written in the new language.</p><p>达到这个数字并不容易。从 0 到 20，可能比从 20 到 1000 更难。获取初始 20 个用户的最佳方式或许是 “特洛伊木马” 策略：给人们一个他们想要的应用，而这个应用恰好是用新语言写的。</p><h3 id="2-External-Factors"><a href="#2-External-Factors" class="headerlink" title="2 External Factors"></a><strong>2 External Factors</strong></h3><p><strong>2 外部因素</strong></p><p>Let’s start by acknowledging one external factor that does affect the popularity of a programming language. To become popular, a programming language has to be the scripting language of a popular system. Fortran and Cobol were the scripting languages of early IBM mainframes. C was the scripting language of Unix, and so, later, was Perl. Tcl is the scripting language of Tk. Java and Javascript are intended to be the scripting languages of web browsers.]</p><p>首先要承认，有一个外部因素确实影响编程语言的流行度：要流行，它必须是某个流行系统的 “脚本语言”。Fortran 和 Cobol 是早期 IBM 大型机的脚本语言；C（后来还有 Perl）是 Unix 的脚本语言；Tcl 是 Tk 的脚本语言；Java 和 Javascript 则是为网页浏览器设计的脚本语言。</p><p>Lisp is not a massively popular language because it is not the scripting language of a massively popular system. What popularity it retains dates back to the 1960s and 1970s, when it was the scripting language of MIT. A lot of the great programmers of the day were associated with MIT at some point. And in the early 1970s, before C, MIT’s dialect of Lisp, called MacLisp, was one of the only programming languages a serious hacker would want to use.</p><p>Lisp 之所以不火，就是因为它不是某个主流系统的脚本语言。它仅存的热度可以追溯到 20 世纪 60-70 年代 —— 当时它是麻省理工的 “脚本语言”。那个年代许多顶尖程序员都与麻省理工有关联，而在 20 世纪 70 年代初 C 语言出现之前，麻省理工的 Lisp 方言（MacLisp）是顶尖黑客唯一愿意用的语言之一。</p><p>Today Lisp is the scripting language of two moderately popular systems, Emacs and Autocad, and for that reason I suspect that most of the Lisp programming done today is done in Emacs Lisp or AutoLisp.</p><p>如今，Lisp 是两个中等流行系统（Emacs 和 Autocad）的脚本语言，因此我猜测，现在多数 Lisp 编程都是用 Emacs Lisp 或 AutoLisp 完成的。</p><p>Programming languages don’t exist in isolation. To hack is a transitive verb — hackers are usually hacking something — and in practice languages are judged relative to whatever they’re used to hack. So if you want to design a popular language, you either have to supply more than a language, or you have to design your language to replace the scripting language of some existing system.</p><p>编程语言并非孤立存在。“编程” 是个及物动词 —— 黑客通常在 “编” 某个东西 —— 而实际上，语言的评价总是与其所编写的对象相关。所以，若想设计一种流行语言，要么你得提供的不只是语言本身，要么就得让它能替代某个现有系统的脚本语言。</p><p>Common Lisp is unpopular partly because it’s an orphan. It did originally come with a system to hack: the Lisp Machine. But Lisp Machines (along with parallel computers) were steamrollered by the increasing power of general purpose processors in the 1980s. Common Lisp might have remained popular if it had been a good scripting language for Unix. It is, alas, an atrociously bad one.</p><p>Common Lisp 之所以冷门，部分原因是它 “无家可归”。它最初确实有对应的系统：Lisp 机器。但 20 世纪 80 年代，随着通用处理器性能飙升，Lisp 机器（和并行计算机）被碾压了。如果 Common Lisp 能成为 Unix 的优秀脚本语言，或许还能保持流行 —— 可惜，它在这方面烂得离谱。</p><p>One way to describe this situation is to say that a language isn’t judged on its own merits. Another view is that a programming language really isn’t a programming language unless it’s also the scripting language of something. This only seems unfair if it comes as a surprise. I think it’s no more unfair than expecting a programming language to have, say, an implementation. It’s just part of what a programming language is.</p><p>这种情况可以理解为：语言的评价并非基于自身优点。但换个角度看，一种编程语言若不能成为某个系统的脚本语言，或许就不算真正的编程语言。这听起来不公平，但若接受它，就会发现这并不比 “编程语言需要实现” 更苛刻 —— 这只是编程语言的固有属性之一。</p><p>A programming language does need a good implementation, of course, and this must be free. Companies will pay for software, but individual hackers won’t, and it’s the hackers you need to attract.</p><p>当然，编程语言需要优秀的实现，而且必须免费。公司会为软件付费，但个体黑客不会 —— 而你需要吸引的正是黑客。</p><p>A language also needs to have a book about it. The book should be thin, well-written, and full of good examples. K&amp;R is the ideal here. At the moment I’d almost say that a language has to have a book published by O’Reilly. That’s becoming the test of mattering to hackers.</p><p>语言还需要一本相关的书。这本书得薄、写得好、充满好例子。《C 程序设计语言》（K&amp;R）就是典范。如今我甚至想说，一种语言必须有 O’Reilly 出版的书 —— 这几乎成了 “被黑客认可” 的试金石。</p><p>There should be online documentation as well. In fact, the book can start as online documentation. But I don’t think that physical books are outmoded yet. Their format is convenient, and the de facto censorship imposed by publishers is a useful if imperfect filter. Bookstores are one of the most important places for learning about new languages.</p><p>在线文档也得有。事实上，书籍最初可以是在线文档，但实体书还没过时：它们的格式方便，出版商的 “隐性审查” 虽然不完美，却是个有用的筛选机制。书店是了解新语言的重要场所之一。</p><h3 id="3-Brevity"><a href="#3-Brevity" class="headerlink" title="3 Brevity"></a><strong>3 Brevity</strong></h3><p><strong>3 简洁性</strong></p><p>Given that you can supply the three things any language needs — a free implementation, a book, and something to hack — how do you make a language that hackers will like?</p><p>假设你已经提供了语言所需的三样东西 —— 免费实现、书籍、可编写的对象 —— 那么如何让黑客喜欢它？</p><p>One thing hackers like is brevity. Hackers are lazy, in the same way that mathematicians and modernist architects are lazy: they hate anything extraneous. It would not be far from the truth to say that a hacker about to write a program decides what language to use, at least subconsciously, based on the total number of characters he’ll have to type. If this isn’t precisely how hackers think, a language designer would do well to act as if it were.</p><p>黑客喜欢的一点是<strong>简洁</strong>。黑客的 “懒”，就像数学家和现代主义建筑师的 “懒”：他们讨厌任何多余的东西。说 “黑客选择语言时（至少潜意识里）会算自己要敲多少个字符”，也不算太夸张。就算黑客不是真这么想，语言设计者按这个逻辑做也没错。</p><p>It is a mistake to try to baby the user with long-winded expressions that are meant to resemble English. Cobol is notorious for this flaw. A hacker would consider being asked to write</p><p>add x to y giving z</p><p>instead of</p><p>z &#x3D; x+y</p><p>as something between an insult to his intelligence and a sin against God.</p><p>试图用冗长的、类似英语的表达 “迁就” 用户，是个错误。Cobol 就因这个缺陷臭名昭著。黑客会觉得，让他们写<code>add x to y giving z</code>而非<code>z = x+y</code>，简直是对智商的侮辱，甚至是对上帝的亵渎。</p><p>It has sometimes been said that Lisp should use first and rest instead of car and cdr, because it would make programs easier to read. Maybe for the first couple hours. But a hacker can learn quickly enough that car means the first element of a list and cdr means the rest. Using first and rest means 50% more typing. And they are also different lengths, meaning that the arguments won’t line up when they’re called, as car and cdr often are, in successive lines. I’ve found that it matters a lot how code lines up on the page. I can barely read Lisp code when it is set in a variable-width font, and friends say this is true for other languages too.</p><p>有人说 Lisp 应该用<code>first</code>和<code>rest</code>替代<code>car</code>和<code>cdr</code>，这样程序更易读。或许前几个小时是这样，但黑客很快就会记住<code>car</code>指列表的第一个元素、<code>cdr</code>指剩余部分。用<code>first</code>和<code>rest</code>意味着多敲 50% 的字符，而且两者长度不同 —— 当它们在连续行中出现时，参数都对不齐。我发现代码在页面上的排版非常重要：用变宽字体显示的 Lisp 代码，我几乎读不下去，朋友说其他语言也是如此。</p><p>Brevity is one place where strongly typed languages lose. All other things being equal, no one wants to begin a program with a bunch of declarations. Anything that can be implicit, should be.</p><p>强类型语言在简洁性上吃亏。其他条件相同时，没人想在程序开头写一堆声明。任何能隐含的信息，都该隐含。</p><p>The individual tokens should be short as well. Perl and Common Lisp occupy opposite poles on this question. Perl programs can be almost cryptically dense, while the names of built-in Common Lisp operators are comically long. The designers of Common Lisp probably expected users to have text editors that would type these long names for them. But the cost of a long name is not just the cost of typing it. There is also the cost of reading it, and the cost of the space it takes up on your screen.</p><p>单个符号也该短。Perl 和 Common Lisp 在这方面是两个极端：Perl 程序密得像密码，而 Common Lisp 的内置操作符名字长得可笑。Common Lisp 的设计者可能以为用户会用文本编辑器自动输入这些长名字，但长名字的成本不止是输入 —— 还有阅读成本和屏幕空间占用成本。</p><h3 id="4-Hackability"><a href="#4-Hackability" class="headerlink" title="4 Hackability"></a><strong>4 Hackability</strong></h3><p><strong>4 可操作性</strong></p><p>There is one thing more important than brevity to a hacker: being able to do what you want. In the history of programming languages a surprising amount of effort has gone into preventing programmers from doing things considered to be improper. This is a dangerously presumptuous plan. How can the language designer know what the programmer is going to need to do? I think language designers would do better to consider their target user to be a genius who will need to do things they never anticipated, rather than a bumbler who needs to be protected from himself. The bumbler will shoot himself in the foot anyway. You may save him from referring to variables in another package, but you can’t save him from writing a badly designed program to solve the wrong problem, and taking forever to do it.</p><p>对黑客来说，有一样东西比简洁更重要：<strong>能做自己想做的事</strong>。编程语言史上，太多精力浪费在 “阻止程序员做被认为不恰当的事” 上。这是个危险的自负计划 —— 语言设计者怎么可能知道程序员需要做什么？我认为，设计者更该假设目标用户是 “需要做你从未预料之事的天才”，而非 “需要被保护的笨蛋”。笨蛋总会搬起石头砸自己的脚：你或许能阻止他引用其他包的变量，却阻止不了他用糟糕的设计解决错误的问题，还浪费大量时间。</p><p>Good programmers often want to do dangerous and unsavory things. By unsavory I mean things that go behind whatever semantic facade the language is trying to present: getting hold of the internal representation of some high-level abstraction, for example. Hackers like to hack, and hacking means getting inside things and second guessing the original designer.</p><p>优秀程序员常常想做 “危险” 或 “不体面” 的事。“不体面” 指绕过语言试图呈现的语义伪装 —— 比如获取某个高层抽象的内部表示。黑客就喜欢 “折腾”，而折腾意味着深入内部、质疑最初的设计。</p><p>Let yourself be second guessed. When you make any tool, people use it in ways you didn’t intend, and this is especially true of a highly articulated tool like a programming language. Many a hacker will want to tweak your semantic model in a way that you never imagined. I say, let them; give the programmer access to as much internal stuff as you can without endangering runtime systems like the garbage collector.</p><p>允许他们质疑你。任何工具都会被用在设计者未预料的地方，编程语言这种高度灵活的工具更是如此。许多黑客会想以你从未想过的方式调整你的语义模型 —— 我说，让他们做吧。在不危及垃圾回收等运行时系统的前提下，尽可能让程序员接触内部机制。</p><p>In Common Lisp I have often wanted to iterate through the fields of a struct — to comb out references to a deleted object, for example, or find fields that are uninitialized. I know the structs are just vectors underneath. And yet I can’t write a general purpose function that I can call on any struct. I can only access the fields by name, because that’s what a struct is supposed to mean.</p><p>在 Common Lisp 中，我常想遍历结构体的字段 —— 比如梳理已删除对象的引用，或查找未初始化的字段。我知道结构体本质上是向量，但就是写不出一个能作用于任何结构体的通用函数。我只能通过字段名访问，因为 “结构体就该是这样”。</p><p>A hacker may only want to subvert the intended model of things once or twice in a big program. But what a difference it makes to be able to. And it may be more than a question of just solving a problem. There is a kind of pleasure here too. Hackers share the surgeon’s secret pleasure in poking about in gross innards, the teenager’s secret pleasure in popping zits. [2] For boys, at least, certain kinds of horrors are fascinating. Maxim magazine publishes an annual volume of photographs, containing a mix of pin-ups and grisly accidents. They know their audience.</p><p>黑客可能在一个大程序中只需要颠覆一次语义模型，但 “能做到” 的意义重大。这甚至不止是解决问题 —— 其中还有一种乐趣。黑客和外科医生一样，喜欢在 “ gross innards” 里摸索；和青少年一样，喜欢挤痘痘。[2] 至少对男性来说，某些 “恶心” 的东西很有吸引力。《Maxim》杂志每年会出一本照片集，混合了美女和恐怖事故 —— 他们太懂受众了。</p><p>Historically, Lisp has been good at letting hackers have their way. The political correctness of Common Lisp is an aberration. Early Lisps let you get your hands on everything. A good deal of that spirit is, fortunately, preserved in macros. What a wonderful thing, to be able to make arbitrary transformations on the source code.</p><p>历史上，Lisp 很擅长让黑客为所欲为。Common Lisp 的 “政治正确” 是个例外。早期 Lisp 让你能接触一切，幸运的是，这种精神在宏中保留了不少。能对源代码做任意转换，多美妙啊。</p><p>Classic macros are a real hacker’s tool — simple, powerful, and dangerous. It’s so easy to understand what they do: you call a function on the macro’s arguments, and whatever it returns gets inserted in place of the macro call. Hygienic macros embody the opposite principle. They try to protect you from understanding what they’re doing. I have never heard hygienic macros explained in one sentence. And they are a classic example of the dangers of deciding what programmers are allowed to want. Hygienic macros are intended to protect me from variable capture, among other things, but variable capture is exactly what I want in some macros.</p><p>经典宏是黑客的真正工具 —— 简单、强大、危险。其原理一目了然：用函数处理宏的参数，返回值直接替换宏调用。而 “卫生宏” 则相反，它们试图阻止你理解其原理。我从没听过有人能用一句话解释卫生宏。它们是 “替程序员决定需求” 的典型反面教材：卫生宏想保护我免受变量捕获的影响，但有时我就需要变量捕获。</p><p>A really good language should be both clean and dirty: cleanly designed, with a small core of well understood and highly orthogonal operators, but dirty in the sense that it lets hackers have their way with it. C is like this. So were the early Lisps. A real hacker’s language will always have a slightly raffish character.</p><p>真正的好语言应该既 “干净” 又 “肮脏”：设计干净，核心是少量易懂且高度正交的操作符；但 “肮脏” 在于允许黑客折腾。C 是这样，早期 Lisp 也是这样。真正的黑客语言总会带点 “痞气”。</p><p>A good programming language should have features that make the kind of people who use the phrase “software engineering” shake their heads disapprovingly. At the other end of the continuum are languages like Ada and Pascal, models of propriety that are good for teaching and not much else.</p><p>优秀编程语言的特性，应该能让那些张口闭口 “软件工程” 的人摇头反对。而另一端是 Ada、Pascal 这类 “得体” 的语言 —— 适合教学，仅此而已。</p><h3 id="5-Throwaway-Programs"><a href="#5-Throwaway-Programs" class="headerlink" title="5 Throwaway Programs"></a><strong>5 Throwaway Programs</strong></h3><p><strong>5 一次性程序</strong></p><p>To be attractive to hackers, a language must be good for writing the kinds of programs they want to write. And that means, perhaps surprisingly, that it has to be good for writing throwaway programs.</p><p>要吸引黑客，语言必须擅长写他们想写的程序 —— 而这意味着，它得擅长写 “一次性程序”，这可能有点出人意料。</p><p>A throwaway program is a program you write quickly for some limited task: a program to automate some system administration task, or generate test data for a simulation, or convert data from one format to another. The surprising thing about throwaway programs is that, like the “temporary” buildings built at so many American universities during World War II, they often don’t get thrown away. Many evolve into real programs, with real features and real users.</p><p>一次性程序是为特定任务快速写的程序：比如自动化系统管理、生成模拟测试数据、转换数据格式等。有趣的是，就像二战期间美国大学的 “临时” 建筑，许多一次性程序最后并没有被扔掉，而是演变成有实际功能和用户的正式程序。</p><p>I have a hunch that the best big programs begin life this way, rather than being designed big from the start, like the Hoover Dam. It’s terrifying to build something big from scratch. When people take on a project that’s too big, they become overwhelmed. The project either gets bogged down, or the result is sterile and wooden: a shopping mall rather than a real downtown, Brasilia rather than Rome, Ada rather than C.</p><p>我有种直觉：优秀的大型程序往往是这样诞生的，而非像胡佛水坝那样从一开始就按 “大型” 设计。从零开始做大型项目太可怕了，人们会被压垮 —— 要么停滞不前，要么做出僵化刻板的结果：像购物中心而非真正的市中心，像巴西利亚而非罗马，像 Ada 而非 C。</p><p>Another way to get a big program is to start with a throwaway program and keep improving it. This approach is less daunting, and the design of the program benefits from evolution. I think, if one looked, that this would turn out to be the way most big programs were developed. And those that did evolve this way are probably still written in whatever language they were first written in, because it’s rare for a program to be ported, except for political reasons. And so, paradoxically, if you want to make a language that is used for big systems, you have to make it good for writing throwaway programs, because that’s where big systems come from.</p><p>另一种做出大型程序的方式是：从一次性程序开始，不断改进。这种方式没那么吓人，程序设计也能从演化中受益。我猜，多数大型程序都是这么来的。而且，除非出于政治原因，这些程序通常会一直用最初的语言编写。所以矛盾的是，若想让语言被用于大型系统，就得让它擅长写一次性程序 —— 因为大型系统就从这里来。</p><p>Perl is a striking example of this idea. It was not only designed for writing throwaway programs, but was pretty much a throwaway program itself. Perl began life as a collection of utilities for generating reports, and only evolved into a programming language as the throwaway programs people wrote in it grew larger. It was not until Perl 5 (if then) that the language was suitable for writing serious programs, and yet it was already massively popular.</p><p>Perl 就是个鲜明例子。它不仅是为一次性程序设计的，甚至本身就像个一次性程序。Perl 最初是一堆生成报告的工具，后来随着人们用它写的一次性程序变大，才演变成编程语言。直到 Perl 5（甚至更晚），它才适合写严肃程序，但那时它已经很火了。</p><p>What makes a language good for throwaway programs? To start with, it must be readily available. A throwaway program is something that you expect to write in an hour. So the language probably must already be installed on the computer you’re using. It can’t be something you have to install before you use it. It has to be there. C was there because it came with the operating system. Perl was there because it was originally a tool for system administrators, and yours had already installed it.</p><p>什么让语言适合写一次性程序？首先，它必须 “触手可及”。一次性程序通常期望一小时内写完，所以它得预装在你用的电脑上 —— 不能是那种需要先安装才能用的。C 能普及，因为它随操作系统预装；Perl 能普及，因为它最初是系统管理员的工具，管理员已经装好了。</p><p>Being available means more than being installed, though. An interactive language, with a command-line interface, is more available than one that you have to compile and run separately. A popular programming language should be interactive, and start up fast.</p><p>“触手可及” 不止是预装。带命令行界面的交互式语言，比需要单独编译运行的语言更方便。流行的编程语言应该是交互式的，且启动快。</p><p>Another thing you want in a throwaway program is brevity. Brevity is always attractive to hackers, and never more so than in a program they expect to turn out in an hour.</p><p>一次性程序还需要简洁。简洁对黑客总是有吸引力，在一小时就要写完的程序中更是如此。</p><h3 id="6-Libraries"><a href="#6-Libraries" class="headerlink" title="6 Libraries"></a><strong>6 Libraries</strong></h3><p><strong>6 库</strong></p><p>Of course the ultimate in brevity is to have the program already written for you, and merely to call it. And this brings us to what I think will be an increasingly important feature of programming languages: library functions. Perl wins because it has large libraries for manipulating strings. This class of library functions are especially important for throwaway programs, which are often originally written for converting or extracting data. Many Perl programs probably begin as just a couple library calls stuck together.</p><p>当然，最极致的简洁是 “程序已经写好了，你只需调用”—— 这就涉及到我认为未来编程语言越来越重要的特性：<strong>库函数</strong>。Perl 之所以成功，是因为它有强大的字符串处理库。这类库对一次性程序尤其重要，因为它们常用来转换或提取数据。许多 Perl 程序可能一开始就是几个库调用拼起来的。</p><p>I think a lot of the advances that happen in programming languages in the next fifty years will have to do with library functions. I think future programming languages will have libraries that are as carefully designed as the core language. Programming language design will not be about whether to make your language strongly or weakly typed, or object oriented, or functional, or whatever, but about how to design great libraries. The kind of language designers who like to think about how to design type systems may shudder at this. It’s almost like writing applications! Too bad. Languages are for programmers, and libraries are what programmers need.</p><p>我觉得未来 50 年，编程语言的进步会更多体现在库函数上。未来的编程语言，其库会和核心语言一样精心设计。语言设计不再是纠结 “强类型还是弱类型”“面向对象还是函数式”，而是如何设计优秀的库。那些喜欢琢磨类型系统的设计者可能会对此不屑 —— 这简直像在写应用！但没办法：语言是给程序员用的，而程序员需要的是库。</p><p>It’s hard to design good libraries. It’s not simply a matter of writing a lot of code. Once the libraries get too big, it can sometimes take longer to find the function you need than to write the code yourself. Libraries need to be designed using a small set of orthogonal operators, just like the core language. It ought to be possible for the programmer to guess what library call will do what he needs.</p><p>设计好库很难，不只是堆代码。库太大的话，找函数的时间可能比自己写还长。库需要像核心语言一样，用少量正交的操作符设计 —— 程序员应该能猜到哪个库调用能解决自己的问题。</p><p>Libraries are one place Common Lisp falls short. There are only rudimentary libraries for manipulating strings, and almost none for talking to the operating system. For historical reasons, Common Lisp tries to pretend that the OS doesn’t exist. And because you can’t talk to the OS, you’re unlikely to be able to write a serious program using only the built-in operators in Common Lisp. You have to use some implementation-specific hacks as well, and in practice these tend not to give you everything you want. Hackers would think a lot more highly of Lisp if Common Lisp had powerful string libraries and good OS support.</p><p>Common Lisp 的短板就在库。它的字符串处理库很初级，与操作系统交互的库几乎没有。出于历史原因，Common Lisp 试图假装操作系统不存在。而因为无法与操作系统交互，仅用 Common Lisp 的内置操作符几乎写不出严肃程序，还得用特定实现的 hacks，且往往满足不了需求。如果 Common Lisp 有强大的字符串库和良好的系统支持，黑客对它的评价会高得多。</p><h3 id="7-Syntax"><a href="#7-Syntax" class="headerlink" title="7 Syntax"></a><strong>7 Syntax</strong></h3><p><strong>7 语法</strong></p><p>Could a language with Lisp’s syntax, or more precisely, lack of syntax, ever become popular? I don’t know the answer to this question. I do think that syntax is not the main reason Lisp isn’t currently popular. Common Lisp has worse problems than unfamiliar syntax. I know several programmers who are comfortable with prefix syntax and yet use Perl by default, because it has powerful string libraries and can talk to the os.</p><p>Lisp 这种 “没有语法”（或说缺乏语法）的语言，有可能流行吗？我不知道答案，但我认为语法不是 Lisp 现在冷门的主因。Common Lisp 的问题比 “语法陌生” 更严重。我认识几个习惯前缀语法的程序员，却默认用 Perl—— 因为 Perl 有强大的字符串库，还能与系统交互。</p><p>There are two possible problems with prefix notation: that it is unfamiliar to programmers, and that it is not dense enough. The conventional wisdom in the Lisp world is that the first problem is the real one. I’m not so sure. Yes, prefix notation makes ordinary programmers panic. But I don’t think ordinary programmers’ opinions matter. Languages become popular or unpopular based on what expert hackers think of them, and I think expert hackers might be able to deal with prefix notation. Perl syntax can be pretty incomprehensible, but that has not stood in the way of Perl’s popularity. If anything it may have helped foster a Perl cult.</p><p>前缀表示法可能有两个问题：对程序员来说陌生，以及不够紧凑。Lisp 界的共识是 “陌生” 是主因，但我不确定。没错，前缀表示法会让普通程序员恐慌，但普通程序员的看法不重要。语言的流行取决于顶尖黑客的看法，而他们应该能接受前缀表示法。Perl 的语法够晦涩了，却没阻碍它流行 —— 甚至可能助长了 Perl 文化。</p><p>A more serious problem is the diffuseness of prefix notation. For expert hackers, that really is a problem. No one wants to write (aref a x y) when they could write a[x,y].</p><p>更严重的问题是前缀表示法的 “松散”。对顶尖黑客来说，这确实是问题：没人想写<code>(aref a x y)</code>，如果可以写成<code>a[x,y]</code>的话。</p><p>In this particular case there is a way to finesse our way out of the problem. If we treat data structures as if they were functions on indexes, we could write (a x y) instead, which is even shorter than the Perl form. Similar tricks may shorten other types of expressions.</p><p>这个问题有个解决办法：把数据结构当作 “接受索引的函数”，这样就能写成<code>(a x y)</code>，甚至比 Perl 的形式还短。类似的技巧或许能缩短其他表达式。</p><p>We can get rid of (or make optional) a lot of parentheses by making indentation significant. That’s how programmers read code anyway: when indentation says one thing and delimiters say another, we go by the indentation. Treating indentation as significant would eliminate this common source of bugs as well as making programs shorter.</p><p>我们可以通过 “缩进有意义” 来减少（或可选）大量括号。程序员读代码时本就靠缩进：当缩进和分隔符冲突时，我们信缩进。让缩进有意义，既能消除常见的 bug，又能缩短程序。</p><p>Sometimes infix syntax is easier to read. This is especially true for math expressions. I’ve used Lisp my whole programming life and I still don’t find prefix math expressions natural. And yet it is convenient, especially when you’re generating code, to have operators that take any number of arguments. So if we do have infix syntax, it should probably be implemented as some kind of read-macro.</p><p>有时中缀语法更易读，尤其是数学表达式。我用了一辈子 Lisp，还是觉得前缀数学表达式不自然。但允许操作符接受任意数量的参数（尤其在生成代码时）很方便。所以，如果要有中缀语法，或许可以用读宏实现。</p><p>I don’t think we should be religiously opposed to introducing syntax into Lisp, as long as it translates in a well-understood way into underlying s-expressions. There is already a good deal of syntax in Lisp. It’s not necessarily bad to introduce more, as long as no one is forced to use it. In Common Lisp, some delimiters are reserved for the language, suggesting that at least some of the designers intended to have more syntax in the future.</p><p>我不认为应该坚决反对给 Lisp 加语法 —— 只要语法能以清晰的方式转换为底层的 s 表达式。Lisp 已有不少语法，只要不强迫使用，多加些也无妨。Common Lisp 中有些分隔符是语言保留的，说明至少有部分设计者希望未来能加入更多语法。</p><p>One of the most egregiously unlispy pieces of syntax in Common Lisp occurs in format strings; format is a language in its own right, and that language is not Lisp. If there were a plan for introducing more syntax into Lisp, format specifiers might be able to be included in it. It would be a good thing if macros could generate format specifiers the way they generate any other kind of code.</p><p>Common Lisp 中最不 “Lisp” 的语法是格式字符串：<code>format</code>本身就是一种语言，而且不是 Lisp。如果有计划给 Lisp 加语法，格式说明符或许能包含进去 —— 这样宏就能像生成其他代码一样生成格式说明符，会是好事。</p><p>An eminent Lisp hacker told me that his copy of CLTL falls open to the section format. Mine too. This probably indicates room for improvement. It may also mean that programs do a lot of I&#x2F;O.</p><p>一位著名的 Lisp 黑客告诉我，他的《Common Lisp the Language》总是自动翻开到<code>format</code>那一节。我的也是。这可能说明有改进空间，也可能说明程序确实要做很多 I&#x2F;O。</p><h3 id="8-Efficiency"><a href="#8-Efficiency" class="headerlink" title="8 Efficiency"></a><strong>8 Efficiency</strong></h3><p><strong>8 效率</strong></p><p>A good language, as everyone knows, should generate fast code. But in practice I don’t think fast code comes primarily from things you do in the design of the language. As Knuth pointed out long ago, speed only matters in certain critical bottlenecks. And as many programmers have observed since, one is very often mistaken about where these bottlenecks are.</p><p>众所周知，好语言应该生成高效代码。但实际上，我认为高效代码并非主要来自语言设计 —— 正如 Knuth 早就指出的，速度只在某些关键瓶颈处重要，而程序员常常猜错瓶颈在哪。</p><p>So, in practice, the way to get fast code is to have a very good profiler, rather than by, say, making the language strongly typed. You don’t need to know the type of every argument in every call in the program. You do need to be able to declare the types of arguments in the bottlenecks. And even more, you need to be able to find out where the bottlenecks are.</p><p>所以，实际上，要得到高效代码，靠的是优秀的性能分析器，而非强类型之类的设计。你不需要知道程序中每个调用的每个参数的类型，但需要能在瓶颈处声明参数类型 —— 更重要的是，需要能找到瓶颈在哪。</p><p>One complaint people have had with Lisp is that it’s hard to tell what’s expensive. This might be true. It might also be inevitable, if you want to have a very abstract language. And in any case I think good profiling would go a long way toward fixing the problem: you’d soon learn what was expensive.</p><p>人们对 Lisp 的一个抱怨是 “说不清什么操作费时间”。这可能是真的，也可能是 “高度抽象语言” 的必然。但优秀的性能分析器应该能解决这个问题：你很快就会知道什么操作耗时。</p><p>Part of the problem here is social. Language designers like to write fast compilers. That’s how they measure their skill. They think of the profiler as an add-on, at best. But in practice a good profiler may do more to improve the speed of actual programs written in the language than a compiler that generates fast code. Here, again, language designers are somewhat out of touch with their users. They do a really good job of solving slightly the wrong problem.</p><p>这里有个社会因素：语言设计者喜欢写快速编译器 —— 这是他们衡量技能的方式。他们最多把性能分析器当作附加工具，但实际上，优秀的性能分析器对提升实际程序速度的作用，可能比生成高效代码的编译器还大。这又是语言设计者与用户脱节的地方：他们擅长解决的，是稍微跑偏的问题。</p><p>It might be a good idea to have an active profiler — to push performance data to the programmer instead of waiting for him to come asking for it. For example, the editor could display bottlenecks in red when the programmer edits the source code. Another approach would be to somehow represent what’s happening in running programs. This would be an especially big win in server-based applications, where you have lots of running programs to look at. An active profiler could show graphically what’s happening in memory as a program’s running, or even make sounds that tell what’s happening.</p><p>或许可以做 “主动性能分析器”—— 主动把性能数据推给程序员，而非等他们来查。比如，编辑器在程序员编辑源码时，用红色标记瓶颈。另一种方式是可视化运行中程序的状态 —— 这对服务器应用尤其有用，因为有很多运行中的程序可观察。主动性能分析器可以图形化显示程序运行时的内存状态，甚至用声音提示。</p><p>Sound is a good cue to problems. In one place I worked, we had a big board of dials showing what was happening to our web servers. The hands were moved by little servomotors that made a slight noise when they turned. I couldn’t see the board from my desk, but I found that I could tell immediately, by the sound, when there was a problem with a server.</p><p>声音是个好的问题信号。我以前工作的地方，有块大仪表盘显示 web 服务器的状态，指针由小伺服电机驱动，转动时会发出轻微声响。我在座位上看不见仪表盘，但能通过声音立刻判断服务器是否出问题。</p><p>It might even be possible to write a profiler that would automatically detect inefficient algorithms. I would not be surprised if certain patterns of memory access turned out to be sure signs of bad algorithms. If there were a little guy running around inside the computer executing our programs, he would probably have as long and plaintive a tale to tell about his job as a federal government employee. I often have a feeling that I’m sending the processor on a lot of wild goose chases, but I’ve never had a good way to look at what it’s doing.</p><p>甚至可能写出自动检测低效算法的性能分析器。某些内存访问模式可能就是坏算法的明确信号 —— 这不足为奇。如果电脑里有个小人在执行程序，他的工作吐槽可能和联邦公务员一样长。我总觉得自己让处理器做了很多无用功，却没法看清它在干嘛。</p><p>A number of Lisps now compile into byte code, which is then executed by an interpreter. This is usually done to make the implementation easier to port, but it could be a useful language feature. It might be a good idea to make the byte code an official part of the language, and to allow programmers to use inline byte code in bottlenecks. Then such optimizations would be portable too.</p><p>现在很多 Lisp 先编译成字节码，再用解释器执行 —— 这通常是为了便于移植，但也可以成为有用的语言特性。或许可以把字节码定为语言的官方部分，允许程序员在瓶颈处嵌入字节码 —— 这样优化也能移植。</p><p>The nature of speed, as perceived by the end-user, may be changing. With the rise of server-based applications, more and more programs may turn out to be i&#x2F;o-bound. It will be worth making i&#x2F;o fast. The language can help with straightforward measures like simple, fast, formatted output functions, and also with deep structural changes like caching and persistent objects.</p><p>用户感知的 “速度” 本质可能在变。随着服务器应用兴起，越来越多程序会受 I&#x2F;O 限制 —— 优化 I&#x2F;O 很重要。语言可以通过简单措施（如快速格式化输出函数）和深层结构（如缓存、持久化对象）提供支持。</p><p>Users are interested in response time. But another kind of efficiency will be increasingly important: the number of simultaneous users you can support per processor. Many of the interesting applications written in the near future will be server-based, and the number of users per server is the critical question for anyone hosting such applications. In the capital cost of a business offering a server-based application, this is the divisor.</p><p>用户关心响应时间，但另一种效率会越来越重要：每处理器支持的并发用户数。未来很多有趣的应用都是服务器端的，对托管者来说，“每服务器用户数” 是关键问题 —— 这是决定服务器应用业务资本成本的除数。</p><p>For years, efficiency hasn’t mattered much in most end-user applications. Developers have been able to assume that each user would have an increasingly powerful processor sitting on their desk. And by Parkinson’s Law, software has expanded to use the resources available. That will change with server-based applications. In that world, the hardware and software will be supplied together. For companies that offer server-based applications, it will make a very big difference to the bottom line how many users they can support per server.</p><p>多年来，多数终端用户应用不太在乎效率。开发者可以假设每个用户的桌面处理器会越来越强，而根据帕金森定律，软件会膨胀到占满资源。但服务器应用会改变这一点：在那个世界里，硬件和软件是捆绑的。对提供服务器应用的公司来说，每服务器支持的用户数直接影响底线。</p><p>In some applications, the processor will be the limiting factor, and execution speed will be the most important thing to optimize. But often memory will be the limit; the number of simultaneous users will be determined by the amount of memory you need for each user’s data. The language can help here too. Good support for threads will enable all the users to share a single heap. It may also help to have persistent objects and&#x2F;or language level support for lazy loading.</p><p>有些应用中，处理器是瓶颈，执行速度是优化重点；但更多时候内存是瓶颈 —— 并发用户数取决于每个用户数据所需的内存。语言也能在这里发挥作用：良好的线程支持能让所有用户共享一个堆；持久化对象和语言级延迟加载也可能有帮助。</p><h3 id="9-Time"><a href="#9-Time" class="headerlink" title="9 Time"></a><strong>9 Time</strong></h3><p><strong>9 时间</strong></p><p>The last ingredient a popular language needs is time. No one wants to write programs in a language that might go away, as so many programming languages do. So most hackers will tend to wait until a language has been around for a couple years before even considering using it.</p><p>流行语言的最后一个要素是<strong>时间</strong>。没人想在可能消失的语言上写程序 —— 太多编程语言都是如此。所以多数黑客会等一种语言出现几年后，才考虑使用。</p><p>Inventors of wonderful new things are often surprised to discover this, but you need time to get any message through to people. A friend of mine rarely does anything the first time someone asks him. He knows that people sometimes ask for things that they turn out not to want. To avoid wasting his time, he waits till the third or fourth time he’s asked to do something; by then, whoever’s asking him may be fairly annoyed, but at least they probably really do want whatever they’re asking for.</p><p>新事物的发明者常惊讶地发现：让人们接受一个信息需要时间。我有个朋友，别人第一次求他做事，他很少答应 —— 他知道人们有时会求自己并不真正想要的东西。为了不浪费时间，他会等别人求到第三、四次 —— 这时对方可能已经很生气，但至少他们很可能是真的想要。</p><p>Most people have learned to do a similar sort of filtering on new things they hear about. They don’t even start paying attention until they’ve heard about something ten times. They’re perfectly justified: the majority of hot new whatevers do turn out to be a waste of time, and eventually go away. By delaying learning VRML, I avoided having to learn it at all.</p><p>多数人对新事物也有类似的过滤机制：听到十次以上才会开始关注。这很合理：多数 “热门新事物” 最终都是浪费时间，会消失。我因为推迟学 VRML，最后根本没学。</p><p>So anyone who invents something new has to expect to keep repeating their message for years before people will start to get it. We wrote what was, as far as I know, the first web-server based application, and it took us years to get it through to people that it didn’t have to be downloaded. It wasn’t that they were stupid. They just had us tuned out.</p><p>所以，任何新事物的发明者都得做好准备：多年重复自己的理念，人们才会开始听。据我所知，我们写了第一个基于 web 服务器的应用，但花了好几年才让人们明白 “它不需要下载”。不是他们笨，只是没把我们当回事。</p><p>The good news is, simple repetition solves the problem. All you have to do is keep telling your story, and eventually people will start to hear. It’s not when people notice you’re there that they pay attention; it’s when they notice you’re still there.</p><p>好消息是，重复就能解决问题。你只需不断讲自己的故事，人们最终会听见。人们不是在 “注意到你存在” 时关注你，而是在 “注意到你还在” 时。</p><p>It’s just as well that it usually takes a while to gain momentum. Most technologies evolve a good deal even after they’re first launched — programming languages especially. Nothing could be better, for a new techology, than a few years of being used only by a small number of early adopters. Early adopters are sophisticated and demanding, and quickly flush out whatever flaws remain in your technology. When you only have a few users you can be in close contact with all of them. And early adopters are forgiving when you improve your system, even if this causes some breakage.</p><p>势头的积累需要时间，这其实是好事。多数技术（尤其是编程语言）在推出后还会大幅演化。对新技术来说，有几年时间只被少数早期用户使用，再好不过。早期用户成熟且挑剔，能快速发现技术的缺陷。用户少时，你能和所有用户保持密切联系；而且早期用户在你改进系统（哪怕造成一些不兼容）时，也更宽容。</p><p>There are two ways new technology gets introduced: the organic growth method, and the big bang method. The organic growth method is exemplified by the classic seat-of-the-pants underfunded garage startup. A couple guys, working in obscurity, develop some new technology. They launch it with no marketing and initially have only a few (fanatically devoted) users. They continue to improve the technology, and meanwhile their user base grows by word of mouth. Before they know it, they’re big.</p><p>新技术的推广有两种方式：“有机增长” 和 “大爆炸”。有机增长就像经典的、资金不足的车库创业：几个人默默开发新技术，零营销，最初只有几个（狂热的）用户，边改进技术边靠口碑增长，不知不觉就做大了。</p><p>The other approach, the big bang method, is exemplified by the VC-backed, heavily marketed startup. They rush to develop a product, launch it with great publicity, and immediately (they hope) have a large user base.</p><p>另一种 “大爆炸” 方式，就像风投支持、大肆营销的创业公司：赶工开发产品，高调发布，希望立刻获得大量用户。</p><p>Generally, the garage guys envy the big bang guys. The big bang guys are smooth and confident and respected by the VCs. They can afford the best of everything, and the PR campaign surrounding the launch has the side effect of making them celebrities. The organic growth guys, sitting in their garage, feel poor and unloved. And yet I think they are often mistaken to feel sorry for themselves. Organic growth seems to yield better technology and richer founders than the big bang method. If you look at the dominant technologies today, you’ll find that most of them grew organically.</p><p>通常，车库创业者会羡慕大爆炸创业者 —— 他们光鲜自信，受风投青睐，能买最好的东西，发布时的公关还能让他们成名人。车库里的人觉得自己又穷又没人爱，但我认为他们不该自怨自艾。有机增长往往比大爆炸方式产生更好的技术，也让创始人更富有。看看如今的主流技术，多数都是有机增长来的。</p><p>This pattern doesn’t only apply to companies. You see it in sponsored research too. Multics and Common Lisp were big-bang projects, and Unix and MacLisp were organic growth projects.</p><p>这不仅适用于公司，也适用于赞助研究：Multics 和 Common Lisp 是大爆炸项目，而 Unix 和 MacLisp 是有机增长项目。</p><h3 id="10-Redesign"><a href="#10-Redesign" class="headerlink" title="10 Redesign"></a><strong>10 Redesign</strong></h3><p><strong>10 重新设计</strong></p><p>“The best writing is rewriting,” wrote E. B. White. Every good writer knows this, and it’s true for software too. The most important part of design is redesign. Programming languages, especially, don’t get redesigned enough.</p><p>E. B. White 曾说：“最好的写作是重写。” 优秀的作家都懂这个道理，软件也一样。设计中最重要的部分是<strong>重新设计</strong>，而编程语言尤其缺乏足够的重设计。</p><p>To write good software you must simultaneously keep two opposing ideas in your head. You need the young hacker’s naive faith in his abilities, and at the same time the veteran’s skepticism. You have to be able to think how hard can it be? with one half of your brain while thinking it will never work with the other.</p><p>写好软件，脑子里必须同时装着两个对立的想法：年轻黑客对自身能力的天真信心，和老手的怀疑精神。你得用一半脑子想 “能有多难？”，另一半想 “这肯定不行”。</p><p>The trick is to realize that there’s no real contradiction here. You want to be optimistic and skeptical about two different things. You have to be optimistic about the possibility of solving the problem, but skeptical about the value of whatever solution you’ve got so far.</p><p>关键是要意识到这并不矛盾：你要对 “解决问题的可能性” 乐观，对 “当前解决方案的价值” 怀疑。</p><p>People who do good work often think that whatever they’re working on is no good. Others see what they’ve done and are full of wonder, but the creator is full of worry. This pattern is no coincidence: it is the worry that made the work good.</p><p>做出好作品的人，常觉得自己的东西不行。别人惊叹于他们的成果，创造者却满是担忧。这不是巧合：正是担忧让作品变好。</p><p>If you can keep hope and worry balanced, they will drive a project forward the same way your two legs drive a bicycle forward. In the first phase of the two-cycle innovation engine, you work furiously on some problem, inspired by your confidence that you’ll be able to solve it. In the second phase, you look at what you’ve done in the cold light of morning, and see all its flaws very clearly. But as long as your critical spirit doesn’t outweigh your hope, you’ll be able to look at your admittedly incomplete system, and think, how hard can it be to get the rest of the way?, thereby continuing the cycle.</p><p>若能平衡希望与担忧，它们会像双腿蹬自行车一样推动项目前进。在创新的两阶段循环中：第一阶段，你受 “能解决问题” 的信心驱动，疯狂工作；第二阶段，你在清晨的冷静中审视成果，清晰地看到所有缺陷。但只要批判精神没压过希望，你就会看着虽不完美但已存在的系统，想 “再往前推一步能有多难？”—— 循环便得以继续。</p><p>It’s tricky to keep the two forces balanced. In young hackers, optimism predominates. They produce something, are convinced it’s great, and never improve it. In old hackers, skepticism predominates, and they won’t even dare to take on ambitious projects.</p><p>平衡这两种力量很难。年轻黑客往往乐观过头：做出东西就觉得完美，不再改进。老黑客则怀疑过头，不敢接手极具野心的项目。</p><p>Anything you can do to keep the redesign cycle going is good. Prose can be rewritten over and over until you’re happy with it. But software, as a rule, doesn’t get redesigned enough. Prose has readers, but software has users. If a writer rewrites an essay, people who read the old version are unlikely to complain that their thoughts have been broken by some newly introduced incompatibility.</p><p>任何能维持 “重新设计循环” 的事都是好的。散文可以一遍遍重写直到满意，但软件通常重写不够。散文有读者，软件有用户 —— 作家重写文章，读旧版的人不会抱怨 “新改动毁了我的想法”。</p><p>Users are a double-edged sword. They can help you improve your language, but they can also deter you from improving it. So choose your users carefully, and be slow to grow their number. Having users is like optimization: the wise course is to delay it. Also, as a general rule, you can at any given time get away with changing more than you think. Introducing change is like pulling off a bandage: the pain is a memory almost as soon as you feel it.</p><p>用户是把双刃剑：他们能帮你改进语言，也能阻碍改进。所以要谨慎选择用户，缓慢扩大规模。拥有用户就像优化：明智的做法是推迟。而且一般来说，你能做出的改变往往比想象中多。引入改变就像撕绷带：痛感几乎转瞬即逝。</p><p>Everyone knows that it’s not a good idea to have a language designed by a committee. Committees yield bad design. But I think the worst danger of committees is that they interfere with redesign. It is so much work to introduce changes that no one wants to bother. Whatever a committee decides tends to stay that way, even if most of the members don’t like it.</p><p>众所周知，委员会设计不出好语言 —— 委员会只会产出糟糕设计。但我觉得委员会最大的危险是干扰重设计：引入改变太麻烦，没人愿意费心。委员会的决定往往一成不变，哪怕多数成员不喜欢。</p><p>Even a committee of two gets in the way of redesign. This happens particularly in the interfaces between pieces of software written by two different people. To change the interface both have to agree to change it at once. And so interfaces tend not to change at all, which is a problem because they tend to be one of the most ad hoc parts of any system.</p><p>哪怕两个人的 “委员会” 也会阻碍重设计 —— 尤其是在两人分别写的软件模块接口上。改接口需要双方同时同意，所以接口往往完全不变 —— 但接口往往是系统中最随意的部分，这就成了问题。</p><p>One solution here might be to design systems so that interfaces are horizontal instead of vertical — so that modules are always vertically stacked strata of abstraction. Then the interface will tend to be owned by one of them. The lower of two levels will either be a language in which the upper is written, in which case the lower level will own the interface, or it will be a slave, in which case the interface can be dictated by the upper level.</p><p>解决办法或许是设计 “水平接口” 而非 “垂直接口”—— 让模块始终是垂直堆叠的抽象层。这样接口就会属于其中一方：若下层是上层的实现语言，下层拥有接口；若下层是 “从属”，接口可由上层决定。</p><h3 id="11-Lisp"><a href="#11-Lisp" class="headerlink" title="11 Lisp"></a><strong>11 Lisp</strong></h3><p><strong>11 Lisp 的未来</strong></p><p>What all this implies is that there is hope for a new Lisp. There is hope for any language that gives hackers what they want, including Lisp. I think we may have made a mistake in thinking that hackers are turned off by Lisp’s strangeness. This comforting illusion may have prevented us from seeing the real problem with Lisp, or at least Common Lisp, which is that it sucks for doing what hackers want to do. A hacker’s language needs powerful libraries and something to hack. Common Lisp has neither. A hacker’s language is terse and hackable. Common Lisp is not.</p><p>以上一切都意味着：新 Lisp 有希望。任何能给黑客想要的东西的语言都有希望，包括 Lisp。我们可能错以为黑客讨厌 Lisp 的 “怪异”—— 这个安慰性的错觉让我们忽视了 Lisp（至少 Common Lisp）的真正问题：它不适合黑客想做的事。黑客需要的语言要有强大的库和可编写的对象，Common Lisp 两者都没有；黑客需要语言简洁、可操作，Common Lisp 也没有。</p><p>The good news is, it’s not Lisp that sucks, but Common Lisp. If we can develop a new Lisp that is a real hacker’s language, I think hackers will use it. They will use whatever language does the job. All we have to do is make sure this new Lisp does some important job better than other languages.</p><p>好消息是：烂的不是 Lisp，是 Common Lisp。如果我们能开发一种真正的 “黑客 Lisp”，我相信黑客会用它。他们会用任何能解决问题的语言 —— 我们只需确保这种新 Lisp 在某些重要任务上比其他语言做得更好。</p><p>History offers some encouragement. Over time, successive new programming languages have taken more and more features from Lisp. There is no longer much left to copy before the language you’ve made is Lisp. The latest hot language, Python, is a watered-down Lisp with infix syntax and no macros. A new Lisp would be a natural step in this progression.</p><p>历史给了些鼓励。随着时间推移，新编程语言从 Lisp 借鉴的特性越来越多 —— 再抄下去，几乎就成了 Lisp。最新的热门语言 Python，就是弱化版的 Lisp（带中缀语法，无宏）。新 Lisp 会是这个演进过程的自然一步。</p><p>I sometimes think that it would be a good marketing trick to call it an improved version of Python. That sounds hipper than Lisp. To many people, Lisp is a slow AI language with a lot of parentheses. Fritz Kunze’s official biography carefully avoids mentioning the L-word. But my guess is that we shouldn’t be afraid to call the new Lisp Lisp. Lisp still has a lot of latent respect among the very best hackers — the ones who took 6.001 and understood it, for example. And those are the users you need to win.</p><p>我有时觉得，把它叫做 “改进版 Python” 会是个好营销 —— 这听起来比 Lisp 时髦。对很多人来说，Lisp 是 “慢腾腾的 AI 语言，满是括号”。Fritz Kunze 的官方传记都小心翼翼避开 “Lisp” 这个词。但我猜，我们不必害怕称新语言为 Lisp。在顶尖黑客中，Lisp 仍有不少潜在的尊重 —— 比如那些学过 6.001 并真正理解它的人。而这些正是你需要争取的用户。</p><p>In “How to Become a Hacker,” Eric Raymond describes Lisp as something like Latin or Greek — a language you should learn as an intellectual exercise, even though you won’t actually use it:<br>Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.<br>If I didn’t know Lisp, reading this would set me asking questions. A language that would make me a better programmer, if it means anything at all, means a language that would be better for programming. And that is in fact the implication of what Eric is saying.</p><p>Eric Raymond 在《如何成为黑客》中，把 Lisp 比作拉丁语或希腊语 —— 一种哪怕不用，也该学的智力训练：</p><p>“学习 Lisp 的深刻启迪，会让你余生都成为更好的程序员 —— 哪怕你其实不常直接用 Lisp。”</p><p>如果我不懂 Lisp，读了这话会好奇：一种 “能让我成为更好程序员” 的语言，若有意义，必然是 “更适合编程” 的语言 —— 这正是 Eric 的潜台词。</p><p>As long as that idea is still floating around, I think hackers will be receptive enough to a new Lisp, even if it is called Lisp. But this Lisp must be a hacker’s language, like the classic Lisps of the 1970s. It must be terse, simple, and hackable. And it must have powerful libraries for doing what hackers want to do now.</p><p>只要这个想法还在，我认为黑客会接受新 Lisp，哪怕它叫 Lisp。但这种 Lisp 必须是 “黑客的语言”，像 20 世纪 70 年代的经典 Lisp 那样：简洁、简单、可操作，且有强大的库，能做黑客现在想做的事。</p><p>In the matter of libraries I think there is room to beat languages like Perl and Python at their own game. A lot of the new applications that will need to be written in the coming years will be server-based applications. There’s no reason a new Lisp shouldn’t have string libraries as good as Perl, and if this new Lisp also had powerful libraries for server-based applications, it could be very popular. Real hackers won’t turn up their noses at a new tool that will let them solve hard problems with a few library calls. Remember, hackers are lazy.</p><p>在库方面，我觉得有机会在 Perl 和 Python 的强项上打败它们。未来几年需要写的很多新应用都是服务器端的。新 Lisp 完全可以有和 Perl 一样好的字符串库；如果它还有强大的服务器应用库，会非常流行。顶尖黑客不会拒绝 “用几个库调用解决难题” 的新工具 —— 别忘了，他们很懒。</p><p>It could be an even bigger win to have core language support for server-based applications. For example, explicit support for programs with multiple users, or data ownership at the level of type tags.</p><p>让核心语言支持服务器应用会是更大的优势。比如，显式支持多用户程序，或在类型标记层面支持数据所有权。</p><p>Server-based applications also give us the answer to the question of what this new Lisp will be used to hack. It would not hurt to make Lisp better as a scripting language for Unix. (It would be hard to make it worse.) But I think there are areas where existing languages would be easier to beat. I think it might be better to follow the model of Tcl, and supply the Lisp together with a complete system for supporting server-based applications. Lisp is a natural fit for server-based applications. Lexical closures provide a way to get the effect of subroutines when the ui is just a series of web pages. S-expressions map nicely onto html, and macros are good at generating it. There need to be better tools for writing server-based applications, and there needs to be a new Lisp, and the two would work very well together.</p><p>服务器应用也回答了 “新 Lisp 该用来编什么” 的问题。让 Lisp 成为更好的 Unix 脚本语言也不错（反正现在已经够烂了），但我觉得有些领域更容易超越现有语言。或许该学 Tcl 的模式：把 Lisp 和完整的服务器应用支持系统捆绑。Lisp 天生适合服务器应用：词法闭包能在 “UI 只是一系列网页” 时实现子程序效果；s 表达式与 HTML 映射良好，宏擅长生成 HTML。现在需要更好的服务器应用工具，也需要新 Lisp—— 两者结合会很完美。</p><h3 id="12-The-Dream-Language"><a href="#12-The-Dream-Language" class="headerlink" title="12 The Dream Language"></a><strong>12 The Dream Language</strong></h3><p><strong>12 理想的语言</strong></p><p>By way of summary, let’s try describing the hacker’s dream language. The dream language is beautiful, clean, and terse. It has an interactive toplevel that starts up fast. You can write programs to solve common problems with very little code. Nearly all the code in any program you write is code that’s specific to your application. Everything else has been done for you.</p><p>总结一下，黑客的理想语言该是什么样的？它优美、干净、简洁，有启动快速的交互式顶层环境。你能用很少的代码解决常见问题，程序中几乎所有代码都是应用特定的 —— 其他都已由库完成。</p><p>The syntax of the language is brief to a fault. You never have to type an unnecessary character, or even to use the shift key much.</p><p>它的语法简直到了极致：从不用敲多余字符，甚至很少用 Shift 键。</p><p>Using big abstractions you can write the first version of a program very quickly. Later, when you want to optimize, there’s a really good profiler that tells you where to focus your attention. You can make inner loops blindingly fast, even writing inline byte code if you need to.</p><p>你能用高层抽象快速写出程序初稿；优化时，有优秀的性能分析器告诉你该聚焦哪里。你能让内层循环快得惊人，甚至在需要时嵌入字节码。</p><p>There are lots of good examples to learn from, and the language is intuitive enough that you can learn how to use it from examples in a couple minutes. You don’t need to look in the manual much. The manual is thin, and has few warnings and qualifications.</p><p>有很多好例子可学，语言直观到你能从例子中几分钟学会用法。不用常查手册，手册很薄，几乎没有警告和限制。</p><p>The language has a small core, and powerful, highly orthogonal libraries that are as carefully designed as the core language. The libraries all work well together; everything in the language fits together like the parts in a fine camera. Nothing is deprecated, or retained for compatibility. The source code of all the libraries is readily available. It’s easy to talk to the operating system and to applications written in other languages.</p><p>它的核心小巧，库强大且高度正交，设计得和核心一样精心。所有库配合默契，语言的每个部分都像精密相机的零件一样契合。没有过时特性，也没有为兼容保留的冗余。所有库的源码都触手可及，能轻松与操作系统和其他语言写的应用交互。</p><p>The language is built in layers. The higher-level abstractions are built in a very transparent way out of lower-level abstractions, which you can get hold of if you want.</p><p>它分层构建：高层抽象由低层抽象透明组成，你想用时就能接触到低层。</p><p>Nothing is hidden from you that doesn’t absolutely have to be. The language offers abstractions only as a way of saving you work, rather than as a way of telling you what to do. In fact, the language encourages you to be an equal participant in its design. You can change everything about it, including even its syntax, and anything you write has, as much as possible, the same status as what comes predefined.</p><p>任何不必隐藏的东西都对你开放。语言提供抽象是为了帮你省功夫，而非命令你该做什么。事实上，它鼓励你参与设计 —— 你能改变它的一切，包括语法，而且你写的任何东西，都尽可能与预定义内容有同等地位。</p><p>Notes</p><p>[1] Macros very close to the modern idea were proposed by Timothy Hart in 1964, two years after Lisp 1.5 was released. What was missing, initially, were ways to avoid variable capture and multiple evaluation; Hart’s examples are subject to both.</p><p>[1] 与现代宏概念极为接近的想法，由蒂莫西・哈特（Timothy Hart）于 1964 年提出 —— 这是在 Lisp 1.5 发布两年后。最初的宏缺少避免 “变量捕获” 和 “多重求值” 的机制，而哈特的示例中这两个问题都存在。</p><p>[2] In When the Air Hits Your Brain, neurosurgeon Frank Vertosick recounts a conversation in which his chief resident, Gary, talks about the difference between surgeons and internists (“fleas”):</p><p>[2] 神经外科医生弗兰克・弗托西克（Frank Vertosick）在《当空气撞击你的大脑》（<em>When the Air Hits Your Brain</em>）一书中，记录了他与住院总医师加里（Gary）的一段对话，其中加里谈到了外科医生与内科医生（“跳蚤”）的区别：</p><p>Gary and I ordered a large pizza and found an open booth. The chief lit a cigarette. “Look at those goddamn fleas, jabbering about some disease they’ll see once in their lifetimes. That’s the trouble with fleas, they only like the bizarre stuff. They hate their bread and butter cases. That’s the difference between us and the fucking fleas. See, we love big juicy lumbar disc herniations, but they hate hypertension….”</p><p>加里和我点了个大披萨，找了个空 booth 坐下。这位主任点燃一支烟：“你看那些该死的跳蚤，没完没了地聊那些一辈子都遇不上一次的病。这就是跳蚤的问题 —— 他们只喜欢离奇的玩意儿，讨厌日常的常见病。这就是我们和那些该死的跳蚤的区别。你看，我们就爱那些又大又多汁的腰椎间盘突出，但他们讨厌高血压……”</p><p>It’s hard to think of a lumbar disc herniation as juicy (except literally). And yet I think I know what they mean. I’ve often had a juicy bug to track down. Someone who’s not a programmer would find it hard to imagine that there could be pleasure in a bug. Surely it’s better if everything just works. In one way, it is. And yet there is undeniably a grim satisfaction in hunting down certain sorts of bugs.</p><p>很难把腰椎间盘突出想成 “多汁” 的（除非从字面意义）。但我大概懂他们的意思。我也常遇到 “多汁的 bug” 要去追查。不是程序员的人很难理解：调试 bug 怎么会有乐趣？显然，一切正常不是更好吗？某种意义上确实如此。但不可否认，追查某些 bug 时，会有种冷酷的满足感。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隔绝干扰</title>
    <link href="/2025/08/13/disconnecting-distraction/"/>
    <url>/2025/08/13/disconnecting-distraction/</url>
    
    <content type="html"><![CDATA[<h2 id="Disconnecting-Distraction"><a href="#Disconnecting-Distraction" class="headerlink" title="Disconnecting Distraction"></a>Disconnecting Distraction</h2><p>原文链接: <a href="https://paulgraham.com/distraction.html">https://paulgraham.com/distraction.html</a></p><p>May 2008</p><p>Note: The strategy described at the end of this essay didn’t work. It would work for a while, and then I’d gradually find myself using the Internet on my work computer. I’m trying other strategies now, but I think this time I’ll wait till I’m sure they work before writing about them.</p><p>注：本文末尾提到的策略并未奏效。它会在一段时间内起作用，但渐渐地，我发现自己还是会用工作电脑上网。我现在正在尝试其他策略，但我想这次要等确定它们有效后再写出来。</p><p>Procrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing; you avoid work by doing something else.</p><p>拖延症靠干扰滋生。大多数人会觉得只是坐着无所事事很不舒服，于是你就通过做别的事情来逃避工作。</p><p>So one way to beat procrastination is to starve it of distractions. But that’s not as straightforward as it sounds, because there are people working hard to distract you. Distraction is not a static obstacle that you avoid like you might avoid a rock in the road. Distraction seeks you out.</p><p>所以，战胜拖延症的一个方法就是断绝它的干扰来源。但这并不像听起来那么简单，因为总有人在费尽心机地干扰你。干扰并非是像路上的石头那样，你可以避开的静态障碍。干扰会主动找上门来。</p><p>Chesterfield described dirt as matter out of place. Distracting is, similarly, desirable at the wrong time. And technology is continually being refined to produce more and more desirable things. Which means that as we learn to avoid one class of distractions, new ones constantly appear, like drug-resistant bacteria.</p><p>切斯特菲尔德曾将污垢描述为放错地方的物质。同样地，干扰就是在错误时间出现的合意事物。而科技在不断改进，催生着越来越多令人着迷的东西。这意味着，当我们学会避开一类干扰时，新的干扰会不断出现，就像抗药性细菌一样。</p><p>Television, for example, has after 50 years of refinement reached the point where it’s like visual crack. I realized when I was 13 that TV was addictive, so I stopped watching it. But I read recently that the average American watches 4 hours of TV a day. A quarter of their life.</p><p>例如，经过 50 年的改进，电视已经到了堪称视觉可卡因的地步。我 13 岁时就意识到电视会让人上瘾，于是就不再看了。但最近我看到数据称，美国人平均每天看 4 小时电视，这占了他们生命的四分之一。</p><p>TV is in decline now, but only because people have found even more addictive ways of wasting time. And what’s especially dangerous is that many happen at your computer. This is no accident. An ever larger percentage of office workers sit in front of computers connected to the Internet, and distractions always evolve toward the procrastinators.</p><p>如今电视的影响力在下降，只是因为人们找到了更让人上瘾的消磨时间的方式。而尤其危险的是，很多这种方式就出现在你的电脑上。这绝非偶然。越来越多的办公室职员坐在联网的电脑前，而干扰总会朝着拖延者的方向演变。</p><p>I remember when computers were, for me at least, exclusively for work. I might occasionally dial up a server to get mail or ftp files, but most of the time I was offline. All I could do was write and program. Now I feel as if someone snuck a television onto my desk. Terribly addictive things are just a click away. Run into an obstacle in what you’re working on? Hmm, I wonder what’s new online. Better check.</p><p>我记得，曾经电脑对我来说，至少是完全用于工作的。我偶尔会拨号连接服务器收邮件或用 FTP 传文件，但大多数时候我都是离线状态。我能做的只有写作和编程。现在我却感觉好像有人偷偷在我桌上放了一台电视。只要点一下鼠标，就能接触到极度令人上瘾的东西。在工作中遇到阻碍了？嗯，我想知道网上有什么新鲜事，还是去看看吧。</p><p>After years of carefully avoiding classic time sinks like TV, games, and Usenet, I still managed to fall prey to distraction, because I didn’t realize that it evolves. Something that used to be safe, using the Internet, gradually became more and more dangerous. Some days I’d wake up, get a cup of tea and check the news, then check email, then check the news again, then answer a few emails, then suddenly notice it was almost lunchtime and I hadn’t gotten any real work done. And this started to happen more and more often.</p><p>多年来，我小心翼翼地避开电视、游戏、新闻组等典型的时间黑洞，却还是没能逃过干扰的魔爪，因为我没意识到干扰是在不断演变的。曾经安全的上网行为，渐渐变得越来越危险。有些日子，我醒来后喝杯茶，看看新闻，再查收邮件，接着又看会儿新闻，然后回复几封邮件，突然就发现快到午饭时间了，而我还没做任何真正的工作。这种情况发生得越来越频繁。</p><p>It took me surprisingly long to realize how distracting the Internet had become, because the problem was intermittent. I ignored it the way you let yourself ignore a bug that only appears intermittently. When I was in the middle of a project, distractions weren’t really a problem. It was when I’d finished one project and was deciding what to do next that they always bit me.</p><p>我花了好长时间才意识到互联网变得多么让人分心，因为这个问题是间歇性的。我对它的忽视，就像忽视一个只偶尔出现的漏洞一样。当我全身心投入一个项目时，干扰其实不算什么问题。但当我完成一个项目，正在决定接下来做什么的时候，干扰总会缠上我。</p><p>Another reason it was hard to notice the danger of this new type of distraction was that social customs hadn’t yet caught up with it. If I’d spent a whole morning sitting on a sofa watching TV, I’d have noticed very quickly. That’s a known danger sign, like drinking alone. But using the Internet still looked and felt a lot like work.</p><p>这种新型干扰的危险性难以被察觉，另一个原因是社会习俗还没跟上它的脚步。如果我花一整个上午坐在沙发上看电视，我很快就会意识到这是在浪费时间。这是一个众所周知的危险信号，就像独自酗酒一样。但上网看起来和感觉上都很像在工作。</p><p>Eventually, though, it became clear that the Internet had become so much more distracting that I had to start treating it differently. Basically, I had to add a new application to my list of known time sinks: Firefox.</p><p>然而，最终我清楚地认识到，互联网已经变得如此让人分心，我必须用不同的方式对待它。基本上，我得在已知的时间黑洞清单上再添一个新成员：火狐浏览器。</p><hr><p>The problem is a hard one to solve because most people still need the Internet for some things. If you drink too much, you can solve that problem by stopping entirely. But you can’t solve the problem of overeating by stopping eating. I couldn’t simply avoid the Internet entirely, as I’d done with previous time sinks.</p><p>这个问题很难解决，因为大多数人仍然在某些事情上需要互联网。如果你喝酒过量，可以通过彻底戒酒来解决问题。但你不能通过停止进食来解决暴饮暴食的问题。我不能像对待以前的时间黑洞那样，简单地完全避开互联网。</p><p>At first I tried rules. For example, I’d tell myself I was only going to use the Internet twice a day. But these schemes never worked for long. Eventually something would come up that required me to use it more than that. And then I’d gradually slip back into my old ways.</p><p>起初我尝试制定规则。比如，我告诉自己每天只上网两次。但这些方案都没能坚持太久。最终总会出现一些情况，要求我更频繁地上网。然后我就会逐渐回到以前的老样子。</p><p>Addictive things have to be treated as if they were sentient adversaries—as if there were a little man in your head always cooking up the most plausible arguments for doing whatever you’re trying to stop doing. If you leave a path to it, he’ll find it.</p><p>让人上瘾的东西必须被当作有知觉的对手来对待 —— 就好像你脑子里有个小人，总是在为你想停止做的事情编造最合理的理由。只要你给它留了条路，它就会找到。</p><p>The key seems to be visibility. The biggest ingredient in most bad habits is denial. So you have to make it so that you can’t merely slip into doing the thing you’re trying to avoid. It has to set off alarms.</p><p>关键似乎在于可见性。大多数坏习惯中，很大一部分原因是自我否认。所以你必须做到，不能只是不经意地就陷入你想避免的事情中。那必须得敲响警钟。</p><p>Maybe in the long term the right answer for dealing with Internet distractions will be software that watches and controls them. But in the meantime I’ve found a more drastic solution that definitely works: to set up a separate computer for using the Internet.</p><p>从长远来看，应对互联网干扰的正确方法可能是开发能够监控和控制它们的软件。但在此期间，我找到了一个更极端且绝对有效的解决方案：专门准备一台电脑用来上网。</p><p>I now leave wifi turned off on my main computer except when I need to transfer a file or edit a web page, and I have a separate laptop on the other side of the room that I use to check mail or browse the web. (Irony of ironies, it’s the computer Steve Huffman wrote Reddit on. When Steve and Alexis auctioned off their old laptops for charity, I bought them for the Y Combinator museum.)</p><p>现在，我的主电脑除非需要传输文件或编辑网页，否则都关闭无线网络，而在房间的另一边，我有一台专门的笔记本电脑用来查邮件或浏览网页。（极具讽刺意味的是，这台电脑是史蒂夫・赫夫曼开发Reddit时用的。当史蒂夫和亚历克西斯为慈善拍卖他们的旧笔记本电脑时，我把它们买了下来，放进了 Y Combinator 博物馆。）</p><p>My rule is that I can spend as much time online as I want, as long as I do it on that computer. And this turns out to be enough. When I have to sit on the other side of the room to check email or browse the web, I become much more aware of it. Sufficiently aware, in my case at least, that it’s hard to spend more than about an hour a day online.</p><p>我的规则是，只要在那台电脑上，我想花多少时间上网都可以。事实证明，这就足够了。当我必须坐到房间的另一边去查邮件或浏览网页时，我就会对上网这件事变得更加清醒。至少对我来说，这种清醒足以让我每天上网时间不超过一个小时。</p><p>And my main computer is now freed for work. If you try this trick, you’ll probably be struck by how different it feels when your computer is disconnected from the Internet. It was alarming to me how foreign it felt to sit in front of a computer that could only be used for work, because that showed how much time I must have been wasting.</p><p>而我的主电脑现在完全用来工作了。如果你也试试这个方法，你可能会惊讶地发现，当你的电脑断开互联网连接时，感觉是多么不同。坐在一台只能用来工作的电脑前，那种陌生感让我很震惊，因为这表明我以前肯定浪费了很多时间。</p><p>Wow. All I can do at this computer is work. Ok, I better work then.</p><p>哇，这台电脑只能用来工作。好吧，那我最好开始工作。</p><p>That’s the good part. Your old bad habits now help you to work. You’re used to sitting in front of that computer for hours at a time. But you can’t browse the web or check email now. What are you going to do? You can’t just sit there. So you start working.</p><p>这就是好的方面。你以前的坏习惯现在会帮助你工作。你习惯了在电脑前坐好几个小时。但现在你不能浏览网页或查邮件了。你打算做什么呢？你不能就坐在那里。所以你就开始工作了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们对孩子撒的谎</title>
    <link href="/2025/08/12/lies-we-tell-kids/"/>
    <url>/2025/08/12/lies-we-tell-kids/</url>
    
    <content type="html"><![CDATA[<h2 id="Lies-We-Tell-Kids"><a href="#Lies-We-Tell-Kids" class="headerlink" title="Lies We Tell Kids"></a>Lies We Tell Kids</h2><p>原文链接: <a href="https://paulgraham.com/lies.html">https://paulgraham.com/lies.html</a></p><p>May 2008</p><p>Adults lie constantly to kids. I’m not saying we should stop, but I think we should at least examine which lies we tell and why.</p><p>成年人一直在对孩子撒谎。我不是说我们应该停止，但我认为至少应该审视一下我们撒了哪些谎，以及为什么要撒这些谎。</p><p>There may also be a benefit to us. We were all lied to as kids, and some of the lies we were told still affect us. So by studying the ways adults lie to kids, we may be able to clear our heads of lies we were told.</p><p>这对我们自己或许也有好处。我们小时候都被撒过谎，有些谎言至今仍在影响我们。所以，通过研究成年人对孩子撒谎的方式，我们或许能理清那些被灌输的谎言。</p><p>I’m using the word “lie” in a very general sense: not just overt falsehoods, but also all the more subtle ways we mislead kids. Though “lie” has negative connotations, I don’t mean to suggest we should never do this—just that we should pay attention when we do. [1]</p><p>我对 “谎言” 的定义很宽泛：不仅包括明显的假话，还包括所有那些更微妙的、误导孩子的方式。尽管 “谎言” 带有负面含义，但我并不是说我们永远不该这么做 —— 只是说，当我们这么做时，应该多加留意。[1]</p><p>One of the most remarkable things about the way we lie to kids is how broad the conspiracy is. All adults know what their culture lies to kids about: they’re the questions you answer “Ask your parents.” If a kid asked who won the World Series in 1982 or what the atomic weight of carbon was, you could just tell him. But if a kid asks you “Is there a God?” or “What’s a prostitute?” you’ll probably say “Ask your parents.”</p><p>成年人对孩子撒谎的方式中，最值得注意的一点是，这种 “共谋” 的范围有多广。所有成年人都知道自己的文化中哪些是对孩子隐瞒的内容：这些问题的答案通常是 “去问你爸妈”。如果孩子问 1982 年谁赢了世界职业棒球大赛，或者碳的原子量是多少，你可以直接告诉他。但如果孩子问 “有上帝吗？” 或者 “妓女是什么？”，你很可能会说 “去问你爸妈”。</p><p>Since we all agree, kids see few cracks in the view of the world presented to them. The biggest disagreements are between parents and schools, but even those are small. Schools are careful what they say about controversial topics, and if they do contradict what parents want their kids to believe, parents either pressure the school into keeping quiet or move their kids to a new school.</p><p>因为我们都达成了共识，所以孩子眼中的世界图景几乎没有破绽。最大的分歧存在于父母和学校之间，但即便如此也微不足道。学校在有争议的话题上会谨言慎行，如果他们的说法与父母希望孩子相信的内容相悖，父母要么会向学校施压让其保持沉默，要么会把孩子转到另一所学校。</p><p>The conspiracy is so thorough that most kids who discover it do so only by discovering internal contradictions in what they’re told. It can be traumatic for the ones who wake up during the operation. Here’s what happened to Einstein:</p><p>这种 “共谋” 如此彻底，以至于大多数孩子发现真相的方式，只是通过发现被告知的内容中存在内在矛盾。对那些在 “骗局” 中醒悟的孩子来说，这可能是创伤性的。爱因斯坦就有过这样的经历：</p><p>Through the reading of popular scientific books I soon reached the conviction that much in the stories of the Bible could not be true. The consequence was a positively fanatic freethinking coupled with the impression that youth is intentionally being deceived by the state through lies: it was a crushing impression. [2]</p><p>通过阅读通俗科学书籍，我很快确信，圣经故事中的很多内容不可能是真的。结果是，我产生了一种极度狂热的自由思想，同时觉得国家在故意通过谎言欺骗年轻人：这是一种毁灭性的印象。[2]</p><p>I remember that feeling. By 15 I was convinced the world was corrupt from end to end. That’s why movies like The Matrix have such resonance. Every kid grows up in a fake world. In a way it would be easier if the forces behind it were as clearly differentiated as a bunch of evil machines, and one could make a clean break just by taking a pill.</p><p>我记得那种感觉。15 岁时，我确信这个世界从头到尾都是腐朽的。这就是为什么《黑客帝国》这样的电影能引起如此强烈的共鸣。每个孩子都是在一个虚假的世界里长大的。从某种意义上说，如果幕后的力量能像一群邪恶的机器那样界限分明，只要吃一粒药丸就能彻底决裂，或许会更容易些。</p><h3 id="Protection"><a href="#Protection" class="headerlink" title="Protection"></a><strong>Protection</strong></h3><p><strong>保护</strong></p><p>If you ask adults why they lie to kids, the most common reason they give is to protect them. And kids do need protecting. The environment you want to create for a newborn child will be quite unlike the streets of a big city.</p><p>如果你问成年人为什么要对孩子撒谎，最常见的理由是 “为了保护他们”。而孩子确实需要保护。你想为新生儿创造的环境，与大城市的街道截然不同。</p><p>That seems so obvious it seems wrong to call it a lie. It’s certainly not a bad lie to tell, to give a baby the impression the world is quiet and warm and safe. But this harmless type of lie can turn sour if left unexamined.</p><p>这似乎显而易见，以至于称其为 “谎言” 都显得不妥。给婴儿营造一个安静、温暖、安全的世界印象，当然不是什么恶意的谎言。但这种无害的谎言如果不加审视，可能会变味。</p><p>Imagine if you tried to keep someone in as protected an environment as a newborn till age 18. To mislead someone so grossly about the world would seem not protection but abuse. That’s an extreme example, of course; when parents do that sort of thing it becomes national news. But you see the same problem on a smaller scale in the malaise teenagers feel in suburbia.</p><p>想象一下，如果你试图让一个人在像新生儿那样受保护的环境中待到 18 岁。如此严重地误导一个人对世界的认知，与其说是保护，不如说是虐待。当然，这是一个极端的例子；父母如果真的这么做，会成为全国新闻。但在郊区青少年的萎靡不振中，你能看到同样的问题，只是规模较小。</p><p>The main purpose of suburbia is to provide a protected environment for children to grow up in. And it seems great for 10 year olds. I liked living in suburbia when I was 10. I didn’t notice how sterile it was. My whole world was no bigger than a few friends’ houses I bicycled to and some woods I ran around in. On a log scale I was midway between crib and globe. A suburban street was just the right size. But as I grew older, suburbia started to feel suffocatingly fake.</p><p>郊区的主要目的是为孩子提供一个受保护的成长环境。对 10 岁的孩子来说，这似乎很棒。我 10 岁时就喜欢住在郊区，没注意到那里有多乏味。我的世界就局限在几个可以骑车去的朋友家，以及一片可以跑来跑去的树林。按对数尺度来看，我正处于婴儿床和整个世界的中间。郊区的街道大小刚刚好。但随着年龄增长，郊区开始让人觉得窒息般虚假。</p><p>Life can be pretty good at 10 or 20, but it’s often frustrating at 15. This is too big a problem to solve here, but certainly one reason life sucks at 15 is that kids are trapped in a world designed for 10 year olds.</p><p>10 岁或 20 岁时，生活可能很美好，但 15 岁时往往充满挫败感。这是一个太大的问题，无法在这里解决，但 15 岁的生活之所以糟糕，一个原因无疑是孩子被困在一个为 10 岁孩子设计的世界里。</p><p>What do parents hope to protect their children from by raising them in suburbia? A friend who moved out of Manhattan said merely that her 3 year old daughter “saw too much.” Off the top of my head, that might include: people who are high or drunk, poverty, madness, gruesome medical conditions, sexual behavior of various degrees of oddness, and violent anger.</p><p>父母希望通过在郊区抚养孩子，保护他们免受什么伤害呢？一个从曼哈顿搬出去的朋友只说，她 3 岁的女儿 “看到的太多了”。我随口就能想到，这些 “太多” 可能包括：吸毒或醉酒的人、贫困、精神失常、可怕的疾病、各种怪异的性行为，以及暴怒。</p><p>I think it’s the anger that would worry me most if I had a 3 year old. I was 29 when I moved to New York and I was surprised even then. I wouldn’t want a 3 year old to see some of the disputes I saw. It would be too frightening. A lot of the things adults conceal from smaller children, they conceal because they’d be frightening, not because they want to conceal the existence of such things. Misleading the child is just a byproduct.</p><p>如果我有一个 3 岁的孩子，我想最让我担心的是 “暴怒”。我 29 岁搬到纽约时，依然对此感到惊讶。我不希望一个 3 岁的孩子看到我见过的一些争执，那太可怕了。成年人对小孩子隐瞒的很多事情，是因为这些事情会吓到他们，而不是想隐瞒这些事情的存在。误导孩子只是副产品。</p><p>This seems one of the most justifiable types of lying adults do to kids. But because the lies are indirect we don’t keep a very strict accounting of them. Parents know they’ve concealed the facts about sex, and many at some point sit their kids down and explain more. But few tell their kids about the differences between the real world and the cocoon they grew up in. Combine this with the confidence parents try to instill in their kids, and every year you get a new crop of 18 year olds who think they know how to run the world.</p><p>这似乎是成年人对孩子撒谎中最合理的一种。但因为这些谎言是间接的，我们并没有严格地去核算它们。父母知道自己隐瞒了性知识，很多人会在某个时候坐下来给孩子做更多解释。但很少有父母会告诉孩子，真实世界与他们成长的 “保护罩” 之间有什么不同。再加上父母试图给孩子灌输的自信，每年都会有一批 18 岁的年轻人觉得自己懂得如何管理世界。</p><p>Don’t all 18 year olds think they know how to run the world? Actually this seems to be a recent innovation, no more than about 100 years old. In preindustrial times teenage kids were junior members of the adult world and comparatively well aware of their shortcomings. They could see they weren’t as strong or skillful as the village smith. In past times people lied to kids about some things more than we do now, but the lies implicit in an artificial, protected environment are a recent invention. Like a lot of new inventions, the rich got this first. Children of kings and great magnates were the first to grow up out of touch with the world. Suburbia means half the population can live like kings in that respect.</p><p>难道所有 18 岁的人都觉得自己懂得如何管理世界吗？实际上，这似乎是最近的新现象，不超过 100 年。在前工业化时代，青少年是成人世界的初级成员，相对清楚自己的不足。他们能看到自己不如村里的铁匠强壮或熟练。过去，人们在某些事情上对孩子的谎言比现在多，但这种隐含在人为保护环境中的谎言是最近才出现的。就像很多新发明一样，富人先享受到了。国王和大贵族的孩子是最早在与世界脱节的环境中长大的。郊区意味着一半的人口在这方面能像国王一样生活。</p><h3 id="Sex-and-Drugs"><a href="#Sex-and-Drugs" class="headerlink" title="Sex (and Drugs)"></a><strong>Sex (and Drugs)</strong></h3><p><strong>性（与毒品）</strong></p><p>I’d have different worries about raising teenage kids in New York. I’d worry less about what they’d see, and more about what they’d do. I went to college with a lot of kids who grew up in Manhattan, and as a rule they seemed pretty jaded. They seemed to have lost their virginity at an average of about 14 and by college had tried more drugs than I’d even heard of.</p><p>如果在纽约抚养十几岁的孩子，我的担忧会有所不同。我不太担心他们会看到什么，更担心他们会做什么。我上大学时认识很多在曼哈顿长大的孩子，总的来说，他们似乎相当世故。他们似乎平均 14 岁就失去了童贞，到了大学，尝试过的毒品比我听说过的还多。</p><p>The reasons parents don’t want their teenage kids having sex are complex. There are some obvious dangers: pregnancy and sexually transmitted diseases. But those aren’t the only reasons parents don’t want their kids having sex. The average parents of a 14 year old girl would hate the idea of her having sex even if there were zero risk of pregnancy or sexually transmitted diseases.</p><p>父母不希望十几岁的孩子发生性行为，原因很复杂。有一些明显的危险：怀孕和性传播疾病。但这并不是父母不希望孩子发生性行为的唯一原因。一个 14 岁女孩的普通父母，即使完全没有怀孕或性传播疾病的风险，也会厌恶她发生性行为的想法。</p><p>Kids can probably sense they aren’t being told the whole story. After all, pregnancy and sexually transmitted diseases are just as much a problem for adults, and they have sex.</p><p>孩子可能能感觉到他们没有被告知全部真相。毕竟，怀孕和性传播疾病对成年人来说也是问题，但成年人依然会有性行为。</p><p>What really bothers parents about their teenage kids having sex? Their dislike of the idea is so visceral it’s probably inborn. But if it’s inborn it should be universal, and there are plenty of societies where parents don’t mind if their teenage kids have sex—indeed, where it’s normal for 14 year olds to become mothers. So what’s going on? There does seem to be a universal taboo against sex with prepubescent children. One can imagine evolutionary reasons for that. And I think this is the main reason parents in industrialized societies dislike teenage kids having sex. They still think of them as children, even though biologically they’re not, so the taboo against child sex still has force.</p><p>父母真正介意十几岁的孩子发生性行为的原因是什么？他们对这个想法的反感如此本能，可能是与生俱来的。但如果这是与生俱来的，那它应该是普遍的，然而很多社会中，父母并不介意十几岁的孩子发生性行为 —— 事实上，14 岁成为母亲是很正常的。所以到底是怎么回事？似乎存在一种普遍的禁忌，反对与青春期前的儿童发生性行为。我们可以想象这背后的进化原因。而我认为，这是工业化社会的父母不喜欢青少年发生性行为的主要原因：他们仍然把青少年当作孩子，尽管从生物学上来说他们不是，所以对儿童性行为的禁忌依然有效。</p><p>One thing adults conceal about sex they also conceal about drugs: that it can cause great pleasure. That’s what makes sex and drugs so dangerous. The desire for them can cloud one’s judgement—which is especially frightening when the judgement being clouded is the already wretched judgement of a teenage kid.</p><p>成年人对性隐瞒的事情，对毒品也一样：它们能带来极大的快感。这正是性和毒品的危险之处。对它们的渴望会模糊人的判断力 —— 当被模糊的是青少年本就糟糕的判断力时，尤其令人恐惧。</p><p>Here parents’ desires conflict. Older societies told kids they had bad judgement, but modern parents want their children to be confident. This may well be a better plan than the old one of putting them in their place, but it has the side effect that after having implicitly lied to kids about how good their judgement is, we then have to lie again about all the things they might get into trouble with if they believed us.</p><p>这里存在父母的愿望冲突。更古老的社会会告诉孩子他们的判断力很差，但现代父母希望孩子自信。这很可能比过去那种 “让他们认清自己位置” 的做法更好，但副作用是：在含蓄地对孩子撒谎，说他们的判断力很好之后，我们又不得不再次撒谎，隐瞒那些如果他们相信了我们的话，可能会陷入麻烦的事情。</p><p>If parents told their kids the truth about sex and drugs, it would be: the reason you should avoid these things is that you have lousy judgement. People with twice your experience still get burned by them. But this may be one of those cases where the truth wouldn’t be convincing, because one of the symptoms of bad judgement is believing you have good judgement. When you’re too weak to lift something, you can tell, but when you’re making a decision impetuously, you’re all the more sure of it.</p><p>如果父母告诉孩子关于性和毒品的真相，应该是这样的：你应该避开这些东西，是因为你的判断力很差。比你有更多经验的人，依然会被它们伤害。但这可能是那种真相无法令人信服的情况，因为判断力差的一个表现就是，认为自己的判断力很好。当你举不起某个东西时，你能知道；但当你鲁莽地做决定时，你反而更确信自己是对的。</p><h3 id="Innocence"><a href="#Innocence" class="headerlink" title="Innocence"></a><strong>Innocence</strong></h3><p><strong>纯真</strong></p><p>Another reason parents don’t want their kids having sex is that they want to keep them innocent. Adults have a certain model of how kids are supposed to behave, and it’s different from what they expect of other adults.</p><p>父母不希望孩子发生性行为的另一个原因，是想让他们保持纯真。成年人对孩子应该有的行为有一个特定的模式，这与他们对其他成年人的期望不同。</p><p>One of the most obvious differences is the words kids are allowed to use. Most parents use words when talking to other adults that they wouldn’t want their kids using. They try to hide even the existence of these words for as long as they can. And this is another of those conspiracies everyone participates in: everyone knows you’re not supposed to swear in front of kids.</p><p>最明显的区别之一是孩子被允许使用的词汇。大多数父母在和其他成年人说话时会用一些词，却不希望自己的孩子用。他们会尽可能长时间地隐瞒这些词的存在。这也是所有人都参与的 “共谋” 之一：大家都知道不应该在孩子面前说脏话。</p><p>I’ve never heard more different explanations for anything parents tell kids than why they shouldn’t swear. Every parent I know forbids their children to swear, and yet no two of them have the same justification. It’s clear most start with not wanting kids to swear, then make up the reason afterward.</p><p>关于为什么不应该让孩子说脏话，我听过的父母解释差异最大。我认识的每个父母都禁止孩子说脏话，但没有两个人的理由是一样的。很明显，大多数父母是先不希望孩子说脏话，然后才编造理由。</p><p>So my theory about what’s going on is that the function of swearwords is to mark the speaker as an adult. There’s no difference in the meaning of “shit” and “poopoo.” So why should one be ok for kids to say and one forbidden? The only explanation is: by definition. [3]</p><p>所以我的理论是，脏话的作用是标志说话者是成年人。“狗屁” 和 “便便” 的意思没有区别。那为什么一个允许孩子说，另一个却禁止呢？唯一的解释是：定义如此。[3]</p><p>Why does it bother adults so much when kids do things reserved for adults? The idea of a foul-mouthed, cynical 10 year old leaning against a lamppost with a cigarette hanging out of the corner of his mouth is very disconcerting. But why?</p><p>为什么成年人会如此在意孩子做那些专属于成年人的事情？一个满嘴脏话、愤世嫉俗的 10 岁孩子，斜靠在路灯柱上，嘴角叼着烟，这种画面非常令人不安。但为什么呢？</p><p>One reason we want kids to be innocent is that we’re programmed to like certain kinds of helplessness. I’ve several times heard mothers say they deliberately refrained from correcting their young children’s mispronunciations because they were so cute. And if you think about it, cuteness is helplessness. Toys and cartoon characters meant to be cute always have clueless expressions and stubby, ineffectual limbs.</p><p>我们希望孩子纯真，一个原因是我们天生就喜欢某种无助。我好几次听到母亲们说，她们故意不纠正幼儿的发音错误，因为那很可爱。仔细想想，可爱就是无助。那些被设计成可爱的玩具和卡通人物，总是带着懵懂的表情，四肢粗短无力。</p><p>It’s not surprising we’d have an inborn desire to love and protect helpless creatures, considering human offspring are so helpless for so long. Without the helplessness that makes kids cute, they’d be very annoying. They’d merely seem like incompetent adults. But there’s more to it than that. The reason our hypothetical jaded 10 year old bothers me so much is not just that he’d be annoying, but that he’d have cut off his prospects for growth so early. To be jaded you have to think you know how the world works, and any theory a 10 year old had about that would probably be a pretty narrow one.</p><p>考虑到人类后代在很长一段时间内都如此无助，我们天生就有爱护和保护无助生物的欲望，这并不奇怪。如果没有那种让孩子显得可爱的无助，他们会非常令人讨厌，就像一群无能的成年人。但不止于此。我们假设的那个世故的 10 岁孩子让我不安，不仅因为他会令人讨厌，还因为他过早地切断了自己成长的可能性。要变得世故，你必须认为自己知道世界是如何运作的，而一个 10 岁孩子对世界的任何理论，很可能都非常狭隘。</p><p>Innocence is also open-mindedness. We want kids to be innocent so they can continue to learn. Paradoxical as it sounds, there are some kinds of knowledge that get in the way of other kinds of knowledge. If you’re going to learn that the world is a brutal place full of people trying to take advantage of one another, you’re better off learning it last. Otherwise you won’t bother learning much more.</p><p>纯真也是开放的心态。我们希望孩子纯真，这样他们才能继续学习。听起来矛盾，但有些知识会阻碍其他知识的学习。如果你要学习这个世界是一个残酷的地方，充满了想利用他人的人，那最好最后再学这个。否则，你就不会再费心去学更多东西了。</p><p>Very smart adults often seem unusually innocent, and I don’t think this is a coincidence. I think they’ve deliberately avoided learning about certain things. Certainly I do. I used to think I wanted to know everything. Now I know I don’t.</p><p>非常聪明的成年人往往显得异常纯真，我不认为这是巧合。我认为他们故意避免了解某些事情。我当然是这样。我曾经以为自己想知道一切，现在才知道并非如此。</p><h3 id="Death"><a href="#Death" class="headerlink" title="Death"></a><strong>Death</strong></h3><p><strong>死亡</strong></p><p>After sex, death is the topic adults lie most conspicuously about to kids. Sex I believe they conceal because of deep taboos. But why do we conceal death from kids? Probably because small children are particularly horrified by it. They want to feel safe, and death is the ultimate threat.</p><p>除了性，成年人对孩子最明显撒谎的话题就是死亡。我认为他们隐瞒性是因为深层的禁忌。但我们为什么要对孩子隐瞒死亡呢？可能是因为小孩子对死亡尤其恐惧。他们想感到安全，而死亡是终极威胁。</p><p>One of the most spectacular lies our parents told us was about the death of our first cat. Over the years, as we asked for more details, they were compelled to invent more, so the story grew quite elaborate. The cat had died at the vet’s office. Of what? Of the anaesthesia itself. Why was the cat at the vet’s office? To be fixed. And why had such a routine operation killed it? It wasn’t the vet’s fault; the cat had a congenitally weak heart; the anaesthesia was too much for it; but there was no way anyone could have known this in advance. It was not till we were in our twenties that the truth came out: my sister, then about three, had accidentally stepped on the cat and broken its back.</p><p>父母对我们撒过的一个惊人谎言，是关于我们第一只猫的死亡。多年来，随着我们追问更多细节，他们不得不编造更多内容，所以这个故事变得相当复杂。猫是在兽医诊所死的。死于什么？死于麻醉本身。猫为什么去兽医诊所？去做绝育手术。为什么一个常规手术会杀死它？这不是兽医的错；猫有先天性心脏病；麻醉对它来说负担太重；但事先没人能知道。直到我们二十多岁，真相才浮出水面：当时大约三岁的妹妹不小心踩到了猫，折断了它的脊椎。</p><p>They didn’t feel the need to tell us the cat was now happily in cat heaven. My parents never claimed that people or animals who died had “gone to a better place,” or that we’d meet them again. It didn’t seem to harm us.</p><p>他们觉得没必要告诉我们猫现在在 “猫天堂” 过得很快乐。我父母从未说过死去的人或动物 “去了更好的地方”，或者我们会再见到他们。这似乎并没有伤害到我们。</p><p>My grandmother told us an edited version of the death of my grandfather. She said they’d been sitting reading one day, and when she said something to him, he didn’t answer. He seemed to be asleep, but when she tried to rouse him, she couldn’t. “He was gone.” Having a heart attack sounded like falling asleep. Later I learned it hadn’t been so neat, and the heart attack had taken most of a day to kill him.</p><p>祖母给我们讲了祖父死亡的 “精简版”。她说有一天他们坐着看书，她跟他说话时，他没有回应。他看起来像睡着了，但她想叫醒他时，却做不到。“他就那样走了。” 心脏病发作听起来就像睡着了。后来我才知道，事情并非如此简单，那次心脏病发作花了将近一天才夺走他的生命。</p><p>Along with such outright lies, there must have been a lot of changing the subject when death came up. I can’t remember that, of course, but I can infer it from the fact that I didn’t really grasp I was going to die till I was about 19. How could I have missed something so obvious for so long? Now that I’ve seen parents managing the subject, I can see how: questions about death are gently but firmly turned aside.</p><p>除了这种直白的谎言，当死亡话题出现时，他们肯定还会经常转移话题。我当然不记得了，但我能推断出来：因为我直到 19 岁左右才真正明白自己会死。这么明显的事情，我怎么会忽略这么久？现在我看到父母如何处理这个话题，就明白了：关于死亡的问题会被温柔但坚决地岔开。</p><p>On this topic, especially, they’re met half-way by kids. Kids often want to be lied to. They want to believe they’re living in a comfortable, safe world as much as their parents want them to believe it. [4]</p><p>尤其是在这个话题上，孩子在某种程度上也配合着被欺骗。他们和父母一样，想相信自己生活在一个舒适、安全的世界里。[4]</p><h3 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a><strong>Identity</strong></h3><p><strong>身份</strong></p><p>Some parents feel a strong adherence to an ethnic or religious group and want their kids to feel it too. This usually requires two different kinds of lying: the first is to tell the child that he or she is an X, and the second is whatever specific lies Xes differentiate themselves by believing. [5]</p><p>有些父母强烈认同某个种族或宗教群体，也希望孩子有同样的认同。这通常需要两种不同的谎言：第一种是告诉孩子 “你是 X 群体的人”；第二种是 X 群体为了区分自己而相信的那些特定谎言。[5]</p><p>Telling a child they have a particular ethnic or religious identity is one of the stickiest things you can tell them. Almost anything else you tell a kid, they can change their mind about later when they start to think for themselves. But if you tell a kid they’re a member of a certain group, that seems nearly impossible to shake.</p><p>告诉孩子他们有特定的种族或宗教身份，是你能对他们说的最棘手的事情之一。你告诉孩子的几乎所有其他事情，他们长大后开始独立思考时，都可以改变想法。但如果你告诉孩子他们是某个群体的成员，这似乎几乎无法动摇。</p><p>This despite the fact that it can be one of the most premeditated lies parents tell. When parents are of different religions, they’ll often agree between themselves that their children will be “raised as Xes.” And it works. The kids obligingly grow up considering themselves as Xes, despite the fact that if their parents had chosen the other way, they’d have grown up considering themselves as Ys.</p><p>尽管这可能是父母最蓄意的谎言之一。当父母信仰不同宗教时，他们往往会达成一致，让孩子 “被培养成 X 群体的人”。而且这很有效。孩子们会顺从地长大，认为自己是 X 群体的人，尽管如果父母选择了另一种方式，他们会长大认为自己是 Y 群体的人。</p><p>One reason this works so well is the second kind of lie involved. The truth is common property. You can’t distinguish your group by doing things that are rational, and believing things that are true. If you want to set yourself apart from other people, you have to do things that are arbitrary, and believe things that are false. And after having spent their whole lives doing things that are arbitrary and believing things that are false, and being regarded as odd by “outsiders” on that account, the cognitive dissonance pushing children to regard themselves as Xes must be enormous. If they aren’t an X, why are they attached to all these arbitrary beliefs and customs? If they aren’t an X, why do all the non-Xes call them one?</p><p>这种做法之所以如此有效，原因之一在于其中的第二种谎言。真相是共同财产。你不能通过做理性的事、相信真实的事来区分自己的群体。如果你想与他人区分开来，就必须做武断的事，相信虚假的事。当孩子一生都在做武断的事、相信虚假的事，并因此被 “外人” 视为怪异时，推动他们认为自己是 X 群体成员的认知失调一定非常强烈。如果他们不是 X 群体的人，为什么会执着于这些武断的信仰和习俗？如果他们不是 X 群体的人，为什么所有非 X 群体的人都这么称呼他们？</p><p>This form of lie is not without its uses. You can use it to carry a payload of beneficial beliefs, and they will also become part of the child’s identity. You can tell the child that in addition to never wearing the color yellow, believing the world was created by a giant rabbit, and always snapping their fingers before eating fish, Xes are also particularly honest and industrious. Then X children will grow up feeling it’s part of their identity to be honest and industrious.</p><p>这种谎言并非毫无用处。你可以用它来传递一些有益的信念，这些信念也会成为孩子身份的一部分。你可以告诉孩子，除了从不穿黄色、相信世界是由一只巨大的兔子创造的、吃鱼前必须打响指之外，X 群体的人还特别诚实和勤奋。然后 X 群体的孩子长大后会觉得，诚实和勤奋是自己身份的一部分。</p><p>This probably accounts for a lot of the spread of modern religions, and explains why their doctrines are a combination of the useful and the bizarre. The bizarre half is what makes the religion stick, and the useful half is the payload. [6]</p><p>这可能解释了很多现代宗教的传播，也解释了为什么它们的教义是有用内容和怪异内容的结合。怪异的部分让宗教得以维系，有用的部分是负荷( “payload”)。[6]</p><h3 id="Authority"><a href="#Authority" class="headerlink" title="Authority"></a><strong>Authority</strong></h3><p><strong>权威</strong></p><p>One of the least excusable reasons adults lie to kids is to maintain power over them. Sometimes these lies are truly sinister, like a child molester telling his victims they’ll get in trouble if they tell anyone what happened to them. Others seem more innocent; it depends how badly adults lie to maintain their power, and what they use it for.</p><p>成年人对孩子撒谎最不可原谅的原因之一，是为了维持对他们的控制。有时这些谎言真的很险恶，比如恋童癖告诉受害者，如果他们告诉别人发生了什么，就会惹上麻烦。其他一些则看似无辜；这取决于成年人为了维持权力撒了多少谎，以及他们用权力做什么。</p><p>Most adults make some effort to conceal their flaws from children. Usually their motives are mixed. For example, a father who has an affair generally conceals it from his children. His motive is partly that it would worry them, partly that this would introduce the topic of sex, and partly (a larger part than he would admit) that he doesn’t want to tarnish himself in their eyes.</p><p>大多数成年人都会努力向孩子隐瞒自己的缺点。他们的动机通常很复杂。例如，一个有外遇的父亲通常会对孩子隐瞒这件事。他的动机一部分是怕孩子担心，一部分是这会引出性话题，还有一部分（比他承认的要多）是不想在孩子眼中玷污自己的形象。</p><p>If you want to learn what lies are told to kids, read almost any book written to teach them about “issues.” [7] Peter Mayle wrote one called Why Are We Getting a Divorce? It begins with the three most important things to remember about divorce, one of which is:<br>You shouldn’t put the blame on one parent, because divorce is never only one person’s fault. [8]</p><p>如果你想知道人们对孩子撒了哪些谎，读一读几乎所有为了教他们 “事理” 而写的书。[7] 彼得・梅尔写过一本叫《我们为什么要离婚？》的书。开头列出了关于离婚最需要记住的三件事，其中一件是：<br>你不应该责怪父母中的一方，因为离婚从来都不只是一个人的错。[8]</p><p>Really? When a man runs off with his secretary, is it always partly his wife’s fault? But I can see why Mayle might have said this. Maybe it’s more important for kids to respect their parents than to know the truth about them.</p><p>真的吗？当一个男人和他的秘书私奔时，这也总是有他妻子的一部分责任吗？但我能理解梅尔为什么这么说。或许对孩子来说，尊重父母比知道关于他们的真相更重要。</p><p>But because adults conceal their flaws, and at the same time insist on high standards of behavior for kids, a lot of kids grow up feeling they fall hopelessly short. They walk around feeling horribly evil for having used a swearword, while in fact most of the adults around them are doing much worse things.</p><p>但因为成年人隐瞒自己的缺点，同时又坚持让孩子遵守高标准的行为规范，很多孩子长大后觉得自己无可救药地失败了。他们会因为说了一句脏话而觉得自己极其邪恶，而事实上，他们周围的大多数成年人做得更糟。</p><p>This happens in intellectual as well as moral questions. The more confident people are, the more willing they seem to be to answer a question “I don’t know.” Less confident people feel they have to have an answer or they’ll look bad. My parents were pretty good about admitting when they didn’t know things, but I must have been told a lot of lies of this type by teachers, because I rarely heard a teacher say “I don’t know” till I got to college. I remember because it was so surprising to hear someone say that in front of a class.</p><p>这在知识问题和道德问题上都存在。越自信的人，似乎越愿意回答 “我不知道”。不太自信的人觉得自己必须有答案，否则会显得很糟糕。我的父母很擅长承认自己不知道的事情，但我肯定被老师撒过很多这种谎，因为直到上大学，我才很少听到老师说 “我不知道”。我记得这一点，因为在全班面前听到有人这么说，太令人惊讶了。</p><p>The first hint I had that teachers weren’t omniscient came in sixth grade, after my father contradicted something I’d learned in school. When I protested that the teacher had said the opposite, my father replied that the guy had no idea what he was talking about—that he was just an elementary school teacher, after all.</p><p>我第一次意识到老师并非无所不知，是在六年级，我父亲反驳了我在学校学到的东西。当我抗议说老师说的正好相反时，父亲回答说，那家伙根本不知道自己在说什么 —— 毕竟，他只是个小学老师。</p><p>Just a teacher? The phrase seemed almost grammatically ill-formed. Didn’t teachers know everything about the subjects they taught? And if not, why were they the ones teaching us?</p><p>只是个老师？这句话听起来几乎在语法上都不通。老师难道不应该知道他们教的科目里的所有东西吗？如果不是，那为什么是他们来教我们？</p><p>The sad fact is, US public school teachers don’t generally understand the stuff they’re teaching very well. There are some sterling exceptions, but as a rule people planning to go into teaching rank academically near the bottom of the college population. So the fact that I still thought at age 11 that teachers were infallible shows what a job the system must have done on my brain.</p><p>可悲的是，美国公立学校的老师通常并不太理解他们所教的内容。当然有一些优秀的例外，但通常来说，打算从事教学工作的人，在大学生中的学术排名接近底部。所以，我 11 岁时还认为老师是不会犯错的，这说明这个系统对我的大脑做了多大的 “改造”。</p><h3 id="School"><a href="#School" class="headerlink" title="School"></a><strong>School</strong></h3><p><strong>学校</strong></p><p>What kids get taught in school is a complex mix of lies. The most excusable are those told to simplify ideas to make them easy to learn. The problem is, a lot of propaganda gets slipped into the curriculum in the name of simplification.</p><p>孩子在学校学到的东西是谎言的复杂混合体。最可原谅的是那些为了简化概念、方便学习而说的谎。问题是，很多宣传以简化的名义被塞进了课程。</p><p>Public school textbooks represent a compromise between what various powerful groups want kids to be told. The lies are rarely overt. Usually they consist either of omissions or of over-emphasizing certain topics at the expense of others. The view of history we got in elementary school was a crude hagiography, with at least one representative of each powerful group.</p><p>公立学校的教科书是各种权力群体希望孩子被告知的内容之间的妥协。谎言很少是直白的。通常要么是遗漏，要么是过分强调某些话题而忽略其他。我们在小学学到的历史观是粗糙的圣徒传，每个权力群体至少有一个代表。</p><p>The famous scientists I remember were Einstein, Marie Curie, and George Washington Carver. Einstein was a big deal because his work led to the atom bomb. Marie Curie was involved with X-rays. But I was mystified about Carver. He seemed to have done stuff with peanuts.</p><p>我记得的著名科学家有爱因斯坦、玛丽・居里和乔治・华盛顿・卡佛。爱因斯坦很重要，因为他的工作促成了原子弹的诞生。玛丽・居里与 X 射线有关。但我对卡佛感到困惑，他似乎在花生上做了些研究。</p><p>It’s obvious now that he was on the list because he was black (and for that matter that Marie Curie was on it because she was a woman), but as a kid I was confused for years about him. I wonder if it wouldn’t have been better just to tell us the truth: that there weren’t any famous black scientists. Ranking George Washington Carver with Einstein misled us not only about science, but about the obstacles blacks faced in his time.</p><p>现在很明显，他能上榜是因为他是黑人（玛丽・居里能上榜是因为她是女性），但小时候，我多年来一直对他感到困惑。我想，或许直接告诉我们真相会更好：当时没有著名的黑人科学家。把乔治・华盛顿・卡佛与爱因斯坦相提并论，不仅误导了我们对科学的认知，也误导了我们对他那个时代黑人所面临的障碍的认知。</p><p>As subjects got softer, the lies got more frequent. By the time you got to politics and recent history, what we were taught was pretty much pure propaganda. For example, we were taught to regard political leaders as saints—especially the recently martyred Kennedy and King. It was astonishing to learn later that they’d both been serial womanizers, and that Kennedy was a speed freak to boot. (By the time King’s plagiarism emerged, I’d lost the ability to be surprised by the misdeeds of famous people.)</p><p>学科越 “软”，谎言就越多。到了政治和近代史，我们学到的几乎全是宣传。例如，我们被教导要把政治领袖视为圣人 —— 尤其是最近被暗杀的肯尼迪和金。后来得知他们都是连环花花公子，肯尼迪还是个安非他命成瘾者，真是令人震惊。（当金的剽窃行为曝光时，我已经对名人的恶行不再感到惊讶了。）</p><p>I doubt you could teach kids recent history without teaching them lies, because practically everyone who has anything to say about it has some kind of spin to put on it. Much recent history consists of spin. It would probably be better just to teach them metafacts like that.</p><p>我怀疑，教孩子近代史不可能不撒谎，因为几乎每个对此有话可说的人，都想加入自己的偏见。很多近代史本身就是偏见。或许最好只是教他们诸如此类的 “元事实”。</p><p>Probably the biggest lie told in schools, though, is that the way to succeed is through following “the rules.” In fact most such rules are just hacks to manage large groups efficiently.</p><p>不过，学校里最大的谎言可能是：成功的途径是遵守 “规则”。事实上，大多数这样的规则只是为了高效管理大型群体而采取的权宜之计。</p><h3 id="Peace"><a href="#Peace" class="headerlink" title="Peace"></a><strong>Peace</strong></h3><p><strong>和谐</strong></p><p>Of all the reasons we lie to kids, the most powerful is probably the same mundane reason they lie to us.</p><p>在我们对孩子撒谎的所有原因中，最主要的可能和他们对我们撒谎的原因一样平凡。</p><p>Often when we lie to people it’s not part of any conscious strategy, but because they’d react violently to the truth. Kids, almost by definition, lack self-control. They react violently to things—and so they get lied to a lot. [9]</p><p>我们对别人撒谎，往往不是出于什么有意识的策略，而是因为他们会对真相做出激烈反应。孩子，几乎就定义而言，缺乏自控力。他们会对事情做出激烈反应 —— 所以他们经常被撒谎。[9]</p><p>A few Thanksgivings ago, a friend of mine found himself in a situation that perfectly illustrates the complex motives we have when we lie to kids. As the roast turkey appeared on the table, his alarmingly perceptive 5 year old son suddenly asked if the turkey had wanted to die. Foreseeing disaster, my friend and his wife rapidly improvised: yes, the turkey had wanted to die, and in fact had lived its whole life with the aim of being their Thanksgiving dinner. And that (phew) was the end of that.</p><p>几年前的一个感恩节，我的一个朋友遇到了一件事，完美诠释了我们对孩子撒谎时的复杂动机。当烤火鸡端上桌时，他那个异常敏锐的 5 岁儿子突然问：“这只火鸡愿意死吗？” 预见到灾难的朋友和妻子迅速编了个谎：“是的，这只火鸡愿意死，事实上，它一生的目标就是成为我们的感恩节晚餐。” 然后（呼），这事就过去了。</p><p>Whenever we lie to kids to protect them, we’re usually also lying to keep the peace.</p><p>每当我们为了保护孩子而对他们撒谎时，通常也是为了维持和谐。</p><p>One consequence of this sort of calming lie is that we grow up thinking horrible things are normal. It’s hard for us to feel a sense of urgency as adults over something we’ve literally been trained not to worry about. When I was about 10 I saw a documentary on pollution that put me into a panic. It seemed the planet was being irretrievably ruined. I went to my mother afterward to ask if this was so. I don’t remember what she said, but she made me feel better, so I stopped worrying about it.</p><p>这种 “安抚性谎言” 的一个后果是，我们长大后会认为可怕的事情是正常的。我们很难像成年人那样对某件事感到紧迫，因为我们实际上被训练得不去担心它。我 10 岁左右时看了一部关于污染的纪录片，吓得惊慌失措。当时觉得地球正被不可挽回地破坏。后来我去找妈妈，问是不是这样。我不记得她说了什么，但她让我感觉好多了，所以我就不再担心了。</p><p>That was probably the best way to handle a frightened 10 year old. But we should understand the price. This sort of lie is one of the main reasons bad things persist: we’re all trained to ignore them.</p><p>这可能是处理一个受惊的 10 岁孩子的最佳方式。但我们应该明白其代价。这种谎言是很多坏事持续存在的主要原因之一：我们都被训练得去忽略它们。</p><h3 id="Detox"><a href="#Detox" class="headerlink" title="Detox"></a><strong>Detox</strong></h3><p><strong>解毒</strong></p><p>A sprinter in a race almost immediately enters a state called “oxygen debt.” His body switches to an emergency source of energy that’s faster than regular aerobic respiration. But this process builds up waste products that ultimately require extra oxygen to break down, so at the end of the race he has to stop and pant for a while to recover.</p><p>赛跑中的短跑运动员几乎会立即进入一种叫做 “氧债” 的状态。他的身体会切换到一种比常规有氧呼吸更快的应急能量来源。但这个过程会产生废物，最终需要额外的氧气来分解，所以比赛结束后，他必须停下来喘一会儿气才能恢复。</p><p>We arrive at adulthood with a kind of truth debt. We were told a lot of lies to get us (and our parents) through our childhood. Some may have been necessary. Some probably weren’t. But we all arrive at adulthood with heads full of lies.</p><p>我们成年时，都背负着一种 “真相债”。为了让我们（和我们的父母）度过童年，我们被撒了很多谎。有些可能是必要的，有些可能不是。但我们所有人成年时，脑子里都塞满了谎言。</p><p>There’s never a point where the adults sit you down and explain all the lies they told you. They’ve forgotten most of them. So if you’re going to clear these lies out of your head, you’re going to have to do it yourself.</p><p>从来没有哪个时刻，成年人会坐下来向你解释他们对你撒的所有谎。他们已经忘记了大部分。所以，如果你想把这些谎言从脑子里清除出去，就必须自己动手。</p><p>Few do. Most people go through life with bits of packing material adhering to their minds and never know it. You probably never can completely undo the effects of lies you were told as a kid, but it’s worth trying. I’ve found that whenever I’ve been able to undo a lie I was told, a lot of other things fell into place.</p><p>很少有人会这么做。大多数人一生都带着脑子里的 “包装碎片”，却从未意识到。你可能永远无法完全消除小时候被灌输的谎言带来的影响，但值得一试。我发现，每当我能解开一个被告知的谎言时，很多其他事情都会豁然开朗。</p><p>Fortunately, once you arrive at adulthood you get a valuable new resource you can use to figure out what lies you were told. You’re now one of the liars. You get to watch behind the scenes as adults spin the world for the next generation of kids.</p><p>幸运的是，一旦成年，你就会获得一种宝贵的新资源，可以用来弄清楚自己小时候被撒了哪些谎。你现在成了撒谎者之一。你可以在幕后观察成年人如何为下一代孩子构建这个世界。</p><p>The first step in clearing your head is to realize how far you are from a neutral observer. When I left high school I was, I thought, a complete skeptic. I’d realized high school was crap. I thought I was ready to question everything I knew. But among the many other things I was ignorant of was how much debris there already was in my head. It’s not enough to consider your mind a blank slate. You have to consciously erase it.</p><p>理清思路的第一步，是意识到自己离一个中立的观察者有多远。我高中毕业时，自认为是一个彻底的怀疑论者。我意识到高中很糟糕，以为自己已经准备好质疑所知道的一切。但我忽略了很多其他事情，包括我脑子里已经有了多少 “垃圾”。把自己的思想视为一张白纸是不够的，你必须有意识地去擦拭它。</p><p>Notes</p><p>[1] One reason I stuck with such a brutally simple word is that the lies we tell kids are probably not quite as harmless as we think. If you look at what adults told children in the past, it’s shocking how much they lied to them. Like us, they did it with the best intentions. So if we think we’re as open as one could reasonably be with children, we’re probably fooling ourselves. Odds are people in 100 years will be as shocked at some of the lies we tell as we are at some of the lies people told 100 years ago.</p><p>[1] 我坚持用 “谎言” 这个极其简单的词，原因之一是我们对孩子撒的谎，可能并不像我们想的那么无害。看看过去的成年人对孩子说过什么，你会震惊于他们撒谎的程度。和我们一样，他们的初衷是好的。所以，如果我们觉得自己已经尽可能对孩子坦诚了，很可能是在自欺欺人。有很大概率，100 年后的人们会对我们现在撒的某些谎感到震惊，就像我们对 100 年前的人撒的某些谎感到震惊一样。</p><p>I can’t predict which these will be, and I don’t want to write an essay that will seem dumb in 100 years. So instead of using special euphemisms for lies that seem excusable according to present fashions, I’m just going to call all our lies lies.</p><p>我无法预测哪些谎言会是如此，也不想写一篇 100 年后会显得愚蠢的文章。所以，我不会用那些符合当下潮流、看似 “情有可原” 的委婉语来指代谎言，而是直接把所有谎言都称为 “谎言”。</p><p>(I have omitted one type: lies told to play games with kids’ credulity. These range from “make-believe,” which is not really a lie because it’s told with a wink, to the frightening lies told by older siblings. There’s not much to say about these: I wouldn’t want the first type to go away, and wouldn’t expect the second type to.)</p><p>（我省略了一种谎言：为了戏耍孩子的轻信而撒的谎。这类谎言范围很广，从 “假装游戏”（这其实不算真正的谎言，因为说的时候带着暗示）到年长的兄弟姐妹说的吓人谎言。关于这些，没太多好说的：我不希望第一种消失，也不指望第二种会消失。）</p><p>[2] Calaprice, Alice (ed.), The Quotable Einstein, Princeton University Press, 1996.</p><p>[2] 卡拉普赖斯，爱丽丝（编），《爱因斯坦语录》，普林斯顿大学出版社，1996 年。</p><p>[3] If you ask parents why kids shouldn’t swear, the less educated ones usually reply with some question-begging answer like “it’s inappropriate,” while the more educated ones come up with elaborate rationalizations. In fact the less educated parents seem closer to the truth.</p><p>[3] 如果你问父母为什么孩子不能说脏话，教育程度较低的父母通常会给出一些循环论证的答案，比如 “这不合适”，而教育程度较高的父母则会想出复杂的合理化解释。事实上，教育程度较低的父母似乎更接近真相。</p><p>[4] As a friend with small children pointed out, it’s easy for small children to consider themselves immortal, because time seems to pass so slowly for them. To a 3 year old, a day feels like a month might to an adult. So 80 years sounds to him like 2400 years would to us.</p><p>[4] 正如一位有小孩的朋友指出的，小孩子很容易觉得自己是不朽的，因为对他们来说，时间过得太慢了。对一个 3 岁的孩子来说，一天的感觉就像成年人眼中的一个月。所以，80 年对他来说，就像 2400 年对我们来说一样漫长。</p><p>[5] I realize I’m going to get endless grief for classifying religion as a type of lie. Usually people skirt that issue with some equivocation implying that lies believed for a sufficiently long time by sufficiently large numbers of people are immune to the usual standards for truth. But because I can’t predict which lies future generations will consider inexcusable, I can’t safely omit any type we tell. Yes, it seems unlikely that religion will be out of fashion in 100 years, but no more unlikely than it would have seemed to someone in 1880 that schoolchildren in 1980 would be taught that masturbation was perfectly normal and not to feel guilty about it.</p><p>[5] 我知道，把宗教归为一种谎言会招来无尽的指责。通常人们会含糊其辞地回避这个问题，暗示只要足够多的人相信足够长时间的谎言，就可以不受常规真理标准的评判。但因为我无法预测未来世代会认为哪些谎言不可原谅，所以不能贸然省略我们说过的任何一种谎言。诚然，100 年后宗教可能依然流行，这看似合理，但这并不比 1880 年的人预测 1980 年的学童会被教导 “自慰完全正常，不必为此内疚” 更不合理。</p><p>[6] Unfortunately the payload can consist of bad customs as well as good ones. For example, there are certain qualities that some groups in America consider “acting white.” In fact most of them could as accurately be called “acting Japanese.” There’s nothing specifically white about such customs. They’re common to all cultures with long traditions of living in cities. So it is probably a losing bet for a group to consider behaving the opposite way as part of its identity.</p><p>[6] 不幸的是，这种 “承载的内容” 既可能包含好习俗，也可能包含坏习俗。例如，美国有些群体认为某些品质是 “装白人”。事实上，这些品质更准确地说应该是 “装日本人”。这类习俗并非白人所特有，而是所有有着悠久城市生活传统的文化所共有的。所以，一个群体把与之相反的行为当作自身身份的一部分，很可能是个失败的赌注。</p><p>[7] In this context, “issues” basically means “things we’re going to lie to them about.” That’s why there’s a special name for these topics.</p><p>[7] 在这种语境下，“议题”（issues）本质上就是 “我们要对他们撒谎的事情”。这就是为什么这些话题有专门的名称。</p><p>[8] Mayle, Peter, Why Are We Getting a Divorce?, Harmony, 1988.</p><p>[8] 梅尔，彼得，《我们为什么要离婚？》，和谐出版社，1988 年。</p><p>[9] The ironic thing is, this is also the main reason kids lie to adults. If you freak out when people tell you alarming things, they won’t tell you them. Teenagers don’t tell their parents what happened that night they were supposed to be staying at a friend’s house for the same reason parents don’t tell 5 year olds the truth about the Thanksgiving turkey. They’d freak if they knew.</p><p>[9] 讽刺的是，这也是孩子对成年人撒谎的主要原因。如果你听到惊人的消息就反应激烈，别人就不会告诉你了。青少年不告诉父母他们本应在朋友家过夜的那晚发生了什么，和父母不告诉 5 岁孩子感恩节火鸡的真相，原因是一样的：怕他们知道后反应激烈。</p><p>Thanks to Sam Altman, Marc Andreessen, Trevor Blackwell, Patrick Collison, Jessica Livingston, Jackie McDonough, Robert Morris, and David Sloo for reading drafts of this. And since there are some controversial ideas here, I should add that none of them agreed with everything in it.</p><p>感谢山姆・奥特曼、马克・安德森、特雷弗・布莱克韦尔、帕特里克・科里森、杰西卡・利文斯顿、杰基・麦克多诺、罗伯特・莫里斯和大卫・斯卢阅读了本文的草稿。由于文中有一些有争议的观点，我应该补充一句：他们并非都同意文中的所有内容。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>来时的路——保罗·格雷厄姆</title>
    <link href="/2025/08/09/what-i-worked-on/"/>
    <url>/2025/08/09/what-i-worked-on/</url>
    
    <content type="html"><![CDATA[<h2 id="What-I-Worked-On"><a href="#What-I-Worked-On" class="headerlink" title="What I Worked On"></a>What I Worked On</h2><p>原文链接: <a href="https://paulgraham.com/worked.html">https://paulgraham.com/worked.html</a></p><p>February 2021</p><h3 id="1979"><a href="#1979" class="headerlink" title="1979"></a>1979</h3><p>Before college the two main things I worked on, outside of school, were writing and programming. I didn’t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.</p><p>上大学前，除了学业，我主要投入的两件事是写作和编程。我写的不是散文，而是当时（或许现在依然）新手作家该写的东西：短篇小说。我的小说糟透了，几乎没有情节，只有充满强烈情感的角色 —— 我曾以为这会让故事显得深刻。</p><p>The first programs I tried writing were on the IBM 1401 that our school district used for what was then called “data processing.” This was in 9th grade, so I was 13 or 14. The school district’s 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain’s lair down there, with all these alien-looking machines — CPU, disk drives, printer, card reader — sitting up on a raised floor under bright fluorescent lights.</p><p>我最早尝试写程序是在学区用于 “数据处理” 的 IBM 1401 电脑上。那是九年级，我大概 13 或 14 岁。学区的 1401 恰好在我们初中的地下室，我和朋友里奇・德雷夫斯获准使用它。那地方像个迷你邦德反派的巢穴：CPU、磁盘驱动器、打印机、读卡机，这些长得像外星造物的机器架在高架地板上，被明亮的荧光灯照着。</p><p>The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.</p><p>我们用的是早期版本的 Fortran。得把程序打在穿孔卡上，再把卡片堆进读卡机，按个按钮，程序就会载入内存运行。结果通常是在震耳欲聋的打印机上打出点东西。</p><p>I was puzzled by the 1401. I couldn’t figure out what to do with it. And in retrospect there’s not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn’t have any data stored on punched cards. The only other option was to do things that didn’t rely on any input, like calculate approximations of pi, but I didn’t know enough math to do anything interesting of that type. So I’m not surprised I can’t remember any programs I wrote, because they can’t have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn’t. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager’s expression made clear.</p><p>我对 1401 很困惑，不知道能用它做什么。现在回想，其实我也做不了多少事。程序的唯一输入方式是穿孔卡上的数据，可我没有任何存在穿孔卡上的数据。另一个选择是做不需要输入的事，比如计算圆周率的近似值，但我的数学知识不足以支撑这类有趣的尝试。所以我记不起自己写过什么程序也不奇怪 —— 它们本就干不了什么。我最清晰的记忆是，当我发现程序可能无限循环时，我的某个程序就陷入了这种状态。在没有分时系统的机器上，这不仅是技术错误，更是社交错误 —— 数据中心经理的表情把这点说得明明白白。</p><p>With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]</p><p>微型计算机的出现改变了一切。现在，电脑能就放在你面前的桌上，运行时能响应你的按键，而不是啃完一叠穿孔卡就停下来。[1]</p><p>The first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.</p><p>我的朋友中第一个有微型计算机的人是自己组装的 —— 那是 Heathkit 公司卖的套件。我清楚记得看着他坐在电脑前直接输入程序时，心里的震撼和羡慕。</p><p>Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he’d write 2 pages at a time and then print them out, but it was a lot better than a typewriter.</p><p>那时候电脑很贵，我软磨硬泡了好几年，才说服父亲在 1980 年左右买了一台 TRS-80。当时的黄金标准是 Apple II，但 TRS-80 也够用了。就是从这时起，我才真正开始编程：写简单的游戏、预测模型火箭飞行高度的程序，还有一个文字处理器 —— 我父亲用它至少写了一本书。内存只能存大约两页文本，所以他每次写两页就打印出来，但这已经比打字机好太多了。</p><h3 id="1985"><a href="#1985" class="headerlink" title="1985"></a>1985</h3><p>Though I liked programming, I didn’t plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn’t much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.</p><p>虽然我喜欢编程，但没打算在大学学这个。我本想学生哲学 —— 这听起来更 “厉害”。在天真的高中生眼里，哲学研究的是终极真理，相比之下，其他学科的内容都只是 “领域知识”。但到了大学我才发现，其他学科已经占据了思想领域的大部分空间，留给这些所谓 “终极真理” 的地方所剩无几。哲学似乎只剩下其他学科认为可以安全忽略的边缘问题。</p><p>I couldn’t have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.</p><p>18 岁时我还说不清这些。我只知道，我一门接一门地选哲学课，却一门比一门觉得无聊。于是我决定转去学人工智能（AI）。</p><p>AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called The Moon is a Harsh Mistress, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven’t tried rereading The Moon is a Harsh Mistress, so I don’t know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we’d have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.</p><p>20 世纪 80 年代中期，AI 风头正劲，但有两件事尤其让我想投身其中：海因莱茵的小说《严厉的月亮》，里面有个叫 “迈克” 的智能电脑；还有 PBS 的一部纪录片，讲特里・威诺格拉德用 SHRDLU（一种自然语言处理程序）的场景。我没再重读《严厉的月亮》，不知道它现在读起来怎么样，但当时我完全被它的世界吸引了。我觉得拥有 “迈克” 只是时间问题，而看到威诺格拉德用 SHRDLU 时，我甚至觉得这一天最多只要几年 —— 只要教 SHRDLU 更多单词就行。</p><p>There weren’t any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers’ ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL&#x2F;I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn’t happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.</p><p>康奈尔大学当时没有 AI 课，连研究生课都没有，所以我开始自学。这意味着要学 Lisp—— 那时候 Lisp 被视为 AI 的语言。当时常用的编程语言都很原始，程序员的思路也相应受限。康奈尔的默认语言是类似 Pascal 的 PL&#x2F;I，其他地方也差不多。学 Lisp 让我对 “程序” 的认知飞速拓展，过了好几年我才摸到新的边界。这才像话 —— 这才是我对大学的期待。虽然它没发生在课堂上，但没关系。接下来的几年，我一路顺风顺水，知道自己要做什么。</p><p>For my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief — hard to imagine now, but not unique in 1985 — that it was already climbing the lower slopes of intelligence.</p><p>我的本科毕业论文是逆向工程 SHRDLU。天啊，我太爱做这个程序了。它的代码很精妙，但更让我兴奋的是一种信念 —— 现在很难想象，但在 1985 年并不少见 —— 我觉得它已经踏上了智能的初级阶段。</p><p>I had gotten into a program at Cornell that didn’t make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose “Artificial Intelligence.” When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.</p><p>康奈尔有个特殊项目，不用选专业：可以随便选课，学位上的内容也可以自己定。我当然选了 “人工智能”。但拿到实体文凭时，我沮丧地发现，引号被保留了下来，看起来像 “讽刺性引号”。当时这让我很不爽，现在却觉得讽刺般地准确 —— 原因我很快就会发现。</p><p>I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I’d visited because Rich Draves went there, and was also home to Bill Woods, who’d invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.</p><p>我申请了 3 所研究生院：当时以 AI 闻名的 MIT 和耶鲁，还有哈佛 —— 我因为里奇・德雷夫斯在那而去过，而且比尔・伍兹也在哈佛，他发明了我在 SHRDLU 复制品中用的解析器类型。只有哈佛录取了我，所以我去了哈佛。</p><p>I don’t remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that’s told “the dog is sitting on the chair” translates this into some formal representation and adds it to the list of things it knows.</p><p>我不记得具体是哪一刻，甚至不确定有没有某个具体时刻，但研一的时候，我意识到当时实践中的 AI 是个骗局。我指的是那种：程序被告知 “狗坐在椅子上”，就把这句话转换成某种形式化表示，再加入 “已知信息” 列表的 AI。</p><p>What these programs really showed was that there’s a subset of natural language that’s a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.</p><p>这些程序真正展示的是：自然语言中存在一个子集是形式语言，但只是非常小的子集。很明显，它们能做的事和真正理解自然语言之间，有一道无法逾越的鸿沟。事实证明，根本不是 “教 SHRDLU 更多单词” 那么简单。那种用明确数据结构表示概念的 AI 路子，走不通。和很多情况一样，这种 “行不通” 催生了大量论文，讨论各种 “补丁”，但永远也造不出 “迈克”。</p><p>So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It’s scary to think how little I knew about Lisp hacking when I started writing that book. But there’s nothing like writing a book about something to help you learn it. The book, On Lisp, wasn’t published till 1993, but I wrote much of it in grad school.</p><p>于是我在计划的残骸中寻找能挽救的东西 —— 找到了 Lisp。我从经验中知道，Lisp 本身就很有趣，不只是因为和 AI 有关，尽管当时人们关注它主要是因为 AI。所以我决定专注于 Lisp，甚至想写一本关于 Lisp 编程的书。现在想来，刚开始写的时候，我对 Lisp 编程的了解少得吓人。但没什么比写一本关于某件事的书更能帮你学会它了。这本书叫《On Lisp》，1993 年才出版，但大部分是在研究生院写的。</p><p>Computer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory — indeed, a sneaking suspicion that it was the more admirable of the two halves — but building things seemed so much more exciting.</p><p>计算机科学是 “理论” 和 “系统” 两部分的微妙结合：理论研究者证明东西，系统研究者构建东西。我想构建东西。我很尊重理论 —— 甚至暗自觉得它可能是更值得钦佩的那一半 —— 但构建东西看起来有趣得多。</p><p>The problem with systems work, though, was that it didn’t last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.</p><p>但系统工作的问题是不持久。你今天写的程序，无论多好，最多几十年就会过时。人们可能在脚注里提到你的软件，但没人会真的用它。而且它看起来会很简陋，只有了解这个领域历史的人才知道，它在当时有多出色。</p><p>There were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.</p><p>有一次，计算机实验室里有一些多余的施乐 Dandelion 电脑，谁想玩都可以拿一台。我一时有点动心，但以现在的标准看它们太慢了 —— 有什么意义呢？其他人也不想要，最后它们就被处理掉了。系统工作的命运就是这样。</p><h3 id="1988"><a href="#1988" class="headerlink" title="1988"></a>1988</h3><p>I wanted not just to build things, but to build things that would last.</p><p>我不仅想构建东西，还想构建能持久的东西。</p><p>In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I’d spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn’t become obsolete. Some of the best ones were hundreds of years old.</p><p>带着这种不满，1988 年我去卡内基梅隆大学看望里奇・德雷夫斯（他在那读博）。有一天我去了卡内基研究所 —— 小时候我常去那。看着一幅画时，我突然明白了一件现在看来很明显、但当时让我很惊讶的事：挂在墙上的画，是一种能持久的创造。绘画不会过时，有些最棒的画已经有几百年历史了。</p><p>And moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn’t have a boss, or even need to get research funding.</p><p>而且，靠这个能谋生。当然，不像写软件那么容易，但我想，只要足够勤奋、生活节俭，肯定能赚到活下去的钱。而且作为艺术家，你能真正独立：没有老板，甚至不需要申请研究经费。</p><p>I had always liked looking at paintings. Could I make them? I had no idea. I’d never imagined it was even possible. I knew intellectually that people made art — that it didn’t just appear spontaneously — but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in Life magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.</p><p>我一直喜欢看画，但我能画吗？我不知道。我从没想过这有可能。我理智上知道艺术是人创造的 —— 不是凭空出现的 —— 但总觉得创造艺术的人是另一个物种：要么是很久以前的人，要么是《生活》杂志上那些做着奇怪事的神秘天才。“创作” 艺术 —— 把这个动词放在名词前面 —— 这个想法本身就像奇迹。</p><p>That fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.</p><p>那年秋天，我开始在哈佛上艺术课。研究生可以选任何系的课，我的导师汤姆・奇塔姆很随和。就算他知道我选了些奇怪的课，也从没说过什么。</p><p>So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at On Lisp. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.</p><p>就这样，我在计算机科学博士项目里，却计划当艺术家，同时还真心热爱 Lisp 编程、忙着写《On Lisp》。换句话说，和很多研究生一样，我在为很多不是论文的项目拼命。</p><p>I didn’t see a way out of this situation. I didn’t want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he’d found such a spectacular way to get out of grad school.</p><p>我找不到出路。不想从研究生院退学，但除此之外还有什么办法？记得 1988 年，我朋友罗伯特・莫里斯因为写了互联网蠕虫程序被康奈尔开除时，我甚至有点羡慕 —— 他找到了这么 “精彩” 的退学方式。</p><h3 id="1990"><a href="#1990" class="headerlink" title="1990"></a>1990</h3><p>Then one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn’t have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of On Lisp where I could, and I was able to respond, with no perceptible delay “Yes, I think so. I’ll give you something to read in a few days.”</p><p>1990 年 4 月的一天，事情有了转机。我碰到奇塔姆教授，他问我能不能在 6 月毕业。我的论文一个字都没写，但这辈子最快的思考可能就是那一刻了：我决定赌一把，在剩下的 5 周左右时间里写出来，能复用《On Lisp》的部分就复用。我立刻回答：“可以，我想没问题。几天后给您东西看。”</p><p>I picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There’s a whole world there that’s barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.</p><p>我选了 “延续的应用” 作为主题。现在想来，我本该写宏和嵌入式语言 —— 那片领域几乎还没被探索过。但我只想离开研究生院，仓促写就的论文刚好够格。</p><p>Meanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.</p><p>同时，我在申请艺术学校：美国的 RISD（罗德岛设计学院）和佛罗伦萨美术学院 —— 我觉得它是最古老的艺术学校，应该很棒。RISD 录取了我，佛罗伦萨那边没消息，所以我准备去普罗维登斯（RISD 所在地）。</p><p>I’d applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.</p><p>我申请的是 RISD 的 BFA 项目，相当于再上一次大学。这没听起来那么奇怪，因为我才 25 岁，艺术学校里各种年龄的人都有。RISD 把我算成转学生，大二，说我得在夏天上基础课 —— 所有人都要学的绘画、色彩、设计之类的基础课。</p><p>Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they’d sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I’d done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.</p><p>夏末，我收到了一个大惊喜：佛罗伦萨美术学院的信。信被耽搁了，因为他们寄到了英国剑桥，而不是美国马萨诸塞州的剑桥。信里邀请我秋天去佛罗伦萨参加入学考试，只剩几周时间了。我好心的房东让我把东西放在她的阁楼里。我在研究生院做咨询攒了些钱 —— 省着花的话，大概够活一年。现在，我只需要学意大利语。</p><p>Only stranieri (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many stranieri attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don’t know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. [2]</p><p>只有 “外国人” 需要参加入学考试。现在想来，这可能是为了排挤外国人 —— 太多外国人被 “在佛罗伦萨学艺术” 吸引，不然意大利学生可能会被淹没。那个夏天在 RISD 的基础课让我的绘画和素描还算过得去，但我至今不知道怎么通过笔试的。我记得作文题是写塞尚，我把 intellectual 层面拉到最高，好掩盖词汇量的不足。[2]</p><p>I’m only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn’t require the faculty to teach anything, and in return the faculty wouldn’t require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they’d seen in American art magazines.</p><p>才 25 岁，人生的模式就已经很明显了：我又一次进入某个名校，希望学习某个 “高大上” 的学科，又一次即将失望。佛罗伦萨美术学院绘画系的师生人都超好，但他们早就达成了默契：学生不要求老师教东西，老师也不要求学生学东西。同时，所有人都表面上遵守 19 世纪画室的规矩。我们真的有那种小炉子，烧柴的，就像你在 19 世纪画室画里看到的那样，还有个裸体模特坐在旁边，离炉子近得差点烧到。但除了我，几乎没人画她。其他学生都在聊天，偶尔模仿美国艺术杂志上的东西。</p><p>Our model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She’d copy an obscure old painting out of a book, and then he’d take the copy and maltreat it to make it look old. [3]</p><p>后来发现，那个模特就住在我街对面。她靠当模特和给当地古董商仿画谋生：从书里找一幅冷门的古画临摹，然后古董商把仿品做旧。[3]</p><p>While I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can’t move. People can’t sit for more than about 15 minutes at a time, and when they do they don’t sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you’re painting. Whereas a still life you can, if you want, copy pixel by pixel from what you’re seeing. You don’t want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it’s been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it’s the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. [4]</p><p>在美术学院上学时，我开始晚上在卧室画静物。画很小，因为房间小，而且我用的是剩画布 —— 当时只买得起这个。画静物和画人不一样，顾名思义，静物不会动。人一次最多坐 15 分钟，还坐不稳。所以画人的传统方法是：先会画 “通用的人”，再根据具体的人修改。而静物呢，只要你想，可以像像素级复制一样照着画。但当然不能只停在这一步，不然就只是照片级的准确。静物的有趣之处在于它经过了人的思考：你要强调那些视觉线索，比如某个地方颜色突变，是因为那是物体的边缘。通过巧妙强调这些，你能画出比照片更 “真实” 的画 —— 不只是比喻意义上，而是严格的信息论意义上。[4]</p><p>I liked painting still lives because I was curious about what I was seeing. In everyday life, we aren’t consciously aware of much we’re seeing. Most visual perception is handled by low-level processes that merely tell your brain “that’s a water droplet” without telling you details like where the lightest and darkest points are, or “that’s a bush” without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there’s a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can after days of trying to write an essay about something people usually take for granted.</p><p>我喜欢画静物，因为我好奇自己看到的东西。日常生活中，我们不会有意识地注意大部分所见。多数视觉感知由低层处理完成，只告诉大脑 “那是水滴”，却不说最亮和最暗的点在哪里；或者 “那是灌木”，却不说每片叶子的形状和位置。这是大脑的功能，不是缺陷 —— 日常生活中，注意每片叶子会很分心。但当你必须画某样东西时，就得看得更仔细，这时你会发现太多细节。就算画的是人们习以为常的东西，画了几天之后，你仍能发现新东西 —— 就像写一篇关于习以为常的事物的散文，写了几天还能有新发现。</p><p>This is not the only way to paint. I’m not 100% sure it’s even a good way to paint. But it seemed a good enough bet to be worth trying.</p><p>这不是唯一的绘画方式，我也不确定它是不是好方式。但当时觉得值得一试。</p><p>Our teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn’t teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.</p><p>我们的老师乌利维教授人很好。他看得出我很努力，给了我好成绩，写在每个学生都有的那种 “护照” 上。但美术学院只教会了我意大利语，钱也快花光了，所以第一年末我回了美国。</p><p>I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. [5]</p><p>我想回 RISD，但已经没钱了，而且 RISD 很贵。于是我决定先工作一年，明年秋天再回去。我在一家叫 Interleaf 的公司找到了工作 —— 他们做文档创建软件。你是说像微软 Word？没错。就是这样，我明白了低端软件往往会吃掉高端软件。但 Interleaf 当时还能撑几年。[5]</p><p>Interleaf had done something pretty bold. Inspired by Emacs, they’d added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I’ve had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn’t know C and didn’t want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of friction. Toward the end of the year I spent much of my time surreptitiously working on On Lisp, which I had by this time gotten a contract to publish.</p><p>Interleaf 做过一件很大胆的事：受 Emacs 启发，他们加了一种脚本语言，还是 Lisp 的方言。现在他们需要一个 Lisp 程序员用它写东西。这是我最接近 “正常工作” 的一次，在此我要向老板和同事道歉 —— 我是个糟糕的员工。他们的 Lisp 就像巨大 C 语言蛋糕上薄薄的糖霜，而我不懂 C，也不想学，所以始终没搞懂大部分软件。再加上我极其不负责任：那时候编程工作意味着每天在特定时间到岗，这在我看来很不自然。现在世界似乎在向我这边倾斜，但当时这造成了很多摩擦。那年快结束时，我大部分时间都在偷偷写《On Lisp》—— 当时已经签了出版合同。</p><p>The good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.</p><p>好处是薪水很高，以艺术生的标准看尤其如此。在佛罗伦萨，付完房租后，我每天其他开销的预算是 7 美元。现在，就算只是坐在会议里，每小时也能赚 4 倍多。省着花不仅攒够了回 RISD 的钱，还还清了大学贷款。</p><p>I learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it’s better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it’s depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there’s not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.</p><p>在 Interleaf 学到了些有用的东西，不过大多是 “不该做什么”：科技公司最好由产品人而非销售人运营（虽然销售是真本事，厉害的人是真厉害）；太多人改代码会出 bug；办公室再便宜，太压抑也不值；计划好的会议不如走廊闲聊；大客户的钱很危险；常规工作时间和编程的最佳时间没多少重叠，常规办公室也不是编程的最佳地点。</p><p>But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it’s good to be the “entry level” option, even though that will be less prestigious, because if you’re not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.</p><p>但最重要的是，我学到了一个后来在 Viaweb 和 Y Combinator 都用到的道理：低端吃掉高端。做 “入门级” 选项很好，虽然没那么光鲜，因为如果你不做，别人也会做，然后把你挤垮。这意味着，“光鲜” 是个危险信号。</p><p>When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.</p><p>第二年秋天离开 Interleaf 回 RISD 时，我安排了为客户项目组做 freelance（自由职业），接下来几年就靠这个活。后来回去做项目时，有人跟我提了个叫 HTML 的新东西，说它是 SGML 的衍生品。Interleaf 里到处都是标记语言爱好者，我没当回事 —— 但这个 HTML 后来成了我生活的重要部分。</p><h3 id="1992"><a href="#1992" class="headerlink" title="1992"></a>1992</h3><p>In the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.</p><p>1992 年秋天，我回到普罗维登斯继续上 RISD。基础课只是入门，佛罗伦萨美术学院像个（很文明的）笑话。现在我要看看真正的艺术学校是什么样 —— 但可惜，它和美术学院差不多。组织得更好，也贵得多，但越来越明显：艺术学校和艺术的关系，不像医学院和医学的关系 —— 至少绘画系是这样。我隔壁邻居所在的纺织系似乎很严格，插画和建筑系大概也是。但绘画系已经 “后严格” 了：绘画学生应该 “表达自己”，对更世故的人来说，这意味着搞出某种独特的标志性风格。</p><p>A signature style is the visual equivalent of what in show business is known as a “schtick”: something that immediately identifies the work as yours and no one else’s. For example, when you see a painting that looks like a certain kind of cartoon, you know it’s by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That’s not always why artists have a signature style, but it’s usually why buyers pay a lot for such work. [6]</p><p>标志性风格就像娱乐圈的 “噱头”，能让作品一眼被认出是你的。比如看到某种卡通风格的画，就知道是罗伊・利希滕斯坦的。所以如果对冲基金经理的公寓里挂着一幅这种画，你就知道他花了几百万。这不全是艺术家搞标志性风格的原因，但往往是买家愿意花大价钱的原因。[6]</p><p>There were plenty of earnest students too: kids who “could draw” in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.</p><p>也有很多认真的学生：高中 “会画画”，来到这所号称全国最好的艺术学校，想画得更好。他们在 RISD 往往感到困惑和挫败，但还是坚持，因为画画是他们的事业。我不是高中就会画画的人，但在 RISD，我肯定更接近他们，而不是那些追求标志性风格的人。</p><p>I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn’t much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! [7]</p><p>在 RISD 的色彩课上学到了很多，但其他时候基本是自学绘画 —— 这完全可以免费做。所以 1993 年我退学了。在普罗维登斯待了一阵，大学朋友南希・帕梅特帮了我个大忙：她妈妈在纽约有栋楼，里面有个租金管制的公寓要空出来，问我要不要。比我当时的住处大不了多少，但纽约据说是艺术家该待的地方。当然要！[7]</p><p>Asterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there’s a tiny corner that’s not rich, or at least wasn’t in 1993. It’s called Yorkville, and that was my new home. Now I was a New York artist — in the strictly technical sense of making paintings and living in New York.</p><p>《高卢英雄传》漫画开头，镜头拉近到罗马高卢的一个小角落，发现那里没被罗马人控制。在纽约地图上也能这么做：拉近上东区，有个小角落不富裕 —— 至少 1993 年是这样。那地方叫约克维尔，成了我的新家。现在，我是纽约艺术家了 —— 严格来说，就是画画，住纽约。</p><p>I was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn’t want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, ANSI Common Lisp, is one that I painted around this time.)</p><p>我很担心钱，因为感觉 Interleaf 在走下坡路。Lisp 自由职业的活很少，我又不想用其他语言编程 —— 那时候运气好的话是 C++。于是，凭着我对赚钱机会的 “敏锐” 嗅觉，我决定再写一本 Lisp 的书。这次要写本通俗的，能当教材的。我想象自己靠版税节俭生活，把所有时间都用来画画。（《ANSI Common Lisp》这本书的封面画，就是我那时候画的。）</p><p>The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I’d taken her painting class at Harvard. I’ve never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.</p><p>纽约对我来说最好的是有伊德尔和朱利安・韦伯。伊德尔・韦伯是画家，早期照相写实主义者之一，我在哈佛上过她的绘画课。我从没见过哪个老师像她这样受学生爱戴，很多往届学生都和她保持联系，包括我。搬到纽约后，我成了她事实上的工作室助理。</p><p>She liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn’t that much older than me, and was super rich. The thought suddenly occurred to me: why don’t I become rich? Then I’ll be able to work on whatever I want.</p><p>她喜欢在大的方形画布上画，边长 4 到 5 英尺。1994 年底的一天，我正在绷一幅这样的巨画，收音机里在说一个著名的基金经理。他没比我大多少，却超级有钱。我突然想：我为什么不变得有钱呢？那样就能做任何想做的事了。</p><p>Meanwhile I’d been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I’d seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.</p><p>与此同时，我越来越多地听到 “万维网” 这个新东西。去剑桥看望罗伯特・莫里斯（他当时在哈佛读博）时，他给我演示了一下。我觉得网络会成大事。我见过图形用户界面（GUI）如何让微型计算机普及，网络似乎会让互联网也这样。</p><p>If I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can’t honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn’t want to be online, and still don’t, not the fancy ones. That’s not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.</p><p>如果想变富，这就是下一班列车。这部分我是对的。错的是想法：我决定开公司，帮艺术画廊上网。看了那么多 Y Combinator 的申请后，我坦白说，这不算最烂的创业想法，但也差不多了。艺术画廊不想上网，现在也不想 —— 至少高档画廊不想，这不是他们的销售方式。我写了些软件帮画廊生成网站，罗伯特写了些代码调整图片大小、搭 HTTP 服务器。然后我们试着签画廊。说这是 “难卖” 都太轻了 —— 简直是送都送不出去。几个画廊让我们免费做了网站，但没人付钱。</p><p>Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we’d been generating for galleries. This impressive-sounding thing called an “internet storefront” was something we already knew how to build.</p><p>后来一些在线商店出现了，我意识到除了 “下单” 按钮，它们和我们给画廊做的网站一模一样。那个听起来很厉害的 “互联网店面”，我们早就会做了。</p><p>So in the summer of 1995, after I submitted the camera-ready copy of ANSI Common Lisp to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we’d at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores — in Lisp, of course.</p><p>1995 年夏天，我把《ANSI Common Lisp》的终稿交给出版商后，我们开始写构建在线商店的软件。一开始想做普通桌面软件 —— 那时候意味着 Windows 软件。这很吓人，因为我们俩都不会写 Windows 软件，也不想学。我们活在 Unix 世界里。但还是决定先在 Unix 上试试做个商店构建器的原型：罗伯特写购物车，我写新的商店网站生成器 —— 当然用 Lisp。</p><p>We were working out of Robert’s apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we’d never have to write anything to run on users’ computers. We could generate the sites on the same server we’d serve them from. Users wouldn’t need anything more than a browser.</p><p>我们在剑桥罗伯特的公寓里工作。他的室友经常不在，我就能睡他房间。不知为什么，那房间没有床架和床单，只有床垫放地上。一天早上躺在床垫上时，我突然坐直了：如果软件跑在服务器上，用户点链接控制它呢？这样就永远不用写用户端软件了。可以在服务器上生成网站，用户只需要浏览器。</p><p>This kind of software, known as a web app, is common now, but at the time it wasn’t clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.</p><p>这种叫 “网页应用” 的软件现在很常见，但当时甚至不清楚是否可行。为了验证，我们决定做一个能通过浏览器控制的商店构建器。几天后的 8 月 12 日，我们做成了一个能运行的版本。界面很烂，但证明了完全可以通过浏览器建商店，不需要任何客户端软件，也不用在服务器命令行输入东西。</p><p>Now we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn’t need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.</p><p>我们觉得这下真的找对了方向。我甚至幻想新一代软件都这样：不用考虑版本、移植之类的破事。在 Interleaf，有个叫 “发布工程” 的团队，规模似乎和写软件的团队差不多大。而现在，直接在服务器上更新软件就行。</p><p>We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle’s husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator’s. We knew founders needed something like this, because we’d needed it ourselves.</p><p>我们开了家新公司，叫 Viaweb—— 因为软件通过网络（via the web）工作。伊德尔的丈夫朱利安给了 1 万美元种子投资，作为回报，我们给了他 10% 的股份（他还做了初期法务、给了商业建议）。十年后，这成了 Y Combinator 的模式：我们知道创始人需要这样的帮助，因为我们自己就需要过。</p><p>At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I’d made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.</p><p>当时我的净资产是负的 —— 银行里的一千美元左右，还不够欠政府的税（我有没有认真存下 Interleaf 咨询工作的钱？当然没有）。所以虽然罗伯特有研究生津贴，我得靠这笔种子投资生活。</p><p>We originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.</p><p>我们原本希望 9 月上线，但越做越想把软件弄好。最终做出了一个所见即所得（WYSIWYG）的网站构建器：创建页面时，看起来和最终生成的静态页面完全一样，只是链接指向的不是静态页面，而是服务器哈希表里存的闭包。</p><p>It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.</p><p>学过艺术帮了忙：在线商店构建器的核心是让用户看起来 “正规”，而正规的关键是高制作水准。只要页面布局、字体、颜色对了，一个在卧室开商店的人能看起来比大公司还正规。</p><p>(If you’re curious why my site looks so old-fashioned, it’s because it’s still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)</p><p>（如果你好奇我的网站为什么这么老派，因为它还用着这个软件。现在看可能粗糙，但 1996 年时，它是最 slick 的。）</p><p>In September, Robert rebelled. “We’ve been working on this for a month,” he said, “and it’s still not done.” This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.</p><p>9 月，罗伯特反抗了：“我们都做了一个月了，还没弄完。” 现在想来很有趣，因为他之后差不多还做了 3 年。但我觉得招更多程序员可能稳妥，问罗伯特研究生院里谁最厉害。他推荐了特雷弗・布莱克威尔 —— 一开始我很惊讶，因为当时我知道特雷弗主要是因为他想把生活里的一切都记在一叠卡片上，走到哪带到哪。但罗伯特说得对，特雷弗是个极其高效的黑客。</p><p>It was a lot of fun working with Robert and Trevor. They’re the two most independent-minded people I know, and in completely different ways. If you could see inside Rtm’s brain it would look like a colonial New England church, and if you could see inside Trevor’s it would look like the worst excesses of Austrian Rococo.</p><p>和罗伯特、特雷弗一起工作很开心。他们是我认识的最有独立思想的人，方式还完全不同。如果能看到罗伯特的大脑，会像新英格兰殖民时期的教堂；看到特雷弗的，会像奥地利洛可可风格最夸张的样子。</p><h3 id="1996"><a href="#1996" class="headerlink" title="1996"></a>1996</h3><p>We opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. [8]</p><p>1996 年 1 月，我们正式营业，有 6 家商店。还好等了几个月 —— 虽然担心迟到，但其实早得差点致命。当时媒体大谈电子商务，但没多少人真的想要在线商店。[8]</p><p>There were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn’t have to integrate with any other software except Robert’s and Trevor’s, so it was quite fun to work on. If all I’d had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.</p><p>软件主要有三部分：我写的编辑器（用户用来建网站）、罗伯特写的购物车、特雷弗写的管理器（跟踪订单和数据）。当时，这个编辑器是最好的通用网站构建器之一。我把代码写得很紧凑，只需要和罗伯特、特雷弗的软件集成，所以做起来很开心。如果只需要做这个软件，接下来 3 年可能是我人生最轻松的时光。但不幸的是，我还得做很多其他事 —— 都是我比编程差的事，所以接下来 3 年反而是最紧张的。</p><p>There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn’t because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.</p><p>90 年代后半期，很多创业公司做电子商务软件。我们决心做 “微软 Word”，而不是 “Interleaf”—— 意思是易用、便宜。幸运的是我们很穷，这让 Viaweb 比预想的还便宜：小店每月 100 美元，大店 300 美元。低价很有吸引力，也让竞争对手头疼，但我们定低价不是因为聪明 —— 我们根本不知道企业愿意付多少钱，300 美元对我们来说已经很多了。</p><p>We did a lot of things right by accident like that. For example, we did what’s now called “doing things that don’t scale,” although at the time we would have described it as “being so lame that we’re driven to the most desperate measures to get users.” The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d’etre of our software was that people could use it to make their own stores. But anything to get users.</p><p>我们很多 “做对” 的事都是偶然。比如现在说的 “做不可规模化的事”，当时我们会说 “太逊了，只能用最 desperation 的办法拉用户”—— 最常见的是帮用户建商店。这很丢人，因为软件的意义本就是让用户自己做。但为了拉用户，什么都愿意做。</p><p>We learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man’s shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men’s shirts. My first set of scans were so beautiful too.</p><p>我们学到了太多不想知道的零售业知识。比如，如果只能放一张男士衬衫的小图（当时所有图都比现在小），放衣领特写比整件衬衫好。我记得这个是因为我得重新扫描约 30 张衬衫图 —— 第一批扫描还那么好看。</p><p>Though this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by “business” and thought we needed a “business person” to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to fatherhood once I had kids. Whatever users wanted, I was all theirs. Maybe one day we’d have so many users that I couldn’t scan their images for them, but in the meantime there was nothing more important to do.</p><p>虽然感觉不对，但这正是该做的事。帮用户建商店让我们了解了零售，也了解了用我们软件的感受。一开始我对 “商业” 既困惑又反感，觉得需要 “商业人士” 来管，但有了用户后，我改变了 —— 就像有了孩子后对父亲身份的态度转变。用户想要什么，我都满足。也许有一天用户太多，我没时间帮他们扫描图片，但现在没什么比这更重要。</p><p>Another thing I didn’t get at the time is that growth rate is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that’s how much money you’re making, and if you’re not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we’d been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you’re doing fine. You’re growing 7x a year. Just don’t hire too many more people and you’ll soon be profitable, and then you’ll control your own destiny.</p><p>当时没明白的另一件事：增长率是创业公司的终极考验。我们的增长率不错：1996 年底约 70 家店，1997 年底约 500 家。我错误地认为绝对用户数才重要 —— 这确实重要，因为关系到收入，不够的话可能倒闭。但长期来看，增长率会解决绝对数问题。如果是我在 Y Combinator 指导的创业公司，我会说：别紧张，你们做得很好，年增长 7 倍。别雇太多人，很快就会盈利，然后就能掌握自己的命运了。</p><p>Alas I hired lots more people, partly because our investors wanted me to, and partly because that’s what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn’t reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.</p><p>可惜我雇了很多人，部分是因为投资者想让我雇，部分是因为互联网泡沫时期的创业公司都这样 —— 只有几个人的公司会显得业余。所以直到 1998 年夏天雅虎收购我们时，才实现收支平衡。这意味着公司整个生命周期都得看投资者脸色。我们和投资者都是创业新手，结果一团糟，就算以创业公司的标准看也是。</p><p>It was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn’t feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.</p><p>雅虎收购我们时，我如释重负。理论上，Viaweb 的股票很值钱 —— 它是一家盈利且快速增长的企业的股份。但我没觉得它多值钱：我不知道怎么给企业估值，却太清楚我们几乎每隔几个月就经历一次 “濒死体验”。而且创业以来，我的生活方式还和研究生差不多。所以雅虎收购时，我感觉像从赤贫到暴富。要去加州了，我买了辆车 ——1998 年的黄色大众 GTI。我记得当时想，光是真皮座椅就比我所有东西加起来都豪华。</p><h3 id="1998"><a href="#1998" class="headerlink" title="1998"></a>1998</h3><p>The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn’t realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo’s prematurely aged culture and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.</p><p>接下来的一年，1998 年夏到 1999 年夏，可能是我人生效率最低的时期。当时没意识到，我已经被运营 Viaweb 的压力和精力耗尽了。到加州后，我试着继续编程到凌晨 3 点，但疲劳加上雅虎老气横秋的文化和圣克拉拉沉闷的格子间，渐渐把我拖垮了。几个月后，感觉诡异得像在 Interleaf 工作。</p><p>Yahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they’d never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I’d painted anything that I’d half forgotten why I was doing this. My brain had been entirely full of software and men’s shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.</p><p>雅虎收购时给了我们很多期权。当时我觉得雅虎估值太高，期权肯定不值钱，但没想到接下来一年股价涨了 5 倍。我等到第一批期权解禁，1999 年夏天就离开了。太久没画画，我都快忘了为什么要做这些。四年来，脑子里全是软件和男士衬衫。但我提醒自己，变得有钱是为了画画，现在有钱了，该去画画了。</p><p>When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.</p><p>我说要走时，雅虎的老板和我长谈了我的计划。我告诉他想画什么样的画。当时还感动于他这么关心我，现在才明白他以为我在撒谎。我当时的期权每月约值 200 万美元，放弃这么多钱，肯定是要去开新公司，还可能挖人。那是互联网泡沫顶峰，雅虎是中心。我老板当时是亿万富翁，在那时离开去开新公司，在他看来可能是疯狂又合理的野心。</p><p>But I really was quitting to paint, and I started immediately. There was no time to lose. I’d already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That’s what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.</p><p>但我真的是辞职去画画，而且立刻就开始了。不能再等了，已经花了四年变富。现在我跟那些卖掉公司离开的创始人说，我的建议总是一样的：度假。我当时就该这么做，去个地方什么都不做一两个月，但根本没想过。</p><p>So I tried to paint, but I just didn’t seem to have any energy or ambition. Part of the problem was that I didn’t know many people in California. I’d compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you’ll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn’t know any of them.</p><p>于是我试着画画，却没精力和野心。部分原因是在加州没什么熟人。我还在圣克鲁斯山买了栋房子，风景很美，但离任何地方都很远。又撑了几个月，绝望之下回了纽约 —— 你可能会惊讶，我还保留着那个公寓，像旧生活的坟墓一样封着。至少伊德尔在纽约，还有其他想画画的人，虽然我都不认识。</p><p>When I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn’t been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I’d paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn’t rotted yet).</p><p>回到纽约，我重拾旧生活，只是现在有钱了。听起来很怪，确实很怪。所有旧习惯都回来了，但多了很多以前没有的 “门”：累了不想走路，举手就能拦到出租车（除非下雨）；路过可爱的小餐馆，能进去点份午餐。兴奋了一阵，画画也渐渐顺了。我尝试了一种新静物：先用老方法画一幅，拍照打印在画布上（放大），然后用这个当底色，再对着同样的物体画第二幅（希望物体还没烂）。</p><p>Meanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn’t one. Huh.</p><p>同时，我在找公寓买。现在终于能选邻居了。我问自己和各种房产中介：纽约的 “剑桥” 在哪？偶尔去真正的剑桥后，我渐渐意识到没有这样的地方。嗯。</p><h3 id="2000"><a href="#2000" class="headerlink" title="2000"></a>2000</h3><p>Around this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? [9] You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.</p><p>2000 年春天左右，我有了个想法。从 Viaweb 的经历看，网页应用显然是未来。为什么不做一个 “用来做网页应用” 的网页应用呢？让人们通过浏览器在我们的服务器上编辑代码，然后我们托管生成的应用。[9] 服务器上可以运行各种服务，应用调用 API 就能用：打电话、处理图片、收信用卡付款等等。</p><p>I got so excited about this idea that I couldn’t think about anything else. It seemed obvious that this was the future. I didn’t particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he’d made a lot of money the last time I’d lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.</p><p>我太兴奋了，满脑子都是这个。未来显然是这样的。我不是特别想开公司，但这个想法显然需要公司来实现，所以决定搬到剑桥去开。希望能说服罗伯特一起做，但碰壁了。罗伯特当时是 MIT 的博士后，虽然上次跟着我搞事赚了不少，但也花了太多时间。他觉得想法可行，却坚决拒绝加入。</p><p>Hmph. Well, I’d do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it’s now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn’t so naive as to assume I could spring an overt Lisp on a general audience; we’d hide the parentheses, like Dylan did.</p><p>哼，那我自己做。我招了曾在 Viaweb 工作的丹・吉芬，还有两个想找暑期工的本科生，开始做一个现在看来相当于 20 家公司加几个开源项目的软件。定义应用的语言当然是 Lisp 的方言。但我没天真到以为能直接给大众用 Lisp，得像 Dylan 语言那样隐藏括号。</p><p>By then there was a name for the kind of company Viaweb was, an “application service provider,” or ASP. This name didn’t last long before it was replaced by “software as a service,” but it was current for long enough that I named this new company after it: it was going to be called Aspra.</p><p>当时把 Viaweb 这类公司叫 “应用服务提供商”（ASP），这个名字没火多久就被 “软件即服务”（SaaS）取代了，但火的那阵，我给新公司起了个名：Aspra。</p><p>I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn’t want to run a company — especially not a big one, which it was looking like this would have to be. I’d only started Viaweb because I needed the money. Now that I didn’t need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I’d build a subset that could be done as an open source project.</p><p>我做应用构建器，丹做网络基础设施，两个本科生做前两个服务（图片和电话）。但夏天过半时，我意识到自己真的不想运营公司 —— 尤其是看起来会变大的公司。我开 Viaweb 只是因为需要钱，现在不缺钱了，为什么还要做这个？如果这个愿景必须靠公司实现，那算了。我可以做个子集，当成开源项目。</p><p>Much to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.</p><p>没想到，花在这上面的时间没白费。Y Combinator 创办后，我经常遇到做这个新架构部分内容的创业公司，而我花了这么多时间思考甚至尝试写过，这非常有用。</p><p>The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn’t even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.</p><p>我要做的开源子集是新 Lisp—— 现在连括号都不用隐藏了。很多 Lisp 黑客都梦想做新 Lisp，部分因为 Lisp 的特色是有方言，部分因为我们心里都有个 “柏拉图式的 Lisp”，现有方言都不够格。我当然也有。夏天结束时，丹和我搬到剑桥我买的房子里，开始做这个叫 Arc 的新 Lisp 方言。</p><p>The following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we’d used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I’d created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. [10]</p><p>第二年春天，转机来了。我被邀请在一个 Lisp 会议上演讲，讲了我们在 Viaweb 用 Lisp 的经历。之后把演讲稿（PostScript 格式）放到了<a href="https://paulgraham.com/">paulgraham.com</a>上 —— 这个网站我用 Viaweb 建了好几年，从没用来做过什么。一天之内，它有了 3 万次浏览。怎么回事？从引用链接看，有人把它发到了 Slashdot 上。[10]</p><p>Wow, I thought, there’s an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.</p><p>哇，我想，有受众。写点东西放网上，谁都能看。现在看来再平常不过了，但当时很惊人。印刷时代，通往读者的渠道很窄，被称为 “编辑” 的凶猛怪物把守着。想让作品有受众，必须出书、登报或发杂志。现在，任何人都能发表任何东西。</p><p>This had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of essays. [11]</p><p>理论上 1993 年就可以了，但没多少人意识到。我参与构建网络基础设施这么久，自己也是作家，却花了 8 年才意识到。即便如此，又过了好几年才明白其中的意义：这意味着会有新一代的散文。[11]</p><p>In the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. [12]</p><p>印刷时代，发表散文的渠道窄得可怜。除了少数在纽约参加对的派对、被官方认可的思想家，只有专家能发表关于自己领域的散文。太多散文从没被写出来，因为没地方发表。现在可以了，我要写这些散文。[12]</p><p>I’ve worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I’d always write essays too.</p><p>我做过很多事，但如果说有个转折点让我明白该做什么，那就是开始在网上发表散文的时候。从那以后，我知道无论做什么，都会一直写散文。</p><p>I knew that online essays would be a marginal medium at first. Socially they’d seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in The New Yorker. But by this point I knew enough to find that encouraging instead of discouraging.</p><p>我知道网络散文一开始会是边缘媒介。社交层面上，它们更像疯子在 GeoCities 网站上发的咆哮，而不是《纽约客》上排版精美的优雅文章。但这时我已经明白，这是好事，不是坏事。</p><p>One of the most conspicuous patterns I’ve noticed in my life is how well it has worked, for me at least, to work on things that weren’t prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I’m writing, and I explain that it’s an essay I’m going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.</p><p>我人生中最明显的模式之一是：对我来说，做那些不那么光鲜的事，往往效果很好。静物一直是最不光鲜的绘画形式；Viaweb 和 Y Combinator 刚起步时都显得很逊；现在别人问我在写什么，我说要发在自己网站上的散文时，还是会看到对方茫然的眼神。就连 Lisp，虽然在智力上像拉丁语一样有光环，也差不多够 “不潮” 了。</p><p>It’s not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it’s a sign both that there’s something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren’t prestigious doesn’t guarantee you’re on the right track, it at least guarantees you’re not on the most common type of wrong one.</p><p>不是说不光鲜的工作本身就好。但如果你被某种工作吸引，尽管它现在不光鲜，这既说明那里有真东西可发现，也说明你的动机是对的。不纯的动机是野心家的大危险 —— 最可能让你误入歧途的，就是想给别人留下深刻印象的欲望。所以，做不光鲜的事不能保证你走在对的路上，但至少保证你没走最常见的错路。</p><p>Over the next several years I wrote lots of essays about all kinds of different topics. O’Reilly reprinted a collection of them as a book, called Hackers &amp; Painters after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.</p><p>接下来几年，我写了很多散文，主题各异。奥莱利出版社把其中一些编成书，以其中一篇的标题《黑客与画家》为名出版。我还做了垃圾邮件过滤器，画了些画。每周四晚上我会请一群朋友吃饭，这让我学会了给很多人做饭。我在剑桥又买了栋楼 —— 以前是糖果厂（据说后来是色情工作室），当办公室用。</p><h3 id="2003"><a href="#2003" class="headerlink" title="2003"></a>2003</h3><p>One night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn’t know but would probably like. One of the guests was someone I didn’t know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.</p><p>2003 年 10 月的一个晚上，我家开了个大派对。这是我朋友玛丽亚・丹尼尔斯（周四晚宴的常客）的好主意：三个主人各自邀请朋友参加同一个派对，这样每个客人都会有三分之二的人不认识但可能合得来。其中一个客人我不认识，但后来很喜欢：她叫杰西卡・利文斯顿。几天后，我约了她。</p><p>Jessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of interviews with startup founders.</p><p>杰西卡在波士顿一家投资银行管营销。这家银行觉得自己懂创业公司，但接下来一年，她认识了我那些创业圈的朋友后，惊讶地发现现实完全不同，他们的故事也很精彩。于是她决定编一本创业公司创始人的访谈录。</p><p>When the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.</p><p>银行出现财务问题，她不得不解雇一半员工，于是开始找新工作。2005 年初，她去波士顿一家风投公司面试营销岗。他们拖了几周才做决定，这段时间里，我跟她讲了风投需要改进的地方：应该多投小额，而不是少数大额；应该投更年轻、更懂技术的创始人，而不是 MBA；应该让创始人继续当 CEO，等等。</p><p>One of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that won’t waste their time is a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they’d be able to avoid the worst of the mistakes we’d made.</p><p>我写散文有个诀窍：先演讲。想到要站在一群人面前，说些不浪费他们时间的话，这能极大激发想象力。哈佛计算机协会（本科生电脑俱乐部）邀请我演讲时，我决定讲讲如何开创业公司 —— 也许他们能避免我们犯过的那些严重错误。</p><p>So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they’d be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I’d only known), I blurted out “But not me!” and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I’d been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn’t done one angel investment.</p><p>演讲中，我说最好的种子投资来源是成功的创业公司创始人，因为他们还能提供建议。说完，似乎所有人都期待地看着我。想到收件箱会被商业计划淹没（当时要是知道就好了），我脱口而出：“但别找我！” 然后继续演讲。但之后我想，真该停止拖延，开始做天使投资了。雅虎收购我们后我就想做，现在已经过去 7 年，还没做过一次。</p><p>Meanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.</p><p>同时，我还在和罗伯特、特雷弗合计能一起做的项目。我怀念和他们共事的日子，总觉得有什么可以合作的。</p><p>As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We’d start our own investment firm and actually implement the ideas we’d been talking about. I’d fund it, and Jessica could quit her job and work for it, and we’d get Robert and Trevor as partners too. [13]</p><p>3 月 11 日，我和杰西卡吃完饭回家，走到花园街和沃克街的拐角，这三条线交汇了：去他的那些拖拖拉拉的风投，我们自己开投资公司，把想法付诸实践。我出钱，杰西卡辞职来做，再拉罗伯特和特雷弗当合伙人。[13]</p><p>Once again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.</p><p>无知再次帮了我们。我们不知道怎么当天使投资人，2005 年的波士顿也没有罗恩・康威（著名天使投资人）可以学。所以我们只做看起来明显该做的事，有些做法后来发现还挺新颖。</p><p>There are multiple components to Y Combinator, and we didn’t figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn’t go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we’d been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.</p><p>Y Combinator 有很多部分，我们不是一下子想出来的。最先确定的是做天使投资公司。那时候，“天使” 和 “公司” 这两个词还不搭：有风投公司（有组织的公司，雇人做投资），但只投百万美元级的大额；有天使投资人（投小额），但都是个人，通常有其他主业，投资只是副业。而且两者在早期都不够帮助创始人。我们知道创始人在某些方面有多无助，因为我们自己就经历过。比如朱利安帮我们注册公司时，我们觉得太神奇了 —— 写复杂软件还行，但注册公司、定章程、发股票，到底怎么弄？我们的计划是：不仅做种子投资，还要为创业公司做所有朱利安为我们做过的事。</p><p>YC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking “Wow, that means they got all the returns.” But once again, this was not due to any particular insight on our part. We didn’t know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn’t have known where to start. [14]</p><p>YC 不是基金形式。运营成本低，用我们自己的钱就行。99% 的读者可能没注意，但专业投资者会想：“哇，这意味着他们拿了所有回报。” 但这也不是因为我们多聪明 —— 我们根本不知道风投公司怎么组织，没想过要募资，就算想过也不知道从哪开始。[14]</p><p>The most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they’d start startups instead? We wouldn’t feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn’t make much money out of it, we’d at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.</p><p>YC 最独特的是 “批次模式”：一次投一批创业公司，一年两次，然后花三个月集中帮助它们。这也是偶然发现的，完全是因为我们不懂投资。我们需要投资经验，觉得 “一次投一堆创业公司” 是个好办法。我们知道本科生夏天会去科技公司做临时工作，那为什么不组织个暑期项目，让他们开创业公司呢？这样我们就算 “假投资人” 也不会内疚，因为他们也算 “假创始人”。所以就算赚不到钱，至少能练手，他们呢，夏天也比去微软打工有趣。</p><p>We’d use the building I owned in Cambridge as our headquarters. We’d all have dinner there once a week — on tuesdays, since I was already cooking for the thursday diners on thursdays — and after dinner we’d bring in experts on startups to give talks.</p><p>我们用我在剑桥买的那栋楼当总部。每周二一起吃晚饭（周四我已经在请人吃饭了），饭后请创业领域的专家来讲课。</p><p>We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an announcement on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get “deal flow,” as investors call it, but it turned out to be the perfect source. [15] We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who’d already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we’d intended.</p><p>知道本科生在决定暑期工作，所以几天内我们搞出了 “夏季创始人计划”，我在自己的网站上发了公告，邀请本科生申请。从没想过写散文能带来投资者说的 “deal flow”（项目流），但事实证明这是完美的来源。[15] 我们收到了 225 份申请，惊讶地发现很多来自已经毕业或即将毕业的人。这个计划突然变得比预想的严肃。</p><p>We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don’t think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.</p><p>我们从 225 个团队中邀请了约 20 个来面试，最终选了 8 个投资。他们很出色：第一批包括 reddit、后来创办 Twitch 的贾斯汀・坎和埃米特・希尔、已经帮着写了 RSS 规范、几年后成为开放获取殉道者的亚伦・斯沃茨，还有后来成为 YC 第二任总裁的山姆・奥特曼。第一批这么好，不全是运气 —— 愿意参加 “夏季创始人计划” 这种怪事，而不是去微软或高盛这种正经地方实习，本身就需要很大勇气。</p><p>The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. [16]</p><p>给创业公司的条件结合了我们和朱利安的协议（1 万美元换 10%）以及罗伯特说的 MIT 研究生暑期能拿到的钱（6000 美元）：每个创始人 6000 美元，典型的两个创始人团队就是 1.2 万美元，换 6% 的股份。这肯定公平，因为比我们自己当年的条件好一倍。而且那个夏天特别热，杰西卡还给创始人送了免费空调。[16]</p><p>Fairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.</p><p>很快我意识到，我们偶然发现了规模化创业投资的方法。批量投资对我们更方便，因为能同时为很多创业公司做事；对创业公司也更好，解决了创始人最大的问题之一：孤独。现在他们有了同事，而且是懂他们面临的问题、能分享解决方案的同事。</p><p>As YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another’s customers. We used to refer jokingly to the “YC GDP,” but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.</p><p>随着 YC 发展，我们发现了规模的其他好处：校友形成了紧密的社区，愿意互相帮助，尤其是帮助当前批次的创始人 —— 他们还记得自己曾处于同样的位置。我们还发现创业公司之间会互相成为客户。我们曾开玩笑说 “YC GDP”，但随着 YC 壮大，这越来越不像玩笑。现在很多创业公司的初始客户几乎全来自同批次的伙伴。</p><p>I had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.</p><p>我本来没打算把 YC 当全职工作。我想做三件事：编程、写散文、做 YC。但随着 YC 发展，我越来越投入，它占据的精力远超过三分之一。但头几年我还能做其他事。</p><h3 id="2006"><a href="#2006" class="headerlink" title="2006"></a>2006</h3><p>In the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn’t startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one’s intellectual curiosity.</p><p>2006 年夏天，我和罗伯特开始做新版本的 Arc。这个版本速度不错，因为编译成了 Scheme。为了测试，我用它写了 Hacker News（黑客新闻）。最初叫 “创业新闻”，是给创业公司创始人的新闻聚合器，但几个月后，我厌倦了只看创业相关的内容。而且我们想触达的不是现有创始人，而是未来的创始人。于是改名叫 “黑客新闻”，主题变成任何能激发智力好奇心的东西。</p><p>HN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I’d had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one’s work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. [17]</p><p>HN 对 YC 当然有好处，但也是我最大的压力来源。如果只需要挑选和帮助创始人，生活会轻松很多。这意味着 HN 可能是个错误。工作中最大的压力来源至少应该接近核心，但我就像跑马拉松时，痛苦不是来自跑步的劳累，而是来自不合脚的鞋磨出的水泡。处理 YC 的紧急问题时，约 60% 和 HN 有关，40% 是其他所有事加起来。[17]</p><p>As well as HN, I wrote all of YC’s internal software in Arc. But while I continued to work a good deal in Arc, I gradually stopped working on Arc, partly because I didn’t have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.</p><p>除了 HN，YC 所有内部软件我也用 Arc 写。但虽然还在用 Arc，我渐渐不再改进它 —— 部分因为没时间，部分因为现在有这么多基础设施依赖它，改起来就没那么有吸引力了。于是我的三个项目减到两个：写散文和做 YC。</p><p>YC was different from other kinds of work I’ve done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn’t have picked a better way to do it.</p><p>YC 和我做过的其他工作都不同。不是我自己决定做什么，而是问题来找我。每 6 个月就有一批新的创业公司，它们的问题 —— 无论是什么 —— 都成了我们的问题。这工作很有吸引力，因为问题五花八门，优秀的创始人效率很高。如果想在最短时间内了解最多关于创业公司的事，没有比这更好的方式了。</p><p>There were parts of the job I didn’t like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn’t like. I was haunted by something Kevin Hale once said about companies: “No one works harder than the boss.” He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I’d better work very hard.</p><p>有些部分我不喜欢：创始人之间的纠纷、判断谁在撒谎、和欺负创业公司的人斗争等等。但就算不喜欢，我也很努力。凯文・黑尔曾说过一句话让我不安：“没人比老板更努力。” 他既是描述也是建议，而建议的部分吓到我了。我想让 YC 变好，所以如果我的努力程度决定了其他人的上限，那我必须非常努力。</p><h3 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h3><p>One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. “You know,” he said, “you should make sure Y Combinator isn’t the last cool thing you do.”</p><p>2010 年的一天，罗伯特・莫里斯来加州面试，做了件惊人的事：主动给我提建议。我只记得他以前做过一次 —— 在 Viaweb 时，我肾结石疼得直不起腰，他建议最好送我去医院。只有这种时候，罗伯特才会主动提建议。所以我清楚记得他的话：“你知道吗，你该确保 Y Combinator 不是你做的最后一件酷事。”</p><p>At the time I didn’t understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life’s work or I’d have to leave eventually. And it wasn’t, so I would.</p><p>当时我不明白他的意思，渐渐才意识到他是说我该离开了。这听起来很奇怪，因为 YC 做得很好。但罗伯特主动提建议比他犯错还罕见，所以我开始思考。确实，按当时的轨迹，YC 会是我做的最后一件事 —— 它占据的精力越来越多，已经吃掉了 Arc，正在吃掉散文。要么 YC 是我一生的事业，要么我最终得离开。它不是，所以我会离开。</p><h3 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h3><p>In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.</p><p>2012 年夏天，我母亲中风了，原因是结肠癌引起的血栓。中风破坏了她的平衡能力，她被送进疗养院，但她真想离开，回自己家 —— 我和姐姐决心帮她实现。我定期飞俄勒冈看她，在飞机上有很多时间思考。一次飞行中，我意识到自己准备好把 YC 交给别人了。</p><p>I asked Jessica if she wanted to be president, but she didn’t, so we decided we’d try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn’t be controlled by the founders. So if Sam said yes, we’d let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.</p><p>我问杰西卡想不想当总裁，她不想，于是我们决定试着招募山姆・奥特曼。我们和罗伯特、特雷弗谈过，同意彻底交接：到那时为止，YC 由我们四个成立的 LLC 控制，但我们想让 YC 长久存在，这意味着不能由创始人控制。所以如果山姆同意，就让他重组 YC：我和罗伯特退休，杰西卡和特雷弗当普通合伙人。</p><p>When we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he’d take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.</p><p>我们问山姆想不想当 YC 总裁时，他一开始说不 —— 他想做一个核能反应堆的创业公司。但我坚持，2013 年 10 月他终于同意了。决定从 2014 年冬季批次开始由他接手。2013 年剩下的时间里，我越来越多地让山姆运营 YC，部分是让他学习，部分是因为我在关注母亲 —— 她的癌症复发了。</p><p>She died on January 15, 2014. We knew this was coming, but it was still hard when it did.</p><p>她在 2014 年 1 月 15 日去世了。我们早有准备，但事到临头还是很难受。</p><p>I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I’m interested in, but that only takes a few hours a week.)</p><p>我继续在 YC 工作到 3 月，帮那批创业公司做完演示日，然后就基本退出了（我还会和校友以及做我感兴趣的事的新创业公司聊天，但每周只花几小时）。</p><p>What should I do next? Rtm’s advice hadn’t included anything about that. I wanted to do something completely different, so I decided I’d paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. [18]</p><p>接下来该做什么？罗伯特的建议没说。我想做完全不同的事，于是决定画画 —— 想看看如果全心投入，能画多好。所以停止做 YC 的第二天，我就开始画画了。手很生，过了一阵子才找回状态，但至少非常投入。[18]</p><p>I spent most of the rest of 2014 painting. I’d never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I’d always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven’t painted since. So far anyway.</p><p>2014 年剩下的时间，我大部分在画画。以前从没这么不间断地工作过，确实比以前画得好 —— 虽然还不够好，但有进步。11 月，画到一半时，我突然没动力了。在此之前，我总是好奇正在画的画最后会是什么样，但突然觉得完成这幅画像个负担。于是我停下，洗了画笔，从此没再画过 —— 至少到现在。</p><p>I realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that’s not the best one (or at least a good one) for you, then it’s getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.</p><p>我知道这听起来有点懦弱，但注意力是零和游戏。如果能选要做的事，却选了一个不是最适合（至少不是好的）自己的项目，那它就会妨碍那个更适合的项目。50 岁了，浪费时间的机会成本很高。</p><p>I started writing essays again, and wrote a bunch of new ones over the next few months. I even wrote a couple that weren’t about startups. Then in March 2015 I started working on Lisp again.</p><p>我又开始写散文，接下来几个月写了不少新的，甚至有几篇不是关于创业的。2015 年 3 月，我又开始做 Lisp。</p><p>The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn’t originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what’s the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. [19]</p><p>Lisp 的独特之处在于，它的核心是一种 “用自身定义解释器” 的语言。它最初不是普通意义上的编程语言，而是作为计算的形式模型，是图灵机的替代方案。如果你想用一种语言自己写它的解释器，需要最少多少个预定义操作符？约翰・麦卡锡发明（或者说发现）的 Lisp，就是这个问题的答案。[19]</p><p>McCarthy didn’t realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy’s interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn’t match. It was this that attracted me in college, though I didn’t understand why at the time.</p><p>麦卡锡没意识到这种 Lisp 能用来编程，直到他的研究生史蒂夫・拉塞尔提议。拉塞尔把麦卡锡的解释器翻译成 IBM 704 的机器语言，从那时起，Lisp 才开始成为普通意义上的编程语言。但它作为 “计算模型” 的起源，赋予了它其他语言无法比拟的力量和优雅。大学时吸引我的就是这个，虽然当时不知道为什么。</p><p>McCarthy’s 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you’d want in a programming language. So these had to be added, and when they were, they weren’t defined using McCarthy’s original axiomatic approach. That wouldn’t have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way — indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you’d have had to run it, and computers then weren’t powerful enough.</p><p>麦卡锡 1960 年的 Lisp 只能解释 Lisp 表达式，缺了很多编程语言该有的东西。这些都得补上，但补充时并没有用麦卡锡最初的公理方法。当时这不可行 —— 麦卡锡通过手工模拟程序执行来测试解释器，但这已经快到极限了，他甚至没发现其中一个 bug。要测试更复杂的解释器，得运行它，而当时的电脑不够强。</p><h3 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h3><p>Now they are, though. Now you could continue using McCarthy’s axiomatic approach till you’d defined a complete programming language. And as long as every change you made to McCarthy’s Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.</p><p>但现在的电脑性能够了。现在可以继续用麦卡锡的公理方法，直到定义出一门完整的编程语言。而且，只要对麦卡锡 Lisp 的每一处修改都保持 “可发现性”，理论上就能得到一门有这种特质的完整语言。说起来容易做起来难，但既然理论上可行，为什么不试试？于是我决定尝试，花了 4 年，从 2015 年 3 月 26 日到 2019 年 10 月 12 日。幸好目标明确，不然很难坚持这么久。</p><p>I wrote this new Lisp, called Bel, in itself in Arc. That may sound like a contradiction, but it’s an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.</p><p>我用 Arc 语言在 Arc 里写了这个新 Lisp，叫 Bel。这听起来像矛盾，但也说明我为了让它工作用了多少技巧。通过一堆极端的 hack，我做出了一个接近 “用自身写的解释器” 的东西，还能真的运行 —— 不快，但够测试用。</p><p>I had to ban myself from writing essays during most of this time, or I’d never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you’re working on an interpreter written in itself, it’s hard to keep track of what’s happening at what level, and errors can be practically encrypted by the time you get them.</p><p>这段时间我几乎不能写散文，不然永远完不成。2015 年底我花了 3 个月写散文，回头做 Bel 时，几乎看不懂代码了 —— 不是写得烂，而是问题太复杂。当你在做 “用自身写的解释器” 时，很难追踪不同层级发生的事，错误传到你这的时候，几乎像加密过一样。</p><p>So I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I’d ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I’d check Twitter or HN and see someone asking “Does Paul Graham still code?”</p><p>所以我说，Bel 完成前不写散文。但我没告诉多少人在做 Bel。所以几年来，人们可能觉得我什么都没做，其实我在拼命工作，比以往任何时候都努力。偶尔和某个恶心的 bug 搏斗几小时后，我会刷推特或 HN，看到有人问：“保罗・格雷厄姆还编程吗</p><p>Working on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.</p><p>做 Bel 很难，但很满足。我投入得很深，任何时候脑子里都装着一大部分代码，还能在脑子里写新的。记得 2015 年一个晴天，带孩子们去海边，看着他们在潮池里玩时，我想通了如何处理和延续（continuation）有关的某个问题。当时觉得人生就该这样。我记得这个，是因为这种感觉太新奇了 —— 好在接下来几年，这样的时刻越来越多。</p><p>In the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.</p><p>2016 年夏天，我们搬到了英国。想让孩子们体验在另一个国家生活，而我生来是英国公民，所以这是 obvious 的选择。本来只想待一年，但太喜欢了，现在还住在这。所以 Bel 大部分是在英国写的。</p><p>In the fall of 2019, Bel was finally finished. Like McCarthy’s original Lisp, it’s a spec rather than an implementation, although like McCarthy’s Lisp it’s a spec expressed as code.</p><p>2019 年秋天，Bel 终于完成了。和麦卡锡最初的 Lisp 一样，它是规范而非实现，尽管也像麦卡锡的 Lisp 一样，规范是用代码表达的。</p><p>Now that I could write essays again, I wrote a bunch about topics I’d had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who’d lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it.</p><p>终于能再写散文了，我把攒的一堆主题都写了。2020 年一直在写，同时开始想其他能做的事。该怎么选？过去是怎么选的？我给自己写了篇散文回答这个问题，惊讶地发现答案又长又乱。连亲身经历的我都惊讶，也许这对别人也会有趣，对那些人生同样混乱的人也是鼓励。于是我写了个更详细的版本给别人看 —— 这就是最后一句话。</p><p>Notes</p><p>[1] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.</p><p>[1] 我的经历跳过了计算机发展的一个阶段：带交互式操作系统的分时机器。我直接从批处理过渡到了微型计算机，这让微型计算机显得格外令人兴奋。</p><p>[2] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like polluzione). It’s the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.</p><p>[2] 表示抽象概念的意大利语词汇，几乎都能通过英语同源词推测出来（偶尔有 “polluzione” 这样的陷阱词除外）。差异主要体现在日常用词上。所以，如果你用几个简单动词串联起大量抽象概念，一点点意大利语就能派上大用场。</p><p>[3] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.</p><p>[3] 我住在圣菲利切广场 4 号，所以步行去美术学院的路线正好穿过老佛罗伦萨的核心：经过皮蒂宫，过桥，路过奥尔圣米凯莱教堂，走在圣母百花大教堂和洗礼堂之间，然后沿里卡索利街走到圣马可广场。我见过佛罗伦萨街头的各种模样 —— 从空旷昏暗的冬夜，到游客摩肩接踵的闷热夏日。</p><p>[4] You can of course paint people like still lives if you want to, and they’re willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.</p><p>[4] 当然，只要愿意，你也可以像画静物一样画人。这种肖像画可以说是静物绘画的巅峰，尽管长时间静坐往往会让模特表情显得痛苦。</p><p>[5] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore’s Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.</p><p>[5] Interleaf 是众多 “有聪明人、造得出厉害技术，却被摩尔定律击垮” 的公司之一。20 世纪 90 年代，商用（即英特尔）处理器的算力呈指数级增长，像推土机一样碾压了高端专用硬件和软件公司。</p><p>[6] The signature style seekers at RISD weren’t specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.</p><p>[6] RISD 里追求标志性风格的人并非刻意逐利。在艺术界，金钱和 “酷” 紧密绑定：任何昂贵的东西都会被视为酷，而任何被视为酷的东西很快也会变得同样昂贵。</p><p>[7] Technically the apartment wasn’t rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.</p><p>[7] 严格来说，那个公寓不是 “租金管制”（rent-controlled），而是 “租金稳定”（rent-stabilized），但这种细微差别只有纽约人才会知道或在意。关键是它真的很便宜，还不到市场价的一半。</p><p>[8] Most software you can launch as soon as it’s done. But when the software is an online store builder and you’re hosting the stores, if you don’t have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.</p><p>[8] 大多数软件一完成就能发布。但如果是在线商店构建器，且由你托管这些商店，那么 “还没有用户” 这个事实就会格外扎眼。所以在公开上线前，我们必须先 “私下发布”—— 也就是招募一批初始用户，确保他们的商店看起来像模像样。</p><p>[9] We’d had a code editor in Viaweb for users to define their own page styles. They didn’t know it, but they were editing Lisp expressions underneath. But this wasn’t an app editor, because the code ran when the merchants’ sites were generated, not when shoppers visited them.</p><p>[9] 我们在 Viaweb 里加了个代码编辑器，让用户可以自定义页面样式。他们不知道的是，自己编辑的其实是 Lisp 表达式。但这算不上应用编辑器，因为代码是在商家网站生成时运行的，而非购物者访问时。</p><p>[10] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren’t they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I’m not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they don’t already know, and some people dislike being told such things.</p><p>[10] 这是如今常见体验的第一次出现，后续发生的事也一样：我读评论时，发现满是愤怒的人。我怎么敢说 Lisp 比其他语言好？它们不都是图灵完备的吗？看到我文章评论的人有时会同情我，但我毫不夸张地说，从一开始就是这样。这是领域自带的属性：一篇文章必须告诉读者他们不知道的事，而有些人讨厌被这样对待。</p><p>[11] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.</p><p>[11] 当然，20 世纪 90 年代人们就往网上发了很多东西，但 “把东西放上网” 和 “在网上发布” 不是一回事。“在网上发布” 意味着你把在线版本视为（至少是其中一个）主要版本。</p><p>[12] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs’ customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.</p><p>[12] 这里有一个普遍规律，我们在 Y Combinator 的经历也印证了这一点：即使催生习俗的限制早已消失，习俗仍会长期束缚你。就像出版散文的习俗一样，风投的传统做法也曾基于真实限制 —— 创业曾经成本高昂，因此相对罕见。现在创业可以既便宜又普遍，但风投的习俗仍反映着旧世界，就像散文写作的习俗仍受限于印刷时代的约束一样。</p><p>Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).</p><p>这反过来意味着：在受快速变革影响的领域（习俗更可能过时），思想独立的人（即受习俗影响较小的人）会更有优势。</p><p>Here’s an interesting point, though: you can’t always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?</p><p>不过有个有趣的点：你没法总能预测哪些领域会被快速变革影响。软件和风投显然会，但谁能想到散文写作也会呢？</p><p>[13] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn’t want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.</p><p>[13] Y Combinator 不是最初的名字。一开始我们叫 “剑桥种子”（Cambridge Seed）。但我们不想要区域性名字，怕硅谷有人模仿，于是以 λ 演算里最酷的技巧之一 ——Y 组合子（Y combinator）—— 重新命名。</p><p>I picked orange as our color partly because it’s the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPs, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.</p><p>我选橙色作为我们的代表色，一部分是因为它最温暖，另一部分是因为没有风投用过这个颜色。2005 年，所有风投都用暗红、藏蓝、深绿这类沉稳颜色，因为他们想吸引的是有限合伙人（LP），而非创始人。YC 的 logo 本身是个圈内笑话：Viaweb 的 logo 是红色圆圈里一个白色 V，所以我把 YC 的 logo 设计成橙色方块里一个白色 Y。</p><p>[14] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.</p><p>[14] 2009 年起，YC 曾有几年以基金形式运营，因为规模太大，我个人已无力承担资金。但 Heroku 被收购后，我们有了足够资金，又回到了自资模式。</p><p>[15] I’ve never liked the term “deal flow,” because it implies that the number of new startups at any given time is fixed. This is not only false, but it’s the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.</p><p>[15] 我一直不喜欢 “项目流”（deal flow）这个词，因为它暗示某一时期的新创业公司数量是固定的。这不仅是错的，更是 YC 要打破的 —— 我们就是要促成那些本不会存在的创业公司诞生。</p><p>[16] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.</p><p>[16] 她（杰西卡）说，那些空调大小形状各不相同，因为当时空调热销，她能买到什么就拿了什么，但每个都比她现在能搬动的重得多。</p><p>[17] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you’re assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you’re present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it’s correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.</p><p>[17] HN 的另一个问题是个诡异的边缘情况：当你既写散文又运营论坛时，矛盾就来了。运营论坛时，人们会默认你就算没看所有对话，至少也看了所有涉及你的对话；而写散文时，人们会在论坛上对文章做出天马行空的误读。这两种情况单独出现时虽烦人但可忍受，结合在一起却很要命：你必须回应误读，因为 “你在关注对话” 的默认设定意味着，对任何获赞足够多的误读不回应，就会被视作默认其正确。但这又会鼓励更多误读 —— 任何想和你争执的人都会觉得，机会来了。</p><p>[18] The worst thing about leaving YC was not working with Jessica anymore. We’d been working on YC almost the whole time we’d known each other, and we’d neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.</p><p>[18] 离开 YC 最难受的是不能再和杰西卡一起工作。我们认识的几乎所有时间都在做 YC，从未试图或想过把工作和私人生活分开，所以离开就像拔起一棵深根的树。</p><p>[19] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy’s 1960 paper.</p><p>[19] 要更精准地理解 “发明” 与 “发现” 的区别，可以聊聊外星文明。比如，任何足够先进的外星文明肯定都知道勾股定理。我虽没那么确定，但相信他们也会知道麦卡锡 1960 年论文里的 Lisp 语言。</p><p>But if so there’s no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I&#x2F;O too. So it seems likely there exists at least one path out of McCarthy’s Lisp along which discoveredness is preserved.</p><p>若真是这样，就没理由认为这是他们可能知道的语言的极限。想必外星人也需要数字、错误处理和输入输出。所以，从麦卡锡的 Lisp 出发，很可能存在至少一条能保留 “可发现性” 的发展路径。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>早期作品</title>
    <link href="/2025/08/08/early-work/"/>
    <url>/2025/08/08/early-work/</url>
    
    <content type="html"><![CDATA[<h2 id="Early-Work"><a href="#Early-Work" class="headerlink" title="Early Work"></a>Early Work</h2><p>原文链接: <a href="https://paulgraham.com/early.html">https://paulgraham.com/early.html</a></p><p>October 2020</p><p>One of the biggest things holding people back from doing great work is the fear of making something lame. And this fear is not an irrational one. Many great projects go through a stage early on where they don’t seem very impressive, even to their creators. You have to push through this stage to reach the great work that lies beyond. But many people don’t. Most people don’t even reach the stage of making something they’re embarrassed by, let alone continue past it. They’re too frightened even to start.</p><p>阻碍人们做出伟大成就的最大障碍之一，是害怕做出平庸的东西。这种恐惧并非毫无道理。许多伟大的项目在早期阶段都显得平平无奇，即便对创作者自己来说也是如此。你必须熬过这个阶段，才能触及背后真正的伟大成果。但很多人做不到。大多数人甚至没机会做出让自己尴尬的东西，更别说跨过这个阶段了 —— 他们连开始的勇气都没有。</p><p>Imagine if we could turn off the fear of making something lame. Imagine how much more we’d do.</p><p>试想，如果我们能消除这种 “害怕做出平庸作品” 的恐惧，我们能做成多少事？</p><p>Is there any hope of turning it off? I think so. I think the habits at work here are not very deeply rooted.</p><p>有办法消除它吗？我认为有。这类心理习惯的根基其实并不深。</p><p>Making new things is itself a new thing for us as a species. It has always happened, but till the last few centuries it happened so slowly as to be invisible to individual humans. And since we didn’t need customs for dealing with new ideas, we didn’t develop any.</p><p>对人类这个物种而言，创造新事物本身就是一件新鲜事。创造从未停止，但直到近几个世纪前，它的速度慢到让个体难以察觉。既然我们不需要应对新想法的习俗，自然也就没发展出这样的习俗。</p><p>We just don’t have enough experience with early versions of ambitious projects to know how to respond to them. We judge them as we would judge more finished work, or less ambitious projects. We don’t realize they’re a special case.</p><p>我们对宏大项目的早期版本缺乏足够经验，不知道该如何对待它们。我们会用评判成熟作品或普通项目的标准来评判它们，却没意识到它们是特殊的存在。</p><p>Or at least, most of us don’t. One reason I’m confident we can do better is that it’s already starting to happen. There are already a few places that are living in the future in this respect. Silicon Valley is one of them: an unknown person working on a strange-sounding idea won’t automatically be dismissed the way they would back home. In Silicon Valley, people have learned how dangerous that is.</p><p>至少，大多数人没意识到。但我相信我们能做得更好，原因之一是改变已经开始了。在这方面，有些地方已经走在了时代前面。硅谷就是其中之一：一个无名之辈带着听起来古怪的想法，不会像在别处那样被轻易否定。在硅谷，人们早已明白这种否定有多危险。</p><p>The right way to deal with new ideas is to treat them as a challenge to your imagination — not just to have lower standards, but to switch polarity entirely, from listing the reasons an idea won’t work to trying to think of ways it could. That’s what I do when I meet people with new ideas. I’ve become quite good at it, but I’ve had a lot of practice. Being a partner at Y Combinator means being practically immersed in strange-sounding ideas proposed by unknown people. Every six months you get thousands of new ones thrown at you and have to sort through them, knowing that in a world with a power-law distribution of outcomes, it will be painfully obvious if you miss the needle in this haystack. Optimism becomes urgent.</p><p>对待新想法的正确方式，是把它们当作对想象力的挑战 —— 不是降低标准，而是彻底转变思路：从罗列它行不通的理由，变成思考它可行的方法。我遇到有新想法的人时就会这么做。我现在很擅长这个，不过也是练出来的。作为 Y Combinator 的合伙人，我几乎每天都要接触无名之辈提出的各种古怪想法。每六个月就有几千个新想法涌过来，我必须一一筛选 —— 要知道，在结果呈幂律分布的世界里，要是漏掉了沙堆里的那根针（指潜力巨大的想法），后果会非常明显。这时，乐观就成了刻不容缓的事。</p><p>But I’m hopeful that, with time, this kind of optimism can become widespread enough that it becomes a social custom, not just a trick used by a few specialists. It is after all an extremely lucrative trick, and those tend to spread quickly.</p><p>但我希望，假以时日，这种乐观能普及到成为一种社会习俗，而不只是少数专家的技巧。毕竟，这种技巧能带来巨大收益，而能带来收益的东西往往传播得很快。</p><p>Of course, inexperience is not the only reason people are too harsh on early versions of ambitious projects. They also do it to seem clever. And in a field where the new ideas are risky, like startups, those who dismiss them are in fact more likely to be right. Just not when their predictions are weighted by outcome.</p><p>当然，人们对宏大项目的早期版本过于苛刻，不全是因为缺乏经验。有时是为了显得自己聪明。在创业这类新想法风险很高的领域，否定者其实更可能 “说对”—— 但这是不考虑结果权重的情况下。</p><p>But there is another more sinister reason people dismiss new ideas. If you try something ambitious, many of those around you will hope, consciously or unconsciously, that you’ll fail. They worry that if you try something ambitious and succeed, it will put you above them. In some countries this is not just an individual failing but part of the national culture.</p><p>不过，否定新想法还有一个更阴暗的原因：如果你尝试做宏大的事，身边很多人会有意无意地希望你失败。他们担心，要是你成功了，就会超越他们。在有些国家，这不仅是个人问题，甚至成了民族文化的一部分。</p><p>I wouldn’t claim that people in Silicon Valley overcome these impulses because they’re morally better. [1] The reason many hope you’ll succeed is that they hope to rise with you. For investors this incentive is particularly explicit. They want you to succeed because they hope you’ll make them rich in the process. But many other people you meet can hope to benefit in some way from your success. At the very least they’ll be able to say, when you’re famous, that they’ve known you since way back.</p><p>我不会说硅谷人克服了这种心理是因为他们道德更高尚。[1] 很多人希望你成功，是因为他们希望借你的东风向上走。对投资者来说，这种动机尤其直白：他们希望你成功，因为你可能让他们发财。但其他很多人也能从你的成功中获益 —— 至少，等你出名了，他们能说 “我早就认识你了”。</p><p>But even if Silicon Valley’s encouraging attitude is rooted in self-interest, it has over time actually grown into a sort of benevolence. Encouraging startups has been practiced for so long that it has become a custom. Now it just seems that that’s what one does with startups.</p><p>但即便硅谷的鼓励态度源于私利，久而久之也确实演变成了一种善意。鼓励创业的做法持续了太久，已经成了一种习俗。现在，人们似乎觉得 “对创业就该这么做” 是天经地义的。</p><p>Maybe Silicon Valley is too optimistic. Maybe it’s too easily fooled by impostors. Many less optimistic journalists want to believe that. But the lists of impostors they cite are suspiciously short, and plagued with asterisks. [2] If you use revenue as the test, Silicon Valley’s optimism seems better tuned than the rest of the world’s. And because it works, it will spread.</p><p>也许硅谷过于乐观了，也许它太容易被骗子忽悠。很多不那么乐观的记者愿意相信这一点。但他们列举的 “骗子” 名单短得可疑，还满是星号（指存疑）。[2] 要是以收入为标准，硅谷的乐观显然比世界其他地方更合理。而且，因为它有效，这种态度一定会传播开来。</p><p>There’s a lot more to new ideas than new startup ideas, of course. The fear of making something lame holds people back in every field. But Silicon Valley shows how quickly customs can evolve to support new ideas. And that in turn proves that dismissing new ideas is not so deeply rooted in human nature that it can’t be unlearnt.</p><p>当然，新想法不只是创业想法。害怕做出平庸的东西，在每个领域都在阻碍人们前进。但硅谷证明了，支持新想法的习俗能进化得很快。这反过来也说明，否定新想法并非深植于人性，是可以改掉的。</p><hr><p>Unfortunately, if you want to do new things, you’ll face a force more powerful than other people’s skepticism: your own skepticism. You too will judge your early work too harshly. How do you avoid that?</p><p>不幸的是，如果你想做新事，会遇到比他人质疑更强大的阻力：你自己的质疑。你也会对早期作品过于苛刻。怎么避免呢？</p><p>This is a difficult problem, because you don’t want to completely eliminate your horror of making something lame. That’s what steers you toward doing good work. You just want to turn it off temporarily, the way a painkiller temporarily turns off pain.</p><p>这很难，因为你不能彻底消除 “害怕做出平庸作品” 的心理 —— 正是这种心理指引你做出好作品。你只需要暂时关掉它，就像止痛药暂时止痛一样。</p><p>People have already discovered several techniques that work. Hardy mentions two in A Mathematician’s Apology:</p><p>人们已经发现了一些有效的方法。哈代在《一个数学家的辩白》中提到了两个：</p><p>Good work is not done by “humble” men. It is one of the first duties of a professor, for example, in any subject, to exaggerate a little both the importance of his subject and his importance in it.</p><p>“伟大的工作不是‘谦逊’的人做出来的。比如，任何学科的教授，首要职责之一就是稍微夸大自己学科的重要性，以及自己在学科中的分量。”</p><p>If you overestimate the importance of what you’re working on, that will compensate for your mistakenly harsh judgment of your initial results. If you look at something that’s 20% of the way to a goal worth 100 and conclude that it’s 10% of the way to a goal worth 200, your estimate of its expected value is correct even though both components are wrong.</p><p>如果你高估自己正在做的事的重要性，就能抵消对早期成果的苛刻评判。假设一件事完成了 20%，目标价值 100；但你觉得它完成了 10%，目标价值 200—— 虽然两个判断都错了，但最终的预期价值评估是对的。</p><p>It also helps, as Hardy suggests, to be slightly overconfident. I’ve noticed in many fields that the most successful people are slightly overconfident. On the face of it this seems implausible. Surely it would be optimal to have exactly the right estimate of one’s abilities. How could it be an advantage to be mistaken? Because this error compensates for other sources of error in the opposite direction: being slightly overconfident armors you against both other people’s skepticism and your own.</p><p>哈代还说，稍微过度自信也有帮助。我发现，很多领域最成功的人都有点过度自信。表面看这不合理 —— 对自己能力的判断刚好才是最优的，怎么会因判断错误而受益？因为这种错误能抵消其他方向的错误：稍微过度自信，能帮你抵御他人的质疑和自己的怀疑。</p><p>Ignorance has a similar effect. It’s safe to make the mistake of judging early work as finished work if you’re a sufficiently lax judge of finished work. I doubt it’s possible to cultivate this kind of ignorance, but empirically it’s a real advantage, especially for the young.</p><p>无知也有类似效果。如果你对 “成品” 的评判标准足够宽松，那么把早期作品当成品评判，就算错了也没关系。我不确定这种无知能不能刻意培养，但从经验来看，它确实是种优势，尤其对年轻人来说。</p><p>Another way to get through the lame phase of ambitious projects is to surround yourself with the right people — to create an eddy in the social headwind. But it’s not enough to collect people who are always encouraging. You’d learn to discount that. You need colleagues who can actually tell an ugly duckling from a baby swan. The people best able to do this are those working on similar projects of their own, which is why university departments and research labs work so well. You don’t need institutions to collect colleagues. They naturally coalesce, given the chance. But it’s very much worth accelerating this process by seeking out other people trying to do new things.</p><p>另一个熬过宏大项目 “平庸期” 的方法，是和对的人在一起 —— 在社会的逆风里造出一个漩涡。但光找总在鼓励你的人不够，你会慢慢不把他们的话当回事。你需要能区分 “丑小鸭” 和 “小天鹅” 的同伴。最擅长这个的，是那些自己也在做类似项目的人 —— 这就是大学院系和研究实验室效率高的原因。你不需要靠机构来聚集同伴，只要有机会，他们自然会凑到一起。但主动寻找其他想做新事的人，能加速这个过程。</p><p>Teachers are in effect a special case of colleagues. It’s a teacher’s job both to see the promise of early work and to encourage you to continue. But teachers who are good at this are unfortunately quite rare, so if you have the opportunity to learn from one, take it. [3]</p><p>老师其实是特殊的同伴。老师的职责就是看到早期作品的潜力，并鼓励你继续下去。可惜擅长这个的老师很少，要是有机会向这样的老师学习，一定要抓住。[3]</p><p>For some it might work to rely on sheer discipline: to tell yourself that you just have to press on through the initial crap phase and not get discouraged. But like a lot of “just tell yourself” advice, this is harder than it sounds. And it gets still harder as you get older, because your standards rise. The old do have one compensating advantage though: they’ve been through this before.</p><p>对有些人来说，纯粹靠自律可能有用：告诉自己必须熬过最初的 “垃圾期”，不气馁。但就像很多 “告诉自己” 的建议一样，说起来容易做起来难。而且年纪越大越难，因为你的标准会提高。不过，年长者有一个补偿性优势：他们经历过这个阶段。</p><p>It can help if you focus less on where you are and more on the rate of change. You won’t worry so much about doing bad work if you can see it improving. Obviously the faster it improves, the easier this is. So when you start something new, it’s good if you can spend a lot of time on it. That’s another advantage of being young: you tend to have bigger blocks of time.</p><p>少关注现状，多关注进步速度，也会有帮助。如果能看到作品在进步，你就不会太担心它现在很差。进步越快，就越容易做到这一点。所以，开始做新事时，最好能投入大量时间。这是年轻人的另一个优势：他们往往有大块的时间。</p><p>Another common trick is to start by considering new work to be of a different, less exacting type. To start a painting saying that it’s just a sketch, or a new piece of software saying that it’s just a quick hack. Then you judge your initial results by a lower standard. Once the project is rolling you can sneakily convert it to something more. [4]</p><p>另一个常见技巧是，一开始就把新作品定义为 “不那么严格的类型”。比如画一幅画，先说 “只是草稿”；写一个新软件，先说 “只是快速试做”。这样你就会用更低的标准评判早期成果。等项目步入正轨，再悄悄把它升级成更重要的东西。[4]</p><p>This will be easier if you use a medium that lets you work fast and doesn’t require too much commitment up front. It’s easier to convince yourself that something is just a sketch when you’re drawing in a notebook than when you’re carving stone. Plus you get initial results faster. [5] [6]</p><p>如果用的工具能让你快速推进，又不需要一开始就投入太多，会更容易做到这一点。在笔记本上画 “草稿”，比在石头上刻 “草稿” 更容易说服自己；而且，前者能更快看到初步成果。[5][6]</p><p>It will be easier to try out a risky project if you think of it as a way to learn and not just as a way to make something. Then even if the project truly is a failure, you’ll still have gained by it. If the problem is sharply enough defined, failure itself is knowledge: if the theorem you’re trying to prove turns out to be false, or you use a structural member of a certain size and it fails under stress, you’ve learned something, even if it isn’t what you wanted to learn. [7]</p><p>如果把有风险的项目当作学习机会，而不只是 “做出点什么”，尝试起来会更容易。这样就算项目真失败了，你也有收获。如果问题定义得足够清晰，失败本身就是知识：比如你想证明的定理是错的，或者某种尺寸的结构件受力时断了 —— 就算不是你想学到的，你也学到了东西。[7]</p><p>One motivation that works particularly well for me is curiosity. I like to try new things just to see how they’ll turn out. We started Y Combinator in this spirit, and it was one of main things that kept me going while I was working on Bel. Having worked for so long with various dialects of Lisp, I was very curious to see what its inherent shape was: what you’d end up with if you followed the axiomatic approach all the way.</p><p>对我来说，好奇心是个特别有效的动机。我喜欢尝试新事，就想看看结果会怎样。我们创办 Y Combinator 时就是这种心态，这也是我做 Bel（一种编程语言）时撑下去的主要原因。我用了很多年 Lisp 的各种方言，特别好奇它的 “本来面目”：如果一直遵循公理化方法，最后会得到什么。</p><p>But it’s a bit strange that you have to play mind games with yourself to avoid being discouraged by lame-looking early efforts. The thing you’re trying to trick yourself into believing is in fact the truth. A lame-looking early version of an ambitious project truly is more valuable than it seems. So the ultimate solution may be to teach yourself that.</p><p>但有点奇怪的是，你必须用心理技巧说服自己，才不会被早期作品的 “平庸” 打垮。而你试图说服自己相信的，其实是事实：宏大项目的早期版本，哪怕看起来平庸，其价值也比表面上高。所以，最终的解决办法可能是教会自己这一点。</p><p>One way to do it is to study the histories of people who’ve done great work. What were they thinking early on? What was the very first thing they did? It can sometimes be hard to get an accurate answer to this question, because people are often embarrassed by their earliest work and make little effort to publish it. (They too misjudge it.) But when you can get an accurate picture of the first steps someone made on the path to some great work, they’re often pretty feeble. [8]</p><p>方法之一是研究做出伟大成就的人的历史。他们早期在想什么？第一步做了什么？有时很难得到准确答案，因为人们常常为早期作品感到尴尬，没太想过要公开（他们也误判了自己的早期作品）。但当你看清有人走向伟大的最初几步时，会发现它们往往很不起眼。[8]</p><p>Perhaps if you study enough such cases, you can teach yourself to be a better judge of early work. Then you’ll be immune both to other people’s skepticism and your own fear of making something lame. You’ll see early work for what it is.</p><p>也许研究足够多这样的案例后，你就能学会更好地评判早期作品。那时，你就不会被他人的质疑或自己的恐惧困扰，能看清早期作品的真正价值。</p><p>Curiously enough, the solution to the problem of judging early work too harshly is to realize that our attitudes toward it are themselves early work. Holding everything to the same standard is a crude version 1. We’re already evolving better customs, and we can already see signs of how big the payoff will be.</p><p>说来也怪，解决 “对早期作品过于苛刻” 的问题，关键是意识到我们对它的态度本身也是 “早期作品”。用同一标准评判一切，只是粗糙的 1.0 版本。我们已经在进化出更好的习俗，也已经能看到它能带来多大的回报。</p><p>Notes</p><p>[1] This assumption may be too conservative. There is some evidence that historically the Bay Area has attracted a different sort of person than, say, New York City.</p><p>[1] 这种假设可能过于保守。有证据表明，从历史上看，旧金山湾区吸引的人群与纽约市等其他地方的人群存在差异。</p><p>[2] One of their great favorites is Theranos. But the most conspicuous feature of Theranos’s cap table is the absence of Silicon Valley firms. Journalists were fooled by Theranos, but Silicon Valley investors weren’t.</p><p>[2] 他们（指前文提到的记者）最常举的例子是 Theranos（血液检测公司，因欺诈丑闻倒闭）。但 Theranos 融资名单中最显眼的一点是：没有硅谷投资公司的身影。记者们被 Theranos 骗了，但硅谷的投资者没有。</p><p>[3] I made two mistakes about teachers when I was younger. I cared more about professors’ research than their reputations as teachers, and I was also wrong about what it meant to be a good teacher. I thought it simply meant to be good at explaining things.</p><p>[3] 我年轻时对老师有两个误解：一是更看重教授的研究成果，而非他们作为教师的口碑；二是误解了 “好老师” 的定义 —— 我曾以为，好老师仅仅意味着擅长讲解知识。</p><p>[4] Patrick Collison points out that you can go past treating something as a hack in the sense of a prototype and onward to the sense of the word that means something closer to a practical joke:<br>I think there may be something related to being a hack that can be powerful — the idea of making the tenuousness and implausibility a feature. “Yes, it’s a bit ridiculous, right? I’m just trying to see how far such a naive approach can get.” YC seemed to me to have this characteristic.</p><p>[4] 帕特里克・科里森指出，你可以超越 “把作品当作原型草稿” 的阶段，甚至把它变成更接近 “恶作剧” 的存在：<br>“我觉得‘粗糙感’可能有一种强大的力量 —— 把那种脆弱感和不可能性变成特色。‘没错，这确实有点荒谬，对吧？我就是想看看这种天真的做法能走多远。’在我看来，Y Combinator 就有这种特质。”</p><p>[5] Much of the advantage of switching from physical to digital media is not the software per se but that it lets you start something new with little upfront commitment.</p><p>[5] 从实体媒介转向数字媒介的优势，很大程度上不在于软件本身，而在于它能让你以极低的前期投入开启新事物。</p><p>[6] John Carmack adds:<br>The value of a medium without a vast gulf between the early work and the final work is exemplified in game mods. The original Quake game was a golden age for mods, because everything was very flexible, but so crude due to technical limitations, that quick hacks to try out a gameplay idea weren’t all that far from the official game. Many careers were born from that, but as the commercial game quality improved over the years, it became almost a full time job to make a successful mod that would be appreciated by the community. This was dramatically reversed with Minecraft and later Roblox, where the entire esthetic of the experience was so explicitly crude that innovative gameplay concepts became the overriding value. These “crude” game mods by single authors are now often bigger deals than massive professional teams’ work.</p><p>[6] 约翰・卡马克补充道：<br>“一种媒介的价值，在于它能消除早期作品与最终成品之间的巨大鸿沟 —— 游戏模组就是典型例子。初代《雷神之锤》是模组创作的黄金时代，因为当时的技术限制让游戏本身足够粗糙，同时又具备高度灵活性，所以为测试玩法而做的快速草稿，与官方游戏的差距并没有那么大。许多人的职业生涯由此起步。但随着多年来商业游戏质量的提升，制作一个能获得社区认可的成功模组，几乎成了一份全职工作。而《我的世界》及后来的《罗布乐思》彻底扭转了这一趋势：它们的整体风格刻意保持粗糙，使得创新的玩法概念成为最核心的价值。如今，单个创作者制作的这些‘粗糙’游戏模组，往往比大型专业团队的作品更受关注。”</p><p>[7] Lisa Randall suggests that we<br>treat new things as experiments. That way there’s no such thing as failing, since you learn something no matter what. You treat it like an experiment in the sense that if it really rules something out, you give up and move on, but if there’s some way to vary it to make it work better, go ahead and do that</p><p>[7] 莉萨・兰德尔建议我们：<br>“把新事物当作实验。这样就不存在‘失败’一说，因为无论结果如何，你都能学到东西。所谓‘当作实验’，是指如果它确实证明某条路行不通，就果断放弃并转向新方向；但如果有办法调整它、让它更好地运转，就继续推进。”</p><p>[8] Michael Nielsen points out that the internet has made this easier, because you can see programmers’ first commits, musicians’ first videos, and so on.</p><p>[8] 迈克尔・尼尔森指出，互联网让这一点（指研究伟大成就的早期历程）变得更容易了 —— 你可以看到程序员的首次代码提交、音乐家的早期视频等等。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创造财富</title>
    <link href="/2025/08/07/how-to-make-wealth/"/>
    <url>/2025/08/07/how-to-make-wealth/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Make-Wealth"><a href="#How-to-Make-Wealth" class="headerlink" title="How to Make Wealth"></a>How to Make Wealth</h2><p>原文链接: <a href="https://paulgraham.com/wealth.html">https://paulgraham.com/wealth.html</a></p><p>May 2004</p><p>(This essay was originally published in Hackers &amp; Painters.)</p><p>If you wanted to get rich, how would you do it? I think your best bet would be to start or join a startup. That’s been a reliable way to get rich for hundreds of years. The word “startup” dates from the 1960s, but what happens in one is very similar to the venture-backed trading voyages of the Middle Ages.</p><p>（本文最初发表于《黑客与画家》）</p><p>如果你想致富，你会怎么做？我认为最好的办法是创办或加入一家创业公司。几百年来，这一直是一条可靠的致富途径。“创业公司” 一词可追溯到 20 世纪 60 年代，但创业公司所做的事，与中世纪那些有风险投资支持的贸易远航极为相似。</p><p>Startups usually involve technology, so much so that the phrase “high-tech startup” is almost redundant. A startup is a small company that takes on a hard technical problem.</p><p>创业公司通常与技术相关，以至于 “高科技创业公司” 这个说法几乎显得多余。创业公司就是一家致力于解决棘手技术问题的小公司。</p><p>Lots of people get rich knowing nothing more than that. You don’t have to know physics to be a good pitcher. But I think it could give you an edge to understand the underlying principles. Why do startups have to be small? Will a startup inevitably stop being a startup as it grows larger? And why do they so often work on developing new technology? Why are there so many startups selling new drugs or computer software, and none selling corn oil or laundry detergent?</p><p>很多人仅凭这一点就发了财。就像优秀的棒球投手不一定需要懂物理一样，创业也未必需要懂底层逻辑。但我认为，理解这些底层逻辑能让你更有优势。为什么创业公司必须保持小规模？随着规模扩大，创业公司是否必然不再是 “创业公司”？它们为什么常常专注于开发新技术？为什么有那么多创业公司在研发新药或开发软件，却没有一家在卖玉米油或洗衣液？</p><p><strong>The Proposition</strong></p><h3 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a><strong>核心逻辑</strong></h3><p>Economically, you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four. This pays especially well in technology, where you earn a premium for working fast.</p><p>从经济角度看，创业可以理解为一种将整个职业生涯压缩到几年内的方式。你不必低强度地工作四十年，而是尽最大可能高强度地工作四年。这在技术领域的回报尤其丰厚，因为在这个领域，快速工作能带来额外收益。</p><p>Here is a brief sketch of the economic proposition. If you’re a good hacker in your mid twenties, you can get a job paying about $80,000 per year. So on average such a hacker must be able to do at least $80,000 worth of work per year for the company just to break even. You could probably work twice as many hours as a corporate employee, and if you focus you can probably get three times as much done in an hour. [1] You should get another multiple of two, at least, by eliminating the drag of the pointy-haired middle manager who would be your boss in a big company. Then there is one more multiple: how much smarter are you than your job description expects you to be? Suppose another multiple of three. Combine all these multipliers, and I’m claiming you could be 36 times more productive than you’re expected to be in a random corporate job. [2] If a fairly good hacker is worth $80,000 a year at a big company, then a smart hacker working very hard without any corporate bullshit to slow him down should be able to do work worth about $3 million a year.</p><p>以下是这种经济逻辑的简要概述。如果你是一名 25 岁左右的优秀黑客，你能找到一份年薪约 8 万美元的工作。因此，平均来看，这样的黑客每年至少要为公司创造 8 万美元的价值，公司才能实现收支平衡。你或许能比企业员工多工作一倍的时间，而且如果专注投入，每小时的产出可能是他们的三倍。[1] 此外，在大公司里，你得忍受那些 “地中海发型” 中层经理的拖累，而创业能让你摆脱这种拖累，这至少又能带来一倍的效率提升。还有一个乘数：你比岗位描述所期望的水平要聪明多少？假设这个乘数是 3。把所有这些乘数相乘，我认为你在创业时的生产力，可能是在普通企业岗位上的 36 倍。[2] 如果一名不错的黑客在大公司年薪 8 万美元，那么一名聪明的黑客在没有企业繁文缛节拖累的情况下拼命工作，每年应该能创造约 300 万美元的价值。</p><p>Like all back-of-the-envelope calculations, this one has a lot of wiggle room. I wouldn’t try to defend the actual numbers. But I stand by the structure of the calculation. I’m not claiming the multiplier is precisely 36, but it is certainly more than 10, and probably rarely as high as 100.</p><p>和所有粗略估算一样，这个数字有很大浮动空间。我不会去辩护具体的数值，但我坚信这个计算逻辑。我不是说乘数精确到 36，但它肯定超过 10，而且可能很少达到 100。</p><p>If $3 million a year seems high, remember that we’re talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health.</p><p>如果 300 万美元一年听起来太高，要记住我们说的是极限情况：你不仅没有休闲时间，甚至工作到危害健康的程度。</p><p>Startups are not magic. They don’t change the laws of wealth creation. They just represent a point at the far end of the curve. There is a conservation law at work here: if you want to make a million dollars, you have to endure a million dollars’ worth of pain. For example, one way to make a million dollars would be to work for the Post Office your whole life, and save every penny of your salary. Imagine the stress of working for the Post Office for fifty years. In a startup you compress all this stress into three or four years. You do tend to get a certain bulk discount if you buy the economy-size pain, but you can’t evade the fundamental conservation law. If starting a startup were easy, everyone would do it.</p><p>创业并非魔法，它不会改变财富创造的规律，只是代表着曲线最末端的一个点。这里存在一条守恒定律：如果你想赚 100 万美元，就得承受价值 100 万美元的痛苦。例如，一种赚 100 万美元的方式是在邮局工作一辈子，把每一分工资都存起来。想象一下在邮局工作 50 年的压力吧。而在创业公司，你把所有这些压力压缩到三四年里。批量承受痛苦确实能享受一定的 “折扣”，但你无法逃避这条基本守恒定律。如果创业很容易，那每个人都会去做。</p><p><strong>Millions, not Billions</strong></p><h3 id="百万，而非亿万"><a href="#百万，而非亿万" class="headerlink" title="百万，而非亿万"></a><strong>百万，而非亿万</strong></h3><p>If $3 million a year seems high to some people, it will seem low to others. Three million? How do I get to be a billionaire, like Bill Gates?</p><p>如果 300 万美元一年在某些人看来太高，在另一些人看来可能又太低。三百万？我怎么才能像比尔・盖茨那样成为亿万富翁？</p><p>So let’s get Bill Gates out of the way right now. It’s not a good idea to use famous rich people as examples, because the press only write about the very richest, and these tend to be outliers. Bill Gates is a smart, determined, and hardworking man, but you need more than that to make as much money as he has. You also need to be very lucky.</p><p>那我们现在就来说说比尔・盖茨。用著名的富豪举例不是个好主意，因为媒体只报道最富有的人，而这些人往往是特例。比尔・盖茨聪明、坚定且勤奋，但要赚他那么多钱，光靠这些还不够，你还需要非常幸运。</p><p>There is a large random factor in the success of any company. So the guys you end up reading about in the papers are the ones who are very smart, totally dedicated, and win the lottery. Certainly Bill is smart and dedicated, but Microsoft also happens to have been the beneficiary of one of the most spectacular blunders in the history of business: the licensing deal for DOS. No doubt Bill did everything he could to steer IBM into making that blunder, and he has done an excellent job of exploiting it, but if there had been one person with a brain on IBM’s side, Microsoft’s future would have been very different. Microsoft at that stage had little leverage over IBM. They were effectively a component supplier. If IBM had required an exclusive license, as they should have, Microsoft would still have signed the deal. It would still have meant a lot of money for them, and IBM could easily have gotten an operating system elsewhere.</p><p>任何公司的成功都有很大的随机因素。所以，你最终在报纸上读到的那些人，都是既聪明、又全身心投入，还中了 “彩票” 的人。比尔当然聪明又专注，但微软也恰好受益于商业史上最惊人的失误之一：DOS 系统的授权协议。毫无疑问，比尔尽了全力促使 IBM 犯下这个错误，并且出色地利用了它。但如果 IBM 那边有一个脑子清醒的人，微软的未来会大不相同。在那个阶段，微软对 IBM 几乎没有影响力，实际上只是一个组件供应商。如果 IBM 要求独家授权（他们本该如此），微软还是会签下协议 —— 这仍然能给他们带来很多钱，而 IBM 也能轻易从别处弄到操作系统。</p><p>Instead IBM ended up using all its power in the market to give Microsoft control of the PC standard. From that point, all Microsoft had to do was execute. They never had to bet the company on a bold decision. All they had to do was play hardball with licensees and copy more innovative products reasonably promptly.</p><p>结果却是，IBM 利用其在市场上的所有力量，让微软掌控了个人电脑的标准。从那时起，微软要做的只是执行：他们不必为大胆的决策赌上整个公司，只需对授权商采取强硬态度，并及时模仿更具创新性的产品。</p><p>If IBM hadn’t made this mistake, Microsoft would still have been a successful company, but it could not have grown so big so fast. Bill Gates would be rich, but he’d be somewhere near the bottom of the Forbes 400 with the other guys his age.</p><p>如果 IBM 没有犯这个错，微软仍然会是一家成功的公司，但不可能成长得如此之快、如此之大。比尔・盖茨会很富有，但可能只是福布斯 400 富豪榜中与他同龄的那些人里排名靠后的一个。</p><p>There are a lot of ways to get rich, and this essay is about only one of them. This essay is about how to make money by creating wealth and getting paid for it. There are plenty of other ways to get money, including chance, speculation, marriage, inheritance, theft, extortion, fraud, monopoly, graft, lobbying, counterfeiting, and prospecting. Most of the greatest fortunes have probably involved several of these.</p><p>致富的方式有很多，本文只讨论其中一种：通过创造财富并从中获得报酬来赚钱。其他方式还有很多，包括机遇、投机、婚姻、继承、盗窃、勒索、欺诈、垄断、贪污、游说、伪造和勘探。大多数巨额财富可能都涉及其中几种方式。</p><p>The advantage of creating wealth, as a way to get rich, is not just that it’s more legitimate (many of the other methods are now illegal) but that it’s more straightforward. You just have to do something people want.</p><p>把创造财富作为致富方式的优势，不仅在于它更合法（其他很多方式现在都是非法的），还在于它更直接：你只需要做人们想要的事。</p><p><strong>Money Is Not Wealth</strong></p><h3 id="金钱不等同于财富"><a href="#金钱不等同于财富" class="headerlink" title="金钱不等同于财富"></a><strong>金钱不等同于财富</strong></h3><p>If you want to create wealth, it will help to understand what it is. Wealth is not the same thing as money. [3] Wealth is as old as human history. Far older, in fact; ants have wealth. Money is a comparatively recent invention.</p><p>如果你想创造财富，理解财富是什么会有帮助。财富和金钱不是一回事。[3] 财富和人类历史一样古老，实际上更古老 —— 蚂蚁都有财富。而金钱是相对较新的发明。</p><p>Wealth is the fundamental thing. Wealth is stuff we want: food, clothes, houses, cars, gadgets, travel to interesting places, and so on. You can have wealth without having money. If you had a magic machine that could on command make you a car or cook you dinner or do your laundry, or do anything else you wanted, you wouldn’t need money. Whereas if you were in the middle of Antarctica, where there is nothing to buy, it wouldn’t matter how much money you had.</p><p>财富是根本。财富是我们想要的东西：食物、衣服、房子、汽车、 小工具、去有趣的地方旅行等等。你可以拥有财富而没有金钱。如果你有一台魔法机器，能按需为你变出汽车、做晚餐、洗衣服，或者做任何你想做的事，你就不需要金钱了。反之，如果你在南极腹地，没有东西可买，那么你有多少钱都没用。</p><p>Wealth is what you want, not money. But if wealth is the important thing, why does everyone talk about making money? It is a kind of shorthand: money is a way of moving wealth, and in practice they are usually interchangeable. But they are not the same thing, and unless you plan to get rich by counterfeiting, talking about making money can make it harder to understand how to make money.</p><p>财富是你想要的东西，而不是金钱。但如果财富才是重要的，为什么每个人都在谈论赚钱呢？这是一种简略说法：金钱是转移财富的方式，实际上它们通常可以互换。但它们不是一回事，除非你打算通过伪造货币致富，否则谈论 “赚钱” 会让你更难理解如何创造财富。</p><p>Money is a side effect of specialization. In a specialized society, most of the things you need, you can’t make for yourself. If you want a potato or a pencil or a place to live, you have to get it from someone else.</p><p>金钱是专业化的副产品。在一个专业化的社会里，你需要的大多数东西都无法自己制造。如果你想要一个土豆、一支铅笔或一个住处，你得从别人那里获得。</p><p>How do you get the person who grows the potatoes to give you some? By giving him something he wants in return. But you can’t get very far by trading things directly with the people who need them. If you make violins, and none of the local farmers wants one, how will you eat?</p><p>你如何让种土豆的人给你一些土豆？通过给他一些他想要的东西作为回报。但直接用东西和需要它们的人交换，你走不了多远。如果你制作小提琴，而当地农民没人想要，你该怎么吃饭？</p><p>The solution societies find, as they get more specialized, is to make the trade into a two-step process. Instead of trading violins directly for potatoes, you trade violins for, say, silver, which you can then trade again for anything else you need. The intermediate stuff– the medium of exchange– can be anything that’s rare and portable. Historically metals have been the most common, but recently we’ve been using a medium of exchange, called the dollar, that doesn’t physically exist. It works as a medium of exchange, however, because its rarity is guaranteed by the U.S. Government.</p><p>随着社会越来越专业化，人们找到的解决方案是把交易变成两步流程。你不用小提琴直接换土豆，而是用小提琴换某种东西（比如银），然后再用这种东西换你需要的任何东西。这种中间物 —— 交换媒介 —— 可以是任何稀有且便携的东西。历史上，金属是最常见的，但最近我们一直在使用一种名为 “美元” 的交换媒介，它实际上并不存在物理形态。但它能作为交换媒介，是因为美国政府保证了它的稀有性。</p><p>The advantage of a medium of exchange is that it makes trade work. The disadvantage is that it tends to obscure what trade really means. People think that what a business does is make money. But money is just the intermediate stage– just a shorthand– for whatever people want. What most businesses really do is make wealth. They do something people want. [4]</p><p>交换媒介的优势是让交易得以进行，劣势是它往往掩盖了交易的真正意义。人们认为企业的作用是赚钱，但金钱只是中间阶段 —— 只是一种简略说法 —— 代表人们想要的任何东西。大多数企业真正做的是创造财富：它们做人们想要的事。[4]</p><p><strong>The Pie Fallacy</strong></p><h3 id="馅饼谬误"><a href="#馅饼谬误" class="headerlink" title="馅饼谬误"></a><strong>馅饼谬误</strong></h3><p>A surprising number of people retain from childhood the idea that there is a fixed amount of wealth in the world. There is, in any normal family, a fixed amount of money at any moment. But that’s not the same thing.</p><p>令人惊讶的是，很多人从小就认为世界上的财富总量是固定的。在任何普通家庭中，某一时刻的金钱数量确实是固定的，但这和财富不是一回事。令人惊讶的是，很多人从小就认为世界上的财富总量是固定的。在任何普通家庭中，某一时刻的金钱数量确实是固定的，但这和财富不是一回事。</p><p>When wealth is talked about in this context, it is often described as a pie. “You can’t make the pie larger,” say politicians. When you’re talking about the amount of money in one family’s bank account, or the amount available to a government from one year’s tax revenue, this is true. If one person gets more, someone else has to get less.</p><p>在这种语境下谈论财富时，人们常把它描述成一个馅饼。“你不能把馅饼做得更大，” 政客们说。当你谈论一个家庭银行账户里的钱，或者政府一年的税收收入时，这是对的：如果一个人多拿了，另一个人就必须少拿。</p><p>I can remember believing, as a child, that if a few rich people had all the money, it left less for everyone else. Many people seem to continue to believe something like this well into adulthood. This fallacy is usually there in the background when you hear someone talking about how x percent of the population have y percent of the wealth. If you plan to start a startup, then whether you realize it or not, you’re planning to disprove the Pie Fallacy.</p><p>我记得小时候曾认为，如果少数富人拥有所有的钱，留给其他人的就少了。很多人似乎到成年后仍然相信类似的说法。当你听到有人说 “x% 的人拥有 y% 的财富” 时，这种谬误往往就隐藏在背后。如果你打算创办一家创业公司，无论你是否意识到，你都是在计划推翻这种馅饼谬误。</p><p>What leads people astray here is the abstraction of money. Money is not wealth. It’s just something we use to move wealth around. So although there may be, in certain specific moments (like your family, this month) a fixed amount of money available to trade with other people for things you want, there is not a fixed amount of wealth in the world. You can make more wealth. Wealth has been getting created and destroyed (but on balance, created) for all of human history.</p><p>让人们误入歧途的是金钱的抽象性。金钱不是财富，它只是我们用来转移财富的工具。所以，尽管在某些特定时刻（比如你家这个月），可用来和别人交换你想要的东西的金钱数量是固定的，但世界上的财富总量并不是固定的。你可以创造更多财富。在整个人类历史中，财富一直在被创造和毁灭（但总体上是在被创造）。</p><p>Suppose you own a beat-up old car. Instead of sitting on your butt next summer, you could spend the time restoring your car to pristine condition. In doing so you create wealth. The world is– and you specifically are– one pristine old car the richer. And not just in some metaphorical way. If you sell your car, you’ll get more for it.</p><p>假设你有一辆破旧的老车。明年夏天，你不用坐着无所事事，而是可以花时间把车修复到崭新的状态。在这个过程中，你创造了财富。世界 —— 特别是你 —— 因为多了一辆崭新的老车而变得更富有。而且这不只是比喻意义上的：如果你卖掉这辆车，能得到更多钱。</p><p>In restoring your old car you have made yourself richer. You haven’t made anyone else poorer. So there is obviously not a fixed pie. And in fact, when you look at it this way, you wonder why anyone would think there was. [5]</p><p>修复老车让你变得更富有，而没有让任何人变得更贫穷。所以很明显，财富不是固定的馅饼。事实上，这样想的话，你会奇怪为什么会有人认为财富是固定的。[5]</p><p>Kids know, without knowing they know, that they can create wealth. If you need to give someone a present and don’t have any money, you make one. But kids are so bad at making things that they consider home-made presents to be a distinct, inferior, sort of thing to store-bought ones– a mere expression of the proverbial thought that counts. And indeed, the lumpy ashtrays we made for our parents did not have much of a resale market.</p><p>孩子们本能地知道自己可以创造财富，只是他们没意识到。如果你需要给别人送礼物却没有钱，你会自己做一个。但孩子们不擅长做东西，所以他们认为自制礼物和商店买的是完全不同的、更低等的东西 —— 只是那句老话 “心意最重要” 的一种表达。的确，我们为父母做的那些粗糙的烟灰缸，在二手市场上卖不出什么价钱。</p><p><strong>Craftsmen</strong></p><h3 id="工匠"><a href="#工匠" class="headerlink" title="工匠"></a><strong>工匠</strong></h3><p>The people most likely to grasp that wealth can be created are the ones who are good at making things, the craftsmen. Their hand-made objects become store-bought ones. But with the rise of industrialization there are fewer and fewer craftsmen. One of the biggest remaining groups is computer programmers.</p><p>最有可能理解财富可以被创造的人，是那些擅长制作东西的人 —— 工匠。他们手工制作的东西变成了商店里售卖的商品。但随着工业化的兴起，工匠越来越少。现存最大的工匠群体之一是计算机程序员。</p><p>A programmer can sit down in front of a computer and create wealth. A good piece of software is, in itself, a valuable thing. There is no manufacturing to confuse the issue. Those characters you type are a complete, finished product. If someone sat down and wrote a web browser that didn’t suck (a fine idea, by the way), the world would be that much richer. [5b]</p><p>程序员可以坐在电脑前创造财富。一个好的软件本身就是有价值的东西，这里没有制造过程来混淆问题 —— 你输入的那些字符就是一个完整的、成品的产品。如果有人坐下来写一个不烂的网页浏览器（顺便说一句，这是个好主意），世界会因此变得更富有。[5b]</p><p>Everyone in a company works together to create wealth, in the sense of making more things people want. Many of the employees (e.g. the people in the mailroom or the personnel department) work at one remove from the actual making of stuff. Not the programmers. They literally think the product, one line at a time. And so it’s clearer to programmers that wealth is something that’s made, rather than being distributed, like slices of a pie, by some imaginary Daddy.</p><p>公司里的每个人都在共同创造财富，也就是制造更多人们想要的东西。很多员工（比如邮件收发室或人事部的人）的工作与实际制造东西有一层隔阂，但程序员不是。他们真的是一行一行地 “思考” 出产品。因此，程序员更清楚财富是被创造出来的，而不是像想象中的 “爸爸” 分馅饼那样被分配的。</p><p>It’s also obvious to programmers that there are huge variations in the rate at which wealth is created. At Viaweb we had one programmer who was a sort of monster of productivity. I remember watching what he did one long day and estimating that he had added several hundred thousand dollars to the market value of the company. A great programmer, on a roll, could create a million dollars worth of wealth in a couple weeks. A mediocre programmer over the same period will generate zero or even negative wealth (e.g. by introducing bugs).</p><p>程序员也很清楚，财富创造的速度存在巨大差异。在 Viaweb，我们有一位程序员，他的生产力高得惊人。我记得有一天看他工作了一整天，估算他为公司增加了几十万美元的市值。一个优秀的程序员在状态好的时候，几周内就能创造 100 万美元的财富。而一个平庸的程序员在同样的时间里，可能创造零甚至负的财富（比如引入漏洞）。</p><p>This is why so many of the best programmers are libertarians. In our world, you sink or swim, and there are no excuses. When those far removed from the creation of wealth– undergraduates, reporters, politicians– hear that the richest 5% of the people have half the total wealth, they tend to think injustice! An experienced programmer would be more likely to think is that all? The top 5% of programmers probably write 99% of the good software.</p><p>这就是为什么很多最优秀的程序员是自由主义者。在我们的世界里，你要么成功，要么失败，没有借口。那些远离财富创造的人 —— 大学生、记者、政客 —— 听到 “最富有的 5% 的人拥有一半的财富” 时，往往会认为这是不公！而有经验的程序员更可能想：“才这么点？” 最顶尖的 5% 的程序员可能写出了 99% 的优秀软件。</p><p>Wealth can be created without being sold. Scientists, till recently at least, effectively donated the wealth they created. We are all richer for knowing about penicillin, because we’re less likely to die from infections. Wealth is whatever people want, and not dying is certainly something we want. Hackers often donate their work by writing open source software that anyone can use for free. I am much the richer for the operating system FreeBSD, which I’m running on the computer I’m using now, and so is Yahoo, which runs it on all their servers.</p><p>财富可以在不被出售的情况下被创造。至少直到最近，科学家创造的财富实际上是捐赠出去的。我们都因为知道青霉素而变得更富有，因为我们死于感染的可能性更小了。财富是人们想要的任何东西，而 “不死亡” 显然是我们想要的。黑客经常通过编写开源软件来捐赠自己的工作，任何人都可以免费使用。我因为 FreeBSD 操作系统而变得更富有（我现在用的电脑就运行着它），雅虎也是如此 —— 他们所有的服务器都在运行它。</p><p><strong>What a Job Is</strong></p><h3 id="工作是什么"><a href="#工作是什么" class="headerlink" title="工作是什么"></a><strong>工作是什么</strong></h3><p>In industrialized countries, people belong to one institution or another at least until their twenties. After all those years you get used to the idea of belonging to a group of people who all get up in the morning, go to some set of buildings, and do things that they do not, ordinarily, enjoy doing. Belonging to such a group becomes part of your identity: name, age, role, institution. If you have to introduce yourself, or someone else describes you, it will be as something like, John Smith, age 10, a student at such and such elementary school, or John Smith, age 20, a student at such and such college.</p><p>在工业化国家，人们至少在二十几岁前都属于某个机构。多年以后，你会习惯这种归属感：一群人早上起床，去某些建筑里，做一些他们通常不喜欢做的事。属于这样的群体成了你的身份标签：姓名、年龄、角色、机构。如果你必须自我介绍，或者别人描述你时，会说 “约翰・史密斯，10 岁，某小学学生”，或者 “约翰・史密斯，20 岁，某大学学生”。</p><p>When John Smith finishes school he is expected to get a job. And what getting a job seems to mean is joining another institution. Superficially it’s a lot like college. You pick the companies you want to work for and apply to join them. If one likes you, you become a member of this new group. You get up in the morning and go to a new set of buildings, and do things that you do not, ordinarily, enjoy doing. There are a few differences: life is not as much fun, and you get paid, instead of paying, as you did in college. But the similarities feel greater than the differences. John Smith is now John Smith, 22, a software developer at such and such corporation.</p><p>约翰・史密斯毕业后，人们期望他找一份工作。而找工作似乎意味着加入另一个机构。表面上看，这和大学很像：你挑选想为之工作的公司，申请加入。如果有一家公司喜欢你，你就成了这个新群体的一员。你早上起床，去新的建筑里，做一些你通常不喜欢做的事。有几个不同之处：生活没那么有趣，而且你会得到报酬，而不是像在大学时那样付钱。但相似之处似乎比不同之处更多。约翰・史密斯现在成了 “约翰・史密斯，22 岁，某公司软件开发者”。</p><p>In fact John Smith’s life has changed more than he realizes. Socially, a company looks much like college, but the deeper you go into the underlying reality, the more different it gets.</p><p>事实上，约翰・史密斯的生活变化比他意识到的要大。从社交角度看，公司和大学很像，但越深入底层现实，差异就越大。</p><p>What a company does, and has to do if it wants to continue to exist, is earn money. And the way most companies make money is by creating wealth. Companies can be so specialized that this similarity is concealed, but it is not only manufacturing companies that create wealth. A big component of wealth is location. Remember that magic machine that could make you cars and cook you dinner and so on? It would not be so useful if it delivered your dinner to a random location in central Asia. If wealth means what people want, companies that move things also create wealth. Ditto for many other kinds of companies that don’t make anything physical. Nearly all companies exist to do something people want.</p><p>公司要做的（而且如果想继续存在就必须做的）是赚钱。大多数公司赚钱的方式是创造财富。公司可能非常专业化，以至于这种相似性被掩盖了，但不只是制造公司在创造财富。财富的一个重要组成部分是 “位置”。还记得那台能给你变出汽车、做晚餐等等的魔法机器吗？如果它把晚餐送到中亚的某个随机地点，就没那么有用了。如果财富是人们想要的东西，那么运输东西的公司也在创造财富。其他很多不制造实体产品的公司也是如此。几乎所有公司的存在都是为了做人们想要的事。</p><p>And that’s what you do, as well, when you go to work for a company. But here there is another layer that tends to obscure the underlying reality. In a company, the work you do is averaged together with a lot of other people’s. You may not even be aware you’re doing something people want. Your contribution may be indirect. But the company as a whole must be giving people something they want, or they won’t make any money. And if they are paying you x dollars a year, then on average you must be contributing at least x dollars a year worth of work, or the company will be spending more than it makes, and will go out of business.</p><p>当你为一家公司工作时，你做的也是这件事。但这里有另一层因素掩盖了底层现实：在公司里，你的工作与很多其他人的工作被平均了。你甚至可能没意识到自己在做人们想要的事，你的贡献可能是间接的。但整个公司必须给人们提供他们想要的东西，否则就赚不到钱。如果公司每年付给你 x 美元，那么平均来看，你必须贡献至少 x 美元价值的工作，否则公司会入不敷出，最终倒闭。</p><p>Someone graduating from college thinks, and is told, that he needs to get a job, as if the important thing were becoming a member of an institution. A more direct way to put it would be: you need to start doing something people want. You don’t need to join a company to do that. All a company is is a group of people working together to do something people want. It’s doing something people want that matters, not joining the group. [6]</p><p>大学毕业生会想（而且别人也会告诉他），他需要找一份工作，仿佛重要的是成为某个机构的一员。更直接的说法是：你需要开始做人们想要的事。你不需要加入公司才能做到这一点。公司只不过是一群人为了做人们想要的事而一起工作的组织。重要的是做人们想要的事，而不是加入这个群体。[6]</p><p>For most people the best plan probably is to go to work for some existing company. But it is a good idea to understand what’s happening when you do this. A job means doing something people want, averaged together with everyone else in that company.</p><p>对大多数人来说，最好的计划可能是为现有的公司工作。但理解你这么做时发生了什么是有好处的：工作意味着做人们想要的事，只不过是和公司里的其他人的工作平均在一起。</p><p><strong>Working Harder</strong></p><h3 id="更努力地工作"><a href="#更努力地工作" class="headerlink" title="更努力地工作"></a><strong>更努力地工作</strong></h3><p>That averaging gets to be a problem. I think the single biggest problem afflicting large companies is the difficulty of assigning a value to each person’s work. For the most part they punt. In a big company you get paid a fairly predictable salary for working fairly hard. You’re expected not to be obviously incompetent or lazy, but you’re not expected to devote your whole life to your work.</p><p>这种 “平均” 成了一个问题。我认为大公司面临的最大问题是，很难衡量每个员工的工作价值。在很大程度上，他们只能敷衍了事。在大公司里，你努力工作，就能得到一份相当可预测的薪水。人们期望你不要明显无能或懒惰，但不期望你把全部生活都投入工作。</p><p>It turns out, though, that there are economies of scale in how much of your life you devote to your work. In the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee. A programmer, for example, instead of chugging along maintaining and updating an existing piece of software, could write a whole new piece of software, and with it create a new source of revenue.</p><p>然而，事实证明，你投入工作的时间多少，存在规模经济效应。在合适的行业里，一个全身心投入工作的人创造的财富，可能是普通员工的 10 倍甚至 100 倍。例如，一个程序员如果不只是慢慢维护和更新现有软件，而是编写一个全新的软件，就能创造新的收入来源。</p><p>Companies are not set up to reward people who want to do this. You can’t go to your boss and say, I’d like to start working ten times as hard, so will you please pay me ten times as much? For one thing, the official fiction is that you are already working as hard as you can. But a more serious problem is that the company has no way of measuring the value of your work.</p><p>但公司的机制并不奖励想这么做的人。你不能走到老板面前说：“我想努力 10 倍，所以请付我 10 倍的薪水。” 一方面，官方的说法是你已经在尽最大努力工作了；但更严重的问题是，公司无法衡量你的工作价值。</p><p>Salesmen are an exception. It’s easy to measure how much revenue they generate, and they’re usually paid a percentage of it. If a salesman wants to work harder, he can just start doing it, and he will automatically get paid proportionally more.</p><p>销售人员是个例外。衡量他们创造的收入很容易，而且他们的报酬通常是收入的一定比例。如果销售人员想更努力工作，他可以直接开始做，报酬也会自动成比例增加。</p><p>There is one other job besides sales where big companies can hire first-rate people: in the top management jobs. And for the same reason: their performance can be measured. The top managers are held responsible for the performance of the entire company. Because an ordinary employee’s performance can’t usually be measured, he is not expected to do more than put in a solid effort. Whereas top management, like salespeople, have to actually come up with the numbers. The CEO of a company that tanks cannot plead that he put in a solid effort. If the company does badly, he’s done badly.</p><p>除了销售，大公司还有一种岗位能雇到顶尖人才：高层管理岗位。原因相同：他们的绩效可以被衡量。高层管理者要对整个公司的绩效负责。普通员工的绩效通常无法衡量，所以人们不期望他们付出更多，只需要扎实努力。而高层管理者和销售人员一样，必须拿出实际成果。如果公司业绩下滑，CEO 不能辩解说自己已经扎实努力了 —— 公司做得不好，就是他做得不好。</p><p>A company that could pay all its employees so straightforwardly would be enormously successful. Many employees would work harder if they could get paid for it. More importantly, such a company would attract people who wanted to work especially hard. It would crush its competitors.</p><p>一家能如此直接地给所有员工付薪的公司，会非常成功。很多员工如果能因此获得更多报酬，就会更努力工作。更重要的是，这样的公司会吸引那些想特别努力工作的人，从而击败竞争对手。</p><p>Unfortunately, companies can’t pay everyone like salesmen. Salesmen work alone. Most employees’ work is tangled together. Suppose a company makes some kind of consumer gadget. The engineers build a reliable gadget with all kinds of new features; the industrial designers design a beautiful case for it; and then the marketing people convince everyone that it’s something they’ve got to have. How do you know how much of the gadget’s sales are due to each group’s efforts? Or, for that matter, how much is due to the creators of past gadgets that gave the company a reputation for quality? There’s no way to untangle all their contributions. Even if you could read the minds of the consumers, you’d find these factors were all blurred together.</p><p>不幸的是，公司不能像对待销售人员那样给所有员工付薪。销售人员是独立工作的，而大多数员工的工作是相互交织的。假设一家公司生产某种消费电子产品：工程师造出了功能可靠、有各种新特性的产品；工业设计师为它设计了漂亮的外壳；然后营销人员说服所有人这是他们必须拥有的东西。你怎么知道产品的销量有多少归功于每个团队的努力？或者，有多少归功于过去的产品为公司赢得的质量声誉？你无法理清所有这些贡献。即使你能读懂消费者的心思，也会发现这些因素都是交织在一起的。</p><p>If you want to go faster, it’s a problem to have your work tangled together with a large number of other people’s. In a large group, your performance is not separately measurable– and the rest of the group slows you down.</p><p>如果你想加快速度，那么当你的工作与大量其他人的工作交织在一起时，就是个问题。在大团队中，你的绩效无法单独衡量 —— 而且团队中的其他人会拖慢你的速度。</p><p><strong>Measurement and Leverage</strong></p><h3 id="衡量与杠杆"><a href="#衡量与杠杆" class="headerlink" title="衡量与杠杆"></a><strong>衡量与杠杆</strong></h3><p>To get rich you need to get yourself in a situation with two things, measurement and leverage. You need to be in a position where your performance can be measured, or there is no way to get paid more by doing more. And you have to have leverage, in the sense that the decisions you make have a big effect.</p><p>要致富，你需要处于一种同时具备 “衡量” 和 “杠杆” 的环境中。你需要处于一个能衡量你绩效的位置，否则无法通过多做工作来获得更多报酬。而且你必须有杠杆，也就是说，你做的决策能产生巨大影响。</p><p>Measurement alone is not enough. An example of a job with measurement but not leverage is doing piecework in a sweatshop. Your performance is measured and you get paid accordingly, but you have no scope for decisions. The only decision you get to make is how fast you work, and that can probably only increase your earnings by a factor of two or three.</p><p>仅有衡量是不够的。例如，血汗工厂里的计件工作有衡量，但没有杠杆。你的绩效被衡量，报酬也相应计算，但你没有决策空间。你唯一能做的决定是工作速度，而这可能最多只能让你的收入增加两三倍。</p><p>An example of a job with both measurement and leverage would be lead actor in a movie. Your performance can be measured in the gross of the movie. And you have leverage in the sense that your performance can make or break it.</p><p>同时具备衡量和杠杆的工作例子是电影的主角。你的绩效可以通过电影的票房来衡量，而你的表现能决定电影的成败，这就是杠杆。</p><p>CEOs also have both measurement and leverage. They’re measured, in that the performance of the company is their performance. And they have leverage in that their decisions set the whole company moving in one direction or another.</p><p>CEO 也同时具备衡量和杠杆。他们的绩效通过公司的业绩来衡量，而他们的决策能让整个公司朝着某个方向发展，这就是杠杆。</p><p>I think everyone who gets rich by their own efforts will be found to be in a situation with measurement and leverage. Everyone I can think of does: CEOs, movie stars, hedge fund managers, professional athletes. A good hint to the presence of leverage is the possibility of failure. Upside must be balanced by downside, so if there is big potential for gain there must also be a terrifying possibility of loss. CEOs, stars, fund managers, and athletes all live with the sword hanging over their heads; the moment they start to suck, they’re out. If you’re in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.</p><p>我认为，所有靠自己努力致富的人，都会处于一个同时具备衡量和杠杆的环境中。我能想到的所有人都是如此：CEO、电影明星、对冲基金经理、职业运动员。杠杆存在的一个很好的迹象是 “失败的可能性”。收益必须与风险平衡，所以如果有巨大的潜在收益，就一定有可怕的潜在损失。CEO、明星、基金经理和运动员都生活在 “达摩克利斯之剑” 下 —— 一旦表现下滑，就会被淘汰。如果你从事的工作感觉很安全，你就不会致富，因为如果没有风险，几乎可以肯定没有杠杆。</p><p>But you don’t have to become a CEO or a movie star to be in a situation with measurement and leverage. All you need to do is be part of a small group working on a hard problem.</p><p>但你不必成为 CEO 或电影明星才能处于这样的环境中。你只需要加入一个致力于解决难题的小团队。</p><p><strong>Smallness &#x3D; Measurement</strong></p><h3 id="小规模-可衡量"><a href="#小规模-可衡量" class="headerlink" title="小规模 &#x3D; 可衡量"></a><strong>小规模 &#x3D; 可衡量</strong></h3><p>If you can’t measure the value of the work done by individual employees, you can get close. You can measure the value of the work done by small groups.</p><p>如果你无法衡量单个员工的工作价值，你可以接近这个目标：衡量小团队的工作价值。</p><p>One level at which you can accurately measure the revenue generated by employees is at the level of the whole company. When the company is small, you are thereby fairly close to measuring the contributions of individual employees. A viable startup might only have ten employees, which puts you within a factor of ten of measuring individual effort.</p><p>衡量员工创造的收入的一个层面是整个公司的层面。当公司规模小时，你就能相当接近地衡量单个员工的贡献。一家能存活的创业公司可能只有 10 名员工，这样你对个人努力的衡量误差就在 10 倍以内。</p><p>Starting or joining a startup is thus as close as most people can get to saying to one’s boss, I want to work ten times as hard, so please pay me ten times as much. There are two differences: you’re not saying it to your boss, but directly to the customers (for whom your boss is only a proxy after all), and you’re not doing it individually, but along with a small group of other ambitious people.</p><p>因此，创办或加入创业公司，是大多数人能接近 “对老板说‘我想努力 10 倍，所以请付我 10 倍薪水’” 的方式。有两个区别：你不是对老板说，而是直接对客户说（毕竟老板只是客户的代理）；而且你不是单独行动，而是和一小群同样有野心的人一起。</p><p>It will, ordinarily, be a group. Except in a few unusual kinds of work, like acting or writing books, you can’t be a company of one person. And the people you work with had better be good, because it’s their work that yours is going to be averaged with.</p><p>通常来说，这会是一个团队。除了少数特殊工作（如演戏或写书），你不可能一个人组成一家公司。而且你共事的人最好很优秀，因为你的工作价值会和他们的平均在一起。</p><p>A big company is like a giant galley driven by a thousand rowers. Two things keep the speed of the galley down. One is that individual rowers don’t see any result from working harder. The other is that, in a group of a thousand people, the average rower is likely to be pretty average.</p><p>大公司就像一艘由一千名划手驱动的巨型帆船。有两件事会拖慢帆船的速度：一是划手们看不到努力工作的结果；二是在一千人的团队中，划手的平均水平很可能就是普通水平。</p><p>If you took ten people at random out of the big galley and put them in a boat by themselves, they could probably go faster. They would have both carrot and stick to motivate them. An energetic rower would be encouraged by the thought that he could have a visible effect on the speed of the boat. And if someone was lazy, the others would be more likely to notice and complain.</p><p>如果你从这艘大帆船上随机选出 10 个人，让他们自己驾一艘小船，他们可能会划得更快。他们既有胡萝卜（奖励）也有大棒（惩罚）来激励自己。一个精力充沛的划手会因为知道自己能对船速产生明显影响而受到鼓舞；而如果有人懒惰，其他人更可能注意到并抱怨。</p><p>But the real advantage of the ten-man boat shows when you take the ten best rowers out of the big galley and put them in a boat together. They will have all the extra motivation that comes from being in a small group. But more importantly, by selecting that small a group you can get the best rowers. Each one will be in the top 1%. It’s a much better deal for them to average their work together with a small group of their peers than to average it with everyone.</p><p>但 10 人小船的真正优势，体现在当你把大帆船上最优秀的 10 名划手挑出来，让他们一起驾一艘船时。他们会拥有小团队带来的所有额外动力，更重要的是，通过挑选这么小的团队，你能得到最优秀的划手。每个人都会是前 1% 的水平。对他们来说，和一小群同行的工作平均在一起，比和所有人的平均在一起要好得多。</p><p>That’s the real point of startups. Ideally, you are getting together with a group of other people who also want to work a lot harder, and get paid a lot more, than they would in a big company. And because startups tend to get founded by self-selecting groups of ambitious people who already know one another (at least by reputation), the level of measurement is more precise than you get from smallness alone. A startup is not merely ten people, but ten people like you.</p><p>这就是创业公司的真正意义。理想情况下，你和一群同样想比在大公司更努力工作、获得更多报酬的人一起奋斗。而且因为创业公司往往是由一群自我选择的、有野心的人创办的（他们至少通过声誉相互了解），其衡量的精确性比单纯的小规模更高。创业公司不只是 10 个人，而是 10 个像你一样的人。</p><p>Steve Jobs once said that the success or failure of a startup depends on the first ten employees. I agree. If anything, it’s more like the first five. Being small is not, in itself, what makes startups kick butt, but rather that small groups can be select. You don’t want small in the sense of a village, but small in the sense of an all-star team.</p><p>史蒂夫・乔布斯曾说，创业公司的成败取决于最初的 10 名员工。我同意。甚至可以说，更像是最初的 5 名。小规模本身并不是创业公司成功的原因，而是小团队可以做到 “精选”。你想要的不是 “乡村式” 的小规模，而是 “全明星队式” 的小规模。</p><p>The larger a group, the closer its average member will be to the average for the population as a whole. So all other things being equal, a very able person in a big company is probably getting a bad deal, because his performance is dragged down by the overall lower performance of the others. Of course, all other things often are not equal: the able person may not care about money, or may prefer the stability of a large company. But a very able person who does care about money will ordinarily do better to go off and work with a small group of peers.</p><p>团队越大，其平均成员的水平就越接近总体人口的平均水平。所以，在其他条件相同的情况下，大公司里的优秀人才很可能吃亏，因为他们的表现被其他人的较低表现拉低了。当然，其他条件往往不相同：优秀人才可能不在乎钱，或者更喜欢大公司的稳定性。但在乎钱的优秀人才，通常会更愿意离开，和一小群同行一起工作。</p><p><strong>Technology &#x3D; Leverage</strong></p><h3 id="技术-杠杆"><a href="#技术-杠杆" class="headerlink" title="技术 &#x3D; 杠杆"></a><strong>技术 &#x3D; 杠杆</strong></h3><p>Startups offer anyone a way to be in a situation with measurement and leverage. They allow measurement because they’re small, and they offer leverage because they make money by inventing new technology.</p><p>创业公司为任何人提供了一种处于 “可衡量” 和 “有杠杆” 环境中的方式。它们因规模小而具备可衡量性，因通过发明新技术赚钱而具备杠杆。</p><p>What is technology? It’s technique. It’s the way we all do things. And when you discover a new way to do things, its value is multiplied by all the people who use it. It is the proverbial fishing rod, rather than the fish. That’s the difference between a startup and a restaurant or a barber shop. You fry eggs or cut hair one customer at a time. Whereas if you solve a technical problem that a lot of people care about, you help everyone who uses your solution. That’s leverage.</p><p>什么是技术？是技术方法，是我们做事的方式。当你发现一种新的做事方式时，它的价值会被所有使用它的人放大。这就像那句谚语说的 “授人以鱼不如授人以渔”。这就是创业公司与餐馆或理发店的区别：你炸薯条或剪头发，一次只能服务一个客户；而如果你解决了一个很多人关心的技术问题，你就帮助了所有使用你解决方案的人 —— 这就是杠杆。</p><p>If you look at history, it seems that most people who got rich by creating wealth did it by developing new technology. You just can’t fry eggs or cut hair fast enough. What made the Florentines rich in 1200 was the discovery of new techniques for making the high-tech product of the time, fine woven cloth. What made the Dutch rich in 1600 was the discovery of shipbuilding and navigation techniques that enabled them to dominate the seas of the Far East.</p><p>纵观历史，大多数通过创造财富致富的人，都是通过开发新技术做到的。你不可能以足够快的速度炸薯条或剪头发来致富。1200 年让佛罗伦萨人富起来的，是他们发现了制造当时的高科技产品 —— 精细织布 —— 的新技术；1600 年让荷兰人富起来的，是他们发现了造船和航海技术，使他们能主导远东的海洋贸易。</p><p>Fortunately there is a natural fit between smallness and solving hard problems. The leading edge of technology moves fast. Technology that’s valuable today could be worthless in a couple years. Small companies are more at home in this world, because they don’t have layers of bureaucracy to slow them down. Also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by convention.</p><p>幸运的是，小规模和解决难题之间存在天然的契合。技术的前沿变化很快：今天有价值的技术，可能几年后就一文不值。小公司更适合这种环境，因为它们没有层层官僚机构拖慢速度。此外，技术进步往往来自非正统的方法，而小公司受传统的约束更少。</p><p>Big companies can develop technology. They just can’t do it quickly. Their size makes them slow and prevents them from rewarding employees for the extraordinary effort required. So in practice big companies only get to develop technology in fields where large capital requirements prevent startups from competing with them, like microprocessors, power plants, or passenger aircraft. And even in those fields they depend heavily on startups for components and ideas.</p><p>大公司也能开发技术，但就是快不起来。它们的规模让它们行动迟缓，而且无法奖励员工付出的非凡努力。因此，实际上，大公司只能在那些需要大量资本、让创业公司无法竞争的领域（如微处理器、发电厂或客机）开发技术。即便在这些领域，它们也严重依赖创业公司提供的组件和想法。</p><p>It’s obvious that biotech or software startups exist to solve hard technical problems, but I think it will also be found to be true in businesses that don’t seem to be about technology. McDonald’s, for example, grew big by designing a system, the McDonald’s franchise, that could then be reproduced at will all over the face of the earth. A McDonald’s franchise is controlled by rules so precise that it is practically a piece of software. Write once, run everywhere. Ditto for Wal-Mart. Sam Walton got rich not by being a retailer, but by designing a new kind of store.</p><p>生物技术或软件创业公司为解决棘手技术问题而存在，这很明显。但我认为，在那些看似与技术无关的行业中，情况也是如此。例如，麦当劳能发展壮大，是因为它设计了一套系统 —— 麦当劳特许经营模式 —— 这套系统可以在世界各地随意复制。麦当劳的特许经营受到极其精确的规则控制，几乎就像一个软件：“一次编写，到处运行”。沃尔玛也是如此。山姆・沃尔顿致富，不是因为他是零售商，而是因为他设计了一种新的商店模式。</p><p>Use difficulty as a guide not just in selecting the overall aim of your company, but also at decision points along the way. At Viaweb one of our rules of thumb was run upstairs. Suppose you are a little, nimble guy being chased by a big, fat, bully. You open a door and find yourself in a staircase. Do you go up or down? I say up. The bully can probably run downstairs as fast as you can. Going upstairs his bulk will be more of a disadvantage. Running upstairs is hard for you but even harder for him.</p><p>不仅在选择公司的总体目标时，而且在沿途的每个决策点，都要用 “难度” 作为指导。在 Viaweb，我们有一个经验法则：“跑上楼”。假设你是一个灵活的小个子，被一个又胖又壮的恶霸追赶。你打开一扇门，发现自己在楼梯口。你会上楼还是下楼？我说上楼。恶霸跑下楼可能和你一样快，但上楼时，他的体重会成为更大的劣势。上楼对你来说很难，但对他来说更难。</p><p>What this meant in practice was that we deliberately sought hard problems. If there were two features we could add to our software, both equally valuable in proportion to their difficulty, we’d always take the harder one. Not just because it was more valuable, but because it was harder. We delighted in forcing bigger, slower competitors to follow us over difficult ground. Like guerillas, startups prefer the difficult terrain of the mountains, where the troops of the central government can’t follow. I can remember times when we were just exhausted after wrestling all day with some horrible technical problem. And I’d be delighted, because something that was hard for us would be impossible for our competitors.</p><p>在实践中，这意味着我们故意去寻找难题。如果有两个功能可以添加到我们的软件中，两者的价值与难度之比相同，我们总会选择更难的那个。不仅因为它更有价值，还因为它更难。我们乐于迫使更大、更慢的竞争对手跟着我们越过艰难的领域。就像游击队一样，创业公司更喜欢山区的复杂地形，因为中央政府的军队无法跟上。我记得有好几次，我们在一整天都在与某个可怕的技术问题搏斗后筋疲力尽，但我会很高兴，因为对我们来说很难的事情，对竞争对手来说可能是不可能的。</p><p>This is not just a good way to run a startup. It’s what a startup is. Venture capitalists know about this and have a phrase for it: barriers to entry. If you go to a VC with a new idea and ask him to invest in it, one of the first things he’ll ask is, how hard would this be for someone else to develop? That is, how much difficult ground have you put between yourself and potential pursuers? [7] And you had better have a convincing explanation of why your technology would be hard to duplicate. Otherwise as soon as some big company becomes aware of it, they’ll make their own, and with their brand name, capital, and distribution clout, they’ll take away your market overnight. You’d be like guerillas caught in the open field by regular army forces.</p><p>这不仅是经营创业公司的好方法，这就是创业公司的本质。风险投资家知道这一点，他们有一个说法：“进入壁垒”。如果你带着一个新想法去找风险投资家，请求投资，他首先会问的问题之一是：“其他人开发这个有多难？” 也就是说，你在自己和潜在的追赶者之间设置了多少艰难的障碍？[7] 而且你最好能有说服力地解释为什么你的技术难以复制。否则，一旦大公司注意到它，就会自己开发，凭借他们的品牌、资本和分销渠道，一夜之间夺走你的市场。你就会像在开阔地带被正规军抓住的游击队一样。</p><p>One way to put up barriers to entry is through patents. But patents may not provide much protection. Competitors commonly find ways to work around a patent. And if they can’t, they may simply violate it and invite you to sue them. A big company is not afraid to be sued; it’s an everyday thing for them. They’ll make sure that suing them is expensive and takes a long time. Ever heard of Philo Farnsworth? He invented television. The reason you’ve never heard of him is that his company was not the one to make money from it. [8] The company that did was RCA, and Farnsworth’s reward for his efforts was a decade of patent litigation.</p><p>设置进入壁垒的一种方式是通过专利，但专利可能提供不了多少保护。竞争对手通常能找到绕过专利的方法；如果绕不过，他们可能会直接侵权，然后等你来起诉。大公司不怕被起诉 —— 这对他们来说是家常便饭。他们会确保起诉他们既昂贵又耗时。你听说过菲洛・法恩斯沃思吗？他发明了电视。你没听说过他，是因为他的公司没有从电视中赚钱。[8] 赚钱的是 RCA，而法恩斯沃思的回报是长达十年的专利诉讼。</p><p>Here, as so often, the best defense is a good offense. If you can develop technology that’s simply too hard for competitors to duplicate, you don’t need to rely on other defenses. Start by picking a hard problem, and then at every decision point, take the harder choice. [9]</p><p>在这里，就像在很多情况下一样，最好的防御是主动进攻。如果你能开发出竞争对手根本无法复制的技术，你就不需要依赖其他防御手段。从选择一个难题开始，然后在每个决策点，都选择更难的选项。[9]</p><p><strong>The Catch(es)</strong></p><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a><strong>陷阱</strong></h3><p>If it were simply a matter of working harder than an ordinary employee and getting paid proportionately, it would obviously be a good deal to start a startup. Up to a point it would be more fun. I don’t think many people like the slow pace of big companies, the interminable meetings, the water-cooler conversations, the clueless middle managers, and so on.</p><p>如果创业只是比普通员工更努力工作，然后按比例获得报酬，那创办创业公司显然是个好主意。在某种程度上，这会更有趣。我认为很多人不喜欢大公司的慢节奏、没完没了的会议、茶水间的闲聊、愚蠢的中层经理等等。</p><p>Unfortunately there are a couple catches. One is that you can’t choose the point on the curve that you want to inhabit. You can’t decide, for example, that you’d like to work just two or three times as hard, and get paid that much more. When you’re running a startup, your competitors decide how hard you work. And they pretty much all make the same decision: as hard as you possibly can.</p><p>不幸的是，这里有几个陷阱。一是你无法选择自己想处于曲线的哪个点。例如，你不能决定自己想努力两三倍，然后获得相应的报酬。当你经营一家创业公司时，你的竞争对手会决定你要多努力工作 —— 而他们几乎都会做出同样的决定：尽你所能。</p><p>The other catch is that the payoff is only on average proportionate to your productivity. There is, as I said before, a large random multiplier in the success of any company. So in practice the deal is not that you’re 30 times as productive and get paid 30 times as much. It is that you’re 30 times as productive, and get paid between zero and a thousand times as much. If the mean is 30x, the median is probably zero. Most startups tank, and not just the dogfood portals we all heard about during the Internet Bubble. It’s common for a startup to be developing a genuinely good product, take slightly too long to do it, run out of money, and have to shut down.</p><p>另一个陷阱是，报酬平均来看才与生产力成比例。正如我之前所说，任何公司的成功都有很大的随机乘数。所以实际上，情况不是 “你生产力是 30 倍，报酬也是 30 倍”，而是 “你生产力是 30 倍，报酬在 0 到 1000 倍之间”。如果平均值是 30 倍，中位数可能就是 0。大多数创业公司都会失败，而且不只是我们在互联网泡沫时期听说的那些 “狗粮门户网站”。一家创业公司可能正在开发真正好的产品，但开发时间稍长，资金耗尽，就不得不关门。</p><p>A startup is like a mosquito. A bear can absorb a hit and a crab is armored against one, but a mosquito is designed for one thing: to score. No energy is wasted on defense. The defense of mosquitos, as a species, is that there are a lot of them, but this is little consolation to the individual mosquito.</p><p>创业公司就像蚊子。熊能承受一击，螃蟹有盔甲保护，但蚊子的设计目的只有一个：得分。它不会在防御上浪费能量。蚊子作为一个物种的防御方式是数量众多，但这对单个蚊子来说没什么安慰。</p><p>Startups, like mosquitos, tend to be an all-or-nothing proposition. And you don’t generally know which of the two you’re going to get till the last minute. Viaweb came close to tanking several times. Our trajectory was like a sine wave. Fortunately we got bought at the top of the cycle, but it was damned close. While we were visiting Yahoo in California to talk about selling the company to them, we had to borrow a conference room to reassure an investor who was about to back out of a new round of funding that we needed to stay alive.</p><p>创业公司和蚊子一样，往往是 “要么全有，要么全无” 的命题。而且你通常要到最后一刻才知道自己会是哪一种。Viaweb 有好几次差点失败，我们的轨迹就像正弦波。幸运的是，我们在周期的顶端被收购了，但真的非常接近失败。当我们在加州拜访雅虎，商谈把公司卖给他们时，我们还得借一个会议室，向一位即将退出新一轮融资的投资者保证我们能活下去（我们需要这笔融资来维持运营）。</p><p>The all-or-nothing aspect of startups was not something we wanted. Viaweb’s hackers were all extremely risk-averse. If there had been some way just to work super hard and get paid for it, without having a lottery mixed in, we would have been delighted. We would have much preferred a 100% chance of $1 million to a 20% chance of $10 million, even though theoretically the second is worth twice as much. Unfortunately, there is not currently any space in the business world where you can get the first deal.</p><p>这种 “全有或全无” 的特性不是我们想要的。Viaweb 的黑客们都极其厌恶风险。如果有某种方式能让我们只拼命工作，然后获得相应报酬，而不掺杂任何 “彩票” 性质，我们会很高兴。我们宁愿有 100% 的机会得到 100 万美元，也不愿有 20% 的机会得到 1000 万美元 —— 尽管理论上后者的价值是前者的两倍。不幸的是，目前商业世界中没有这样的机会。</p><p>The closest you can get is by selling your startup in the early stages, giving up upside (and risk) for a smaller but guaranteed payoff. We had a chance to do this, and stupidly, as we then thought, let it slip by. After that we became comically eager to sell. For the next year or so, if anyone expressed the slightest curiosity about Viaweb we would try to sell them the company. But there were no takers, so we had to keep going.</p><p>最接近的方式是在早期阶段卖掉你的创业公司，放弃潜在收益（和风险），换取一笔较小但有保证的回报。我们有过这样的机会，但当时愚蠢地错过了。在那之后，我们变得非常渴望被收购。在接下来的一年左右，只要有人对 Viaweb 表现出丝毫兴趣，我们就会试图把公司卖给他们。但没有人愿意买，所以我们不得不继续做下去。</p><p>It would have been a bargain to buy us at an early stage, but companies doing acquisitions are not looking for bargains. A company big enough to acquire startups will be big enough to be fairly conservative, and within the company the people in charge of acquisitions will be among the more conservative, because they are likely to be business school types who joined the company late. They would rather overpay for a safe choice. So it is easier to sell an established startup, even at a large premium, than an early-stage one.</p><p>在早期阶段收购我们本是很划算的，但进行收购的公司并不想捡便宜。大到足以收购创业公司的公司，通常也保守到足以让收购负责人（他们很可能是商学院出身、后期加入公司的人）在收购决策上更保守。他们宁愿为 “安全的选择” 多付钱。因此，收购一家成熟的创业公司（即使溢价很高），也比收购一家早期创业公司更容易。</p><p><strong>Get Users</strong></p><h3 id="获取用户"><a href="#获取用户" class="headerlink" title="获取用户"></a><strong>获取用户</strong></h3><p>I think it’s a good idea to get bought, if you can. Running a business is different from growing one. It is just as well to let a big company take over once you reach cruising altitude. It’s also financially wiser, because selling allows you to diversify. What would you think of a financial advisor who put all his client’s assets into one volatile stock?</p><p>我认为如果可能的话，被收购是个好主意。经营企业和发展企业是两回事。一旦达到稳定阶段，让大公司接手也无妨。从财务角度看，出售公司也更明智，因为这能让你实现多元化。如果一个财务顾问把客户的所有资产都投入一只波动剧烈的股票，你会怎么想？</p><p>How do you get bought? Mostly by doing the same things you’d do if you didn’t intend to sell the company. Being profitable, for example. But getting bought is also an art in its own right, and one that we spent a lot of time trying to master.</p><p>如何让公司被收购？大多数情况下，你要做的和不打算出售公司时做的事情一样，比如盈利。但被收购本身也是一门艺术，我们花了很多时间试图掌握它。</p><p>Potential buyers will always delay if they can. The hard part about getting bought is getting them to act. For most people, the most powerful motivator is not the hope of gain, but the fear of loss. For potential acquirers, the most powerful motivator is the prospect that one of their competitors will buy you. This, as we found, causes CEOs to take red-eyes. The second biggest is the worry that, if they don’t buy you now, you’ll continue to grow rapidly and will cost more to acquire later, or even become a competitor.</p><p>潜在的收购方总会尽可能拖延。被收购的难点在于让他们采取行动。对大多数人来说，最强大的动机不是对收益的希望，而是对损失的恐惧。对潜在收购方来说，最强大的动机是担心竞争对手会收购你。正如我们发现的，这会让 CEO 们连夜赶路。第二大动机是担心：如果现在不收购你，你会继续快速成长，以后收购成本更高，甚至可能成为竞争对手。</p><p>In both cases, what it all comes down to is users. You’d think that a company about to buy you would do a lot of research and decide for themselves how valuable your technology was. Not at all. What they go by is the number of users you have.</p><p>在这两种情况下，归根结底都是 “用户”。你可能会认为，打算收购你的公司会做大量研究，自己判断你的技术有多有价值。根本不是这样。他们只看你有多少用户。</p><p>In effect, acquirers assume the customers know who has the best technology. And this is not as stupid as it sounds. Users are the only real proof that you’ve created wealth. Wealth is what people want, and if people aren’t using your software, maybe it’s not just because you’re bad at marketing. Maybe it’s because you haven’t made what they want.</p><p>实际上，收购方假设客户知道谁拥有最好的技术。这并不像听起来那么愚蠢。用户是你创造了财富的唯一真正证明。财富是人们想要的东西，如果人们不使用你的软件，可能不只是因为你营销做得不好，还可能是因为你没有做出他们想要的东西。</p><p>Venture capitalists have a list of danger signs to watch out for. Near the top is the company run by techno-weenies who are obsessed with solving interesting technical problems, instead of making users happy. In a startup, you’re not just trying to solve problems. You’re trying to solve problems that users care about.</p><p>风险投资家有一份需要警惕的危险信号清单，其中靠前的是 “被技术迷经营的公司，他们痴迷于解决有趣的技术问题，而不是让用户满意”。在创业公司里，你不只是要解决问题，还要解决用户关心的问题。</p><p>So I think you should make users the test, just as acquirers do. Treat a startup as an optimization problem in which performance is measured by number of users. As anyone who has tried to optimize software knows, the key is measurement. When you try to guess where your program is slow, and what would make it faster, you almost always guess wrong.</p><p>所以我认为，你应该像收购方那样，把用户作为检验标准。把创业公司视为一个优化问题，其绩效用用户数量来衡量。任何试图优化软件的人都知道，关键在于衡量。当你试图猜测程序哪里慢、如何让它更快时，几乎总是猜错。</p><p>Number of users may not be the perfect test, but it will be very close. It’s what acquirers care about. It’s what revenues depend on. It’s what makes competitors unhappy. It’s what impresses reporters, and potential new users. Certainly it’s a better test than your a priori notions of what problems are important to solve, no matter how technically adept you are.</p><p>用户数量可能不是完美的检验标准，但会非常接近。这是收购方关心的，是收入的基础，是让竞争对手不快的原因，是给记者和潜在新用户留下深刻印象的东西。当然，无论你技术多娴熟，它都比你凭直觉判断 “哪些问题值得解决” 要好得多。</p><p>Among other things, treating a startup as an optimization problem will help you avoid another pitfall that VCs worry about, and rightly– taking a long time to develop a product. Now we can recognize this as something hackers already know to avoid: premature optimization. Get a version 1.0 out there as soon as you can. Until you have some users to measure, you’re optimizing based on guesses.</p><p>把创业公司视为优化问题，还能帮助你避免风险投资家担心的另一个陷阱 —— 开发产品耗时过长。现在我们可以意识到，这是黑客们已经知道要避免的：过早优化。尽快推出 1.0 版本。在你有用户可以衡量之前，你的优化都是基于猜测。</p><p>The ball you need to keep your eye on here is the underlying principle that wealth is what people want. If you plan to get rich by creating wealth, you have to know what people want. So few businesses really pay attention to making customers happy. How often do you walk into a store, or call a company on the phone, with a feeling of dread in the back of your mind? When you hear “your call is important to us, please stay on the line,” do you think, oh good, now everything will be all right?</p><p>你需要时刻牢记的核心原则是：财富就是人们想要的东西。如果你打算通过创造财富来致富，就必须知道人们想要什么。很少有企业真正注重让客户满意。你有多少次走进一家商店，或者给一家公司打电话时，心里隐隐感到一丝不安？当你听到 “您的来电对我们很重要，请耐心等待” 时，会觉得 “太好了，一切都会好起来” 吗？</p><p>A restaurant can afford to serve the occasional burnt dinner. But in technology, you cook one thing and that’s what everyone eats. So any difference between what people want and what you deliver is multiplied. You please or annoy customers wholesale. The closer you can get to what they want, the more wealth you generate.</p><p>一家餐馆偶尔提供一份烤焦的晚餐，或许还能承受。但在技术领域，你 “烹饪” 出一份东西，所有人都得吃这一份。所以，你提供的东西与人们想要的东西之间的任何差距，都会被无限放大。你要么让所有客户满意，要么惹恼所有客户。你越能贴近人们的需求，创造的财富就越多。</p><p><strong>Wealth and Power</strong></p><h3 id="财富与权力"><a href="#财富与权力" class="headerlink" title="财富与权力"></a><strong>财富与权力</strong></h3><p>Making wealth is not the only way to get rich. For most of human history it has not even been the most common. Until a few centuries ago, the main sources of wealth were mines, slaves and serfs, land, and cattle, and the only ways to acquire these rapidly were by inheritance, marriage, conquest, or confiscation. Naturally wealth had a bad reputation.</p><p>创造财富并非致富的唯一途径。在人类历史的大部分时间里，它甚至不是最常见的途径。直到几个世纪前，财富的主要来源还是矿山、奴隶与农奴、土地和牲畜，而快速获取这些财富的方式只有继承、婚姻、征服或没收。财富自然名声不佳。</p><p>Two things changed. The first was the rule of law. For most of the world’s history, if you did somehow accumulate a fortune, the ruler or his henchmen would find a way to steal it. But in medieval Europe something new happened. A new class of merchants and manufacturers began to collect in towns. [10] Together they were able to withstand the local feudal lord. So for the first time in our history, the bullies stopped stealing the nerds’ lunch money. This was naturally a great incentive, and possibly indeed the main cause of the second big change, industrialization.</p><p>两件事改变了这一切。首先是法治。在世界历史的大部分时间里，如果你好不容易积累了一笔财富，统治者或其爪牙总会想办法把它夺走。但在中世纪的欧洲，一些新的变化出现了：一个新的商人和制造商阶层开始在城镇聚集。[10] 他们联合起来，有能力对抗当地的封建领主。于是，在人类历史上第一次，恶霸们不再抢走 “书呆子” 的午餐钱了。这自然形成了强大的激励，或许也正是第二次重大变革 —— 工业化 —— 的主要原因。</p><p>A great deal has been written about the causes of the Industrial Revolution. But surely a necessary, if not sufficient, condition was that people who made fortunes be able to enjoy them in peace. [11] One piece of evidence is what happened to countries that tried to return to the old model, like the Soviet Union, and to a lesser extent Britain under the labor governments of the 1960s and early 1970s. Take away the incentive of wealth, and technical innovation grinds to a halt.</p><p>关于工业革命的起因，已有大量论述。但可以肯定的是，一个必要（即便不是充分）条件是：让创造财富的人能够安心享受自己的财富。[11] 有一个证据可以说明这一点：那些试图回归旧模式的国家（如苏联），以及在较小程度上 20 世纪 60 年代至 70 年代初工党执政的英国，都发生了类似的情况。一旦剥夺了财富带来的激励，技术创新就会陷入停滞。</p><p>Remember what a startup is, economically: a way of saying, I want to work faster. Instead of accumulating money slowly by being paid a regular wage for fifty years, I want to get it over with as soon as possible. So governments that forbid you to accumulate wealth are in effect decreeing that you work slowly. They’re willing to let you earn $3 million over fifty years, but they’re not willing to let you work so hard that you can do it in two. They are like the corporate boss that you can’t go to and say, I want to work ten times as hard, so please pay me ten times a much. Except this is not a boss you can escape by starting your own company.</p><p>记住，从经济角度看，创业公司的本质是：一种 “我想更快地工作” 的宣言。你不想通过五十年的固定工资慢慢积累财富，而是想尽快完成这件事。因此，禁止你积累财富的政府，实际上是在命令你放慢工作节奏。他们愿意让你在五十年里赚 300 万美元，却不愿让你通过拼命工作在两年内做到这一点。这就像你无法走到公司老板面前说 “我想努力十倍，请付我十倍薪水” 一样 —— 只不过，这个 “老板” 你无法通过创办自己的公司来逃离。</p><p>The problem with working slowly is not just that technical innovation happens slowly. It’s that it tends not to happen at all. It’s only when you’re deliberately looking for hard problems, as a way to use speed to the greatest advantage, that you take on this kind of project. Developing new technology is a pain in the ass. It is, as Edison said, one percent inspiration and ninety-nine percent perspiration. Without the incentive of wealth, no one wants to do it. Engineers will work on sexy projects like fighter planes and moon rockets for ordinary salaries, but more mundane technologies like light bulbs or semiconductors have to be developed by entrepreneurs.</p><p>工作节奏缓慢的问题，不仅在于技术创新的速度会变慢，更在于创新可能根本不会发生。只有当你刻意去寻找难题，以利用速度获得最大优势时，才会承担这类项目。开发新技术是件苦差事。正如爱迪生所说，它是 1% 的灵感加 99% 的汗水。没有财富的激励，没人愿意做这件事。工程师会为战斗机、月球火箭等 “酷炫” 项目拿普通薪水工作，但灯泡、半导体等更平凡的技术，必须靠企业家来开发。</p><p>Startups are not just something that happened in Silicon Valley in the last couple decades. Since it became possible to get rich by creating wealth, everyone who has done it has used essentially the same recipe: measurement and leverage, where measurement comes from working with a small group, and leverage from developing new techniques. The recipe was the same in Florence in 1200 as it is in Santa Clara today.</p><p>创业公司并非只是过去几十年硅谷才有的新鲜事物。自从通过创造财富可以致富以来，所有以此致富的人都使用了本质相同的方法：衡量与杠杆 —— 衡量来自小团队协作，杠杆来自新技术的开发。1200 年的佛罗伦萨与如今的圣克拉拉（硅谷所在地），使用的是同一个配方。</p><p>Understanding this may help to answer an important question: why Europe grew so powerful. Was it something about the geography of Europe? Was it that Europeans are somehow racially superior? Was it their religion? The answer (or at least the proximate cause) may be that the Europeans rode on the crest of a powerful new idea: allowing those who made a lot of money to keep it.</p><p>理解这一点或许有助于回答一个重要问题：欧洲为何变得如此强大？是因为欧洲的地理优势吗？是因为欧洲人在种族上更优越吗？还是因为他们的宗教？答案（至少直接原因）可能是：欧洲人搭乘了一个强大的新思想浪潮 —— 允许那些赚大钱的人保留自己的财富。</p><p>Once you’re allowed to do that, people who want to get rich can do it by generating wealth instead of stealing it. The resulting technological growth translates not only into wealth but into military power. The theory that led to the stealth plane was developed by a Soviet mathematician. But because the Soviet Union didn’t have a computer industry, it remained for them a theory; they didn’t have hardware capable of executing the calculations fast enough to design an actual airplane.</p><p>一旦允许人们这样做，想致富的人就可以通过创造财富而非掠夺来实现目标。由此带来的技术进步，不仅转化为财富，还转化为军事力量。隐形飞机的理论由一位苏联数学家提出，但由于苏联没有计算机产业，这一理论对他们而言始终只是理论 —— 他们没有足够快的硬件来执行计算，无法设计出实际的飞机。</p><p>In that respect the Cold War teaches the same lesson as World War II and, for that matter, most wars in recent history. Don’t let a ruling class of warriors and politicians squash the entrepreneurs. The same recipe that makes individuals rich makes countries powerful. Let the nerds keep their lunch money, and you rule the world.</p><p>从这个角度看，冷战与二战（以及近代史上的大多数战争）都传递了同一个教训：不要让由战士和政客组成的统治阶级打压企业家。让个人致富的方法，同样能让国家强大。让 “书呆子” 保住自己的午餐钱，你就能统治世界。</p><p>Notes</p><p>[1] One valuable thing you tend to get only in startups is uninterruptability. Different kinds of work have different time quanta. Someone proofreading a manuscript could probably be interrupted every fifteen minutes with little loss of productivity. But the time quantum for hacking is very long: it might take an hour just to load a problem into your head. So the cost of having someone from personnel call you about a form you forgot to fill out can be huge.</p><p>[1] 创业公司能给你带来的一个宝贵特质，是<strong>不受干扰的工作状态</strong>。不同类型的工作有不同的 “时间量子”：校对文稿的人或许每 15 分钟被打断一次， productivity（生产力）也不会受太大影响；但黑客（程序员）的时间量子很长 —— 可能需要整整一小时，才能把一个问题 “加载” 进大脑。因此，人事部的人打电话来提醒你忘了填某张表格，造成的损失可能极大。</p><p>This is why hackers give you such a baleful stare as they turn from their screen to answer your question. Inside their heads a giant house of cards is tottering.</p><p>这就是为什么当黑客从屏幕前转过身来回答你的问题时，会投来如此凶狠的目光 —— 他们脑海中那座巨大的 “纸牌屋” 正在摇摇欲坠。</p><p>The mere possibility of being interrupted deters hackers from starting hard projects. This is why they tend to work late at night, and why it’s next to impossible to write great software in a cubicle (except late at night).</p><p>仅仅是 “可能被打断” 的风险，就会让黑客不敢开始攻克难题。这也是他们倾向于在深夜工作的原因，也是为什么在格子间里几乎写不出优秀的软件（除非在深夜）。</p><p>One great advantage of startups is that they don’t yet have any of the people who interrupt you. There is no personnel department, and thus no form nor anyone to call you about it.</p><p>创业公司的一大优势在于，还没有那些会打断你的人。这里没有人事部，因此也就没有那些表格，更没人会为此给你打电话。</p><p>[2] Faced with the idea that people working for startups might be 20 or 30 times as productive as those working for large companies, executives at large companies will naturally wonder, how could I get the people working for me to do that? The answer is simple: pay them to.</p><p>[2] 面对 “创业公司员工的生产力可能是大公司员工的 20 到 30 倍” 这一说法，大公司的高管们自然会想：我怎样才能让手下的人也做到这一点？答案很简单：<strong>按生产力给他们付薪</strong>。</p><p>Internally most companies are run like Communist states. If you believe in free markets, why not turn your company into one?</p><p>大多数公司的内部运作就像共产主义国家。如果你信奉自由市场，为什么不把公司改造成一个自由市场呢？</p><p>Hypothesis: A company will be maximally profitable when each employee is paid in proportion to the wealth they generate.</p><p>假设：当每个员工的薪酬与他们创造的财富成正比时，公司的利润能达到最大化。</p><p>[3] Until recently even governments sometimes didn’t grasp the distinction between money and wealth. Adam Smith (Wealth of Nations, v:i) mentions several that tried to preserve their “wealth” by forbidding the export of gold or silver. But having more of the medium of exchange would not make a country richer; if you have more money chasing the same amount of material wealth, the only result is higher prices.</p><p>[3] 直到最近，即便是政府有时也分不清金钱与财富的区别。亚当・斯密在《国富论》（第五篇第一章）中提到，有一些国家试图通过禁止黄金或白银出口来 “保护” 它们的 “财富”。但拥有更多的交换媒介（货币）并不会让一个国家更富有 —— 如果更多的钱追逐等量的物质财富，结果只会是物价上涨。</p><p>[4] There are many senses of the word “wealth,” not all of them material. I’m not trying to make a deep philosophical point here about which is the true kind. I’m writing about one specific, rather technical sense of the word “wealth.” What people will give you money for. This is an interesting sort of wealth to study, because it is the kind that prevents you from starving. And what people will give you money for depends on them, not you.</p><p>[4] “财富” 一词有很多含义，并非都与物质相关。我不想在这里深入探讨哲学层面的 “哪种财富才是真正的财富”，而是聚焦于一个特定的、偏技术层面的定义：<strong>人们愿意为之付钱的东西</strong>。这种财富值得研究，因为它能让你免于挨饿。而人们愿意为哪些东西付钱，取决于他们，而非你。</p><p>When you’re starting a business, it’s easy to slide into thinking that customers want what you do. During the Internet Bubble I talked to a woman who, because she liked the outdoors, was starting an “outdoor portal.” You know what kind of business you should start if you like the outdoors? One to recover data from crashed hard disks.</p><p>创业时，你很容易陷入一种误区：认为客户想要的是你喜欢的东西。互联网泡沫时期，我曾遇到一位女士，她因为喜欢户外活动，就创办了一个 “户外门户网站”。但你知道吗？如果你喜欢户外活动，应该创办的是数据恢复公司 —— 帮人找回崩溃硬盘里的数据。</p><p>What’s the connection? None at all. Which is precisely my point. If you want to create wealth (in the narrow technical sense of not starving) then you should be especially skeptical about any plan that centers on things you like doing. That is where your idea of what’s valuable is least likely to coincide with other people’s.</p><p>这两者有什么关联？毫无关联。这恰恰是我的观点：如果你想创造财富（从 “不挨饿” 这个狭义的技术角度来说），就应该对任何以 “自己喜欢” 为核心的计划保持高度怀疑。在这类事情上，你对 “价值” 的判断最不可能与他人一致。</p><p>[5] In the average car restoration you probably do make everyone else microscopically poorer, by doing a small amount of damage to the environment. While environmental costs should be taken into account, they don’t make wealth a zero-sum game. For example, if you repair a machine that’s broken because a part has come unscrewed, you create wealth with no environmental cost.</p><p>[5] 在修复汽车的过程中，你可能会对环境造成微小破坏，从而让其他人变得 “微乎其微地更穷”。虽然环境成本应该被考虑在内，但这并不会让财富变成一场零和游戏。例如，如果你修理一台因某个零件松动而坏掉的机器，就是在不产生环境成本的情况下创造财富。</p><p>[5b] This essay was written before Firefox.</p><p>[5b] 本文撰写于 Firefox 浏览器出现之前。</p><p>[6] Many people feel confused and depressed in their early twenties. Life seemed so much more fun in college. Well, of course it was. Don’t be fooled by the surface similarities. You’ve gone from guest to servant. It’s possible to have fun in this new world. Among other things, you now get to go behind the doors that say “authorized personnel only.” But the change is a shock at first, and all the worse if you’re not consciously aware of it.</p><p>[6] 很多人在二十出头时会感到迷茫和沮丧。大学时光似乎有趣得多 —— 当然是这样。不要被表面的相似性所迷惑：你已经从 “客人” 变成了 “仆人”。在这个新世界里依然可以找到乐趣，比如，你现在能走进那些标着 “仅限授权人员进入” 的门。但这种转变起初会让人震惊，如果你没有清醒地意识到这一点，冲击会更大。</p><p>[7] When VCs asked us how long it would take another startup to duplicate our software, we used to reply that they probably wouldn’t be able to at all. I think this made us seem naive, or liars.</p><p>[7] 当年风投问我们，其他创业公司需要多久才能复制我们的软件时，我们总回答 “他们可能根本做不到”。现在想来，这让我们显得要么天真，要么像骗子。</p><p>[8] Few technologies have one clear inventor. So as a rule, if you know the “inventor” of something (the telephone, the assembly line, the airplane, the light bulb, the transistor) it is because their company made money from it, and the company’s PR people worked hard to spread the story. If you don’t know who invented something (the automobile, the television, the computer, the jet engine, the laser), it’s because other companies made all the money.</p><p>[8] 很少有技术能明确归属于某一个发明者。因此，通常来说，如果你知道某样东西（电话、流水线、飞机、灯泡、晶体管）的 “发明者” 是谁，那是因为他们的公司从中赚了钱，并且公司的公关人员不遗余力地传播了这个故事。如果你不知道某样东西（汽车、电视、计算机、喷气发动机、激光）的发明者是谁，那是因为钱都被其他公司赚走了。</p><p>[9] This is a good plan for life in general. If you have two choices, choose the harder. If you’re trying to decide whether to go out running or sit home and watch TV, go running. Probably the reason this trick works so well is that when you have two choices and one is harder, the only reason you’re even considering the other is laziness. You know in the back of your mind what’s the right thing to do, and this trick merely forces you to acknowledge it.</p><p>[9] 这是一个适用于生活的好原则：<strong>面对两个选择时，选更难的那个</strong>。比如，当你纠结于出去跑步还是在家看电视时，选跑步。这个原则之所以有效，可能是因为当两个选择中一个更难时，你会考虑另一个的唯一原因就是懒惰。你内心深处知道该做什么，而这个原则只是迫使你承认这一点。</p><p>[10] It is probably no accident that the middle class first appeared in northern Italy and the low countries, where there were no strong central governments. These two regions were the richest of their time and became the twin centers from which Renaissance civilization radiated. If they no longer play that role, it is because other places, like the United States, have been truer to the principles they discovered.</p><p>[10] 中产阶级最早出现在意大利北部和低地国家（荷兰、比利时等）并非偶然 —— 这些地区没有强大的中央政府。这两个地区是当时最富有的地方，也成为文艺复兴文明辐射的双中心。如今它们不再扮演这一角色，是因为其他地方（如美国）更忠实地践行了它们发现的原则。</p><p>[11] It may indeed be a sufficient condition. But if so, why didn’t the Industrial Revolution happen earlier? Two possible (and not incompatible) answers: (a) It did. The Industrial Revolution was one in a series. (b) Because in medieval towns, monopolies and guild regulations initially slowed the development of new means of production.</p><p>[11] 这或许确实是一个充分条件。但如果是这样，工业革命为何没有更早发生？有两个可能的（且不矛盾的）答案：（a）它确实发生过 —— 工业革命是一系列变革中的一次。（b）因为在中世纪的城镇中，垄断和行会制度最初延缓了新生产方式的发展。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何写出有用的文章</title>
    <link href="/2025/08/06/how-to-write-usefully/"/>
    <url>/2025/08/06/how-to-write-usefully/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Write-Usefully"><a href="#How-to-Write-Usefully" class="headerlink" title="How to Write Usefully"></a>How to Write Usefully</h2><p>原文链接: <a href="https://paulgraham.com/useful.html">https://paulgraham.com/useful.html</a></p><p>February 2020</p><p>What should an essay be? Many people would say persuasive. That’s what a lot of us were taught essays should be. But I think we can aim for something more ambitious: that an essay should be useful.</p><p>一篇文章应该是什么样的？很多人会说 “有说服力”。这是我们很多人被教导的文章准则。但我认为，我们可以追求更宏大的目标：文章应当 “有用”。</p><p>To start with, that means it should be correct. But it’s not enough merely to be correct. It’s easy to make a statement correct by making it vague. That’s a common flaw in academic writing, for example. If you know nothing at all about an issue, you can’t go wrong by saying that the issue is a complex one, that there are many factors to be considered, that it’s a mistake to take too simplistic a view of it, and so on.</p><p>首先，这意味着文章必须是正确的。但仅仅正确还不够。让一个表述正确很容易，只要让它足够模糊就行。比如，学术写作中就有这样一个常见缺陷：如果你对某个问题一无所知，说 “这个问题很复杂”“有很多因素需要考虑”“过于简化是错误的” 之类的话，就永远不会出错。</p><p>Though no doubt correct, such statements tell the reader nothing. Useful writing makes claims that are as strong as they can be made without becoming false.</p><p>但这类表述即便正确，也无法告诉读者任何东西。有用的文章所提出的观点，要在不变成错误的前提下，尽可能有力。</p><p>For example, it’s more useful to say that Pike’s Peak is near the middle of Colorado than merely somewhere in Colorado. But if I say it’s in the exact middle of Colorado, I’ve now gone too far, because it’s a bit east of the middle.</p><p>举个例子，说 “派克峰在科罗拉多州中部附近”，比只说 “在科罗拉多州某处” 更有用。但如果我说 “它就在科罗拉多州正中心”，就过头了 —— 因为它其实在中心偏东一点。</p><p>Precision and correctness are like opposing forces. It’s easy to satisfy one if you ignore the other. The converse of vaporous academic writing is the bold, but false, rhetoric of demagogues. Useful writing is bold, but true.</p><p>精确性和正确性就像一对相反的力。忽视其中一个，就很容易满足另一个。空洞的学术写作的对立面，是煽动者那种大胆却虚假的花言巧语。而有用的文章，既要大胆，又要真实。</p><p>It’s also two other things: it tells people something important, and that at least some of them didn’t already know.</p><p>此外，它还需要满足另外两个条件：告诉人们一些重要的事，且至少有一部分人此前并不知道。</p><p>Telling people something they didn’t know doesn’t always mean surprising them. Sometimes it means telling them something they knew unconsciously but had never put into words. In fact those may be the more valuable insights, because they tend to be more fundamental.</p><p>告诉人们不知道的事，不一定意味着要让他们惊讶。有时，是把他们潜意识里知道、却从未用语言表达过的事说出来。事实上，这类见解可能更有价值，因为它们往往更根本。</p><p>Let’s put them all together. Useful writing tells people something true and important that they didn’t already know, and tells them as unequivocally as possible.</p><p>把这些条件合起来：有用的文章，是用最明确的方式，告诉人们一些真实、重要且他们此前不知道的事。</p><p>Notice these are all a matter of degree. For example, you can’t expect an idea to be novel to everyone. Any insight that you have will probably have already been had by at least one of the world’s 7 billion people. But it’s sufficient if an idea is novel to a lot of readers.</p><p>要注意，这些条件都有程度之分。比如，你不能指望一个观点对所有人来说都是新颖的。你的任何见解，全球 70 亿人中或许至少已有一人想到过。但只要对很多读者来说是新颖的，就足够了。</p><p>Ditto for correctness, importance, and strength. In effect the four components are like numbers you can multiply together to get a score for usefulness. Which I realize is almost awkwardly reductive, but nonetheless true.</p><p>正确性、重要性和明确性也是如此。实际上，这四个要素就像一组数字，相乘之后就能得出 “有用性” 的分数。我知道这几乎是生硬的简化，但事实的确如此。</p><hr><p>How can you ensure that the things you say are true and novel and important? Believe it or not, there is a trick for doing this. I learned it from my friend Robert Morris, who has a horror of saying anything dumb. His trick is not to say anything unless he’s sure it’s worth hearing. This makes it hard to get opinions out of him, but when you do, they’re usually right.</p><p>如何确保你所说的内容真实、新颖且重要？信不信由你，有个诀窍。我从朋友罗伯特・莫里斯那里学来的 —— 他极度害怕说蠢话。他的诀窍是：除非确定某句话值得听，否则绝不说。这让他很难发表看法，但一旦说出来，往往是对的。</p><p>Translated into essay writing, what this means is that if you write a bad sentence, you don’t publish it. You delete it and try again. Often you abandon whole branches of four or five paragraphs. Sometimes a whole essay.</p><p>放到文章写作中，这意味着：如果写出一句糟糕的话，就不要发表。删掉它，重新写。通常，你会放弃四五个段落的完整分支，有时甚至是整篇文章。</p><p>You can’t ensure that every idea you have is good, but you can ensure that every one you publish is, by simply not publishing the ones that aren’t.</p><p>你无法保证自己所有的想法都是好的，但可以保证发表的都是好的 —— 只要不发表那些不好的就行。</p><p>In the sciences, this is called publication bias, and is considered bad. When some hypothesis you’re exploring gets inconclusive results, you’re supposed to tell people about that too. But with essay writing, publication bias is the way to go.</p><p>在科学界，这被称为 “发表偏倚”，被认为是不好的。当你探索的某个假设得出不确定的结果时，按理说也应该告诉人们。但写文章时，发表偏倚反而是可取的。</p><p>My strategy is loose, then tight. I write the first draft of an essay fast, trying out all kinds of ideas. Then I spend days rewriting it very carefully.</p><p>我的策略是 “先松后紧”：先快速写出文章初稿，尝试各种想法；然后花几天时间仔细修改。</p><p>I’ve never tried to count how many times I proofread essays, but I’m sure there are sentences I’ve read 100 times before publishing them. When I proofread an essay, there are usually passages that stick out in an annoying way, sometimes because they’re clumsily written, and sometimes because I’m not sure they’re true. The annoyance starts out unconscious, but after the tenth reading or so I’m saying “Ugh, that part” each time I hit it. They become like briars that catch your sleeve as you walk past. Usually I won’t publish an essay till they’re all gone — till I can read through the whole thing without the feeling of anything catching.</p><p>我从没数过自己会校对文章多少次，但可以肯定，有些句子在发表前我读了不下 100 遍。校稿时，总会有一些段落显得刺眼 —— 有时是因为写得笨拙，有时是因为我不确定它是否正确。这种不适感一开始是潜意识的，但读了十遍左右后，每次读到那些地方，我都会想 “唉，这部分”。它们就像走过时会勾住袖子的荆棘。通常，我要等到这些 “荆棘” 都消失 —— 能一口气读完整篇文章，没有任何卡顿感 —— 才会发表。</p><p>I’ll sometimes let through a sentence that seems clumsy, if I can’t think of a way to rephrase it, but I will never knowingly let through one that doesn’t seem correct. You never have to. If a sentence doesn’t seem right, all you have to do is ask why it doesn’t, and you’ve usually got the replacement right there in your head.</p><p>有时，如果想不出更好的表达方式，我会容忍一句略显笨拙的话，但绝不会明知某句话不正确还放过去。你永远不必这样做。如果一句话不对劲，只要问问自己为什么不对劲，脑子里通常就会出现替代方案。</p><p>This is where essayists have an advantage over journalists. You don’t have a deadline. You can work for as long on an essay as you need to get it right. You don’t have to publish the essay at all, if you can’t get it right. Mistakes seem to lose courage in the face of an enemy with unlimited resources. Or that’s what it feels like. What’s really going on is that you have different expectations for yourself. You’re like a parent saying to a child “we can sit here all night till you eat your vegetables.” Except you’re the child too.</p><p>这是散文作家相对于记者的优势：你没有截稿日期。可以花足够多的时间把文章写对，写不对甚至可以不发表。错误在拥有无限时间的对手面前，似乎会失去勇气。至少感觉是这样。其实，是你对自己的期待不同了。就像父母对孩子说 “我们可以坐一整晚，直到你吃掉蔬菜”—— 只不过，你既是父母，也是孩子。</p><p>I’m not saying no mistake gets through. For example, I added condition (c) in “A Way to Detect Bias” after readers pointed out that I’d omitted it. But in practice you can catch nearly all of them.</p><p>我不是说不会有错误漏网。比如，在《一种检测偏见的方法》中，有读者指出我漏了（c）项，我后来补上了。但实际上，你几乎能抓住所有错误。</p><p>There’s a trick for getting importance too. It’s like the trick I suggest to young founders for getting startup ideas: to make something you yourself want. You can use yourself as a proxy for the reader. The reader is not completely unlike you, so if you write about topics that seem important to you, they’ll probably seem important to a significant number of readers as well.</p><p>获得 “重要性” 也有个诀窍，就像我给年轻创业者的建议：做自己想要的东西。你可以把自己当作读者的替身。读者和你不会完全不同，所以如果你写的话题对自己来说重要，对很多读者来说可能也重要。</p><p>Importance has two factors. It’s the number of people something matters to, times how much it matters to them. Which means of course that it’s not a rectangle, but a sort of ragged comb, like a Riemann sum.</p><p>重要性有两个要素：受影响的人数，乘以这件事对他们的重要程度。这意味着它不是一个矩形，更像一把参差不齐的梳子，类似黎曼和。</p><p>The way to get novelty is to write about topics you’ve thought about a lot. Then you can use yourself as a proxy for the reader in this department too. Anything you notice that surprises you, who’ve thought about the topic a lot, will probably also surprise a significant number of readers. And here, as with correctness and importance, you can use the Morris technique to ensure that you will. If you don’t learn anything from writing an essay, don’t publish it.</p><p>获得 “新颖性” 的方法，是写自己思考了很久的话题。这时，你也可以把自己当作读者的替身。如果你 —— 一个思考过这个话题很久的人 —— 发现某件事很惊讶，那么很多读者可能也会惊讶。而且，和正确性、重要性一样，你可以用莫里斯的诀窍来确保这一点：如果写一篇文章时没学到新东西，就不要发表。</p><p>You need humility to measure novelty, because acknowledging the novelty of an idea means acknowledging your previous ignorance of it. Confidence and humility are often seen as opposites, but in this case, as in many others, confidence helps you to be humble. If you know you’re an expert on some topic, you can freely admit when you learn something you didn’t know, because you can be confident that most other people wouldn’t know it either.</p><p>衡量新颖性需要谦逊，因为承认一个想法的新颖性，意味着承认自己此前不知道它。自信和谦逊通常被视为对立面，但在这件事上（以及很多其他事上），自信能帮你保持谦逊。如果你知道自己是某个领域的专家，就可以坦然承认学到了新知识 —— 因为你有信心，大多数人也不知道。</p><p>The fourth component of useful writing, strength, comes from two things: thinking well, and the skillful use of qualification. These two counterbalance each other, like the accelerator and clutch in a car with a manual transmission. As you try to refine the expression of an idea, you adjust the qualification accordingly. Something you’re sure of, you can state baldly with no qualification at all, as I did the four components of useful writing. Whereas points that seem dubious have to be held at arm’s length with perhapses.</p><p>有用的文章的第四个要素 “明确性”，来自两点：清晰的思考，以及对限定语的巧妙使用。这两者相互平衡，就像手动挡汽车的油门和离合器。当你试图完善一个想法的表达时，会相应地调整限定语。对于确定的事，你可以直言不讳，不加任何限定 —— 就像我表述有用写作的四个要素时那样。而那些存疑的观点，可能需要用 “或许” 之类的词保持距离。</p><p>As you refine an idea, you’re pushing in the direction of less qualification. But you can rarely get it down to zero. Sometimes you don’t even want to, if it’s a side point and a fully refined version would be too long.</p><p>完善想法时，你会朝着减少限定的方向努力，但很少能减到零。有时甚至不想减到零 —— 如果那是个次要观点，完全完善的版本可能太长了。</p><p>Some say that qualifications weaken writing. For example, that you should never begin a sentence in an essay with “I think,” because if you’re saying it, then of course you think it. And it’s true that “I think x” is a weaker statement than simply “x.” Which is exactly why you need “I think.” You need it to express your degree of certainty.</p><p>有人说限定语会削弱文章的力量。比如，文章里不该用 “我认为” 开头，因为你说出来的话，显然是你认为的。的确，“我认为 x” 比单纯说 “x” 要弱。但这正是需要 “我认为” 的原因：它能表达你的确定程度。</p><p>But qualifications are not scalars. They’re not just experimental error. There must be 50 things they can express: how broadly something applies, how you know it, how happy you are it’s so, even how it could be falsified. I’m not going to try to explore the structure of qualification here. It’s probably more complex than the whole topic of writing usefully. Instead I’ll just give you a practical tip: Don’t underestimate qualification. It’s an important skill in its own right, not just a sort of tax you have to pay in order to avoid saying things that are false. So learn and use its full range. It may not be fully half of having good ideas, but it’s part of having them.</p><p>但限定语不是标量，不只是 “实验误差”。它们能表达的东西恐怕有 50 种：适用范围有多广、你是如何得知的、你对此有多认同、甚至它如何能被证伪。我不想在这里探讨限定语的结构 —— 它可能比 “如何写出有用的文章” 这个话题本身更复杂。我只想给个实用建议：不要低估限定语。它本身就是一项重要技能，不只是为了避免说错话而必须交的 “税”。所以，要学习并充分运用它的全部功能。它或许不算 “提出好想法” 的一半，但也是其中一部分。</p><p>There’s one other quality I aim for in essays: to say things as simply as possible. But I don’t think this is a component of usefulness. It’s more a matter of consideration for the reader. And it’s a practical aid in getting things right; a mistake is more obvious when expressed in simple language. But I’ll admit that the main reason I write simply is not for the reader’s sake or because it helps get things right, but because it bothers me to use more or fancier words than I need to. It seems inelegant, like a program that’s too long.</p><p>我写文章时还追求一点：尽可能简单地表达。但我不认为这是 “有用性” 的要素，更多是对读者的体谅。而且，它能帮你把事情做对 —— 用简单的语言表达时，错误更明显。但说实话，我写得简单，主要不是为了读者，也不是为了更容易写对，而是因为用多余或花哨的词会让我不舒服。这显得不雅，就像一段太长的程序。</p><p>I realize florid writing works for some people. But unless you’re sure you’re one of them, the best advice is to write as simply as you can.</p><p>我知道华丽的文字对有些人有用。但除非你确定自己是那类人，否则最好的建议是：尽可能写得简单。</p><hr><p>I believe the formula I’ve given you, importance + novelty + correctness + strength, is the recipe for a good essay. But I should warn you that it’s also a recipe for making people mad.</p><p>我认为，“重要性 + 新颖性 + 正确性 + 明确性” 这个公式，就是写出好文章的秘诀。但我得提醒你，这也可能让人生气。</p><p>The root of the problem is novelty. When you tell people something they didn’t know, they don’t always thank you for it. Sometimes the reason people don’t know something is because they don’t want to know it. Usually because it contradicts some cherished belief. And indeed, if you’re looking for novel ideas, popular but mistaken beliefs are a good place to find them. Every popular mistaken belief creates a dead zone of ideas around it that are relatively unexplored because they contradict it.</p><p>问题的根源在于 “新颖性”。当你告诉人们他们不知道的事时，他们未必会感谢你。有时，人们不知道某件事，是因为他们不想知道 —— 通常是因为这件事和他们珍视的信念相矛盾。事实上，如果你想找新颖的想法，流行却错误的信念是个好地方。每个流行的错误信念，都会围绕它形成一个 “思想死区”—— 因为与它矛盾，这些想法相对未被探索。</p><p>The strength component just makes things worse. If there’s anything that annoys people more than having their cherished assumptions contradicted, it’s having them flatly contradicted.</p><p>“明确性” 会让情况更糟。如果说有什么比 “珍视的假设被反驳” 更让人恼火，那就是 “被直言不讳地反驳”。</p><p>Plus if you’ve used the Morris technique, your writing will seem quite confident. Perhaps offensively confident, to people who disagree with you. The reason you’ll seem confident is that you are confident: you’ve cheated, by only publishing the things you’re sure of. It will seem to people who try to disagree with you that you never admit you’re wrong. In fact you constantly admit you’re wrong. You just do it before publishing instead of after.</p><p>再加上如果你用了莫里斯的诀窍，你的文章会显得很自信。对不同意你的人来说，这种自信可能很刺耳。你显得自信，是因为你确实自信：你 “作弊” 了 —— 只发表自己确定的内容。那些想反驳你的人会觉得，你从不承认自己错了。但实际上，你一直在承认错误 —— 只是在发表前，而不是之后。</p><p>And if your writing is as simple as possible, that just makes things worse. Brevity is the diction of command. If you watch someone delivering unwelcome news from a position of inferiority, you’ll notice they tend to use lots of words, to soften the blow. Whereas to be short with someone is more or less to be rude to them.</p><p>如果你写得尽可能简单，只会让情况更糟。简洁是命令的口吻。你会发现，地位较低的人传递坏消息时，往往会说很多话来缓和冲击。而对人说话简短，差不多就是粗鲁。</p><p>It can sometimes work to deliberately phrase statements more weakly than you mean. To put “perhaps” in front of something you’re actually quite sure of. But you’ll notice that when writers do this, they usually do it with a wink.</p><p>有时，故意把话说得比实际想法弱一点是有用的。比如，在你很确定的事前面加个 “或许”。但你会发现，作家这么做时，通常会带点暗示。</p><p>I don’t like to do this too much. It’s cheesy to adopt an ironic tone for a whole essay. I think we just have to face the fact that elegance and curtness are two names for the same thing.</p><p>我不太喜欢这么做。整篇文章都用讽刺的语气，会显得俗气。我想，我们得接受一个事实：优雅和简略其实是一回事。</p><p>You might think that if you work sufficiently hard to ensure that an essay is correct, it will be invulnerable to attack. That’s sort of true. It will be invulnerable to valid attacks. But in practice that’s little consolation.</p><p>你可能觉得，只要足够努力确保文章正确，它就不会被攻击。某种程度上是对的 —— 它不会被合理地攻击。但实际上，这没什么安慰作用。</p><p>In fact, the strength component of useful writing will make you particularly vulnerable to misrepresentation. If you’ve stated an idea as strongly as you could without making it false, all anyone has to do is to exaggerate slightly what you said, and now it is false.</p><p>事实上，有用的文章的 “明确性” 会让你特别容易被曲解。如果你把一个想法表达得尽可能有力又不虚假，那么任何人只要稍微夸大一点你说的话，它就变成错误的了。</p><p>Much of the time they’re not even doing it deliberately. One of the most surprising things you’ll discover, if you start writing essays, is that people who disagree with you rarely disagree with what you’ve actually written. Instead they make up something you said and disagree with that.</p><p>很多时候，他们并非故意。如果你开始写文章，会发现一个很惊讶的事：不同意你的人，很少反驳你实际写的内容。他们会编造你 “说过” 的话，然后反驳那个。</p><p>For what it’s worth, the countermove is to ask someone who does this to quote a specific sentence or passage you wrote that they believe is false, and explain why. I say “for what it’s worth” because they never do. So although it might seem that this could get a broken discussion back on track, the truth is that it was never on track in the first place.</p><p>不妨试试这个对策：让曲解你的人引用你写的某句话或某段话，解释为什么它是错的。我说 “不妨试试”，是因为他们从没这么做过。所以，虽然这看似能让混乱的讨论回到正轨，但事实是，讨论从一开始就不在正轨上。</p><p>Should you explicitly forestall likely misinterpretations? Yes, if they’re misinterpretations a reasonably smart and well-intentioned person might make. In fact it’s sometimes better to say something slightly misleading and then add the correction than to try to get an idea right in one shot. That can be more efficient, and can also model the way such an idea would be discovered.</p><p>是否应该明确预防可能的误解？是的，如果那是一个聪明且善意的人可能产生的误解。事实上，有时先说一句略带误导的话，再补充纠正，比试图一次说对更有效 —— 这能模拟发现某个想法的过程。</p><p>But I don’t think you should explicitly forestall intentional misinterpretations in the body of an essay. An essay is a place to meet honest readers. You don’t want to spoil your house by putting bars on the windows to protect against dishonest ones. The place to protect against intentional misinterpretations is in end-notes. But don’t think you can predict them all. People are as ingenious at misrepresenting you when you say something they don’t want to hear as they are at coming up with rationalizations for things they want to do but know they shouldn’t. I suspect it’s the same skill.</p><p>但我认为，不应该在文章主体中明确预防故意的误解。文章是与真诚的读者相遇的地方。为了防备不真诚的人而给窗户装铁栏，会毁掉你的 “房子”。防备故意误解的地方应该是尾注。但别指望能预测所有误解。当你说的话是他们不想听的，人们曲解你的本事，和他们为想做却知道不该做的事找借口的本事一样大。我怀疑这是同一种技能。</p><hr><p>As with most other things, the way to get better at writing essays is to practice. But how do you start? Now that we’ve examined the structure of useful writing, we can rephrase that question more precisely. Which constraint do you relax initially? The answer is, the first component of importance: the number of people who care about what you write.</p><p>和大多数事情一样，写文章的技巧也需要练习。但该如何开始？既然我们已经分析了有用的写作的结构，就能更精确地重述这个问题：一开始应该放宽哪个约束？答案是 “重要性” 的第一个要素：关心你所写内容的人数。</p><p>If you narrow the topic sufficiently, you can probably find something you’re an expert on. Write about that to start with. If you only have ten readers who care, that’s fine. You’re helping them, and you’re writing. Later you can expand the breadth of topics you write about.</p><p>如果你把话题缩得足够小，或许能找到自己擅长的领域。先写这个。即使只有 10 个关心的读者，也没关系。你在帮他们，也在练习写作。之后，再扩大写作的话题范围。</p><p>The other constraint you can relax is a little surprising: publication. Writing essays doesn’t have to mean publishing them. That may seem strange now that the trend is to publish every random thought, but it worked for me. I wrote what amounted to essays in notebooks for about 15 years. I never published any of them and never expected to. I wrote them as a way of figuring things out. But when the web came along I’d had a lot of practice.</p><p>另一个可以放宽的约束有点出人意料：发表。写文章不一定意味着要发表。现在大家都倾向于把随便一个想法都发出来，这显得奇怪，但对我有用。我在笔记本上写了差不多 15 年类似文章的东西，从没发表过，也没想过要发表。我写它们是为了理清思路。但当网络出现时，我已经有了很多练习。</p><p>Incidentally, Steve Wozniak did the same thing. In high school he designed computers on paper for fun. He couldn’t build them because he couldn’t afford the components. But when Intel launched 4K DRAMs in 1975, he was ready.</p><p>顺便说一句，史蒂夫・沃兹尼亚克也是如此。高中时，他为了好玩，在纸上设计电脑。他造不出来，因为买不起零件。但 1975 年英特尔推出 4K DRAM 时，他已经准备好了。</p><hr><p>How many essays are there left to write though? The answer to that question is probably the most exciting thing I’ve learned about essay writing. Nearly all of them are left to write.</p><p>但还有多少文章有待写作？这个问题的答案，可能是我在文章写作中最令人兴奋的发现：几乎所有文章都还没写。</p><p>Although the essay is an old form, it hasn’t been assiduously cultivated. In the print era, publication was expensive, and there wasn’t enough demand for essays to publish that many. You could publish essays if you were already well known for writing something else, like novels. Or you could write book reviews that you took over to express your own ideas. But there was not really a direct path to becoming an essayist. Which meant few essays got written, and those that did tended to be about a narrow range of subjects.</p><p>尽管散文是一种古老的体裁，但并未被精心培育。在印刷时代，出版成本高，对散文的需求也不足以支撑大量出版。你得先因写小说之类的东西出名，才能发表散文；或者写书评，借机表达自己的想法。但没有成为散文作家的直接路径。这意味着很少有散文被写出，而写出的那些，主题范围也很窄。</p><p>Now, thanks to the internet, there’s a path. Anyone can publish essays online. You start in obscurity, perhaps, but at least you can start. You don’t need anyone’s permission.</p><p>现在，多亏了互联网，有了路径。任何人都能在网上发表散文。或许一开始默默无闻，但至少能开始，不需要任何人的许可。</p><p>It sometimes happens that an area of knowledge sits quietly for years, till some change makes it explode. Cryptography did this to number theory. The internet is doing it to the essay.</p><p>有时，某个知识领域会沉寂多年，直到某个变化让它爆发。密码学让数论爆发，互联网正在让散文爆发。</p><p>The exciting thing is not that there’s a lot left to write, but that there’s a lot left to discover. There’s a certain kind of idea that’s best discovered by writing essays. If most essays are still unwritten, most such ideas are still undiscovered.</p><p>令人兴奋的不是还有很多文章要写，而是还有很多发现要做。有一种想法，最适合通过写散文来发现。如果大多数散文还没写，那么大多数这类想法也还没被发现。</p><p>Notes</p><p>[1] Put railings on the balconies, but don’t put bars on the windows.</p><p>[1] 给阳台装护栏，但别给窗户装铁栏。</p><p>[2] Even now I sometimes write essays that are not meant for publication. I wrote several to figure out what Y Combinator should do, and they were really helpful.</p><p>[2] 即便现在，我有时也会写一些不打算发表的文章。我曾写过几篇，目的是理清 Y Combinator（一家创业孵化器）应该做什么，这些文章真的很有帮助。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创业之前</title>
    <link href="/2025/08/05/before-the-startup/"/>
    <url>/2025/08/05/before-the-startup/</url>
    
    <content type="html"><![CDATA[<h2 id="Before-the-Startup"><a href="#Before-the-Startup" class="headerlink" title="Before the Startup"></a>Before the Startup</h2><p>原文链接: <a href="https://paulgraham.com/before.html">https://paulgraham.com/before.html</a></p><p>October 2014</p><p>(This essay is derived from a guest lecture in Sam Altman’s startup class at Stanford. It’s intended for college students, but much of it is applicable to potential founders at other ages.)</p><p>（本文改编自我在斯坦福大学山姆・奥特曼创业课上的客座演讲。内容虽面向大学生，但其中很多观点也适用于其他年龄段的潜在创业者。）</p><p>One of the advantages of having kids is that when you have to give advice, you can ask yourself “what would I tell my own kids?” My kids are little, but I can imagine what I’d tell them about startups if they were in college, and that’s what I’m going to tell you.</p><p>有孩子的好处之一是，当你需要给出建议时，你可以问自己：“我会对自己的孩子说什么？” 我的孩子还小，但我能想象如果他们上了大学，我会跟他们讲哪些关于创业的事 —— 接下来我要讲的就是这些。</p><p>Startups are very counterintuitive. I’m not sure why. Maybe it’s just because knowledge about them hasn’t permeated our culture yet. But whatever the reason, starting a startup is a task where you can’t always trust your instincts.</p><p>创业这件事非常反直觉。我不确定原因何在，或许是因为关于创业的知识还没渗透到我们的文化中。但无论如何，创业时，你不能总相信自己的直觉。</p><p>It’s like skiing in that way. When you first try skiing and you want to slow down, your instinct is to lean back. But if you lean back on skis you fly down the hill out of control. So part of learning to ski is learning to suppress that impulse. Eventually you get new habits, but at first it takes a conscious effort. At first there’s a list of things you’re trying to remember as you start down the hill.</p><p>这有点像滑雪。第一次滑雪时，你想减速，直觉会让你向后仰。但滑雪时向后仰，你只会失控地冲下山坡。所以学滑雪的一部分内容，就是学会抑制这种冲动。最终你会养成新习惯，但一开始必须有意识地努力 —— 刚开始下坡时，你得时刻记着一长串注意事项。</p><p>Startups are as unnatural as skiing, so there’s a similar list for startups. Here I’m going to give you the first part of it — the things to remember if you want to prepare yourself to start a startup.</p><p>创业和滑雪一样 “违背天性”，所以也有这么一串注意事项。接下来我要说的是第一部分 —— 如果你想为创业做准备，需要记住这些事。</p><p><strong>Counterintuitive</strong></p><p><strong>反直觉</strong></p><p>The first item on it is the fact I already mentioned: that startups are so weird that if you trust your instincts, you’ll make a lot of mistakes. If you know nothing more than this, you may at least pause before making them.</p><p>第一条就是我已经提到的：创业太特殊了，如果你相信直觉，会犯很多错。哪怕你只知道这一点，至少在犯错前会犹豫一下。</p><p>When I was running Y Combinator I used to joke that our function was to tell founders things they would ignore. It’s really true. Batch after batch, the YC partners warn founders about mistakes they’re about to make, and the founders ignore them, and then come back a year later and say “I wish we’d listened.”</p><p>我运营 Y Combinator 时，常开玩笑说我们的作用就是告诉创始人一些他们会无视的事。这话千真万确。一批又一批创业者，YC 的合伙人会警告他们即将犯下的错误，他们不听，一年后回来却说：“真该听你们的。”</p><p>Why do the founders ignore the partners’ advice? Well, that’s the thing about counterintuitive ideas: they contradict your intuitions. They seem wrong. So of course your first impulse is to disregard them. And in fact my joking description is not merely the curse of Y Combinator but part of its raison d’etre. If founders’ instincts already gave them the right answers, they wouldn’t need us. You only need other people to give you advice that surprises you. That’s why there are a lot of ski instructors and not many running instructors. [1]</p><p>为什么创始人会无视合伙人的建议？这就是反直觉观点的特点：它们和你的直觉相悖，看起来是错的。所以你第一反应肯定是无视。其实我那句玩笑不只是 YC 的 “魔咒”，更是它存在的意义。如果创始人的直觉本身就能给出正确答案，他们就不需要我们了。你只需要那些能给你带来意外启发的建议。这也是滑雪教练很多，而跑步教练很少的原因。[1]</p><p>You can, however, trust your instincts about people. And in fact one of the most common mistakes young founders make is not to do that enough. They get involved with people who seem impressive, but about whom they feel some misgivings personally. Later when things blow up they say “I knew there was something off about him, but I ignored it because he seemed so impressive.”</p><p>不过，你可以相信自己对人的直觉。事实上，年轻创业者最常犯的错误之一，就是不够相信这种直觉。他们会和那些看起来很厉害，但自己私下里有点疑虑的人合作。后来出问题时，他们会说：“我早觉得他有点不对劲，但他看起来太厉害了，我就没在意。”</p><p>If you’re thinking about getting involved with someone — as a cofounder, an employee, an investor, or an acquirer — and you have misgivings about them, trust your gut. If someone seems slippery, or bogus, or a jerk, don’t ignore it.</p><p>如果你考虑和某人合作 —— 无论是作为联合创始人、员工、投资者还是收购方 —— 并且对他们有疑虑，相信你的直觉。如果某人看起来油滑、虚伪或混蛋，别无视这种感觉。</p><p>This is one case where it pays to be self-indulgent. Work with people you genuinely like, and you’ve known long enough to be sure.</p><p>这种情况下，“任性” 一点是值得的。和你真心喜欢、且认识足够久能信任的人一起工作。</p><p><strong>Expertise</strong></p><p><strong>专业知识</strong></p><p>The second counterintuitive point is that it’s not that important to know a lot about startups. The way to succeed in a startup is not to be an expert on startups, but to be an expert on your users and the problem you’re solving for them. Mark Zuckerberg didn’t succeed because he was an expert on startups. He succeeded despite being a complete noob at startups, because he understood his users really well.</p><p>第二个反直觉的点是：懂多少创业知识没那么重要。在创业中成功的关键，不是成为创业专家，而是成为用户和你要解决的问题的专家。马克・扎克伯格能成功，不是因为他是创业专家。他完全是创业新手，却能成功，因为他太了解自己的用户了。</p><p>If you don’t know anything about, say, how to raise an angel round, don’t feel bad on that account. That sort of thing you can learn when you need to, and forget after you’ve done it.</p><p>比如，如果你根本不知道怎么进行天使轮融资，别为此懊恼。这类事需要时能学会，做完后也能忘掉。</p><p>In fact, I worry it’s not merely unnecessary to learn in great detail about the mechanics of startups, but possibly somewhat dangerous. If I met an undergrad who knew all about convertible notes and employee agreements and (God forbid) class FF stock, I wouldn’t think “here is someone who is way ahead of their peers.” It would set off alarms. Because another of the characteristic mistakes of young founders is to go through the motions of starting a startup. They make up some plausible-sounding idea, raise money at a good valuation, rent a cool office, hire a bunch of people. From the outside that seems like what startups do. But the next step after rent a cool office and hire a bunch of people is: gradually realize how completely fucked they are, because while imitating all the outward forms of a startup they have neglected the one thing that’s actually essential: making something people want.</p><p>其实我担心的是，深入学习创业机制不仅没必要，甚至可能有点危险。如果我遇到一个本科生，他对可转换票据、员工协议，甚至（老天保佑）FF 级股票了如指掌，我不会觉得 “这人比同龄人领先太多”，反而会警觉。因为年轻创业者还有一个典型错误：走创业的 “流程”。他们编一个听起来合理的想法，以不错的估值融到钱，租个酷炫的办公室，雇一群人。从表面看，这就是创业该做的事。但租完办公室、雇好人之后，下一步就是：逐渐意识到自己彻底完蛋了 —— 因为他们模仿了创业的所有外在形式，却忽略了唯一真正重要的事：做出人们需要的东西。</p><p><strong>Game</strong></p><p><strong>游戏思维</strong></p><p>We saw this happen so often that we made up a name for it: playing house. Eventually I realized why it was happening. The reason young founders go through the motions of starting a startup is because that’s what they’ve been trained to do for their whole lives up to that point. Think about what you have to do to get into college, for example. Extracurricular activities, check. Even in college classes most of the work is as artificial as running laps.</p><p>这种事我们见得太多，以至于给它起了个名字：“过家家”。后来我才明白为什么会这样。年轻创业者走创业流程，是因为这是他们迄今为止的人生中被训练做的事。比如，想想你为了上大学要做什么：课外活动，打勾。甚至大学课程里的大部分作业，都像绕圈跑步一样虚假。</p><p>I’m not attacking the educational system for being this way. There will always be a certain amount of fakeness in the work you do when you’re being taught something, and if you measure their performance it’s inevitable that people will exploit the difference to the point where much of what you’re measuring is artifacts of the fakeness.</p><p>我不是在攻击教育体系。当你在学习时，做的事总会有一定虚假性；而当你要衡量表现时，人们不可避免地会利用这种虚假性，以至于你衡量的很多东西，其实都是虚假的产物。</p><p>I confess I did it myself in college. I found that in a lot of classes there might only be 20 or 30 ideas that were the right shape to make good exam questions. The way I studied for exams in these classes was not (except incidentally) to master the material taught in the class, but to make a list of potential exam questions and work out the answers in advance. When I walked into the final, the main thing I’d be feeling was curiosity about which of my questions would turn up on the exam. It was like a game.</p><p>坦白说，我在大学时也这么干过。我发现很多课程里，可能只有二三十个概念适合出成考题。我备考的方式不是（至少不只是）掌握课程内容，而是列出可能的考题，提前想好答案。走进期末考试考场时，我最想知道的是自己押的题能中多少。这就像一场游戏。</p><p>It’s not surprising that after being trained for their whole lives to play such games, young founders’ first impulse on starting a startup is to try to figure out the tricks for winning at this new game. Since fundraising appears to be the measure of success for startups (another classic noob mistake), they always want to know what the tricks are for convincing investors. We tell them the best way to convince investors is to make a startup that’s actually doing well, meaning growing fast, and then simply tell investors so. Then they want to know what the tricks are for growing fast. And we have to tell them the best way to do that is simply to make something people want.</p><p>所以，当年轻创业者被训练了一辈子玩这种 “游戏” 后，他们创业的第一反应就是想找出赢得这场新 “游戏” 的诀窍，这并不奇怪。因为融资似乎成了衡量创业成功的标准（另一个典型的新手错误），他们总想问说服投资者的诀窍。我们告诉他们，说服投资者的最好方式，是让创业公司真的做得好 —— 也就是快速增长，然后如实告诉投资者。接着他们又想知道快速增长的诀窍。我们只能告诉他们，最好的方式就是做出人们需要的东西。</p><p>So many of the conversations YC partners have with young founders begin with the founder asking “How do we…” and the partner replying “Just…”</p><p>YC 合伙人与年轻创业者的很多对话，都是从创业者问 “我们该怎么……” 开始，合伙人回答 “只要……” 结束。</p><p>Why do the founders always make things so complicated? The reason, I realized, is that they’re looking for the trick.</p><p>为什么创业者总把事情搞得这么复杂？我意识到，因为他们在找 “诀窍”。</p><p>So this is the third counterintuitive thing to remember about startups: starting a startup is where gaming the system stops working. Gaming the system may continue to work if you go to work for a big company. Depending on how broken the company is, you can succeed by sucking up to the right people, giving the impression of productivity, and so on. [2] But that doesn’t work with startups. There is no boss to trick, only users, and all users care about is whether your product does what they want. Startups are as impersonal as physics. You have to make something people want, and you prosper only to the extent you do.</p><p>所以创业的第三个反直觉之处是：创业是 “钻空子” 思维失效的地方。如果你去大公司工作，“钻空子” 可能还管用。取决于公司有多混乱，你可以靠拍对马屁、装出高效的样子等方式成功。[2] 但这在创业中没用。没有老板可以糊弄，只有用户，而用户只关心你的产品是否满足他们的需求。创业像物理一样客观：你必须做出人们需要的东西，且只有在做到这一点时才能发展。</p><p>The dangerous thing is, faking does work to some degree on investors. If you’re super good at sounding like you know what you’re talking about, you can fool investors for at least one and perhaps even two rounds of funding. But it’s not in your interest to. The company is ultimately doomed. All you’re doing is wasting your own time riding it down.</p><p>危险的是，“装样子” 在投资者那里多少有点用。如果你特别擅长装得很懂行，至少能骗到一轮融资，甚至两轮。但这对你没好处。公司最终注定失败，你只是在浪费自己的时间陪它走向终结。</p><p>So stop looking for the trick. There are tricks in startups, as there are in any domain, but they are an order of magnitude less important than solving the real problem. A founder who knows nothing about fundraising but has made something users love will have an easier time raising money than one who knows every trick in the book but has a flat usage graph. And more importantly, the founder who has made something users love is the one who will go on to succeed after raising the money.</p><p>所以别再找诀窍了。创业中确实有诀窍，任何领域都有，但它们的重要性比解决实际问题低一个数量级。一个不懂融资，但做出了用户喜爱的产品的创始人，比一个精通所有融资技巧，但用户增长停滞的创始人更容易融到钱。更重要的是，做出用户喜爱的产品的创始人，融资后才能继续成功。</p><p>Though in a sense it’s bad news in that you’re deprived of one of your most powerful weapons, I think it’s exciting that gaming the system stops working when you start a startup. It’s exciting that there even exist parts of the world where you win by doing good work. Imagine how depressing the world would be if it were all like school and big companies, where you either have to spend a lot of time on bullshit things or lose to people who do. [3] I would have been delighted if I’d realized in college that there were parts of the real world where gaming the system mattered less than others, and a few where it hardly mattered at all. But there are, and this variation is one of the most important things to consider when you’re thinking about your future. How do you win in each type of work, and what would you like to win by doing? [4]</p><p>虽然从某种角度说，不能再用 “钻空子” 这种强大武器有点遗憾，但我觉得创业中 “钻空子” 失效这件事很令人兴奋。世界上居然有这样的领域，你靠做好工作就能成功，这太让人激动了。想象一下，如果世界全像学校和大公司那样 —— 你要么花大量时间做无用功，要么输给那些做无用功的人 —— 那该多令人沮丧。[3] 如果我在大学时就意识到，现实世界中有些领域 “钻空子” 没那么重要，甚至几乎不重要，我会很高兴。但这样的领域确实存在，而在思考未来时，这种差异是你需要考虑的最重要的事之一：在每种工作中，你要靠什么成功？你希望靠什么成功？[4]</p><p><strong>All-Consuming</strong></p><p><strong>全身心投入</strong></p><p>That brings us to our fourth counterintuitive point: startups are all-consuming. If you start a startup, it will take over your life to a degree you cannot imagine. And if your startup succeeds, it will take over your life for a long time: for several years at the very least, maybe for a decade, maybe for the rest of your working life. So there is a real opportunity cost here.</p><p>这就引出了第四个反直觉的点：创业会占据你的全部生活。如果你创业，它对你生活的占据程度会超出你的想象。如果创业成功，它会占据你的生活很长时间：至少好几年，可能十年，甚至整个职业生涯。所以这里有实实在在的机会成本。</p><p>Larry Page may seem to have an enviable life, but there are aspects of it that are unenviable. Basically at 25 he started running as fast as he could and it must seem to him that he hasn’t stopped to catch his breath since. Every day new shit happens in the Google empire that only the CEO can deal with, and he, as CEO, has to deal with it. If he goes on vacation for even a week, a whole week’s backlog of shit accumulates. And he has to bear this uncomplainingly, partly because as the company’s daddy he can never show fear or weakness, and partly because billionaires get less than zero sympathy if they talk about having difficult lives. Which has the strange side effect that the difficulty of being a successful startup founder is concealed from almost everyone except those who’ve done it.</p><p>拉里・佩奇的生活似乎很令人羡慕，但也有不那么令人羡慕的地方。基本上，他 25 岁时就开始拼命奔跑，而且从那以后似乎就没停下来喘过气。谷歌帝国每天都有新麻烦，只有 CEO 能处理，而他作为 CEO，必须去处理。哪怕休假一周，就会堆积一周的麻烦。他还得毫无怨言地承受这一切，部分原因是作为公司的 “大家长”，他不能表现出恐惧或软弱；另一部分原因是，亿万富翁抱怨生活艰难，只会得到零甚至负的同情。这就产生了一个奇怪的副作用：成功创业者的艰难，几乎只有亲身经历过的人才知道。</p><p>Y Combinator has now funded several companies that can be called big successes, and in every single case the founders say the same thing. It never gets any easier. The nature of the problems change. You’re worrying about construction delays at your London office instead of the broken air conditioner in your studio apartment. But the total volume of worry never decreases; if anything it increases.</p><p>YC 投资过几家能称为 “巨大成功” 的公司，每一家的创始人都说过同样的话：创业从来不会变轻松。问题的性质会变 —— 你担心的可能是伦敦办公室的建设延期，而不是工作室公寓里坏掉的空调 —— 但担忧的总量从未减少，甚至可能增加。</p><p>Starting a successful startup is similar to having kids in that it’s like a button you push that changes your life irrevocably. And while it’s truly wonderful having kids, there are a lot of things that are easier to do before you have them than after. Many of which will make you a better parent when you do have kids. And since you can delay pushing the button for a while, most people in rich countries do.</p><p>成功创业有点像生孩子：按下按钮，你的生活就会发生不可逆转的改变。虽然生孩子真的很美好，但很多事在生孩子前做比生完后更容易，其中很多事还能让你成为更好的父母。而因为可以推迟 “按下按钮”，富裕国家的大多数人都会这么做。</p><p>Yet when it comes to startups, a lot of people seem to think they’re supposed to start them while they’re still in college. Are you crazy? And what are the universities thinking? They go out of their way to ensure their students are well supplied with contraceptives, and yet they’re setting up entrepreneurship programs and startup incubators left and right.</p><p>但说到创业，很多人似乎觉得应该在大学时就开始。你疯了吗？大学在想什么？他们费尽心思确保学生能拿到避孕药，却又到处搞创业项目和创业孵化器。</p><p>To be fair, the universities have their hand forced here. A lot of incoming students are interested in startups. Universities are, at least de facto, expected to prepare them for their careers. So students who want to start startups hope universities can teach them about startups. And whether universities can do this or not, there’s some pressure to claim they can, lest they lose applicants to other universities that do.</p><p>公平地说，大学也是迫不得已。很多新生对创业感兴趣，而大学至少在事实上被期望为学生的职业生涯做准备。所以想创业的学生希望大学能教他们创业知识。不管大学能不能做到，都有压力让它们宣称自己能做到，否则就会有学生流向那些宣称能教创业的大学。</p><p>Can universities teach students about startups? Yes and no. They can teach students about startups, but as I explained before, this is not what you need to know. What you need to learn about are the needs of your own users, and you can’t do that until you actually start the company. [5] So starting a startup is intrinsically something you can only really learn by doing it. And it’s impossible to do that in college, for the reason I just explained: startups take over your life. You can’t start a startup for real as a student, because if you start a startup for real you’re not a student anymore. You may be nominally a student for a bit, but you won’t even be that for long. [6]</p><p>大学能教学生创业吗？能，也不能。它们能教关于创业的知识，但如我之前所说，这不是你需要知道的。你需要了解的是自己用户的需求，而这只有在你真正开了公司后才能做到。[5] 所以创业本质上是只能在实践中学习的事。而在大学里不可能真正创业，原因我刚才说了：创业会占据你的全部生活。作为学生，你不可能真正创业，因为一旦认真创业，你就不再是学生了。可能名义上还是学生一段时间，但也长不了。[6]</p><p>Given this dichotomy, which of the two paths should you take? Be a real student and not start a startup, or start a real startup and not be a student? I can answer that one for you. Do not start a startup in college. How to start a startup is just a subset of a bigger problem you’re trying to solve: how to have a good life. And though starting a startup can be part of a good life for a lot of ambitious people, age 20 is not the optimal time to do it. Starting a startup is like a brutally fast depth-first search. Most people should still be searching breadth-first at 20.</p><p>面对这种二分法，你该选哪条路？做真正的学生，不创业？还是真正创业，不当学生？我可以告诉你答案：别在大学时创业。“如何创业” 只是你要解决的更大问题的一个子集：如何拥有美好的人生。虽然对很多有野心的人来说，创业可以是美好人生的一部分，但 20 岁不是最佳时机。创业就像一场极其快速的深度优先搜索，而大多数人在 20 岁时，仍应该进行广度优先搜索。</p><p>You can do things in your early 20s that you can’t do as well before or after, like plunge deeply into projects on a whim and travel super cheaply with no sense of a deadline. For unambitious people, this sort of thing is the dreaded “failure to launch,” but for the ambitious ones it can be an incomparably valuable sort of exploration. If you start a startup at 20 and you’re sufficiently successful, you’ll never get to do it. [7]</p><p>二十出头时，你能做一些之前和之后都做不好的事：凭一时兴起深入投入某个项目，或者毫无时间压力地超低价旅行。对没野心的人来说，这种事是可怕的 “停滞不前”，但对有野心的人来说，这可能是无比宝贵的探索。如果你 20 岁创业且足够成功，就再也没机会做这些事了。[7]</p><p>Mark Zuckerberg will never get to bum around a foreign country. He can do other things most people can’t, like charter jets to fly him to foreign countries. But success has taken a lot of the serendipity out of his life. Facebook is running him as much as he’s running Facebook. And while it can be very cool to be in the grip of a project you consider your life’s work, there are advantages to serendipity too, especially early in life. Among other things it gives you more options to choose your life’s work from.</p><p>马克・扎克伯格永远不会有在异国他乡闲逛的经历了。他能做很多人做不到的事，比如包机去国外，但成功夺走了他生活中很多偶然性。 Facebook 在运营他，就像他在运营 Facebook 一样。虽然被一个你视为毕生事业的项目 “掌控” 可能很酷，但偶然性也有其优势，尤其是在人生早期。比如，它能给你更多选择，让你从中挑选毕生事业。</p><p>There’s not even a tradeoff here. You’re not sacrificing anything if you forgo starting a startup at 20, because you’re more likely to succeed if you wait. In the unlikely case that you’re 20 and one of your side projects takes off like Facebook did, you’ll face a choice of running with it or not, and it may be reasonable to run with it. But the usual way startups take off is for the founders to make them take off, and it’s gratuitously stupid to do that at 20.</p><p>这甚至算不上权衡。20 岁时放弃创业，你不会损失什么，因为等一等，你成功的可能性更高。万一你 20 岁时，某个副业像 Facebook 那样爆发，你会面临选择：要不要全力以赴。这种情况下，全力以赴可能是合理的。但创业通常需要创始人推动才能发展，而 20 岁就这么做，实在是没必要的愚蠢。</p><p><strong>Try</strong></p><p><strong>尝试</strong></p><p>Should you do it at any age? I realize I’ve made startups sound pretty hard. If I haven’t, let me try again: starting a startup is really hard. What if it’s too hard? How can you tell if you’re up to this challenge?</p><p>那任何年龄都该创业吗？我意识到自己把创业说得挺难的。如果还没说清楚，我再强调一次：创业真的很难。如果太难了呢？你怎么知道自己能否应对这个挑战？</p><p>The answer is the fifth counterintuitive point: you can’t tell. Your life so far may have given you some idea what your prospects might be if you tried to become a mathematician, or a professional football player. But unless you’ve had a very strange life you haven’t done much that was like being a startup founder. Starting a startup will change you a lot. So what you’re trying to estimate is not just what you are, but what you could grow into, and who can do that?</p><p>答案是第五个反直觉的点：你不知道。到目前为止的人生，可能让你大致知道自己成为数学家或职业足球运动员的前景如何。但除非你的人生非常奇特，否则你没做过多少和创业类似的事。创业会极大地改变你。所以你要评估的不仅是现在的自己，还有未来可能成长为的样子 —— 谁能做到这一点呢？</p><p>For the past 9 years it was my job to predict whether people would have what it took to start successful startups. It was easy to tell how smart they were, and most people reading this will be over that threshold. The hard part was predicting how tough and ambitious they would become. There may be no one who has more experience at trying to predict that, so I can tell you how much an expert can know about it, and the answer is: not much. I learned to keep a completely open mind about which of the startups in each batch would turn out to be the stars.</p><p>过去 9 年，我的工作就是预测人们是否有能力创办成功的公司。判断他们有多聪明很容易，读这篇文章的大多数人都超过了这个门槛。难的是预测他们会变得多坚韧、多有野心。可能没人比我更有经验做这种预测了，所以我可以告诉你，专家能知道多少 —— 答案是：不多。我学会了对每批创业公司中哪些会成为明星保持完全开放的心态。</p><p>The founders sometimes think they know. Some arrive feeling sure they will ace Y Combinator just as they’ve aced every one of the (few, artificial, easy) tests they’ve faced in life so far. Others arrive wondering how they got in, and hoping YC doesn’t discover whatever mistake caused it to accept them. But there is little correlation between founders’ initial attitudes and how well their companies do.</p><p>创始人自己有时觉得知道答案。有些人来的时候，确信自己能在 YC 表现出色，就像他们在人生中遇到的所有（少数、虚假、简单的）测试中表现出色一样。另一些人来的时候，疑惑自己怎么会被选中，担心 YC 会发现接受他们是个错误。但创始人最初的态度和公司最终的表现几乎没什么关联。</p><p>I’ve read that the same is true in the military — that the swaggering recruits are no more likely to turn out to be really tough than the quiet ones. And probably for the same reason: that the tests involved are so different from the ones in their previous lives.</p><p>我读过一些关于军队的内容 —— 那些昂首阔步的新兵，并不比安静的新兵更可能成为真正坚韧的人。原因可能相同：军队的考验和他们之前经历的完全不同。</p><p>If you’re absolutely terrified of starting a startup, you probably shouldn’t do it. But if you’re merely unsure whether you’re up to it, the only way to find out is to try. Just not now.</p><p>如果你对创业极度恐惧，可能确实不该做。但如果你只是不确定自己能否应对，唯一的办法就是尝试。只是现在别试。</p><p><strong>Ideas</strong></p><p><strong>想法</strong></p><p>So if you want to start a startup one day, what should you do in college? There are only two things you need initially: an idea and cofounders. And the m.o. for getting both is the same. Which leads to our sixth and last counterintuitive point: that the way to get startup ideas is not to try to think of startup ideas.</p><p>所以如果你某天想创业，大学时该做什么？最初只需要两样东西：一个想法和联合创始人。而获得这两样东西的方法是一样的。这就引出了第六个，也是最后一个反直觉的点：获取创业想法的方式，不是刻意去想创业想法。</p><p>I’ve written a whole essay on this, so I won’t repeat it all here. But the short version is that if you make a conscious effort to think of startup ideas, the ideas you come up with will not merely be bad, but bad and plausible-sounding, meaning you’ll waste a lot of time on them before realizing they’re bad.</p><p>我专门写过一篇文章讲这个，这里就不重复了。但简而言之，如果你刻意去想创业想法，想出来的不仅会很糟，还会糟得听起来很合理 —— 这意味着你会在意识到它们很糟之前，浪费大量时间。</p><p>The way to come up with good startup ideas is to take a step back. Instead of making a conscious effort to think of startup ideas, turn your mind into the type that startup ideas form in without any conscious effort. In fact, so unconsciously that you don’t even realize at first that they’re startup ideas.</p><p>想出好的创业想法的方法是退一步。不要刻意去想，而是把自己的大脑变成那种能无意识产生创业想法的类型。事实上，无意识到你一开始甚至没意识到它们是创业想法。</p><p>This is not only possible, it’s how Apple, Yahoo, Google, and Facebook all got started. None of these companies were even meant to be companies at first. They were all just side projects. The best startups almost have to start as side projects, because great ideas tend to be such outliers that your conscious mind would reject them as ideas for companies.</p><p>这不仅可能，苹果、雅虎、谷歌和 Facebook 都是这么来的。这些公司最初都没打算成为公司，只是副业。最好的创业公司几乎都得从副业开始，因为好想法往往太非主流，你的意识会拒绝把它们当成创业想法。</p><p>Ok, so how do you turn your mind into the type that startup ideas form in unconsciously? (1) Learn a lot about things that matter, then (2) work on problems that interest you (3) with people you like and respect. The third part, incidentally, is how you get cofounders at the same time as the idea.</p><p>那么，如何把自己的大脑变成能无意识产生创业想法的类型？（1）大量学习重要的东西；（2）解决你感兴趣的问题；（3）和你喜欢且尊重的人一起。顺便说一句，第三点也是同时找到联合创始人的方法。</p><p>The first time I wrote that paragraph, instead of “learn a lot about things that matter,” I wrote “become good at some technology.” But that prescription, though sufficient, is too narrow. What was special about Brian Chesky and Joe Gebbia was not that they were experts in technology. They were good at design, and perhaps even more importantly, they were good at organizing groups and making projects happen. So you don’t have to work on technology per se, so long as you work on problems demanding enough to stretch you.</p><p>我第一次写这段话时，把 “大量学习重要的东西” 写成了 “精通某项技术”。但这个说法虽然充分，却太狭隘了。布莱恩・切斯基和乔・格比亚的特别之处，不是他们精通技术，而是他们擅长设计，或许更重要的是，他们擅长组织团队、推动项目落地。所以你不一定非要做技术相关的事，只要你解决的问题足够有挑战性，能让你成长就行。</p><p>What kind of problems are those? That is very hard to answer in the general case. History is full of examples of young people who were working on important problems that no one else at the time thought were important, and in particular that their parents didn’t think were important. On the other hand, history is even fuller of examples of parents who thought their kids were wasting their time and who were right. So how do you know when you’re working on real stuff? [8]</p><p>哪些问题是这样的？总体来说很难回答。历史上满是这样的例子：年轻人在做一些当时没人觉得重要的事，尤其是他们的父母不觉得重要的事。但另一方面，历史上更多的例子是：父母觉得孩子在浪费时间，结果确实如此。那你怎么知道自己在做的是 “正经事”？[8]</p><p>I know how I know. Real problems are interesting, and I am self-indulgent in the sense that I always want to work on interesting things, even if no one else cares about them (in fact, especially if no one else cares about them), and find it very hard to make myself work on boring things, even if they’re supposed to be important.</p><p>我知道自己怎么判断。真正的问题是有趣的，而我有点 “任性”—— 我总想做有趣的事，哪怕没人在乎（事实上，尤其是没人在乎的时候），而让我做无聊的事，哪怕别人说很重要，我也很难做到。</p><p>My life is full of case after case where I worked on something just because it seemed interesting, and it turned out later to be useful in some worldly way. Y Combinator itself was something I only did because it seemed interesting. So I seem to have some sort of internal compass that helps me out. But I don’t know what other people have in their heads. Maybe if I think more about this I can come up with heuristics for recognizing genuinely interesting problems, but for the moment the best I can offer is the hopelessly question-begging advice that if you have a taste for genuinely interesting problems, indulging it energetically is the best way to prepare yourself for a startup. And indeed, probably also the best way to live. [9]</p><p>我的人生中有很多例子：我因为觉得某事有趣而去做，后来发现它在现实中很有用。YC 本身就是我因为觉得有趣才做的。所以我似乎有个内在的指南针帮我。但我不知道别人的脑子里有什么。或许再想想，我能总结出一些识别真正有趣的问题的方法，但目前我能给的最好建议，虽然有点循环论证，就是：如果你对真正有趣的问题有感觉，那么积极地追随这种感觉，就是为创业做准备的最好方式。事实上，这可能也是最好的生活方式。[9]</p><p>But although I can’t explain in the general case what counts as an interesting problem, I can tell you about a large subset of them. If you think of technology as something that’s spreading like a sort of fractal stain, every moving point on the edge represents an interesting problem. So one guaranteed way to turn your mind into the type that has good startup ideas is to get yourself to the leading edge of some technology — to cause yourself, as Paul Buchheit put it, to “live in the future.” When you reach that point, ideas that will seem to other people uncannily prescient will seem obvious to you. You may not realize they’re startup ideas, but you’ll know they’re something that ought to exist.</p><p>虽然我没法笼统地解释什么是有趣的问题，但我可以告诉你一大部分这类问题。如果你把技术看作一种像分形污渍一样蔓延的东西，那么边缘上每一个移动的点都代表一个有趣的问题。所以，让自己的大脑产生好的创业想法的一个可靠方法，是让自己站在某项技术的前沿 —— 用保罗・布赫海特的话说，就是 “活在未来”。当你达到那个境界，那些在别人看来不可思议的前瞻性想法，对你来说会很明显。你可能没意识到它们是创业想法，但你会知道它们应该存在。</p><p>For example, back at Harvard in the mid 90s a fellow grad student of my friends Robert and Trevor wrote his own voice over IP software. He didn’t mean it to be a startup, and he never tried to turn it into one. He just wanted to talk to his girlfriend in Taiwan without paying for long distance calls, and since he was an expert on networks it seemed obvious to him that the way to do it was turn the sound into packets and ship it over the Internet. He never did any more with his software than talk to his girlfriend, but this is exactly the way the best startups get started.</p><p>比如，90 年代中期，我在哈佛的朋友罗伯特和特雷弗有个同学，自己写了 IP 语音软件。他没打算用它创业，也从没尝试把它变成公司。他只是想和在台湾的女朋友通话，又不想付长途话费，而作为网络专家，对他来说，把声音转换成数据包通过互联网发送，是很自然的做法。他的软件只用来和女朋友通话，没做其他事，但这正是最好的创业公司开始的方式。</p><p>So strangely enough the optimal thing to do in college if you want to be a successful startup founder is not some sort of new, vocational version of college focused on “entrepreneurship.” It’s the classic version of college as education for its own sake. If you want to start a startup after college, what you should do in college is learn powerful things. And if you have genuine intellectual curiosity, that’s what you’ll naturally tend to do if you just follow your own inclinations. [10]</p><p>所以奇怪的是，如果你想成为成功的创业者，大学时最该做的，不是那种专注于 “创业” 的新型职业教育，而是经典的、为教育而教育的大学模式。如果你想毕业后创业，大学时该做的是学习有力量的知识。如果你有真正的求知欲，追随自己的兴趣，自然就会这么做。[10]</p><p>The component of entrepreneurship that really matters is domain expertise. The way to become Larry Page was to become an expert on search. And the way to become an expert on search was to be driven by genuine curiosity, not some ulterior motive.</p><p>创业中真正重要的是领域专长。成为拉里・佩奇的方法，是成为搜索领域的专家；而成为搜索领域专家的方法，是被真正的好奇心驱动，而非别有用心。</p><p>At its best, starting a startup is merely an ulterior motive for curiosity. And you’ll do it best if you introduce the ulterior motive toward the end of the process.</p><p>最好的情况是，创业只是好奇心的 “副产品”。而如果你把这个 “副产品” 的念头放在过程的末尾，会做得最好。</p><p>So here is the ultimate advice for young would-be startup founders, boiled down to two words: just learn.</p><p>所以，给年轻的潜在创业者的最终建议，浓缩成两个词：学习就好。</p><p>Notes</p><p>[1] Some founders listen more than others, and this tends to be a predictor of success. One of the things I remember about the Airbnbs during YC is how intently they listened.</p><p>[1] 有些创始人更愿意倾听，这往往是成功的预兆。我记得 Airbnb 的创始人在 YC 期间，听得非常认真。</p><p>[2] In fact, this is one of the reasons startups are possible. If big companies weren’t plagued by internal inefficiencies, they’d be proportionately more effective, leaving less room for startups.</p><p>[2] 事实上，这也是创业有可能存在的原因之一。如果大公司没有内部低效，它们的效率会成比例地更高，留给创业公司的空间就会更少。</p><p>[3] In a startup you have to spend a lot of time on schleps, but this sort of work is merely unglamorous, not bogus.</p><p>[3] 创业中你确实要花很多时间做琐碎的事，但这种工作只是不风光，并非无用。</p><p>[4] What should you do if your true calling is gaming the system? Management consulting.</p><p>[4] 如果你真正的志向是 “钻空子”，那就去做管理咨询吧。</p><p>[5] The company may not be incorporated, but if you start to get significant numbers of users, you’ve started it, whether you realize it yet or not.</p><p>[5] 公司可能还没注册，但如果你开始有大量用户，不管你有没有意识到，你已经创业了。</p><p>[6] It shouldn’t be that surprising that colleges can’t teach students how to be good startup founders, because they can’t teach them how to be good employees either.</p><p>The way universities “teach” students how to be employees is to hand off the task to companies via internship programs. But you couldn’t do the equivalent thing for startups, because by definition if the students did well they would never come back.</p><p>[6] 大学教不会学生如何成为优秀的创业者，这并不奇怪，因为它们也教不会学生如何成为优秀的员工。大学 “教” 学生如何成为员工的方式，是通过实习项目把这个任务交给公司。但对创业来说，没法这么做 —— 因为按理说，如果学生做得好，就再也不会回来了。</p><p>[7] Charles Darwin was 22 when he received an invitation to travel aboard the HMS Beagle as a naturalist. It was only because he was otherwise unoccupied, to a degree that alarmed his family, that he could accept it. And yet if he hadn’t we probably would not know his name.</p><p>[7] 查尔斯・达尔文 22 岁时，收到了作为博物学家乘坐 “贝格尔号” 航行的邀请。当时他无所事事，程度甚至让家人担心，所以才能接受邀请。而如果他没接受，我们可能根本不会知道他的名字。</p><p>[8] Parents can sometimes be especially conservative in this department. There are some whose definition of important problems includes only those on the critical path to med school.</p><p>[8] 父母在这方面有时尤其保守。有些父母认为，只有通往医学院的关键路径上的问题才是重要的。</p><p>[9] I did manage to think of a heuristic for detecting whether you have a taste for interesting ideas: whether you find known boring ideas intolerable. Could you endure studying literary theory, or working in middle management at a large company?</p><p>[9] 我确实想到了一个判断你是否对有趣的想法有感觉的方法：你是否无法忍受已知的无聊想法。你能忍受研究文学理论，或在大公司做中层管理吗？</p><p>[10] In fact, if your goal is to start a startup, you can stick even more closely to the ideal of a liberal education than past generations have. Back when students focused mainly on getting a job after college, they thought at least a little about how the courses they took might look to an employer. And perhaps even worse, they might shy away from taking a difficult class lest they get a low grade, which would harm their all-important GPA. Good news: users don’t care what your GPA was. And I’ve never heard of investors caring either. Y Combinator certainly never asks what classes you took in college or what grades you got in them.</p><p>[10] 事实上，如果你的目标是创业，你可以比前几代人更贴近通识教育的理想。过去，学生主要关注毕业后找工作，至少会有点在意选的课程在雇主看来怎么样。甚至更糟，他们可能会避开难的课程，怕成绩低影响至关重要的 GPA。好消息是：用户不在乎你的 GPA，我也从没听说投资者在乎。YC 肯定不会问你大学上了什么课，成绩如何。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超线性回报</title>
    <link href="/2025/08/04/superlinear-returns/"/>
    <url>/2025/08/04/superlinear-returns/</url>
    
    <content type="html"><![CDATA[<h2 id="Superlinear-Returns"><a href="#Superlinear-Returns" class="headerlink" title="Superlinear Returns"></a>Superlinear Returns</h2><p>原文链接: <a href="https://paulgraham.com/superlinear.html">https://paulgraham.com/superlinear.html</a></p><p>October 2023</p><p>One of the most important things I didn’t understand about the world when I was a child is the degree to which the returns for performance are superlinear.</p><p>小时候，我对世界最不理解的一点是：绩效回报的超线性程度。</p><p>Teachers and coaches implicitly told us the returns were linear. “You get out,” I heard a thousand times, “what you put in.” They meant well, but this is rarely true. If your product is only half as good as your competitor’s, you don’t get half as many customers. You get no customers, and you go out of business.</p><p>老师和教练潜移默化地告诉我们，回报是线性的。“一分耕耘，一分收获”，这句话我听了上百遍。他们的初衷是好的，但这在现实中很少成立。如果你的产品只比竞争对手差一半，你不会只得到一半客户 —— 你会失去所有客户，最终倒闭。</p><p>It’s obviously true that the returns for performance are superlinear in business. Some think this is a flaw of capitalism, and that if we changed the rules it would stop being true. But superlinear returns for performance are a feature of the world, not an artifact of rules we’ve invented. We see the same pattern in fame, power, military victories, knowledge, and even benefit to humanity. In all of these, the rich get richer. [1]</p><p>在商业领域，绩效回报的超线性特征显而易见。有人认为这是资本主义的缺陷，觉得只要改变规则就能消除这种现象。但超线性回报是世界的固有特征，而非人类发明的规则所导致的偶然结果。在名气、权力、军事胜利、知识乃至对人类的贡献中，我们都能看到同样的模式：强者愈强。[1]</p><p>You can’t understand the world without understanding the concept of superlinear returns. And if you’re ambitious you definitely should, because this will be the wave you surf on.</p><p>不理解超线性回报，就无法理解世界。如果你有野心，就更该明白这一点 —— 因为这将是你可以借力的浪潮。</p><p>It may seem as if there are a lot of different situations with superlinear returns, but as far as I can tell they reduce to two fundamental causes: exponential growth and thresholds.</p><p>看似有很多场景都存在超线性回报，但在我看来，它们归根结底源于两个根本原因：指数增长和阈值。</p><p>The most obvious case of superlinear returns is when you’re working on something that grows exponentially. For example, growing bacterial cultures. When they grow at all, they grow exponentially. But they’re tricky to grow. Which means the difference in outcome between someone who’s adept at it and someone who’s not is very great.</p><p>超线性回报最明显的例子，是当你在做一件呈指数增长的事。比如细菌培养：一旦开始增长，就是指数级的，但培养过程却很棘手。这意味着，擅长培养的人和不擅长的人，结果会有天壤之别。</p><p>Startups can also grow exponentially, and we see the same pattern there. Some manage to achieve high growth rates. Most don’t. And as a result you get qualitatively different outcomes: the companies with high growth rates tend to become immensely valuable, while the ones with lower growth rates may not even survive.</p><p>初创公司的增长也可能是指数级的，我们在其中看到了同样的模式：有些公司能实现高速增长，大多数则不能。结果就是，两类公司的结局有着质的区别：高速增长的公司往往会变得极具价值，而增长缓慢的公司可能连生存都成问题。</p><p>Y Combinator encourages founders to focus on growth rate rather than absolute numbers. It prevents them from being discouraged early on, when the absolute numbers are still low. It also helps them decide what to focus on: you can use growth rate as a compass to tell you how to evolve the company. But the main advantage is that by focusing on growth rate you tend to get something that grows exponentially.</p><p>Y Combinator（创业孵化器）鼓励创始人关注增长率而非绝对数值。这能防止他们在早期因绝对数值低而气馁，也能帮助他们确定重点 —— 增长率可以作为指南针，指引公司如何发展。但最主要的好处是，聚焦增长率更容易实现指数级增长。</p><p>YC doesn’t explicitly tell founders that with growth rate “you get out what you put in,” but it’s not far from the truth. And if growth rate were proportional to performance, then the reward for performance p over time t would be proportional to p^t.</p><p>Y Combinator 没有明确告诉创始人 “增长率与付出成正比”，但事实也相差不远。如果增长率与绩效成正比，那么绩效为 p、经过时间 t 后的回报，将与 pᵗ成正比。</p><p>Even after decades of thinking about this, I find that sentence startling.</p><p>即便思考了几十年，我仍觉得这句话令人震惊。</p><p>Whenever how well you do depends on how well you’ve done, you’ll get exponential growth. But neither our DNA nor our customs prepare us for it. No one finds exponential growth natural; every child is surprised, the first time they hear it, by the story of the man who asks the king for a single grain of rice the first day and double the amount each successive day.</p><p>只要 “做得有多好” 取决于 “已经做得有多好”，就会出现指数增长。但无论是我们的基因还是习俗，都没让我们做好应对指数增长的准备。没人觉得指数增长是 “自然” 的 —— 每个孩子第一次听到 “国王与米粒” 的故事（第一天要 1 粒米，之后每天翻倍）时，都会感到惊讶。</p><p>What we don’t understand naturally we develop customs to deal with, but we don’t have many customs about exponential growth either, because there have been so few instances of it in human history. In principle herding should have been one: the more animals you had, the more offspring they’d have. But in practice grazing land was the limiting factor, and there was no plan for growing that exponentially.</p><p>对于我们天生不理解的事物，我们会形成习俗来应对，但关于指数增长的习俗却很少，因为人类历史上指数增长的案例寥寥无几。理论上，放牧本可以是一个例子：拥有的牲畜越多，后代就越多。但实际上，牧场是限制因素，而牧场的增长没有指数级的计划。</p><p>Or more precisely, no generally applicable plan. There was a way to grow one’s territory exponentially: by conquest. The more territory you control, the more powerful your army becomes, and the easier it is to conquer new territory. This is why history is full of empires. But so few people created or ran empires that their experiences didn’t affect customs very much. The emperor was a remote and terrifying figure, not a source of lessons one could use in one’s own life.</p><p>或者更准确地说，没有普遍适用的计划。有一种方式可以让领土呈指数级扩张：征服。控制的领土越多，军队就越强大，征服新领土就越容易。这就是历史上帝国层出不穷的原因。但创建或管理帝国的人太少了，他们的经验几乎没影响到大众习俗。皇帝是遥远而可怕的存在，而非普通人可以借鉴的榜样。</p><p>The most common case of exponential growth in preindustrial times was probably scholarship. The more you know, the easier it is to learn new things. The result, then as now, was that some people were startlingly more knowledgeable than the rest about certain topics. But this didn’t affect customs much either. Although empires of ideas can overlap and there can thus be far more emperors, in preindustrial times this type of empire had little practical effect. [2]</p><p>前工业化时代最常见的指数增长案例可能是学术研究：知道的越多，学习新事物就越容易。结果就是，无论过去还是现在，总有人在某些领域的知识量远超他人。但这也没对习俗产生多少影响。尽管 “思想帝国” 可以重叠（因此能有更多 “皇帝”），但在前工业化时代，这类帝国几乎没有实际影响力。[2]</p><p>That has changed in the last few centuries. Now the emperors of ideas can design bombs that defeat the emperors of territory. But this phenomenon is still so new that we haven’t fully assimilated it. Few even of the participants realize they’re benefitting from exponential growth or ask what they can learn from other instances of it.</p><p>近几个世纪，情况变了。如今，思想领域的 “皇帝” 可以设计出击败领土 “皇帝” 的炸弹。但这种现象仍太新，我们尚未完全接纳它。即便是参与者，也很少有人意识到自己正受益于指数增长，或思考能从其他指数增长案例中借鉴什么。</p><p>The other source of superlinear returns is embodied in the expression “winner take all.” In a sports match the relationship between performance and return is a step function: the winning team gets one win whether they do much better or just slightly better. [3]</p><p>超线性回报的另一个来源体现在 “赢者通吃” 这一说法中。在体育比赛中，绩效与回报的关系是阶梯式的：获胜的队伍无论表现远超对手还是仅略胜一筹，都只能得到一场胜利。[3]</p><p>The source of the step function is not competition per se, however. It’s that there are thresholds in the outcome. You don’t need competition to get those. There can be thresholds in situations where you’re the only participant, like proving a theorem or hitting a target.</p><p>但阶梯函数的根源并非竞争本身，而是结果中存在阈值。即便没有竞争，阈值也可能存在 —— 比如证明一个定理或击中一个目标，这些只有唯一参与者的场景也有阈值。</p><p>It’s remarkable how often a situation with one source of superlinear returns also has the other. Crossing thresholds leads to exponential growth: the winning side in a battle usually suffers less damage, which makes them more likely to win in the future. And exponential growth helps you cross thresholds: in a market with network effects, a company that grows fast enough can shut out potential competitors.</p><p>值得注意的是，一个存在超线性回报的场景，往往同时包含两种来源。跨越阈值会带来指数增长：战场上的获胜方通常损失更小，这让他们未来更可能获胜；而指数增长也会帮助你跨越阈值：在有网络效应的市场中，增长足够快的公司可以排挤潜在竞争对手。</p><p>Fame is an interesting example of a phenomenon that combines both sources of superlinear returns. Fame grows exponentially because existing fans bring you new ones. But the fundamental reason it’s so concentrated is thresholds: there’s only so much room on the A-list in the average person’s head.</p><p>名气是一个同时包含两种来源的有趣例子。名气呈指数增长，因为现有粉丝会带来新粉丝；但名气高度集中的根本原因是阈值：普通人的脑海中，“一线明星” 的位置有限。</p><p>The most important case combining both sources of superlinear returns may be learning. Knowledge grows exponentially, but there are also thresholds in it. Learning to ride a bicycle, for example. Some of these thresholds are akin to machine tools: once you learn to read, you’re able to learn anything else much faster. But the most important thresholds of all are those representing new discoveries. Knowledge seems to be fractal in the sense that if you push hard at the boundary of one area of knowledge, you sometimes discover a whole new field. And if you do, you get first crack at all the new discoveries to be made in it. Newton did this, and so did Durer and Darwin.</p><p>学习可能是最能体现两种来源结合的重要案例。知识呈指数增长，同时也存在阈值 —— 比如学骑自行车。有些阈值类似 “机床”：一旦学会阅读，学习其他任何东西都会快得多。但最重要的阈值是那些代表新发现的节点。知识似乎是分形的：如果你在某个知识领域的边界深耕，有时会发现一整个新领域。而如果你做到了，你就有机会优先探索这个新领域中的所有发现。牛顿、丢勒、达尔文都是如此。</p><p>Are there general rules for finding situations with superlinear returns? The most obvious one is to seek work that compounds.</p><p>有没有找到超线性回报场景的通用规则？最明显的一条是：寻求有复利效应的工作。</p><p>There are two ways work can compound. It can compound directly, in the sense that doing well in one cycle causes you to do better in the next. That happens for example when you’re building infrastructure, or growing an audience or brand. Or work can compound by teaching you, since learning compounds. This second case is an interesting one because you may feel you’re doing badly as it’s happening. You may be failing to achieve your immediate goal. But if you’re learning a lot, then you’re getting exponential growth nonetheless.</p><p>工作的复利效应有两种形式。一种是直接复利：一个周期做得好，会让下一个周期做得更好。比如建设基础设施、增长受众或打造品牌时，就会出现这种情况。另一种是通过学习产生的复利 —— 因为学习本身就是复利的。第二种情况很有趣：过程中你可能觉得自己做得很糟（比如没能实现即时目标），但只要学到了很多，你其实已经在实现指数增长了。</p><p>This is one reason Silicon Valley is so tolerant of failure. People in Silicon Valley aren’t blindly tolerant of failure. They’ll only continue to bet on you if you’re learning from your failures. But if you are, you are in fact a good bet: maybe your company didn’t grow the way you wanted, but you yourself have, and that should yield results eventually.</p><p>这也是硅谷对失败如此宽容的原因之一。硅谷人并非盲目宽容失败：他们只会继续投资那些能从失败中学习的人。但如果你能做到，你就值得投资 —— 或许你的公司没按预期增长，但你自己成长了，最终总会有回报。</p><p>Indeed, the forms of exponential growth that don’t consist of learning are so often intermixed with it that we should probably treat this as the rule rather than the exception. Which yields another heuristic: always be learning. If you’re not learning, you’re probably not on a path that leads to superlinear returns.</p><p>事实上，不包含学习的指数增长，往往也与学习紧密交织，这更可能是常态而非例外。这带来了另一个启发：永远保持学习。如果不学习，你很可能不在通往超线性回报的道路上。</p><p>But don’t overoptimize what you’re learning. Don’t limit yourself to learning things that are already known to be valuable. You’re learning; you don’t know for sure yet what’s going to be valuable, and if you’re too strict you’ll lop off the outliers.</p><p>但不要过度优化学习内容。不要只学已知有价值的东西。你在学习时，未必知道什么最终会有价值；如果限制太严，你会错过那些潜在的 “outliers”（极端值）。</p><p>What about step functions? Are there also useful heuristics of the form “seek thresholds” or “seek competition?” Here the situation is trickier. The existence of a threshold doesn’t guarantee the game will be worth playing. If you play a round of Russian roulette, you’ll be in a situation with a threshold, certainly, but in the best case you’re no better off. “Seek competition” is similarly useless; what if the prize isn’t worth competing for? Sufficiently fast exponential growth guarantees both the shape and magnitude of the return curve — because something that grows fast enough will grow big even if it’s trivially small at first — but thresholds only guarantee the shape. [4]</p><p>那么阶梯函数呢？有没有 “寻求阈值” 或 “寻求竞争” 这样有用的启发？情况更复杂。存在阈值不代表这件事值得做。比如玩俄罗斯轮盘赌，确实有阈值，但最好的结果也只是没输 —— 这显然不值得。“寻求竞争” 同样没用：如果奖品不值一提呢？足够快的指数增长能同时保证回报曲线的形状和幅度（因为增长足够快的事物，即使起点微不足道，最终也会变得庞大），但阈值只能保证形状。[4]</p><p>A principle for taking advantage of thresholds has to include a test to ensure the game is worth playing. Here’s one that does: if you come across something that’s mediocre yet still popular, it could be a good idea to replace it. For example, if a company makes a product that people dislike yet still buy, then presumably they’d buy a better alternative if you made one. [5]</p><p>利用阈值的原则必须包含一个检验：确保这件事值得做。有一个可行的原则：如果你遇到一件平庸却流行的事物，或许可以尝试取代它。比如，如果一家公司的产品人们不喜欢却仍在购买，那么只要你做出更好的替代品，人们很可能会买你的。[5]</p><p>It would be great if there were a way to find promising intellectual thresholds. Is there a way to tell which questions have whole new fields beyond them? I doubt we could ever predict this with certainty, but the prize is so valuable that it would be useful to have predictors that were even a little better than random, and there’s hope of finding those. We can to some degree predict when a research problem isn’t likely to lead to new discoveries: when it seems legit but boring. Whereas the kind that do lead to new discoveries tend to seem very mystifying, but perhaps unimportant. (If they were mystifying and obviously important, they’d be famous open questions with lots of people already working on them.) So one heuristic here is to be driven by curiosity rather than careerism — to give free rein to your curiosity instead of working on what you’re supposed to.</p><p>如果能找到有前景的 “知识阈值” 就好了 —— 怎么判断哪些问题背后藏着全新领域？我怀疑我们永远无法确切预测，但这个 “奖品” 太有价值了，哪怕找到比随机猜测稍好的预测方法也是有用的，而这是有可能的。我们在某种程度上能预测哪些研究问题不太可能带来新发现：那些看似合理却枯燥的问题。而能带来新发现的问题，往往看起来很神秘，却可能被认为 “不重要”（如果既神秘又明显重要，它们会成为著名的开放问题，早就有很多人在研究了）。因此，这里的一个启发是：被好奇心驱动，而非功利心 —— 放纵你的好奇心，而不是只做 “应该做” 的事。</p><p>The prospect of superlinear returns for performance is an exciting one for the ambitious. And there’s good news in this department: this territory is expanding in both directions. There are more types of work in which you can get superlinear returns, and the returns themselves are growing.</p><p>对有野心的人来说，绩效的超线性回报前景令人兴奋。还有一个好消息：这个领域正在双向扩张 —— 能获得超线性回报的工作类型更多了，回报本身也在增长。</p><p>There are two reasons for this, though they’re so closely intertwined that they’re more like one and a half: progress in technology, and the decreasing importance of organizations.</p><p>原因有两个（但它们紧密交织，更像是一个半）：技术进步，以及组织的重要性下降。</p><p>Fifty years ago it used to be much more necessary to be part of an organization to work on ambitious projects. It was the only way to get the resources you needed, the only way to have colleagues, and the only way to get distribution. So in 1970 your prestige was in most cases the prestige of the organization you belonged to. And prestige was an accurate predictor, because if you weren’t part of an organization, you weren’t likely to achieve much. There were a handful of exceptions, most notably artists and writers, who worked alone using inexpensive tools and had their own brands. But even they were at the mercy of organizations for reaching audiences. [6]</p><p>50 年前，要从事有野心的项目，往往必须加入某个组织 —— 这是获得资源、同事和渠道的唯一方式。因此在 1970 年，一个人的声望在大多数情况下等同于所属组织的声望。而声望是准确的预测指标，因为如果不属于任何组织，你几乎不可能取得成就。只有少数例外，尤其是艺术家和作家 —— 他们用廉价工具独立工作，有自己的品牌。但即便是他们，也得依赖组织才能触达受众。[6]</p><p>A world dominated by organizations damped variation in the returns for performance. But this world has eroded significantly just in my lifetime. Now a lot more people can have the freedom that artists and writers had in the 20th century. There are lots of ambitious projects that don’t require much initial funding, and lots of new ways to learn, make money, find colleagues, and reach audiences.</p><p>一个由组织主导的世界，会抑制绩效回报的差异。但在我有生之年，这个世界已大幅瓦解。现在，更多人能拥有 20 世纪艺术家和作家那样的自由：很多有野心的项目不需要太多初始资金，还有很多新方式可以学习、赚钱、寻找同事和触达受众。</p><p>There’s still plenty of the old world left, but the rate of change has been dramatic by historical standards. Especially considering what’s at stake. It’s hard to imagine a more fundamental change than one in the returns for performance.</p><p>旧世界的痕迹仍在，但以历史标准来看，变化速度惊人 —— 尤其是考虑到其中的利害关系。很难想象有什么变化比 “绩效回报方式” 的变化更根本。</p><p>Without the damping effect of institutions, there will be more variation in outcomes. Which doesn’t imply everyone will be better off: people who do well will do even better, but those who do badly will do worse. That’s an important point to bear in mind. Exposing oneself to superlinear returns is not for everyone. Most people will be better off as part of the pool. So who should shoot for superlinear returns? Ambitious people of two types: those who know they’re so good that they’ll be net ahead in a world with higher variation, and those, particularly the young, who can afford to risk trying it to find out. [7]</p><p>没有了机构的抑制作用，结果的差异会更大。这并不意味着所有人都会过得更好：做得好的人会更好，做得差的人会更差。这一点很重要。并非所有人都适合追求超线性回报 —— 大多数人作为 “群体中的一员” 会更好。那么谁该追求超线性回报？两类有野心的人：一类是知道自己足够优秀，能在高差异世界中最终受益的人；另一类是（尤其是年轻人）能承担风险去尝试的人。[7]</p><p>The switch away from institutions won’t simply be an exodus of their current inhabitants. Many of the new winners will be people they’d never have let in. So the resulting democratization of opportunity will be both greater and more authentic than any tame intramural version the institutions themselves might have cooked up.</p><p>脱离机构的过程不会只是现有成员的 “大逃亡”。许多新赢家会是那些机构永远不会接纳的人。因此，机会的民主化将比机构内部温和的 “内部改革” 更彻底、更真实。</p><p>Not everyone is happy about this great unlocking of ambition. It threatens some vested interests and contradicts some ideologies. [8] But if you’re an ambitious individual it’s good news for you. How should you take advantage of it?</p><p>并非所有人都对这种 “野心的释放” 感到高兴。它威胁到一些既得利益，也与一些意识形态冲突。[8] 但如果你是有野心的个体，这就是好消息。该如何利用这个机会？</p><p>The most obvious way to take advantage of superlinear returns for performance is by doing exceptionally good work. At the far end of the curve, incremental effort is a bargain. All the more so because there’s less competition at the far end — and not just for the obvious reason that it’s hard to do something exceptionally well, but also because people find the prospect so intimidating that few even try. Which means it’s not just a bargain to do exceptional work, but a bargain even to try to.</p><p>利用绩效超线性回报最明显的方式，是做极其出色的工作。在曲线的末端，增量努力是 “划算的”。更重要的是，末端的竞争更少 —— 不仅因为把事情做到极致很难，还因为人们觉得这个前景太吓人，很少有人敢尝试。这意味着，不仅做卓越的工作是划算的，哪怕只是尝试去做，也是划算的。</p><p>There are many variables that affect how good your work is, and if you want to be an outlier you need to get nearly all of them right. For example, to do something exceptionally well, you have to be interested in it. Mere diligence is not enough. So in a world with superlinear returns, it’s even more valuable to know what you’re interested in, and to find ways to work on it. [9] It will also be important to choose work that suits your circumstances. For example, if there’s a kind of work that inherently requires a huge expenditure of time and energy, it will be increasingly valuable to do it when you’re young and don’t yet have children.</p><p>影响工作质量的变量有很多，如果你想成为 “outliers”，几乎要把所有变量都做好。比如，要把一件事做到极致，你必须对它有兴趣 —— 光靠勤奋不够。因此，在一个超线性回报的世界里，知道自己对什么感兴趣、并找到为之工作的方式，变得更有价值。[9] 选择适合自身处境的工作也很重要。比如，如果一种工作本身需要投入大量时间和精力，那么在年轻、还没有孩子时去做，价值会越来越高。</p><p>There’s a surprising amount of technique to doing great work. It’s not just a matter of trying hard. I’m going to take a shot giving a recipe in one paragraph.</p><p>做好工作有很多技巧，不只是 “努力”。我试着用一段话总结：</p><p>Choose work you have a natural aptitude for and a deep interest in. Develop a habit of working on your own projects; it doesn’t matter what they are so long as you find them excitingly ambitious. Work as hard as you can without burning out, and this will eventually bring you to one of the frontiers of knowledge. These look smooth from a distance, but up close they’re full of gaps. Notice and explore such gaps, and if you’re lucky one will expand into a whole new field. Take as much risk as you can afford; if you’re not failing occasionally you’re probably being too conservative. Seek out the best colleagues. Develop good taste and learn from the best examples. Be honest, especially with yourself. Exercise and eat and sleep well and avoid the more dangerous drugs. When in doubt, follow your curiosity. It never lies, and it knows more than you do about what’s worth paying attention to. [10]</p><p>选择你有天赋且深感兴趣的工作。养成做自己项目的习惯 —— 项目是什么不重要，只要你觉得它有令人兴奋的野心。在不 burnout（ burnout：过度劳累）的前提下全力以赴，这最终会带你到达知识的某个前沿。远处看，前沿是平滑的；近处看，满是缺口。留意并探索这些缺口，运气好的话，某个缺口会扩展成一整个新领域。承担你能承受的风险 —— 如果从未失败，你可能太保守了。寻找最优秀的同事。培养好品味，向最好的例子学习。诚实（尤其是对自己）。锻炼、健康饮食、睡好，远离危险药物。有疑问时，跟随好奇心 —— 它从不说谎，比你更知道什么值得关注。[10]</p><p>And there is of course one other thing you need: to be lucky. Luck is always a factor, but it’s even more of a factor when you’re working on your own rather than as part of an organization. And though there are some valid aphorisms about luck being where preparedness meets opportunity and so on, there’s also a component of true chance that you can’t do anything about. The solution is to take multiple shots. Which is another reason to start taking risks early.</p><p>当然，你还需要一样东西：运气。运气永远是因素，但当你独立工作而非加入组织时，运气的影响更大。尽管有 “运气是准备遇上机会” 这样的格言，但确实存在你无法控制的纯粹偶然。解决办法是多尝试 —— 这也是早点开始冒险的另一个原因。</p><p>The best example of a field with superlinear returns is probably science. It has exponential growth, in the form of learning, combined with thresholds at the extreme edge of performance — literally at the limits of knowledge.</p><p>最能体现超线性回报的领域可能是科学。它既有学习带来的指数增长，又在绩效的极端边缘（即知识的极限）存在阈值。</p><p>The result has been a level of inequality in scientific discovery that makes the wealth inequality of even the most stratified societies seem mild by comparison. Newton’s discoveries were arguably greater than all his contemporaries’ combined. [11]</p><p>结果就是，科学发现的不平等程度，让即便是最分层社会的财富不平等都相形见绌。牛顿的发现，可以说超过了同时代所有人的总和。[11]</p><p>This point may seem obvious, but it might be just as well to spell it out. Superlinear returns imply inequality. The steeper the return curve, the greater the variation in outcomes.</p><p>这一点看似明显，但不妨说清楚：超线性回报意味着不平等。回报曲线越陡峭，结果的差异就越大。</p><p>In fact, the correlation between superlinear returns and inequality is so strong that it yields another heuristic for finding work of this type: look for fields where a few big winners outperform everyone else. A kind of work where everyone does about the same is unlikely to be one with superlinear returns.</p><p>事实上，超线性回报与不平等的相关性极强，这带来了另一个寻找这类工作的启发：看那些 “少数大赢家远超其他人” 的领域。如果一个领域里所有人的表现都差不多，那它不太可能有超线性回报。</p><p>What are fields where a few big winners outperform everyone else? Here are some obvious ones: sports, politics, art, music, acting, directing, writing, math, science, starting companies, and investing. In sports the phenomenon is due to externally imposed thresholds; you only need to be a few percent faster to win every race. In politics, power grows much as it did in the days of emperors. And in some of the other fields (including politics) success is driven largely by fame, which has its own source of superlinear growth. But when we exclude sports and politics and the effects of fame, a remarkable pattern emerges: the remaining list is exactly the same as the list of fields where you have to be independent-minded to succeed — where your ideas have to be not just correct, but novel as well. [12]</p><p>哪些领域是 “少数大赢家远超其他人” 的？ obvious 的有：体育、政治、艺术、音乐、表演、导演、写作、数学、科学、创业和投资。体育中的这种现象源于外部设定的阈值 —— 你只需要快百分之几，就能赢得所有比赛。政治中的权力增长，和古代帝国时代类似。而在其他一些领域（包括政治），成功很大程度上由名气驱动，而名气本身就有超线性增长的来源。但如果排除体育、政治和名气的影响，会出现一个明显的模式：剩下的领域，恰好是那些需要 “独立思考” 才能成功的领域 —— 你的想法不仅要正确，还要新颖。[12]</p><p>This is obviously the case in science. You can’t publish papers saying things that other people have already said. But it’s just as true in investing, for example. It’s only useful to believe that a company will do well if most other investors don’t; if everyone else thinks the company will do well, then its stock price will already reflect that, and there’s no room to make money.</p><p>科学领域显然如此：你不能发表别人已经说过的话。投资领域也一样：只有当大多数投资者不看好一家公司时，你相信它会成功才有意义；如果所有人都看好，股价早已反映这一点，你就没机会赚钱了。</p><p>What else can we learn from these fields? In all of them you have to put in the initial effort. Superlinear returns seem small at first. At this rate, you find yourself thinking, I’ll never get anywhere. But because the reward curve rises so steeply at the far end, it’s worth taking extraordinary measures to get there.</p><p>从这些领域中，我们还能学到什么？在所有这些领域，你都必须付出初始努力。超线性回报在初期看起来微不足道。你可能会想：“这样下去，我永远也成不了事。” 但因为回报曲线在末端会急剧上升，付出非凡努力到达那里是值得的。</p><p>In the startup world, the name for this principle is “do things that don’t scale.” If you pay a ridiculous amount of attention to your tiny initial set of customers, ideally you’ll kick off exponential growth by word of mouth. But this same principle applies to anything that grows exponentially. Learning, for example. When you first start learning something, you feel lost. But it’s worth making the initial effort to get a toehold, because the more you learn, the easier it will get.</p><p>在创业圈，这个原则被称为 “做不规模化的事”。如果你对最初的少量客户投入极大关注，理想情况下，就能通过口碑启动指数增长。这个原则适用于所有指数增长的事物 —— 比如学习。刚开始学东西时，你会感到迷茫，但付出初始努力站稳脚跟是值得的，因为学得越多，就越容易。</p><p>There’s another more subtle lesson in the list of fields with superlinear returns: not to equate work with a job. For most of the 20th century the two were identical for nearly everyone, and as a result we’ve inherited a custom that equates productivity with having a job. Even now to most people the phrase “your work” means their job. But to a writer or artist or scientist it means whatever they’re currently studying or creating. For someone like that, their work is something they carry with them from job to job, if they have jobs at all. It may be done for an employer, but it’s part of their portfolio.</p><p>从有超线性回报的领域列表中，还能得到一个更微妙的启示：不要把 “工作” 等同于 “职业”。20 世纪的大多数人，工作和职业是一回事，因此我们继承了 “生产力等同于有一份职业” 的习俗。即便是现在，对大多数人来说，“你的工作” 指的是你的职业。但对作家、艺术家或科学家来说，“工作” 是他们当前研究或创作的任何东西。对这类人来说，工作是他们从一个职业带到另一个职业的东西（如果他们有职业的话）。工作可能是为雇主做的，但属于他们自己的 “作品集”。</p><p>It’s an intimidating prospect to enter a field where a few big winners outperform everyone else. Some people do this deliberately, but you don’t need to. If you have sufficient natural ability and you follow your curiosity sufficiently far, you’ll end up in one. Your curiosity won’t let you be interested in boring questions, and interesting questions tend to create fields with superlinear returns if they’re not already part of one.</p><p>进入一个 “少数大赢家远超其他人” 的领域，前景确实令人畏惧。有些人会刻意这么做，但你不必。如果你有足够的天赋，且跟随好奇心走得足够远，你自然会进入这样的领域。你的好奇心不会让你对无聊的问题感兴趣，而有趣的问题如果还不属于某个领域，往往会催生出有超线性回报的领域。</p><p>The territory of superlinear returns is by no means static. Indeed, the most extreme returns come from expanding it. So while both ambition and curiosity can get you into this territory, curiosity may be the more powerful of the two. Ambition tends to make you climb existing peaks, but if you stick close enough to an interesting enough question, it may grow into a mountain beneath you.</p><p>超线性回报的领域绝非静止不变。事实上，最极端的回报来自于拓展这个领域。因此，尽管野心和好奇心都能带你进入这个领域，但好奇心可能更强大。野心往往让你攀登已有的山峰，而如果你紧紧盯着一个足够有趣的问题，它可能会在你脚下长成一座山。</p><p>Notes</p><p>There’s a limit to how sharply you can distinguish between effort, performance, and return, because they’re not sharply distinguished in fact. What counts as return to one person might be performance to another. But though the borders of these concepts are blurry, they’re not meaningless. I’ve tried to write about them as precisely as I could without crossing into error.</p><p>“努力”“绩效”“回报” 之间的界限很难严格区分，因为它们在现实中本就模糊。对一个人来说是 “回报” 的东西，对另一个人可能是 “绩效”。但尽管这些概念的边界模糊，它们并非没有意义。我已尽量精确地描述它们，避免错误。</p><p>[1] Evolution itself is probably the most pervasive example of superlinear returns for performance. But this is hard for us to empathize with because we’re not the recipients; we’re the returns.</p><p>[1] 进化本身可能是绩效超线性回报最普遍的例子。但我们很难共情，因为我们不是接受者，而是回报本身。</p><p>[2] Knowledge did of course have a practical effect before the Industrial Revolution. The development of agriculture changed human life completely. But this kind of change was the result of broad, gradual improvements in technique, not the discoveries of a few exceptionally learned people.</p><p>[2] 当然，工业革命前，知识也有实际影响。农业的发展彻底改变了人类生活。但这种变化是技术广泛、渐进改进的结果，而非少数极有学识的人的发现。</p><p>[3] It’s not mathematically correct to describe a step function as superlinear, but a step function starting from zero works like a superlinear function when it describes the reward curve for effort by a rational actor. If it starts at zero then the part before the step is below any linearly increasing return, and the part after the step must be above the necessary return at that point or no one would bother.</p><p>[3] 从数学上讲，阶梯函数并非超线性，但当阶梯函数从 0 开始、描述理性行为者的努力回报曲线时，它的作用类似超线性函数。如果从 0 开始，阶梯前的部分低于任何线性增长的回报，而阶梯后的部分必须高于该点的必要回报，否则没人会去做。</p><p>[4] Seeking competition could be a good heuristic in the sense that some people find it motivating. It’s also somewhat of a guide to promising problems, because it’s a sign that other people find them promising. But it’s a very imperfect sign: often there’s a clamoring crowd chasing some problem, and they all end up being trumped by someone quietly working on another one.</p><p>[4] “寻求竞争” 在某种意义上可能是个好启发：有些人觉得竞争能激励自己。它也能在一定程度上指引有前景的问题，因为这表明其他人也觉得它们有前景。但这是个很不完美的信号：往往有一群人追捧某个问题，最终却被一个默默研究其他问题的人超越。</p><p>[5] Not always, though. You have to be careful with this rule. When something is popular despite being mediocre, there’s often a hidden reason why. Perhaps monopoly or regulation make it hard to compete. Perhaps customers have bad taste or have broken procedures for deciding what to buy. There are huge swathes of mediocre things that exist for such reasons.</p><p>[5] 但也不总是这样。这个规则需要谨慎使用。当一件事平庸却流行时，往往有隐藏原因：可能是垄断或监管让竞争变难，可能是客户品味差，或决策流程有问题。有大量平庸的事物因这些原因存在。</p><p>[6] In my twenties I wanted to be an artist and even went to art school to study painting. Mostly because I liked art, but a nontrivial part of my motivation came from the fact that artists seemed least at the mercy of organizations.<br>[6] 我二十多岁时想当艺术家，甚至去艺术学校学绘画。主要是因为我喜欢艺术，但也有个重要原因：艺术家似乎最不受组织支配。</p><p>[7] In principle everyone is getting superlinear returns. Learning compounds, and everyone learns in the course of their life. But in practice few push this kind of everyday learning to the point where the return curve gets really steep.</p><p>[7] 理论上，每个人都在获得超线性回报。学习是复利的，每个人一生中都在学习。但实际上，很少有人把这种日常学习推进到回报曲线真正陡峭的程度。</p><p>[8] It’s unclear exactly what advocates of “equity” mean by it. They seem to disagree among themselves. But whatever they mean is probably at odds with a world in which institutions have less power to control outcomes, and a handful of outliers do much better than everyone else.</p><p>[8] “公平” 的倡导者到底指什么，尚不清楚。他们内部似乎也有分歧。但无论指什么，都可能与 “机构对结果的控制力下降、少数异类远超其他人” 的世界相冲突。</p><p>It may seem like bad luck for this concept that it arose at just the moment when the world was shifting in the opposite direction, but I don’t think this was a coincidence. I think one reason it arose now is because its adherents feel threatened by rapidly increasing variation in performance.</p><p>这个概念恰好在世界向相反方向转变时出现，看似巧合，但我不这么认为。我觉得它现在出现的一个原因是，其支持者感受到了绩效差异快速扩大的威胁。</p><p>[9] Corollary: Parents who pressure their kids to work on something prestigious, like medicine, even though they have no interest in it, will be hosing them even more than they have in the past.</p><p>[9] 推论：父母强迫孩子从事有 prestige（ prestige：声望）的工作（比如医学），哪怕孩子毫无兴趣，这对孩子的伤害会比过去更大。</p><p>[10] The original version of this paragraph was the first draft of “How to Do Great Work.” As soon as I wrote it I realized it was a more important topic than superlinear returns, so I paused the present essay to expand this paragraph into its own. Practically nothing remains of the original version, because after I finished “How to Do Great Work” I rewrote it based on that.</p><p>[10] 这段话的初稿是《如何做好工作》的第一版。写完后我意识到，这个主题比超线性回报更重要，于是暂停本文，把这段话扩展成了独立文章。现在的版本几乎没保留初稿内容，因为写完《如何做好工作》后，我据此重写了这段话。</p><p>[11] Before the Industrial Revolution, people who got rich usually did it like emperors: capturing some resource made them more powerful and enabled them to capture more. Now it can be done like a scientist, by discovering or building something uniquely valuable. Most people who get rich use a mix of the old and the new ways, but in the most advanced economies the ratio has shifted dramatically toward discovery just in the last half century.</p><p>[11] 工业革命前，富人致富的方式通常和皇帝一样：夺取资源让他们更强大，进而夺取更多资源。现在，还可以像科学家一样：发现或创造独特的价值。大多数富人会混合新旧方式，但在最发达的经济体中，过去半个世纪里，“发现” 的占比已大幅上升。</p><p>[12] It’s not surprising that conventional-minded people would dislike inequality if independent-mindedness is one of the biggest drivers of it. But it’s not simply that they don’t want anyone to have what they can’t. The conventional-minded literally can’t imagine what it’s like to have novel ideas. So the whole phenomenon of great variation in performance seems unnatural to them, and when they encounter it they assume it must be due to cheating or to some malign external influence.</p><p>[12] 如果独立思考是不平等的一大驱动因素，那么循规蹈矩的人不喜欢不平等就不奇怪了。但这不只是因为他们不希望别人拥有自己没有的东西。循规蹈矩的人根本无法想象有新颖想法是什么感觉。因此，绩效的巨大差异在他们看来是不自然的，遇到时会认为一定是作弊或有恶意外部影响。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疯狂的新想法</title>
    <link href="/2025/08/04/crazy-new-ideas/"/>
    <url>/2025/08/04/crazy-new-ideas/</url>
    
    <content type="html"><![CDATA[<h2 id="Crazy-New-Ideas"><a href="#Crazy-New-Ideas" class="headerlink" title="Crazy New Ideas"></a>Crazy New Ideas</h2><p>原文链接: <a href="https://paulgraham.com/newideas.html">https://paulgraham.com/newideas.html</a></p><p>May 2021</p><p>There’s one kind of opinion I’d be very afraid to express publicly. If someone I knew to be both a domain expert and a reasonable person proposed an idea that sounded preposterous, I’d be very reluctant to say “That will never work.”</p><p>有一种观点，我非常害怕公开表达。但如果我认识的一个人，既是某领域的专家，又通情达理，却提出了一个听起来荒谬绝伦的想法，我绝不会轻易说 “这根本行不通”。</p><p>Anyone who has studied the history of ideas, and especially the history of science, knows that’s how big things start. Someone proposes an idea that sounds crazy, most people dismiss it, then it gradually takes over the world.</p><p>任何研究过思想史（尤其是科学史）的人都知道，伟大的事物往往始于此：有人提出一个听起来疯狂的想法，多数人嗤之鼻，最终它却逐渐改变了世界。</p><p>Most implausible-sounding ideas are in fact bad and could be safely dismissed. But not when they’re proposed by reasonable domain experts. If the person proposing the idea is reasonable, then they know how implausible it sounds. And yet they’re proposing it anyway. That suggests they know something you don’t. And if they have deep domain expertise, that’s probably the source of it. [1]</p><p>多数听起来难以置信的想法确实糟糕，完全可以放心否定。但如果提出者是通情达理的领域专家，情况就不同了。一个理智的人必然清楚自己的想法有多离谱，却仍坚持提出 —— 这说明他们知道一些你不知道的事。而如果他们拥有深厚的领域知识，那很可能就是答案的来源。[1]</p><p>Such ideas are not merely unsafe to dismiss, but disproportionately likely to be interesting. When the average person proposes an implausible-sounding idea, its implausibility is evidence of their incompetence. But when a reasonable domain expert does it, the situation is reversed. There’s something like an efficient market here: on average the ideas that seem craziest will, if correct, have the biggest effect. So if you can eliminate the theory that the person proposing an implausible-sounding idea is incompetent, its implausibility switches from evidence that it’s boring to evidence that it’s exciting. [2]</p><p>这类想法不仅不该被轻易否定，反而更可能暗藏价值。普通人提出离谱的想法，其 “离谱” 恰恰证明了他们的无能；但换成通情达理的领域专家，情况就完全反转了。这有点像 “有效市场”：平均来看，那些看似最疯狂的想法，一旦正确，影响往往最大。所以，如果你能排除 “提出离谱想法的人是无能的” 这一可能，那么 “离谱” 就会从 “无聊” 的证据，变成 “令人兴奋” 的信号。[2]</p><p>Such ideas are not guaranteed to work. But they don’t have to be. They just have to be sufficiently good bets — to have sufficiently high expected value. And I think on average they do. I think if you bet on the entire set of implausible-sounding ideas proposed by reasonable domain experts, you’d end up net ahead.</p><p>这类想法未必一定可行，但这没关系。它们只需是 “足够好的赌注”—— 拥有足够高的预期价值。而我认为，总体来看它们确实如此。如果你押注于所有由通情达理的领域专家提出的离谱想法，最终很可能会净赚。</p><p>The reason is that everyone is too conservative. The word “paradigm” is overused, but this is a case where it’s warranted. Everyone is too much in the grip of the current paradigm. Even the people who have the new ideas undervalue them initially. Which means that before they reach the stage of proposing them publicly, they’ve already subjected them to an excessively strict filter. [3]</p><p>原因在于，所有人都过于保守。“范式” 这个词被滥用了，但这里用它恰如其分：每个人都深陷当前范式的桎梏，即便提出新想法的人，最初也会低估自己的想法。这意味着，在他们公开提出这些想法之前，已经用过于严苛的标准过滤过了。[3]</p><p>The wise response to such an idea is not to make statements, but to ask questions, because there’s a real mystery here. Why has this smart and reasonable person proposed an idea that seems so wrong? Are they mistaken, or are you? One of you has to be. If you’re the one who’s mistaken, that would be good to know, because it means there’s a hole in your model of the world. But even if they’re mistaken, it should be interesting to learn why. A trap that an expert falls into is one you have to worry about too.</p><p>面对这类想法，明智的反应不是下结论，而是提问 —— 因为这里存在一个真正的谜团：为什么这个聪明又理智的人会提出一个看似错误的想法？是他们错了，还是你错了？总有一方是错的。如果错的是你，了解这一点会很有价值，因为这意味着你的世界观存在漏洞；即便错的是他们，弄清楚原因也很有趣 —— 专家掉进去的陷阱，你也可能遇到。</p><p>This all seems pretty obvious. And yet there are clearly a lot of people who don’t share my fear of dismissing new ideas. Why do they do it? Why risk looking like a jerk now and a fool later, instead of just reserving judgement?</p><p>这一切似乎显而易见。但显然，很多人并不像我这样害怕否定新想法。他们为什么要这么做？为什么宁愿现在显得粗鲁、日后显得愚蠢，也不愿暂时保留判断？</p><p>One reason they do it is envy. If you propose a radical new idea and it succeeds, your reputation (and perhaps also your wealth) will increase proportionally. Some people would be envious if that happened, and this potential envy propagates back into a conviction that you must be wrong.</p><p>一个原因是嫉妒。如果你提出一个激进的新想法并成功了，你的声誉（或许还有财富）会随之飙升。有些人会因此嫉妒，这种潜在的嫉妒会转化为 “你肯定错了” 的执念。</p><p>Another reason people dismiss new ideas is that it’s an easy way to seem sophisticated. When a new idea first emerges, it usually seems pretty feeble. It’s a mere hatchling. Received wisdom is a full-grown eagle by comparison. So it’s easy to launch a devastating attack on a new idea, and anyone who does will seem clever to those who don’t understand this asymmetry.</p><p>另一个原因是，否定新想法是彰显 “老练” 的捷径。新想法刚出现时，往往显得脆弱不堪，就像刚破壳的雏鸟；而既有观念则如同展翅的雄鹰。所以，攻击新想法很容易显得 “有见地”—— 对不了解这种不对称的人来说，这么做的人看起来很聪明。</p><p>This phenomenon is exacerbated by the difference between how those working on new ideas and those attacking them are rewarded. The rewards for working on new ideas are weighted by the value of the outcome. So it’s worth working on something that only has a 10% chance of succeeding if it would make things more than 10x better. Whereas the rewards for attacking new ideas are roughly constant; such attacks seem roughly equally clever regardless of the target.</p><p>这种现象因 “研究新想法者” 与 “攻击新想法者” 的回报差异而加剧：研究新想法的回报与结果价值挂钩 —— 如果一件事成功后能带来 10 倍以上的改善，即便只有 10% 的成功率，也值得投入；而攻击新想法的回报几乎是固定的 —— 无论攻击的对象是什么，这种行为看起来 “聪明” 的程度都差不多。</p><p>People will also attack new ideas when they have a vested interest in the old ones. It’s not surprising, for example, that some of Darwin’s harshest critics were churchmen. People build whole careers on some ideas. When someone claims they’re false or obsolete, they feel threatened.</p><p>人们还会因为 “旧想法的既得利益” 而攻击新想法。比如，达尔文最严厉的批评者中有些是神职人员，这并不奇怪。有些人的整个职业生涯都建立在某些想法之上，当有人说这些想法是错的或过时的，他们会感到威胁。</p><p>The lowest form of dismissal is mere factionalism: to automatically dismiss any idea associated with the opposing faction. The lowest form of all is to dismiss an idea because of who proposed it.</p><p>最低级的否定是纯粹的派系主义：自动否定所有与对立派系相关的想法。而最最低级的，是因为提出者是谁而否定一个想法。</p><p>But the main thing that leads reasonable people to dismiss new ideas is the same thing that holds people back from proposing them: the sheer pervasiveness of the current paradigm. It doesn’t just affect the way we think; it is the Lego blocks we build thoughts out of. Popping out of the current paradigm is something only a few people can do. And even they usually have to suppress their intuitions at first, like a pilot flying through cloud who has to trust his instruments over his sense of balance. [4]</p><p>但让理智的人否定新想法的主要原因，与阻碍人们提出新想法的原因相同：当前范式的无处不在。它不仅影响我们的思考方式，更是我们构建思想的 “乐高积木”。能跳出当前范式的人寥寥无几，即便他们，最初也往往要压制直觉 —— 就像飞行员穿越云层时，必须相信仪器而非平衡感。[4]</p><p>Paradigms don’t just define our present thinking. They also vacuum up the trail of crumbs that led to them, making our standards for new ideas impossibly high. The current paradigm seems so perfect to us, its offspring, that we imagine it must have been accepted completely as soon as it was discovered — that whatever the church thought of the heliocentric model, astronomers must have been convinced as soon as Copernicus proposed it. Far, in fact, from it. Copernicus published the heliocentric model in 1532, but it wasn’t till the mid seventeenth century that the balance of scientific opinion shifted in its favor. [5]</p><p>范式不仅定义了我们当下的思考，还 “吸走” 了通往它们的轨迹，让我们对新想法的标准高得离谱。作为范式的 “后代”，我们觉得它完美无缺，甚至以为它一经提出就被完全接受 —— 比如，无论教会怎么看待日心说，天文学家在哥白尼提出时肯定立刻信服了。但事实远非如此：哥白尼 1532 年发表日心说，直到 17 世纪中叶，科学界的主流观点才转向支持它。[5]</p><p>Few understand how feeble new ideas look when they first appear. So if you want to have new ideas yourself, one of the most valuable things you can do is to learn what they look like when they’re born. Read about how new ideas happened, and try to get yourself into the heads of people at the time. How did things look to them, when the new idea was only half-finished, and even the person who had it was only half-convinced it was right?</p><p>很少有人知道新想法刚出现时有多脆弱。所以，如果你自己也想产生新想法，最有价值的事之一就是了解它们 “诞生时的样子”：去读新想法的发展史，试着代入当时的人的视角 —— 当新想法还未成熟，连提出者自己都只有一半把握时，他们眼中的世界是什么样的？</p><p>But you don’t have to stop at history. You can observe big new ideas being born all around you right now. Just look for a reasonable domain expert proposing something that sounds wrong.</p><p>但你不必只局限于历史。现在，你身边就有重大新想法正在诞生。只需留意：那些通情达理的领域专家，正在提出哪些听起来 “错误” 的东西。</p><p>If you’re nice, as well as wise, you won’t merely resist attacking such people, but encourage them. Having new ideas is a lonely business. Only those who’ve tried it know how lonely. These people need your help. And if you help them, you’ll probably learn something in the process.</p><p>如果你兼具明智与善良，不仅不会攻击这些人，还会鼓励他们。产生新想法是一件孤独的事，只有尝试过的人才懂这份孤独。这些人需要你的帮助，而帮助他们的过程中，你很可能也会有所收获。</p><p>Notes</p><p>[1] This domain expertise could be in another field. Indeed, such crossovers tend to be particularly promising.</p><p>[1] 这里的 “领域知识” 可能来自其他领域。事实上，这种跨领域的想法往往特别有潜力。</p><p>[2] I’m not claiming this principle extends much beyond math, engineering, and the hard sciences. In politics, for example, crazy-sounding ideas generally are as bad as they sound. Though arguably this is not an exception, because the people who propose them are not in fact domain experts; politicians are domain experts in political tactics, like how to get elected and how to get legislation passed, but not in the world that policy acts upon. Perhaps no one could be.</p><p>[2] 我并非说这一原则适用于数学、工程学和硬科学之外的领域。比如在政治中，听起来疯狂的想法通常确实很糟糕。但这或许不算例外，因为提出这些想法的人并非真正的领域专家：政客是 “政治策略”（如如何当选、如何推动立法）的专家，而非 “政策所作用的世界” 的专家。或许，没人能成为后者。</p><p>[3] This sense of “paradigm” was defined by Thomas Kuhn in his Structure of Scientific Revolutions, but I also recommend his Copernican Revolution, where you can see him at work developing the idea.</p><p>[3] “范式” 的这一含义由托马斯・库恩在《科学革命的结构》中定义，但我也推荐他的《哥白尼革命》，在这本书中可以看到他如何逐步发展这一概念。</p><p>[4] This is one reason people with a touch of Asperger’s may have an advantage in discovering new ideas. They’re always flying on instruments.</p><p>[4] 这也是为什么有轻微阿斯伯格综合征的人可能在发现新想法上更有优势 —— 他们总是 “依靠仪器飞行”。</p><p>[5] Hall, Rupert. From Galileo to Newton. Collins, 1963. This book is particularly good at getting into contemporaries’ heads.</p><p>[5] 霍尔・鲁珀特，《从伽利略到牛顿》，柯林斯出版社，1963 年。这本书特别擅长代入同时代人的视角。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现代的富豪是怎样炼成的</title>
    <link href="/2025/08/03/how-people-get-rich-now/"/>
    <url>/2025/08/03/how-people-get-rich-now/</url>
    
    <content type="html"><![CDATA[<h2 id="How-People-Get-Rich-Now"><a href="#How-People-Get-Rich-Now" class="headerlink" title="How People Get Rich Now"></a>How People Get Rich Now</h2><p>原文链接: <a href="https://paulgraham.com/richnow.html">https://paulgraham.com/richnow.html</a></p><p>April 2021</p><p>Every year since 1982, Forbes magazine has published a list of the richest Americans. If we compare the 100 richest people in 1982 to the 100 richest in 2020, we notice some big differences.</p><p>自 1982 年起，《福布斯》杂志每年都会发布美国富豪榜。对比 1982 年和 2020 年榜单中最富有的 100 人，我们会发现一些显著差异。</p><p>In 1982 the most common source of wealth was inheritance. Of the 100 richest people, 60 inherited from an ancestor. There were 10 du Pont heirs alone. By 2020 the number of heirs had been cut in half, accounting for only 27 of the biggest 100 fortunes.</p><p>1982 年，最常见的财富来源是继承。在最富有的 100 人中，60 人的财富来自先辈遗产，仅杜邦家族的继承人就有 10 位。而到 2020 年，继承财富的人数减少了一半，仅占前 100 名富豪的 27%。</p><p>Why would the percentage of heirs decrease? Not because inheritance taxes increased. In fact, they decreased significantly during this period. The reason the percentage of heirs has decreased is not that fewer people are inheriting great fortunes, but that more people are making them.</p><p>为什么继承财富的比例会下降？并非因为遗产税提高 —— 事实上，这段时间遗产税大幅降低。真正的原因不是继承巨额财富的人变少了，而是靠自己创造财富的人变多了。</p><p>How are people making these new fortunes? Roughly 3&#x2F;4 by starting companies and 1&#x2F;4 by investing. Of the 73 new fortunes in 2020, 56 derive from founders’ or early employees’ equity (52 founders, 2 early employees, and 2 wives of founders), and 17 from managing investment funds.</p><p>这些新富豪是如何发家的？约 3&#x2F;4 来自创办公司，1&#x2F;4 来自投资。2020 年的 73 位新富豪中，56 位来自创始人或早期员工的股权（52 位创始人、2 位早期员工、2 位创始人的妻子），17 位来自管理投资基金。</p><p>There were no fund managers among the 100 richest Americans in 1982. Hedge funds and private equity firms existed in 1982, but none of their founders were rich enough yet to make it into the top 100. Two things changed: fund managers discovered new ways to generate high returns, and more investors were willing to trust them with their money. [1]</p><p>1982 年的美国前 100 富豪中，没有基金经理。尽管 1982 年就有对冲基金和私募股权公司，但它们的创始人当时还不够富有，无法跻身前 100。后来有两件事改变了这一点：基金经理发现了创造高回报的新方法，且更多投资者愿意把钱交给他们管理。[1]</p><p>But the main source of new fortunes now is starting companies, and when you look at the data, you see big changes there too. People get richer from starting companies now than they did in 1982, because the companies do different things.</p><p>但如今新财富的主要来源是创办公司，数据显示这方面也发生了巨大变化。现在通过创办公司致富的人比 1982 年更富有，因为这些公司所从事的领域不同了。</p><p>In 1982, there were two dominant sources of new wealth: oil and real estate. Of the 40 new fortunes in 1982, at least 24 were due primarily to oil or real estate. Now only a small number are: of the 73 new fortunes in 2020, 4 were due to real estate and only 2 to oil.</p><p>1982 年，新富豪有两个主要来源：石油和房地产。在当年的 40 位新富豪中，至少 24 位主要来自石油或房地产。而现在，这类富豪占比很小：2020 年的 73 位新富豪中，仅 4 笔来自房地产，2 笔来自石油。</p><p>By 2020 the biggest source of new wealth was what are sometimes called “tech” companies. Of the 73 new fortunes, about 30 derive from such companies. These are particularly common among the richest of the rich: 8 of the top 10 fortunes in 2020 were new fortunes of this type.</p><p>到 2020 年，新富豪的最大来源是所谓的 “科技” 公司。73 位新富豪中，约 30 位来自这类公司。它们在顶级富豪中尤为常见：2020 年前 10 大富豪中，有 8 位来自科技公司。</p><p>Arguably it’s slightly misleading to treat tech as a category. Isn’t Amazon really a retailer, and Tesla a car maker? Yes and no. Maybe in 50 years, when what we call tech is taken for granted, it won’t seem right to put these two businesses in the same category. But at the moment at least, there is definitely something they share in common that distinguishes them. What retailer starts AWS? What car maker is run by someone who also has a rocket company?</p><p>将 “科技” 视为一个类别可能略有误导。亚马逊难道不是零售商吗？特斯拉不是汽车制造商吗？可以说是，也可以说不是。或许 50 年后，当我们如今所说的 “科技” 成为常态，把这两家公司归为同一类别就显得不合适了。但至少目前，它们确实有一些共同的、能与其他公司区分开的特质。哪家零售商会推出 AWS（亚马逊云服务）？哪家汽车制造商的老板同时还经营着一家火箭公司？</p><p>The tech companies behind the top 100 fortunes also form a well-differentiated group in the sense that they’re all companies that venture capitalists would readily invest in, and the others mostly not. And there’s a reason why: these are mostly companies that win by having better technology, rather than just a CEO who’s really driven and good at making deals.</p><p>支撑前 100 富豪财富的科技公司，其实是一个界限清晰的群体 —— 风险投资家愿意投资它们，而其他公司大多不被青睐。原因在于：这些公司的成功主要靠更先进的技术，而非仅仅靠一位干劲十足、擅长做交易的 CEO。</p><p>To that extent, the rise of the tech companies represents a qualitative change. The oil and real estate magnates of the 1982 Forbes 400 didn’t win by making better technology. They won by being really driven and good at making deals. [2] And indeed, that way of getting rich is so old that it predates the Industrial Revolution. The courtiers who got rich in the (nominal) service of European royal houses in the 16th and 17th centuries were also, as a rule, really driven and good at making deals.</p><p>从这个角度看，科技公司的崛起代表着一种质的变化。1982 年《福布斯》400 富豪榜中的石油和房地产大亨，并非靠更先进的技术成功，而是靠干劲和交易能力。[2] 事实上，这种致富方式非常古老，甚至早于工业革命。16、17 世纪为欧洲王室（名义上）服务而致富的廷臣，通常也是靠干劲和交易能力。</p><p>People who don’t look any deeper than the Gini coefficient look back on the world of 1982 as the good old days, because those who got rich then didn’t get as rich. But if you dig into how they got rich, the old days don’t look so good. In 1982, 84% of the richest 100 people got rich by inheritance, extracting natural resources, or doing real estate deals. Is that really better than a world in which the richest people get rich by starting tech companies?</p><p>那些只看基尼系数的人，会把 1982 年的世界视为 “美好旧时光”，因为当时的富豪没那么富。但如果深究他们的致富方式，“旧时光” 就没那么美好了。1982 年，前 100 富豪中 84% 的人靠继承、开采自然资源或房地产交易致富。这真的比现在富豪靠创办科技公司致富更好吗？</p><p>Why are people starting so many more new companies than they used to, and why are they getting so rich from it? The answer to the first question, curiously enough, is that it’s misphrased. We shouldn’t be asking why people are starting companies, but why they’re starting companies again. [3]</p><p>为什么现在创办新公司的人比过去多得多，且能通过创办公司变得如此富有？说来奇怪，第一个问题的表述有误。我们不该问 “为什么人们开始创办公司”，而该问 “为什么人们又开始创办公司了”。[3]</p><p>In 1892, the New York Herald Tribune compiled a list of all the millionaires in America. They found 4047 of them. How many had inherited their wealth then? Only about 20%, which is less than the proportion of heirs today. And when you investigate the sources of the new fortunes, 1892 looks even more like today. Hugh Rockoff found that “many of the richest … gained their initial edge from the new technology of mass production.” [4]</p><p>1892 年，《纽约先驱论坛报》编制了一份美国百万富翁名单，共 4047 人。当时靠继承财富的有多少？仅约 20%，比现在继承财富的比例还低。若深究当时新财富的来源，1892 年与现在更为相似。休・罗克夫发现：“许多最富有的人…… 最初的优势来自大规模生产这一新技术。”[4]</p><p>So it’s not 2020 that’s the anomaly here, but 1982. The real question is why so few people had gotten rich from starting companies in 1982. And the answer is that even as the Herald Tribune’s list was being compiled, a wave of consolidation was sweeping through the American economy. In the late 19th and early 20th centuries, financiers like J. P. Morgan combined thousands of smaller companies into a few hundred giant ones with commanding economies of scale. By the end of World War II, as Michael Lind writes, “the major sectors of the economy were either organized as government-backed cartels or dominated by a few oligopolistic corporations.” [5]</p><p>因此，反常的不是 2020 年，而是 1982 年。真正的问题是：为什么 1982 年靠创办公司致富的人如此之少？答案是，就在《纽约先驱论坛报》编制名单时，一波整合浪潮正席卷美国经济。19 世纪末 20 世纪初，像 J.P. 摩根这样的金融家将数千家小公司合并成几百家巨头企业，这些巨头凭借规模经济占据主导地位。正如迈克尔・林德所写，到二战结束时，“经济的主要领域要么被政府支持的卡特尔组织控制，要么被少数寡头企业主导”。[5]</p><p>In 1960, most of the people who start startups today would have gone to work for one of them. You could get rich from starting your own company in 1890 and in 2020, but in 1960 it was not really a viable option. You couldn’t break through the oligopolies to get at the markets. So the prestigious route in 1960 was not to start your own company, but to work your way up the corporate ladder at an existing one. [6]</p><p>1960 年，如今大多数创办初创公司的人，当时都会去这些巨头企业工作。1890 年和 2020 年，人们可以靠创办自己的公司致富，但 1960 年这并非可行选项 —— 你无法突破寡头垄断进入市场。因此，1960 年的主流路径不是创办公司，而是在现有企业中顺着职业阶梯往上爬。[6]</p><p>Making everyone a corporate employee decreased economic inequality (and every other kind of variation), but if your model of normal is the mid 20th century, you have a very misleading model in that respect. J. P. Morgan’s economy turned out to be just a phase, and starting in the 1970s, it began to break up.</p><p>让所有人都成为企业员工，降低了经济不平等（以及其他各种差异），但如果把 20 世纪中期视为 “常态”，那这种认知就大错特错了。J.P. 摩根主导的经济终究只是一个阶段，从 20 世纪 70 年代开始，它开始瓦解。</p><p>Why did it break up? Partly senescence. The big companies that seemed models of scale and efficiency in 1930 had by 1970 become slack and bloated. By 1970 the rigid structure of the economy was full of cosy nests that various groups had built to insulate themselves from market forces. During the Carter administration the federal government realized something was amiss and began, in a process they called “deregulation,” to roll back the policies that propped up the oligopolies.</p><p>为什么会瓦解？部分原因是衰老。1930 年看似高效的巨头企业，到 1970 年已变得松弛臃肿。1970 年，僵化的经济结构中充斥着各种 “安乐窝”，不同群体借此隔绝市场力量。卡特政府时期，联邦政府意识到问题，开始通过 “ deregulation”（放松管制）撤销支撑寡头垄断的政策。</p><p>But it wasn’t just decay from within that broke up J. P. Morgan’s economy. There was also pressure from without, in the form of new technology, and particularly microelectronics. The best way to envision what happened is to imagine a pond with a crust of ice on top. Initially the only way from the bottom to the surface is around the edges. But as the ice crust weakens, you start to be able to punch right through the middle.</p><p>但瓦解 J.P. 摩根式经济的，不仅是内部衰败，还有外部压力 —— 以新技术（尤其是微电子技术）的形式。最形象的比喻是：想象一个池塘，表面结着一层冰。起初，从池底到水面只能绕着边缘走。但随着冰层变薄，你开始能直接从中间破冰而出。</p><p>The edges of the pond were pure tech: companies that actually described themselves as being in the electronics or software business. When you used the word “startup” in 1990, that was what you meant. But now startups are punching right through the middle of the ice crust and displacing incumbents like retailers and TV networks and car companies. [7]</p><p>池塘的边缘是纯科技领域：那些自称从事电子或软件业务的公司。1990 年提到 “初创公司” 时，指的就是这类企业。但现在，初创公司正直接从冰层中央破冰，取代零售商、电视网络、汽车制造商等老牌企业。[7]</p><p>But though the breakup of J. P. Morgan’s economy created a new world in the technological sense, it was a reversion to the norm in the social sense. If you only look back as far as the mid 20th century, it seems like people getting rich by starting their own companies is a recent phenomenon. But if you look back further, you realize it’s actually the default. So what we should expect in the future is more of the same. Indeed, we should expect both the number and wealth of founders to grow, because every decade it gets easier to start a startup.</p><p>尽管 J.P. 摩根式经济的瓦解在技术层面创造了新世界，但在社会层面，它其实是回归常态。若只回顾 20 世纪中期，会觉得靠创办公司致富是近年才有的现象；但看得更远就会发现，这其实是默认状态。因此，未来我们有望看到更多类似情况 —— 事实上，创始人的数量和财富都可能增长，因为每十年，创办初创公司都变得更容易。</p><p>Part of the reason it’s getting easier to start a startup is social. Society is (re)assimilating the concept. If you start one now, your parents won’t freak out the way they would have a generation ago, and knowledge about how to do it is much more widespread. But the main reason it’s easier to start a startup now is that it’s cheaper. Technology has driven down the cost of both building products and acquiring customers.</p><p>创办初创公司变得更容易，部分原因与社会有关。社会正在（重新）接纳这一概念：现在创办公司，父母不会像上一代那样大惊小怪，且关于如何创业的知识也更普及。但主要原因是成本降低：技术压低了产品研发和客户获取的成本。</p><p>The decreasing cost of starting a startup has in turn changed the balance of power between founders and investors. Back when starting a startup meant building a factory, you needed investors’ permission to do it at all. But now investors need founders more than founders need investors, and that, combined with the increasing amount of venture capital available, has driven up valuations. [8]</p><p>创业成本降低，反过来改变了创始人与投资者的权力平衡。过去，创办公司意味着建工厂，你完全需要投资者的许可才能启动；但现在，投资者更需要创始人，再加上风险资本越来越多，推高了公司估值。[8]</p><p>So the decreasing cost of starting a startup increases the number of rich people in two ways: it means that more people start them, and that those who do can raise money on better terms.</p><p>因此，创业成本降低从两方面增加了富人数量：更多人会去创业，且创业者能以更有利的条件融资。</p><p>But there’s also a third factor at work: the companies themselves are more valuable, because newly founded companies grow faster than they used to. Technology hasn’t just made it cheaper to build and distribute things, but faster too.</p><p>还有第三个因素：公司本身更有价值，因为新创办的公司比过去增长得更快。技术不仅让研发和分销成本更低，还让速度更快。</p><p>This trend has been running for a long time. IBM, founded in 1896, took 45 years to reach a billion 2020 dollars in revenue. Hewlett-Packard, founded in 1939, took 25 years. Microsoft, founded in 1975, took 13 years. Now the norm for fast-growing companies is 7 or 8 years. [9]</p><p>这一趋势已持续很久。1896 年成立的 IBM，花了 45 年才实现按 2020 年美元计算的 10 亿美元营收；1939 年成立的惠普，用了 25 年；1975 年成立的微软，用了 13 年。现在，快速增长的公司通常只需 7 到 8 年。[9]</p><p>Fast growth has a double effect on the value of founders’ stock. The value of a company is a function of its revenue and its growth rate. So if a company grows faster, you not only get to a billion dollars in revenue sooner, but the company is more valuable when it reaches that point than it would be if it were growing slower.</p><p>快速增长对创始人股票的价值有双重影响：公司价值取决于营收和增长率。因此，公司增长越快，不仅能更快达到 10 亿美元营收，且达到这一规模时的价值也比增长慢的公司更高。</p><p>That’s why founders sometimes get so rich so young now. The low initial cost of starting a startup means founders can start young, and the fast growth of companies today means that if they succeed they could be surprisingly rich just a few years later.</p><p>这就是为什么现在的创始人有时能在年轻时就变得极其富有。创业初期成本低，意味着创始人可以早起步；而如今公司增长快，意味着一旦成功，几年后他们就可能意外暴富。</p><p>It’s easier now to start and grow a company than it has ever been. That means more people start them, that those who do get better terms from investors, and that the resulting companies become more valuable. Once you understand how these mechanisms work, and that startups were suppressed for most of the 20th century, you don’t have to resort to some vague right turn the country took under Reagan to explain why America’s Gini coefficient is increasing. Of course the Gini coefficient is increasing. With more people starting more valuable companies, how could it not be?</p><p>现在创办和发展公司，比以往任何时候都更容易。这意味着更多人会去创业，创业者能从投资者那里获得更有利的条件，最终诞生的公司也更有价值。一旦理解了这些机制，且知道初创公司在 20 世纪大部分时间里被压制，就不必用 “里根执政时期国家转向保守” 这种模糊说法来解释美国基尼系数的上升了。基尼系数上升是必然的 —— 更多人创办了更有价值的公司，怎么可能不上升呢？</p><p>Notes</p><p>[1] Investment firms grew rapidly after a regulatory change by the Labor Department in 1978 allowed pension funds to invest in them, but the effects of this growth were not yet visible in the top 100 fortunes in 1982.</p><p>[1] 1978 年，美国劳工部出台监管改革，允许养老基金投资于投资公司，此后投资公司迅速发展。但到 1982 年，这种发展的影响尚未体现在前 100 名富豪的财富中。</p><p>[2] George Mitchell deserves mention as an exception. Though really driven and good at making deals, he was also the first to figure out how to use fracking to get natural gas out of shale.</p><p>[2] 乔治・米切尔是个值得一提的例外。尽管他干劲十足且擅长交易，但他也是首位想出如何用水力压裂法从页岩中开采天然气的人。</p><p>[3] When I say people are starting more companies, I mean the type of company meant to grow very big. There has actually been a decrease in the last couple decades in the overall number of new companies. But the vast majority of companies are small retail and service businesses. So what the statistics about the decreasing number of new businesses mean is that people are starting fewer shoe stores and barber shops.</p><p>[3] 我说 “人们创办的公司更多了”，指的是那些旨在发展成大型企业的公司。事实上，过去几十年，新公司的总数有所减少，但绝大多数公司都是小型零售和服务企业。因此，“新企业数量减少” 的统计数据，实际意味着人们创办的鞋店和理发店等小型生意变少了。</p><p>People sometimes get confused when they see a graph labelled “startups” that’s going down, because there are two senses of the word “startup”: (1) the founding of a company, and (2) a particular type of company designed to grow big fast. The statistics mean startup in sense (1), not sense (2).</p><p>人们看到标有 “初创公司”（startups）且呈下降趋势的图表时，有时会感到困惑，因为 “startup” 一词有两种含义：（1）泛指公司的创立；（2）特指旨在快速发展成大型企业的一类公司。上述统计数据中的 “startup” 指的是第一种含义，而非第二种。</p><p>[4] Rockoff, Hugh. “Great Fortunes of the Gilded Age.” NBER Working Paper 14555, 2008.</p><p>[4] 罗克夫，休。《镀金时代的巨额财富》。NBER 工作论文 14555，2008 年。</p><p>[5] Lind, Michael. Land of Promise. HarperCollins, 2012.</p><p>[5] 林德，迈克尔。《希望之地》。哈珀柯林斯出版社，2012 年。</p><p>It’s also likely that the high tax rates in the mid 20th century deterred people from starting their own companies. Starting one’s own company is risky, and when risk isn’t rewarded, people opt for safety instead.</p><p>20 世纪中期的高税率也可能抑制了人们创办自己的公司。创办公司具有风险，而当风险得不到回报时，人们会选择更安全的选项。</p><p>But it wasn’t simply cause and effect. The oligopolies and high tax rates of the mid 20th century were all of a piece. Lower taxes are not just a cause of entrepreneurship, but an effect as well: the people getting rich in the mid 20th century from real estate and oil exploration lobbied for and got huge tax loopholes that made their effective tax rate much lower, and presumably if it had been more common to grow big companies by building new technology, the people doing that would have lobbied for their own loopholes as well.</p><p>但这并非简单的因果关系。20 世纪中期的寡头垄断与高税率是相辅相成的。较低的税率不仅是创业的原因，也是创业的结果：20 世纪中期靠房地产和石油勘探致富的人，通过游说获得了巨大的税收漏洞，使他们的实际税率低得多。想必，如果当时通过研发新技术发展大公司的情况更普遍，从事这类事业的人也会为自己争取税收漏洞。</p><p>[6] That’s why the people who did get rich in the mid 20th century so often got rich from oil exploration or real estate. Those were the two big areas of the economy that weren’t susceptible to consolidation.</p><p>[6] 这就是为什么 20 世纪中期真正致富的人，往往靠石油勘探或房地产 —— 这是经济中两个不易被整合的主要领域。</p><p>[7] The pure tech companies used to be called “high technology” startups. But now that startups can punch through the middle of the ice crust, we don’t need a separate name for the edges, and the term “high-tech” has a decidedly retro sound.</p><p>[7] 纯粹的科技公司过去被称为 “高科技”（high technology）初创公司。但如今，初创公司已能从 “冰层中央” 破冰而出，我们不再需要为 “边缘领域” 单独命名，“高科技” 一词也显然带有复古意味了。</p><p>[8] Higher valuations mean you either sell less stock to get a given amount of money, or get more money for a given amount of stock. The typical startup does some of each. Obviously you end up richer if you keep more stock, but you should also end up richer if you raise more money, because (a) it should make the company more successful, and (b) you should be able to last longer before the next round, or not even need one. Notice all those shoulds though. In practice a lot of money slips through them.</p><p>[8] 更高的估值意味着：要获得一定数额的资金，你要么少出售股票，要么以相同的股票份额获得更多资金。典型的初创公司会两者兼顾。显然，保留更多股票会让你更富有，但筹集更多资金理论上也会让你更富有，原因是：（a）这应能让公司更成功；（b）你能在下次融资前支撑更久，甚至可能不再需要下一轮融资。不过注意这些 “应能”—— 实际上，很多资金会在过程中流失</p><p>It might seem that the huge rounds raised by startups nowadays contradict the claim that it has become cheaper to start one. But there’s no contradiction here; the startups that raise the most are the ones doing it by choice, in order to grow faster, not the ones doing it because they need the money to survive. There’s nothing like not needing money to make people offer it to you.</p><p>如今初创公司筹集的巨额资金，似乎与 “创业成本降低” 的说法矛盾，但两者并不冲突：筹集资金最多的初创公司，是主动选择融资以加速增长，而非因生存需要被迫融资。没有什么比 “不需要钱” 更能让别人主动给你钱了。</p><p>You would think, after having been on the side of labor in its fight with capital for almost two centuries, that the far left would be happy that labor has finally prevailed. But none of them seem to be. You can almost hear them saying “No, no, not that way.”</p><p>近两个世纪以来，极左翼一直站在劳工这边与资本对抗，你可能会认为，当劳工最终占上风时，他们会感到高兴。但似乎没人高兴。你几乎能听到他们在说：“不，不，不是这样的。”</p><p>[9] IBM was created in 1911 by merging three companies, the most important of which was Herman Hollerith’s Tabulating Machine Company, founded in 1896. In 1941 its revenues were $60 million.</p><p>Hewlett-Packard’s revenues in 1964 were $125 million.</p><p>Microsoft’s revenues in 1988 were $590 million.</p><p>[9] IBM 于 1911 年由三家公司合并而成，其中最重要的是赫尔曼・霍勒里斯 1896 年创立的制表机公司。1941 年，IBM 的营收为 6000 万美元。</p><p>惠普 1964 年的营收为 1.25 亿美元。</p><p>微软 1988 年的营收为 5.9 亿美元。</p><p>注：本文的机翻水平简直垃圾的一塌糊涂，但是企鹅君不打算校正。因为任何愿意看这篇文章的人都应该去看原文也应该要能读懂原文——如果读不懂那就跳过这篇吧。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将想法转换为文字</title>
    <link href="/2025/08/02/putting-ideas-into-words/"/>
    <url>/2025/08/02/putting-ideas-into-words/</url>
    
    <content type="html"><![CDATA[<h2 id="Putting-Ideas-into-Words"><a href="#Putting-Ideas-into-Words" class="headerlink" title="Putting Ideas into Words"></a>Putting Ideas into Words</h2><p>原文链接: <a href="https://paulgraham.com/words.html">https://paulgraham.com/words.html</a></p><p>February 2022</p><p>Writing about something, even something you know well, usually shows you that you didn’t know it as well as you thought. Putting ideas into words is a severe test. The first words you choose are usually wrong; you have to rewrite sentences over and over to get them exactly right. And your ideas won’t just be imprecise, but incomplete too. Half the ideas that end up in an essay will be ones you thought of while you were writing it. Indeed, that’s why I write them.</p><p>写下某件事，即便你对它了如指掌，往往也会让你发现，你对它的了解其实没自己以为的那么深。将想法转化为文字是一场严苛的考验。你最初选择的措辞通常是错的，必须一遍遍地改写句子，才能让它们精准到位。而且，你的想法不仅会模糊不清，还会残缺不全。最终出现在文章里的想法，有一半是在写作过程中才冒出来的。事实上，这正是我写作的原因。</p><p>Once you publish something, the convention is that whatever you wrote was what you thought before you wrote it. These were your ideas, and now you’ve expressed them. But you know this isn’t true. You know that putting your ideas into words changed them. And not just the ideas you published. Presumably there were others that turned out to be too broken to fix, and those you discarded instead.</p><p>一旦发表了某篇东西，惯例会让人觉得，你写下的内容就是动笔前就想好的 —— 这些是你的想法，现在只是把它们表达出来而已。但你自己清楚并非如此。你知道，将想法转化为文字的过程改变了它们。而且不止是那些被发表的想法，想必还有些想法因为漏洞太多、无法修正而被你舍弃了。</p><p>It’s not just having to commit your ideas to specific words that makes writing so exacting. The real test is reading what you’ve written. You have to pretend to be a neutral reader who knows nothing of what’s in your head, only what you wrote. When he reads what you wrote, does it seem correct? Does it seem complete? If you make an effort, you can read your writing as if you were a complete stranger, and when you do the news is usually bad. It takes me many cycles before I can get an essay past the stranger. But the stranger is rational, so you always can, if you ask him what he needs. If he’s not satisfied because you failed to mention x or didn’t qualify some sentence sufficiently, then you mention x or add more qualifications. Happy now? It may cost you some nice sentences, but you have to resign yourself to that. You just have to make them as good as you can and still satisfy the stranger.</p><p>写作之所以如此费心，不光是因为必须把想法落实到具体的文字上。真正的考验在于阅读自己写的东西。你得假装自己是个中立的读者，对你脑子里的想法一无所知，只看你写出来的文字。当 “他” 读你写的内容时，会觉得它正确吗？完整吗？只要肯努力，你就能像一个完全陌生的人那样读自己的作品 —— 而结果往往不尽如人意。我通常要改很多遍，才能让一篇文章通过 “陌生人” 的检验。但这个 “陌生人” 是理性的，只要你问他需要什么，总能让他满意。如果他因为你没提到 x，或者某个句子不够严谨而不满，那你就补上 x，再加些限定。这下满意了吗？这可能会让你删掉一些漂亮的句子，但你得接受这一点。你只能在满足 “陌生人” 的前提下，尽可能把句子写好。</p><p>This much, I assume, won’t be that controversial. I think it will accord with the experience of anyone who has tried to write about anything nontrivial. There may exist people whose thoughts are so perfectly formed that they just flow straight into words. But I’ve never known anyone who could do this, and if I met someone who said they could, it would seem evidence of their limitations rather than their ability. Indeed, this is a trope in movies: the guy who claims to have a plan for doing some difficult thing, and who when questioned further, taps his head and says “It’s all up here.” Everyone watching the movie knows what that means. At best the plan is vague and incomplete. Very likely there’s some undiscovered flaw that invalidates it completely. At best it’s a plan for a plan.</p><p>我觉得这点没什么争议，任何尝试过写点有分量的东西的人，应该都有过类似的体验。或许存在这样的人：他们的想法完美成型，能直接流畅地转化为文字。但我从没见过这样的人，要是有人说自己能做到，在我看来，这更能说明他们的局限，而非能力。电影里常有这样的桥段：一个人声称有个计划能完成某件难事，别人追问细节时，他拍着脑袋说 “都在这儿呢”。每个看电影的人都明白这意味着什么：往好里说，这个计划模糊又残缺；往坏里说，很可能存在某个未被发现的漏洞，让整个计划彻底失效。往最好了说，这只是个 “计划的计划”。</p><p>In precisely defined domains it’s possible to form complete ideas in your head. People can play chess in their heads, for example. And mathematicians can do some amount of math in their heads, though they don’t seem to feel sure of a proof over a certain length till they write it down. But this only seems possible with ideas you can express in a formal language. [1] Arguably what such people are doing is putting ideas into words in their heads. I can to some extent write essays in my head. I’ll sometimes think of a paragraph while walking or lying in bed that survives nearly unchanged in the final version. But really I’m writing when I do this. I’m doing the mental part of writing; my fingers just aren’t moving as I do it. [2]</p><p>在定义精确的领域里，人或许能在脑子里形成完整的想法。比如，有人能在脑子里下象棋；数学家也能在脑子里做些数学演算，但超过一定长度的证明，他们似乎只有写下来才会觉得踏实。但这种情况似乎只限于能用形式语言表达的想法。[1] 可以说，这些人其实是在脑子里把想法转化为文字。我在某种程度上也能在脑子里 “写” 文章 —— 有时走路或躺在床上时想到的段落，在最终版本里几乎没什么改动。但其实，我这么做的时候就是在写作，只是进行的是写作的脑力活动，手指没动而已。[2]</p><p>You can know a great deal about something without writing about it. Can you ever know so much that you wouldn’t learn more from trying to explain what you know? I don’t think so. I’ve written about at least two subjects I know well — Lisp hacking and startups — and in both cases I learned a lot from writing about them. In both cases there were things I didn’t consciously realize till I had to explain them. And I don’t think my experience was anomalous. A great deal of knowledge is unconscious, and experts have if anything a higher proportion of unconscious knowledge than beginners.</p><p>不写下来，你也能对某件事了解很多。但你能了解到那种程度吗 —— 以至于试着解释自己所知时，不会再有新发现？我觉得不能。我写过至少两个自己很熟悉的话题：Lisp 编程和创业，而两次写作都让我有了很多新认识。很多东西都是在不得不解释的时候，我才下意识地意识到。我觉得我的经历并非个例。很多知识是无意识的，而且专家的无意识知识占比或许比新手还高。</p><p>I’m not saying that writing is the best way to explore all ideas. If you have ideas about architecture, presumably the best way to explore them is to build actual buildings. What I’m saying is that however much you learn from exploring ideas in other ways, you’ll still learn new things from writing about them.</p><p>我不是说写作是探索所有想法的最佳方式。比如，如果你有关于建筑的想法，最佳探索方式或许是去盖实际的房子。我想说的是，无论你通过其他方式探索想法时学到了多少，写下来时仍会有新发现。</p><p>Putting ideas into words doesn’t have to mean writing, of course. You can also do it the old way, by talking. But in my experience, writing is the stricter test. You have to commit to a single, optimal sequence of words. Less can go unsaid when you don’t have tone of voice to carry meaning. And you can focus in a way that would seem excessive in conversation. I’ll often spend 2 weeks on an essay and reread drafts 50 times. If you did that in conversation it would seem evidence of some kind of mental disorder. If you’re lazy, of course, writing and talking are equally useless. But if you want to push yourself to get things right, writing is the steeper hill. [3]</p><p>当然，将想法转化为文字不一定非得是写作，也可以用古老的方式 —— 交谈。但以我的经验，写作是更严苛的考验。你必须选定一个单一、最优的文字序列；没有语气辅助传达意思时，没说出口的东西就更站不住脚；而且你能专注到在交谈中显得过分的程度。我常常花两周写一篇文章，重读草稿 50 遍。要是在交谈中这么做，大概会被当成精神有问题。当然，如果你偷懒，写作和交谈都一样没用。但如果你想逼自己把事情弄对，写作就是更难爬的坡。[3]</p><p>The reason I’ve spent so long establishing this rather obvious point is that it leads to another that many people will find shocking. If writing down your ideas always makes them more precise and more complete, then no one who hasn’t written about a topic has fully formed ideas about it. And someone who never writes has no fully formed ideas about anything nontrivial.</p><p>我花这么多篇幅讲这个看似显而易见的点，是因为它能引出一个很多人会觉得震惊的结论：如果写下想法总能让它们更精确、更完整，那么，没写过某个话题的人，对这个话题就不会有完全成型的想法；而从不写作的人，对任何有分量的事情都不会有完全成型的想法。</p><p>It feels to them as if they do, especially if they’re not in the habit of critically examining their own thinking. Ideas can feel complete. It’s only when you try to put them into words that you discover they’re not. So if you never subject your ideas to that test, you’ll not only never have fully formed ideas, but also never realize it.</p><p>对这些人来说，他们似乎觉得自己有 —— 尤其是如果他们不习惯批判性审视自己的思考的话。想法可能会给人一种 “完整” 的感觉，但只有当你试着把它们转化为文字时，才会发现并非如此。所以，如果你从不拿这个标准检验自己的想法，不仅永远不会有完全成型的想法，还永远意识不到这一点。</p><p>Putting ideas into words is certainly no guarantee that they’ll be right. Far from it. But though it’s not a sufficient condition, it is a necessary one.</p><p>将想法转化为文字当然不能保证它们是对的 —— 远非如此。但尽管这不是充分条件，却是必要条件。</p><p>Notes</p><p>[1] Machinery and circuits are formal languages.</p><p>[1] 机械和电路也是形式语言。</p><p>[2] I thought of this sentence as I was walking down the street in Palo Alto.</p><p>[2] 这句话是我在帕洛阿尔托的街上走路时想到的。</p><p>[3] There are two senses of talking to someone: a strict sense in which the conversation is verbal, and a more general sense in which it can take any form, including writing. In the limit case (e.g. Seneca’s letters), conversation in the latter sense becomes essay writing.</p><p>[3] “和人交谈” 有两种含义：狭义上指口头对话；广义上可以是任何形式，包括写作。在极端情况下（比如塞涅卡的书信），广义的交谈就成了散文写作。</p><p>It can be very useful to talk (in either sense) with other people as you’re writing something. But a verbal conversation will never be more exacting than when you’re talking about something you’re writing.</p><p>写作时和别人交谈（无论哪种意义上的）可能非常有用，但口头对话的严苛程度，永远比不上谈论自己正在写的东西时。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最佳散文</title>
    <link href="/2025/08/01/the-best-essay/"/>
    <url>/2025/08/01/the-best-essay/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Best-Essay"><a href="#The-Best-Essay" class="headerlink" title="The Best Essay"></a>The Best Essay</h2><p>原文链接: <a href="https://paulgraham.com/best.html">https://paulgraham.com/best.html</a></p><p>March 2024</p><p>Despite its title this isn’t meant to be the best essay. My goal here is to figure out what the best essay would be like.</p><p>尽管标题如此，这篇文章并非要成为 “最佳散文”。我的目标是弄清楚，最佳散文应该是什么样子的。</p><p>It would be well-written, but you can write well about any topic. What made it special would be what it was about.</p><p>它的文笔一定很好，但文笔好的文章可以写任何主题。让它脱颖而出的，是它所写的内容。</p><p>Obviously some topics would be better than others. It probably wouldn’t be about this year’s lipstick colors. But it wouldn’t be vaporous talk about elevated themes either. A good essay has to be surprising. It has to tell people something they don’t already know.</p><p>显然，有些主题本身就更有价值。它大概不会写今年的口红流行色，但也不会是对 “崇高主题” 的空洞空谈。一篇好散文必须令人惊喜，必须告诉人们一些他们不知道的事。</p><p>The best essay would be on the most important topic you could tell people something surprising about.</p><p>最佳散文的主题，应该是 “最重要且能带给人惊喜” 的 —— 既重要，又能说出些新鲜东西。</p><p>That may sound obvious, but it has some unexpected consequences. One is that science enters the picture like an elephant stepping into a rowboat. For example, Darwin first described the idea of natural selection in an essay written in 1844. Talk about an important topic you could tell people something surprising about. If that’s the test of a great essay, this was surely the best one written in 1844. And indeed, the best possible essay at any given time would usually be one describing the most important scientific or technological discovery it was possible to make. [1]</p><p>这听起来似乎显而易见，但细想之下会得出一些意外结论。其一，科学会像一头大象闯进划艇般闯入视野。比如，达尔文 1844 年写的一篇散文首次阐述了自然选择的概念。想想看，“重要且能带来惊喜”，若以此为标准，那篇文章无疑是 1844 年最好的散文。事实上，在任何时代，最佳散文通常都在描述当时最重大的科学或技术发现。[1]</p><p>Another unexpected consequence: I imagined when I started writing this that the best essay would be fairly timeless — that the best essay you could write in 1844 would be much the same as the best one you could write now. But in fact the opposite seems to be true. It might be true that the best painting would be timeless in this sense. But it wouldn’t be impressive to write an essay introducing natural selection now. The best essay now would be one describing a great discovery we didn’t yet know about.</p><p>另一个意外结论是：我一开始以为，最佳散文应该是相当 “永恒” 的 ——1844 年的最佳散文和现在的最佳散文应该差不多。但事实似乎恰恰相反。最佳画作或许确实能如此 “永恒”，但现在再写一篇介绍自然选择的散文，就没什么冲击力了。如今的最佳散文，应该是描述一个我们尚未知晓的重大发现。</p><p>If the question of how to write the best possible essay reduces to the question of how to make great discoveries, then I started with the wrong question. Perhaps what this exercise shows is that we shouldn’t waste our time writing essays but instead focus on making discoveries in some specific domain. But I’m interested in essays and what can be done with them, so I want to see if there’s some other question I could have asked.</p><p>如果 “如何写出最佳散文” 的问题，最终归结为 “如何做出重大发现”，那我一开始就问错了问题。或许这个思考告诉我们：不该浪费时间写散文，而该专注于在某个特定领域做出发现。但我对散文及其可能性很感兴趣，所以想看看有没有其他值得问的问题。</p><p>There is, and on the face of it, it seems almost identical to the one I started with. Instead of asking what would the best essay be? I should have asked how do you write essays well? Though these seem only phrasing apart, their answers diverge. The answer to the first question, as we’ve seen, isn’t really about essay writing. The second question forces it to be.</p><p>还真有一个，表面上看它和我最初的问题几乎一样。与其问 “最佳散文是什么样的”，不如问 “如何写好散文”。这两个问题看似只是措辞不同，答案却大相径庭。如前所述，第一个问题的答案其实与 “写散文” 本身无关；而第二个问题，才迫使我们聚焦于写作本身。</p><p>Writing essays, at its best, is a way of discovering ideas. How do you do that well? How do you discover by writing?</p><p>写散文的精髓，是一种发现思想的方式。如何做好这件事？如何通过写作发现思想？</p><p>An essay should ordinarily start with what I’m going to call a question, though I mean this in a very general sense: it doesn’t have to be a question grammatically, just something that acts like one in the sense that it spurs some response.</p><p>一篇散文通常始于一个我称之为 “问题” 的东西 —— 但我对 “问题” 的定义很宽泛：它不一定是语法意义上的问句，只要能引发某种回应，起到类似问题的作用就行。</p><p>How do you get this initial question? It probably won’t work to choose some important-sounding topic at random and go at it. Professional traders won’t even trade unless they have what they call an edge — a convincing story about why in some class of trades they’ll win more than they lose. Similarly, you shouldn’t attack a topic unless you have a way in — some new insight about it or way of approaching it.</p><p>如何找到这个初始问题？随便选一个听起来重要的主题就动笔，大概是行不通的。专业交易者不会轻易出手，除非他们有 “优势”—— 一个能解释 “为什么在某类交易中赢多输少” 的合理逻辑。同理，写一个主题前，你得有 “切入点”：对它有新的洞见，或有新的探讨角度。</p><p>You don’t need to have a complete thesis; you just need some kind of gap you can explore. In fact, merely having questions about something other people take for granted can be edge enough.</p><p>你不需要有完整的论点，只需有一个可供探索的 “缺口”。事实上，对别人习以为常的事抱有疑问，本身就可能是一种优势。</p><p>If you come across a question that’s sufficiently puzzling, it could be worth exploring even if it doesn’t seem very momentous. Many an important discovery has been made by pulling on a thread that seemed insignificant at first. How can they all be finches? [2]</p><p>如果遇到一个足够令人困惑的问题，即便它看似不重大，也值得探索。许多重要发现都始于一根看似无关紧要的 “线头”。比如，“它们怎么可能全是雀类？”[2]</p><p>Once you’ve got a question, then what? You start thinking out loud about it. Not literally out loud, but you commit to a specific string of words in response, as you would if you were talking. This initial response is usually mistaken or incomplete. Writing converts your ideas from vague to bad. But that’s a step forward, because once you can see the brokenness, you can fix it.</p><p>有了问题之后呢？你开始 “大声” 思考它 —— 不是真的出声，而是像说话一样，用一串具体的文字回应它。这个初始回应通常是错误或不完整的。写作能把模糊的想法变成 “糟糕的具体文字”，但这是进步的一步：一旦看到漏洞，就能修补它。</p><p>Perhaps beginning writers are alarmed at the thought of starting with something mistaken or incomplete, but you shouldn’t be, because this is why essay writing works. Forcing yourself to commit to some specific string of words gives you a starting point, and if it’s wrong, you’ll see that when you reread it. At least half of essay writing is rereading what you’ve written and asking is this correct and complete? You have to be very strict when rereading, not just because you want to keep yourself honest, but because a gap between your response and the truth is often a sign of new ideas to be discovered.</p><p>或许初学写作的人会害怕从错误或不完整的内容开始，但不必如此 —— 这正是散文写作的意义所在。强迫自己写下具体的文字，就能获得一个起点；如果它错了，重读时你会发现。散文写作至少有一半的工作是重读已写内容，问自己 “这准确吗？完整吗？” 重读时必须严格，不仅是为了诚实，更因为 “你的回应与真相的差距” 往往藏着新的思想。</p><p>The prize for being strict with what you’ve written is not just refinement. When you take a roughly correct answer and try to make it exactly right, sometimes you find that you can’t, and that the reason is that you were depending on a false assumption. And when you discard it, the answer turns out to be completely different. [3]</p><p>对文字严格要求的回报不止是精进。当你试图把一个大致正确的答案打磨得完全正确时，有时会发现做不到 —— 因为你依赖了一个错误的假设。抛弃这个假设后，答案可能会完全不同。[3]</p><p>Ideally the response to a question is two things: the first step in a process that converges on the truth, and a source of additional questions (in my very general sense of the word). So the process continues recursively, as response spurs response. [4]</p><p>理想情况下，对问题的回应要满足两点：既是逐步接近真相的第一步，又是新问题（按我宽泛的定义）的来源。于是这个过程会递归进行，一个回应引发另一个回应。[4]</p><p>Usually there are several possible responses to a question, which means you’re traversing a tree. But essays are linear, not tree-shaped, which means you have to choose one branch to follow at each point. How do you choose? Usually you should follow whichever offers the greatest combination of generality and novelty. I don’t consciously rank branches this way; I just follow whichever seems most exciting; but generality and novelty are what make a branch exciting. [5]</p><p>一个问题通常有多种可能的回应，这意味着你在遍历一棵 “思想树”。但散文是线性的，不是树状的，所以每个节点你都得选一个分支走。怎么选？通常该选 “普遍性” 和 “新奇性” 结合得最好的那个。我不会刻意给分支排序，只是跟着最 “令人兴奋” 的那个走 —— 而普遍性和新奇性正是让分支令人兴奋的原因。[5]</p><p>If you’re willing to do a lot of rewriting, you don’t have to guess right. You can follow a branch and see how it turns out, and if it isn’t good enough, cut it and backtrack. I do this all the time. In this essay I’ve already cut a 17-paragraph subtree, in addition to countless shorter ones. Maybe I’ll reattach it at the end, or boil it down to a footnote, or spin it off as its own essay; we’ll see. [6]</p><p>如果愿意多修改，一开始选错也没关系。你可以沿着一个分支走，看看结果如何；如果不够好，就删掉它，退回重选。我经常这么做。写这篇散文时，我已经删掉了一个 17 段的子分支，还有无数更短的段落。或许之后会把其中 5 段接回来，或精简成脚注，或扩展成另一篇散文 —— 再说吧。[6]</p><p>In general you want to be quick to cut. One of the most dangerous temptations in writing (and in software and painting) is to keep something that isn’t right, just because it contains a few good bits or cost you a lot of effort.</p><p>总的来说，要果断删减。写作（以及软件开发、绘画）中最危险的诱惑之一，是保留不合适的内容，只因为其中有几句好话，或花了很多功夫。</p><p>The most surprising new question being thrown off at this point is does it really matter what the initial question is? If the space of ideas is highly connected, it shouldn’t, because you should be able to get from any question to the most valuable ones in a few hops. And we see evidence that it’s highly connected in the way, for example, that people who are obsessed with some topic can turn any conversation toward it. But that only works if you know where you want to go, and you don’t in an essay. That’s the whole point. You don’t want to be the obsessive conversationalist, or all your essays will be about the same thing. [7]</p><p>此刻浮现的最令人惊讶的新问题是：“初始问题真的重要吗？” 如果思想领域是高度关联的，那它就不重要 —— 因为从任何问题出发，几步之内都能抵达最有价值的问题。有证据支持这一点：比如，痴迷某个主题的人能把任何对话引向它。但这只在你知道目的地时才有用，而散文写作的关键是 “你不知道目的地”。你不想成为那个 “话题绑架者”，否则所有散文都会千篇一律。[7]</p><p>The other reason the initial question matters is that you usually feel somewhat obliged to stick to it. I don’t think about this when I decide which branch to follow. I just follow novelty and generality. Sticking to the question is enforced later, when I notice I’ve wandered too far and have to backtrack. But I think this is the optimal solution. You don’t want the hunt for novelty and generality to be constrained in the moment. Go with it and see what you get. [8]</p><p>初始问题重要的另一个原因是，你通常会觉得有点 “义务” 要围绕它写。选分支时我不会想这个，只是跟着新奇性和普遍性走。但后来发现偏离太远时，就得退回 —— 这其实是最优解。不必在当下限制对新奇性和普遍性的追求，先跟着走，看看会得到什么。[8]</p><p>Since the initial question does constrain you, in the best case it sets an upper bound on the quality of essay you’ll write. If you do as well as you possibly can on the chain of thoughts that follow from the initial question, the initial question itself is the only place where there’s room for variation.</p><p>既然初始问题会限制你，那么在理想情况下，它决定了散文质量的上限。如果从初始问题延伸出的思路都做到了极致，那么初始问题本身就是唯一能产生差异的地方。</p><p>It would be a mistake to let this make you too conservative though, because you can’t predict where a question will lead. Not if you’re doing things right, because doing things right means making discoveries, and by definition you can’t predict those. So the way to respond to this situation is not to be cautious about which initial question you choose, but to write a lot of essays. Essays are for taking risks.</p><p>但也不该因此变得太保守，因为你无法预测一个问题会引向何方。如果写作得当，就必然会有发现 —— 而发现的定义就是 “不可预测”。所以面对这种情况，不该谨慎选择初始问题，而该多写散文。散文就是用来冒险的。</p><p>Almost any question can get you a good essay. Indeed, it took some effort to think of a sufficiently unpromising topic in the third paragraph, because any essayist’s first impulse on hearing that the best essay couldn’t be about x would be to try to write it. But if most questions yield good essays, only some yield great ones.</p><p>几乎任何问题都能写出好散文。事实上，我在第三段费了点劲才想到一个 “没前途” 的主题 —— 因为任何散文家听到 “最佳散文不能写 x” 时，第一反应都是想试试写 x。但如果说大多数问题能写出好散文，那只有少数能写出伟大的散文。</p><p>Can we predict which questions will yield great essays? Considering how long I’ve been writing essays, it’s alarming how novel that question feels.</p><p>我们能预测哪些问题能写出伟大的散文吗？考虑到我写散文这么久了，这个问题竟让我觉得如此新奇，实在令人不安。</p><p>One thing I like in an initial question is outrageousness. I love questions that seem naughty in some way — for example, by seeming counterintuitive or overambitious or heterodox. Ideally all three. This essay is an example. Writing about the best essay implies there is such a thing, which pseudo-intellectuals will dismiss as reductive, though it follows necessarily from the possibility of one essay being better than another. And thinking about how to do something so ambitious is close enough to doing it that it holds your attention.</p><p>我喜欢的初始问题要有 “出格感”。我热爱那些看似 “无礼” 的问题 —— 比如反直觉、野心过大，或离经叛道，最好三者兼具。这篇散文就是个例子。写 “最佳散文” 意味着默认存在 “最佳”，伪知识分子会斥之为 “简化”，但既然散文有优劣之分，“最佳” 就必然存在。思考如何完成如此宏大的事，本身就接近 “做这件事”，足以抓住注意力。</p><p>I like to start an essay with a gleam in my eye. This could be just a taste of mine, but there’s one aspect of it that probably isn’t: to write a really good essay on some topic, you have to be interested in it. A good writer can write well about anything, but to stretch for the novel insights that are the raison d’etre of the essay, you have to care.</p><p>我喜欢带着 “一丝狡黠” 开始写散文。这可能只是我的个人偏好，但有一点大概不是：要写一篇关于某个主题的好散文，你必须对它感兴趣。好作家能写好任何主题，但要挖掘出散文的核心 —— 新奇的洞见，你必须在乎这个主题。</p><p>If caring about it is one of the criteria for a good initial question, then the optimal question varies from person to person. It also means you’re more likely to write great essays if you care about a lot of different things. The more curious you are, the greater the probable overlap between the set of things you’re curious about and the set of topics that yield great essays.</p><p>如果 “在乎” 是好的初始问题的标准之一，那么 “最优问题” 就因人而异。这也意味着，如果你对很多不同的事都感兴趣，就更可能写出伟大的散文。好奇心越强，你感兴趣的事与 “能写出伟大散文的主题” 的重合概率就越高。</p><p>What other qualities would a great initial question have? It’s probably good if it has implications in a lot of different areas. And I find it’s a good sign if it’s one that people think has already been thoroughly explored. But the truth is that I’ve barely thought about how to choose initial questions, because I rarely do it. I rarely choose what to write about; I just start thinking about something, and sometimes it turns into an essay.</p><p>伟大的初始问题还该有什么特质？它最好能在多个领域产生影响。我发现，如果一个问题被认为 “已被彻底探索过”，反而是个好迹象。但说实话，我几乎没思考过如何选择初始问题 —— 因为我很少主动选。我很少决定 “要写什么”，只是开始思考某件事，有时它就变成了一篇散文。</p><p>Am I going to stop writing essays about whatever I happen to be thinking about and instead start working my way through some systematically generated list of topics? That doesn’t sound like much fun. And yet I want to write good essays, and if the initial question matters, I should care about it.</p><p>我会停止写 “碰巧想到的事”，转而按某个系统生成的主题列表来写吗？这听起来没什么意思。但我想写好散文，如果初始问题重要，我就该在乎它。</p><p>Perhaps the answer is to go one step earlier: to write about whatever pops into your head, but try to ensure that what pops into your head is good. Indeed, now that I think about it, this has to be the answer, because a mere list of topics wouldn’t be any use if you didn’t have edge with any of them. To start writing an essay, you need a topic plus some initial insight about it, and you can’t generate those systematically. If only. [9]</p><p>或许答案是再往前一步：写任何冒出来的想法，但努力让冒出来的想法是好的。其实仔细想想，这必然是答案 —— 因为如果对列表上的主题没有 “切入点”，列表就毫无用处。写散文需要 “主题 + 初始洞见”，而这两者无法系统生成。要是能生成就好了。[9]</p><p>You can probably cause yourself to have more of them, though. The quality of the ideas that come out of your head depends on what goes in, and you can improve that in two dimensions, breadth and depth.</p><p>但你或许能让自己产生更多这样的想法。脑子里冒出的想法质量，取决于输入的内容，而你可以从两个维度提升输入：广度和深度。</p><p>You can’t learn everything, so getting breadth implies learning about topics that are very different from one another. When I tell people about my book-buying trips to Hay and they ask what I buy books about, I usually feel a bit sheepish answering, because the topics seem like a laundry list of unrelated subjects. But perhaps that’s actually optimal in this business.</p><p>你不可能什么都学，所以 “广度” 意味着学差异很大的主题。我跟人说我去海伊镇买书的经历，他们问我买什么主题的书时，我总有点不好意思 —— 那些主题像一堆不相关的杂物。但或许在写作这行，这恰恰是最优解。</p><p>You can also get ideas by talking to people, by doing and building things, and by going places and seeing things. I don’t think it’s important to talk to new people so much as the sort of people who make you have new ideas. I get more new ideas after talking for an afternoon with Robert Morris than from talking to 20 new smart people. I know because that’s what a block of office hours at Y Combinator consists of.</p><p>你也能通过与人交谈、做事、造东西、去不同地方看不同事物获得想法。我觉得重要的不是 “和新朋友聊”，而是 “和能让你产生新想法的人聊”。和罗伯特・莫里斯聊一下午，比和 20 个聪明的新朋友聊，能给我更多新想法。我知道这一点，因为 Y Combinator 的办公时间就是这样。</p><p>While breadth comes from reading and talking and seeing, depth comes from doing. The way to really learn about some domain is to have to solve problems in it. Though this could take the form of writing, I suspect that to be a good essayist you also have to do, or have done, some other kind of work. That may not be true for most other fields, but essay writing is different. You could spend half your time working on something else and be net ahead, so long as it was hard.</p><p>广度来自阅读、交谈和观察，深度则来自实践。真正了解一个领域的方式，是必须在其中解决问题。虽然写作本身也能算一种实践，但我怀疑，要成为好的散文家，还得做（或做过）其他类型的工作。这对其他领域可能不适用，但散文写作不同。你可以花一半时间做别的事，只要那件事有难度，最终反而可能更擅长写作。</p><p>I’m not proposing that as a recipe so much as an encouragement to those already doing it. If you’ve spent all your life so far working on other things, you’re already halfway there. Though of course to be good at writing you have to like it, and if you like writing you’d probably have spent at least some time doing it.</p><p>我不是在提供一个 “配方”，更像是在鼓励已经这么做的人。如果你这辈子大部分时间都在做其他事，其实已经成功了一半。当然，要擅长写作，你得喜欢写作；如果喜欢，你大概至少花过一些时间写。</p><p>Everything I’ve said about initial questions applies also to the questions you encounter in writing the essay. They’re the same thing; every subtree of an essay is usually a shorter essay, just as every subtree of a Calder mobile is a smaller mobile. So any technique that gets you good initial questions also gets you good whole essays.</p><p>关于初始问题的所有说法，也适用于写作中遇到的其他问题。它们本质上是一回事：散文的每个子分支通常都是一篇更短的散文，就像考尔德的动态雕塑，每个子结构都是一个更小的雕塑。所以，能让你得到好的初始问题的技巧，也能让你写出好的完整散文。</p><p>At some point the cycle of question and response reaches what feels like a natural end. Which is a little suspicious; shouldn’t every answer suggest more questions? I think what happens is that you start to feel sated. Once you’ve covered enough interesting ground, you start to lose your appetite for new questions. Which is just as well, because the reader is probably feeling sated too. And it’s not lazy to stop asking questions, because you could instead be asking the initial question of a new essay.</p><p>某个时刻，“提问 - 回应” 的循环会抵达一个 “自然终点”。这有点可疑 —— 难道每个答案不该引出更多问题吗？我想，原因是你开始 “满足” 了。探索了足够多有趣的领域后，对新问题的 “胃口” 会下降。这也无妨，因为读者可能也觉得满足了。停止提问不是懒惰，因为你可以转而开始一篇新散文的初始问题。</p><p>That’s the ultimate source of drag on the connectedness of ideas: the discoveries you make along the way. If you discover enough starting from question A, you’ll never make it to question B. Though if you keep writing essays you’ll gradually fix this problem by burning off such discoveries. So bizarrely enough, writing lots of essays makes it as if the space of ideas were more highly connected.</p><p>思想关联性的最终 “阻力” 来自途中的发现：如果从问题 A 出发发现了足够多东西，你可能永远不会抵达问题 B。但如果持续写散文，你会逐渐 “消耗” 这些发现，从而解决这个问题。所以说来也怪，多写散文会让思想领域显得 “更关联”。</p><p>When a subtree comes to an end, you can do one of two things. You can either stop, or pull the Cubist trick of laying separate subtrees end to end by returning to a question you skipped earlier. Usually it requires some sleight of hand to make the essay flow continuously at this point, but not this time. This time I actually need an example of the phenomenon. For example, we discovered earlier that the best possible essay wouldn’t usually be timeless in the way the best painting would. This seems surprising enough to be worth investigating further.</p><p>当一个子分支结束时，你有两个选择：要么停笔，要么玩个 “立体主义把戏”—— 回到之前跳过的问题，把不同子分支串起来。通常这需要些 “手法” 让散文流畅衔接，但这次不用。这次我正好需要一个例子：比如我们之前发现，最佳散文通常不会像最佳画作那样 “永恒”。这一点足够令人惊讶，值得深入探讨。</p><p>There are two senses in which an essay can be timeless: to be about a matter of permanent importance, and always to have the same effect on readers. With art these two senses blend together. Art that looked beautiful to the ancient Greeks still looks beautiful to us. But with essays the two senses diverge, because essays teach, and you can’t teach people something they already know. Natural selection is certainly a matter of permanent importance, but an essay explaining it couldn’t have the same effect on us that it would have had on Darwin’s contemporaries, precisely because his ideas were so successful that everyone already knows about them. [10]</p><p>散文的 “永恒” 有两种含义：写的是永久重要的事；对读者的影响永远不变。艺术中这两种含义是融合的 —— 古希腊人觉得美的雕塑，我们现在也觉得美。但散文不同，因为散文是 “教” 人的，你没法教别人已经知道的事。自然选择无疑是永久重要的，但解释它的散文对我们的影响，不可能和对达尔文同时代人的影响一样 —— 恰恰因为他的思想太成功，现在每个人都知道了。[10]</p><p>I imagined when I started writing this that the best possible essay would be timeless in the stricter, evergreen sense: that it would contain some deep, timeless wisdom that would appeal equally to Aristotle and Feynman. That doesn’t seem to be true. But if the best possible essay wouldn’t usually be timeless in this stricter sense, what would it take to write essays that were?</p><p>我一开始以为，最佳散文应该是 “严格永恒” 的 —— 包含深刻、永恒的智慧，能同时打动亚里士多德和费曼。但事实似乎并非如此。如果最佳散文通常不会是这种 “严格永恒” 的，那要写出 “永恒的散文” 该怎么做？</p><p>The answer to that turns out to be very strange: to be the evergreen kind of timeless, an essay has to be ineffective, in the sense that its discoveries aren’t assimilated into our shared culture. Otherwise there will be nothing new in it for the second generation of readers. If you want to surprise readers not just now but in the future as well, you have to write essays that won’t stick — essays that, no matter how good they are, won’t become part of what people in the future learn before they read them. [11]</p><p>答案很奇怪：要成为 “常青” 的永恒散文，它必须是 “无效” 的 —— 它的发现没有被融入我们的共同文化。否则，第二代读者就不会从中看到新东西。如果你想不仅现在能让读者惊讶，未来也能，就得写 “留不下痕迹” 的散文 —— 无论多好，都不会成为未来读者在阅读前就已了解的内容。[11]</p><p>I can imagine several ways to do that. One would be to write about things people never learn. For example, it’s a long-established pattern for ambitious people to chase after various types of prizes, and only later, perhaps too late, to realize that some of them weren’t worth as much as they thought. If you write about that, you can be confident of a conveyor belt of future readers to be surprised by it.</p><p>我能想到几种实现方式。一种是写人们永远学不会的事。比如，有个长久存在的模式：有野心的人追逐各种 “奖励”，后来（或许太晚）才发现其中一些不值那么多。写这个主题，你可以确定未来会有源源不断的读者被它惊讶到。</p><p>Ditto if you write about the tendency of the inexperienced to overdo things — of young engineers to produce overcomplicated solutions, for example. There are some kinds of mistakes people never learn to avoid except by making them. Any of those should be a timeless topic.</p><p>同理，写 “缺乏经验的人容易过度做事”—— 比如年轻工程师搞出过于复杂的解决方案。有些错误，人们只有亲身犯过才会避免。这类主题都能是永恒的。</p><p>Sometimes when we’re slow to grasp things it’s not just because we’re obtuse or in denial but because we’ve been deliberately lied to. There are a lot of things adults lie to kids about, and when you reach adulthood, they don’t take you aside and hand you a list of them. They don’t remember which lies they told you, and most were implicit anyway. So contradicting such lies will be a source of surprises for as long as adults keep telling them.</p><p>有时我们迟迟无法理解某事，不仅因为迟钝或否认，还因为被故意欺骗。成年人对孩子撒了很多谎，等孩子成年后，他们不会拉你到一边，给你列一张 “谎言清单”。他们不记得撒过哪些谎，而且大多数谎言是暗示性的。所以，只要成年人还在撒谎，反驳这些谎言就会一直是惊喜的来源。</p><p>Sometimes it’s systems that lie to you. For example, the educational systems in most countries train you to win by hacking the test. But that’s not how you win at the most important real-world tests, and after decades of training, this is hard for new arrivals in the real world to grasp. Helping them overcome such institutional lies will work as long as the institutions remain broken. [12]</p><p>有时是 “系统” 在撒谎。比如，大多数国家的教育系统训练你 “钻考试空子” 取胜。但这不是在最重要的现实考验中取胜的方式，而经过几十年的训练，刚进入现实世界的人很难明白这一点。只要这些系统还在崩坏，帮助人们识破这种 “体制性谎言” 就会一直有效。[12]</p><p>Another recipe for timelessness is to write about things readers already know, but in much more detail than can be transmitted culturally. “Everyone knows,” for example, that it can be rewarding to have kids. But till you have them you don’t know precisely what forms that takes, and even then much of what you know you may never have put into words.</p><p>另一种 “永恒配方” 是写读者已经知道的事，但细节丰富到无法被文化传播。比如，“大家都知道” 养孩子能带来回报，但没养过的人不知道具体是什么形式；就算养过，很多感受也难以用语言表达。</p><p>I’ve written about all these kinds of topics. But I didn’t do it in a deliberate attempt to write essays that were timeless in the stricter sense. And indeed, the fact that this depends on one’s ideas not sticking suggests that it’s not worth making a deliberate attempt to. You should write about topics of timeless importance, yes, but if you do such a good job that your conclusions stick and future generations find your essay obvious instead of novel, so much the better. You’ve crossed into Darwin territory.</p><p>这些主题我都写过，但并非刻意为了写出 “严格永恒” 的散文。事实上，“永恒” 依赖于 “思想留不下痕迹”，这意味着刻意追求它没什么意义。你当然要写永恒重要的主题，但如果写得太好，结论被广泛接受，未来读者觉得你的散文 “显而易见” 而非 “新奇”，那更好 —— 你已经进入了达尔文的领域。</p><p>Writing about topics of timeless importance is an instance of something even more general, though: breadth of applicability. And there are more kinds of breadth than chronological — applying to lots of different fields, for example. So breadth is the ultimate aim.</p><p>写永恒重要的主题，其实是更普遍原则的一个例子：适用性的广度。除了时间上的广度，还有其他类型的广度 —— 比如适用于多个领域。所以，“广度” 才是最终目标。</p><p>I already aim for it. Breadth and novelty are the two things I’m always chasing. But I’m glad I understand where timelessness fits.</p><p>我一直追求广度和新奇性。但现在明白了 “永恒” 的位置，我很高兴。</p><p>I understand better where a lot of things fit now. This essay has been a kind of tour of essay writing. I started out hoping to get advice about topics; if you assume good writing, the only thing left to differentiate the best essay is its topic. And I did get advice about topics: discover natural selection. Yeah, that would be nice. But when you step back and ask what’s the best you can do short of making some great discovery like that, the answer turns out to be about procedure. Ultimately the quality of an essay is a function of the ideas discovered in it, and the way you get them is by casting a wide net for questions and then being very exacting with the answers.</p><p>现在我更明白很多事的位置了。这篇散文算是一次 “散文写作漫游”。我一开始想得到关于 “主题” 的建议：如果假设文笔好，那么区分最佳散文的就只有主题。我确实得到了建议：去发现自然选择。嗯，这当然好。但退一步想，在做出那样的重大发现之前，能做到的最佳状态是什么？答案是 “过程”。最终，散文的质量取决于其中发现的思想，而获取思想的方式是：广泛捕捉问题，然后对答案极其苛刻。</p><p>The most striking feature of this map of essay writing are the alternating stripes of inspiration and effort required. The questions depend on inspiration, but the answers can be got by sheer persistence. You don’t have to get an answer right the first time, but there’s no excuse for not getting it right eventually, because you can keep rewriting till you do. And this is not just a theoretical possibility. It’s a pretty accurate description of the way I work. I’m rewriting as we speak.</p><p>这张 “散文写作地图” 最显著的特征，是 “灵感” 与 “努力” 交替出现的条纹。问题依赖灵感，但答案可以靠坚持获得。你不必一次就答对，但最终必须答对 —— 因为可以不断修改，直到正确。这不是理论上的可能，而是我工作方式的准确描述。我此刻就在修改。</p><p>But although I wish I could say that writing great essays depends mostly on effort, in the limit case it’s inspiration that makes the difference. In the limit case, the questions are the harder thing to get. That pool has no bottom.</p><p>但尽管我想说 “写伟大的散文主要靠努力”，但在极限情况下，差异由灵感决定。极限情况下，问题更难获得。这是个无底洞。</p><p>How to get more questions? That is the most important question of all.</p><p>如何获得更多问题？这才是最重要的问题。</p><p>Notes</p><p>[1] There might be some resistance to this conclusion on the grounds that some of these discoveries could only be understood by a small number of readers. But you get into all sorts of difficulties if you want to disqualify essays on this account. How do you decide where the cutoff should be? If a virus kills off everyone except a handful of people sequestered at Los Alamos, could an essay that had been disqualified now be eligible? Etc.</p><p>[1] 有人可能反对这个结论，理由是有些发现只有少数读者能理解。但以此为由否定一篇散文，会陷入各种困境。如何决定 “少数” 的界限？如果病毒杀死了所有人，只剩洛斯阿拉莫斯实验室的几个人，那之前被否定的散文现在是否合格？等等。</p><p>Darwin’s 1844 essay was derived from an earlier version written in 1839. Extracts from it were published in 1858.</p><p>达尔文 1844 年的散文改编自 1839 年的早期版本，节选于 1858 年发表。</p><p>[2] When you find yourself very curious about an apparently minor question, that’s an exciting sign. Evolution has designed you to pay attention to things that matter. So when you’re very curious about something random, that could mean you’ve unconsciously noticed it’s less random than it seems.</p><p>[2] 当你对一个看似次要的问题充满好奇时，这是个令人兴奋的信号。进化让我们关注 “重要的事”，所以当你对某个随机的事充满好奇，可能是潜意识里发现它没那么随机。</p><p>[3] Corollary: If you’re not intellectually honest, your writing won’t just be biased, but also boring, because you’ll miss all the ideas you’d have discovered if you pushed for the truth.</p><p>[3] 推论：如果不够理智诚实，你的写作不仅会有偏见，还会无聊 —— 因为你会错过所有 “追求真相时本可以发现” 的思想。</p><p>[4] Sometimes this process begins before you start writing. Sometimes you’ve already figured out the first few things you want to say. Schoolchildren are often taught they should decide everything they want to say, and write this down as an outline before they start writing the essay itself. Maybe that’s a good way to get them started — or not, I don’t know — but it’s antithetical to the spirit of essay writing. The more detailed your outline, the less your ideas can benefit from the sort of discovery that essays are for.</p><p>[4] 这个过程有时在动笔前就开始了。有时你已经想好了开头要说的几件事。学生常被教导：应该先确定所有想写的内容，列成提纲，再开始写散文。或许这是教他们入门的好方法（也可能不是，我不知道），但与散文写作的精神相悖。提纲越详细，思想就越难从散文特有的 “发现” 中获益。</p><p>[5] The problem with this type of “greedy” algorithm is that you can end up on a local maximum. If the most valuable question is preceded by a boring one, you’ll overlook it. But I can’t imagine a better strategy. There’s no lookahead except by writing. So use a greedy algorithm and a lot of time.</p><p>[5] 这种 “贪心算法” 的问题是可能陷入 “局部最优”。如果最有价值的问题前有一个无聊的问题，你就会错过它。但我想不出更好的策略。除了写作，没有 “预知” 的方法。所以，用贪心算法，多花时间。</p><p>[6] I ended up reattaching the first 5 of the 17 paragraphs, and discarding the rest.</p><p>[6] 最后我把 17 段中的前 5 段接了回来，其余删掉了。</p><p>[7] Stephen Fry confessed to making use of this phenomenon when taking exams at Oxford. He had in his head a standard essay about some general literary topic, and he would find a way to turn the exam question toward it and then just reproduce it again.</p><p>[7] 史蒂芬・弗莱承认，在牛津考试时用过这种方法。他脑子里有一篇关于某个通用文学主题的标准散文，会想办法把考题引向它，然后复述出来。</p><p>Strictly speaking it’s the graph of ideas that would be highly connected, not the space, but that usage would confuse people who don’t know graph theory, whereas people who do know it will get what I mean if I say “space”.</p><p>严格来说，“高度关联” 的是 “思想图谱”，而非 “领域”，但用 “领域” 不会让不懂图论的人困惑，而懂的人会明白我的意思。</p><p>[8] Too far doesn’t depend just on the distance from the original topic. It’s more like that distance divided by the value of whatever I’ve discovered in the subtree.</p><p>[8] “偏离太远” 不仅取决于与原主题的距离，更像 “距离除以子分支中发现的价值”。</p><p>[9] Or can you? I should try writing about this. Even if the chance of succeeding is small, the expected value is huge.</p><p>[9] 或许可以？我应该写写这个。就算成功概率低，预期价值也很大。</p><p>[10] There was a vogue in the 20th century for saying that the purpose of art was also to teach. Some artists tried to justify their work by explaining that their goal was not to produce something good, but to challenge our preconceptions about art. And to be fair, art can teach somewhat. The ancient Greeks’ naturalistic sculptures represented a new idea, and must have been extra exciting to contemporaries on that account. But they still look good to us.</p><p>[10] 20 世纪有种潮流，说艺术的目的也是 “教”。有些艺术家为作品辩护时说，目标不是创造好东西，而是挑战我们对艺术的偏见。公平地说，艺术确实能教一点。古希腊的写实雕塑代表了新思想，对同时代人来说一定格外令人兴奋。但它们现在看起来依然好。</p><p>[11] Bertrand Russell caused huge controversy in the early 20th century with his ideas about “trial marriage.” But they make boring reading now, because they prevailed. “Trial marriage” is what we call “dating.”</p><p>[11] 伯特兰・罗素 20 世纪初关于 “试婚” 的想法引发巨大争议，但现在读起来很无聊 —— 因为他的想法赢了。“试婚” 就是我们说的 “约会”。</p><p>[12] If you’d asked me 10 years ago, I’d have predicted that schools would continue to teach hacking the test for centuries. But now it seems plausible that students will soon be taught individually by AIs, and that exams will be replaced by ongoing, invisible micro-assessments.</p><p>[12] 10 年前如果问我，我会预测学校会继续教 “钻考试空子” 几个世纪。但现在看来，学生可能很快会由 AI 一对一教学，考试会被持续、隐形的 “微评估” 取代。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>淡化你的身份标识</title>
    <link href="/2025/07/31/keep-your-identity-small/"/>
    <url>/2025/07/31/keep-your-identity-small/</url>
    
    <content type="html"><![CDATA[<h2 id="Keep-Your-Identity-Small"><a href="#Keep-Your-Identity-Small" class="headerlink" title="Keep Your Identity Small"></a>Keep Your Identity Small</h2><p>原文链接: <a href="https://paulgraham.com/identity.html">https://paulgraham.com/identity.html</a></p><p>February 2009</p><p>I finally realized today why politics and religion yield such uniquely useless discussions.</p><p>今天我终于意识到，为何政治和宗教总会引发毫无意义的讨论。</p><p>As a rule, any mention of religion on an online forum degenerates into a religious argument. Why? Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums?</p><p>通常来说，在网络论坛上只要提到宗教，讨论就会演变成宗教争论。为什么会这样？为什么宗教话题会如此，而 JavaScript、烘焙或其他人们在论坛上讨论的话题却不会？</p><p>What’s different about religion is that people don’t feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs, and anyone can have those. No thread about Javascript will grow as fast as one about religion, because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone’s an expert.</p><p>宗教的特别之处在于，人们觉得自己无需具备任何专业知识，就能对其发表见解。他们所需要的只是强烈的信念，而任何人都能拥有这种信念。关于 JavaScript 的帖子不会像宗教话题的帖子那样迅速发酵，因为人们会觉得，要对 JavaScript 发表评论，自己的专业水平必须达到一定门槛。但在宗教话题上，每个人都自认为是专家。</p><p>Then it struck me: this is the problem with politics too. Politics, like religion, is a topic where there’s no threshold of expertise for expressing an opinion. All you need is strong convictions.</p><p>随后我突然想到：政治也是同样的问题。和宗教一样，在政治话题中，发表观点无需任何专业门槛，只要有强烈的信念就行。</p><p>Do religion and politics have something in common that explains this similarity? One possible explanation is that they deal with questions that have no definite answers, so there’s no back pressure on people’s opinions. Since no one can be proven wrong, every opinion is equally valid, and sensing this, everyone lets fly with theirs.</p><p>宗教和政治是否存在某种共性，能解释这种相似性？一种可能的解释是，它们涉及的问题没有明确答案，因此人们的观点不会受到反驳的压力。既然没人能被证明是错的，那么每种观点都同样 “合理”，正因为意识到这一点，每个人都会肆意发表自己的看法。</p><p>But this isn’t true. There are certainly some political questions that have definite answers, like how much a new government policy will cost. But the more precise political questions suffer the same fate as the vaguer ones.</p><p>但事实并非如此。某些政治问题显然有明确答案，比如一项新的政府政策会耗费多少资金。然而，越是精确的政治问题，最终的下场却和那些模糊的问题一样（引发无意义争论）。</p><p>I think what religion and politics have in common is that they become part of people’s identity, and people can never have a fruitful argument about something that’s part of their identity. By definition they’re partisan.</p><p>我认为，宗教和政治的共同点在于，它们会成为人们身份标识的一部分，而人们永远无法就属于自己身份标识的事物进行富有成效的争论。按理说，他们必然会带有偏见。</p><p>Which topics engage people’s identity depends on the people, not the topic. For example, a discussion about a battle that included citizens of one or more of the countries involved would probably degenerate into a political argument. But a discussion today about a battle that took place in the Bronze Age probably wouldn’t. No one would know what side to be on. So it’s not politics that’s the source of the trouble, but identity. When people say a discussion has degenerated into a religious war, what they really mean is that it has started to be driven mostly by people’s identities. [1]</p><p>哪些话题会涉及人们的身份标识，取决于人本身，而非话题本身。例如，若一场关于战争的讨论涉及某个或多个参战国的公民，那它很可能会演变成政治争论。但如今讨论一场发生在青铜时代的战争，或许就不会如此 —— 因为没人知道该站在哪一方。所以，问题的根源并非政治，而是身份标识。当人们说一场讨论演变成了 “宗教战争”，他们真正想表达的是，这场讨论已开始主要由人们的身份标识所驱动。[1]</p><p>Because the point at which this happens depends on the people rather than the topic, it’s a mistake to conclude that because a question tends to provoke religious wars, it must have no answer. For example, the question of the relative merits of programming languages often degenerates into a religious war, because so many programmers identify as X programmers or Y programmers. This sometimes leads people to conclude the question must be unanswerable—that all languages are equally good. Obviously that’s false: anything else people make can be well or badly designed; why should this be uniquely impossible for programming languages? And indeed, you can have a fruitful discussion about the relative merits of programming languages, so long as you exclude people who respond from identity.</p><p>由于这种情况的发生取决于人而非话题，因此若得出 “某个问题容易引发‘宗教战争’，就说明它一定没有答案” 的结论，那就错了。比如，关于编程语言优劣的讨论，往往会演变成 “宗教战争”，因为太多程序员将自己定位为 “X 语言程序员” 或 “Y 语言程序员”。这有时会让人们认为，这个问题一定没有答案 —— 所有语言都一样好。但显然这是错误的：人们创造的其他任何事物都有设计优劣之分，编程语言为何会是特例？事实上，只要排除那些从身份标识出发进行回应的人，关于编程语言优劣的讨论就能富有成效。</p><p>More generally, you can have a fruitful discussion about a topic only if it doesn’t engage the identities of any of the participants. What makes politics and religion such minefields is that they engage so many people’s identities. But you could in principle have a useful conversation about them with some people. And there are other topics that might seem harmless, like the relative merits of Ford and Chevy pickup trucks, that you couldn’t safely talk about with others.</p><p>更广泛地说，只有当一个话题不涉及任何参与者的身份标识时，相关讨论才能富有成效。政治和宗教之所以像雷区，是因为它们涉及太多人的身份标识。但理论上，你可以和一些人就这些话题进行有益的交流。反之，有些看似无害的话题，比如福特和雪佛兰皮卡的优劣，你却可能无法和某些人安全地展开讨论。</p><p>The most intriguing thing about this theory, if it’s right, is that it explains not merely which kinds of discussions to avoid, but how to have better ideas. If people can’t think clearly about anything that has become part of their identity, then all other things being equal, the best plan is to let as few things into your identity as possible. [2]</p><p>如果这个理论是正确的，那么最有趣的一点是，它不仅解释了应该避免哪些类型的讨论，还说明了如何产生更好的想法。如果人们无法清晰思考那些已成为自身身份标识一部分的事物，那么在其他条件相同的情况下，最好的办法就是让尽可能少的事物成为你的身份标识。[2]</p><p>Most people reading this will already be fairly tolerant. But there is a step beyond thinking of yourself as x but tolerating y: not even to consider yourself an x. The more labels you have for yourself, the dumber they make you.</p><p>读到这篇文章的大多数人可能已经相当宽容了。但还有一个境界超越了 “认为自己是 x，但容忍 y”：那就是根本不把自己当作 x。你给自己贴的标签越多，就会变得越愚蠢。</p><p>Notes</p><p>[1] When that happens, it tends to happen fast, like a core going critical. The threshold for participating goes down to zero, which brings in more people. And they tend to say incendiary things, which draw more and angrier counterarguments.</p><p>[1] 这种情况发生时，往往会像核反应堆达到临界状态一样迅速。参与讨论的门槛降至零，这会吸引更多人加入。而且他们往往会说些煽动性的话，从而引发更多、更愤怒的反驳。</p><p>[2] There may be some things it’s a net win to include in your identity. For example, being a scientist. But arguably that is more of a placeholder than an actual label—like putting NMI on a form that asks for your middle initial—because it doesn’t commit you to believing anything in particular. A scientist isn’t committed to believing in natural selection in the same way a biblical literalist is committed to rejecting it. All he’s committed to is following the evidence wherever it leads.</p><p>[2] 或许有些事物成为身份标识总体而言是有益的，比如 “科学家” 这个身份。但可以说，这更多是一个占位符而非实际标签 —— 就像在要求填写中间名首字母的表格上填 “NMI”（无中间名）一样 —— 因为它并不要求你坚信某件具体的事。科学家不会像圣经直译主义者坚信要否定自然选择那样，坚信自然选择的正确性。他所坚守的，只是跟随证据的指引。</p><p>Considering yourself a scientist is equivalent to putting a sign in a cupboard saying “this cupboard must be kept empty.” Yes, strictly speaking, you’re putting something in the cupboard, but not in the ordinary sense.</p><p>把自己视为科学家，相当于在橱柜上贴一张标签，上面写着 “这个橱柜必须保持空的”。严格来说，你确实在橱柜上放了东西，但并非通常意义上的 “放东西”。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脑子里最重要的念头</title>
    <link href="/2025/07/31/the-top-idea-in-your-mind/"/>
    <url>/2025/07/31/the-top-idea-in-your-mind/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Top-Idea-in-Your-Mind"><a href="#The-Top-Idea-in-Your-Mind" class="headerlink" title="The Top Idea in Your Mind"></a>The Top Idea in Your Mind</h2><p>原文链接: <a href="https://paulgraham.com/top.html">https://paulgraham.com/top.html</a></p><p>July 2010</p><p>I realized recently that what one thinks about in the shower in the morning is more important than I’d thought. I knew it was a good time to have ideas. Now I’d go further: now I’d say it’s hard to do a really good job on anything you don’t think about in the shower.</p><p>我最近意识到，早上在洗澡时思考的事情，比我之前认为的要重要得多。我知道那是产生想法的好时机。现在我要更进一步说：如果你在洗澡时都不会去想某件事，那你很难把它做好。</p><p>Everyone who’s worked on difficult problems is probably familiar with the phenomenon of working hard to figure something out, failing, and then suddenly seeing the answer a bit later while doing something else. There’s a kind of thinking you do without trying to. I’m increasingly convinced this type of thinking is not merely helpful in solving hard problems, but necessary. The tricky part is, you can only control it indirectly. [1]</p><p>每个钻研过难题的人可能都熟悉这种现象：拼命想弄明白一件事，却失败了，过一会儿在做别的事时，答案突然就浮现了。有一种思考是无需刻意为之的。我越来越相信，这种思考方式不仅对解决难题有帮助，而且是必需的。棘手的是，你只能间接控制它。[1]</p><p>I think most people have one top idea in their mind at any given time. That’s the idea their thoughts will drift toward when they’re allowed to drift freely. And this idea will thus tend to get all the benefit of that type of thinking, while others are starved of it. Which means it’s a disaster to let the wrong idea become the top one in your mind.</p><p>我觉得大多数人在任何时候，心里都有一个首要念头。当思绪自由飘荡时，它们总会飘向这个念头。因此，这种思考方式带来的好处，往往都会集中在这个念头上，而其他想法则会被剥夺。这意味着，让错误的念头成为你心中的首要念头，是一场灾难。</p><p>What made this clear to me was having an idea I didn’t want as the top one in my mind for two long stretches.</p><p>有两段很长的时间，我心中的首要念头是我不想要的，这让我深刻明白了这一点。</p><p>I’d noticed startups got way less done when they started raising money, but it was not till we ourselves raised money that I understood why. The problem is not the actual time it takes to meet with investors. The problem is that once you start raising money, raising money becomes the top idea in your mind. That becomes what you think about when you take a shower in the morning. And that means other questions aren’t.</p><p>我注意到，创业公司在开始融资后，做事效率会大幅下降，但直到我们自己去融资时，我才明白原因。问题不在于和投资者见面所花费的实际时间，而在于一旦你开始融资，融资就会成为你心中的首要念头。这会变成你早上在洗澡时思考的事情，而这意味着其他问题就不会被你想起了。</p><p>I’d hated raising money when I was running Viaweb, but I’d forgotten why I hated it so much. When we raised money for Y Combinator, I remembered. Money matters are particularly likely to become the top idea in your mind. The reason is that they have to be. It’s hard to get money. It’s not the sort of thing that happens by default. It’s not going to happen unless you let it become the thing you think about in the shower. And then you’ll make little progress on anything else you’d rather be working on. [2]</p><p>我在经营 Viaweb 时就讨厌融资，但我忘了自己为什么这么讨厌。当我们为 Y Combinator 融资时，我想起来了。与钱相关的事情特别容易成为人们心中的首要念头，原因是它们必须如此。赚钱并不容易，它不是那种自然而然就会发生的事。除非你让它成为你在洗澡时思考的事情，否则它是不会发生的。但这样一来，你在其他你更想做的事情上，就很难取得进展了。[2]</p><p>(I hear similar complaints from friends who are professors. Professors nowadays seem to have become professional fundraisers who do a little research on the side. It may be time to fix that.)</p><p>（我从当教授的朋友那里听到了类似的抱怨。如今的教授似乎变成了专业的筹款人，只在业余时间做一点研究。或许是时候改变这种状况了。）</p><p>The reason this struck me so forcibly is that for most of the preceding 10 years I’d been able to think about what I wanted. So the contrast when I couldn’t was sharp. But I don’t think this problem is unique to me, because just about every startup I’ve seen grinds to a halt when they start raising money — or talking to acquirers.</p><p>这件事给我带来如此强烈的冲击，是因为在之前的 10 年里，大多数时候我都能思考自己想思考的事情。所以当我不能再这样做时，反差非常鲜明。但我认为这个问题并非只发生在我身上，因为我看到几乎每一家创业公司，在开始融资或者与收购方谈判时，都会停滞不前。</p><p>You can’t directly control where your thoughts drift. If you’re controlling them, they’re not drifting. But you can control them indirectly, by controlling what situations you let yourself get into. That has been the lesson for me: be careful what you let become critical to you. Try to get yourself into situations where the most urgent problems are ones you want to think about.</p><p>你无法直接控制自己的思绪飘向何方。如果思绪在你的控制之下，那它们就不是在自由飘荡了。但你可以通过控制自己所处的环境，来间接控制思绪。这就是我从中得到的教训：要小心那些你让其变得至关重要的事情。努力让自己处于这样的境地：最紧急的问题是你自己想思考的。</p><p>You don’t have complete control, of course. An emergency could push other thoughts out of your head. But barring emergencies you have a good deal of indirect control over what becomes the top idea in your mind.</p><p>当然，你不可能完全掌控。突发情况可能会把其他想法从你脑海中挤出去。但在没有突发情况的情况下，你对心中的首要念头有很大的间接控制权。</p><p>I’ve found there are two types of thoughts especially worth avoiding — thoughts like the Nile Perch in the way they push out more interesting ideas. One I’ve already mentioned: thoughts about money. Getting money is almost by definition an attention sink. The other is disputes. These too are engaging in the wrong way: they have the same velcro-like shape as genuinely interesting ideas, but without the substance. So avoid disputes if you want to get real work done. [3]</p><p>我发现有两种想法尤其值得避免 —— 它们就像尼罗河鲈鱼一样，会把更有趣的想法排挤出去。一种我已经提到过了：与钱有关的想法。按理说，赚钱几乎就是一个注意力黑洞。另一种是争论。争论也会以错误的方式占据你的注意力：它们和真正有趣的想法一样，都像有魔力似的吸引人，但却没有实质内容。所以，如果你想做真正的工作，就要避免争论。[3]</p><p>Even Newton fell into this trap. After publishing his theory of colors in 1672 he found himself distracted by disputes for years, finally concluding that the only solution was to stop publishing:</p><p>就连牛顿也掉进过这个陷阱。1672 年发表了他的色彩理论后，他发现自己多年来一直被争论所困扰，最后得出结论：唯一的解决办法就是停止发表作品：</p><p>I see I have made myself a slave to Philosophy, but if I get free of Mr Linus’s business I will resolutely bid adew to it eternally, excepting what I do for my privat satisfaction or leave to come out after me. For I see a man must either resolve to put out nothing new or become a slave to defend it. [4]</p><p>“我发现自己成了哲学的奴隶，但如果我能摆脱莱纳斯先生的事，我会坚决永远告别哲学，除非是为了个人满足而做的事，或者留到我死后再发表。因为我明白，一个人要么决心不发表任何新东西，要么就会成为捍卫它的奴隶。”[4]</p><p>Linus and his students at Liege were among the more tenacious critics. Newton’s biographer Westfall seems to feel he was overreacting:</p><p>列日的莱纳斯和他的学生是其中最固执的批评者。牛顿的传记作者韦斯特福尔似乎觉得他反应过度了：</p><p>Recall that at the time he wrote, Newton’s “slavery” consisted of five replies to Liege, totalling fourteen printed pages, over the course of a year.</p><p>回想一下，在他写这封信的时候，牛顿的 “奴役” 不过是在一年的时间里，对列日的批评做出了五次回应，总共 14 页印刷内容。</p><p>I’m more sympathetic to Newton. The problem was not the 14 pages, but the pain of having this stupid controversy constantly reintroduced as the top idea in a mind that wanted so eagerly to think about other things.</p><p>我更能理解牛顿。问题不在于那 14 页文字，而在于这种愚蠢的争论不断地成为他脑海中的首要念头，而他其实迫切地想思考其他事情，这太痛苦了。</p><p>Turning the other cheek turns out to have selfish advantages. Someone who does you an injury hurts you twice: first by the injury itself, and second by taking up your time afterward thinking about it. If you learn to ignore injuries you can at least avoid the second half. I’ve found I can to some extent avoid thinking about nasty things people have done to me by telling myself: this doesn’t deserve space in my head. I’m always delighted to find I’ve forgotten the details of disputes, because that means I hadn’t been thinking about them. My wife thinks I’m more forgiving than she is, but my motives are purely selfish.</p><p>事实证明，宽容待人有其自私的好处。伤害你的人会伤害你两次：第一次是伤害本身，第二次是让你在事后花时间去想它。如果你学会忽略伤害，至少可以避免第二次伤害。我发现，通过告诉自己 “这不值得占据我的思绪”，我在某种程度上可以避免去想别人对我做的讨厌事。当我发现自己已经忘记了争论的细节时，我总是很高兴，因为这意味着我没有一直在想它们。我妻子认为我比她更宽容，但我的动机纯粹是自私的。</p><p>I suspect a lot of people aren’t sure what’s the top idea in their mind at any given time. I’m often mistaken about it. I tend to think it’s the idea I’d want to be the top one, rather than the one that is. But it’s easy to figure this out: just take a shower. What topic do your thoughts keep returning to? If it’s not what you want to be thinking about, you may want to change something.</p><p>我怀疑很多人并不清楚在某个时刻自己心中的首要念头是什么。我自己也经常判断错误。我往往会认为那是我希望成为首要念头的想法，而不是实际的那个。但要弄清楚这一点很容易：只需洗个澡。你的思绪会不断回到哪个话题上？如果那不是你想思考的事情，你可能就需要做出一些改变了。</p><p>Notes</p><p>[1] No doubt there are already names for this type of thinking, but I call it “ambient thought.”</p><p>[1] 毫无疑问，这种思考方式可能已经有了名称，但我称之为 “环境式思考”。</p><p>[2] This was made particularly clear in our case, because neither of the funds we raised was difficult, and yet in both cases the process dragged on for months. Moving large amounts of money around is never something people treat casually. The attention required increases with the amount—maybe not linearly, but definitely monotonically.</p><p>[2] 这在我们的案例中表现得尤为明显，因为我们筹集的两笔资金都不算困难，但两次过程都拖了好几个月。大笔资金的流动，人们向来不会掉以轻心。所需的注意力会随着金额的增加而增加 —— 可能不是线性的，但肯定是单调递增的。</p><p>[3] Corollary: Avoid becoming an administrator, or your job will consist of dealing with money and disputes.</p><p>[3] 推论：避免成为管理者，否则你的工作就会充斥着与钱和争论相关的事情。</p><p>[4] Letter to Oldenburg, quoted in Westfall, Richard, Life of Isaac Newton, p. 107.</p><p>[4] 致奥登堡的信，引自理查德・韦斯特福尔《牛顿传》，第 107 页。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么书呆子不受欢迎</title>
    <link href="/2025/07/30/why-nerds-are-unpopular/"/>
    <url>/2025/07/30/why-nerds-are-unpopular/</url>
    
    <content type="html"><![CDATA[<h2 id="Why-Nerds-are-Unpopular"><a href="#Why-Nerds-are-Unpopular" class="headerlink" title="Why Nerds are Unpopular"></a>Why Nerds are Unpopular</h2><p>原文链接: <a href="https://paulgraham.com/nerds.html">https://paulgraham.com/nerds.html</a></p><p>February 2003</p><p>When we were in junior high school, my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do, because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down’s Syndrome, what in the language of the time we called “retards.”</p><p>初中时，我和朋友里奇曾根据受欢迎程度给学校的午餐桌画了一张地图。这事儿不难，因为孩子们只和与自己受欢迎程度相近的人一起吃饭。我们把桌子从 A 到 E 分级：A 桌坐满了足球运动员、啦啦队员之类的人；E 桌则是那些患有轻度唐氏综合征的孩子，按当时的说法，我们叫他们 “傻子”。</p><p>We sat at a D table, as low as you could get without looking physically different. We were not being especially candid to grade ourselves as D. It would have taken a deliberate lie to say otherwise. Everyone in the school knew exactly how popular everyone else was, including us.</p><p>我们坐在 D 桌 —— 在外表和别人没差别的情况下，这已经是最低等级了。给自个儿评 D 并非过分坦诚，要说别的，那才是故意撒谎。全校每个人都清楚彼此的受欢迎程度，我们也不例外。</p><p>My stock gradually rose during high school. Puberty finally arrived; I became a decent soccer player; I started a scandalous underground newspaper. So I’ve seen a good part of the popularity landscape.</p><p>高中时，我的 “等级” 慢慢上升了：青春期终于到来，我成了还不错的足球选手，还办了一份引起轰动的地下报纸。所以，我对 “受欢迎” 这事儿的方方面面还算了解。</p><p>I know a lot of people who were nerds in school, and they all tell the same story: there is a strong correlation between being smart and being a nerd, and an even stronger inverse correlation between being a nerd and being popular. Being smart seems to make you unpopular.</p><p>我认识很多上学时是书呆子的人，他们的经历如出一辙：聪明和书呆子气之间有很强的相关性，而书呆子气和受欢迎程度之间的负相关更强。似乎聪明就会让你不受欢迎。</p><p>Why? To someone in school now, that may seem an odd question to ask. The mere fact is so overwhelming that it may seem strange to imagine that it could be any other way. But it could. Being smart doesn’t make you an outcast in elementary school. Nor does it harm you in the real world. Nor, as far as I can tell, is the problem so bad in most other countries. But in a typical American secondary school, being smart is likely to make your life difficult. Why?</p><p>为什么？对现在还在上学的人来说，这问题可能有点奇怪。事实太明显了，以至于很难想象还有别的可能。但其实是有的：在小学，聪明不会让你成为异类；在现实世界，聪明也不会对你不利；而且据我所知，在其他大多数国家，这问题也没这么严重。但在典型的美国中学里，聪明很可能会让你的日子不好过。为什么？</p><p>The key to this mystery is to rephrase the question slightly. Why don’t smart kids make themselves popular? If they’re so smart, why don’t they figure out how popularity works and beat the system, just as they do for standardized tests?</p><p>解开这个谜团的关键，是把问题换个说法：为什么聪明的孩子不让自己变得受欢迎？既然他们这么聪明，为什么不像应对标准化考试那样，搞懂受欢迎的门道，然后 “玩转规则” 呢？</p><p>One argument says that this would be impossible, that the smart kids are unpopular because the other kids envy them for being smart, and nothing they could do could make them popular. I wish. If the other kids in junior high school envied me, they did a great job of concealing it. And in any case, if being smart were really an enviable quality, the girls would have broken ranks. The guys that guys envy, girls like.</p><p>有一种说法是这不可能：聪明的孩子不受欢迎，是因为其他孩子嫉妒他们的聪明，所以无论他们做什么都没用。但愿如此吧。要是初中时其他孩子真嫉妒我，那他们可太会掩饰了。而且，要是聪明真的是值得羡慕的特质，女孩们早就该 “叛变” 了 —— 男孩们嫉妒的人，女孩们往往会喜欢。</p><p>In the schools I went to, being smart just didn’t matter much. Kids didn’t admire it or despise it. All other things being equal, they would have preferred to be on the smart side of average rather than the dumb side, but intelligence counted far less than, say, physical appearance, charisma, or athletic ability.</p><p>在我就读的学校里，聪明根本不算什么。孩子们既不崇拜，也不鄙视聪明。其他条件相同的话，他们或许更愿意做中等偏上的聪明人，而不是笨蛋，但智力的重要性远不及外貌、魅力或运动能力。</p><p>So if intelligence in itself is not a factor in popularity, why are smart kids so consistently unpopular? The answer, I think, is that they don’t really want to be popular.</p><p>既然智力本身和受欢迎程度无关，那为什么聪明的孩子总是不受欢迎？我觉得答案是：他们其实并不想受欢迎。</p><p>If someone had told me that at the time, I would have laughed at him. Being unpopular in school makes kids miserable, some of them so miserable that they commit suicide. Telling me that I didn’t want to be popular would have seemed like telling someone dying of thirst in a desert that he didn’t want a glass of water. Of course I wanted to be popular.</p><p>要是当时有人这么跟我说，我肯定会笑他。在学校不受欢迎会让孩子痛苦，有些孩子甚至会因此自杀。说我不想受欢迎，就像对沙漠里快渴死的人说他不想要一杯水一样荒唐。我当然想受欢迎。</p><p>But in fact I didn’t, not enough. There was something else I wanted more: to be smart. Not simply to do well in school, though that counted for something, but to design beautiful rockets, or to write well, or to understand how to program computers. In general, to make great things.</p><p>但事实是，我没那么想 —— 至少没那么强烈。我有更想追求的东西：变得聪明。这不只是在学校考个好成绩（虽然那也有点用），而是设计漂亮的火箭、写好文章，或是搞懂怎么编程。总的来说，是创造伟大的事物。</p><p>At the time I never tried to separate my wants and weigh them against one another. If I had, I would have seen that being smart was more important. If someone had offered me the chance to be the most popular kid in school, but only at the price of being of average intelligence (humor me here), I wouldn’t have taken it.</p><p>那时候我从没试着把自己的欲望分开权衡。要是权衡过，我就会发现 “变聪明” 更重要。要是有人说能让我成为全校最受欢迎的孩子，但条件是我的智力得降到平均水平（姑且这么假设），我是不会答应的。</p><p>Much as they suffer from their unpopularity, I don’t think many nerds would. To them the thought of average intelligence is unbearable. But most kids would take that deal. For half of them, it would be a step up. Even for someone in the eightieth percentile (assuming, as everyone seemed to then, that intelligence is a scalar), who wouldn’t drop thirty points in exchange for being loved and admired by everyone?</p><p>尽管不受欢迎让书呆子们很难受，但我觉得大多数人都不会接受这个交易。对他们来说，“智力平平” 是无法忍受的。但大多数孩子会接受 —— 对一半的人来说，这都是进步。就算是智力排在前 20% 的人（按当时大家的理解，智力是单一维度的），谁不想用 30 分的智力换所有人的喜爱和崇拜呢？</p><p>And that, I think, is the root of the problem. Nerds serve two masters. They want to be popular, certainly, but they want even more to be smart. And popularity is not something you can do in your spare time, not in the fiercely competitive environment of an American secondary school.</p><p>我想，这就是问题的根源。书呆子有两个 “主人”：他们当然想受欢迎，但更想变聪明。而在竞争激烈的美国中学里，受欢迎这事儿可没法在 “业余时间” 搞定。</p><p>Alberti, arguably the archetype of the Renaissance Man, writes that “no art, however minor, demands less than total dedication if you want to excel in it.” I wonder if anyone in the world works harder at anything than American school kids work at popularity. Navy SEALs and neurosurgery residents seem slackers by comparison. They occasionally take vacations; some even have hobbies. An American teenager may work at being popular every waking hour, 365 days a year.</p><p>阿尔贝蒂 —— 可以说是文艺复兴时期 “全才” 的典范 —— 曾写道：“任何技艺，无论多微不足道，若想精通，都需全身心投入。” 我怀疑这世上有没有人比美国学生为了受欢迎更拼命。相比之下，海豹突击队队员和神经外科住院医生都像懒汉 —— 他们偶尔还能休假，有些人甚至有爱好。而美国青少年可能一年 365 天，醒着的每一刻都在为 “受欢迎” 努力。</p><p>I don’t mean to suggest they do this consciously. Some of them truly are little Machiavellis, but what I really mean here is that teenagers are always on duty as conformists.</p><p>我不是说他们是有意识地这么做。有些孩子确实像小马基雅维利，但我真正想表达的是：青少年时刻都在 “扮演” 合群的人。</p><p>For example, teenage kids pay a great deal of attention to clothes. They don’t consciously dress to be popular. They dress to look good. But to who? To the other kids. Other kids’ opinions become their definition of right, not just for clothes, but for almost everything they do, right down to the way they walk. And so every effort they make to do things “right” is also, consciously or not, an effort to be more popular.</p><p>比如，青少年很在意穿着。他们不是故意穿得受欢迎，而是想穿得好看。但 “好看” 是给谁看的？给其他孩子看。其他孩子的看法成了他们判断 “正确” 的标准 —— 不仅是衣服，几乎所有事都如此，甚至包括走路的姿势。所以，他们为 “做好一件事” 付出的所有努力，无论有意识还是无意识，都是为了更受欢迎。</p><p>Nerds don’t realize this. They don’t realize that it takes work to be popular. In general, people outside some very demanding field don’t realize the extent to which success depends on constant (though often unconscious) effort. For example, most people seem to consider the ability to draw as some kind of innate quality, like being tall. In fact, most people who “can draw” like drawing, and have spent many hours doing it; that’s why they’re good at it. Likewise, popular isn’t just something you are or you aren’t, but something you make yourself.</p><p>书呆子没意识到这一点。他们没意识到 “受欢迎” 需要付出努力。一般来说，不在某个高要求领域的人，都意识不到成功需要持续（往往是无意识的）的努力。比如，大多数人觉得画画是一种天赋，就像长得高一样。但事实上，大多数 “会画画” 的人是因为喜欢画，花了很多时间练习，所以才擅长。同理，受欢迎不是 “是” 或 “不是” 的状态，而是需要自己去争取的。</p><p>The main reason nerds are unpopular is that they have other things to think about. Their attention is drawn to books or the natural world, not fashions and parties. They’re like someone trying to play soccer while balancing a glass of water on his head. Other players who can focus their whole attention on the game beat them effortlessly, and wonder why they seem so incapable.</p><p>书呆子不受欢迎的主要原因是：他们有其他事情要思考。他们的注意力在书本或自然世界上，而不是时尚和派对。这就像有人想一边踢足球，一边在头顶平衡一杯水。其他能全神贯注踢球的人会轻松击败他们，还会纳闷他们怎么这么笨。</p><p>Even if nerds cared as much as other kids about popularity, being popular would be more work for them. The popular kids learned to be popular, and to want to be popular, the same way the nerds learned to be smart, and to want to be smart: from their parents. While the nerds were being trained to get the right answers, the popular kids were being trained to please.</p><p>就算书呆子和其他孩子一样在乎受欢迎，对他们来说，变受欢迎也要更费劲。受欢迎的孩子学会受欢迎、渴望受欢迎的方式，和书呆子学会变聪明、渴望变聪明的方式一样 —— 都是从父母那里学来的。当书呆子被训练着 “得出正确答案” 时，受欢迎的孩子正被训练着 “讨人喜欢”。</p><p>So far I’ve been finessing the relationship between smart and nerd, using them as if they were interchangeable. In fact it’s only the context that makes them so. A nerd is someone who isn’t socially adept enough. But “enough” depends on where you are. In a typical American school, standards for coolness are so high (or at least, so specific) that you don’t have to be especially awkward to look awkward by comparison.</p><p>到目前为止，我一直在模糊 “聪明” 和 “书呆子” 的关系，把它们当同义词用。但其实这取决于环境。书呆子是那些社交能力不够的人，但 “够不够” 要看具体场合。在典型的美国学校里，“酷” 的标准太高（或者说太特殊），所以哪怕你只是稍微有点笨拙，看起来也会很显眼。</p><p>Few smart kids can spare the attention that popularity requires. Unless they also happen to be good-looking, natural athletes, or siblings of popular kids, they’ll tend to become nerds. And that’s why smart people’s lives are worst between, say, the ages of eleven and seventeen. Life at that age revolves far more around popularity than before or after.</p><p>很少有聪明的孩子能分出足够的精力去追求受欢迎。除非他们碰巧长得好看、是天生的运动员，或是受欢迎孩子的兄弟姐妹，否则他们很可能会变成书呆子。这就是为什么聪明人在 11 到 17 岁左右的日子最难过 —— 这个年纪的生活，远比之前或之后更围绕 “受欢迎” 展开。</p><p>Before that, kids’ lives are dominated by their parents, not by other kids. Kids do care what their peers think in elementary school, but this isn’t their whole life, as it later becomes.</p><p>在这之前，孩子的生活由父母主导，而不是同龄人。小学时，孩子确实在乎同伴的看法，但这不是他们生活的全部，后来却成了全部。</p><p>Around the age of eleven, though, kids seem to start treating their family as a day job. They create a new world among themselves, and standing in this world is what matters, not standing in their family. Indeed, being in trouble in their family can win them points in the world they care about.</p><p>但到了 11 岁左右，孩子们似乎开始把家庭当成 “日常任务”。他们在彼此之间创造了一个新世界，在这个世界里的地位才重要，而不是在家庭里的地位。事实上，在家庭里惹麻烦，甚至能在他们在乎的那个世界里加分。</p><p>The problem is, the world these kids create for themselves is at first a very crude one. If you leave a bunch of eleven-year-olds to their own devices, what you get is Lord of the Flies. Like a lot of American kids, I read this book in school. Presumably it was not a coincidence. Presumably someone wanted to point out to us that we were savages, and that we had made ourselves a cruel and stupid world. This was too subtle for me. While the book seemed entirely believable, I didn’t get the additional message. I wish they had just told us outright that we were savages and our world was stupid.</p><p>问题是，孩子们为自己创造的这个世界，一开始非常粗糙。要是让一群 11 岁的孩子自己待着，结果就会像《蝇王》里写的那样。和很多美国孩子一样，我在学校里读过这本书。这大概不是巧合 —— 大概有人想告诉我们，我们是野蛮人，我们创造了一个残酷又愚蠢的世界。但这对我来说太隐晦了。虽然书里的内容看起来完全可信，但我没 get 到那个深层信息。真希望他们直接告诉我们：我们是野蛮人，我们的世界很愚蠢。</p><p>Nerds would find their unpopularity more bearable if it merely caused them to be ignored. Unfortunately, to be unpopular in school is to be actively persecuted.</p><p>要是不受欢迎仅仅意味着被忽视，书呆子或许还能忍受。但不幸的是，在学校里不受欢迎，就意味着会被主动排挤。</p><p>Why? Once again, anyone currently in school might think this a strange question to ask. How could things be any other way? But they could be. Adults don’t normally persecute nerds. Why do teenage kids do it?</p><p>为什么？现在还在上学的人可能又会觉得这问题很奇怪 —— 事情难道还能是别的样子吗？但确实可以是别的样子。成年人一般不会排挤书呆子，为什么青少年会呢？</p><p>Partly because teenagers are still half children, and many children are just intrinsically cruel. Some torture nerds for the same reason they pull the legs off spiders. Before you develop a conscience, torture is amusing.</p><p>部分原因是，青少年还半是孩子，很多孩子天生就残忍。有些孩子折磨书呆子，就像他们扯掉蜘蛛的腿一样 —— 在良知形成之前，折磨是有趣的。</p><p>Another reason kids persecute nerds is to make themselves feel better. When you tread water, you lift yourself up by pushing water down. Likewise, in any social hierarchy, people unsure of their own position will try to emphasize it by maltreating those they think rank below. I’ve read that this is why poor whites in the United States are the group most hostile to blacks.</p><p>另一个原因是，孩子们通过排挤书呆子来自我安慰。就像踩水时，你要把水往下推才能让自己浮起来。同理，在任何社会等级中，对自己地位不确定的人，会通过欺负他们认为等级更低的人来强调自己的地位。我读过相关内容，说这就是为什么美国的贫穷白人是对黑人最不友好的群体。</p><p>But I think the main reason other kids persecute nerds is that it’s part of the mechanism of popularity. Popularity is only partially about individual attractiveness. It’s much more about alliances. To become more popular, you need to be constantly doing things that bring you close to other popular people, and nothing brings people closer than a common enemy.</p><p>但我觉得，其他孩子排挤书呆子的主要原因是：这是 “受欢迎机制” 的一部分。受欢迎不仅取决于个人魅力，更多取决于 “联盟”。要想更受欢迎，你得不断做些能让自己和其他受欢迎的人拉近距离的事，而没有什么比共同的敌人更能拉近人了。</p><p>Like a politician who wants to distract voters from bad times at home, you can create an enemy if there isn’t a real one. By singling out and persecuting a nerd, a group of kids from higher in the hierarchy create bonds between themselves. Attacking an outsider makes them all insiders. This is why the worst cases of bullying happen with groups. Ask any nerd: you get much worse treatment from a group of kids than from any individual bully, however sadistic.</p><p>就像政客想转移选民对国内困境的注意力一样，要是没有真正的敌人，你可以创造一个。通过孤立和排挤某个书呆子，一群等级更高的孩子能巩固彼此的关系。攻击外来者，能让他们都成为 “自己人”。这就是为什么最严重的欺凌往往是群体性的。问问任何一个书呆子就知道：一群孩子的欺负，比任何单个恶霸的虐待都要可怕，无论那个恶霸多残忍。</p><p>If it’s any consolation to the nerds, it’s nothing personal. The group of kids who band together to pick on you are doing the same thing, and for the same reason, as a bunch of guys who get together to go hunting. They don’t actually hate you. They just need something to chase.</p><p>要是能给书呆子一点安慰的话，那就是：这不是针对个人。那些联合起来欺负你的孩子，和一群一起去打猎的人做的是同一件事，原因也一样 —— 他们不是真的恨你，只是需要个东西来追。</p><p>Because they’re at the bottom of the scale, nerds are a safe target for the entire school. If I remember correctly, the most popular kids don’t persecute nerds; they don’t need to stoop to such things. Most of the persecution comes from kids lower down, the nervous middle classes.</p><p>因为书呆子处于等级的最底层，所以他们成了全校都能安全攻击的目标。我记得很清楚，最受欢迎的孩子不会排挤书呆子 —— 他们没必要降低身份做这种事。大多数排挤来自中间阶层的孩子，那些焦虑的 “中产”。</p><p>The trouble is, there are a lot of them. The distribution of popularity is not a pyramid, but tapers at the bottom like a pear. The least popular group is quite small. (I believe we were the only D table in our cafeteria map.) So there are more people who want to pick on nerds than there are nerds.</p><p>麻烦的是，这种孩子太多了。受欢迎程度的分布不是金字塔，而是像梨一样，底部很尖。最不受欢迎的群体非常小（我记得我们的午餐桌地图里，D 桌只有我们）。所以，想欺负书呆子的人，比书呆子本身还多。</p><p>As well as gaining points by distancing oneself from unpopular kids, one loses points by being close to them. A woman I know says that in high school she liked nerds, but was afraid to be seen talking to them because the other girls would make fun of her. Unpopularity is a communicable disease; kids too nice to pick on nerds will still ostracize them in self-defense.</p><p>除了通过疏远不受欢迎的人来加分，和他们走得近还会减分。我认识一个女人说，高中时她喜欢书呆子，但不敢让人看到她和他们说话，因为其他女孩会嘲笑她。不受欢迎是一种 “传染病”—— 就算是不忍心欺负书呆子的孩子，为了自保也会疏远他们。</p><p>It’s no wonder, then, that smart kids tend to be unhappy in middle school and high school. Their other interests leave them little attention to spare for popularity, and since popularity resembles a zero-sum game, this in turn makes them targets for the whole school. And the strange thing is, this nightmare scenario happens without any conscious malice, merely because of the shape of the situation.</p><p>难怪聪明的孩子在初中和高中容易不开心。他们的其他兴趣让他们没精力去追求受欢迎，而由于受欢迎就像零和游戏，这反过来又让他们成了全校的目标。奇怪的是，这种噩梦般的场景并非源于刻意的恶意，只是由环境本身的结构造成的。</p><p>For me the worst stretch was junior high, when kid culture was new and harsh, and the specialization that would later gradually separate the smarter kids had barely begun. Nearly everyone I’ve talked to agrees: the nadir is somewhere between eleven and fourteen.</p><p>对我来说，最糟糕的是初中时期 —— 那时候，“孩子文化” 刚形成，还很残酷，而后来能逐渐把聪明孩子分开的 “专业化” 才刚刚开始。几乎所有我聊过的人都同意：低谷在 11 到 14 岁之间。</p><p>In our school it was eighth grade, which was ages twelve and thirteen for me. There was a brief sensation that year when one of our teachers overheard a group of girls waiting for the school bus, and was so shocked that the next day she devoted the whole class to an eloquent plea not to be so cruel to one another.</p><p>我们学校是八年级，那时我 12 到 13 岁。那年有件事引起了短暂的轰动：一位老师无意中听到一群女孩在等校车时的谈话，震惊之下，第二天整堂课都在慷慨陈词，呼吁她们不要对彼此那么残忍。</p><p>It didn’t have any noticeable effect. What struck me at the time was that she was surprised. You mean she doesn’t know the kind of things they say to one another? You mean this isn’t normal?</p><p>但这没什么明显效果。当时让我震惊的是她的 “惊讶”—— 难道她不知道她们会对彼此说这种话吗？难道这不是正常的吗？</p><p>It’s important to realize that, no, the adults don’t know what the kids are doing to one another. They know, in the abstract, that kids are monstrously cruel to one another, just as we know in the abstract that people get tortured in poorer countries. But, like us, they don’t like to dwell on this depressing fact, and they don’t see evidence of specific abuses unless they go looking for it.</p><p>重要的是要明白：不，成年人根本不知道孩子们在彼此做什么。他们抽象地知道，孩子们会残忍地对待彼此，就像我们抽象地知道贫穷国家有人遭受酷刑一样。但和我们一样，他们不想细想这个令人沮丧的事实，而且除非刻意去看，否则他们看不到具体的虐待证据。</p><p>Public school teachers are in much the same position as prison wardens. Wardens’ main concern is to keep the prisoners on the premises. They also need to keep them fed, and as far as possible prevent them from killing one another. Beyond that, they want to have as little to do with the prisoners as possible, so they leave them to create whatever social organization they want. From what I’ve read, the society that the prisoners create is warped, savage, and pervasive, and it is no fun to be at the bottom of it.</p><p>公立学校的老师，处境很像监狱看守。看守最关心的是把囚犯关在范围内，给他们饭吃，尽可能防止他们互相残杀。除此之外，他们不想和囚犯有太多交集，所以让他们自己形成社会结构。据我所知，囚犯们创造的社会是扭曲、野蛮且无处不在的，处于底层的人日子尤其难过。</p><p>In outline, it was the same at the schools I went to. The most important thing was to stay on the premises. While there, the authorities fed you, prevented overt violence, and made some effort to teach you something. But beyond that they didn’t want to have too much to do with the kids. Like prison wardens, the teachers mostly left us to ourselves. And, like prisoners, the culture we created was barbaric.</p><p>我就读的学校，大体也是如此。最重要的是把孩子留在校园里。在学校里，校方给他们饭吃，阻止公然的暴力，还会努力教点东西。但除此之外，他们不想和孩子有太多牵扯。就像监狱看守一样，老师大多让我们自生自灭。而我们创造的文化，也像囚犯的文化一样野蛮。</p><p>Why is the real world more hospitable to nerds? It might seem that the answer is simply that it’s populated by adults, who are too mature to pick on one another. But I don’t think this is true. Adults in prison certainly pick on one another. And so, apparently, do society wives; in some parts of Manhattan, life for women sounds like a continuation of high school, with all the same petty intrigues.</p><p>为什么现实世界对书呆子更友好？似乎答案是：现实世界里都是成年人，他们成熟到不会互相排挤。但我不这么认为。监狱里的成年人当然会互相排挤，显然，某些社交圈里的贵妇也是如此 —— 在曼哈顿的某些地方，女人的生活听起来就像高中的延续，充满了同样琐碎的勾心斗角。</p><p>I think the important thing about the real world is not that it’s populated by adults, but that it’s very large, and the things you do have real effects. That’s what school, prison, and ladies-who-lunch all lack. The inhabitants of all those worlds are trapped in little bubbles where nothing they do can have more than a local effect. Naturally these societies degenerate into savagery. They have no function for their form to follow.</p><p>我觉得现实世界的关键不是 “都是成年人”，而是它足够大，而且你做的事会产生真实的影响。这正是学校、监狱和 “贵妇社交圈” 所缺乏的。在那些世界里，人们被困在小泡泡里，做什么都只能产生局部影响。这种社会自然会堕落成野蛮状态 —— 它们的形式没有对应的功能。</p><p>When the things you do have real effects, it’s no longer enough just to be pleasing. It starts to be important to get the right answers, and that’s where nerds show to advantage. Bill Gates will of course come to mind. Though notoriously lacking in social skills, he gets the right answers, at least as measured in revenue.</p><p>当你做的事有真实影响时，仅仅 “讨人喜欢” 就不够了。“得出正确答案” 开始变得重要，而这正是书呆子的优势。比尔・盖茨就是个例子 —— 尽管他的社交能力出了名地差，但他能得出正确答案（至少从收入来看是这样）。</p><p>The other thing that’s different about the real world is that it’s much larger. In a large enough pool, even the smallest minorities can achieve a critical mass if they clump together. Out in the real world, nerds collect in certain places and form their own societies where intelligence is the most important thing. Sometimes the current even starts to flow in the other direction: sometimes, particularly in university math and science departments, nerds deliberately exaggerate their awkwardness in order to seem smarter. John Nash so admired Norbert Wiener that he adopted his habit of touching the wall as he walked down a corridor.</p><p>现实世界的另一个不同是它足够大。在足够大的群体里，哪怕是最小的少数群体，只要聚集起来就能形成 “临界质量”。在现实世界里，书呆子会聚集在某些地方，形成自己的社会，在那里智力是最重要的。有时风向甚至会反过来：尤其是在大学的数学系和科学系，书呆子会故意放大自己的笨拙，来显得更聪明。约翰・纳什非常崇拜诺伯特・维纳，甚至学他走路时扶着墙的习惯。</p><p>As a thirteen-year-old kid, I didn’t have much more experience of the world than what I saw immediately around me. The warped little world we lived in was, I thought, the world. The world seemed cruel and boring, and I’m not sure which was worse.</p><p>13 岁时，我的眼界只限于眼前的世界。我以为我们生活的那个扭曲的小世界就是全部世界。这个世界既残酷又无聊，我都不知道哪个更糟。</p><p>Because I didn’t fit into this world, I thought that something must be wrong with me. I didn’t realize that the reason we nerds didn’t fit in was that in some ways we were a step ahead. We were already thinking about the kind of things that matter in the real world, instead of spending all our time playing an exacting but mostly pointless game like the others.</p><p>因为我不适应这个世界，我觉得一定是自己有问题。但我没意识到，书呆子不适应的原因，在某些方面是因为我们领先了一步 —— 我们已经在思考现实世界中重要的事，而不是像其他人那样，把所有时间都花在玩一个严苛却多半无意义的游戏上。</p><p>We were a bit like an adult would be if he were thrust back into middle school. He wouldn’t know the right clothes to wear, the right music to like, the right slang to use. He’d seem to the kids a complete alien. The thing is, he’d know enough not to care what they thought. We had no such confidence.</p><p>我们有点像突然被扔回初中的成年人 —— 他不知道该穿什么衣服、该喜欢什么音乐、该说什么俚语，在孩子们看来就是个彻头彻尾的异类。但关键是，他知道不必在乎孩子们的看法。而我们没有这种自信。</p><p>A lot of people seem to think it’s good for smart kids to be thrown together with “normal” kids at this stage of their lives. Perhaps. But in at least some cases the reason the nerds don’t fit in really is that everyone else is crazy. I remember sitting in the audience at a “pep rally” at my high school, watching as the cheerleaders threw an effigy of an opposing player into the audience to be torn to pieces. I felt like an explorer witnessing some bizarre tribal ritual.</p><p>很多人似乎认为，让聪明的孩子在这个阶段和 “正常” 孩子混在一起是好事。或许吧。但至少在某些情况下，书呆子不适应的原因，真的是其他人太疯狂了。我记得高中时坐在 “ pep rally”（动员大会）的观众席上，看着啦啦队员把对手球员的模拟像扔到观众席上让大家撕碎，感觉自己像个探险家，目睹着某种怪异的部落仪式。</p><p>If I could go back and give my thirteen year old self some advice, the main thing I’d tell him would be to stick his head up and look around. I didn’t really grasp it at the time, but the whole world we lived in was as fake as a Twinkie. Not just school, but the entire town. Why do people move to suburbia? To have kids! So no wonder it seemed boring and sterile. The whole place was a giant nursery, an artificial town created explicitly for the purpose of breeding children.</p><p>要是能回到过去，给 13 岁的自己一点建议，我最想说的是：抬起头，看看周围。那时候我没意识到，我们生活的整个世界，就像奶油蛋糕一样虚假 —— 不只是学校，整个小镇都是。人们为什么搬到郊区？为了养孩子！所以难怪这里显得无聊又乏味 —— 整个地方就是个巨大的托儿所，一个为了养孩子而刻意创造的人造小镇。</p><p>Where I grew up, it felt as if there was nowhere to go, and nothing to do. This was no accident. Suburbs are deliberately designed to exclude the outside world, because it contains things that could endanger children.</p><p>我长大的地方，感觉无处可去，无事可做。这不是偶然 —— 郊区的设计就是为了隔绝外部世界，因为外部世界有会伤害孩子的东西。</p><p>And as for the schools, they were just holding pens within this fake world. Officially the purpose of schools is to teach kids. In fact their primary purpose is to keep kids locked up in one place for a big chunk of the day so adults can get things done. And I have no problem with this: in a specialized industrial society, it would be a disaster to have kids running around loose.</p><p>至于学校，不过是这个虚假世界里的 “拘留所”。官方说学校的目的是教孩子，但实际上，主要目的是把孩子关在一个地方一整天，好让成年人能做事。这一点我没意见：在一个专业化的工业社会里，让孩子乱跑会是灾难。</p><p>What bothers me is not that the kids are kept in prisons, but that (a) they aren’t told about it, and (b) the prisons are run mostly by the inmates. Kids are sent off to spend six years memorizing meaningless facts in a world ruled by a caste of giants who run after an oblong brown ball, as if this were the most natural thing in the world. And if they balk at this surreal cocktail, they’re called misfits.</p><p>让我不满的不是孩子被关在 “监狱” 里，而是：（a）没人告诉他们这一点；（b）“监狱” 主要由 “囚犯” 管理。孩子们被送去花六年时间背诵无意义的知识，而这个世界由一群追着椭圆形棕色球跑的 “巨人” 统治，仿佛这是世界上最自然的事。要是他们对这种荒诞的设定有异议，就会被叫做 “不合群的人”。</p><p>Life in this twisted world is stressful for the kids. And not just for the nerds. Like any war, it’s damaging even to the winners.</p><p>在这个扭曲的世界里，孩子们的生活充满压力 —— 不只是书呆子。就像任何战争一样，即使是赢家也会受伤。</p><p>Adults can’t avoid seeing that teenage kids are tormented. So why don’t they do something about it? Because they blame it on puberty. The reason kids are so unhappy, adults tell themselves, is that monstrous new chemicals, hormones, are now coursing through their bloodstream and messing up everything. There’s nothing wrong with the system; it’s just inevitable that kids will be miserable at that age.</p><p>成年人不可能没发现青少年在受苦，那为什么不做点什么？因为他们把这归咎于青春期。成年人告诉自己，孩子之所以不开心，是因为可怕的新化学物质 —— 荷尔蒙 —— 在他们的血液里流动，把一切都搞乱了。制度没问题，孩子在这个年纪痛苦是不可避免的。</p><p>This idea is so pervasive that even the kids believe it, which probably doesn’t help. Someone who thinks his feet naturally hurt is not going to stop to consider the possibility that he is wearing the wrong size shoes.</p><p>这种想法太普遍了，连孩子自己都信，这可能更糟。要是有人觉得自己的脚天生就疼，他是不会停下来想想可能是鞋不合脚的。</p><p>I’m suspicious of this theory that thirteen-year-old kids are intrinsically messed up. If it’s physiological, it should be universal. Are Mongol nomads all nihilists at thirteen? I’ve read a lot of history, and I have not seen a single reference to this supposedly universal fact before the twentieth century. Teenage apprentices in the Renaissance seem to have been cheerful and eager. They got in fights and played tricks on one another of course (Michelangelo had his nose broken by a bully), but they weren’t crazy.</p><p>我很怀疑 “13 岁的孩子天生就会捣乱” 这种说法。要是这是生理原因，那应该是普遍现象。蒙古游牧民族的 13 岁孩子都很虚无主义吗？我读了很多历史，没在 20 世纪之前见过任何关于这种 “普遍现象” 的记载。文艺复兴时期的学徒青少年，似乎都很快乐、很积极。他们当然也会打架、互相恶作剧（米开朗基罗的鼻子就被恶霸打断过），但他们不疯狂。</p><p>As far as I can tell, the concept of the hormone-crazed teenager is coeval with suburbia. I don’t think this is a coincidence. I think teenagers are driven crazy by the life they’re made to lead. Teenage apprentices in the Renaissance were working dogs. Teenagers now are neurotic lapdogs. Their craziness is the craziness of the idle everywhere.</p><p>据我所知，“荷尔蒙驱动的疯狂青少年” 这种概念，和郊区的出现是同时的。我觉得这不是巧合 —— 青少年被他们被迫过的生活逼疯了。文艺复兴时期的学徒是 “工作犬”，现在的青少年是 “神经质的宠物犬”。他们的疯狂，和所有无所事事的人</p><p>When I was in school, suicide was a constant topic among the smarter kids. No one I knew did it, but several planned to, and some may have tried. Mostly this was just a pose. Like other teenagers, we loved the dramatic, and suicide seemed very dramatic. But partly it was because our lives were at times genuinely miserable.</p><p>我上学时，自杀是聪明孩子间的常见话题。我认识的人中没人真的这么做，但有几个计划过，有些人可能尝试过。多数时候，这只是一种姿态 —— 和其他青少年一样，我们喜欢戏剧化的东西，而自杀看起来很有戏剧性。但部分原因是，我们的生活有时确实很痛苦。</p><p>Bullying was only part of the problem. Another problem, and possibly an even worse one, was that we never had anything real to work on. Humans like to work; in most of the world, your work is your identity. And all the work we did was pointless, or seemed so at the time.</p><p>霸凌只是问题的一部分。另一个问题，或许更严重的是，我们从来没有真正有意义的事可做。人类喜欢工作；在世界上大多数地方，工作是身份的一部分。而我们做的所有事都毫无意义，至少当时看来是这样。</p><p>At best it was practice for real work we might do far in the future, so far that we didn’t even know at the time what we were practicing for. More often it was just an arbitrary series of hoops to jump through, words without content designed mainly for testability. (The three main causes of the Civil War were…. Test: List the three main causes of the Civil War.)</p><p>往好里说，这些事是为遥远未来的真正工作做准备，但未来太远了，我们当时甚至不知道在为什么做准备。更多时候，这些事只是一系列随意设定的 “关卡”—— 空洞的文字，主要是为了方便考试。（比如：内战的三个主要原因是…… 考试题目：列出内战的三个主要原因。）</p><p>And there was no way to opt out. The adults had agreed among themselves that this was to be the route to college. The only way to escape this empty life was to submit to it.</p><p>而且没有退出的办法。大人们一致认为，这是通往大学的必经之路。逃离这种空虚生活的唯一方式，就是屈服于它。</p><p>Teenage kids used to have a more active role in society. In pre-industrial times, they were all apprentices of one sort or another, whether in shops or on farms or even on warships. They weren’t left to create their own societies. They were junior members of adult societies.</p><p>过去的青少年在社会中扮演更积极的角色。前工业化时代，他们都是某种学徒，无论是在商店、农场，甚至军舰上。他们不会被丢去自己创造社会，而是成年人社会的初级成员。</p><p>Teenagers seem to have respected adults more then, because the adults were the visible experts in the skills they were trying to learn. Now most kids have little idea what their parents do in their distant offices, and see no connection (indeed, there is precious little) between schoolwork and the work they’ll do as adults.</p><p>那时候的青少年似乎更尊重成年人，因为成年人是他们想学的技能的可见专家。现在，大多数孩子几乎不知道父母在遥远的办公室里做什么，也看不到学业和未来工作之间的联系（事实上，这种联系也确实少得可怜）。</p><p>And if teenagers respected adults more, adults also had more use for teenagers. After a couple years’ training, an apprentice could be a real help. Even the newest apprentice could be made to carry messages or sweep the workshop.</p><p>如果说过去的青少年更尊重成年人，那成年人也更需要青少年。经过几年培训，学徒就能真正帮上忙。就算是最新来的学徒，也能被派去送信或打扫车间。</p><p>Now adults have no immediate use for teenagers. They would be in the way in an office. So they drop them off at school on their way to work, much as they might drop the dog off at a kennel if they were going away for the weekend.</p><p>现在的成年人对青少年没有即时需求。他们在办公室里只会碍手碍脚。所以大人们上班时把他们送到学校，就像周末出门时把狗送到 kennel（犬舍）一样。</p><p>What happened? We’re up against a hard one here. The cause of this problem is the same as the cause of so many present ills: specialization. As jobs become more specialized, we have to train longer for them. Kids in pre-industrial times started working at about 14 at the latest; kids on farms, where most people lived, began far earlier. Now kids who go to college don’t start working full-time till 21 or 22. With some degrees, like MDs and PhDs, you may not finish your training till 30.</p><p>到底发生了什么？这是个棘手的问题。导致这个问题的原因，和导致许多现存问题的原因一样：专业化。随着工作越来越专业化，我们需要更长时间的培训。前工业化时代的孩子最晚 14 岁就开始工作；大多数人生活的农场里，孩子开始工作的时间更早。现在，上大学的孩子要到 21 或 22 岁才开始全职工作。有些学位，比如医学博士或哲学博士，可能要到 30 岁才能完成培训。</p><p>Teenagers now are useless, except as cheap labor in industries like fast food, which evolved to exploit precisely this fact. In almost any other kind of work, they’d be a net loss. But they’re also too young to be left unsupervised. Someone has to watch over them, and the most efficient way to do this is to collect them together in one place. Then a few adults can watch all of them.</p><p>现在的青少年没什么用，除了在快餐等行业做廉价劳动力 —— 这些行业的发展正是为了利用这一点。在几乎所有其他工作中，他们都是 “净亏损”。但他们又太年轻，不能没人看管。总得有人看着他们，最有效的方式就是把他们集中在一个地方，让几个成年人就能看管所有人。</p><p>If you stop there, what you’re describing is literally a prison, albeit a part-time one. The problem is, many schools practically do stop there. The stated purpose of schools is to educate the kids. But there is no external pressure to do this well. And so most schools do such a bad job of teaching that the kids don’t really take it seriously– not even the smart kids. Much of the time we were all, students and teachers both, just going through the motions.</p><p>如果事情只到这一步，那描述的简直就是监狱，尽管是兼职的。问题是，很多学校实际上就止步于此。学校宣称的目的是教育孩子，但没有外部压力要求他们做好这件事。所以大多数学校教得一塌糊涂，孩子们根本不当回事 —— 即使是聪明的孩子也一样。很多时候，我们所有人，无论是学生还是老师，都只是在走过场。</p><p>In my high school French class we were supposed to read Hugo’s Les Miserables. I don’t think any of us knew French well enough to make our way through this enormous book. Like the rest of the class, I just skimmed the Cliff’s Notes. When we were given a test on the book, I noticed that the questions sounded odd. They were full of long words that our teacher wouldn’t have used. Where had these questions come from? From the Cliff’s Notes, it turned out. The teacher was using them too. We were all just pretending.</p><p>我高中的法语课上，我们本该读雨果的《悲惨世界》。但我觉得我们中没人的法语好到能读懂这本巨著。和班上其他人一样，我只是浏览了《克利夫笔记》（名著摘要）。考试时，我发现题目听起来很奇怪 —— 满是老师不会用的长单词。这些题目来自哪里？结果是《克利夫笔记》。老师也在用。我们都在装样子。</p><p>There are certainly great public school teachers. The energy and imagination of my fourth grade teacher, Mr. Mihalko, made that year something his students still talk about, thirty years later. But teachers like him were individuals swimming upstream. They couldn’t fix the system.</p><p>当然，公立学校里有很棒的老师。我四年级的老师米哈尔科先生，他的活力和想象力让那一年成了学生们三十年后还在谈论的话题。但像他这样的老师，只是逆流而上的个体，无法改变整个系统。</p><p>In almost any group of people you’ll find hierarchy. When groups of adults form in the real world, it’s generally for some common purpose, and the leaders end up being those who are best at it. The problem with most schools is, they have no purpose. But hierarchy there must be. And so the kids make one out of nothing.</p><p>几乎任何群体中都存在等级制度。现实世界中，成年人形成群体通常是为了某个共同目标，而领导者最终是那些最擅长实现目标的人。大多数学校的问题在于，它们没有目标。但等级制度必须存在，所以孩子们凭空创造了一个。</p><p>We have a phrase to describe what happens when rankings have to be created without any meaningful criteria. We say that the situation degenerates into a popularity contest. And that’s exactly what happens in most American schools. Instead of depending on some real test, one’s rank depends mostly on one’s ability to increase one’s rank. It’s like the court of Louis XIV. There is no external opponent, so the kids become one another’s opponents.</p><p>我们有个短语来描述 “没有有意义的标准却要排名” 的情况：我们说这种情况会退化成 “ popularity contest（人气竞赛）”。这正是大多数美国学校的现状。一个人的排名不取决于任何真正的考验，而主要取决于他提升自己排名的能力。就像路易十四的宫廷 —— 没有外部对手，所以孩子们就成了彼此的对手。</p><p>When there is some real external test of skill, it isn’t painful to be at the bottom of the hierarchy. A rookie on a football team doesn’t resent the skill of the veteran; he hopes to be like him one day and is happy to have the chance to learn from him. The veteran may in turn feel a sense of noblesse oblige. And most importantly, their status depends on how well they do against opponents, not on whether they can push the other down.</p><p>当存在真正的外部技能考验时，处于等级底层并不痛苦。足球队的新手不会嫉妒老将的技能；他希望有一天能像老将一样，并且很高兴有机会向他学习。老将反过来可能会有 “noblesse oblige（位高则任重）” 的责任感。最重要的是，他们的地位取决于对抗外部对手的表现，而不是能否打压他人。</p><p>Court hierarchies are another thing entirely. This type of society debases anyone who enters it. There is neither admiration at the bottom, nor noblesse oblige at the top. It’s kill or be killed.</p><p>宫廷式的等级制度则完全不同。这种社会会贬低所有进入其中的人。底层没有钦佩，顶层没有责任感。这是一个要么踩别人，要么被别人踩的世界。</p><p>This is the sort of society that gets created in American secondary schools. And it happens because these schools have no real purpose beyond keeping the kids all in one place for a certain number of hours each day. What I didn’t realize at the time, and in fact didn’t realize till very recently, is that the twin horrors of school life, the cruelty and the boredom, both have the same cause.</p><p>这就是美国中学里形成的社会。之所以会这样，是因为这些学校除了把孩子们每天关在一个地方几小时之外，没有任何真正的目的。我当时没意识到，直到最近才明白：学校生活的两大恐怖 —— 残忍和无聊，有着相同的根源。</p><p>The mediocrity of American public schools has worse consequences than just making kids unhappy for six years. It breeds a rebelliousness that actively drives kids away from the things they’re supposed to be learning.</p><p>美国公立学校的平庸造成的后果，远不止让孩子们在六年里不开心。它滋生了叛逆，让孩子们主动远离他们本该学习的东西。</p><p>Like many nerds, probably, it was years after high school before I could bring myself to read anything we’d been assigned then. And I lost more than books. I mistrusted words like “character” and “integrity” because they had been so debased by adults. As they were used then, these words all seemed to mean the same thing: obedience. The kids who got praised for these qualities tended to be at best dull-witted prize bulls, and at worst facile schmoozers. If that was what character and integrity were, I wanted no part of them.</p><p>和很多书呆子一样，高中毕业后过了很多年，我才愿意读那些当年被布置的读物。我失去的不止是书籍。我不信任 “character（品格）” 和 “ integrity（正直）” 这类词，因为成年人把它们贬低了。在当时的语境里，这些词似乎都意味着同一个东西：服从。因这些品质而受表扬的孩子，往好里说是愚钝的 “奖牛”，往坏里说是油滑的奉承者。如果这就是品格和正直，我一点也不想要。</p><p>The word I most misunderstood was “tact.” As used by adults, it seemed to mean keeping your mouth shut. I assumed it was derived from the same root as “tacit” and “taciturn,” and that it literally meant being quiet. I vowed that I would never be tactful; they were never going to shut me up. In fact, it’s derived from the same root as “tactile,” and what it means is to have a deft touch. Tactful is the opposite of clumsy. I don’t think I learned this until college.</p><p>我最误解的词是 “tact（得体）”。在成年人的用法里，它似乎意味着闭嘴。我以为它和 “ tacit（默许的）”、“ taciturn（沉默寡言的）” 同源，字面意思就是安静。我发誓永远不要 “得体”，他们别想让我闭嘴。但事实上，它和 “ tactile（触觉的）” 同源，意思是 “灵巧的手法”。“得体” 是 “笨拙” 的反义词。我大概到大学才明白这一点。</p><p>Nerds aren’t the only losers in the popularity rat race. Nerds are unpopular because they’re distracted. There are other kids who deliberately opt out because they’re so disgusted with the whole process.</p><p>在人气竞赛中，书呆子不是唯一的输家。书呆子不受欢迎是因为他们分心了。还有些孩子因为对整个过程极度反感，故意选择退出。</p><p>Teenage kids, even rebels, don’t like to be alone, so when kids opt out of the system, they tend to do it as a group. At the schools I went to, the focus of rebellion was drug use, specifically marijuana. The kids in this tribe wore black concert t-shirts and were called “freaks.”</p><p>青少年即使是叛逆者，也不喜欢独处，所以当他们选择退出系统时，往往会结成群体。在我就读的学校里，叛逆的焦点是吸毒，特别是大麻。这个群体的孩子穿黑色摇滚 T 恤，被叫做 “freaks（怪胎）”。</p><p>Freaks and nerds were allies, and there was a good deal of overlap between them. Freaks were on the whole smarter than other kids, though never studying (or at least never appearing to) was an important tribal value. I was more in the nerd camp, but I was friends with a lot of freaks.</p><p>怪胎和书呆子是盟友，两者有很多重叠。怪胎总体上比其他孩子聪明，尽管 “从不学习（或至少看起来不学习）” 是这个群体的重要价值观。我更属于书呆子阵营，但和很多怪胎是朋友。</p><p>They used drugs, at least at first, for the social bonds they created. It was something to do together, and because the drugs were illegal, it was a shared badge of rebellion.</p><p>他们吸毒，至少一开始是为了建立社交联系。这是他们可以一起做的事，而且因为毒品是非法的，这成了他们共同的叛逆标志。</p><p>I’m not claiming that bad schools are the whole reason kids get into trouble with drugs. After a while, drugs have their own momentum. No doubt some of the freaks ultimately used drugs to escape from other problems– trouble at home, for example. But, in my school at least, the reason most kids started using drugs was rebellion. Fourteen-year-olds didn’t start smoking pot because they’d heard it would help them forget their problems. They started because they wanted to join a different tribe.</p><p>我不是说糟糕的学校是孩子们陷入毒品问题的全部原因。过一段时间后，毒品会有自己的惯性。毫无疑问，有些怪胎最终吸毒是为了逃避其他问题 —— 比如家庭麻烦。但至少在我的学校里，大多数孩子开始吸毒的原因是叛逆。14 岁的孩子开始抽大麻，不是因为听说这能帮他们忘记烦恼，而是因为他们想加入另一个群体。</p><p>Misrule breeds rebellion; this is not a new idea. And yet the authorities still for the most part act as if drugs were themselves the cause of the problem.</p><p>暴政滋生叛乱，这不是什么新观点。但当局大多仍然表现得好像毒品本身就是问题的根源。</p><p>The real problem is the emptiness of school life. We won’t see solutions till adults realize that. The adults who may realize it first are the ones who were themselves nerds in school. Do you want your kids to be as unhappy in eighth grade as you were? I wouldn’t. Well, then, is there anything we can do to fix things? Almost certainly. There is nothing inevitable about the current system. It has come about mostly by default.</p><p>真正的问题是学校生活的空虚。除非成年人意识到这一点，否则我们看不到解决方案。最先意识到这一点的成年人，可能是那些自己上学时是书呆子的人。你想让你的孩子在八年级时和你当年一样不开心吗？我不想。那么，我们能做些什么来改变现状呢？几乎可以肯定的是，现行制度并非不可改变，它的形成很大程度上是默认的结果。</p><p>Adults, though, are busy. Showing up for school plays is one thing. Taking on the educational bureaucracy is another. Perhaps a few will have the energy to try to change things. I suspect the hardest part is realizing that you can.</p><p>但成年人很忙。出席学校的戏剧表演是一回事，对抗教育官僚体系是另一回事。或许有少数人有精力尝试改变，但我怀疑最难的是意识到 “自己有能力改变”。</p><p>Nerds still in school should not hold their breath. Maybe one day a heavily armed force of adults will show up in helicopters to rescue you, but they probably won’t be coming this month. Any immediate improvement in nerds’ lives is probably going to have to come from the nerds themselves.</p><p>还在上学的书呆子别抱太大期望。也许有一天，一队全副武装的成年人会乘直升机来救你们，但这个月可能不会。书呆子生活的任何即时改善，很可能都得靠他们自己。</p><p>Merely understanding the situation they’re in should make it less painful. Nerds aren’t losers. They’re just playing a different game, and a game much closer to the one played in the real world. Adults know this. It’s hard to find successful adults now who don’t claim to have been nerds in high school.</p><p>仅仅理解自己所处的环境，就应该能减少痛苦。书呆子不是失败者。他们只是在玩另一种游戏，一种更接近现实世界的游戏。成年人明白这一点 —— 现在很难找到成功的成年人不宣称自己高中时是书呆子。</p><p>It’s important for nerds to realize, too, that school is not life. School is a strange, artificial thing, half sterile and half feral. It’s all-encompassing, like life, but it isn’t the real thing. It’s only temporary, and if you look, you can see beyond it even while you’re still in it.</p><p>书呆子也需要意识到，学校不是生活。学校是一种奇怪的人造产物，一半无菌，一半野性。它像生活一样包罗万象，但不是真实的生活。它只是暂时的，即使还在其中，只要你愿意，就能看到它之外的东西。</p><p>If life seems awful to kids, it’s neither because hormones are turning you all into monsters (as your parents believe), nor because life actually is awful (as you believe). It’s because the adults, who no longer have any economic use for you, have abandoned you to spend years cooped up together with nothing real to do. Any society of that type is awful to live in. You don’t have to look any further to explain why teenage kids are unhappy.</p><p>如果孩子们觉得生活很糟糕，既不是因为荷尔蒙把你们都变成了怪物（就像父母认为的那样），也不是因为生活本身真的很糟糕（就像你们认为的那样）。而是因为，不再有经济用途的成年人，把你们丢在一起，让你们多年来无所事事。任何这样的社会，生活起来都很糟糕。这就足以解释为什么青少年不开心了。</p><p>I’ve said some harsh things in this essay, but really the thesis is an optimistic one– that several problems we take for granted are in fact not insoluble after all. Teenage kids are not inherently unhappy monsters. That should be encouraging news to kids and adults both.</p><p>我在这篇文章里说了些尖锐的话，但核心论点其实是乐观的 —— 一些我们习以为常的问题，其实并非无法解决。青少年并非天生就是不开心的怪物。这对孩子和成年人来说，都应该是个鼓舞人心的消息。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超越平均数</title>
    <link href="/2025/07/29/beating-the-averages/"/>
    <url>/2025/07/29/beating-the-averages/</url>
    
    <content type="html"><![CDATA[<h2 id="Beating-the-Averages"><a href="#Beating-the-Averages" class="headerlink" title="Beating the Averages"></a>Beating the Averages</h2><p>原文链接: <a href="https://paulgraham.com/avg.html">https://paulgraham.com/avg.html</a></p><p>April 2001, rev. April 2003 </p><p>(This article is derived from a talk given at the 2001 Franz Developer Symposium.) In the summer of 1995, my friend Robert Morris and I started a startup called Viaweb. Our plan was to write software that would let end users build online stores. What was novel about this software, at the time, was that it ran on our server, using ordinary Web pages as the interface. </p><p>（本文源自 2001 年 Franz 开发者研讨会的一次演讲）</p><p>1995 年夏天，我和我的朋友罗伯特・莫里斯创办了一家名为 Viaweb 的初创公司。我们计划编写一款软件，让终端用户能够构建在线商店。这款软件在当时的新颖之处在于，它运行在我们的服务器上，使用普通网页作为界面。</p><p>A lot of people could have been having this idea at the same time, of course, but as far as I know, Viaweb was the first Web-based application. It seemed such a novel idea to us that we named the company after it: Viaweb, because our software worked via the Web, instead of running on your desktop computer. </p><p>当然，很多人可能同时都有过这个想法，但据我所知，Viaweb 是第一款基于网络的应用程序。这个想法对我们来说非常新颖，于是我们用它来为公司命名：Viaweb，因为我们的软件是通过网络运行的，而不是在桌面计算机上运行。</p><p>Another unusual thing about this software was that it was written primarily in a programming language called Lisp. It was one of the first big end-user applications to be written in Lisp, which up till then had been used mostly in universities and research labs. [1] </p><p>这款软件的另一个不寻常之处在于，它主要是用一种名为 Lisp 的编程语言编写的。它是最早一批用 Lisp 编写的大型终端用户应用程序之一，在此之前，Lisp 主要在大学和研究实验室中使用。</p><p>The Secret Weapon </p><p>Eric Raymond has written an essay called “How to Become a Hacker,” and in it, among other things, he tells would-be hackers what languages they should learn. He suggests starting with Python and Java, because they are easy to learn. The serious hacker will also want to learn C, in order to hack Unix, and Perl for system administration and cgi scripts. Finally, the truly serious hacker should consider learning Lisp: </p><p><strong>秘密武器</strong></p><p>埃里克・雷蒙德写过一篇名为《如何成为一名黑客》的文章，在文中，他除了讲述其他内容外，还告诉未来的黑客应该学习哪些语言。他建议从 Python 和 Java 入手，因为它们容易学习。认真的黑客还会想学习 C 语言，以便对 Unix 进行黑客攻击，以及学习 Perl 用于系统管理和 CGI 脚本。最后，真正认真的黑客应该考虑学习 Lisp：</p><blockquote><p>Lisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot. </p></blockquote><blockquote><p>学习 Lisp 是值得的，因为当你最终掌握它时，你将获得深刻的启发；这种体验将使你在余生中成为一名更优秀的程序员，即使你实际上并不经常使用 Lisp。</p></blockquote><p>This is the same argument you tend to hear for learning Latin. It won’t get you a job, except perhaps as a classics professor, but it will improve your mind, and make you a better writer in languages you do want to use, like English. </p><p>这和你经常听到的学习拉丁语的理由是一样的。它不会让你找到一份工作，除非你可能成为一名古典文学教授，但它会提升你的思维，让你在你想用的语言（比如英语）中成为一名更好的作家。</p><p>But wait a minute. This metaphor doesn’t stretch that far. The reason Latin won’t get you a job is that no one speaks it. If you write in Latin, no one can understand you. But Lisp is a computer language, and computers speak whatever language you, the programmer, tell them to. </p><p>但等一下。这个比喻并不完全恰当。拉丁语不会让你找到工作的原因是没有人说拉丁语。如果你用拉丁语写作，没有人能理解你。但 Lisp 是一种计算机语言，计算机可以理解程序员告诉它们的任何语言。</p><p>So if Lisp makes you a better programmer, like he says, why wouldn’t you want to use it? If a painter were offered a brush that would make him a better painter, it seems to me that he would want to use it in all his paintings, wouldn’t he? I’m not trying to make fun of Eric Raymond here. On the whole, his advice is good. What he says about Lisp is pretty much the conventional wisdom. But there is a contradiction in the conventional wisdom: Lisp will make you a better programmer, and yet you won’t use it. </p><p>那么，如果像他说的那样，Lisp 能让你成为更好的程序员，为什么你不想使用它呢？如果一个画家得到了一支能让他画得更好的画笔，在我看来，他会想在所有画作中都使用它，不是吗？我这里并不是想取笑埃里克・雷蒙德。总的来说，他的建议是好的。他关于 Lisp 的说法几乎是一种传统观点。但这种传统观点存在一个矛盾：Lisp 能让你成为更好的程序员，但你却不会使用它。</p><p>Why not? Programming languages are just tools, after all. If Lisp really does yield better programs, you should use it. And if it doesn’t, then who needs it? </p><p>为什么不呢？编程语言毕竟只是工具。如果 Lisp 真的能编写出更好的程序，你就应该使用它。如果不能，那谁还需要它呢？</p><p>This is not just a theoretical question. Software is a very competitive business, prone to natural monopolies. A company that gets software written faster and better will, all other things being equal, put its competitors out of business. And when you’re starting a startup, you feel this very keenly. Startups tend to be an all or nothing proposition. You either get rich, or you get nothing. In a startup, if you bet on the wrong technology, your competitors will crush you. </p><p>这不仅仅是一个理论问题。软件行业是一个竞争非常激烈的行业，容易出现自然垄断。在其他条件相同的情况下，一个能够更快、更好地编写软件的公司会让其竞争对手破产。而当你创办一家初创公司时，你会深刻地感受到这一点。初创公司往往是一种要么全有要么全无的事情。你要么发财，要么一无所有。在初创公司中，如果你押错了技术，你的竞争对手就会把你击垮。</p><p>Robert and I both knew Lisp well, and we couldn’t see any reason not to trust our instincts and go with Lisp. We knew that everyone else was writing their software in C++ or Perl. But we also knew that that didn’t mean anything. If you chose technology that way, you’d be running Windows. When you choose technology, you have to ignore what other people are doing, and consider only what will work the best. </p><p>罗伯特和我都很熟悉 Lisp，我们找不到任何理由不相信自己的直觉并选择 Lisp。我们知道其他人都在用 C++ 或 Perl 编写软件。但我们也知道这并不意味着什么。如果你以那种方式选择技术，你就会选择运行 Windows。当你选择技术时，你必须忽略其他人在做什么，只考虑什么是最有效的。</p><p>This is especially true in a startup. In a big company, you can do what all the other big companies are doing. But a startup can’t do what all the other startups do. I don’t think a lot of people realize this, even in startups. </p><p>这在初创公司中尤其如此。在大公司里，你可以做其他大公司都在做的事情。但初创公司不能做其他初创公司都在做的事情。我认为很多人甚至在初创公司中都没有意识到这一点。</p><p>The average big company grows at about ten percent a year. So if you’re running a big company and you do everything the way the average big company does it, you can expect to do as well as the average big company– that is, to grow about ten percent a year. </p><p>一般的大公司每年增长约 10%。所以，如果你经营一家大公司，并且你像一般的大公司那样做所有事情，你可以期望取得和一般大公司一样的业绩，即每年增长约 10%。</p><p>The same thing will happen if you’re running a startup, of course. If you do everything the way the average startup does it, you should expect average performance. The problem here is, average performance means that you’ll go out of business. The survival rate for startups is way less than fifty percent. So if you’re running a startup, you had better be doing something odd. If not, you’re in trouble. </p><p>当然，如果你经营一家初创公司，情况也是如此。如果你像一般的初创公司那样做所有事情，你应该期望得到平均水平的业绩。但问题是，平均水平的业绩意味着你会倒闭。初创公司的存活率远低于 50%。所以，如果你经营一家初创公司，你最好做一些与众不同的事情。否则，你就会有麻烦。</p><p>Back in 1995, we knew something that I don’t think our competitors understood, and few understand even now: when you’re writing software that only has to run on your own servers, you can use any language you want. When you’re writing desktop software, there’s a strong bias toward writing applications in the same language as the operating system. Ten years ago, writing applications meant writing applications in C. But with Web-based software, especially when you have the source code of both the language and the operating system, you can use whatever language you want. </p><p>早在 1995 年，我们就知道一些我认为我们的竞争对手不理解的事情，甚至现在也很少有人理解：当你编写只需要在自己服务器上运行的软件时，你可以使用任何你想用的语言。当你编写桌面软件时，人们强烈倾向于使用与操作系统相同的语言来编写应用程序。十年前，编写应用程序意味着用 C 语言编写。但对于基于网络的软件，特别是当你拥有语言和操作系统的源代码时，你可以使用任何你想用的语言。</p><p>This new freedom is a double-edged sword, however. Now that you can use any language, you have to think about which one to use. Companies that try to pretend nothing has changed risk finding that their competitors do not. </p><p>然而，这种新的自由是一把双刃剑。既然你可以使用任何语言，你就必须考虑使用哪一种。那些试图假装一切都没有改变的公司可能会发现，他们的竞争对手并非如此。</p><p>If you can use any language, which do you use? We chose Lisp. For one thing, it was obvious that rapid development would be important in this market. We were all starting from scratch, so a company that could get new features done before its competitors would have a big advantage. We knew Lisp was a really good language for writing software quickly, and server-based applications magnify the effect of rapid development, because you can release software the minute it’s done. </p><p>如果你可以使用任何语言，你会选择哪种呢？我们选择了 Lisp。一方面，很明显，在这个市场中快速开发非常重要。我们都是从零开始，所以一家能够比竞争对手更快实现新功能的公司将拥有巨大的优势。我们知道 Lisp 是一种非常适合快速编写软件的语言，而且基于服务器的应用程序会放大快速开发的效果，因为你可以在软件完成后立即发布。</p><p>If other companies didn’t want to use Lisp, so much the better. It might give us a technological edge, and we needed all the help we could get. When we started Viaweb, we had no experience in business. We didn’t know anything about marketing, or hiring people, or raising money, or getting customers. Neither of us had ever even had what you would call a real job. The only thing we were good at was writing software. We hoped that would save us. Any advantage we could get in the software department, we would take. </p><p>如果其他公司不想使用 Lisp，那就更好了。这可能会给我们带来技术优势，而我们需要所有能得到的帮助。当我们创办 Viaweb 时，我们没有商业经验。我们对营销、招聘、融资或获取客户一无所知。我们俩甚至都没有过所谓的真正的工作。我们唯一擅长的就是编写软件。我们希望这能拯救我们。我们会抓住在软件方面能得到的任何优势。</p><p>So you could say that using Lisp was an experiment. Our hypothesis was that if we wrote our software in Lisp, we’d be able to get features done faster than our competitors, and also to do things in our software that they couldn’t do. And because Lisp was so high-level, we wouldn’t need a big development team, so our costs would be lower. If this were so, we could offer a better product for less money, and still make a profit. We would end up getting all the users, and our competitors would get none, and eventually go out of business. That was what we hoped would happen, anyway. </p><p>所以可以说，使用 Lisp 是一个实验。我们的假设是，如果我们用 Lisp 编写软件，我们将能够比竞争对手更快地实现功能，并且能够在我们的软件中实现他们无法实现的功能。而且因为 Lisp 是一种高级语言，我们不需要一个庞大的开发团队，所以我们的成本会更低。如果是这样，我们就可以以更低的价格提供更好的产品，并且仍然盈利。最终，我们会赢得所有用户，而我们的竞争对手将一无所获，最终倒闭。不管怎样，这就是我们希望发生的事情。</p><p>What were the results of this experiment? Somewhat surprisingly, it worked. We eventually had many competitors, on the order of twenty to thirty of them, but none of their software could compete with ours. We had a wysiwyg online store builder that ran on the server and yet felt like a desktop application. Our competitors had cgi scripts. And we were always far ahead of them in features. Sometimes, in desperation, competitors would try to introduce features that we didn’t have. But with Lisp our development cycle was so fast that we could sometimes duplicate a new feature within a day or two of a competitor announcing it in a press release. By the time journalists covering the press release got round to calling us, we would have the new feature too. </p><p>这个实验的结果如何呢？令人惊讶的是，它成功了。我们最终有了很多竞争对手，大约有二三十家，但他们的软件都无法与我们的竞争。我们有一个所见即所得的在线商店构建器，它运行在服务器上，但感觉就像一个桌面应用程序。我们的竞争对手只有 CGI 脚本。而且我们在功能上总是远远领先于他们。有时，绝望的竞争对手会试图推出我们没有的功能。但由于 Lisp，我们的开发周期非常快，以至于有时在竞争对手在新闻发布会上宣布新功能后的一两天内，我们就能复制该功能。当报道新闻发布会的记者打电话给我们时，我们也已经有了这个新功能。</p><p>It must have seemed to our competitors that we had some kind of secret weapon– that we were decoding their Enigma traffic or something. In fact we did have a secret weapon, but it was simpler than they realized. No one was leaking news of their features to us. We were just able to develop software faster than anyone thought possible. </p><p>在我们的竞争对手看来，我们一定有某种秘密武器，就好像我们在破解他们的恩尼格玛密码之类的。事实上，我们确实有一个秘密武器，但它比他们意识到的要简单。没有人向我们泄露他们的功能信息。我们只是能够以比任何人想象的都要快的速度开发软件。</p><p>When I was about nine I happened to get hold of a copy of The Day of the Jackal, by Frederick Forsyth. The main character is an assassin who is hired to kill the president of France. The assassin has to get past the police to get up to an apartment that overlooks the president’s route. He walks right by them, dressed up as an old man on crutches, and they never suspect him. </p><p>我大约九岁的时候，偶然读到了弗雷德里克・福赛斯的《豺狼的日子》。书中的主角是一名受雇刺杀法国总统的刺客。刺客必须避开警察，到达一个可以俯瞰总统行进路线的公寓。他装扮成一个拄着拐杖的老人从警察身边走过，警察从未怀疑过他。</p><p>Our secret weapon was similar. We wrote our software in a weird AI language, with a bizarre syntax full of parentheses. For years it had annoyed me to hear Lisp described that way. But now it worked to our advantage. In business, there is nothing more valuable than a technical advantage your competitors don’t understand. In business, as in war, surprise is worth as much as force. </p><p>我们的秘密武器与此类似。我们用一种奇怪的人工智能语言编写软件，它有着充满括号的怪异语法。多年来，听到 Lisp 被那样描述一直让我很恼火。但现在，这却对我们有利。在商业中，没有什么比你的竞争对手不理解的技术优势更有价值了。在商业中，就像在战争中一样，出其不意与力量同样重要。</p><p>And so, I’m a little embarrassed to say, I never said anything publicly about Lisp while we were working on Viaweb. We never mentioned it to the press, and if you searched for Lisp on our Web site, all you’d find were the titles of two books in my bio. This was no accident. A startup should give its competitors as little information as possible. If they didn’t know what language our software was written in, or didn’t care, I wanted to keep it that way.[2] </p><p>所以，有点尴尬的是，在我们开发 Viaweb 的过程中，我从未公开谈论过 Lisp。我们从未向媒体提及过它，如果你在我们的网站上搜索 Lisp，你只会在我的个人简介中找到两本书的书名。这并非偶然。初创公司应该尽可能少地向竞争对手透露信息。如果他们不知道我们的软件是用什么语言编写的，或者他们不在乎，我希望保持这种状态。[2]</p><p>The people who understood our technology best were the customers. They didn’t care what language Viaweb was written in either, but they noticed that it worked really well. It let them build great looking online stores literally in minutes. And so, by word of mouth mostly, we got more and more users. By the end of 1996 we had about 70 stores online. At the end of 1997 we had 500. Six months later, when Yahoo bought us, we had 1070 users. Today, as Yahoo Store, this software continues to dominate its market. It’s one of the more profitable pieces of Yahoo, and the stores built with it are the foundation of Yahoo Shopping. I left Yahoo in 1999, so I don’t know exactly how many users they have now, but the last I heard there were about 20,000. </p><p>最了解我们技术的人是客户。他们也不在乎 Viaweb 是用什么语言编写的，但他们注意到它运行得非常好。它让他们能够在几分钟内就构建出漂亮的在线商店。所以，主要是通过口口相传，我们获得了越来越多的用户。到 1996 年底，我们大约有 70 家在线商店。到 1997 年底，我们有了 500 家。六个月后，当雅虎收购我们时，我们有 1070 个用户。如今，作为雅虎商店，这款软件继续主导着它所在的市场。它是雅虎最赚钱的产品之一，用它构建的商店是雅虎购物的基础。我在 1999 年离开了雅虎，所以我不知道现在他们具体有多少用户，但我最后一次听说时大约有 20000 个。</p><p>The Blub Paradox </p><p>What’s so great about Lisp? And if Lisp is so great, why doesn’t everyone use it? These sound like rhetorical questions, but actually they have straightforward answers. Lisp is so great not because of some magic quality visible only to devotees, but because it is simply the most powerful language available. And the reason everyone doesn’t use it is that programming languages are not merely technologies, but habits of mind as well, and nothing changes slower. Of course, both these answers need explaining. </p><p><strong>Blub悖论</strong></p><p>Lisp 到底好在哪里呢？如果 Lisp 这么好，为什么不是每个人都使用它呢？这些听起来像是反问句，但实际上它们有直接的答案。Lisp 之所以好，并不是因为只有其爱好者才能看到的某种神奇特质，而是因为它确实是目前最强大的语言。而不是每个人都使用它的原因是，编程语言不仅仅是技术，也是思维习惯，而没有什么比思维习惯更难改变的了。当然，这两个答案都需要解释。</p><p>I’ll begin with a shockingly controversial statement: programming languages vary in power. </p><p>我将从一个极具争议性的陈述开始：编程语言的能力是有差异的。</p><p>Few would dispute, at least, that high level languages are more powerful than machine language. Most programmers today would agree that you do not, ordinarily, want to program in machine language. Instead, you should program in a high-level language, and have a compiler translate it into machine language for you. This idea is even built into the hardware now: since the 1980s, instruction sets have been designed for compilers rather than human programmers. </p><p>至少，很少有人会质疑高级语言比机器语言更强大。如今，大多数程序员都会同意，通常情况下，你不想用机器语言编程。相反，你应该用高级语言编程，然后让编译器将其翻译成机器语言。这个想法现在甚至已经融入了硬件设计中：自 20 世纪 80 年代以来，指令集就是为编译器而不是人类程序员设计的。</p><p>Everyone knows it’s a mistake to write your whole program by hand in machine language. What’s less often understood is that there is a more general principle here: that if you have a choice of several languages, it is, all other things being equal, a mistake to program in anything but the most powerful one. [3] </p><p>每个人都知道，手工用机器语言编写整个程序是错误的。但人们较少理解的是，这里有一个更普遍的原则：如果你有几种语言可供选择，在其他条件相同的情况下，不使用最强大的语言编程是错误的。[3]</p><p>There are many exceptions to this rule. If you’re writing a program that has to work very closely with a program written in a certain language, it might be a good idea to write the new program in the same language. If you’re writing a program that only has to do something very simple, like number crunching or bit manipulation, you may as well use a less abstract language, especially since it may be slightly faster. And if you’re writing a short, throwaway program, you may be better off just using whatever language has the best library functions for the task. But in general, for application software, you want to be using the most powerful (reasonably efficient) language you can get, and using anything else is a mistake, of exactly the same kind, though possibly in a lesser degree, as programming in machine language. </p><p>这个规则有很多例外情况。如果你编写的程序必须与用某种特定语言编写的程序紧密协作，那么用相同的语言编写新程序可能是个好主意。如果你编写的程序只需要做一些非常简单的事情，比如数值运算或位操作，那么你不妨使用一种抽象程度较低的语言，尤其是因为它可能会稍微快一些。如果你编写的是一个简短的、一次性的程序，那么使用对该任务有最佳库函数的语言可能会更好。但一般来说，对于应用软件，你应该使用你能找到的最强大（且效率合理）的语言，使用其他语言是错误的，这与用机器语言编程是同一类错误，只是程度可能较轻。</p><p>You can see that machine language is very low level. But, at least as a kind of social convention, high-level languages are often all treated as equivalent. They’re not. Technically the term “high-level language” doesn’t mean anything very definite. There’s no dividing line with machine languages on one side and all the high-level languages on the other. Languages fall along a continuum [4] of abstractness, from the most powerful all the way down to machine languages, which themselves vary in power. </p><p>你可以看到，机器语言是非常低级的。但至少作为一种社会惯例，高级语言通常都被视为是等效的。其实不然。从技术上讲，“高级语言” 这个术语并没有非常明确的含义。在机器语言和所有高级语言之间并没有一条明确的分界线。语言沿着抽象程度的连续体分布，从最强大的语言一直到机器语言，而机器语言本身的能力也有差异。[4]</p><p>Consider Cobol. </p><p>Cobol is a high-level language, in the sense that it gets compiled into machine language. Would anyone seriously argue that Cobol is equivalent in power to, say, Python? It’s probably closer to machine language than Python. </p><p>以 Cobol 为例。Cobol 是一种高级语言，因为它会被编译成机器语言。有人会认真地认为 Cobol 在能力上与 Python 相当吗？它可能比 Python 更接近机器语言。</p><p>Or how about Perl 4? Between Perl 4 and Perl 5, lexical closures got added to the language. Most Perl hackers would agree that Perl 5 is more powerful than Perl 4. But once you’ve admitted that, you’ve admitted that one high level language can be more powerful than another. And it follows inexorably that, except in special cases, you ought to use the most powerful you can get. </p><p>那么 Perl 4 呢？在 Perl 4 和 Perl 5 之间，语言中添加了词法闭包。大多数 Perl 黑客会同意 Perl 5 比 Perl 4 更强大。但一旦你承认了这一点，你就承认了一种高级语言可以比另一种更强大。因此，除了特殊情况，你应该使用你能得到的最强大的语言，这是必然的结论。</p><p>This idea is rarely followed to its conclusion, though. After a certain age, programmers rarely switch languages voluntarily. Whatever language people happen to be used to, they tend to consider just good enough. </p><p>然而，这个想法很少有人贯彻到底。在某个年龄之后，程序员很少会自愿更换语言。人们往往认为自己习惯使用的任何语言就足够好了。</p><p>Programmers get very attached to their favorite languages, and I don’t want to hurt anyone’s feelings, so to explain this point I’m going to use a hypothetical language called Blub. Blub falls right in the middle of the abstractness continuum. It is not the most powerful language, but it is more powerful than Cobol or machine language. </p><p>程序员非常喜欢他们喜欢的语言，我不想伤害任何人的感情，所以为了解释这一点，我将使用一种假设的语言，叫做 Blub。Blub 正好处于抽象程度连续体的中间。它不是最强大的语言，但它比 Cobol 或机器语言更强大。</p><p>And in fact, our hypothetical Blub programmer wouldn’t use either of them. Of course he wouldn’t program in machine language. That’s what compilers are for. And as for Cobol, he doesn’t know how anyone can get anything done with it. It doesn’t even have x (Blub feature of your choice). </p><p>事实上，我们假设的 Blub 程序员不会使用这两种语言。当然，他不会用机器语言编程。那是编译器该做的事。至于 Cobol，他不知道人们怎么能用它完成任何事情。它甚至没有 x（你选择的 Blub 特性）。</p><p>As long as our hypothetical Blub programmer is looking down the power continuum, he knows he’s looking down. Languages less powerful than Blub are obviously less powerful, because they’re missing some feature he’s used to. But when our hypothetical Blub programmer looks in the other direction, up the power continuum, he doesn’t realize he’s looking up. What he sees are merely weird languages. He probably considers them about equivalent in power to Blub, but with all this other hairy stuff thrown in as well. Blub is good enough for him, because he thinks in Blub. </p><p>(注：power continuum暂时无法直译 老实说作者举这个例子根本就是一个败笔，没有把事情讲清楚反而引发了一堆误会。简言之：低维生物无法理解高维生物。)</p><p>只要我们假设的 Blub 程序员向下看能力连续体，他就知道自己在向下看。比 Blub 能力更弱的语言显然更弱，因为它们缺少他习惯使用的某些特性。但当我们假设的 Blub 程序员向另一个方向看，即向上看能力连续体时，他没有意识到自己在向上看。他看到的只是奇怪的语言。他可能认为它们在能力上与 Blub 相当，只是还包含了其他一些难以理解的东西。Blub 对他来说已经足够好了，因为他是用 Blub 来思考的。</p><p>When we switch to the point of view of a programmer using any of the languages higher up the power continuum, however, we find that he in turn looks down upon Blub. How can you get anything done in Blub? It doesn’t even have y. </p><p>然而，当我们转换到使用能力连续体中更高级语言的程序员的视角时，我们会发现，他反过来会看不起 Blub。你怎么能用 Blub 完成任何事情呢？它甚至没有 y。</p><p>By induction, the only programmers in a position to see all the differences in power between the various languages are those who understand the most powerful one. (This is probably what Eric Raymond meant about Lisp making you a better programmer.) You can’t trust the opinions of the others, because of the Blub paradox: they’re satisfied with whatever language they happen to use, because it dictates the way they think about programs. </p><p>通过归纳法可知，只有理解最强大语言的程序员才能看到各种语言之间能力的所有差异。（这可能就是埃里克・雷蒙德所说的 Lisp 能让你成为更好的程序员的意思。）你不能相信其他人的观点，因为存在 Blub 悖论：他们对自己碰巧使用的任何语言都感到满意，因为这种语言决定了他们思考程序的方式。</p><p>I know this from my own experience, as a high school kid writing programs in Basic. That language didn’t even support recursion. It’s hard to imagine writing programs without using recursion, but I didn’t miss it at the time. I thought in Basic. And I was a whiz at it. Master of all I surveyed. </p><p>我从自己的经历中知道这一点，我在高中时用 Basic 编程。那种语言甚至不支持递归。很难想象不使用递归编写程序，但我当时并不觉得缺少什么。我是用 Basic 来思考的。而且我在这方面很出色。我是我所涉足领域的大师。</p><p>The five languages that Eric Raymond recommends to hackers fall at various points on the power continuum. Where they fall relative to one another is a sensitive topic. What I will say is that I think Lisp is at the top. And to support this claim I’ll tell you about one of the things I find missing when I look at the other four languages. How can you get anything done in them, I think, without macros? [5] </p><p>埃里克・雷蒙德推荐给黑客的五种语言处于能力连续体的不同位置。它们相对位置如何是一个敏感话题。我想说的是，我认为 Lisp 处于顶端。为了支持这一说法，我会告诉你，当我看其他四种语言时，我发现它们缺少的东西之一。我想，如果没有宏，怎么能用它们完成任何事情呢？</p><p>Many languages have something called a macro. But Lisp macros are unique. And believe it or not, what they do is related to the parentheses. The designers of Lisp didn’t put all those parentheses in the language just to be different. To the Blub programmer, Lisp code looks weird. But those parentheses are there for a reason. They are the outward evidence of a fundamental difference between Lisp and other languages. </p><p>很多语言都有叫做宏的东西。但 Lisp 的宏是独特的。信不信由你，它们的功能与括号有关。Lisp 的设计者在语言中使用那么多括号并不是为了与众不同。对于 Blub 程序员来说，Lisp 代码看起来很奇怪。但这些括号是有原因的。它们是 Lisp 与其他语言根本区别的外在表现。</p><p>Lisp code is made out of Lisp data objects. And not in the trivial sense that the source files contain characters, and strings are one of the data types supported by the language. Lisp code, after it’s read by the parser, is made of data structures that you can traverse. </p><p>Lisp 代码是由 Lisp 数据对象组成的。这并不是说源文件包含字符，而字符串是语言支持的数据类型之一这种简单的意义。Lisp 代码在被解析器读取后，是由你可以遍历的数据结构组成的。</p><p>If you understand how compilers work, what’s really going on is not so much that Lisp has a strange syntax as that Lisp has no syntax. You write programs in the parse trees that get generated within the compiler when other languages are parsed. But these parse trees are fully accessible to your programs. You can write programs that manipulate them. In Lisp, these programs are called macros. They are programs that write programs. </p><p>如果你了解编译器的工作原理，那么实际情况与其说是 Lisp 有奇怪的语法，不如说是 Lisp 没有语法。你在用其他语言解析时在编译器中生成的解析树来编写程序。但这些解析树对你的程序是完全可访问的。你可以编写程序来操作它们。在 Lisp 中，这些程序被称为宏。它们是编写程序的程序。</p><p>Programs that write programs? When would you ever want to do that? Not very often, if you think in Cobol. All the time, if you think in Lisp. It would be convenient here if I could give an example of a powerful macro, and say there! how about that? But if I did, it would just look like gibberish to someone who didn’t know Lisp; there isn’t room here to explain everything you’d need to know to understand what it meant. In Ansi Common Lisp I tried to move things along as fast as I could, and even so I didn’t get to macros until page 160. </p><p>编写程序的程序？你什么时候会想这样做呢？如果你用 Cobol 思考，这种情况很少会出现。但如果你用 Lisp 思考，这种情况会一直出现。如果我能在这里举一个强大宏的例子，然后说 “看！怎么样？”，那会很方便。但如果我这样做了，对于不懂 Lisp 的人来说，这看起来就像是胡言乱语；这里没有足够的空间来解释理解它所需的所有知识。在《ANSI Common Lisp》这本书中，我尽可能快地介绍内容，但即便如此，我直到第 160 页才讲到宏。</p><p>But I think I can give a kind of argument that might be convincing. The source code of the Viaweb editor was probably about 20-25% macros. Macros are harder to write than ordinary Lisp functions, and it’s considered to be bad style to use them when they’re not necessary. So every macro in that code is there because it has to be. What that means is that at least 20-25% of the code in this program is doing things that you can’t easily do in any other language. However skeptical the Blub programmer might be about my claims for the mysterious powers of Lisp, this ought to make him curious. We weren’t writing this code for our own amusement. We were a tiny startup, programming as hard as we could in order to put technical barriers between us and our competitors. </p><p>但我想我可以给出一种可能有说服力的论据。Viaweb 编辑器的源代码中可能大约有 20%-25% 是宏。宏比普通的 Lisp 函数更难编写，而且在不必要的时候使用宏被认为是不好的风格。所以那段代码中的每个宏都是必不可少的。这意味着这个程序中至少有 20%-25% 的代码在做其他任何语言都不容易做到的事情。无论 Blub 程序员对我所说的 Lisp 的神秘力量有多么怀疑，这都应该让他感到好奇。我们编写这段代码不是为了自娱自乐。我们是一家小型初创公司，尽可能努力地编程，以便在我们和竞争对手之间设置技术障碍。</p><p>A suspicious person might begin to wonder if there was some correlation here. A big chunk of our code was doing things that are very hard to do in other languages. The resulting software did things our competitors’ software couldn’t do. Maybe there was some kind of connection. I encourage you to follow that thread. There may be more to that old man hobbling along on his crutches than meets the eye. </p><p>一个多疑的人可能会开始怀疑这里是否存在某种关联。我们的很大一部分代码在做其他语言很难做到的事情。最终得到的软件能实现我们竞争对手的软件无法实现的功能。也许这之间存在某种联系。我鼓励你顺着这条线索思考。那个拄着拐杖蹒跚而行的老人可能有更多不为人知的秘密。</p><p>Aikido for Startups </p><p>But I don’t expect to convince anyone (over 25) to go out and learn Lisp. The purpose of this article is not to change anyone’s mind, but to reassure people already interested in using Lisp– people who know that Lisp is a powerful language, but worry because it isn’t widely used. In a competitive situation, that’s an advantage. Lisp’s power is multiplied by the fact that your competitors don’t get it. </p><p>但我并不期望说服任何（25 岁以上的）人去学习 Lisp。本文的目的不是为了改变任何人的想法，而是为了让已经对使用 Lisp 感兴趣的人放心 —— 这些人知道 Lisp 是一种强大的语言，但因为它没有被广泛使用而感到担忧。在竞争环境中，这是一种优势。Lisp 的力量因你的竞争对手不理解它而被放大。</p><p>If you think of using Lisp in a startup, you shouldn’t worry that it isn’t widely understood. You should hope that it stays that way. And it’s likely to. It’s the nature of programming languages to make most people satisfied with whatever they currently use. Computer hardware changes so much faster than personal habits that programming practice is usually ten to twenty years behind the processor. At places like MIT they were writing programs in high-level languages in the early 1960s, but many companies continued to write code in machine language well into the 1980s. I bet a lot of people continued to write machine language until the processor, like a bartender eager to close up and go home, finally kicked them out by switching to a risc instruction set. </p><p>如果你考虑在初创公司使用 Lisp，不必担心它未被广泛理解。你反而应该希望它保持这种状态 —— 而且这很可能成真。编程语言的本质是，大多数人会满足于自己当前使用的语言。计算机硬件的变化速度远超人类习惯的改变，因此编程实践通常比处理器的发展落后 10 到 20 年。早在 20 世纪 60 年代初，麻省理工学院（MIT）等地就已开始用高级语言编程，但许多公司直到 80 年代仍在使用机器语言写代码。我敢说，不少人坚持用机器语言编程，直到处理器像急于打烊的酒保一样，通过转向 RISC 指令集最终把他们 “赶出去”。</p><p>Ordinarily technology changes fast. But programming languages are different: programming languages are not just technology, but what programmers think in. They’re half technology and half religion.[6] </p><p>通常来说，技术变化很快。但编程语言不同：它们不仅是技术，更是程序员的思维载体。它们一半是技术，一半是信仰。</p><p>And so the median language, meaning whatever language the median programmer uses, moves as slow as an iceberg. Garbage collection, introduced by Lisp in about 1960, is now widely considered to be a good thing. Runtime typing, ditto, is growing in popularity. Lexical closures, introduced by Lisp in the early 1970s, are now, just barely, on the radar screen. Macros, introduced by Lisp in the mid 1960s, are still terra incognita. </p><p>因此，“中位数语言”—— 即大多数程序员使用的语言 —— 像冰山一样移动缓慢。Lisp 在 1960 年左右引入的垃圾回收机制，如今已被广泛认可为有益功能；同样源自 Lisp 的运行时类型检查，普及率也在上升；20 世纪 70 年代初 Lisp 引入的词法闭包，如今才刚刚进入大众视野；而 60 年代中期 Lisp 提出的宏，至今仍是一片未知领域。</p><p>Obviously, the median language has enormous momentum. I’m not proposing that you can fight this powerful force. What I’m proposing is exactly the opposite: that, like a practitioner of Aikido, you can use it against your opponents. </p><p>显然，中位数语言具有巨大的惯性。我并非建议你对抗这种强大的力量，恰恰相反：你可以像合气道选手一样，借力打力，用它来对付对手。</p><p>If you work for a big company, this may not be easy. You will have a hard time convincing the pointy-haired boss to let you build things in Lisp, when he has just read in the paper that some other language is poised, like Ada was twenty years ago, to take over the world. But if you work for a startup that doesn’t have pointy-haired bosses yet, you can, like we did, turn the Blub paradox to your advantage: you can use technology that your competitors, glued immovably to the median language, will never be able to match. </p><p>如果你在大公司工作，这可能不容易。当你那 “地中海发型老板” 刚在报纸上看到某语言（就像 20 年前的 Ada）即将 “统治世界” 时，你很难说服他让你用 Lisp 开发。但如果你在一家还没有 “地中海老板” 的初创公司，就能像我们一样，将 “Blub 悖论” 转化为优势：你可以使用那些被中位数语言牢牢束缚的竞争对手永远无法匹敌的技术。</p><p>If you ever do find yourself working for a startup, here’s a handy tip for evaluating competitors. Read their job listings. Everything else on their site may be stock photos or the prose equivalent, but the job listings have to be specific about what they want, or they’ll get the wrong candidates. </p><p>如果你真的在初创公司工作，这里有个评估竞争对手的实用技巧：看他们的招聘信息。他们网站上的其他内容可能都是库存图片或套话，但招聘信息必须明确说明需求，否则会招到不合适的人。</p><p>During the years we worked on Viaweb I read a lot of job descriptions. A new competitor seemed to emerge out of the woodwork every month or so. The first thing I would do, after checking to see if they had a live online demo, was look at their job listings. After a couple years of this I could tell which companies to worry about and which not to. The more of an IT flavor the job descriptions had, the less dangerous the company was. The safest kind were the ones that wanted Oracle experience. You never had to worry about those. You were also safe if they said they wanted C++ or Java developers. If they wanted Perl or Python programmers, that would be a bit frightening– that’s starting to sound like a company where the technical side, at least, is run by real hackers. If I had ever seen a job posting looking for Lisp hackers, I would have been really worried.  </p><p>在开发 Viaweb 的那些年里，我读了很多招聘描述。几乎每个月都会冒出新的竞争对手。查看他们是否有在线演示后，我做的第一件事就是看招聘信息。几年下来，我已经能判断哪些公司值得警惕，哪些不必在意。招聘信息越有 “IT 味”，这家公司的威胁就越小。最安全的是那些要求 “Oracle 经验” 的公司 —— 你永远不必担心他们。如果他们招 C++ 或 Java 开发者，你也很安全。如果他们要 Perl 或 Python 程序员，那就要小心了 —— 这听起来像是一家至少技术层面由真正黑客主导的公司。而如果我看到哪家公司招 Lisp 黑客，那才真的会坐立难安。</p><p>Notes </p><p>[1] Viaweb at first had two parts: the editor, written in Lisp, which people used to build their sites, and the ordering system, written in C, which handled orders. The first version was mostly Lisp, because the ordering system was small. Later we added two more modules, an image generator written in C, and a back-office manager written mostly in Perl. In January 2003, Yahoo released a new version of the editor written in C++ and Perl. It’s hard to say whether the program is no longer written in Lisp, though, because to translate this program into C++ they literally had to write a Lisp interpreter: the source files of all the page-generating templates are still, as far as I know, Lisp code. (See Greenspun’s Tenth Rule.) </p><p>[1] Viaweb 最初分为两部分：用于搭建网站的编辑器（用 Lisp 编写），和处理订单的订单系统（用 C 编写）。第一版以 Lisp 为主，因为订单系统规模很小。后来我们新增了两个模块：用 C 写的图像生成器，和主要用 Perl 写的后台管理工具。2003 年 1 月，雅虎发布了用 C++ 和 Perl 重写的新版编辑器。但很难说这个程序从此就与 Lisp 无关了 —— 因为要把原程序翻译成 C++，他们实际上不得不写一个 Lisp 解释器：据我所知，所有页面生成模板的源代码仍然是 Lisp 代码（参见格林斯潘第十法则）。</p><p>[2] Robert Morris says that I didn’t need to be secretive, because even if our competitors had known we were using Lisp, they wouldn’t have understood why: “If they were that smart they’d already be programming in Lisp.” </p><p>[2] 罗伯特・莫里斯说，我其实不必保密，因为即便竞争对手知道我们用 Lisp，也不会明白原因：“如果他们足够聪明，早就开始用 Lisp 编程了。”</p><p>[3] All languages are equally powerful in the sense of being Turing equivalent, but that’s not the sense of the word programmers care about. (No one wants to program a Turing machine.) The kind of power programmers care about may not be formally definable, but one way to explain it would be to say that it refers to features you could only get in the less powerful language by writing an interpreter for the more powerful language in it. If language A has an operator for removing spaces from strings and language B doesn’t, that probably doesn’t make A more powerful, because you can probably write a subroutine to do it in B. But if A supports, say, recursion, and B doesn’t, that’s not likely to be something you can fix by writing library functions. </p><p>[3] 从图灵等价的角度看，所有语言的能力相同，但这并非程序员关心的 “能力”。（没人想用图灵机编程。）程序员关注的能力或许无法被形式化定义，但可以这样解释：如果在较弱的语言中实现较强语言的某个特性，必须为此编写一个解释器，那么这个特性就体现了语言能力的差异。例如，语言 A 有移除字符串空格的运算符，而语言 B 没有，这未必说明 A 更强 —— 因为 B 可以用子程序实现；但如果 A 支持递归而 B 不支持，这就很难通过库函数弥补了。</p><p>[4] Note to nerds: or possibly a lattice, narrowing toward the top; it’s not the shape that matters here but the idea that there is at least a partial order. </p><p>[4] 给技术宅的注：也可能是一个向上收窄的格状结构；重要的不是形状，而是语言能力存在某种 “部分排序” 关系。</p><p>[5] It is a bit misleading to treat macros as a separate feature. In practice their usefulness is greatly enhanced by other Lisp features like lexical closures and rest parameters. </p><p>[5] 把宏视为独立特性有点误导。实际上，宏的价值很大程度上依赖于 Lisp 的其他特性，如词法闭包和剩余参数。</p><p>[6] As a result, comparisons of programming languages either take the form of religious wars or undergraduate textbooks so determinedly neutral that they’re really works of anthropology. People who value their peace, or want tenure, avoid the topic. But the question is only half a religious one; there is something there worth studying, especially if you want to design new languages. </p><p>[6] 因此，编程语言的比较要么沦为 “宗教战争”，要么像本科教材那样刻意中立，实则成了人类学研究。想保平安或求 tenure 的人会避开这个话题。但这个问题只有一半是 “宗教性” 的 —— 其中有值得研究的内容，尤其是对想设计新语言的人而言。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从用户那里我学到了什么</title>
    <link href="/2025/07/28/what-i-have-learned-from-users/"/>
    <url>/2025/07/28/what-i-have-learned-from-users/</url>
    
    <content type="html"><![CDATA[<h2 id="What-I’ve-Learned-from-Users"><a href="#What-I’ve-Learned-from-Users" class="headerlink" title="What I’ve Learned from Users"></a>What I’ve Learned from Users</h2><p>原文链接: <a href="https://paulgraham.com/users.html">https://paulgraham.com/users.html</a></p><p>September 2022 </p><p>I recently told applicants to Y Combinator that the best advice I could give for getting in, per word, was: </p><p>最近，我对 Y Combinator（简称 YC）的申请者说，若论 “每字价值”，能给出的最佳申请建议是：</p><blockquote><p> Explain what you’ve learned from users. </p></blockquote><blockquote><p><strong>解释你从用户身上学到了什么。</strong></p></blockquote><p>That tests a lot of things: whether you’re paying attention to users, how well you understand them, and even how much they need what you’re making. </p><p>这句话能检验出很多东西：你是否关注用户、对用户的理解有多深，甚至用户对你所做产品的需求有多迫切。</p><p>Afterward I asked myself the same question. What have I learned from YC’s users, the startups we’ve funded? </p><p>之后，我问了自己同样的问题：我从 YC 的用户 —— 也就是我们投资的初创公司身上，学到了什么？</p><p>The first thing that came to mind was that most startups have the same problems. No two have exactly the same problems, but it’s surprising how much the problems remain the same, regardless of what they’re making. Once you’ve advised 100 startups all doing different things, you rarely encounter problems you haven’t seen before. </p><p>首先想到的是，大多数初创公司面临的问题是相似的。没有两家公司的问题完全相同，但无论它们做什么业务，问题的共性之高都令人惊讶。当你为 100 家业务各异的初创公司提供过建议后，几乎不会遇到从未见过的新问题。</p><p>This fact is one of the things that makes YC work. But I didn’t know it when we started YC. I only had a few data points: our own startup, and those started by friends. It was a surprise to me how often the same problems recur in different forms. Many later stage investors might never realize this, because later stage investors might not advise 100 startups in their whole career, but a YC partner will get this much experience in the first year or two. </p><p>这一事实正是 YC 能够有效运作的原因之一。但在创办 YC 时，我并不知道这一点。当时我只有几个案例：我们自己的初创公司，以及朋友创办的公司。后来发现，同样的问题会以不同形式反复出现，这让我很意外。许多后期投资者可能永远不会意识到这一点，因为他们整个职业生涯中或许都不会为 100 家初创公司提供建议，但 YC 的合伙人在入职头一两年就能积累这样的经验。</p><p>That’s one advantage of funding large numbers of early stage companies rather than smaller numbers of later-stage ones. You get a lot of data. Not just because you’re looking at more companies, but also because more goes wrong. </p><p>这正是投资大量早期公司而非少量后期公司的优势之一：能获得大量数据。不仅因为关注的公司更多，还因为早期公司出的问题更多。</p><p>But knowing (nearly) all the problems startups can encounter doesn’t mean that advising them can be automated, or reduced to a formula. There’s no substitute for individual office hours with a YC partner. Each startup is unique, which means they have to be advised by specific partners who know them well. [1] </p><p>但即便（几乎）了解初创公司可能遇到的所有问题，也不意味着可以将咨询流程自动化或简化成公式。与 YC 合伙人的一对一办公时间是无可替代的。每家初创公司都是独特的，这意味着需要由熟悉它们的特定合伙人提供针对性建议。[1]</p><p>We learned that the hard way, in the notorious “batch that broke YC” in the summer of 2012. Up till that point we treated the partners as a pool. When a startup requested office hours, they got the next available slot posted by any partner. That meant every partner had to know every startup. This worked fine up to 60 startups, but when the batch grew to 80, everything broke. The founders probably didn’t realize anything was wrong, but the partners were confused and unhappy because halfway through the batch they still didn’t know all the companies yet. [2] </p><p>我们是从惨痛经历中明白这一点的 ——2012 年夏天那个 “搞垮了 YC” 的批次。在此之前，我们把合伙人当作一个 “资源池”：当某家初创公司申请办公时间时，会分配给任何合伙人的下一个空闲时段。这意味着每个合伙人都必须了解所有初创公司。这种模式在 60 家公司时还行得通，但当批次规模扩大到 80 家，一切就乱了。创始人可能没意识到有问题，但合伙人却感到困惑和不满，因为批次进行到一半时，他们仍没了解所有公司。[2]</p><p>At first I was puzzled. How could things be fine at 60 startups and broken at 80? It was only a third more. Then I realized what had happened. We were using an O(n2) algorithm. So of course it blew up. </p><p>起初我很困惑：为什么 60 家公司时一切顺利，80 家就出问题了？不过才多了三分之一而已。后来我意识到，我们用的是 “O (n²)” 算法（复杂度随数量平方增长），所以必然会崩溃。</p><p>The solution we adopted was the classic one in these situations. We sharded the batch into smaller groups of startups, each overseen by a dedicated group of partners. That fixed the problem, and has worked fine ever since. But the batch that broke YC was a powerful demonstration of how individualized the process of advising startups has to be. </p><p>我们采取的解决办法很经典：将批次拆分成更小的初创公司组，每组由专门的合伙人团队负责。问题就此解决，且沿用至今。但 “搞垮 YC 的批次” 有力地证明了：为初创公司提供咨询必须个性化。</p><p>Another related surprise is how bad founders can be at realizing what their problems are. Founders will sometimes come in to talk about some problem, and we’ll discover another much bigger one in the course of the conversation. For example (and this case is all too common), founders will come in to talk about the difficulties they’re having raising money, and after digging into their situation, it turns out the reason is that the company is doing badly, and investors can tell. Or founders will come in worried that they still haven’t cracked the problem of user acquisition, and the reason turns out to be that their product isn’t good enough. There have been times when I’ve asked “Would you use this yourself, if you hadn’t built it?” and the founders, on thinking about it, said “No.” Well, there’s the reason you’re having trouble getting users. </p><p>另一个相关的意外发现是：创始人往往看不清自己的问题所在。有时他们来讨论某个问题，我们却在交谈中发现了一个严重得多的问题。比如（这种情况太常见了），创始人来谈融资困难，深入了解后却发现，原因是公司业务表现不佳，而投资者一眼就能看穿。又或者，他们担心用户获取难题，实则是产品不够好。有好几次，我问：“如果这不是你自己做的，你会用吗？” 创始人想了想回答 “不会”—— 这就是用户获取难的原因。</p><p>Often founders know what their problems are, but not their relative importance. [3] </p><p>通常，创始人知道自己有哪些问题，但分不清它们的重要性。[3] </p><p>They’ll come in to talk about three problems they’re worrying about. One is of moderate importance, one doesn’t matter at all, and one will kill the company if it isn’t addressed immediately. It’s like watching one of those horror movies where the heroine is deeply upset that her boyfriend cheated on her, and only mildly curious about the door that’s mysteriously ajar. You want to say: never mind about your boyfriend, think about that door! Fortunately in office hours you can. So while startups still die with some regularity, it’s rarely because they wandered into a room containing a murderer. The YC partners can warn them where the murderers are. </p><p>他们可能带着三个担忧来咨询：一个中等重要，一个完全无关紧要，还有一个若不立即解决就会置公司于死地。这就像恐怖电影里的场景：女主角为男友出轨而崩溃，却对神秘敞开的门只略感好奇。你真想对她说：别管男友了，看看那扇门！好在办公时间里，我们可以直接点出来。因此，尽管初创公司仍会倒闭，但很少是因为 “误入有凶手的房间”——YC 合伙人会提醒他们哪里有 “凶手”。</p><p>Not that founders listen. That was another big surprise: how often founders don’t listen to us. A couple weeks ago I talked to a partner who had been working for YC for a couple batches and was starting to see the pattern. “They come back a year later,” she said, “and say ‘We wish we’d listened to you.’” </p><p>但问题是，创始人未必会听。这是另一个令人惊讶的发现：他们常常不听我们的建议。几周前，一位共事了几个批次的合伙人跟我说，她发现了一个规律：“一年后，他们会回来对我说‘真该听你的’。”</p><p>It took me a long time to figure out why founders don’t listen. At first I thought it was mere stubbornness. That’s part of the reason, but another and probably more important reason is that so much about startups is counterintuitive. And when you tell someone something counterintuitive, what it sounds to them is wrong. So the reason founders don’t listen to us is that they don’t believe us. At least not till experience teaches them otherwise. [4] </p><p>我花了很久才弄明白创始人不听建议的原因。起初以为是固执，这确实是部分原因，但更重要的是，初创公司的很多事都违背直觉。当你告诉别人一件反直觉的事，在他们听来就是错的。所以，创始人不听建议，是因为不相信 —— 至少在亲身经历证明我们是对的之前不相信。[4]</p><p>The reason startups are so counterintuitive is that they’re so different from most people’s other experiences. No one knows what it’s like except those who’ve done it. Which is why YC partners should usually have been founders themselves. But strangely enough, the counterintuitiveness of startups turns out to be another of the things that make YC work. If it weren’t counterintuitive, founders wouldn’t need our advice about how to do it. </p><p>初创公司之所以反直觉，是因为它们与大多数人的其他经历截然不同。只有亲身经历过的人才懂。这也是为什么 YC 合伙人通常自己也做过创始人。但奇妙的是，这种反直觉恰恰是 YC 能发挥作用的另一个原因：如果一切都符合直觉，创始人就不需要我们的建议了。</p><p>Focus is doubly important for early stage startups, because not only do they have a hundred different problems, they don’t have anyone to work on them except the founders. If the founders focus on things that don’t matter, there’s no one focusing on the things that do. So the essence of what happens at YC is to figure out which problems matter most, then cook up ideas for solving them — ideally at a resolution of a week or less — and then try those ideas and measure how well they worked. The focus is on action, with measurable, near-term results. </p><p>专注对早期初创公司尤为重要，因为它们不仅有上百个问题，还没人能分担 —— 只能靠创始人自己。如果创始人专注于无关紧要的事，就没人去管真正重要的事了。因此，YC 的核心工作是：找出最关键的问题，想出解决办法（最好能在一周内见效），然后尝试并衡量效果。重点是行动，以及可衡量的短期结果。</p><p>This doesn’t imply that founders should rush forward regardless of the consequences. If you correct course at a high enough frequency, you can be simultaneously decisive at a micro scale and tentative at a macro scale. The result is a somewhat winding path, but executed very rapidly, like the path a running back takes downfield. And in practice there’s less backtracking than you might expect. Founders usually guess right about which direction to run in, especially if they have someone experienced like a YC partner to bounce their hypotheses off. And when they guess wrong, they notice fast, because they’ll talk about the results at office hours the next week. [5] </p><p>这并不意味着创始人应该不顾后果地贸然行动。如果能高频调整方向，就能在微观层面果断决策，同时在宏观层面保持试探。结果可能是一条曲折的路，但推进速度极快，就像橄榄球跑卫带球冲阵的路线。实际上，回头路比想象中少：创始人通常能猜对方向，尤其是在有 YC 合伙人这样的过来人帮他们验证假设的情况下。即便猜错了，也能很快发现 —— 因为下周的办公时间他们就要汇报结果了。[5]</p><p>A small improvement in navigational ability can make you a lot faster, because it has a double effect: the path is shorter, and you can travel faster along it when you’re more certain it’s the right one. That’s where a lot of YC’s value lies, in helping founders get an extra increment of focus that lets them move faster. And since moving fast is the essence of a startup, YC in effect makes startups more startup-like. </p><p>导航能力的微小提升能大幅加快速度，原因有二：路径更短，且在确定方向正确时能跑得更快。这正是 YC 的核心价值之一：帮助创始人多一分专注，从而加速前进。而既然速度是初创公司的核心，YC 实际上是让初创公司更 “初创”。</p><p>Speed defines startups. Focus enables speed. YC improves focus. </p><p>速度定义初创公司，专注成就速度，YC 提升专注。</p><p>Why are founders uncertain about what to do? Partly because startups almost by definition are doing something new, which means no one knows how to do it yet, or in most cases even what “it” is. Partly because startups are so counterintuitive generally. And partly because many founders, especially young and ambitious ones, have been trained to win the wrong way. That took me years to figure out. The educational system in most countries trains you to win by hacking the test instead of actually doing whatever it’s supposed to measure. But that stops working when you start a startup. So part of what YC does is to retrain founders to stop trying to hack the test. (It takes a surprisingly long time. A year in, you still see them reverting to their old habits.) </p><p>创始人为何不确定该做什么？部分原因是，初创公司本质上在做新事，没人知道该怎么做，甚至多数时候连 “要做的事到底是什么” 都不清楚。另一部分原因是，初创公司本身就充满反直觉的事。还有一部分原因是，许多创始人 —— 尤其是年轻且有野心的 —— 被训练成了 “为考试而投机” 而非 “为目标而行动”。我花了好几年才意识到这一点。多数国家的教育体系训练人通过 “钻考试空子” 获胜，而非真正做好考试本应衡量的事。但在初创公司里，这一套行不通了。因此，YC 的部分工作是重新训练创始人：别再试图 “钻空子”（这需要的时间长得惊人，一年后仍能看到他们重拾旧习）。</p><p>YC is not simply more experienced founders passing on their knowledge. It’s more like specialization than apprenticeship. The knowledge of the YC partners and the founders have different shapes: It wouldn’t be worthwhile for a founder to acquire the encyclopedic knowledge of startup problems that a YC partner has, just as it wouldn’t be worthwhile for a YC partner to acquire the depth of domain knowledge that a founder has. That’s why it can still be valuable for an experienced founder to do YC, just as it can still be valuable for an experienced athlete to have a coach. </p><p>YC 不只是有经验的创始人传授知识，更像是 “专业化分工” 而非 “学徒制”。YC 合伙人与创始人的知识结构不同：创始人没必要像 YC 合伙人那样掌握关于初创公司问题的百科全书式知识，就像 YC 合伙人也没必要拥有创始人那样深厚的领域知识。这也是为什么即使是有经验的创始人，参加 YC 也仍有价值 —— 就像有经验的运动员也需要教练。</p><p>The other big thing YC gives founders is colleagues, and this may be even more important than the advice of partners. If you look at history, great work clusters around certain places and institutions: Florence in the late 15th century, the University of Göttingen in the late 19th, The New Yorker under Ross, Bell Labs, Xerox PARC. However good you are, good colleagues make you better. Indeed, very ambitious people probably need colleagues more than anyone else, because they’re so starved for them in everyday life. </p><p>YC 给创始人的另一大财富是同伴，这可能比合伙人的建议更重要。纵观历史，伟大的成就往往扎堆出现在特定地点和机构：15 世纪末的佛罗伦萨、19 世纪末的哥廷根大学、罗斯执掌的《纽约客》、贝尔实验室、施乐 PARC。无论你多优秀，优秀的同伴都能让你更出色。事实上，有远大抱负的人或许最需要同伴，因为日常生活中很难找到同类。</p><p>Whether or not YC manages one day to be listed alongside those famous clusters, it won’t be for lack of trying. We were very aware of this historical phenomenon and deliberately designed YC to be one. By this point it’s not bragging to say that it’s the biggest cluster of great startup founders. Even people trying to attack YC concede that. </p><p>无论 YC 未来能否跻身这些著名 “集群” 之列，我们都在努力。我们深知这种历史现象，因此在设计 YC 时就刻意朝这个方向努力。如今可以毫不夸张地说，这里聚集了最多优秀的初创公司创始人 —— 就连批评 YC 的人也不得不承认这一点。</p><p>Colleagues and startup founders are two of the most powerful forces in the world, so you’d expect it to have a big effect to combine them. Before YC, to the extent people thought about the question at all, most assumed they couldn’t be combined — that loneliness was the price of independence. That was how it felt to us when we started our own startup in Boston in the 1990s. We had a handful of older people we could go to for advice (of varying quality), but no peers. There was no one we could commiserate with about the misbehavior of investors, or speculate with about the future of technology. I often tell founders to make something they themselves want, and YC is certainly that: it was designed to be exactly what we wanted when we were starting a startup. </p><p>在 YC 之前，人们即便想到这个问题，也大多认为 “同伴” 与 “初创公司” 不可兼得 —— 孤独是独立创业的代价。20 世纪 90 年代，我们在波士顿创办自己的初创公司时就是这种感受：能咨询的前辈寥寥无几（且建议质量参差不齐），却没有同行。没人能一起吐槽投资者的奇葩行为，也没人能一起畅想技术未来。我常对创始人说 “做自己想要的产品”，YC 本身就是如此 —— 它正是我们创业时渴望拥有的东西。</p><p>One thing we wanted was to be able to get seed funding without having to make the rounds of random rich people. That has become a commodity now, at least in the US. But great colleagues can never become a commodity, because the fact that they cluster in some places means they’re proportionally absent from the rest. </p><p>我们当时想要的，包括不必挨个找随机的富人就能拿到种子轮融资。如今，这在美国已不算难事。但优秀的同伴永远无法 “批量复制”—— 正因为他们聚集在某些地方，其他地方才会稀缺。</p><p>Something magical happens where they do cluster though. The energy in the room at a YC dinner is like nothing else I’ve experienced. We would have been happy just to have one or two other startups to talk to. When you have a whole roomful it’s another thing entirely. </p><p>而当同伴真正聚集时，奇迹就会发生。YC 晚宴上的那种活力，是我在别处从未见过的。我们当初能有一两家同行交流就很满足了，而一屋子同行的感觉完全不同。</p><p>YC founders aren’t just inspired by one another. They also help one another. That’s the happiest thing I’ve learned about startup founders: how generous they can be in helping one another. We noticed this in the first batch and consciously designed YC to magnify it. The result is something far more intense than, say, a university. Between the partners, the alumni, and their batchmates, founders are surrounded by people who want to help them, and can.      </p><p>YC 的创始人不仅相互启发，还彼此帮助。这是我从初创公司创始人身上学到的最令人欣慰的事：他们在帮助同行时能如此慷慨。我们在第一个批次就发现了这一点，并刻意设计 YC 来放大这种精神。结果是，这里的氛围比大学等场所浓烈得多。在合伙人、校友和同批次伙伴的围绕下，创始人身边全是愿意且有能力帮助他们的人。</p><p>Notes </p><p>[1] This is why I’ve never liked it when people refer to YC as a “bootcamp.” It’s intense like a bootcamp, but the opposite in structure. Instead of everyone doing the same thing, they’re each talking to YC partners to figure out what their specific startup needs. </p><p>[1] 这也是我不喜欢人们把 YC 称为 “训练营” 的原因。它和训练营一样高强度，但结构完全相反：不是所有人都做同样的事，而是各自与 YC 合伙人沟通，找到自己公司的特定需求。</p><p>[2] When I say the summer 2012 batch was broken, I mean it felt to the partners that something was wrong. Things weren’t yet so broken that the startups had a worse experience. In fact that batch did unusually well. </p><p>[2] 我说 2012 年夏天的批次 “垮了”，是指合伙人觉得有问题。当时还没到影响初创公司体验的地步，事实上那个批次的表现异常好。</p><p>[3] This situation reminds me of the research showing that people are much better at answering questions than they are at judging how accurate their answers are. The two phenomena feel very similar. </p><p>[3] 这种情况让我想到一项研究：人们回答问题的能力，远好于判断自己答案准确性的能力。这两种现象很相似。</p><p>[4] The Airbnbs were particularly good at listening — partly because they were flexible and disciplined, but also because they’d had such a rough time during the preceding year. They were ready to listen. </p><p>[4] Airbnb 的创始人尤其善于倾听 —— 部分因为他们灵活且自律，也因为前一年经历了太多困境，他们已经做好了倾听的准备。</p><p>[5] The optimal unit of decisiveness depends on how long it takes to get results, and that depends on the type of problem you’re solving. When you’re negotiating with investors, it could be a couple days, whereas if you’re building hardware it could be months.  Thanks to Trevor Blackwell, Jessica Livingston, Harj Taggar, and Garry Tan for reading drafts of this.</p><p>[5] 决策的最佳周期取决于获得结果的时间，而这又取决于问题类型。与投资者谈判可能需要几天，而硬件研发可能需要几个月。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天才的集邮理论</title>
    <link href="/2025/07/26/the-bus-ticket-theory-of-genius/"/>
    <url>/2025/07/26/the-bus-ticket-theory-of-genius/</url>
    
    <content type="html"><![CDATA[<h2 id="The-Bus-Ticket-Theory-of-Genius"><a href="#The-Bus-Ticket-Theory-of-Genius" class="headerlink" title="The Bus Ticket Theory of Genius"></a>The Bus Ticket Theory of Genius</h2><p>原文链接: <a href="https://paulgraham.com/genius.html">https://paulgraham.com/genius.html</a></p><p>November 2019 </p><p>(注：原文直译 The Bus Ticket Theory 为公交车票理论，意指美国有人喜欢不带功利主义的收集不同种类的车票，但国内其实没有这种公交车票，故标题改为集邮理论比较贴切。)</p><p>Everyone knows that to do great work you need both natural ability and determination. But there’s a third ingredient that’s not as well understood: an obsessive interest in a particular topic. </p><p>众所周知，要做出伟大的成就，既需要天赋，也需要决心。但还有第三个要素，其重要性却鲜为人知：对某个特定领域近乎痴迷的兴趣。</p><p>To explain this point I need to burn my reputation with some group of people, and I’m going to choose bus ticket collectors. There are people who collect old bus tickets. Like many collectors, they have an obsessive interest in the minutiae of what they collect. They can keep track of distinctions between different types of bus tickets that would be hard for the rest of us to remember. Because we don’t care enough. What’s the point of spending so much time thinking about old bus tickets? </p><p>要解释这一点，我可能得得罪一部分人 —— 我选择拿公交车票收集者开刀。有些人会收集旧公交车票。和许多收藏者一样，他们会痴迷于所藏物品的细枝末节。他们能分辨出不同公交车票之间的细微差别，而这些差别对我们其他人来说，可能很难记住。因为我们没那么在乎。花这么多时间琢磨旧公交车票，有什么意义呢？</p><p>Which leads us to the second feature of this kind of obsession: there is no point. A bus ticket collector’s love is disinterested. They’re not doing it to impress us or to make themselves rich, but for its own sake. </p><p>这就引出了这种痴迷的第二个特点：它本身没有 “意义”。公交车票收集者的热爱是不带功利心的。他们这么做不是为了给我们留下深刻印象，也不是为了发财，而是单纯因为热爱。</p><p>When you look at the lives of people who’ve done great work, you see a consistent pattern. They often begin with a bus ticket collector’s obsessive interest in something that would have seemed pointless to most of their contemporaries. One of the most striking features of Darwin’s book about his voyage on the Beagle is the sheer depth of his interest in natural history. His curiosity seems infinite. Ditto for Ramanujan, sitting by the hour working out on his slate what happens to series. </p><p>纵观那些做出伟大成就的人的生平，你会发现一个一致的模式：他们往往始于一种类似 “公交车票收集者” 的痴迷 —— 痴迷于某件在同时代大多数人看来毫无意义的事。达尔文在《贝格尔号航行记》中，对自然史的兴趣之深令人惊叹，他的好奇心仿佛无穷无尽。拉马努金也是如此，他会一连几个小时坐在石板前，演算级数的变化。</p><p>It’s a mistake to think they were “laying the groundwork” for the discoveries they made later. There’s too much intention in that metaphor. Like bus ticket collectors, they were doing it because they liked it. </p><p>认为他们是在为后来的发现 “奠定基础”，这是一种误解。这个比喻里包含了太多 “刻意”。就像公交车票收集者一样，他们做这些事，只是因为喜欢。</p><p>But there is a difference between Ramanujan and a bus ticket collector. Series matter, and bus tickets don’t. </p><p>但拉马努金和公交车票收集者之间有一个区别：级数是重要的，而公交车票不是。</p><p>If I had to put the recipe for genius into one sentence, that might be it: to have a disinterested obsession with something that matters. </p><p>如果非要用一句话概括天才的秘诀，或许是：对某个重要的事物抱有不带功利心的痴迷。</p><p>Aren’t I forgetting about the other two ingredients? Less than you might think. An obsessive interest in a topic is both a proxy for ability and a substitute for determination. Unless you have sufficient mathematical aptitude, you won’t find series interesting. And when you’re obsessively interested in something, you don’t need as much determination: you don’t need to push yourself as hard when curiosity is pulling you. </p><p>我是不是忽略了另外两个要素？其实没有你想的那么严重。对一个领域的痴迷，既是能力的体现，也能替代决心。除非你有足够的数学天赋，否则你不会觉得级数有趣。而当你痴迷于某件事时，你就不需要那么多决心了：当好奇心在 “拉着” 你时，你就不用费那么大劲 “推” 自己了。</p><p>An obsessive interest will even bring you luck, to the extent anything can. Chance, as Pasteur said, favors the prepared mind, and if there’s one thing an obsessed mind is, it’s prepared. </p><p>这种痴迷甚至能给你带来运气 —— 如果说 “运气” 真的存在的话。正如巴斯德所说，机遇偏爱有准备的头脑，而痴迷的头脑，无疑是 “有准备” 的。</p><p>The disinterestedness of this kind of obsession is its most important feature. Not just because it’s a filter for earnestness, but because it helps you discover new ideas. </p><p>这种痴迷的 “非功利性” 是其最重要的特点。不仅因为它能筛选出真正的热忱，更因为它能帮你发现新想法。</p><p>The paths that lead to new ideas tend to look unpromising. If they looked promising, other people would already have explored them. How do the people who do great work discover these paths that others overlook? The popular story is that they simply have better vision: because they’re so talented, they see paths that others miss. But if you look at the way great discoveries are made, that’s not what happens. Darwin didn’t pay closer attention to individual species than other people because he saw that this would lead to great discoveries, and they didn’t. He was just really, really interested in such things. </p><p>通往新想法的道路，往往看起来毫无前景。如果它们看起来前途光明，其他人早就去探索了。那些做出伟大成就的人，是如何发现这些被他人忽视的道路的？人们普遍认为，他们只是视力更好：因为天赋异禀，所以能看到别人看不到的路。但如果你仔细观察伟大发现的诞生过程，就会发现事实并非如此。达尔文对单个物种的关注比其他人更密切，不是因为他预见到这会带来伟大的发现，而别人没预见到 —— 他只是真的对这些东西非常非常感兴趣。</p><p>Darwin couldn’t turn it off. Neither could Ramanujan. They didn’t discover the hidden paths that they did because they seemed promising, but because they couldn’t help it. That’s what allowed them to follow paths that someone who was merely ambitious would have ignored. </p><p>达尔文无法停止这种兴趣，拉马努金也一样。他们发现那些被隐藏的道路，不是因为这些路看起来有前景，而是因为他们忍不住。这正是他们能沿着那些 “仅仅有野心的人” 会忽略的道路走下去的原因。</p><p>What rational person would decide that the way to write great novels was to begin by spending several years creating an imaginary elvish language, like Tolkien, or visiting every household in southwestern Britain, like Trollope? No one, including Tolkien and Trollope. </p><p>哪个理性的人会决定，写伟大的小说要从花几年时间创造一种虚构的精灵语开始（比如托尔金），或者去拜访英国西南部的每一户人家（比如特罗洛普）？没人会，包括托尔金和特罗洛普自己。</p><p>The bus ticket theory is similar to Carlyle’s famous definition of genius as an infinite capacity for taking pains. But there are two differences. The bus ticket theory makes it clear that the source of this infinite capacity for taking pains is not infinite diligence, as Carlyle seems to have meant, but the sort of infinite interest that collectors have. It also adds an important qualification: an infinite capacity for taking pains about something that matters. </p><p>这个 “公交车票理论” 有点像卡莱尔对天才的著名定义 ——“无穷的吃苦耐劳能力”。但两者有两个区别。公交车票理论明确指出，这种 “无穷的吃苦耐劳能力” 的源头，并非卡莱尔所暗示的 “无穷的勤奋”，而是收藏者那种 “无穷的兴趣”；此外，它还加了一个重要限定：这种 “无穷的吃苦耐劳” 要针对 “重要的事物”。</p><p>So what matters? You can never be sure. It’s precisely because no one can tell in advance which paths are promising that you can discover new ideas by working on what you’re interested in. </p><p>那么，什么是 “重要的事物”？你永远无法确定。正因为没人能提前知道哪些道路有前景，你才能通过钻研自己感兴趣的事，发现新想法。</p><p>But there are some heuristics you can use to guess whether an obsession might be one that matters. For example, it’s more promising if you’re creating something, rather than just consuming something someone else creates. It’s more promising if something you’re interested in is difficult, especially if it’s more difficult for other people than it is for you. And the obsessions of talented people are more likely to be promising. When talented people become interested in random things, they’re not truly random. </p><p>但有一些方法可以帮你猜测一种痴迷是否可能 “重要”。比如，如果你在 “创造” 某样东西，而不是仅仅 “消费” 别人创造的东西，这种痴迷更有前景；如果你感兴趣的事很难，尤其是对别人比对你更难，这种痴迷更有前景；有天赋的人的痴迷，也更可能有前景 —— 当有天赋的人对 “随机的事” 产生兴趣时，这些事往往并非真的随机。</p><p>But you can never be sure. In fact, here’s an interesting idea that’s also rather alarming if it’s true: it may be that to do great work, you also have to waste a lot of time. </p><p>但你永远无法完全确定。事实上，有一个有趣但可能令人不安的想法：要做出伟大的成就，或许你也得浪费很多时间。</p><p>In many different areas, reward is proportionate to risk. If that rule holds here, then the way to find paths that lead to truly great work is to be willing to expend a lot of effort on things that turn out to be every bit as unpromising as they seem. </p><p>在很多领域，回报与风险成正比。如果这个规律在这里也成立，那么找到能通向伟大成就的道路的方法，就是愿意在那些看起来毫无前景的事情上投入大量精力。</p><p>I’m not sure if this is true. On one hand, it seems surprisingly difficult to waste your time so long as you’re working hard on something interesting. So much of what you do ends up being useful. But on the other hand, the rule about the relationship between risk and reward is so powerful that it seems to hold wherever risk occurs. Newton’s case, at least, suggests that the risk&#x2F;reward rule holds here. He’s famous for one particular obsession of his that turned out to be unprecedentedly fruitful: using math to describe the world. But he had two other obsessions, alchemy and theology, that seem to have been complete wastes of time. He ended up net ahead. His bet on what we now call physics paid off so well that it more than compensated for the other two. But were the other two necessary, in the sense that he had to take big risks to make such big discoveries? I don’t know. </p><p>我不确定这是否正确。一方面，只要你在努力钻研自己感兴趣的事，似乎就很难 “浪费时间”—— 你做的很多事最终都会派上用场。但另一方面，风险与回报的规律如此强大，似乎在所有存在风险的领域都成立。至少牛顿的例子说明，这个规律在这里是成立的。他因对 “用数学描述世界” 的痴迷而闻名，这种痴迷的成果前所未有；但他还有另外两个痴迷 —— 炼金术和神学，它们似乎完全是浪费时间。最终他是 “净赚” 的：他在我们如今所说的 “物理学” 上的投入，回报之高足以弥补另外两个领域的 “亏损”。但问题是，另外两个 “亏损” 是否有必要？也就是说，他是否必须冒巨大的风险，才能有巨大的发现？我不知道。</p><p>Here’s an even more alarming idea: might one make all bad bets? It probably happens quite often. But we don’t know how often, because these people don’t become famous. </p><p>还有一个更令人不安的想法：会不会有人所有的 “赌注” 都下错了？这可能经常发生。但我们不知道有多频繁，因为这些人不会出名。</p><p>It’s not merely that the returns from following a path are hard to predict. They change dramatically over time. 1830 was a really good time to be obsessively interested in natural history. If Darwin had been born in 1709 instead of 1809, we might never have heard of him. </p><p>不仅回报难以预测，其本身还会随时间发生巨大变化。1830 年是痴迷自然史的黄金时代。如果达尔文出生在 1709 年而不是 1809 年，我们可能永远不会听说他。</p><p>What can one do in the face of such uncertainty? One solution is to hedge your bets, which in this case means to follow the obviously promising paths instead of your own private obsessions. But as with any hedge, you’re decreasing reward when you decrease risk. If you forgo working on what you like in order to follow some more conventionally ambitious path, you might miss something wonderful that you’d otherwise have discovered. That too must happen all the time, perhaps even more often than the genius whose bets all fail. </p><p>面对这种不确定性，人能做些什么？一种办法是 “对冲赌注”—— 也就是选择那些明显有前景的道路，而非自己私人的痴迷。但就像所有对冲行为一样，降低风险的同时，你也降低了回报。如果你放弃钻研自己喜欢的事，转而去追随那些被同行公认 “有前景” 的道路，你可能会错过那些本可以发现的精彩。这种情况肯定也经常发生，甚至比 “天才押错赌注” 更常见。</p><p>The other solution is to let yourself be interested in lots of different things. You don’t decrease your upside if you switch between equally genuine interests based on which seems to be working so far. But there is a danger here too: if you work on too many different projects, you might not get deeply enough into any of them. </p><p>另一种办法是让自己对很多不同的事感兴趣。如果你能在几个同样真诚的兴趣之间切换（根据哪一个目前看起来更有进展），你的 “上限” 不会降低。但这里也有风险：如果同时做太多不同的项目，你可能在任何一个项目上都无法钻研得足够深。</p><p>One interesting thing about the bus ticket theory is that it may help explain why different types of people excel at different kinds of work. Interest is much more unevenly distributed than ability. If natural ability is all you need to do great work, and natural ability is evenly distributed, you have to invent elaborate theories to explain the skewed distributions we see among those who actually do great work in various fields. But it may be that much of the skew has a simpler explanation: different people are interested in different things. </p><p>“公交车票理论” 的一个有趣之处在于，它或许能解释为什么不同的人擅长不同的工作。兴趣的分布比能力的分布更不均衡。如果说 “只要有天赋就能做出伟大成就”，而天赋的分布是均衡的，那么我们就必须编造复杂的理论来解释：为什么在各个领域做出伟大成就的人，其分布如此不均？但或许，这种不均有一个更简单的解释：不同的人对不同的事感兴趣。</p><p>The bus ticket theory also explains why people are less likely to do great work after they have children. Here interest has to compete not just with external obstacles, but with another interest, and one that for most people is extremely powerful. It’s harder to find time for work after you have kids, but that’s the easy part. The real change is that you don’t want to. </p><p>这个理论也能解释为什么人有了孩子之后，就不太可能做出伟大的成就了。这时，兴趣不仅要与外部障碍竞争，还要与另一种兴趣竞争 —— 对大多数人来说，这种兴趣极其强烈。有了孩子后，很难找到时间工作，但这只是简单的部分。真正的变化是：你不想工作了。</p><p>But the most exciting implication of the bus ticket theory is that it suggests ways to encourage great work. If the recipe for genius is simply natural ability plus hard work, all we can do is hope we have a lot of ability, and work as hard as we can. But if interest is a critical ingredient in genius, we may be able, by cultivating interest, to cultivate genius. </p><p>但 “公交车票理论” 最令人兴奋的启示是：它指出了培养伟大成就的方法。如果天才的秘诀只是 “天赋 + 努力”，我们能做的就只有祈祷自己天赋异禀，并拼命努力。但如果兴趣是天才的关键要素，那么通过培养兴趣，我们或许就能培养出天才。</p><p>For example, for the very ambitious, the bus ticket theory suggests that the way to do great work is to relax a little. Instead of gritting your teeth and diligently pursuing what all your peers agree is the most promising line of research, maybe you should try doing something just for fun. And if you’re stuck, that may be the vector along which to break out. </p><p>比如，对于那些极具野心的人来说，“公交车票理论” 暗示：做出伟大成就的方法是 “放松一点”。与其咬紧牙关、兢兢业业地追逐那些被同行一致认为 “最有前景” 的研究方向，不如试着做点纯粹为了好玩的事。如果你陷入瓶颈，这或许就是突破的方向。</p><p>I’ve always liked Hamming’s famous double-barrelled question: what are the most important problems in your field, and why aren’t you working on one of them? It’s a great way to shake yourself up. But it may be overfitting a bit. It might be at least as useful to ask yourself: if you could take a year off to work on something that probably wouldn’t be important but would be really interesting, what would it be? </p><p>我一直很喜欢汉明那个著名的 “双问”：你所在领域最重要的问题是什么？你为什么没在研究其中一个？这是一个很棒的自我警醒的方法。但它可能有点 “过度拟合” 了。或许，问自己另一个问题也同样有用：如果你能休假一年，去做一件可能不重要但真的很有趣的事，那会是什么？</p><p>The bus ticket theory also suggests a way to avoid slowing down as you get older. Perhaps the reason people have fewer new ideas as they get older is not simply that they’re losing their edge. It may also be because once you become established, you can no longer mess about with irresponsible side projects the way you could when you were young and no one cared what you did. </p><p>“公交车票理论” 还指出了避免随年龄增长而 “停滞” 的方法。人年纪越大，新想法越少，或许不只是因为 “能力衰退”。也可能是因为，一旦你功成名就，就再也不能像年轻时那样，肆无忌惮地摆弄那些 “不务正业的副业” 了 —— 那时没人在乎你做什么。</p><p>The solution to that is obvious: remain irresponsible. It will be hard, though, because the apparently random projects you take up to stave off decline will read to outsiders as evidence of it. And you yourself won’t know for sure that they’re wrong. But it will at least be more fun to work on what you want. </p><p>解决办法很明显：保持 “不务正业”。但这很难，因为你为了延缓衰退而投身的那些看似随机的项目，在外界看来可能正是 “衰退的证据”。你自己也无法确定他们是不是错的。但至少，做自己想做的事会更有趣。</p><p>It may even be that we can cultivate a habit of intellectual bus ticket collecting in kids. The usual plan in education is to start with a broad, shallow focus, then gradually become more specialized. But I’ve done the opposite with my kids. I know I can count on their school to handle the broad, shallow part, so I take them deep. </p><p>我们甚至可以培养孩子 “智力上的公交车票收集习惯”。教育的常规思路是：先广泛而浅显地涉猎，再逐渐专业化。但我对自己的孩子反其道而行之。我知道学校会负责 “广泛而浅显” 的部分，所以我会带他们 “深入”。</p><p>When they get interested in something, however random, I encourage them to go preposterously, bus ticket collectorly, deep. I don’t do this because of the bus ticket theory. I do it because I want them to feel the joy of learning, and they’re never going to feel that about something I’m making them learn. It has to be something they’re interested in. I’m just following the path of least resistance; depth is a byproduct. But if in trying to show them the joy of learning I also end up training them to go deep, so much the better. </p><p>当他们对某件事产生兴趣 —— 无论多随机 —— 我都会鼓励他们钻得极深、深到像公交车票收集者那样 “离谱”。我这么做不是因为 “公交车票理论”，而是因为我想让他们感受到学习的乐趣。如果是我逼他们学的东西，他们永远不会有这种乐趣。必须是他们自己感兴趣的事。我只是在 “顺水推舟”，而 “深入” 只是副产品。但如果在向他们展示学习乐趣的过程中，顺便培养了他们 “钻研深入” 的能力，那就更好了。</p><p>Will it have any effect? I have no idea. But that uncertainty may be the most interesting point of all. There is so much more to learn about how to do great work. As old as human civilization feels, it’s really still very young if we haven’t nailed something so basic. It’s exciting to think there are still discoveries to make about discovery. If that’s the sort of thing you’re interested in.      </p><p>这会有效果吗？我不知道。但这种不确定性或许是最有趣的一点。关于 “如何做出伟大成就”，我们还有太多要学。人类文明看似悠久，但如果连这么基础的事都没搞明白，那它其实还很年轻。想到 “关于‘发现’本身，还有待发现的东西”，就很令人兴奋 —— 如果你也对这类事感兴趣的话。</p><p>Notes </p><p>[1] There are other types of collecting that illustrate this point better than bus tickets, but they’re also more popular. It seemed just as well to use an inferior example rather than offend more people by telling them their hobby doesn’t matter. </p><p>[1] 还有其他类型的收藏比公交车票更能说明这个问题，但这些收藏也更受欢迎。与其用那些例子得罪更多人（告诉他们他们的爱好无关紧要），不如用一个没那么贴切的例子。</p><p>[2] I worried a little about using the word “disinterested,” since some people mistakenly believe it means not interested. But anyone who expects to be a genius will have to know the meaning of such a basic word, so I figure they may as well start now. </p><p>[2] 我有点担心用 “disinterested” 这个词，因为有些人会误以为它的意思是 “不感兴趣”。但任何想成为天才的人，都必须知道这个基础词汇的含义，所以我觉得他们不妨从现在开始了解。</p><p>[3] Think how often genius must have been nipped in the bud by people being told, or telling themselves, to stop messing about and be responsible. Ramanujan’s mother was a huge enabler. Imagine if she hadn’t been. Imagine if his parents had made him go out and get a job instead of sitting around at home doing math. On the other hand, anyone quoting the preceding paragraph to justify not getting a job is probably mistaken. </p><p>[3] 想想看，有多少天才的萌芽，是因为有人（或自己）被告知 “别瞎折腾了，正经点” 而被扼杀的。拉马努金的母亲就是一个极大的支持者。试想如果她不是这样呢？如果他的父母逼着他出去找工作，而不是让他坐在家里研究数学呢？不过，要是有人引用上一段来为自己不找工作找借口，那他很可能是错的。</p><p>[4] 1709 Darwin is to time what the Milanese Leonardo is to space. </p><p>[4] 出生在 1709 年的达尔文（与时代错位），就好比出生在米兰的达芬奇（与地域错位）。</p><p>[5] “An infinite capacity for taking pains” is a paraphrase of what Carlyle wrote. What he wrote, in his History of Frederick the Great, was “… it is the fruit of ‘genius’ (which means transcendent capacity of taking trouble, first of all)….” Since the paraphrase seems the name of the idea at this point, I kept it. Carlyle’s History was published in 1858. In 1785 Hérault de Séchelles quoted Buffon as saying “Le génie n’est qu’une plus grande aptitude à la patience.” (Genius is only a greater aptitude for patience.) </p><p>[5] “无穷的吃苦耐劳能力” 是对卡莱尔原话的 paraphrase（意译 &#x2F; 改写）。他在《腓特烈大帝传》中写道：“…… 这是‘天才’的成果（而天才首先意味着超凡的吃苦耐劳能力）……” 既然这个改写版本已经成了这个观点的代名词，我就沿用了它。卡莱尔的《腓特烈大帝传》出版于 1858 年。1785 年，埃罗・德・塞谢勒引用布丰的话：“Le génie n’est qu’une plus grande aptitude à la patience.”（天才不过是更强的耐心罢了。）</p><p>[6] Trollope was establishing the system of postal routes. He himself sensed the obsessiveness with which he pursued this goal. It is amusing to watch how a passion will grow upon a man. During those two years it was the ambition of my life to cover the country with rural letter-carriers. </p><p>[6] 特罗洛普当时在建立邮政路线系统。他自己也意识到了这种追求背后的痴迷：<br>“看着一种热情如何在人身上滋长，是件很有趣的事。那两年，我毕生的志向就是让乡村邮递员遍布全国。”</p><p>Even Newton occasionally sensed the degree of his obsessiveness. After computing pi to 15 digits, he wrote in a letter to a friend: I am ashamed to tell you to how many figures I carried these computations, having no other business at the time. </p><p>就连牛顿也偶尔会意识到自己的痴迷程度。在将 π 计算到 15 位小数后，他在给朋友的信中写道：<br>“我不好意思告诉你我把这些计算做到了多少位，因为那时我没别的事可做。”</p><p>Incidentally, Ramanujan was also a compulsive calculator. As Kanigel writes in his excellent biography: One Ramanujan scholar, B. M. Wilson, later told how Ramanujan’s research into number theory was often “preceded by a table of numerical results, carried usually to a length from which most of us would shrink.” </p><p>顺便说一句，拉马努金也是个 “计算狂”。卡尼格尔在他那本出色的传记中写道：“拉马努金的研究者 B. M. 威尔逊后来提到，拉马努金对数论的研究，往往‘始于一张数值结果表，其长度通常会让我们大多数人望而却步’。”</p><p>[7] Working to understand the natural world counts as creating rather than consuming. Newton tripped over this distinction when he chose to work on theology. His beliefs did not allow him to see it, but chasing down paradoxes in nature is fruitful in a way that chasing down paradoxes in sacred texts is not. </p><p>[7] 努力理解自然世界属于 “创造”，而非 “消费”。牛顿在选择研究神学时，就混淆了这一点。他的信仰让他无法看清：探索自然界中的悖论，与探索宗教文本中的悖论，前者能带来成果，后者则不能。</p><p>[8] How much of people’s propensity to become interested in a topic is inborn? My experience so far suggests the answer is: most of it. Different kids get interested in different things, and it’s hard to make a child interested in something they wouldn’t otherwise be. Not in a way that sticks. The most you can do on behalf of a topic is to make sure it gets a fair showing — to make it clear to them, for example, that there’s more to math than the dull drills they do in school. After that it’s up to the child.</p><p>[8] 人们对某个领域产生兴趣的倾向，有多少是天生的？我的经验告诉我：大部分是。不同的孩子会对不同的事物感兴趣，很难让一个孩子对他本不感兴趣的东西产生兴趣 —— 至少无法让这种兴趣持久。你能为某个领域做的，最多是让它得到公平的展示机会 —— 比如让孩子明白，数学不只是学校里那些枯燥的练习。剩下的，就看孩子自己了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是以及如何努力工作</title>
    <link href="/2025/07/25/how-to-work-hard/"/>
    <url>/2025/07/25/how-to-work-hard/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Work-Hard"><a href="#How-to-Work-Hard" class="headerlink" title="How to Work Hard"></a>How to Work Hard</h2><p>原文链接: <a href="https://paulgraham.com/hwh.html">https://paulgraham.com/hwh.html</a></p><p>June 2021 </p><p>It might not seem there’s much to learn about how to work hard. Anyone who’s been to school knows what it entails, even if they chose not to do it. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes. </p><p>关于如何努力工作，似乎没什么太多可学的。任何上过学的人都知道努力工作意味着什么，即便他们选择不这么做。有些 12 岁的孩子就已经非常努力了。但如果问我现在对努力工作的理解是否比上学时更深，答案无疑是肯定的。</p><p>One thing I know is that if you want to do great things, you’ll have to work very hard. I wasn’t sure of that as a kid. Schoolwork varied in difficulty; one didn’t always have to work super hard to do well. And some of the things famous adults did, they seemed to do almost effortlessly. Was there, perhaps, some way to evade hard work through sheer brilliance? Now I know the answer to that question. There isn’t. </p><p>我知道的一点是，若想成就伟大的事业，就必须付出极大的努力。小时候我对此并不确定。学校的功课难度不一，有时不必拼尽全力也能做得很好。而且有些知名人士的成就，看似毫不费力就能达成。或许，仅凭过人的天赋就能规避努力工作的必要？如今我有了答案：不能。</p><p>The reason some subjects seemed easy was that my school had low standards. And the reason famous adults seemed to do things effortlessly was years of practice; they made it look easy. </p><p>有些科目看似简单，是因为我所在的学校标准太低。而那些知名人士看似轻松的成就，背后是多年的练习 —— 他们只是让一切看起来毫不费力。</p><p>Of course, those famous adults usually had a lot of natural ability too. There are three ingredients in great work: natural ability, practice, and effort. You can do pretty well with just two, but to do the best work you need all three: you need great natural ability and to have practiced a lot and to be trying very hard. [1] </p><p>当然，这些知名人士通常也极具天赋。伟大的成就由三个要素构成：天赋、练习和努力。具备其中两项就能做得不错，但要做到顶尖，三者缺一不可：你需要极高的天赋、大量的练习，以及全力以赴的努力。[1]</p><p>Bill Gates, for example, was among the smartest people in business in his era, but he was also among the hardest working. “I never took a day off in my twenties,” he said. “Not one.” It was similar with Lionel Messi. He had great natural ability, but when his youth coaches talk about him, what they remember is not his talent but his dedication and his desire to win. P. G. Wodehouse would probably get my vote for best English writer of the 20th century, if I had to choose. Certainly no one ever made it look easier. But no one ever worked harder. At 74, he wrote </p><blockquote><p>with each new book of mine I have, as I say, the feeling that this time I have picked a lemon in the garden of literature. A good thing, really, I suppose. Keeps one up on one’s toes and makes one rewrite every sentence ten times. Or in many cases twenty times. </p></blockquote><p>比如比尔・盖茨，他是自己时代商界最聪明的人之一，但也是最努力的人之一。他曾说：“我二十多岁时一天都没休息过，一天都没有。” 莱昂内尔・梅西也是如此。他天赋异禀，但青年时期的教练们回忆起他时，印象最深的不是他的天赋，而是他的专注和求胜欲。如果要我选 20 世纪最优秀的英语作家，P.G. 伍德豪斯或许会是我的答案。没人比他更能让写作看起来轻松，但也没人比他更努力。74 岁时，他写道：</p><blockquote><p>“就像我说的，每写一本新书，我都觉得自己像是在文学的花园里摘了个柠檬。不过或许这是件好事，能让我时刻保持警觉，把每句话改写十遍，很多时候甚至二十遍。”</p></blockquote><p>Sounds a bit extreme, you think. And yet Bill Gates sounds even more extreme. Not one day off in ten years? These two had about as much natural ability as anyone could have, and yet they also worked about as hard as anyone could work. You need both. </p><p>你可能觉得这有点极端，但比尔・盖茨的经历更极端。十年间一天都不休息？这两个人拥有常人难以企及的天赋，却也付出了常人难以想象的努力。两者你都需要。</p><p>That seems so obvious, and yet in practice we find it slightly hard to grasp. There’s a faint xor between talent and hard work. It comes partly from popular culture, where it seems to run very deep, and partly from the fact that the outliers are so rare. If great talent and great drive are both rare, then people with both are rare squared. Most people you meet who have a lot of one will have less of the other. But you’ll need both if you want to be an outlier yourself. And since you can’t really change how much natural talent you have, in practice doing great work, insofar as you can, reduces to working very hard. </p><p>这道理看似显而易见，但实践中我们却很难完全理解。人们似乎总觉得天赋和努力是 “非此即彼” 的。这种想法部分源于流行文化（其影响根深蒂固），部分源于 “异类” 本身极为罕见。如果极高的天赋和极强的驱动力都很稀有，那么两者兼具的人就更稀有了。你遇到的大多数人，往往在一方面突出，在另一方面就稍显不足。但如果你想成为 “异类”，就必须两者兼具。既然天赋难以改变，那么在实践中，成就伟大的事业（尽你所能）就归结为付出极大的努力。</p><p>It’s straightforward to work hard if you have clearly defined, externally imposed goals, as you do in school. There is some technique to it: you have to learn not to lie to yourself, not to procrastinate (which is a form of lying to yourself), not to get distracted, and not to give up when things go wrong. But this level of discipline seems to be within the reach of quite young children, if they want it. </p><p>如果目标明确且由外部设定（比如上学时），努力工作就很直接。这需要一些技巧：学会不欺骗自己，不拖延（拖延是欺骗自己的一种形式），不分心，遇到问题不放弃。但只要愿意，即便是小孩子也能达到这种自律水平。</p><p>What I’ve learned since I was a kid is how to work toward goals that are neither clearly defined nor externally imposed. You’ll probably have to learn both if you want to do really great things. </p><p>长大后我才明白，如何为那些既不明确也非外部设定的目标努力。若想成就真正伟大的事业，这两种努力方式你可能都得学会。</p><p>The most basic level of which is simply to feel you should be working without anyone telling you to. Now, when I’m not working hard, alarm bells go off. I can’t be sure I’m getting anywhere when I’m working hard, but I can be sure I’m getting nowhere when I’m not, and it feels awful. [2] </p><p>最基础的是，即便没人督促，你也能意识到自己应该工作。现在，如果我没在努力工作，警钟就会敲响。我不确定努力时是否一定有进展，但我确定不努力时一定毫无进展，这种感觉糟透了。[2]</p><p>There wasn’t a single point when I learned this. Like most little kids, I enjoyed the feeling of achievement when I learned or did something new. As I grew older, this morphed into a feeling of disgust when I wasn’t achieving anything. The one precisely dateable landmark I have is when I stopped watching TV, at age 13. </p><p>我并非在某个瞬间领悟到这一点。和大多数孩子一样，我小时候学到新东西或做成事时，会享受成就感。长大后，这种感觉渐渐变成了 “一事无成时的厌恶”。我能明确追溯的一个节点是 13 岁那年，我不再看电视了。</p><p>Several people I’ve talked to remember getting serious about work around this age. When I asked Patrick Collison when he started to find idleness distasteful, he said </p><blockquote><p>I think around age 13 or 14. I have a clear memory from around then of sitting in the sitting room, staring outside, and wondering why I was wasting my summer holiday. </p></blockquote><p>Perhaps something changes at adolescence. That would make sense. </p><p>我聊过的几个人都记得，大概在这个年纪开始认真对待工作。当我问帕特里克・科里森何时开始厌恶懒散时，他说：</p><blockquote><p>“大概 13 或 14 岁吧。我清楚记得，当时坐在客厅里，望着窗外，纳闷自己为什么在浪费暑假。”</p></blockquote><p>或许青春期会发生一些变化，这似乎说得通。</p><p>Strangely enough, the biggest obstacle to getting serious about work was probably school, which made work (what they called work) seem boring and pointless. I had to learn what real work was before I could wholeheartedly desire to do it. That took a while, because even in college a lot of the work is pointless; there are entire departments that are pointless. </p><p>奇怪的是，认真对待工作的最大障碍或许是学校 —— 学校让 “工作”（他们所谓的工作）显得枯燥又无意义。我必须先明白什么是 “真正的工作”，才能全身心投入。这花了些时间，因为即便是在大学里，很多工作也是无意义的；有些院系甚至完全是摆设。</p><p>But as I learned the shape of real work, I found that my desire to do it slotted into it as if they’d been made for each other. I suspect most people have to learn what work is before they can love it. </p><p>但当我逐渐了解了真正工作的模样后，我发现自己对工作的渴望与它完美契合，仿佛二者本就为彼此而生。我猜想，大多数人都得先弄明白工作究竟是什么，才可能爱上它。</p><p>Hardy wrote eloquently about this in A Mathematician’s Apology: </p><blockquote><p>I do not remember having felt, as a boy, any passion for mathematics, and such notions as I may have had of the career of a mathematician were far from noble. I thought of mathematics in terms of examinations and scholarships: I wanted to beat other boys, and this seemed to be the way in which I could do so most decisively. </p></blockquote><p>He didn’t learn what math was really about till part way through college, when he read Jordan’s Cours d’analyse. </p><blockquote><p>I shall never forget the astonishment with which I read that remarkable work, the first inspiration for so many mathematicians of my generation, and learnt for the first time as I read it what mathematics really meant. </p></blockquote><p>哈代在《一个数学家的辩白》中精辟地描述过这一点：</p><blockquote><p>“我记得小时候，对数学毫无热情，对数学家的职业想象也毫无崇高感。我只把数学和考试、奖学金联系在一起：我想打败其他男孩，而数学似乎是最有效的方式。” </p></blockquote><p>他直到大学期间读了若尔当的《分析教程》，才明白数学的真谛：</p><blockquote><p>“我永远忘不了读那本杰作时的震撼 —— 那是我第一次明白数学真正的意义，这本书也是我们这一代许多数学家的启蒙。”</p></blockquote><p>There are two separate kinds of fakeness you need to learn to discount in order to understand what real work is. One is the kind Hardy encountered in school. Subjects get distorted when they’re adapted to be taught to kids — often so distorted that they’re nothing like the work done by actual practitioners. [3] </p><p>要理解 “真正的工作”，你需要学会忽略两种 “虚假”。一种是哈代在学校遇到的：学科为了适应教学被扭曲，往往扭曲到和从业者的实际工作毫无关系。[3] </p><p>The other kind of fakeness is intrinsic to certain types of work. Some types of work are inherently bogus, or at best mere busywork. </p><p>另一种是某些工作本身固有的虚假 —— 有些工作本质上就是无意义的，顶多算是 “瞎忙”。</p><p>There’s a kind of solidity to real work. It’s not all writing the Principia, but it all feels necessary. That’s a vague criterion, but it’s deliberately vague, because it has to cover a lot of different types. [4] </p><p>真正的工作有一种 “实在感”。并非都像写《自然哲学的数学原理》那样伟大，但都让人觉得 “有必要”。这个标准很模糊，但故意如此，因为它要涵盖太多不同类型的工作。[4]</p><p>Once you know the shape of real work, you have to learn how many hours a day to spend on it. You can’t solve this problem by simply working every waking hour, because in many kinds of work there’s a point beyond which the quality of the result will start to decline. </p><p>明白真正的工作是什么样之后，你需要知道每天该花多少时间在上面。不能醒着就一直工作，因为很多工作超过某个临界点后，质量就会下降。</p><p>That limit varies depending on the type of work and the person. I’ve done several different kinds of work, and the limits were different for each. My limit for the harder types of writing or programming is about five hours a day. Whereas when I was running a startup, I could work all the time. At least for the three years I did it; if I’d kept going much longer, I’d probably have needed to take occasional vacations. [5] </p><p>这个临界点因工作类型和个人而异。我做过几种不同的工作，每种的临界点都不同。较难的写作或编程，我一天最多能做 5 小时。而运营初创公司时，我可以一直工作 —— 至少在那三年里是这样；如果再做更久，可能就得偶尔休假了。[5]</p><p>The only way to find the limit is by crossing it. Cultivate a sensitivity to the quality of the work you’re doing, and then you’ll notice if it decreases because you’re working too hard. Honesty is critical here, in both directions: you have to notice when you’re being lazy, but also when you’re working too hard. And if you think there’s something admirable about working too hard, get that idea out of your head. You’re not merely getting worse results, but getting them because you’re showing off — if not to other people, then to yourself. [6] </p><p>找到临界点的唯一方法是 “越过它”。培养对工作质量的敏感度，你就会注意到是否因过度工作而导致质量下降。诚实在这里至关重要：既要察觉自己是否懒散，也要发现是否工作过度。如果你觉得过度工作很 “可敬”，赶紧丢掉这个想法。你不仅会得到更差的结果，还会因为 “炫耀”（哪怕只是向自己炫耀）而搞砸工作。[6]</p><p>Finding the limit of working hard is a constant, ongoing process, not something you do just once. Both the difficulty of the work and your ability to do it can vary hour to hour, so you need to be constantly judging both how hard you’re trying and how well you’re doing. </p><p>找到努力工作的临界点是一个持续的过程，而非一劳永逸。工作难度和你的能力每时每刻都在变化，所以你需要不断判断自己的努力程度和工作状态。</p><p>Trying hard doesn’t mean constantly pushing yourself to work, though. There may be some people who do, but I think my experience is fairly typical, and I only have to push myself occasionally when I’m starting a project or when I encounter some sort of check. That’s when I’m in danger of procrastinating. But once I get rolling, I tend to keep going. </p><p>不过，努力不意味着一直强迫自己工作。或许有人这样做，但我的经历可能更典型：只有在启动项目或遇到阻碍时，才需要偶尔逼自己一把 —— 这时候最容易拖延。但一旦进入状态，就会自然而然地继续下去。</p><p>What keeps me going depends on the type of work. When I was working on Viaweb, I was driven by fear of failure. I barely procrastinated at all then, because there was always something that needed doing, and if I could put more distance between me and the pursuing beast by doing it, why wait? [7] Whereas what drives me now, writing essays, is the flaws in them. Between essays I fuss for a few days, like a dog circling while it decides exactly where to lie down. But once I get started on one, I don’t have to push myself to work, because there’s always some error or omission already pushing me. </p><p>支撑我坚持的动力因工作类型而异。运营 Viaweb 时，我被 “失败的恐惧” 驱动：总有事情要做，多做一点就能离失败远一点，何必等呢？[7] 而现在写文章，动力来自 “文章的缺陷”：构思期间我会纠结几天，像狗转圈选窝一样。但一旦开始写，就不用逼自己 —— 总有错误或疏漏在推着我前进。</p><p>I do make some amount of effort to focus on important topics. Many problems have a hard core at the center, surrounded by easier stuff at the edges. Working hard means aiming toward the center to the extent you can. Some days you may not be able to; some days you’ll only be able to work on the easier, peripheral stuff. But you should always be aiming as close to the center as you can without stalling. </p><p>我确实会努力聚焦于重要的话题。很多问题的核心很难，周围是容易的边缘内容。努力工作意味着尽可能瞄准核心。有些日子可能做不到，只能处理边缘内容，但你应该始终朝着核心努力。</p><p>The bigger question of what to do with your life is one of these problems with a hard core. There are important problems at the center, which tend to be hard, and less important, easier ones at the edges. So as well as the small, daily adjustments involved in working on a specific problem, you’ll occasionally have to make big, lifetime-scale adjustments about which type of work to do. And the rule is the same: working hard means aiming toward the center — toward the most ambitious problems. </p><p>“人生该做什么” 这个更大的问题，也有这样的 “核心”：中心是重要但困难的问题，边缘是次要且容易的。所以除了日常调整具体工作，你偶尔还需要做人生层面的重大调整：选择哪种工作。原则不变：努力工作意味着瞄准核心 —— 最有野心的问题。</p><p>By center, though, I mean the actual center, not merely the current consensus about the center. The consensus about which problems are most important is often mistaken, both in general and within specific fields. If you disagree with it, and you’re right, that could represent a valuable opportunity to do something new. </p><p>不过，“核心” 指的是 “真正的核心”，而非当前共识中的 “核心”。关于 “哪些问题最重要”，共识往往是错的，无论是在整体还是特定领域。如果你不同意共识且正确，那可能是个做新事的好机会。</p><p>The more ambitious types of work will usually be harder, but although you should not be in denial about this, neither should you treat difficulty as an infallible guide in deciding what to do. If you discover some ambitious type of work that’s a bargain in the sense of being easier for you than other people, either because of the abilities you happen to have, or because of some new way you’ve found to approach it, or simply because you’re more excited about it, by all means work on that. Some of the best work is done by people who find an easy way to do something hard. </p><p>更有野心的工作通常更难，但不必因此却步。如果你发现某种有野心的工作对你来说更容易 —— 因为你的天赋、新方法，或者仅仅是更感兴趣 —— 那就去做。有些最伟大的成就是由 “找到难事的简单解法” 的人完成的。</p><p>As well as learning the shape of real work, you need to figure out which kind you’re suited for. And that doesn’t just mean figuring out which kind your natural abilities match the best; it doesn’t mean that if you’re 7 feet tall, you have to play basketball. What you’re suited for depends not just on your talents but perhaps even more on your interests. A deep interest in a topic makes people work harder than any amount of discipline can. </p><p>除了理解真正的工作是什么样，你还需要找到适合自己的类型。这不只是看天赋匹配 —— 比如身高 7 英尺未必就得打篮球。适合与否不仅取决于天赋，更可能取决于兴趣。对一个领域的浓厚兴趣，能让人比任何纪律都更努力。</p><p>It can be harder to discover your interests than your talents. There are fewer types of talent than interest, and they start to be judged early in childhood, whereas interest in a topic is a subtle thing that may not mature till your twenties, or even later. The topic may not even exist earlier. Plus there are some powerful sources of error you need to learn to discount. Are you really interested in x, or do you want to work on it because you’ll make a lot of money, or because other people will be impressed with you, or because your parents want you to? [8] </p><p>发现兴趣比发现天赋更难。天赋的类型更少，从小就被评判；而对一个领域的兴趣很微妙，可能二十多岁甚至更晚才成熟，甚至这个领域之前都不存在。此外，你需要排除一些干扰：你真的对 X 感兴趣，还是因为能赚大钱、让人佩服，或者父母希望你做？[8]</p><p>The difficulty of figuring out what to work on varies enormously from one person to another. That’s one of the most important things I’ve learned about work since I was a kid. As a kid, you get the impression that everyone has a calling, and all they have to do is figure out what it is. That’s how it works in movies, and in the streamlined biographies fed to kids. Sometimes it works that way in real life. Some people figure out what to do as children and just do it, like Mozart. But others, like Newton, turn restlessly from one kind of work to another. Maybe in retrospect we can identify one as their calling — we can wish Newton spent more time on math and physics and less on alchemy and theology — but this is an illusion induced by hindsight bias. There was no voice calling to him that he could have heard. </p><p>“找到该做什么” 的难度因人而异，这是我长大后对工作最重要的领悟之一。小时候，我觉得每个人都有 “使命”，只需找到它就行 —— 电影和给孩子看的简化传记都这么说。现实中有时确实如此：有些人小时候就确定方向并坚持，比如莫扎特。但另一些人，比如牛顿，会不安地从一种工作转向另一种。或许回头看我们能认定他的 “使命”（希望他多花时间在数学和物理上，少在炼金术和神学上），但这是后见之明的错觉 —— 他从未听到过所谓的 “召唤”。</p><p>So while some people’s lives converge fast, there will be others whose lives never converge. And for these people, figuring out what to work on is not so much a prelude to working hard as an ongoing part of it, like one of a set of simultaneous equations. For these people, the process I described earlier has a third component: along with measuring both how hard you’re working and how well you’re doing, you have to think about whether you should keep working in this field or switch to another. If you’re working hard but not getting good enough results, you should switch. It sounds simple expressed that way, but in practice it’s very difficult. You shouldn’t give up on the first day just because you work hard and don’t get anywhere. You need to give yourself time to get going. But how much time? And what should you do if work that was going well stops going well? How much time do you give yourself then? [9] </p><p>所以，有些人的人生很快聚焦，有些人则永远不会。对后者来说，“找到该做什么” 不是努力工作的前奏，而是其一部分，就像一组联立方程。这些人需要不断判断：既要衡量努力程度和成果，也要思考是否该换个领域。如果努力了却没好结果，就该换。说起来简单，做起来很难：不能第一天没进展就放弃，需要给时间让自己进入状态。但给多久？如果曾经顺利的工作突然停滞，又该给多久？[9]</p><p>What even counts as good results? That can be really hard to decide. If you’re exploring an area few others have worked in, you may not even know what good results look like. History is full of examples of people who misjudged the importance of what they were working on. </p><p>“什么算好结果” 也很难判断。如果在很少人涉足的领域探索，你可能都不知道好结果是什么样。历史上很多人都误判了自己工作的重要性。</p><p>The best test of whether it’s worthwhile to work on something is whether you find it interesting. That may sound like a dangerously subjective measure, but it’s probably the most accurate one you’re going to get. You’re the one working on the stuff. Who’s in a better position than you to judge whether it’s important, and what’s a better predictor of its importance than whether it’s interesting? </p><p>判断一件事是否值得做，最好的标准是 “你是否觉得它有趣”。这听起来主观，但可能是最准确的。你是做这件事的人，谁比你更适合判断它是否重要？而 “有趣” 往往是 “重要” 的最佳预示。</p><p>For this test to work, though, you have to be honest with yourself. Indeed, that’s the most striking thing about the whole question of working hard: how at each point it depends on being honest with yourself. </p><p>但这需要你对自己诚实。事实上，努力工作的整个问题中，最突出的一点就是：每一步都取决于对自己诚实。</p><p>Working hard is not just a dial you turn up to 11. It’s a complicated, dynamic system that has to be tuned just right at each point. You have to understand the shape of real work, see clearly what kind you’re best suited for, aim as close to the true core of it as you can, accurately judge at each moment both what you’re capable of and how you’re doing, and put in as many hours each day as you can without harming the quality of the result. This network is too complicated to trick. But if you’re consistently honest and clear-sighted, it will automatically assume an optimal shape, and you’ll be productive in a way few people are.      </p><p>努力工作不是把 “旋钮” 拧到最大。它是一个复杂的动态系统，需要随时调整：你要理解真正的工作是什么样，看清自己最适合哪种，尽可能瞄准其核心，时刻判断自己的能力和状态，每天投入不影响质量的时间。这个系统太复杂，无法欺骗。但如果你始终诚实、清醒，它自然会达到最佳状态，让你拥有少数人才能达到的生产力。</p><p>Notes </p><p>[1] In “The Bus Ticket Theory of Genius” I said the three ingredients in great work were natural ability, determination, and interest. That’s the formula in the preceding stage; determination and interest yield practice and effort. </p><p>[1] 在《天才的公交车票理论》中，我说过伟大工作的三个要素是天赋、决心和兴趣。这是前期的公式；决心和兴趣会转化为练习和努力。</p><p>[2] I mean this at a resolution of days, not hours. You’ll often get somewhere while not working in the sense that the solution to a problem comes to you while taking a shower, or even in your sleep, but only because you were working hard on it the day before. It’s good to go on vacation occasionally, but when I go on vacation, I like to learn new things. I wouldn’t like just sitting on a beach. </p><p>[2] 我说的是按 “天” 来衡量，而非 “小时”。你常常会在 “不工作” 时有所进展 —— 比如洗澡时甚至睡梦中想到问题的解决方案，但这只是因为前一天你在这件事上付出了努力。偶尔度假是好的，但我度假时喜欢学新东西。我不喜欢只是坐在沙滩上。</p><p>[3] The thing kids do in school that’s most like the real version is sports. Admittedly because many sports originated as games played in schools. But in this one area, at least, kids are doing exactly what adults do. In the average American high school, you have a choice of pretending to do something serious, or seriously doing something pretend. Arguably the latter is no worse. </p><p>[3] 孩子们在学校做的事情中，最接近 “真实版本” 的是体育运动。诚然，很多运动起源于学校里的游戏。但至少在这一领域，孩子们做的和成年人完全一样。在普通的美国高中，你可以选择 “假装做正经事”，或者 “认真做假事”。可以说，后者并不比前者差。</p><p>[4] Knowing what you want to work on doesn’t mean you’ll be able to. Most people have to spend a lot of their time working on things they don’t want to, especially early on. But if you know what you want to do, you at least know what direction to nudge your life in. </p><p>[4] 知道自己想做什么工作，不代表就能去做。大多数人不得不花大量时间做自己不想做的事，尤其是在早期。但如果你知道自己想做什么，至少知道该把人生推向哪个方向。</p><p>[5] The lower time limits for intense work suggest a solution to the problem of having less time to work after you have kids: switch to harder problems. In effect I did that, though not deliberately. </p><p>[5] 高强度工作的时间限制较低，这为 “有孩子后工作时间减少” 的问题提供了一个解决方案：转向更难的问题。实际上我就是这么做的，尽管并非刻意。</p><p>[6] Some cultures have a tradition of performative hard work. I don’t love this idea, because (a) it makes a parody of something important and (b) it causes people to wear themselves out doing things that don’t matter. I don’t know enough to say for sure whether it’s net good or bad, but my guess is bad. </p><p>[6] 有些文化有 “表演式努力” 的传统。我不喜欢这个想法，因为（a）它把重要的事情变成了滑稽模仿；（b）它让人们在无意义的事情上耗尽精力。我了解得不够多，无法确定其整体是好是坏，但我猜是坏的。</p><p>[7] One of the reasons people work so hard on startups is that startups can fail, and when they do, that failure tends to be both decisive and conspicuous. </p><p>[7] 人们在初创公司如此努力的原因之一是：初创公司可能失败，而失败往往是决定性且显眼的。</p><p>[8] It’s ok to work on something to make a lot of money. You need to solve the money problem somehow, and there’s nothing wrong with doing that efficiently by trying to make a lot at once. I suppose it would even be ok to be interested in money for its own sake; whatever floats your boat. Just so long as you’re conscious of your motivations. The thing to avoid is unconsciously letting the need for money warp your ideas about what kind of work you find most interesting. </p><p>[8] 为了赚大钱而工作是没问题的。你总得解决钱的问题，通过努力一次性多赚点来高效解决，这没什么不对。我甚至觉得，为了钱本身而对钱感兴趣也没问题 —— 只要是你喜欢的就好。关键是要清楚自己的动机。要避免的是：无意识地让对钱的需求扭曲你对 “自己最感兴趣的工作” 的判断。</p><p>[9] Many people face this question on a smaller scale with individual projects. But it’s easier both to recognize and to accept a dead end in a single project than to abandon some type of work entirely. The more determined you are, the harder it gets. Like a Spanish Flu victim, you’re fighting your own immune system: Instead of giving up, you tell yourself, I should just try harder. And who can say you’re not right?</p><p>[9] 很多人在单个项目中也会遇到类似问题，只是规模更小。但承认某个项目走进死胡同，比彻底放弃某类工作要容易得多。你越有决心，就越难放弃。就像西班牙流感患者一样，你在和自己的免疫系统对抗：你告诉自己 “应该更努力”，而不是放弃。可谁又能说你不对呢？</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创办谷歌</title>
    <link href="/2025/07/24/how-to-start-google/"/>
    <url>/2025/07/24/how-to-start-google/</url>
    
    <content type="html"><![CDATA[<h2 id="HOW-TO-START-GOOGLE"><a href="#HOW-TO-START-GOOGLE" class="headerlink" title="HOW TO START GOOGLE"></a>HOW TO START GOOGLE</h2><p>原文链接: <a href="https://paulgraham.com/google.html">https://paulgraham.com/google.html</a></p><p>March 2024 </p><h3 id="一、创业——为自己的项目奋斗"><a href="#一、创业——为自己的项目奋斗" class="headerlink" title="一、创业——为自己的项目奋斗"></a>一、创业——为自己的项目奋斗</h3><p>(This is a talk I gave to 14 and 15 year olds about what to do now if they might want to start a startup later. Lots of schools think they should tell students something about startups. This is what I think they should tell them.) </p><p>（这是我给 14 至 15 岁青少年的演讲，内容关于如果未来想创业，现在应该做什么。许多学校认为需要向学生传授创业知识，以下是我认为他们该传达的内容。）</p><p>Most of you probably think that when you’re released into the so-called real world you’ll eventually have to get some kind of job. That’s not true, and today I’m going to talk about a trick you can use to avoid ever having to get a job. The trick is to start your own company. </p><p>你们中的大多数人可能认为，当你们进入所谓的 “现实世界” 后，最终都得找份工作。但事实并非如此。今天我要分享一个让你们永远不用打工的秘诀 —— 创办自己的公司。</p><p>So it’s not a trick for avoiding work, because if you start your own company you’ll work harder than you would if you had an ordinary job. But you will avoid many of the annoying things that come with a job, including a boss telling you what to do. </p><p>这并非逃避劳动的捷径，因为创业会比普通工作更辛苦，但你能避开职场中诸多烦心事，比如被老板颐指气使。</p><p>It’s more exciting to work on your own project than someone else’s. And you can also get a lot richer. In fact, this is the standard way to get really rich. If you look at the lists of the richest people that occasionally get published in the press, nearly all of them did it by starting their own companies. </p><p>为自己的项目奋斗比为他人打工更令人兴奋，也能让你更富有。事实上，这是通往财富的常规路径。看看媒体偶尔公布的富豪榜，几乎所有人都是通过创业积累财富的。</p><p>Starting your own company can mean anything from starting a barber shop to starting Google. I’m here to talk about one extreme end of that continuum. I’m going to tell you how to start Google. </p><p>创业可以是开理发店，也可以是创办谷歌。我今天要探讨的是这个光谱的极端 —— 如何创办谷歌。</p><p>The companies at the Google end of the continuum are called startups when they’re young. The reason I know about them is that my wife Jessica and I started something called Y Combinator that is basically a startup factory. Since 2005, Y Combinator has funded over 4000 startups. So we know exactly what you need to start a startup, because we’ve helped people do it for the last 19 years. </p><p>处于谷歌级别的初创公司在早期被称为 “startups”（初创企业）。我对这类公司的了解源于我和妻子杰西卡创立的 Y Combinator—— 一个 “初创企业工厂”。自 2005 年以来，我们已投资超过 4000 家初创公司，因此深知创业所需的要素，毕竟我们用了 19 年时间帮助人们实现这一目标。</p><p>You might have thought I was joking when I said I was going to tell you how to start Google. You might be thinking “How could we start Google?” But that’s effectively what the people who did start Google were thinking before they started it. If you’d told Larry Page and Sergey Brin, the founders of Google, that the company they were about to start would one day be worth over a trillion dollars, their heads would have exploded. </p><p>你可能觉得我在开玩笑，毕竟 “如何创办谷歌” 听起来遥不可及。但当年拉里・佩奇和谢尔盖・布林在创立谷歌前，也正是这么想的。如果当时告诉他们，这家即将成立的公司未来市值会超过万亿美元，他们肯定会惊掉下巴。</p><h3 id="二、怎样开始创业"><a href="#二、怎样开始创业" class="headerlink" title="二、怎样开始创业"></a>二、怎样开始创业</h3><p>All you can know when you start working on a startup is that it seems worth pursuing. You can’t know whether it will turn into a company worth billions or one that goes out of business. So when I say I’m going to tell you how to start Google, I mean I’m going to tell you how to get to the point where you can start a company that has as much chance of being Google as Google had of being Google. [1] </p><p>创业初期，你唯一能确定的是项目值得尝试，却无法预知它会成为价值千亿的巨头还是黯然倒闭。因此，当我说 “如何创办谷歌” 时，实际是指如何让你的公司拥有与谷歌当年相当的成功潜力。</p><p>How do you get from where you are now to the point where you can start a successful startup? You need three things. You need to be good at some kind of technology, you need an idea for what you’re going to build, and you need cofounders to start the company with. </p><p>从现在到成功创业，你需要具备三点：掌握某项技术、拥有产品创意、找到联合创始人。</p><h4 id="掌握技术"><a href="#掌握技术" class="headerlink" title="掌握技术"></a>掌握技术</h4><p>How do you get good at technology? And how do you choose which technology to get good at? Both of those questions turn out to have the same answer: work on your own projects. Don’t try to guess whether gene editing or LLMs or rockets will turn out to be the most valuable technology to know about. No one can predict that. Just work on whatever interests you the most. You’ll work much harder on something you’re interested in than something you’re doing because you think you’re supposed to. </p><p><strong>如何掌握技术？</strong> 答案很简单：动手做项目。别纠结于基因编辑、大语言模型或航天技术哪个更有前景，没人能预测未来。选择你最感兴趣的领域，因为兴趣驱动的学习效率远超被动任务。</p><p>If you’re not sure what technology to get good at, get good at programming. That has been the source of the median startup for the last 30 years, and this is probably not going to change in the next 10. </p><p>若不确定方向，编程是个稳妥选择。过去 30 年，编程是半数初创企业的核心技能，未来十年这一趋势看起来不会改变。</p><p>Those of you who are taking computer science classes in school may at this point be thinking, ok, we’ve got this sorted. We’re already being taught all about programming. But sorry, this is not enough. You have to be working on your own projects, not just learning stuff in classes. You can do well in computer science classes without ever really learning to program. In fact you can graduate with a degree in computer science from a top university and still not be any good at programming. That’s why tech companies all make you take a coding test before they’ll hire you, regardless of where you went to university or how well you did there. They know grades and exam results prove nothing. </p><p>现在正在上计算机课的同学可能会想：“好了，这部分我们搞定了，我们已经在学编程了。” 但抱歉，这还不够。你必须做自己的项目，而不只是在课堂上学习。就算计算机课成绩很好，也可能根本没学会编程。事实上，就算从顶尖大学的计算机系毕业，也可能还是不擅长编程。这就是为什么科技公司招人时都要让你参加编程测试，不管你毕业于哪所大学、成绩多好 —— 他们知道分数和考试结果说明不了什么。</p><p>If you really want to learn to program, you have to work on your own projects. You learn so much faster that way. Imagine you’re writing a game and there’s something you want to do in it, and you don’t know how. You’re going to figure out how a lot faster than you’d learn anything in a class. </p><p>如果真想学会编程，就得做自己的项目。用这种方式学习，速度会快得多。比如你在写一个游戏，遇到某个想实现的功能却不知道怎么做，你琢磨出来的速度会比在课堂上学任何东西都快。</p><p>You don’t have to learn programming, though. If you’re wondering what counts as technology, it includes practically everything you could describe using the words “make” or “build.” So welding would count, or making clothes, or making videos. Whatever you’re most interested in. The critical distinction is whether you’re producing or just consuming. Are you writing computer games, or just playing them? That’s the cutoff. </p><p>不过你也不一定非要学编程。要是好奇 “技术” 包括哪些，其实几乎所有能用 “制作” 或 “建造” 来描述的事都算：焊接、做衣服、拍视频等等，只要是你最感兴趣的就行。关键区别在于：你是在 “创造”，还是只是 “消费”？是在写电脑游戏，还是只是玩游戏？这是分水岭。</p><p>Steve Jobs, the founder of Apple, spent time when he was a teenager studying calligraphy — the sort of beautiful writing that you see in medieval manuscripts. No one, including him, thought that this would help him in his career. He was just doing it because he was interested in it. But it turned out to help him a lot. The computer that made Apple really big, the Macintosh, came out at just the moment when computers got powerful enough to make letters like the ones in printed books instead of the computery-looking letters you see in 8 bit games. Apple destroyed everyone else at this, and one reason was that Steve was one of the few people in the computer business who really got graphic design. </p><p>苹果公司创始人史蒂夫・乔布斯十几岁时学过书法 —— 就是那种中世纪手稿里的漂亮字体。当时没人（包括他自己）觉得这对他的职业生涯有帮助，他只是因为感兴趣才学的。但后来这事儿帮了他大忙。让苹果真正壮大的电脑 Macintosh 问世时，恰逢计算机性能足以呈现印刷书籍般的字体，而不是 8 位游戏里那种 “计算机感” 的字体。苹果在这方面碾压了所有对手，原因之一就是：乔布斯是当时计算机行业里少数真正懂平面设计的人。</p><p>Don’t feel like your projects have to be serious. They can be as frivolous as you like, so long as you’re building things you’re excited about. Probably 90% of programmers start out building games. They and their friends like to play games. So they build the kind of things they and their friends want. And that’s exactly what you should be doing at 15 if you want to start a startup one day. </p><p>别觉得你的项目必须 “正经”。只要是你热衷于打造的东西，哪怕再琐碎也没关系。大概 90% 的程序员都是从做游戏起步的。他们和朋友喜欢玩游戏，所以就做自己和朋友想要的东西。如果你 15 岁，未来想创业，就该这么做。</p><p>You don’t have to do just one project. In fact it’s good to learn about multiple things. Steve Jobs didn’t just learn calligraphy. He also learned about electronics, which was even more valuable. Whatever you’re interested in. (Do you notice a theme here?) </p><p>你也不用只做一个项目。其实多学几样东西是好事。史蒂夫・乔布斯不光学了书法，还学了电子学，后者甚至更有价值。总之，选你感兴趣的就行。（发现规律了吗？）</p><p>So that’s the first of the three things you need, to get good at some kind or kinds of technology. You do it the same way you get good at the violin or football: practice. If you start a startup at 22, and you start writing your own programs now, then by the time you start the company you’ll have spent at least 7 years practicing writing code, and you can get pretty good at anything after practicing it for 7 years. </p><p>以上就是三样东西中的第一样：精通一种或几种技术。做到这一点的方法，和学好小提琴或足球一样：练习。如果你 22 岁创业，现在就开始写程序，那么到创业时，你至少已经练了 7 年编程 —— 任何事练 7 年，都能做得相当不错。</p><h4 id="找到创业创意"><a href="#找到创业创意" class="headerlink" title="找到创业创意"></a>找到创业创意</h4><p>Let’s suppose you’re 22 and you’ve succeeded: You’re now really good at some technology. How do you get startup ideas? It might seem like that’s the hard part. Even if you are a good programmer, how do you get the idea to start Google?</p><p>假设你 22 岁时成功了：已经精通某种技术。那创业创意从哪来？这似乎是最难的部分。就算你是个优秀的程序员，怎么会想到要创办谷歌呢？</p><p>Actually it’s easy to get startup ideas once you’re good at technology. Once you’re good at some technology, when you look at the world you see dotted outlines around the things that are missing. You start to be able to see both the things that are missing from the technology itself, and all the broken things that could be fixed using it, and each one of these is a potential startup. </p><p>其实，一旦精通了某种技术，找创业创意就不难了。当你擅长某样技术，看世界时就会发现很多 “缺失的轮廓”：技术本身的不足、以及能用这项技术解决的各种问题，每一个都是潜在的创业机会。</p><p>In the town near our house there’s a shop with a sign warning that the door is hard to close. The sign has been there for several years. To the people in the shop it must seem like this mysterious natural phenomenon that the door sticks, and all they can do is put up a sign warning customers about it. But any carpenter looking at this situation would think “why don’t you just plane off the part that sticks?” </p><p>我家附近的镇上有个商店，门上挂着块牌子，提醒顾客 “门不好关”。这块牌子挂了好几年了。对店里的人来说，门老卡住可能像个神秘的自然现象，他们能做的只是挂个牌子提醒顾客。但任何一个木匠看到这种情况都会想：“为什么不把卡住的地方刨掉呢？”</p><p>Once you’re good at programming, all the missing software in the world starts to become as obvious as a sticking door to a carpenter. I’ll give you a real world example. Back in the 20th century, American universities used to publish printed directories with all the students’ names and contact info. When I tell you what these directories were called, you’ll know which startup I’m talking about. They were called facebooks, because they usually had a picture of each student next to their name. </p><p>一旦你擅长编程，世界上所有缺失的软件就会像木匠眼里卡住的门一样明显。举个真实的例子：20 世纪时，美国大学会出版纸质名录，上面有所有学生的名字和联系方式。我一说这些名录叫什么，你就知道我在说哪个初创企业了 —— 它们叫 “facebooks”（脸书），因为通常每个学生的名字旁边都有照片。</p><p>So Mark Zuckerberg shows up at Harvard in 2002, and the university still hasn’t gotten the facebook online. Each individual house has an online facebook, but there isn’t one for the whole university. The university administration has been diligently having meetings about this, and will probably have solved the problem in another decade or so. Most of the students don’t consciously notice that anything is wrong. But Mark is a programmer. He looks at this situation and thinks “Well, this is stupid. I could write a program to fix this in one night. Just let people upload their own photos and then combine the data into a new site for the whole university.” So he does. And almost literally overnight he has thousands of users. </p><p>2002 年，马克・扎克伯格来到哈佛大学，当时学校还没把 “facebooks” 搬到网上。各个学院有自己的在线名录，但全校范围的没有。学校管理层一直在开会讨论这事儿，可能再过十年才能解决。大多数学生没意识到这是个问题。但马克是个程序员，他看到这种情况就想：“这也太蠢了。我一晚上就能写个程序解决 —— 让大家上传自己的照片，然后把数据整合到一个全校性的新网站上。” 于是他就做了，几乎一夜之间就有了数千用户。</p><p>Of course Facebook was not a startup yet. It was just a… project. There’s that word again. Projects aren’t just the best way to learn about technology. They’re also the best source of startup ideas. </p><p>当然，当时的 Facebook 还不是初创企业，只是个…… 项目。又是 “项目” 这个词。项目不仅是学习技术的最佳方式，也是创业创意的最佳来源。</p><p>Facebook was not unusual in this respect. Apple and Google also began as projects. Apple wasn’t meant to be a company. Steve Wozniak just wanted to build his own computer. It only turned into a company when Steve Jobs said “Hey, I wonder if we could sell plans for this computer to other people.” That’s how Apple started. They weren’t even selling computers, just plans for computers. Can you imagine how lame this company seemed? </p><p>在这一点上，Facebook 并不特殊。苹果和谷歌最初也都是项目。苹果一开始根本没想做成公司，史蒂夫・沃兹尼亚克只是想自己造一台电脑。后来史蒂夫・乔布斯说：“说不定我们可以把电脑设计图卖给别人。” 苹果就这样诞生了 —— 他们当时甚至不卖电脑，只卖设计图。你能想象这家公司当时看起来多不起眼吗？</p><p>Ditto for Google. Larry and Sergey weren’t trying to start a company at first. They were just trying to make search better. Before Google, most search engines didn’t try to sort the results they gave you in order of importance. If you searched for “rugby” they just gave you every web page that contained the word “rugby.” And the web was so small in 1997 that this actually worked! Kind of. There might only be 20 or 30 pages with the word “rugby,” but the web was growing exponentially, which meant this way of doing search was becoming exponentially more broken. Most users just thought, “Wow, I sure have to look through a lot of search results to find what I want.” Door sticks. But like Mark, Larry and Sergey were programmers. Like Mark, they looked at this situation and thought “Well, this is stupid. Some pages about rugby matter more than others. Let’s figure out which those are and show them first.” </p><p>谷歌也是如此。拉里和谢尔盖一开始没打算创业，只是想改进搜索功能。在谷歌出现之前，大多数搜索引擎不会按重要性排序结果。如果你搜 “橄榄球”，它们只会列出所有包含 “橄榄球” 这个词的网页。1997 年时，互联网还很小，这种方式勉强能用 —— 可能只有 20、30 个网页包含这个词。但互联网在呈指数级增长，这意味着这种搜索方式的缺陷也在呈指数级扩大。大多数用户只会想：“哇，要翻这么多结果才能找到想要的。” 就像门卡住了一样。但和马克一样，拉里和谢尔盖是程序员，他们看到这种情况就想：“这也太蠢了。有些关于橄榄球的网页肯定比其他的重要，我们得找出哪些更重要，把它们排在前面。”</p><p>It’s obvious in retrospect that this was a great idea for a startup. It wasn’t obvious at the time. It’s never obvious. If it was obviously a good idea to start Apple or Google or Facebook, someone else would have already done it. That’s why the best startups grow out of projects that aren’t meant to be startups. You’re not trying to start a company. You’re just following your instincts about what’s interesting. And if you’re young and good at technology, then your unconscious instincts about what’s interesting are better than your conscious ideas about what would be a good company. </p><p>现在回头看，这显然是个伟大的创业创意，但当时并非如此。如果创办苹果、谷歌或 Facebook 的创意在当时就显而易见，早就有人做了。这就是为什么最好的初创企业都源于 “没打算做成初创企业” 的项目。你不是在刻意 “创业”，只是凭着直觉去做有趣的事。如果你年轻又擅长技术，那么你对 “什么有趣” 的潜意识直觉，会比你对 “什么能成好公司” 的有意识想法更靠谱。</p><p>So it’s critical, if you’re a young founder, to build things for yourself and your friends to use. The biggest mistake young founders make is to build something for some mysterious group of other people. But if you can make something that you and your friends truly want to use — something your friends aren’t just using out of loyalty to you, but would be really sad to lose if you shut it down — then you almost certainly have the germ of a good startup idea. It may not seem like a startup to you. It may not be obvious how to make money from it. But trust me, there’s a way. </p><p>所以对年轻创业者来说，关键是：做自己和朋友会用的东西。年轻创业者最大的错误，就是为某个神秘的 “其他人” 做东西。但如果你能做出自己和朋友真心想用的东西 —— 朋友用它不是因为对你的忠诚度，而是如果关掉它会真的很失落 —— 那你几乎肯定抓住了一个好创业创意的萌芽。它可能在你看来不像个 “初创企业”，可能也不清楚怎么靠它赚钱。但相信我，总有办法的。</p><p>What you need in a startup idea, and all you need, is something your friends actually want. And those ideas aren’t hard to see once you’re good at technology. There are sticking doors everywhere. [2] </p><p>一个创业创意需要的，也仅仅需要的，是你的朋友真的想要它。一旦你擅长技术，这种创意其实随处可见。到处都是 “卡住的门”。[2]</p><h4 id="找到联合创始人"><a href="#找到联合创始人" class="headerlink" title="找到联合创始人"></a>找到联合创始人</h4><p>Now for the third and final thing you need: a cofounder, or cofounders. The optimal startup has two or three founders, so you need one or two cofounders. How do you find them? Can you predict what I’m going to say next? It’s the same thing: projects. You find cofounders by working on projects with them. What you need in a cofounder is someone who’s good at what they do and that you work well with, and the only way to judge this is to work with them on things. </p><p>现在说第三样，也是最后一样你需要的东西：联合创始人（一个或多个）。最理想的初创企业有 2 到 3 个创始人，所以你需要 1 到 2 个联合创始人。怎么找到他们？能猜到我要说什么吗？还是那句话：项目。通过一起做项目找到联合创始人。你需要的联合创始人，得是擅长自己领域、且能和你默契合作的人，而判断这一点的唯一方法，就是和他们一起做事。</p><p>At this point I’m going to tell you something you might not want to hear. It really matters to do well in your classes, even the ones that are just memorization or blathering about literature, because you need to do well in your classes to get into a good university. And if you want to start a startup you should try to get into the best university you can, because that’s where the best cofounders are. It’s also where the best employees are. When Larry and Sergey started Google, they began by just hiring all the smartest people they knew out of Stanford, and this was a real advantage for them. </p><p>这里我要说件你们可能不爱听的事：功课一定要学好，哪怕是那些只需要死记硬背或空谈文学的课。因为你需要好成绩才能进好大学。如果你想创业，就得努力进最好的大学，因为最好的联合创始人在那里，最好的员工也在那里。拉里和谢尔盖创办谷歌时，一开始就从斯坦福招了所有他们认识的最聪明的人，这对他们来说是个巨大优势。</p><p>The empirical evidence is clear on this. If you look at where the largest numbers of successful startups come from, it’s pretty much the same as the list of the most selective universities. </p><p>实证很清楚：成功初创企业数量最多的地方，和最顶尖大学的名单几乎重合。</p><p>I don’t think it’s the prestigious names of these universities that cause more good startups to come out of them. Nor do I think it’s because the quality of the teaching is better. What’s driving this is simply the difficulty of getting in. You have to be pretty smart and determined to get into MIT or Cambridge, so if you do manage to get in, you’ll find the other students include a lot of smart and determined people. [3] </p><p>我不认为这是因为这些大学的名气大，也不是因为教学质量更好。真正的原因很简单：进这些大学很难。能进麻省理工或剑桥的人，往往很聪明、很有毅力。所以一旦你进去了，就会发现周围有很多聪明又有毅力的人。[3]</p><p>You don’t have to start a startup with someone you meet at university. The founders of Twitch met when they were seven. The founders of Stripe, Patrick and John Collison, met when John was born. But universities are the main source of cofounders. And because they’re where the cofounders are, they’re also where the ideas are, because the best ideas grow out of projects you do with the people who become your cofounders. </p><p>你不一定非要和大学里认识的人一起创业。Twitch 的创始人 7 岁就认识了，Stripe 的创始人帕特里克・科里森和约翰・科里森，在约翰出生时就 “认识” 了。但大学是联合创始人的主要来源。正因为那里有联合创始人，所以那里也有创意 —— 最好的创意都源于你和未来的联合创始人一起做的项目。</p><p>So the list of what you need to do to get from here to starting a startup is quite short. You need to get good at technology, and the way to do that is to work on your own projects. And you need to do as well in school as you can, so you can get into a good university, because that’s where the cofounders and the ideas are. </p><p>所以，从现在到能创业，你要做的事其实很简单：<br>一是精通技术，方法是做自己的项目；<br>二是功课尽量做好，以便能进好大学 —— 因为那里有联合创始人和创意。</p><p>That’s it, just two things, build stuff and do well in school.     </p><p>总的来说就这两件事：动手做一些东西，学好功课。</p><p>Notes </p><p>[1] The rhetorical trick in this sentence is that the “Google”s refer to different things. What I mean is: a company that has as much chance of growing as big as Google ultimately did as Larry and Sergey could have reasonably expected Google itself would at the time they started it. But I think the original version is zippier. </p><p>[1] 这句话的修辞技巧在于：两个 “谷歌” 指的是不同的东西。我的意思是：你创办的公司，要有 “像谷歌最终成长为巨头那样” 的可能性，就像当年拉里和谢尔盖创办谷歌时，谷歌本身具有的可能性一样。但我觉得原文的表达更简洁有力。</p><p>[2] Making something for your friends isn’t the only source of startup ideas. It’s just the best source for young founders, who have the least knowledge of what other people want, and whose own wants are most predictive of future demand. </p><p>[2] 为朋友做东西不是创业创意的唯一来源，只是对年轻创业者来说最好的来源 —— 因为他们最不了解 “其他人想要什么”，而他们自己的需求最能预示未来的市场需求。</p><p>[3] Strangely enough this is particularly true in countries like the US where undergraduate admissions are done badly. US admissions departments make applicants jump through a lot of arbitrary hoops that have little to do with their intellectual ability. But the more arbitrary a test, the more it becomes a test of mere determination and resourcefulness. And those are the two most important qualities in startup founders. So US admissions departments are better at selecting founders than they would be if they were better at selecting students.</p><p>[3] 奇怪的是，在本科录取机制不太合理的国家（比如美国），这一点尤其明显。美国的录取部门让申请者通过很多莫名其妙的关卡，这些关卡和智力几乎无关。但关卡越莫名其妙，就越能考验纯粹的毅力和应变能力 —— 而这正是初创企业创始人最重要的两种素质。所以美国的录取部门在 “筛选创始人” 方面，比在 “筛选学生” 方面做得更好。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样正确的区分执着与固执</title>
    <link href="/2025/07/23/the-right-kind-of-stubborn/"/>
    <url>/2025/07/23/the-right-kind-of-stubborn/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-RIGHT-KIND-OF-STUBBORN"><a href="#THE-RIGHT-KIND-OF-STUBBORN" class="headerlink" title="THE RIGHT KIND OF STUBBORN"></a>THE RIGHT KIND OF STUBBORN</h2><p>原文链接: <a href="https://paulgraham.com/persistence.html">https://paulgraham.com/persistence.html</a></p><p>July 2024</p><h3 id="一、没有刹车与无法转舵"><a href="#一、没有刹车与无法转舵" class="headerlink" title="一、没有刹车与无法转舵"></a>一、没有刹车与无法转舵</h3><p>Successful people tend to be persistent. New ideas often don’t work at first, but they’re not deterred. They keep trying and eventually find something that does. </p><p>成功人士往往具备执着的品质。新想法起初往往行不通，但他们不会因此却步，而是不断尝试，最终找到有效的方法。</p><p>Mere obstinacy, on the other hand, is a recipe for failure. Obstinate people are so annoying. They won’t listen. They beat their heads against a wall and get nowhere. </p><p>另一方面，单纯的固执则注定失败。固执的人很讨厌，他们不听劝，一味地撞南墙，却毫无进展。</p><p>But is there any real difference between these two cases? Are persistent and obstinate people actually behaving differently? Or are they doing the same thing, and we just label them later as persistent or obstinate depending on whether they turned out to be right or not? </p><p>但这两种情况真的有区别吗？执着的人和固执的人行为上是否真的不同？还是说他们做着同样的事，只是我们事后根据他们最终是否正确，才分别贴上 “执着” 或 “固执” 的标签？</p><p>If that’s the only difference then there’s nothing to be learned from the distinction. Telling someone to be persistent rather than obstinate would just be telling them to be right rather than wrong, and they already know that. Whereas if persistence and obstinacy are actually different kinds of behavior, it would be worthwhile to tease them apart. [1] </p><p>如果这是唯一的区别，那么这种区分就毫无借鉴意义。告诉别人要执着而非固执，无异于告诉他们要正确而非错误，而这一点他们早就知道了。然而，若执着与固执确实是两种不同的行为，那我们就有必要将它们区分开来。[1]</p><p>I’ve talked to a lot of determined people, and it seems to me that they’re different kinds of behavior. I’ve often walked away from a conversation thinking either “Wow, that guy is determined” or “Damn, that guy is stubborn,” and I don’t think I’m just talking about whether they seemed right or not. That’s part of it, but not all of it. </p><p>我和很多意志坚定的人聊过，在我看来，这两种行为确实不同。我常常在与人交谈后，要么想 “哇，这个人真执着”，要么想 “该死，这个人真固执”，而且我认为这不仅仅是因为他们看起来正确与否。这是一部分原因，但并非全部。</p><p>There’s something annoying about the obstinate that’s not simply due to being mistaken. They won’t listen. And that’s not true of all determined people. I can’t think of anyone more determined than the Collison brothers, and when you point out a problem to them, they not only listen, but listen with an almost predatory intensity. Is there a hole in the bottom of their boat? Probably not, but if there is, they want to know about it. </p><p>固执的人身上有种令人讨厌的特质，这不仅仅是因为他们犯错了。他们不听劝。但并非所有意志坚定的人都是如此。我想不出比科利森兄弟更执着的人了，当你向他们指出问题时，他们不仅会听，而且会带着近乎掠夺性的专注去听。他们的船底有洞吗？可能没有，但如果真有，他们一定想知道。</p><p>It’s the same with most successful people. They’re never more engaged than when you disagree with them. Whereas the obstinate don’t want to hear you. When you point out problems, their eyes glaze over, and their replies sound like ideologues talking about matters of doctrine. [2] </p><p>大多数成功人士都是如此。当你与他们意见相左时，他们会格外投入。而固执的人却不想听你说。当你指出问题时，他们眼神涣散，回答听起来就像理论家在谈论教条。[2]</p><p>The reason the persistent and the obstinate seem similar is that they’re both hard to stop. But they’re hard to stop in different senses. The persistent are like boats whose engines can’t be throttled back. The obstinate are like boats whose rudders can’t be turned. [3] </p><p>执着者和固执者看似相似，是因为他们都难以被阻止。但他们的 “难以被阻止” 意义不同。执着者就像引擎无法减速的船，而固执者就像舵无法转动的船。[3]</p><p>In the degenerate case they’re indistinguishable: when there’s only one way to solve a problem, your only choice is whether to give up or not, and persistence and obstinacy both say no. This is presumably why the two are so often conflated in popular culture. It assumes simple problems. But as problems get more complicated, we can see the difference between them. The persistent are much more attached to points high in the decision tree than to minor ones lower down, while the obstinate spray “don’t give up” indiscriminately over the whole tree. </p><p>在退化的情况下，两者难以区分：当解决问题只有一种方法时，你唯一的选择就是放弃或不放弃，而执着和固执都意味着不放弃。这大概就是为什么这两种特质在流行文化中常常被混为一谈。流行文化假设的是简单的问题。但随着问题变得越来越复杂，我们就能看出两者的区别了。执着的人更执着于决策树高层的要点，而对低层的次要要点则不那么在意，而固执的人则会不加区分地 “不放弃” 整个决策树。</p><h3 id="二、固执可能的起因与本质"><a href="#二、固执可能的起因与本质" class="headerlink" title="二、固执可能的起因与本质"></a>二、固执可能的起因与本质</h3><p>The persistent are attached to the goal. The obstinate are attached to their ideas about how to reach it. </p><p>执着的人执着于目标，而固执的人执着于自己达成目标的想法。</p><p>Worse still, that means they’ll tend to be attached to their first ideas about how to solve a problem, even though these are the least informed by the experience of working on it. So the obstinate aren’t merely attached to details, but disproportionately likely to be attached to wrong ones.  </p><p>更糟糕的是，这意味着他们往往会执着于自己解决问题的最初想法，尽管这些想法是最缺乏实践经验支撑的。因此，固执的人不仅执着于细节，而且极有可能执着于错误的细节。</p><p>Why are they like this? Why are the obstinate obstinate? One possibility is that they’re overwhelmed. They’re not very capable. They take on a hard problem. They’re immediately in over their head. So they grab onto ideas the way someone on the deck of a rolling ship might grab onto the nearest handhold. </p><p>为什么他们会这样？固执的人为什么会固执？一种可能是他们不堪重负。他们能力不足，却承担了一个艰难的任务，很快就力不从心了。于是他们抓住一些想法不放，就像在摇晃的船上，有人会抓住最近的扶手一样。</p><p>That was my initial theory, but on examination it doesn’t hold up. If being obstinate were simply a consequence of being in over one’s head, you could make persistent people become obstinate by making them solve harder problems. But that’s not what happens. If you handed the Collisons an extremely hard problem to solve, they wouldn’t become obstinate. If anything they’d become less obstinate. They’d know they had to be open to anything. </p><p>这是我最初的想法，但仔细想想，这并不成立。如果固执仅仅是因为力不从心，那么通过让执着的人去解决更难的问题，就能让他们变得固执。但事实并非如此。如果你让科利森兄弟去解决一个极难的问题，他们不会变得固执。如果说有什么不同的话，他们会变得不那么固执。他们知道自己必须对一切持开放态度。</p><p>Similarly, if obstinacy were caused by the situation, the obstinate would stop being obstinate when solving easier problems. But they don’t. And if obstinacy isn’t caused by the situation, it must come from within. It must be a feature of one’s personality. </p><p>同样，如果固执是由环境造成的，那么当固执的人去解决更容易的问题时，他们就不会再固执了。但他们并没有。如果固执不是由环境造成的，那它一定源于内在，一定是个人性格的一种特征。</p><p>Obstinacy is a reflexive resistance to changing one’s ideas. This is not identical with stupidity, but they’re closely related. A reflexive resistance to changing one’s ideas becomes a sort of induced stupidity as contrary evidence mounts. And obstinacy is a form of not giving up that’s easily practiced by the stupid. You don’t have to consider complicated tradeoffs; you just dig in your heels. It even works, up to a point. </p><p>固执是一种对改变想法的本能抗拒。这与愚蠢并不完全相同，但两者密切相关。随着反对证据的增多，这种对改变想法的本能抗拒会演变成一种诱发的愚蠢。固执是一种不放弃的表现，愚蠢的人很容易做到这一点。你不必考虑复杂的权衡，只需固执己见。在某种程度上，这甚至是有效的。</p><p>The fact that obstinacy works for simple problems is an important clue. Persistence and obstinacy aren’t opposites. The relationship between them is more like the relationship between the two kinds of respiration we can do: aerobic respiration, and the anaerobic respiration we inherited from our most distant ancestors. Anaerobic respiration is a more primitive process, but it has its uses. When you leap suddenly away from a threat, that’s what you’re using. </p><p>固执在简单问题上能奏效，这是一个重要的线索。执着和固执并非对立面。它们之间的关系更像是我们能进行的两种呼吸方式：有氧呼吸和我们从远古祖先那里继承的无氧呼吸。无氧呼吸是一种更原始的过程，但它有其用途。当你突然跳起来躲避威胁时，你用的就是无氧呼吸。</p><p>The optimal amount of obstinacy is not zero. It can be good if your initial reaction to a setback is an unthinking “I won’t give up,” because this helps prevent panic. But unthinking only gets you so far. The further someone is toward the obstinate end of the continuum, the less likely they are to succeed in solving hard problems. [4]  </p><p>固执的最佳量并非零。如果面对挫折，你的第一反应是不假思索地 “我不会放弃”，这可能是好事，因为这有助于防止恐慌。但不假思索的作用有限。一个人越是倾向于固执，就越不可能成功解决难题。[4]</p><p>Obstinacy is a simple thing. Animals have it. But persistence turns out to have a fairly complicated internal structure. </p><p>固执是一种简单的东西，动物也有。但事实证明，执着有着相当复杂的内在结构。</p><h3 id="三、执着可能的起因与本质"><a href="#三、执着可能的起因与本质" class="headerlink" title="三、执着可能的起因与本质"></a>三、执着可能的起因与本质</h3><p>One thing that distinguishes the persistent is their energy. At the risk of putting too much weight on words, they persist rather than merely resisting. They keep trying things. Which means the persistent must also be imaginative. To keep trying things, you have to keep thinking of things to try. Energy and imagination make a wonderful combination. Each gets the best out of the other. </p><p>执着者的一个特点是他们的精力。也许过分强调词语的含义不太好，但他们是 “坚持下去”，而不仅仅是 “抵抗”。他们不断尝试。这意味着执着的人还必须富有想象力。要不断尝试，你就必须不断想出新的点子。</p><p>Energy creates demand for the ideas produced by imagination, which thus produces more, and imagination gives energy somewhere to go. [5] </p><p>精力和想象力是一对绝妙的组合，彼此能让对方发挥出最佳水平。精力为想象力产生的想法创造需求，从而促使想象力产生更多想法，而想象力则为精力提供了方向。[5]</p><p>Merely having energy and imagination is quite rare. But to solve hard problems you need three more qualities: resilience, good judgement, and a focus on some kind of goal. </p><p>仅仅拥有精力和想象力是相当罕见的。但要解决难题，你还需要另外三种品质：韧性、良好的判断力和对某种目标的专注。</p><p>Resilience means not having one’s morale destroyed by setbacks. Setbacks are inevitable once problems reach a certain size, so if you can’t bounce back from them, you can only do good work on a small scale. But resilience is not the same as obstinacy. Resilience means setbacks can’t change your morale, not that they can’t change your mind. </p><p>韧性意味着不会因挫折而士气低落。一旦问题达到一定规模，挫折就不可避免，所以如果你不能从挫折中恢复过来，你就只能在小规模的事情上做出成绩。但韧性与固执不同。韧性意味着挫折不能改变你的士气，而不是说挫折不能改变你的想法。</p><p>Indeed, persistence often requires that one change one’s mind. That’s where good judgement comes in. The persistent are quite rational. They focus on expected value. It’s this, not recklessness, that lets them work on things that are unlikely to succeed. </p><p>事实上，执着往往需要人改变想法。这就需要良好的判断力了。执着的人非常理性，他们关注预期价值。正是这一点，而非鲁莽，让他们能够从事那些成功可能性不大的事情。</p><p>There is one point at which the persistent are often irrational though: at the very top of the decision tree. When they choose between two problems of roughly equal expected value, the choice usually comes down to personal preference. Indeed, they’ll often classify projects into deliberately wide bands of expected value in order to ensure that the one they want to work on still qualifies. </p><p>不过，在决策树的顶端，执着的人往往会不理性：当他们在两个预期价值大致相等的问题之间做出选择时，选择通常取决于个人偏好。事实上，他们往往会将项目故意划分为广泛的预期价值区间，以确保他们想做的项目仍然符合条件。</p><p>Empirically this doesn’t seem to be a problem. It’s ok to be irrational near the top of the decision tree. One reason is that we humans will work harder on a problem we love. But there’s another more subtle factor involved as well: our preferences among problems aren’t random. When we love a problem that other people don’t, it’s often because we’ve unconsciously noticed that it’s more important than they realize. </p><p>从经验来看，这似乎不是问题。在决策树的顶端不理性是可以接受的。一个原因是，我们人类会更努力地去解决自己喜欢的问题。但还有一个更微妙的因素：我们对那些别人不喜欢的问题的偏好，往往是因为我们下意识地注意到这些问题比别人意识到的更重要。</p><p>Which leads to our fifth quality: there needs to be some overall goal. If you’re like me you began, as a kid, merely with the desire to do something great. In theory that should be the most powerful motivator of all, since it includes everything that could possibly be done. But in practice it’s not much use, precisely because it includes too much. It doesn’t tell you what to do at this moment. </p><p>这就引出了第五种品质：需要有一个总体目标。如果你像我一样，小时候只是渴望做一些伟大的事情。理论上，这应该是最强大的动力，因为它包含了所有可能要做的事情。但实际上，它没什么用，正是因为它包含的太多了，它无法告诉你此刻该做什么。</p><p>So in practice your energy and imagination and resilience and good judgement have to be directed toward some fairly specific goal. Not too specific, or you might miss a great discovery adjacent to what you’re searching for, but not too general, or it won’t work to motivate you. [6] </p><p>所以，在实践中，你的精力、想象力、韧性和良好的判断力必须指向某个相当具体的目标。不能太具体，否则你可能会错过与你正在寻找的东西相关的重大发现，但也不能太笼统，否则就无法激励你。[6]</p><p>When you look at the internal structure of persistence, it doesn’t resemble obstinacy at all. It’s so much more complex. Five distinct qualities — energy, imagination, resilience, good judgement, and focus on a goal — combine to produce a phenomenon that seems a bit like obstinacy in the sense that it causes you not to give up. But the way you don’t give up is completely different. Instead of merely resisting change, you’re driven toward a goal by energy and resilience, through paths discovered by imagination and optimized by judgement. You’ll give way on any point low down in the decision tree, if its expected value drops sufficiently, but energy and resilience keep pushing you toward whatever you chose higher up. </p><p>当你审视执着的内在结构时，会发现它与固执一点也不像，它要复杂得多。五种不同的品质 —— 精力、想象力、韧性、良好的判断力和对目标的专注 —— 结合在一起，产生了一种看似有点像固执的现象，因为它让你不放弃。但你不放弃的方式完全不同。你不是仅仅抗拒改变，而是在精力和韧性的驱动下朝着目标前进，通过想象力发现路径，并通过判断力优化路径。如果决策树下层的某个要点的预期价值大幅下降，你会放弃它，但精力和韧性会推动你朝着你在决策树上层选择的目标前进。</p><p>Considering what it’s made of, it’s not surprising that the right kind of stubbornness is so much rarer than the wrong kind, or that it gets so much better results. Anyone can do obstinacy. Indeed, kids and drunks and fools are best at it. Whereas very few people have enough of all five of the qualities that produce the right kind of stubbornness, but when they do the results are magical.    </p><p>考虑到执着的构成，难怪正确的固执比错误的固执罕见得多，也难怪它能取得好得多的结果。任何人都可以固执，事实上，孩子、醉汉和傻瓜最擅长这个。而拥有产生正确固执的所有五种品质的人非常少，但当他们拥有这些品质时，结果是不可思议的。</p><p>Notes </p><p>[1] I’m going to use “persistent” for the good kind of stubborn and “obstinate” for the bad kind, but I can’t claim I’m simply following current usage. Conventional opinion barely distinguishes between good and bad kinds of stubbornness, and usage is correspondingly promiscuous. I could have invented a new word for the good kind, but it seemed better just to stretch “persistent.” </p><p>[1] 我将用 “执着（persistent）” 指代那种有益的固执，用 “固执（obstinate）” 指代有害的固执，但我并非完全遵循现有用法。传统观念几乎不区分固执的好坏，因此这两个词的使用也相应地混乱。我本可以为有益的固执创造一个新词，但似乎还是延伸 “执着” 的含义更好。</p><p>[2] There are some domains where one can succeed by being obstinate. Some political leaders have been notorious for it. But it won’t work in situations where you have to pass external tests. And indeed the political leaders who are famous for being obstinate are famous for getting power, not for using it well. </p><p>[2] 在某些领域，固执也能成功。有些政治领袖就因固执而出名。但在需要通过外部检验的情况下，固执行不通。事实上，那些因固执而闻名的政治领袖，出名的是他们获取权力的方式，而非运用权力的能力。</p><p>[3] There will be some resistance to turning the rudder of a persistent person, because there’s some cost to changing direction. </p><p>[3] 要改变执着者的方向（转动他们的 “舵”），多少会遇到一些阻力，因为改变方向总要付出代价。</p><p>[4] The obstinate do sometimes succeed in solving hard problems. One way is through luck: like the stopped clock that’s right twice a day, they seize onto some arbitrary idea, and it turns out to be right. Another is when their obstinacy cancels out some other form of error. For example, if a leader has overcautious subordinates, their estimates of the probability of success will always be off in the same direction. So if he mindlessly says “push ahead regardless” in every borderline case, he’ll usually turn out to be right. </p><p>[4] 固执的人有时也能解决难题。一种情况是靠运气：就像停摆的时钟每天也能准两次，他们抓住某个随意的想法，结果碰巧是对的。另一种情况是，他们的固执抵消了其他形式的错误。例如，若领导者的下属过于谨慎，他们对成功概率的估计总会偏向同一个错误方向。这时，若领导者在所有边缘案例中都盲目说 “无论如何都要推进”，往往最终会被证明是对的。</p><p>[5] If you stop there, at just energy and imagination, you get the conventional caricature of an artist or poet. </p><p>[5] 若仅停留在精力和想象力这两点，就会陷入人们对艺术家或诗人的固有刻板印象中。</p><p>[6] Start by erring on the small side. If you’re inexperienced you’ll inevitably err on one side or the other, and if you err on the side of making the goal too broad, you won’t get anywhere. Whereas if you err on the small side you’ll at least be moving forward. Then, once you’re moving, you expand the goal.</p><p>[6] 开始时，目标宁小勿大。缺乏经验时，你难免会在目标设定上有所偏差：若目标定得太宽泛，你会一事无成；若目标定得小一点，至少能向前推进。一旦开始行动，再逐步扩大目标范围。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阅读的必要</title>
    <link href="/2025/07/23/the-need-to-read/"/>
    <url>/2025/07/23/the-need-to-read/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-NEED-TO-READ"><a href="#THE-NEED-TO-READ" class="headerlink" title="THE NEED TO READ"></a>THE NEED TO READ</h2><p>原文链接: <a href="https://paulgraham.com/read.html">https://paulgraham.com/read.html</a></p><p>November 2022</p><p>In the science fiction books I read as a kid, reading had often been replaced by some more efficient way of acquiring knowledge. Mysterious “tapes” would load it into one’s brain like a program being loaded into a computer. </p><p>在我小时候读的科幻小说里，阅读往往已被某种更高效的知识获取方式取代。神秘的 “磁带” 能将知识载入大脑，就像给电脑加载程序一样。</p><p>That sort of thing is unlikely to happen anytime soon. Not just because it would be hard to build a replacement for reading, but because even if one existed, it would be insufficient. Reading about x doesn’t just teach you about x; it also teaches you how to write. [1] </p><p>这类事情短期内不太可能发生。不仅因为构建阅读的替代品难度极大，更因为即便存在这样的替代品，它也无法满足需求。阅读关于某事物的内容，不仅能让你了解该事物，还能教会你如何写作。[1]</p><p>Would that matter? If we replaced reading, would anyone need to be good at writing? </p><p>这很重要吗？如果我们找到了取代阅读的方法，还需要有人擅长写作吗？</p><p>The reason it would matter is that writing is not just a way to convey ideas, but also a way to have them. </p><p>重要的原因在于，写作不仅是传达思想的方式，更是产生思想的方式。</p><p>A good writer doesn’t just think, and then write down what he thought, as a sort of transcript. A good writer will almost always discover new things in the process of writing. And there is, as far as I know, no substitute for this kind of discovery. Talking about your ideas with other people is a good way to develop them. But even after doing this, you’ll find you still discover new things when you sit down to write. There is a kind of thinking that can only be done by writing. </p><p>优秀的作家并非先思考，再把想法像抄本一样写下来。优秀的作家几乎总会在写作过程中发现新东西。而且据我所知，这种发现是无可替代的。与他人探讨想法是完善思想的好方法，但即便如此，当你坐下来写作时，仍会发现新的东西。有一种思考，只能通过写作完成。</p><p>There are of course kinds of thinking that can be done without writing. If you don’t need to go too deeply into a problem, you can solve it without writing. If you’re thinking about how two pieces of machinery should fit together, writing about it probably won’t help much. And when a problem can be described formally, you can sometimes solve it in your head. But if you need to solve a complicated, ill-defined problem, it will almost always help to write about it. Which in turn means that someone who’s not good at writing will almost always be at a disadvantage in solving such problems. </p><p>当然，有些思考无需写作也能进行。如果不需要深入钻研某个问题，你可以不写就能解决它。比如思考两台机器如何组装时，写作可能没多大帮助。当一个问题可以被形式化描述时，有时也能在脑中解决。但如果要解决一个复杂且定义模糊的问题，写作几乎总能起到帮助。这意味着，不擅长写作的人在解决这类问题时，几乎总会处于劣势。</p><p>You can’t think well without writing well, and you can’t write well without reading well. And I mean that last “well” in both senses. You have to be good at reading, and read good things. [2] </p><p>写不好，就无法思考透彻；读不好，就写不好。这里的 “好” 有两层含义：你既要擅长阅读，也要读优秀的作品。[2]</p><p>People who just want information may find other ways to get it. But people who want to have ideas can’t afford to.      </p><p>只想获取信息的人或许能找到其他途径。但想要产生思想的人，却不能放弃阅读。</p><p>Notes </p><p>[1] Audiobooks can give you examples of good writing, but having them read to you doesn’t teach you as much about writing as reading them yourself. </p><p>[1] 有声书能为你提供优秀写作的范例，但听别人读，不如自己读更能教会你写作。</p><p>[2] By “good at reading” I don’t mean good at the mechanics of reading. You don’t have to be good at extracting words from the page so much as extracting meaning from the words.</p><p>[2] 我说的 “擅长阅读”，并非指阅读的技巧。你不必擅长从书页中识别文字，而应擅长从文字中提炼意义。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>散文领域的格局</title>
    <link href="/2025/07/22/the-shape-of-the-essay-field/"/>
    <url>/2025/07/22/the-shape-of-the-essay-field/</url>
    
    <content type="html"><![CDATA[<h2 id="THE-SHAPE-OF-THE-ESSAY-FIELD"><a href="#THE-SHAPE-OF-THE-ESSAY-FIELD" class="headerlink" title="THE SHAPE OF THE ESSAY FIELD"></a>THE SHAPE OF THE ESSAY FIELD</h2><p>原文链接: <a href="https://paulgraham.com/field.html">https://paulgraham.com/field.html</a></p><p>June 2025</p><p>An essay has to tell people something they don’t already know. But there are three different reasons people might not know something, and they yield three very different kinds of essays. </p><p>一篇散文必须告诉人们一些他们不知道的东西。但人们之所以不知道某件事，原因有三，而这三种原因催生出了三种截然不同的散文。</p><p>One reason people won’t know something is if it’s not important to know. That doesn’t mean it will make a bad essay. For example, you might write a good essay about a particular model of car. Readers would learn something from it. It would add to their picture of the world. For a handful of readers it might even spur some kind of epiphany. But unless this is a very unusual car it’s not critical for everyone to know about it. [1] </p><p>第一种原因是，这件事并不重要，不值得了解。但这并不意味着写这类内容就成不了好散文。比如，你可以写一篇关于某款特定车型的好散文。读者能从中学到东西，这会丰富他们对世界的认知。对少数读者来说，它甚至可能引发某种顿悟。但除非这是一款极不寻常的车，否则并非所有人都非了解它不可。[1]</p><p>If something isn’t important to know, there’s no answer to the question of why people don’t know it. Not knowing random facts is the default. But if you’re going to write about things that are important to know, you have to ask why your readers don’t already know them. Is it because they’re smart but inexperienced, or because they’re obtuse? </p><p>如果某件事不重要，那 “人们为什么不知道它” 这个问题就没有答案。不了解随机的琐事，本就是常态。但如果你要写的是值得了解的重要事物，就必须问自己：读者为什么偏偏不知道它？是因为他们聪明却缺乏经验，还是因为他们迟钝？</p><p>So the three reasons readers might not already know what you tell them are (a) that it’s not important, (b) that they’re obtuse, or (c) that they’re inexperienced. </p><p>所以，读者不知道你所要讲述的内容，原因有三：（a）内容不重要；（b）读者迟钝；（c）读者缺乏经验。</p><p>The reason I did this breakdown was to get at the following fact, which might have seemed controversial if I’d led with it, but should be obvious now. If you’re writing for smart people about important things, you’re writing for the young. </p><p>我做这种区分，是为了得出一个结论 —— 如果一开始就说，可能显得有争议，但现在看来应该很明显了：如果你要为聪明的人写重要的事，其实是在为年轻人写。</p><p>Or more precisely, that’s where you’ll have the most effect. Whatever you say should also be at least somewhat novel to you, however old you are. It’s not an essay otherwise, because an essay is something you write to figure something out. But whatever you figure out will presumably be more of a surprise to younger readers than it is to you. </p><p>更准确地说，这是你能产生最大影响的群体。无论你年龄多大，你所写的内容至少对自己来说也该有点新意。否则就不能称之为散文，因为散文本就是你为了弄明白某事而写的东西。但你弄明白的道理，对年轻读者来说，想必会比对你自己更令人惊讶。</p><p>There’s a continuum of surprise. At one extreme, something you read can change your whole way of thinking. The Selfish Gene did this to me. It was like suddenly seeing the other interpretation of an ambiguous image: you can treat genes rather than organisms as the protagonists, and evolution becomes easier to understand when you do. At the other extreme, writing merely puts into words something readers were already thinking — or thought they were. </p><p>惊喜是一个连续体。一端是，你读到的内容能彻底改变你的思维方式。《自私的基因》对我就是如此。这就像突然看懂了一幅模糊图像的另一种解读：你可以把基因而非生物体当作主角，这样一来，进化论就更容易理解了。另一端是，文字只是把读者已经在想（或者自以为在想）的东西表达出来而已。</p><p>The impact of an essay is how much it changes readers’ thinking multiplied by the importance of the topic. But it’s hard to do well at both. It’s hard to have big new ideas about important topics. So in practice there’s a tradeoff: you can change readers’ thinking a lot about moderately important things, or change it a little about very important ones. But with younger readers the tradeoff shifts. There’s more room to change their thinking, so there’s a bigger payoff for writing about important things. </p><p>一篇散文的影响力，等于它改变读者思维的程度乘以主题的重要性。但两者很难兼顾。对重要的主题产生重大的新见解，并非易事。所以实际上存在一种权衡：你可以在中等重要的事情上极大地改变读者的想法，或者在非常重要的事情上略微改变他们的想法。但对年轻读者而言，这种权衡会发生偏移。改变他们的思维有更大的空间，所以写重要的内容能带来更大的回报。</p><p>The tradeoff isn’t a conscious one, at least not for me. It’s more like a kind of gravitational field that writers work in. But every essayist works in it, whether they realize it or not. </p><p>这种权衡并非刻意为之，至少对我来说不是。它更像是作家身处的一种引力场。但每个散文作家，无论是否意识到，都身处其中。</p><p>This seems obvious once you state it, but it took me a long time to understand. I knew I wanted to write for smart people about important topics. I noticed empirically that I seemed to be writing for the young. But it took me years to understand that the latter was an automatic consequence of the former. In fact I only really figured it out as I was writing this essay. </p><p>说出来之后似乎显而易见，但我花了很久才明白这一点。我知道自己想为聪明的人写重要的事，也从经验中发现，自己似乎是在为年轻人写。但多年后我才明白，后者是前者的必然结果。事实上，直到写这篇散文时，我才真正想通。</p><p>Now that I know it, should I change anything? I don’t think so. In fact seeing the shape of the field that writers work in has reminded me that I’m not optimizing for returns in it. I’m not trying to surprise readers of any particular age; I’m trying to surprise myself. </p><p>既然明白了这一点，我应该做出改变吗？我觉得不必。事实上，看清作家所处领域的格局后，我反而意识到，自己并非在为追求回报而写作。我不是想给某个年龄段的读者带来惊喜，而是想给自己带来惊喜。</p><p>The way I usually decide what to write about is by following curiosity. I notice something new and dig into it. It would probably be a mistake to change that. But seeing the shape of the essay field has set me thinking. What would surprise young readers? Which important things do people tend to learn late? Interesting question. I should think about that.    </p><p>我通常通过追随好奇心来决定写什么。发现新事物，就深入挖掘。改变这种方式或许是个错误。但看清散文领域的格局后，我开始思考：什么能给年轻读者带来惊喜？哪些重要的东西，人们往往很晚才明白？这是个有趣的问题，我该好好想想。</p><p>Note </p><p>[1] It’s hard to write a really good essay about an unimportant topic, though, because a really good essayist will inevitably draw the topic into deeper waters. E. B. White could write an essay about how to boil potatoes that ended up being full of timeless wisdom. In which case, of course, it wouldn’t really be about how to boil potatoes; that would just have been the starting point. </p><p>[1] 不过，写一篇关于不重要话题的真正好散文并不容易，因为真正优秀的散文作家总会不可避免地将话题引向更深刻的层面。E.B. 怀特可以写一篇关于如何煮土豆的散文，最终却充满了永恒的智慧。当然，在这种情况下，文章其实并非真的在讲煮土豆，那只是一个起点而已。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何浪费时间与金钱</title>
    <link href="/2025/07/21/how-to-waste-time-and-money/"/>
    <url>/2025/07/21/how-to-waste-time-and-money/</url>
    
    <content type="html"><![CDATA[<h2 id="HOW-TO-WASTE-TIME-AND-MONEY"><a href="#HOW-TO-WASTE-TIME-AND-MONEY" class="headerlink" title="HOW TO WASTE TIME AND MONEY"></a>HOW TO WASTE TIME AND MONEY</h2><p>原文链接: <a href="https://paulgraham.com/selfindulgence.html">https://paulgraham.com/selfindulgence.html</a></p><p>July 2010</p><h3 id="一、如何对金钱流失保持警觉"><a href="#一、如何对金钱流失保持警觉" class="headerlink" title="一、如何对金钱流失保持警觉"></a>一、如何对金钱流失保持警觉</h3><p>When we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn’t had to think about before: how not to lose it. I knew it was possible to go from rich to poor, just as it was possible to go from poor to rich. But while I’d spent a lot of the past several years studying the paths from poor to rich, I knew practically nothing about the paths from rich to poor. Now, in order to avoid them, I had to learn where they were. </p><p>1998 年，当我们卖掉自己的初创公司时，我突然有了一大笔钱。这时，我不得不开始思考一个此前从未想过的问题：如何守住这笔钱。我知道，人可以从贫穷变富有，同样也可能从富有变贫穷。过去几年，我花了大量时间研究从穷到富的路径，但对于从富到穷的路径，我几乎一无所知。而现在，为了避开这些陷阱，我必须弄清楚它们到底在哪里。</p><p>So I started to pay attention to how fortunes are lost. If you’d asked me as a kid how rich people became poor, I’d have said by spending all their money. That’s how it happens in books and movies, because that’s the colorful way to do it. But in fact the way most fortunes are lost is not through excessive expenditure, but through bad investments. </p><p>于是，我开始留意财富是如何流失的。小时候如果有人问我，富人是怎么变穷的，我会说他们是把钱都花光了。书籍和电影里都是这么演的，因为这种方式更富有戏剧性。但事实上，大多数财富的流失并非源于过度消费，而是糟糕的投资。</p><p>It’s hard to spend a fortune without noticing. Someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking “wow, I’m spending a lot of money.” Whereas if you start trading derivatives, you can lose a million dollars (as much as you want, really) in the blink of an eye. </p><p>大把花钱却毫无察觉，这很难做到。一个品味普通的人，花掉几万美元后，总会想 “哇，我花了好多钱”。但如果你开始做衍生品交易，可能一眨眼的功夫就会输掉 100 万美元（说真的，想输多少就能输多少）。</p><p>In most people’s minds, spending money on luxuries sets off alarms that making investments doesn’t. Luxuries seem self-indulgent. And unless you got the money by inheriting it or winning a lottery, you’ve already been thoroughly trained that self-indulgence leads to trouble. Investing bypasses those alarms. You’re not spending the money; you’re just moving it from one asset to another. Which is why people trying to sell you expensive things say “it’s an investment.” </p><p>在大多数人看来，花钱买奢侈品会让人警觉，但投资却不会。奢侈品似乎是放纵自己的表现。而且，除非你的钱是继承来的或者中彩票得来的，否则你早就被反复告诫：放纵会招致麻烦。而投资则绕过了这些警报 —— 你不是在花钱，只是把钱从一种资产转移到另一种资产而已。这也是为什么那些推销昂贵东西的人会说 “这是一项投资”。</p><p>The solution is to develop new alarms. This can be a tricky business, because while the alarms that prevent you from overspending are so basic that they may even be in our DNA, the ones that prevent you from making bad investments have to be learned, and are sometimes fairly counterintuitive. </p><p>解决办法是建立新的警报机制。这可能有点棘手，因为防止过度消费的警报机制非常基础，甚至可能存在于我们的基因中，而防止糟糕投资的警报机制则需要学习，有时还相当违背直觉。</p><p>A few days ago I realized something surprising: the situation with time is much the same as with money. The most dangerous way to lose time is not to spend it having fun, but to spend it doing fake work. When you spend time having fun, you know you’re being self-indulgent. Alarms start to go off fairly quickly. If I woke up one morning and sat down on the sofa and watched TV all day, I’d feel like something was terribly wrong. Just thinking about it makes me wince. I’d start to feel uncomfortable after sitting on a sofa watching TV for 2 hours, let alone a whole day. </p><h3 id="二、浪费时间最危险的方式"><a href="#二、浪费时间最危险的方式" class="headerlink" title="二、浪费时间最危险的方式"></a>二、浪费时间最危险的方式</h3><p>几天前，我意识到一件令人惊讶的事：时间的情况和金钱非常相似。浪费时间最危险的方式，不是花时间享乐，而是做 “虚假工作”。当你花时间享乐时，你知道自己在放纵，警报很快就会响起。如果我早上醒来，坐在沙发上看一整天电视，我会觉得哪里不对劲。光是想想就让我畏缩 —— 坐沙发上看两个小时电视我就会不舒服，更别说一整天了。</p><p>And yet I’ve definitely had days when I might as well have sat in front of a TV all day — days at the end of which, if I asked myself what I got done that day, the answer would have been: basically, nothing. I feel bad after these days too, but nothing like as bad as I’d feel if I spent the whole day on the sofa watching TV. If I spent a whole day watching TV I’d feel like I was descending into perdition. But the same alarms don’t go off on the days when I get nothing done, because I’m doing stuff that seems, superficially, like real work. Dealing with email, for example. You do it sitting at a desk. It’s not fun. So it must be work. </p><p>但我确实有过这样的日子：一整天下来，要是问自己做了什么，答案基本是 “什么也没做”。这样的日子过后我也会难受，但远不如看一整天电视那么难受。如果看了一整天电视，我会觉得自己在堕落。但在那些一事无成的日子里，警报却不会响起，因为我在做的事情表面上看起来像正经工作。比如处理邮件 —— 你坐在办公桌前做这件事，而且并不觉得有趣，所以它肯定是工作。</p><p>With time, as with money, avoiding pleasure is no longer enough to protect you. It probably was enough to protect hunter-gatherers, and perhaps all pre-industrial societies. So nature and nurture combine to make us avoid self-indulgence. But the world has gotten more complicated: the most dangerous traps now are new behaviors that bypass our alarms about self-indulgence by mimicking more virtuous types. And the worst thing is, they’re not even fun.</p><p>对待时间和对待金钱一样，仅仅避免享乐已经不够了。对于狩猎采集者，或许对所有前工业社会的人来说，这可能就够了。所以，先天本能和后天教育共同让我们避免放纵。但世界变得更复杂了：最危险的陷阱是那些新行为 —— 它们通过模仿更有益的行为，绕过了我们对放纵的警报。最糟糕的是，这些行为甚至毫无乐趣可言。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>养娃</title>
    <link href="/2025/07/21/having-kids/"/>
    <url>/2025/07/21/having-kids/</url>
    
    <content type="html"><![CDATA[<h2 id="HAVING-KIDS"><a href="#HAVING-KIDS" class="headerlink" title="HAVING KIDS"></a>HAVING KIDS</h2><p>原文链接: <a href="https://paulgraham.com/kids.html">https://paulgraham.com/kids.html</a></p><p>December 2019</p><h3 id="一、有小孩之前"><a href="#一、有小孩之前" class="headerlink" title="一、有小孩之前"></a>一、有小孩之前</h3><p>Before I had kids, I was afraid of having kids. Up to that point I felt about kids the way the young Augustine felt about living virtuously. I’d have been sad to think I’d never have children. But did I want them now? No. </p><p>在有孩子之前，我一直害怕要孩子。那时候，我对孩子的感觉，就像年轻时的奥古斯丁对 “过有德行的生活” 的感觉 —— 一想到自己永远不会有孩子，我会难过；但要说 “现在就想要”？不，我不想要。</p><p>If I had kids, I’d become a parent, and parents, as I’d known since I was a kid, were uncool. They were dull and responsible and had no fun. And while it’s not surprising that kids would believe that, to be honest I hadn’t seen much as an adult to change my mind. Whenever I’d noticed parents with kids, the kids seemed to be terrors, and the parents pathetic harried creatures, even when they prevailed. </p><p>如果有了孩子，我就会变成父母。而从我小时候起，父母在我眼里就是 “不酷” 的代名词：他们乏味、刻板，满脑子都是责任，完全无法享受生活。当然，孩子会这么想并不奇怪，但说实话，即便长大成人，我也没看到多少能改变这想法的事。每次看到带孩子的父母，孩子似乎都是些小恶魔，父母则是可怜兮兮、被折腾得焦头烂额的人 —— 哪怕他们最后 “镇住” 了孩子，也还是一副狼狈相。</p><p>When people had babies, I congratulated them enthusiastically, because that seemed to be what one did. But I didn’t feel it at all. “Better you than me,” I was thinking. </p><p>别人生孩子时，我会热情地祝贺，因为那似乎是 “该做的事”。但我心里毫无波澜，甚至在想：“还好是你，不是我。”</p><p>Now when people have babies I congratulate them enthusiastically and I mean it. Especially the first one. I feel like they just got the best gift in the world. </p><p>现在，别人生孩子时，我依然会热情祝贺，而且是发自内心的 —— 尤其是第一个孩子。我觉得他们像是收到了世界上最好的礼物。</p><p>What changed, of course, is that I had kids. Something I dreaded turned out to be wonderful. </p><p>当然，一切的转变都源于我自己有了孩子。曾经让我恐惧的事，最后竟成了美好的馈赠。</p><h3 id="二、有小孩之后"><a href="#二、有小孩之后" class="headerlink" title="二、有小孩之后"></a>二、有小孩之后</h3><p>Partly, and I won’t deny it, this is because of serious chemical changes that happened almost instantly when our first child was born. It was like someone flipped a switch. I suddenly felt protective not just toward our child, but toward all children. As I was driving my wife and new son home from the hospital, I approached a crosswalk full of pedestrians, and I found myself thinking “I have to be really careful of all these people. Every one of them is someone’s child!” </p><p>不得不承认，很大程度上是因为第一个孩子出生时，我体内瞬间发生了剧烈的化学变化。就像有人扳动了开关：我突然不仅想保护自己的孩子，还想保护所有孩子。记得开车载着妻子和刚出生的儿子从医院回家时，路过一个挤满行人的斑马线，我心里突然冒出一个念头：“我得对这些人万分小心。他们每一个，都是别人的孩子啊！”</p><p>So to some extent you can’t trust me when I say having kids is great. To some extent I’m like a religious cultist telling you that you’ll be happy if you join the cult too — but only because joining the cult will alter your mind in a way that will make you happy to be a cult member. </p><p>所以，当我说 “有孩子很棒” 时，你多少得打个折扣。某种程度上，我就像个邪教徒 —— 告诉你 “加入我们你就会快乐”，但真相是，只有加入后，你的大脑才会被改造，让你觉得作为教徒很快乐。</p><p>But not entirely. There were some things about having kids that I clearly got wrong before I had them. </p><p>但也不全是这样。有孩子这件事，我之前确实有很多明显的误解。</p><p>For example, there was a huge amount of selection bias in my observations of parents and children. Some parents may have noticed that I wrote “Whenever I’d noticed parents with kids.” Of course the times I noticed kids were when things were going wrong. I only noticed them when they made noise. And where was I when I noticed them? Ordinarily I never went to places with kids, so the only times I encountered them were in shared bottlenecks like airplanes. Which is not exactly a representative sample. Flying with a toddler is something very few parents enjoy. </p><p>比如，我对父母和孩子的观察存在严重的 “选择性偏差”。也许有父母注意到了，我写的是 “每次我‘注意到’带孩子的父母”。当然了，我会注意到孩子，往往是因为他们 “出状况” 的时候 —— 只有他们吵闹时，我才会留意到。而且，我是在什么场合注意到他们的呢？平时我根本不去有孩子的地方，唯一能碰到孩子的场合，都是像飞机这样的 “共用瓶颈” 场所。这显然不是有代表性的样本 —— 带学步的孩子坐飞机，没几个父母会觉得享受。</p><p>What I didn’t notice, because they tend to be much quieter, were all the great moments parents had with kids. People don’t talk about these much — the magic is hard to put into words, and all other parents know about them anyway — but one of the great things about having kids is that there are so many times when you feel there is nowhere else you’d rather be, and nothing else you’d rather be doing. You don’t have to be doing anything special. You could just be going somewhere together, or putting them to bed, or pushing them on the swings at the park. But you wouldn’t trade these moments for anything. One doesn’t tend to associate kids with peace, but that’s what you feel. You don’t need to look any further than where you are right now. </p><p>那些父母和孩子相处的美好时刻，我从来没注意到，因为它们大多安安静静的。人们很少谈论这些时刻 —— 那种魔力很难用语言描述，而且其他父母都懂 —— 但有孩子的一大好处是，你会频繁地觉得 “此刻就是最好的，做什么都不如现在”。不一定是做什么特别的事：可能只是一起出门，可能是哄他们睡觉，可能是在公园推他们荡秋千。但这些时刻，你无论如何都不愿交换。没人会把 “孩子” 和 “平静” 联系起来，但你真的会感到平静 —— 你会觉得，眼前的一切就足够了。</p><p>Before I had kids, I had moments of this kind of peace, but they were rarer. With kids it can happen several times a day. </p><p>有孩子之前，我也有过这种平静的时刻，但很少。有了孩子之后，一天能有好几次。</p><p>My other source of data about kids was my own childhood, and that was similarly misleading. I was pretty bad, and was always in trouble for something or other. So it seemed to me that parenthood was essentially law enforcement. I didn’t realize there were good times too. </p><p>我对孩子的另一个认知来源是自己的童年，这同样具有误导性。我小时候很调皮，总因为各种事被找麻烦。所以在我看来，为人父母本质上就是 “执法”—— 我从没想过，原来也有快乐的时候。</p><p>I remember my mother telling me once when I was about 30 that she’d really enjoyed having me and my sister. My god, I thought, this woman is a saint. She not only endured all the pain we subjected her to, but actually enjoyed it? Now I realize she was simply telling the truth. </p><p>记得 30 岁左右时，母亲曾对我说，她真的很享受养育我和妹妹的过程。当时我心想：天啊，这女人简直是圣人。她不仅忍受了我们带来的所有麻烦，竟然还觉得享受？现在我才明白，她只是在说真话。</p><p>She said that one reason she liked having us was that we’d been interesting to talk to. That took me by surprise when I had kids. You don’t just love them. They become your friends too. They’re really interesting. And while I admit small children are disastrously fond of repetition (anything worth doing once is worth doing fifty times) it’s often genuinely fun to play with them. That surprised me too. Playing with a 2 year old was fun when I was 2 and definitely not fun when I was 6. Why would it become fun again later? But it does. </p><p>她说喜欢养我们的一个原因是，和我们聊天很有意思。有了孩子后，这一点让我很意外：你不只是爱他们，他们还会成为你的朋友。他们真的很有趣。虽然我承认，小孩子对重复有种要命的执念（但凡值得做一次的事，就值得做五十次），但和他们玩常常是真的开心。这也让我意外：我两岁时和两岁的孩子玩很开心，六岁时就觉得无趣了，为什么长大后反而又觉得好玩了呢？但事实就是这样。</p><p>There are of course times that are pure drudgery. Or worse still, terror. Having kids is one of those intense types of experience that are hard to imagine unless you’ve had them. But it is not, as I implicitly believed before having kids, simply your DNA heading for the lifeboats. </p><p>当然，育儿也有纯粹枯燥的时候，甚至可怕的时刻。有孩子是一种极致的体验，没经历过的人很难想象。但它不像我之前默认的那样，只是 “DNA 在找救生艇”（指繁衍后代只是基因的本能）。</p><p>Some of my worries about having kids were right, though. They definitely make you less productive. I know having kids makes some people get their act together, but if your act was already together, you’re going to have less time to do it in. In particular, you’re going to have to work to a schedule. Kids have schedules. I’m not sure if it’s because that’s how kids are, or because it’s the only way to integrate their lives with adults’, but once you have kids, you tend to have to work on their schedule. </p><p>不过，我之前对有孩子的一些担忧是对的。他们确实会降低你的生产力。我知道有些人为了孩子会 “振作起来”，但如果你的生活本就有条理，那你能用来做事的时间会变少。尤其是，你得按时间表来。孩子有他们的作息 —— 不确定是因为孩子本身就这样，还是因为这是让他们的生活和成人生活融合的唯一方式 —— 但有了孩子后，你往往得按他们的时间表来。</p><p>You will have chunks of time to work. But you can’t let work spill promiscuously through your whole life, like I used to before I had kids. You’re going to have to work at the same time every day, whether inspiration is flowing or not, and there are going to be times when you have to stop, even if it is. </p><p>你还是会有整块的工作时间，但不能像以前那样，让工作随心所欲地填满生活。你得每天在固定时间工作，不管有没有灵感；也总会有不得不停下的时候，哪怕灵感正盛。</p><p>I’ve been able to adapt to working this way. Work, like love, finds a way. If there are only certain times it can happen, it happens at those times. So while I don’t get as much done as before I had kids, I get enough done. </p><p>我已经适应了这样的工作方式。工作和爱一样，总会找到出路。如果只有特定时间能做事，那就在那些时间做。所以虽然我做的事比没孩子时少，但也足够了。</p><p>I hate to say this, because being ambitious has always been a part of my identity, but having kids may make one less ambitious. It hurts to see that sentence written down. I squirm to avoid it. But if there weren’t something real there, why would I squirm? The fact is, once you have kids, you’re probably going to care more about them than you do about yourself. And attention is a zero-sum game. Only one idea at a time can be the top idea in your mind. Once you have kids, it will often be your kids, and that means it will less often be some project you’re working on. </p><p>这话我不想说，因为 “有野心” 一直是我身份的一部分，但有孩子可能会让人没那么有野心。写下这句话时，我都觉得别扭，想回避。但如果这不是事实，我何必回避呢？事实是，有了孩子后，你可能会更在乎他们，胜过在乎自己。而注意力是零和游戏 —— 脑子里一次只能有一个最重要的念头。有了孩子后，这个念头常常是他们，所以你放在工作项目上的心思就会少些。</p><p>I have some hacks for sailing close to this wind. For example, when I write essays, I think about what I’d want my kids to know. That drives me to get things right. And when I was writing Bel, I told my kids that once I finished it I’d take them to Africa. When you say that sort of thing to a little kid, they treat it as a promise. Which meant I had to finish or I’d be taking away their trip to Africa. Maybe if I’m really lucky such tricks could put me net ahead. But the wind is there, no question. </p><p>我有一些小技巧来应对这种情况。比如写文章时，我会想 “这是我想让孩子知道的事”，这会推动我把事情做好。写《贝尔》时，我跟孩子们说，写完就带他们去非洲。跟小孩子说这种话，他们会当真的 —— 这意味着我必须写完，不然就会剥夺他们的非洲之旅。也许运气好的话，这些技巧能让我总体上不输以前。但那种 “野心被稀释” 的趋势，确实存在。</p><p>On the other hand, what kind of wimpy ambition do you have if it won’t survive having kids? Do you have so little to spare? </p><p>但反过来想：如果你的野心连有孩子都承受不住，那它也太脆弱了吧？你就这么 “输不起” 吗？</p><p>And while having kids may be warping my present judgement, it hasn’t overwritten my memory. I remember perfectly well what life was like before. Well enough to miss some things a lot, like the ability to take off for some other country at a moment’s notice. That was so great. Why did I never do that? </p><p>虽然有孩子可能扭曲了我现在的判断，但它没抹去我的记忆。我清楚记得没孩子时的生活，清楚到会很想念一些事，比如随时能出发去别的国家。那多棒啊，我以前怎么没多做呢？</p><p>See what I did there? The fact is, most of the freedom I had before kids, I never used. I paid for it in loneliness, but I never used it. </p><p>发现了吗？事实是，没孩子时拥有的那些自由，我大多都没利用过。我为它付出了孤独的代价，却从未真正使用过。</p><p>I had plenty of happy times before I had kids. But if I count up happy moments, not just potential happiness but actual happy moments, there are more after kids than before. Now I practically have it on tap, almost any bedtime. </p><p>没孩子时，我有过很多快乐的时光。但如果数 “快乐的时刻”—— 不只是潜在的快乐，而是真实的快乐瞬间 —— 有孩子之后比之前多。现在，几乎每个哄睡的时刻，我都能感受到这种快乐，触手可及。</p><p>People’s experiences as parents vary a lot, and I know I’ve been lucky. But I think the worries I had before having kids must be pretty common, and judging by other parents’ faces when they see their kids, so must the happiness that kids bring.     </p><p>为人父母的体验因人而异，我知道自己很幸运。但我觉得，我之前对有孩子的担忧应该很普遍；而从其他父母看到孩子时的神情来看，孩子带来的快乐，大概也同样普遍。</p><p>Note </p><p>[1] Adults are sophisticated enough to see 2 year olds for the fascinatingly complex characters they are, whereas to most 6 year olds, 2 year olds are just defective 6 year olds.</p><p>[1] 成年人足够成熟，能发现两岁孩子身上那种迷人的复杂性，把他们看作独一无二的鲜活个体；而对大多数六岁孩子来说，两岁的小孩不过是 “发育不完全的六岁孩子” 罢了。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何取得杰出成就</title>
    <link href="/2025/07/19/how-to-do-great-work/"/>
    <url>/2025/07/19/how-to-do-great-work/</url>
    
    <content type="html"><![CDATA[<h2 id="How-to-Do-Great-Work"><a href="#How-to-Do-Great-Work" class="headerlink" title="How to Do Great Work"></a>How to Do Great Work</h2><p>原文链接: <a href="https://paulgraham.com/greatwork.html">https://paulgraham.com/greatwork.html</a></p><p>译文链接 [赛博禅心]: <a href="https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ">https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ</a></p><h3 id="一、成就伟大事业的关键"><a href="#一、成就伟大事业的关键" class="headerlink" title="一、成就伟大事业的关键"></a>一、成就伟大事业的关键</h3><p>If you collected lists of techniques for doing great work in a lot of different fields, what would the intersection look like? I decided to find out by making it.</p><p>Partly my goal was to create a guide that could be used by someone working in any field. But I was also curious about the shape of the intersection. And one thing this exercise shows is that it does have a definite shape; it’s not just a point labelled “work hard.”</p><p>The following recipe assumes you’re very ambitious.</p><p>如果让你收集在不同领域成就伟大事业的技巧列表，它们的交集会是什么呢？我决定通过实践来找出答案。</p><p>我的目标有两个，其一是创建一个可以为所有领域的从业者所用的指南，其二是我也对交集的形态感到好奇 —— 实践表明，这个交集确实有一个「明确的形状」，它不仅仅是一个标有「努力工作」字样的点。</p><p><strong>以下指南的前提假设是你拥有雄心壮志。</strong></p><h4 id="第一步：决定要做什么"><a href="#第一步：决定要做什么" class="headerlink" title="第一步：决定要做什么"></a>第一步：决定要做什么</h4><p>The first step is to decide what to work on. The work you choose needs to have three qualities: </p><ul><li>it has to be something you have a natural aptitude for, </li><li>that you have a deep interest in, </li><li>and that offers scope to do great work.</li></ul><p>**第一步是决定要做什么。**你所选择的工作需要具有三个特质：</p><ol><li>你对这件事有天赋；</li><li>你对这件事有深深的兴趣；</li><li>这件事拥有取得杰出成就的空间。</li></ol><p>In practice you don’t have to worry much about the third criterion. Ambitious people are if anything already too conservative about it. So all you need to do is find something you have an aptitude for and great interest in. [1]</p><p>在实践中，我们不必过于担心第三点 —— 对于具有雄心壮志的人来说，可见的空间已然过于保守 —— 所以<strong>我们需要做的就是找到有天赋和极大兴趣的事情。</strong>[1]</p><p>That sounds straightforward, but it’s often quite difficult. When you’re young you don’t know what you’re good at or what different kinds of work are like. Some kinds of work you end up doing may not even exist yet. So while some people know what they want to do at 14, most have to figure it out.</p><p>这听起来很简单，但往往很困难。当我们年轻时，并不知道自己擅长什么，或者不同类型的工作是什么样的，甚至我们最终做的一些工作可能当前还不存在。所以，虽然有些人在十四岁的时候就知道他们想做什么，但大多数人还需要时间去弄清楚。</p><p>The way to figure out what to work on is by working. If you’re not sure what to work on, guess. But pick something and get going. You’ll probably guess wrong some of the time, but that’s fine. It’s good to know about multiple things; some of the biggest discoveries come from noticing connections between different fields.</p><p>找出要做什么的方法是通过工作。如果我们不确定要做什么，那就猜，但是要选择一件事情并开始做。我们可能会猜错，但没关系，了解多种事物是好的 —— <strong>一些最伟大的发现来自于注意到不同领域之间的联系</strong>。</p><p>Develop a habit of working on your own projects. Don’t let “work” mean something other people tell you to do. If you do manage to do great work one day, it will probably be on a project of your own. It may be within some bigger project, but you’ll be driving your part of it.</p><p><strong>养成自己发起并推动项目的习惯</strong>。不要让「工作」这个词等同于别人告诉我们要做什么事情。如果我们有一天真的取得了杰出成就，那可能会始于我们自己发起的一个项目 —— 它可能包含在某个更大的项目中，但你会推动其中的一部分。</p><p>What should your projects be? Whatever seems to you excitingly ambitious. As you grow older and your taste in projects evolves, exciting and important will converge. At 7 it may seem excitingly ambitious to build huge things out of Lego, then at 14 to teach yourself calculus, till at 21 you’re starting to explore unanswered questions in physics. But always preserve excitingness.</p><p>我们的项目应该是什么？任何令自己感到兴奋的且可以让自己踌躇满志的事。随着年龄的增长，我们对项目的品味会进化，兴奋程度和重要性会趋于正相关 —— 七岁时，用乐高搭建巨大的模型可能看起来令人兴奋且斗志满满；十四岁时，可能是自学微积分；二十一岁时，则可能是开始探索物理学中的未解问题 —— 但，无论是什么，它们始终是令人兴奋的。</p><p>There’s a kind of excited curiosity that’s both the engine and the rudder of great work. It will not only drive you, but if you let it have its way, will also show you what to work on.</p><p>伴随着兴奋的好奇心是杰出成就的引擎和舵，它不仅会驱动我们前进，如果我们能让它发挥更大的作用，它还会告诉我们要做什么。</p><p>What are you excessively curious about — curious to a degree that would bore most other people? That’s what you’re looking for.</p><p><strong>我们对什么有着「过分的」好奇心，「过分」到其他大多数人会觉得无聊的程度？那就是我们所要寻找的事。</strong></p><h4 id="第二步：学习足够多的知识"><a href="#第二步：学习足够多的知识" class="headerlink" title="第二步：学习足够多的知识"></a>第二步：学习足够多的知识</h4><p>Once you’ve found something you’re excessively interested in, the next step is to learn enough about it to get you to one of the frontiers of knowledge. Knowledge expands fractally, and from a distance its edges look smooth, but once you learn enough to get close to one, they turn out to be full of gaps.</p><p>一旦找到了「过分」感兴趣的事，下一步就是学习足够多的知识，让我们能够到达此领域的知识前沿。知识以分形的方式扩展，从远处看，它的边缘看起来很平滑，但一旦我们学习得足够多，接近其中的部分边缘，会发现它们充满了缺口。</p><h4 id="第三步：关注所属领域的”缺口”"><a href="#第三步：关注所属领域的”缺口”" class="headerlink" title="第三步：关注所属领域的”缺口”"></a>第三步：关注所属领域的”缺口”</h4><p>The next step is to notice them. This takes some skill, because your brain wants to ignore such gaps in order to make a simpler model of the world. Many discoveries have come from asking questions about things that everyone else took for granted. [2]</p><p>下一步是注意到这些缺口。这需要一些技巧，因为我们的大脑想要忽略这些缺口，以便构建一个更简单的世界模型。许多伟大的发现来自于对大家都视为理所当然的事提出问题。[2]</p><p>If the answers seem strange, so much the better. Great work often has a tincture of strangeness. You see this from painting to math. It would be affected to try to manufacture it, but if it appears, embrace it.</p><p>如果答案看起来很奇怪，那就更好了 —— 杰出成就往往带有奇特色彩 —— 从绘画到数学，我们都可以看到这一点。试图制造这种奇特的行为是做作的，但如果它出现了，就接受它。</p><h4 id="第四步：探索其中有前景的缺口"><a href="#第四步：探索其中有前景的缺口" class="headerlink" title="第四步：探索其中有前景的缺口"></a>第四步：探索其中有前景的缺口</h4><p>Boldly chase outlier ideas, even if other people aren’t interested in them — in fact, especially if they aren’t. If you’re excited about some possibility that everyone else ignores, and you have enough expertise to say precisely what they’re all overlooking, that’s as good a bet as you’ll find. [3]</p><p><strong>大胆地追求不合群的想法，即使其他人对它们不感兴趣</strong> —— 事实上，尤其是他们不感兴趣的时候。如果我们对大家都忽视的某种可能性感到兴奋，并且有足够的专业知识来精确地说出他们都忽视了什么，那就是我们能找到的最好的赌注。[3]</p><p>Four steps: </p><ul><li>choose a field, </li><li>learn enough to get to the frontier, </li><li>notice gaps, </li><li>explore promising ones.</li></ul><p>四个步骤：</p><ol><li>选择一个领域；</li><li>学习足够多的知识以到达领域前沿；</li><li>注意到领域缺口；</li><li>探索其中有前景的缺口。</li></ol><p>This is how practically everyone who’s done great work has done it, from painters to physicists.</p><p>—— 这就是几乎所有取得杰出成就的人都是如何做到的，从画家到物理学家。</p><p>Steps two and four will require hard work. It may not be possible to prove that you have to work hard to do great things, but the empirical evidence is on the scale of the evidence for mortality. That’s why it’s essential to work on something you’re deeply interested in. Interest will drive you to work harder than mere diligence ever could.</p><p>第二步和第四步需要努力。我可能无法用语言证明一个人必须努力才能取得伟大成就，但实证证据就像死亡的证据一样确凿。这就是为什么我们必须从事自己深感兴趣的事情 —— 兴趣会驱使我们比单纯的勤奋工作更加努力。</p><p>The three most powerful motives are curiosity, delight, and the desire to do something impressive. Sometimes they converge, and that combination is the most powerful of all.</p><p>The big prize is to discover a new fractal bud. You notice a crack in the surface of knowledge, pry it open, and there’s a whole world inside.</p><p><strong>三个最强大的内在动机是好奇心、快乐和做出令人印象深刻的事情的欲望，当它们会汇聚在一起时，会成为最强大的组合。</strong></p><p>最大的奖励是发现一个新的分形芽。我们注意到了知识表面的一个裂缝，撬开它，里面有一个完整的世界。</p><h3 id="二、找出自己要做的事"><a href="#二、找出自己要做的事" class="headerlink" title="二、找出自己要做的事"></a>二、找出自己要做的事</h3><p>Let’s talk a little more about the complicated business of figuring out what to work on. The main reason it’s hard is that you can’t tell what most kinds of work are like except by doing them. Which means the four steps overlap: you may have to work at something for years before you know how much you like it or how good you are at it. And in the meantime you’re not doing, and thus not learning about, most other kinds of work. So in the worst case you choose late based on very incomplete information. [4]</p><p>我们多讨论一些关于弄清楚要做什么这个复杂的问题。其中，主要困难在于，除了做过的工作，我们无法知道大多数类型的工作是什么样的，这意味着前面所说的四个步骤是重叠的：我们可能需要花几年的时间做某件事，才能知道自己有多喜欢它或者我们在这方面有多好；同时，我们没有在做大多数其他类型的工作，也就没有在学习。所以在最坏的情况下，我们会在不正确的时机且信息非常不完整的情况下做出选择。[4]</p><p>The nature of ambition exacerbates this problem. Ambition comes in two forms, one that precedes interest in the subject and one that grows out of it. Most people who do great work have a mix, and the more you have of the former, the harder it will be to decide what to do.</p><p>雄心壮志的性质加剧了这个问题。雄心壮志有两种形式：一种是在对工作感兴趣之前就有的，另一种是在工作过程中生长出来的。取得伟大成就的大多数人的雄心都是混合的，但前者越少，就会越难决定要做什么。</p><p>The educational systems in most countries pretend it’s easy. They expect you to commit to a field long before you could know what it’s really like. And as a result an ambitious person on an optimal trajectory will often read to the system as an instance of breakage.</p><p>大多数国家的教育系统都假装决定要做什么很容易，他们期望我们在知道某个领域真正是什么样子之前就做出决定。因此，<strong>沿着最佳轨迹来看，一个有雄心壮志的人往往会被系统视为异类。</strong></p><p>It would be better if they at least admitted it — if they admitted that the system not only can’t do much to help you figure out what to work on, but is designed on the assumption that you’ll somehow magically guess as a teenager. They don’t tell you, but I will: when it comes to figuring out what to work on, you’re on your own. Some people get lucky and do guess correctly, but the rest will find themselves scrambling diagonally across tracks laid down on the assumption that everyone does.</p><p>如果这些系统至少承认这一点就好了 —— 系统不仅不能帮助我们弄清楚要做什么，而且还是在假设我们可以在十几岁的时候神奇地猜出来的基础上设计的。它们不会说，但在这里我要强调：<strong>当涉及到弄清楚要做什么时，我们只能靠自己</strong>。有些人运气好，一下就猜对了，但其他人会发现自己在假设每个人都会在的轨道上歪斜着奔跑。</p><p>What should you do if you’re young and ambitious but don’t know what to work on? What you should not do is drift along passively, assuming the problem will solve itself. You need to take action. But there is no systematic procedure you can follow. When you read biographies of people who’ve done great work, it’s remarkable how much luck is involved. They discover what to work on as a result of a chance meeting, or by reading a book they happen to pick up. So you need to make yourself a big target for luck, and the way to do that is to be curious. Try lots of things, meet lots of people, read lots of books, ask lots of questions. [5]</p><p>如果我们年轻并且有雄心但不知道要做什么，我们应该做什么？我们知道自己不应该被动漂流，假设问题会自己解决，同时我们需要采取行动，但没有可以遵循的系统性程序。当我们阅读取得杰出成就的人的传记时，会发现运气的参与程度是那么高：他们通过偶然的会面，或者读到他们碰巧拿起的一本书，就发现了要做什么。<strong>所以我们需要让自己成为运气的显眼目标，做到这一点的方法是保持好奇 —— 尝试很多事，见很多人，读很多书，问很多问题。</strong>[5]</p><p>When in doubt, optimize for interestingness. Fields change as you learn more about them. What mathematicians do, for example, is very different from what you do in high school math classes. So you need to give different types of work a chance to show you what they’re like. But a field should become increasingly interesting as you learn more about it. If it doesn’t, it’s probably not for you.</p><p>当我们感到疑惑时，优先考虑有趣的事情。随着对它们了解得越多，我们对领域的认知就会发生变化，例如，数学家做的事情与我们在高中数学课上做的事情非常不同 —— 所以我们需要给不同类型的工作一个展示它们是什么样的机会 —— 但是，当我们对一个领域了解得越多，它应该变得越来越有趣，如果没有，那可能就不适合自己。</p><p>Don’t worry if you find you’re interested in different things than other people. The stranger your tastes in interestingness, the better. Strange tastes are often strong ones, and a strong taste for work means you’ll be productive. And you’re more likely to find new things if you’re looking where few have looked before.</p><p>如果我们发现自己对其他人不感兴趣的事情感兴趣，不要担心，我们的兴趣越奇特，越好 —— 奇特的往往是强烈的，对工作有强烈的感受意味着我们会有超高的生产力。而且，如果我们在很少有人到达过的地方探索，那就更有可能找到新的东西。</p><p>One sign that you’re suited for some kind of work is when you like even the parts that other people find tedious or frightening.</p><p><strong>当我们喜欢其他人感到乏味或恐惧的工作时，这是一个我们适合这份工作的标志。</strong></p><p>But fields aren’t people; you don’t owe them any loyalty. If in the course of working on one thing you discover another that’s more exciting, don’t be afraid to switch.</p><p>但，领域不是人，我们完全不需要对它们保持忠诚。如果在做一件事的过程中，我们发现了另一件更令人兴奋的事，不要害怕切换。</p><p>If you’re making something for people, make sure it’s something they actually want. The best way to do this is to make something you yourself want. Write the story you want to read; build the tool you want to use. Since your friends probably have similar interests, this will also get you your initial audience.</p><p>如果我们正在为人们做点东西，要确保它是人们真正想要的。做到这一点的最好方法是做自己想要的东西：写自己想读的故事，制作自己想使用的工具。由于我们的朋友可能有类似的兴趣，这也会为我们带来初始「观众」。</p><p>This should follow from the excitingness rule. Obviously the most exciting story to write will be the one you want to read. The reason I mention this case explicitly is that so many people get it wrong. Instead of making what they want, they try to make what some imaginary, more sophisticated audience wants. And once you go down that route, you’re lost. [6]</p><p>这也可以从令人兴奋的规则中得出的 —— 显然，最令人兴奋的故事就是我们自己想读的故事。我特别提到这个例子的原因是，<strong>有很多人在这方面做错了，他们不是制作他们想要的东西，而是试图制作一些想象中的、更成熟的观众想要的东西。一旦我们走上这条路，就迷失了。</strong>[6]</p><p>There are a lot of forces that will lead you astray when you’re trying to figure out what to work on. Pretentiousness, fashion, fear, money, politics, other people’s wishes, eminent frauds. But if you stick to what you find genuinely interesting, you’ll be proof against all of them. If you’re interested, you’re not astray.</p><p>当我们试图弄清楚要做什么时，有很多力量会使我们误入歧途：矫饰、趋势、恐惧、金钱、政治、他人的愿望、狡猾的骗子。但如果我们坚持自己真正感兴趣的事情，就能抵御所有这些，如果我们感兴趣，就没有误入歧途。</p><h3 id="三、关于制定计划"><a href="#三、关于制定计划" class="headerlink" title="三、关于制定计划"></a>三、关于制定计划</h3><p>Following your interests may sound like a rather passive strategy, but in practice it usually means following them past all sorts of obstacles. You usually have to risk rejection and failure. So it does take a good deal of boldness.</p><p>追随自己的兴趣可能听起来像是一种相当被动的策略，但在实践中，它通常意味着要跨越各种障碍，我们通常需要冒着被拒绝和失败的风险，所以这确实需要相当大的勇气。</p><p>But while you need boldness, you don’t usually need much planning. In most cases the recipe for doing great work is simply: work hard on excitingly ambitious projects, and something good will come of it. Instead of making a plan and then executing it, you just try to preserve certain invariants.</p><p>但是，我们虽然需要勇气，但通常不需要太多计划。大多数情况下，成就伟大事业的方式很简单：在令人兴奋的、能够激发我们雄心壮志的项目上努力工作，好的事情就会自然发生 —— <strong>我们不需要制定一个计划然后执行它，只需要维持某些不变量</strong>。</p><p>The trouble with planning is that it only works for achievements you can describe in advance. You can win a gold medal or get rich by deciding to as a child and then tenaciously pursuing that goal, but you can’t discover natural selection that way.</p><p>计划的问题在于，它只适用于可以提前描述的成就。我们可以决定赢得金牌或者变得富有，然后坚持追求这个目标，但不能以这种方式实现自然选择。</p><p>I think for most people who want to do great work, the right strategy is not to plan too much. At each stage do whatever seems most interesting and gives you the best options for the future. I call this approach “staying upwind.” This is how most people who’ve done great work seem to have done it.</p><p>我认为，对于大多数想要取得伟大成就的人来说，正确的策略是不要计划太多。在每个阶段，做任何看起来最有趣并为未来提供最好选择的事，我称这种方法为「保持上风」—— 这似乎就是大多数伟大成就如何达成的。</p><h3 id="四、工作推进的策略技巧"><a href="#四、工作推进的策略技巧" class="headerlink" title="四、工作推进的策略技巧"></a>四、工作推进的策略技巧</h3><p>Even when you’ve found something exciting to work on, working on it is not always straightforward. There will be times when some new idea makes you leap out of bed in the morning and get straight to work. But there will also be plenty of times when things aren’t like that.</p><p>即使我们找到了令人兴奋的工作，进行这项工作也并不总是简单的。有时候，一些新的想法会让我们早上从床上跳起来，直接开始工作，但也有很多时候，事情恰恰相反。</p><p>You don’t just put out your sail and get blown forward by inspiration. There are headwinds and currents and hidden shoals. So there’s a technique to working, just as there is to sailing.</p><p>我们不能只是张开帆，让灵感把自己推向前方，会有逆风、潮汐和隐藏的暗礁。所以，<strong>工作就像航行一样，是有技巧的</strong>。</p><p>For example, while you must work hard, it’s possible to work too hard, and if you do that you’ll find you get diminishing returns: fatigue will make you stupid, and eventually even damage your health. The point at which work yields diminishing returns depends on the type. Some of the hardest types you might only be able to do for four or five hours a day.</p><p>例如，我们虽然必须努力工作，但是也有可能工作过度，在这种状态下，我们会发现收益递减：疲劳会让我们变得愚蠢，最终甚至可能损害我们的健康。工作产生递减收益的点取决于工作的类型，一些最艰难的类型，我们可能一天只能做四五个小时。</p><p>Ideally those hours will be contiguous. To the extent you can, try to arrange your life so you have big blocks of time to work in. You’ll shy away from hard tasks if you know you might be interrupted.</p><p>理想情况下，这些工时应该是连续的。尽可能地，试着安排自己的生活，让自己有大块的时间来工作，如果知道可能会被打断，那就回避艰难的任务。</p><p>It will probably be harder to start working than to keep working. You’ll often have to trick yourself to get over that initial threshold. Don’t worry about this; it’s the nature of work, not a flaw in your character. Work has a sort of activation energy, both per day and per project. And since this threshold is fake in the sense that it’s higher than the energy required to keep going, it’s ok to tell yourself a lie of corresponding magnitude to get over it.</p><p>开始工作可能比继续工作更难，你经常需要欺骗自己，才能越过初始门槛。不要担心，这是工作的性质，不是你性格中的缺陷。工作需要一种「激活能量」，每天，以及每个项目都有，但因为它比继续前进所需的能量高，这个门槛可以被视作是假的，所以可以对自己适度撒个谎来越过它。</p><p>It’s usually a mistake to lie to yourself if you want to do great work, but this is one of the rare cases where it isn’t. When I’m reluctant to start work in the morning, I often trick myself by saying “I’ll just read over what I’ve got so far.” Five minutes later I’ve found something that seems mistaken or incomplete, and I’m off.</p><p>如果我们想取得伟大成就，对自己撒谎通常是错的，但有少数几个例外。每当早上不愿意开始工作时，我经常欺骗自己说：「我只是看看自己到目前为止做了什么。」五分钟后，我发现了一些看起来错误或不完整的东西，就开始工作了。</p><p>Similar techniques work for starting new projects. It’s ok to lie to yourself about how much work a project will entail, for example. Lots of great things began with someone saying “How hard could it be?”</p><p>类似的技巧适用于开始新的项目。在预估项目所需的工作量时，向自己撒谎是可以的，<strong>许多伟大事业都是从某人说「这有什么难的？」开始的</strong>。</p><p>This is one case where the young have an advantage. They’re more optimistic, and even though one of the sources of their optimism is ignorance, in this case ignorance can sometimes beat knowledge.</p><p>这是年轻人有优势的例子之一 —— 他们更乐观 —— 尽管他们乐观的部分来源是无知，但在这种情况下，无知有时可以打败渊博。</p><p>Try to finish what you start, though, even if it turns out to be more work than you expected. Finishing things is not just an exercise in tidiness or self-discipline. In many projects a lot of the best work happens in what was meant to be the final stage.</p><p>尽管如此，我们要尽量完成己经开始的事情，即使它比预期的工作量要多很多。完成一件事不仅是整洁或自律的练习，在许多项目中，最佳成就点处于本应是最后阶段的地方。</p><p>Another permissible lie is to exaggerate the importance of what you’re working on, at least in your own mind. If that helps you discover something new, it may turn out not to have been a lie after all. [7]</p><p>另一个可以撒谎的点是在自己心中夸大我们正在做的事情的重要性。如果这有助于我们发现新的东西，那么它可能最终并不是一个谎言。[7]</p><p>Since there are two senses of starting work — per day and per project — there are also two forms of procrastination. Per-project procrastination is far the more dangerous. You put off starting that ambitious project from year to year because the time isn’t quite right. When you’re procrastinating in units of years, you can get a lot not done. [8]</p><p>由于「开始工作」的有两种定义 —— 每天和每个项目 —— 所以也有两种形式的拖延，<strong>以项目为单位的拖延远比以天为单位的拖延更危险</strong> —— 我们把开始那个雄心勃勃的项目推迟了一年又一年，因为时间还不够 —— 当以年为单位计算时，我们可以做很多事情。[8]</p><p>One reason per-project procrastination is so dangerous is that it usually camouflages itself as work. You’re not just sitting around doing nothing; you’re working industriously on something else. So per-project procrastination doesn’t set off the alarms that per-day procrastination does. You’re too busy to notice it.</p><p>项目的拖延之所以如此危险，其中一个原因是它通常会伪装成「工作」。我们不是坐在那里什么都不做，而是在其他事情上勤奋地工作。所以，项目的拖延不会像日期的拖延一样，触发拖延的警报 —— 我们太忙了，注意不到它。</p><p>The way to beat it is to stop occasionally and ask yourself: Am I working on what I most want to work on? When you’re young it’s ok if the answer is sometimes no, but this gets increasingly dangerous as you get older. [9]</p><p>**打败项目拖延的方法是偶尔停下来问自己：「我正在做我最想做的事吗？」**年轻的时候，如果答案有时是「不」，那是可以的，但随着年龄的增长，这会变得越来越危险。[9]</p><p>Great work usually entails spending what would seem to most people an unreasonable amount of time on a problem. You can’t think of this time as a cost, or it will seem too high. You have to find the work sufficiently engaging as it’s happening.</p><p>**杰出的成就通常需要我们在一个问题上花费大多数人认为超出了合理范围的大量时间。**我们不能把这个时间看作是成本，否则它会显得太高，我们必须在工作过程中找到足够的吸引力。</p><p>There may be some jobs where you have to work diligently for years at things you hate before you get to the good part, but this is not how great work happens. Great work happens by focusing consistently on something you’re genuinely interested in. When you pause to take stock, you’re surprised how far you’ve come.</p><p>有一些工作，我们可能必须在自己讨厌的事情上努力工作数年，才能接近喜欢的部分，但这不是杰出成就产生的方式，杰出的成就是通过持续关注自己真正感兴趣的事情来实现的 —— 当我们停下来盘点时，会惊讶于自己已经走了多远。</p><p>The reason we’re surprised is that we underestimate the cumulative effect of work. Writing a page a day doesn’t sound like much, but if you do it every day you’ll write a book a year. That’s the key: consistency. People who do great things don’t get a lot done every day. They get something done, rather than nothing.</p><p>我们往往会低估工作的累积效应。每天写一页字不算什么，但如果我们每天都这样做，一年就能写一本书 —— <strong>这就是关键：一致性</strong> —— 取得杰出成就的人并不是每天都做很多事情，他们只做一些事情，而不是什么都不做。</p><p>If you do work that compounds, you’ll get exponential growth. Most people who do this do it unconsciously, but it’s worth stopping to think about. Learning, for example, is an instance of this phenomenon: the more you learn about something, the easier it is to learn more. Growing an audience is another: the more fans you have, the more new fans they’ll bring you.</p><p>**如果我们做的工作有叠加效应，那么我们就会收获指数增长，**大多数在做此类工作的人都是无意识的，但这值得我们停下来认真思考。例如，学习就是这种现象的一个例子：我们对某件事了解得越多，学习更多的事情就越容易。「观众」的增长也是如此：我们的粉丝越多，他们就会为我们带来更多的新粉丝。</p><p>The trouble with exponential growth is that the curve feels flat in the beginning. It isn’t; it’s still a wonderful exponential curve. But we can’t grasp that intuitively, so we underrate exponential growth in its early stages.</p><p>指数增长的问题在于，曲线在开始时给人的感觉很平。但它不是，它仍然是一个美妙的指数曲线，只是我们无法直观地理解这一点，所以我们低估了指数增长的早期阶段。</p><p>Something that grows exponentially can become so valuable that it’s worth making an extraordinary effort to get it started. But since we underrate exponential growth early on, this too is mostly done unconsciously: people push through the initial, unrewarding phase of learning something new because they know from experience that learning new things always takes an initial push, or they grow their audience one fan at a time because they have nothing better to do. If people consciously realized they could invest in exponential growth, many more would do it.</p><p>一件可以指数增长的事可以变得非常有价值，值得我们付出特别的努力去启动。但由于我们在早期低估了指数增长，这也主要是无意识地完成的：人们在学习新事物的初始且无回报的阶段中坚持下去，因为他们从经验中知道学习新事物总是需要一个初始的推动力，或者他们一个一个地增加他们的「观众」，因为他们没有更好的事可做 —— 如果人们意识到他们可以投资于指数增长，会有更多的人去做。</p><p>Work doesn’t just happen when you’re trying to. There’s a kind of undirected thinking you do when walking or taking a shower or lying in bed that can be very powerful. By letting your mind wander a little, you’ll often solve problems you were unable to solve by frontal attack.</p><p>工作不仅仅在我们努力时发生的。当我们散步、洗澡或躺在床上时，会进行一种无明确目标的思考，这种思考可能非常有力量。<strong>通过让思绪稍微漫游一下，我们经常能够解决那些无法通过正面攻击解决的问题</strong>。</p><p>You have to be working hard in the normal way to benefit from this phenomenon, though. You can’t just walk around daydreaming. The daydreaming has to be interleaved with deliberate work that feeds it questions. [10]</p><p>然而，我们必须是在以正确的方式努力工作前提下，才能从这种现象中获益。我们不能只是四处游荡做白日梦。这种漫无目的的思考必须与有意识的工作交替进行，工作会引导我们思考问题。[10]</p><p>Everyone knows to avoid distractions at work, but it’s also important to avoid them in the other half of the cycle. When you let your mind wander, it wanders to whatever you care about most at that moment. So avoid the kind of distraction that pushes your work out of the top spot, or you’ll waste this valuable type of thinking on the distraction instead. (Exception: Don’t avoid love.)</p><p>每个人都知道在工作时要避免分心，但在周期的另一半避免分心也很重要。每当我们的思绪发散时，它会漫游向我们那一刻最关心的事情上。所以，要避免让会将工作挤出首位的事分散自己的注意力，否则我们会把这种宝贵的思考方式用在分心上（例外情况：不要回避爱情！）。</p><p>Consciously cultivate your taste in the work done in your field. Until you know which is the best and what makes it so, you don’t know what you’re aiming for.</p><p>**有意识地培养对自己领域工作的品味。**除非我们知道什么是最好的，以及是什么使它成为最好的，否则我们并不知道自己在追求什么。</p><p>And that is what you’re aiming for, because if you don’t try to be the best, you won’t even be good. This observation has been made by so many people in so many different fields that it might be worth thinking about why it’s true. </p><ul><li><p>It could be because ambition is a phenomenon where almost all the error is in one direction — where almost all the shells that miss the target miss by falling short. </p></li><li><p>Or it could be because ambition to be the best is a qualitatively different thing from ambition to be good. </p></li><li><p>Or maybe being good is simply too vague a standard.</p></li></ul><p>Probably all three are true. [11]</p><p>这就是我们所应追求的，因为如果我们不努力成为最好的，我们甚至都做不好。这一观察已经被许多不同领域的人指出了，所以这可能值得我们思考一下为什么会这样：</p><ol><li>可能是因为实现雄心壮志的途中有这样一种现象，几乎所有的错误都偏向一方 —— <strong>几乎所有未击中目标的炮弹都是落得不够远；</strong></li><li>可能是因为追求做到最好的雄心壮志与追求做好的抱负有着质的不同；</li><li>可能与「最好」不同，「好」只是一个过于模糊的标准。</li></ol><p>—— 这三个可能都是真的。[11]</p><p>Fortunately there’s a kind of economy of scale here. Though it might seem like you’d be taking on a heavy burden by trying to be the best, in practice you often end up net ahead. It’s exciting, and also strangely liberating. It simplifies things. In some ways it’s easier to try to be the best than to try merely to be good.</p><p>幸运的是，这里也存在规模经济。虽然努力做到最好可能看起来会为我们增加很大的负担，但实际上我们经常会得到净收益。这是令人兴奋的，也是一种奇妙的解放，事情被简化了 —— 在某些方面，努力做到最好比仅仅努力做好更容易。</p><p>One way to aim high is to try to make something that people will care about in a hundred years. Not because their opinions matter more than your contemporaries’, but because something that still seems good in a hundred years is more likely to be genuinely good.</p><p>追求高目标的方法之一是试图创造一些人们在一百年后还会关心的东西。并不是因为他们的观点比我们同时代的人更重要，而是因为<strong>一百年后仍然看起来不错的东西更有可能是真正好的东西。</strong></p><h3 id="五、真诚的表达自己与面对问题"><a href="#五、真诚的表达自己与面对问题" class="headerlink" title="五、真诚的表达自己与面对问题"></a>五、真诚的表达自己与面对问题</h3><p>Don’t try to work in a distinctive style. Just try to do the best job you can; you won’t be able to help doing it in a distinctive way.</p><p><strong>不要刻意尝试标新立异的工作风格</strong>，当你专注于把工作做到最好的时候，你很自然的会发现一条与众不同的路。</p><p>Style is doing things in a distinctive way without trying to. Trying to is affectation.</p><p>风格是在不刻意为之的情况下以独特的方式做事，刻意为之则是矫饰。</p><p>Affectation is in effect to pretend that someone other than you is doing the work. You adopt an impressive but fake persona, and while you’re pleased with the impressiveness, the fakeness is what shows in the work. [12]</p><p>矫饰实际上是假装工作的人不是自己，我们采用了一个令人印象深刻但虚假的人格。虽然我们可能会为给他人留下深刻印象感到满足，但工作中表现出来的是一种假人格。[12]</p><p>The temptation to be someone else is greatest for the young. They often feel like nobodies. But you never need to worry about that problem, because it’s self-solving if you work on sufficiently ambitious projects. If you succeed at an ambitious project, you’re not a nobody; you’re the person who did it. So just do the work and your identity will take care of itself.</p><p>年轻人最容易受到「成为他人」的诱惑，他们经常自认为是无名小卒。但永远不需要担心这个问题，因为如果我们持续做足够有前景的项目，这个问题就会逐渐自我消解。如果成功地完成了一个伟大的项目，我们就不是无名小卒，而是完成它的人。所以，只要工作，我们的身份就会自己变好。</p><p>“Avoid affectation” is a useful rule so far as it goes, but how would you express this idea positively? How would you say what to be, instead of what not to be? The best answer is earnest. If you’re earnest you avoid not just affectation but a whole set of similar vices.</p><p>「避免矫饰」是个有用的规则，这需要长期坚持，但我们如何用积极的方式表达自己的想法呢？我们如何说出要成为什么，而不是不要成为什么呢？最好的答案是真诚。如果我们是真诚的，那就不仅可以避免矫饰，还可以避免一整套类似的恶习。</p><p>The core of being earnest is being intellectually honest. We’re taught as children to be honest as an unselfish virtue — as a kind of sacrifice. But in fact it’s a source of power too. To see new ideas, you need an exceptionally sharp eye for the truth. You’re trying to see more truth than others have seen so far. And how can you have a sharp eye for the truth if you’re intellectually dishonest?</p><p>真诚的核心是诚实。我们从小就被教导要诚实，作为一种无私的美德 —— 作为一种牺牲。但事实上，它是一种力量的来源，要看到新的想法，我们需要对真相异常敏锐。假设我们正在试图看到比其他人到目前为止看到的更多的真相，如果我们在智力上不诚实，又怎么能对真相有敏锐的眼光呢？</p><p>One way to avoid intellectual dishonesty is to maintain a slight positive pressure in the opposite direction. Be aggressively willing to admit that you’re mistaken. Once you’ve admitted you were mistaken about something, you’re free. Till then you have to carry it. [13]</p><p>保持智力诚实（Intellectual Honesty）的一种方法是保持轻微的正压。愿意积极承认自己的错误 —— 一旦我们承认自己在某件事上犯了错误，就自由了 —— 在这之前，我们必须承担它。[13]</p><p>Another more subtle component of earnestness is informality. Informality is much more important than its grammatically negative name implies. It’s not merely the absence of something. It means focusing on what matters instead of what doesn’t.</p><p>真诚的另一个更微妙的组成部分是不拘小节。「不拘小节」比它的语法层面所暗示的要重要得多，<strong>它不仅仅意味着少做某些事，还意味着关注重要的事情，而不是无关的事情。</strong></p><p>What formality and affectation have in common is that as well as doing the work, you’re trying to seem a certain way as you’re doing it. But any energy that goes into how you seem comes out of being good. That’s one reason nerds have an advantage in doing great work: they expend little effort on seeming anything. In fact that’s basically the definition of a nerd.</p><p>拘泥于形式和矫饰的共同点是，你在做工作的同时，也试图以某种方式伪装。但任何投入到「表面功夫」中能量都会被从做重要的事情中分走。这就是为什么书呆子在做伟大的工作上有优势的一个原因：他们在表面功夫上花费的努力很小。事实上，这基本上就是书呆子的定义。</p><p>Nerds have a kind of innocent boldness that’s exactly what you need in doing great work. It’s not learned; it’s preserved from childhood. So hold onto it. Be the one who puts things out there rather than the one who sits back and offers sophisticated-sounding criticisms of them. “It’s easy to criticize” is true in the most literal sense, and the route to great work is never easy.</p><p>书呆子有一种天真的大胆，这正是你在做伟大的工作时所需要的。它不是学来的；它是从童年保留下来的，所以要保持它。<strong>成为那个把事情做出来的人，而不是坐在背后提供复杂的批评的人。</strong>「批评很容易」在最字面的意义上是真的，而取得伟大成就的路永远不容易。</p><p>There may be some jobs where it’s an advantage to be cynical and pessimistic, but if you want to do great work it’s an advantage to be optimistic, even though that means you’ll risk looking like a fool sometimes. There’s an old tradition of doing the opposite. The Old Testament says it’s better to keep quiet lest you look like a fool. But that’s advice for seeming smart. If you actually want to discover new things, it’s better to take the risk of telling people your ideas.</p><p>可能有一些工作，悲观是一个优势，但如果我们想去的杰出成就，乐观是一个优势，即便这意味着我们有时会冒看起来像一个傻瓜的风险。旧传统指导我们做相反的事，《旧约圣经》说：最好保持安静，以免看起来像一个傻瓜 —— 但这是为了看起来聪明的建议，如果我们真的想发现新的东西，最好冒险告诉人们自己的想法。</p><p>Some people are naturally earnest, and with others it takes a conscious effort. Either kind of earnestness will suffice. But I doubt it would be possible to do great work without being earnest. It’s so hard to do even if you are. You don’t have enough margin for error to accommodate the distortions introduced by being affected, intellectually dishonest, orthodox, fashionable, or cool. [14]</p><p>有些人天生就是真诚的，有些人需要有意识的努力，任何一种真诚都足够。但我怀疑，**如果没有真诚，就不可能做出伟大的工作，而且即使我们是真诚的，也很难做到。**我们没有足够的误差边际来容纳被影响、智力上的不诚实、拘泥于形式、流行或酷带来的现实扭曲。[14]</p><p>Great work is consistent not only with who did it, but with itself. It’s usually all of a piece. So if you face a decision in the middle of working on something, ask which choice is more consistent.</p><p>优秀的作品不仅与创作者保持一致，也与作品本身保持一致。通常而言，优秀的作品都是成体系的 —— 所以，如果我们在工作中面临抉择，问问自己哪个选择更有一致性。</p><p>You may have to throw things away and redo them. You won’t necessarily have to, but you have to be willing to. And that can take some effort; when there’s something you need to redo, status quo bias and laziness will combine to keep you in denial about it. To beat this ask: If I’d already made the change, would I want to revert to what I have now?</p><p>我们可能不得不放弃一些事情并重新开始，我们不一定必须这样做，但我们必须愿意这样做，这可能需要一些努力。当我们需要重做一些事情时，对维持现状的倾向性和懒惰会联合起来让我们否认这个想法。为了克服这个问题，问问自己：如果我已经做了改变，我是否想要恢复现在的状态？</p><p>Have the confidence to cut. Don’t keep something that doesn’t fit just because you’re proud of it, or because it cost you a lot of effort.</p><p>**要有放弃的信心与决心。**不要仅仅因为自己为其感到骄傲，或者花费了很多努力，就保留不合适的东西。</p><p>Indeed, in some kinds of work it’s good to strip whatever you’re doing to its essence. The result will be more concentrated; you’ll understand it better; and you won’t be able to lie to yourself about whether there’s anything real there.</p><p>实际上，在某些类型的工作中，层层剥离并探究自己正在做的事情的本质是好的。结果会更加直接明了，我们会更好地理解它，也将无法对自己撒谎，需要直面其中是否有真正重要的东西。</p><p>Mathematical elegance may sound like a mere metaphor, drawn from the arts. That’s what I thought when I first heard the term “elegant” applied to a proof. But now I suspect it’s conceptually prior — that the main ingredient in artistic elegance is mathematical elegance. At any rate it’s a useful standard well beyond math.</p><p>数学优雅（Mathematical Elegance）可能听起来像是一个纯粹的隐喻，来自艺术 —— 当我第一次听到用「优雅」这个词用来形容一个证明时，我就是这么想的。但现在我倾向于它在概念上是先行的 —— 艺术优雅的主要成分是数学优雅 —— 无论如何，这都是一个超越数学的有用标准。</p><p>Elegance can be a long-term bet, though. Laborious solutions will often have more prestige in the short term. They cost a lot of effort and they’re hard to understand, both of which impress people, at least temporarily.</p><p>然而，**优雅是一个长期的投注。**费力的解决方案在短期内通常会有更高的声望，它们需要大量的努力，而且很难理解，这两点都会让人印象深刻，但也许是暂时的。</p><p>Whereas some of the very best work will seem like it took comparatively little effort, because it was in a sense already there. It didn’t have to be built, just seen. It’s a very good sign when it’s hard to say whether you’re creating something or discovering it.</p><p>相反，完成一些最好的作品看起来好像只花费了相对较少的努力，因为它在某种意义上已经存在了，它不需要被创造，只需要被看到。<strong>当我们很难说自己是在创造某物还是在发现它时，这是一个非常好的迹象。</strong></p><p>When you’re doing work that could be seen as either creation or discovery, err on the side of discovery. Try thinking of yourself as a mere conduit through which the ideas take their natural shape.</p><p>当我们正在做的工作可以被看作是创造或发现时，请偏向于发现。试着把自己想象成一个管道，通过它，想法可以自然地形成。</p><p>(Strangely enough, one exception is the problem of choosing a problem to work on. This is usually seen as search, but in the best case it’s more like creating something. In the best case you create the field in the process of exploring it.)</p><p>（奇怪的是，选择要解决的问题这件事是一个例外。这通常被视为搜索，但在最好的情况下，它更像是创造一些东西，我们在探索过程中创造了某个领域。）</p><p>Similarly, if you’re trying to build a powerful tool, make it gratuitously unrestrictive. A powerful tool almost by definition will be used in ways you didn’t expect, so err on the side of eliminating restrictions, even if you don’t know what the benefit will be.</p><p>同样，如果我们试图构建一个强大的工具，那要让它尽可能地无限制。一个强大的工具会以我们没有预料到的方式被使用 —— 这几乎可以算作强大工具的定义，所以要倾向于消除限制，即使你不知道这样做会有什么好处。</p><p>Great work will often be tool-like in the sense of being something others build on. So it’s a good sign if you’re creating ideas that others could use, or exposing questions that others could answer. The best ideas have implications in many different areas.</p><p>伟大的作品通常会像工具一样，其他人可以基于其再构建作品。所以，如果我们正在创造其他人可以使用的想法，或者揭示出其他人可以回答的问题，那么这是一个好的迹象 —— 最好的想法在许多不同的领域都有影响。</p><p>If you express your ideas in the most general form, they’ll be truer than you intended.</p><p><strong>如果我们以最通用的形式表达自己的想法，它们会比我们预期中的更真实。</strong></p><h3 id="六、打破常规者人恒敬之"><a href="#六、打破常规者人恒敬之" class="headerlink" title="六、打破常规者人恒敬之"></a>六、打破常规者人恒敬之</h3><p>True by itself is not enough, of course. Great ideas have to be true and new. And it takes a certain amount of ability to see new ideas even once you’ve learned enough to get to one of the frontiers of knowledge.</p><p>当然，仅仅真实是不够的，<strong>伟大的想法必须是真实且新颖的</strong>。并且，即使我们已经学到足够的知识来到达知识的前沿，看到新的想法也需要一定的能力。</p><p>In English we give this ability names like originality, creativity, and imagination. And it seems reasonable to give it a separate name, because it does seem to some extent a separate skill. It’s possible to have a great deal of ability in other respects — to have a great deal of what’s often called technical ability — and yet not have much of this.</p><p>在英语中，我们给这种能力取了如原创性、创造性和想象力等名字。给它一个单独的名字似乎是合理的，因为在某种程度上它似乎是一个单独的技能。我们可能在其他方面有很高的能力 —— 很高的「技术性能力」—— 但可能没有这么多看到新想法的能力。</p><p>I’ve never liked the term “creative process.” It seems misleading. Originality isn’t a process, but a habit of mind. Original thinkers throw off new ideas about whatever they focus on, like an angle grinder throwing off sparks. They can’t help it.</p><p>我从未喜欢过「创新过程」这个词，它似乎有些误导性。原创不是一个过程，而是一种思维习惯。原创的思想家，无论他们关注的是什么，都会产生新的想法，就像角磨机抛出火花一样，没有人可以控制这种现象的发生。</p><p>If the thing they’re focused on is something they don’t understand very well, these new ideas might not be good. One of the most original thinkers I know decided to focus on dating after he got divorced. He knew roughly as much about dating as the average 15 year old, and the results were spectacularly colorful. But to see originality separated from expertise like that made its nature all the more clear.</p><p>如果一个人关注的事情是自己不太理解的事情，这些新的想法可能并不好。我认识的最具原创性的思考者之一在离婚后决定专注于约会，他对约会的了解不甚深入，大约与一般 15 岁的孩子一样，结果好得令人惊讶 —— 看到原创性与专业知识是分离的，它的本质就变得更加清晰。</p><p>I don’t know if it’s possible to cultivate originality, but there are definitely ways to make the most of however much you have. For example, you’re much more likely to have original ideas when you’re working on something. Original ideas don’t come from trying to have original ideas. They come from trying to build or understand something slightly too difficult. [15]</p><p>我不知道原创性是否可以被培养出来，但肯定有方法可以最大限度地利用自己所拥有的。例如，当我们在工作时，更有可能产生原创想法。原创想法并不来自于刻意的尝试，而是来自于尝试构建或理解稍微困难的东西。[15]</p><p>Talking or writing about the things you’re interested in is a good way to generate new ideas. When you try to put ideas into words, a missing idea creates a sort of vacuum that draws it out of you. Indeed, there’s a kind of thinking that can only be done by writing.</p><p>讨论或写作我们感兴趣的事情是产生新想法的好途径。当我们试图把想法用词语表达出来时，缺失的想法会产生一种「吸引力」，把新想法从自己身上「吸引」出来。实际上，有一种思考只能通过写作来完成。</p><p>Changing your context can help. If you visit a new place, you’ll often find you have new ideas there. The journey itself often dislodges them. But you may not have to go far to get this benefit. Sometimes it’s enough just to go for a walk. [16]</p><p>改变我们所处的环境可能有所帮助。如果我们到访一个新地方*（这里地方的定义是模糊的，不特指物理坐标）*，会发现自己在那里会产生新想法，旅行本身通常会使灵感涌现。但是，我们可能不必走得很远就能体会到这种妙处 —— 有时候，只需要去散步就足够了。[16]</p><p>It also helps to travel in topic space. You’ll have more new ideas if you explore lots of different topics, partly because it gives the angle grinder more surface area to work on, and partly because analogies are an especially fruitful source of new ideas.</p><p>了解不同的专业领域也会有所帮助。如果我们探索了许多不同的领域，会有更多新想法，这就像是给了角磨机更大的工作表面，另一部分原因则是，类比是新想法的丰富的来源。</p><p>Don’t divide your attention evenly between many topics though, or you’ll spread yourself too thin. You want to distribute it according to something more like a power law. [17] Be professionally curious about a few topics and idly curious about many more.</p><p>不过，**不要把注意力平均分配到许多领域上，**否则会分散得太薄。我们应该根据幂律分布的规则来分配它 [17] —— <strong>对少数几个主题「专业地好奇」，对更多的主题「随便地好奇」。</strong></p><p>Curiosity and originality are closely related. Curiosity feeds originality by giving it new things to work on. But the relationship is closer than that. Curiosity is itself a kind of originality; it’s roughly to questions what originality is to answers. And since questions at their best are a big component of answers, curiosity at its best is a creative force.</p><p>好奇心和原创性密切相关。表面上看，好奇心通过给原创性提供新事物来喂养它，但两者之间的关系比这更紧密 —— 好奇心本身就是一种原创性，它大致可以被视为问题的原创性，和答案的原创性一样。而且，既然在最理想的情况下，问题在答案中的权重很高，那么同样在最理想的情况下，好奇心就是创造力的一种。</p><p>Having new ideas is a strange game, because it usually consists of seeing things that were right under your nose. Once you’ve seen a new idea, it tends to seem obvious. Why did no one think of this before?</p><p>拥有新想法是一种奇怪的游戏，因为通常它还包括看到那些就在我们眼前的东西。一旦我们看到一个新的想法，它往往显得很明显 —— 为什么之前没有人想到这个？</p><p>When an idea seems simultaneously novel and obvious, it’s probably a good one.</p><p><strong>当一个想法看起来既新颖又显而易见时，它可能是个好主意。</strong></p><p>Seeing something obvious sounds easy. And yet empirically having new ideas is hard. What’s the source of this apparent contradiction? It’s that seeing the new idea usually requires you to change the way you look at the world. We see the world through models that both help and constrain us. When you fix a broken model, new ideas become obvious. But noticing and fixing a broken model is hard. That’s how new ideas can be both obvious and yet hard to discover: they’re easy to see after you do something hard.</p><p>看到显而易见的东西听起来很容易，然而，从经验上看，产生新想法是困难的，这个明显矛盾的源头是什么呢？那就是看到新的想法通常需要我们改变看世界的方式。我们通过模型看世界，这些模型既帮助着我们，也限制着我们，在修复有问题的世界模型的过程中，新的想法会变得显而易见，但注意到并修复一个有问题的模型是困难的，这就是新的想法既明显又难以发现的原因。在你做了一些困难的事情之后，它们就容易被看到。</p><p>One way to discover broken models is to be stricter than other people. Broken models of the world leave a trail of clues where they bash against reality. Most people don’t want to see these clues. It would be an understatement to say that they’re attached to their current model; it’s what they think in; so they’ll tend to ignore the trail of clues left by its breakage, however conspicuous it may seem in retrospect.</p><p>发现有问题的世界模型的方法之一是比其他人更严谨。有问题的模型在与现实发生冲突时会留下一些迹象，但大多数人不想看到这些迹象。保守的说法是，人们倾向于依赖于他们当前的模型，这就是他们的思维方式，所以他们倾向于忽略模型出现问题时留下的线索，无论这在反思中看起来多么明显。</p><p>To find new ideas you have to seize on signs of breakage instead of looking away. That’s what Einstein did. He was able to see the wild implications of Maxwell’s equations not so much because he was looking for new ideas as because he was stricter.</p><p>要找到新的想法，我们必须抓住这些迹象，而不是避而不见。这就是爱因斯坦做的，他能看到麦克斯韦方程的伟大意义，不是因为他在寻找新的想法，而是因为他更严谨。</p><p>The other thing you need is a willingness to break rules. Paradoxical as it sounds, if you want to fix your model of the world, it helps to be the sort of person who’s comfortable breaking rules. From the point of view of the old model, which everyone including you initially shares, the new model usually breaks at least implicit rules.</p><p>**我们所要做的另一件事是愿意打破规则。**虽然这听起来矛盾，但如果我们想修正自己的世界模型，那么成为一个习惯于打破规则的人会有所帮助。从旧模型的观点来看，这个模型通常至少会违反隐含的规则，包括我们自己最初也是这么认为的。</p><p>Few understand the degree of rule-breaking required, because new ideas seem much more conservative once they succeed. They seem perfectly reasonable once you’re using the new model of the world they brought with them. But they didn’t at the time; it took the greater part of a century for the heliocentric model to be generally accepted, even among astronomers, because it felt so wrong.</p><p>很少有人了解打破规则所需的程度，因为新的想法在成功后看起来更保守。一旦我们使用了新的世界模型，它们会看起来完全合理，但开始的时候并不是这样的，地心模型在天文学家中被普遍接受甚至都花了近一个世纪，在这期间，所有人都觉得它错的离谱。</p><p>Indeed, if you think about it, a good new idea has to seem bad to most people, or someone would have already explored it. So what you’re looking for is ideas that seem crazy, but the right kind of crazy. How do you recognize these? You can’t with certainty. Often ideas that seem bad are bad. But ideas that are the right kind of crazy tend to be exciting; they’re rich in implications; whereas ideas that are merely bad tend to be depressing.</p><p>实际上，如果我们思考一下会发现，一个好的新想法必须对大多数人来说看起来是坏的，否则就已经有人探索过了。所以**我们在寻找的是那些看起来疯狂，但是正确类别的疯狂想法。**我们如何识别他们呢？不能确定。通常看起来不好的想法就是不好的，但是，正确类别的疯狂想法往往是令人兴奋的，它们富有意蕴，而单纯的坏想法往往会让人感到沮丧。</p><p>There are two ways to be comfortable breaking rules: to enjoy breaking them, and to be indifferent to them. I call these two cases being aggressively and passively independent-minded.</p><p><strong>有两种方式可以让我们自然而然地打破规则：享受打破规则本身，或干脆无视规则 —— 我将它们分别称为积极和被动独立思考。</strong></p><p>The aggressively independent-minded are the naughty ones. Rules don’t merely fail to stop them; breaking rules gives them additional energy. For this sort of person, delight at the sheer audacity of a project sometimes supplies enough activation energy to get it started.</p><p>积极独立思考的是那些叛逆的人。规则不仅无法阻止他们，打破规则还会给他们额外的能量。对这类人来说，一个项目的纯粹胆大有时就可以提供足够的「激活能量」让它启动。</p><p>The other way to break rules is not to care about them, or perhaps even to know they exist. This is why novices and outsiders often make new discoveries; their ignorance of a field’s assumptions acts as a source of temporary passive independent-mindedness. Aspies also seem to have a kind of immunity to conventional beliefs. Several I know say that this helps them to have new ideas.</p><p>打破规则的另一种方式是不关心甚至不知道它们的存在 —— 这就是为什么新手和外行人经常做出新发现，他们对所在领域既有假设的无知可以作为一种暂时的被动独立思考的来源。自闭症患者似乎也对常规信条有着免疫力，我认识的几个人说这帮助他们有新的想法。</p><p>Strictness plus rule-breaking sounds like a strange combination. In popular culture they’re opposed. But popular culture has a broken model in this respect. It implicitly assumes that issues are trivial ones, and in trivial matters strictness and rule-breaking are opposed. But in questions that really matter, only rule-breakers can be truly strict.</p><p>「严谨 + 打破规则」听起来像是一个奇怪的组合。在主流文化中，他们是对立的，但在这方面，主流文化的模型是有问题的，它默认假设问题都是琐碎的，而在琐碎的事情中，严谨和打破规则确实是对立的，但<strong>在真正重要的问题中，只有打破规则的人才是真正严谨的。</strong></p><p>An overlooked idea often doesn’t lose till the semifinals. You do see it, subconsciously, but then another part of your subconscious shoots it down because it would be too weird, too risky, too much work, too controversial. This suggests an exciting possibility: if you could turn off such filters, you could see more new ideas.</p><p>一个被主流文化忽视的想法通常直到半决赛才败下阵来。我们在潜意识中看到了它，然而潜意识的另一部分会击败它，因为它太奇怪、太冒险、太麻烦、太有争议。但这隐含了一个令人兴奋的可能性：我们如果能关闭这些过滤器，就能看到更多的新想法。</p><p>One way to do that is to ask what would be good ideas for someone else to explore. Then your subconscious won’t shoot them down to protect you.</p><p>做到这一点的方式之一是问自己：什么是别人认为的好想法？这样我们的潜意识就不会为了自我保护而否决他们。</p><p>You could also discover overlooked ideas by working in the other direction: by starting from what’s obscuring them. Every cherished but mistaken principle is surrounded by a dead zone of valuable ideas that are unexplored because they contradict it.</p><p>我们也可以从掩盖它们的事物着手，来发现被忽视的想法。每个被珍视的错误原则周围，都存在一片有价值但因为它们与原则相矛盾而未被探索的想法的栖息地。</p><p>Religions are collections of cherished but mistaken principles. So anything that can be described either literally or metaphorically as a religion will have valuable unexplored ideas in its shadow. Copernicus and Darwin both made discoveries of this type. [18]</p><p>宗教是被珍视但错误原则的集合。所以无论是字面意义上或隐喻地，任何被描述为宗教的东西的阴影之下都存在有价值的但未被探索的想法，哥白尼和达尔文都做出了此类发现。[18]</p><p>What are people in your field religious about, in the sense of being too attached to some principle that might not be as self-evident as they think? What becomes possible if you discard it?</p><p><strong>在我们所在的领域，人们对什么规则过分依赖，以至于它们可能不像公认的那般可以自证其是？如果我们抛弃这个原则，会有什么可能性？</strong></p><p>People show much more originality in solving problems than in deciding which problems to solve. Even the smartest can be surprisingly conservative when deciding what to work on. People who’d never dream of being fashionable in any other way get sucked into working on fashionable problems.</p><p>人们在解决问题上所表现出的原创性远超在决定要解决哪些问题上。即使是最聪明的人，在决定要做什么时也可能惊人地保守，那些在其他任何方面都不会想要赶时髦的人也会被吸入到处理「时兴问题」的漩涡中。</p><p>One reason people are more conservative when choosing problems than solutions is that problems are bigger bets. A problem could occupy you for years, while exploring a solution might only take days. But even so I think most people are too conservative. They’re not merely responding to risk, but to fashion as well. Unfashionable problems are undervalued.</p><p>问题需要我们下大赌注，这也是人们选择问题比解决问题更保守的原因之一。一个问题可能伴随我们好几年的时间，而探索一个解决方案可能只需要几天。但即便如此，我认为大多数人都过于保守，他们不仅仅是在回避风险，也在迎合潮流，不流行的问题被低估了。</p><p>One of the most interesting kinds of unfashionable problem is the problem that people think has been fully explored, but hasn’t. Great work often takes something that already exists and shows its latent potential. Durer and Watt both did this. So if you’re interested in a field that others think is tapped out, don’t let their skepticism deter you. People are often wrong about this.</p><p>最有趣的一类不流行问题是那些人们认为已经完全探索过，但实际上并没有的。**杰出的成就往往源于已经存在的东西，但问题发现者深入探索并展现了其更多潜力，**杜勒尔和瓦特都做到了这一点。所以，如果我们对别人认为已经被充分探索的领域感兴趣，不要让他们的怀疑阻挡我们，人们往往会在这方面犯错。</p><p>Working on an unfashionable problem can be very pleasing. There’s no hype or hurry. Opportunists and critics are both occupied elsewhere. The existing work often has an old-school solidity. And there’s a satisfying sense of economy in cultivating ideas that would otherwise be wasted.</p><p>解决不流行的问题可能会非常愉快，工作过程中没有炒作或忙慌。机会主义者和批评者都在别处忙碌，这时我们的工作往往有一种气定神闲的稳定，在努力「培育」这些「否则会被浪费」的想法时，有一种令人满足的经济感。</p><p>But the most common type of overlooked problem is not explicitly unfashionable in the sense of being out of fashion. It just doesn’t seem to matter as much as it actually does. How do you find these? By being self-indulgent — by letting your curiosity have its way, and tuning out, at least temporarily, the little voice in your head that says you should only be working on “important” problems.</p><p>但最常见的被忽视的问题并不是明确地不流行，而是它们并未过时，只是似乎没有它实际上那么重要。我们怎么找到这些呢？通过自我放纵 —— 通过让自己的好奇心有其自由发挥的空间，至少暂时地屏蔽自己脑中那个说我们只应该在「重要」问题上工作的小声音。</p><p>You do need to work on important problems, but almost everyone is too conservative about what counts as one. And if there’s an important but overlooked problem in your neighborhood, it’s probably already on your subconscious radar screen. So try asking yourself: if you were going to take a break from “serious” work to work on something just because it would be really interesting, what would you do? The answer is probably more important than it seems.</p><p>我们确实需要将精力放在重要的问题上，但几乎每个人在评价什么算重要问题时都过于保守。而且，如果我们周围有一个重要但被忽视的问题，它可能已经在我们的潜意识雷达中了。所以，试着问自己：**如果我要从「严肃」的工作中抽出时间，只是因为这会非常有趣，我会做什么？**答案可能比看起来更重要。</p><p>Originality in choosing problems seems to matter even more than originality in solving them. That’s what distinguishes the people who discover whole new fields. So what might seem to be merely the initial step — deciding what to work on — is in a sense the key to the whole game.</p><p>**选择问题的原创性似乎比解决问题的原创性更重要，这是区分那些发现全新领域的人的关键点。**所以，可能看起来只是初步步骤的东西 —— 决定要做什么 —— 在某种意义上是整个游戏的关键。</p><p>Few grasp this. One of the biggest misconceptions about new ideas is about the ratio of question to answer in their composition. People think big ideas are answers, but often the real insight was in the question.</p><p>很少有人能理解这一点。关于新想法的最大的误解之一是关于他们的组成中问题与答案的比例，人们认为重要的部分是答案，但往往真正的洞察在于问题。</p><p>Part of the reason we underrate questions is the way they’re used in schools. In schools they tend to exist only briefly before being answered, like unstable particles. But a really good question can be much more than that. A really good question is a partial discovery. How do new species arise? Is the force that makes objects fall to earth the same as the one that keeps planets in their orbits? By even asking such questions you were already in excitingly novel territory.</p><p>我们低估问题的一部分原因是学校的教育方式。在学校里，问题往往只在被解决之前存在一段很短的时间，就像不稳定粒子一样。但一个真正好的问题可以是更多的东西，一个真正好的问题是发现的一部分：新物种是如何产生的？让物体向地球坠落的力量和让行星保持在它们轨道上的力量是同一个吗？通过甚至提出这样的问题，我们已经进入了令人兴奋的新领域。</p><p>Unanswered questions can be uncomfortable things to carry around with you. But the more you’re carrying, the greater the chance of noticing a solution — or perhaps even more excitingly, noticing that two unanswered questions are the same.</p><p>未解决的问题与我们如影随形，会让我们感到负担。但我们带着的问题越多，发现解决方案的机会就越大 —— 或者可能更令人兴奋的是，发现两个未回答的问题是同一个。</p><p>Sometimes you carry a question for a long time. Great work often comes from returning to a question you first noticed years before — in your childhood, even — and couldn’t stop thinking about. People talk a lot about the importance of keeping your youthful dreams alive, but it’s just as important to keep your youthful questions alive. [19]</p><p>有时候一个问题会伴随我们很长时间。杰出的成就往往出自我们多年前 —— 甚至我们的童年同期 —— 首次注意到的，而且无法停止思考的问题。人们经常谈论保持自己年轻时梦想活跃的重要性，但保持年轻时问题的活跃同样重要。[19]</p><p>This is one of the places where actual expertise differs most from the popular picture of it. In the popular picture, experts are certain. But actually the more puzzled you are, the better, so long as (a) the things you’re puzzled about matter, and (b) no one else understands them either.</p><p>专业知识的实际形态与大众印象最大的区别之一是，**在大众印象中，专家们是胸有成竹的，但实际上，我们越是困惑，越好，**只要（a）我们困惑的事情是重要的，并且（b）没有其他人也理解它们。</p><p>Think about what’s happening at the moment just before a new idea is discovered. Often someone with sufficient expertise is puzzled about something. Which means that originality consists partly of puzzlement — of confusion! You have to be comfortable enough with the world being full of puzzles that you’re willing to see them, but not so comfortable that you don’t want to solve them. [20]</p><p>想想新想法被发现的那一刻之前所发生的事，通常情况下，是一个具有足够专业知识的人对某事感到困惑，这意味着困惑是原创性的一部分 —— 混乱！我们必须愿意看到世界充满谜团，对此感到舒适，但也不能那么舒适，以至于不想解决它们。[20]</p><p>It’s a great thing to be rich in unanswered questions. And this is one of those situations where the rich get richer, because the best way to acquire new questions is to try answering existing ones. Questions don’t just lead to answers, but also to more questions.</p><p>拥有很多未解答的问题是一件很棒的事。这也是那些富有的人会变得更富的原因之一，<strong>获得新问题的最好方法是尝试回答现有的问题，问题不仅导向答案，而且也导向更多的问题。</strong></p><p>The best questions grow in the answering. You notice a thread protruding from the current paradigm and try pulling on it, and it just gets longer and longer. So don’t require a question to be obviously big before you try answering it. You can rarely predict that. It’s hard enough even to notice the thread, let alone to predict how much will unravel if you pull on it.</p><p>**最好的问题会在被回答的过程中成长。**我们注意到当前范式中一条显眼的线索，并试图拉扯它，它就会变得越来越长。所以，我们在试图回答问题之前，不要苛求问题的「大」是明确的，我们很少能预测到这一点，仅仅注意到线索就已经很难了，更不用说预测如果我们拉扯它，会有多少东西随之而来。</p><p>It’s better to be promiscuously curious — to pull a little bit on a lot of threads, and see what happens. Big things start small. The initial versions of big things were often just experiments, or side projects, or talks, which then grew into something bigger. So start lots of small things.</p><p>最好的方法是保持广泛的好奇心 —— 在许多线索上都稍微拉一拉，看看会发生什么。大事物开始时都很小，它们的初始版本通常只是实验、副项目或者演讲，然后逐渐发展成更大的事物 —— 所以，我们应该开始着手做很多小事情。</p><p>Being prolific is underrated. The more different things you try, the greater the chance of discovering something new. Understand, though, that trying lots of things will mean trying lots of things that don’t work. You can’t have a lot of good ideas without also having a lot of bad ones. [21]</p><p>**高产的作用是被低估的。**我们尝试的事情越多，发现新事物的机会就越大。然而，要知道，尝试很多事也将意味着尝试很多无用的事，我们不能只有很多好主意而没有同样多的坏主意。[21]</p><p>Though it sounds more responsible to begin by studying everything that’s been done before, you’ll learn faster and have more fun by trying stuff. And you’ll understand previous work better when you do look at it. So err on the side of starting. Which is easier when starting means starting small; those two ideas fit together like two puzzle pieces.</p><p>当我们进入一个领域时，虽然从学习前人的工作成果开始听起来更负责任，但通过尝试，我们会学得更快，也会收获更多的乐趣，而当我们去看前人的工作时，也会更好地理解它们。所以，在初始阶段不要害怕犯错，与此同时，这也意味着我们从小事着手更加容易，这两个想法就像两片相邻的拼图片一般契合。</p><p>How do you get from starting small to doing something great? By making successive versions. Great things are almost always made in successive versions. You start with something small and evolve it, and the final version is both cleverer and more ambitious than anything you could have planned.</p><p>我们如何从小事开始做出伟大的事情？通过做有连续性的事。伟大的事业几乎总是在一系列连续的工作中被成就的。我们从一些小事开始，逐渐发展它，最后的版本既比我们可能计划的任何东西更好，也更有想象空间。</p><p>It’s particularly useful to make successive versions when you’re making something for people — to get an initial version in front of them quickly, and then evolve it based on their response.</p><p>当我们为人们做东西时，制作连续的版本特别有用 —— 快速地将初始版本呈现给他们，然后根据他们的反应进行演变。</p><p>Begin by trying the simplest thing that could possibly work. Surprisingly often, it does. If it doesn’t, this will at least get you started.</p><p><strong>试试可能行得通的最简单的东西。出乎意料地，它经常会是有用的，如果没有，至少这会让我们启程。</strong></p><p>Don’t try to cram too much new stuff into any one version. There are names for doing this with the first version (taking too long to ship) and the second (the second system effect), but these are both merely instances of a more general principle.</p><p>不要试图在任何一个版本中塞进太多的新东西。对此有一些对应的名称，对第一个版本来说是呈现（delivery）花费太长时间，对第二个版本来说是第二系统效应，但这些都只是更具一般性原则的例子。</p><p>An early version of a new project will sometimes be dismissed as a toy. It’s a good sign when people do this. That means it has everything a new idea needs except scale, and that tends to follow. [22]</p><p>新项目的早期版本有时会被贬低为玩具。当人们这么做时，这是个好兆头，这意味着它具备新思想所需要的一切，只是缺乏规模，而那往往会随之而来。[22]</p><p>The alternative to starting with something small and evolving it is to plan in advance what you’re going to do. And planning does usually seem the more responsible choice. It sounds more organized to say “we’re going to do x and then y and then z” than “we’re going to try x and see what happens.” And it is more organized; it just doesn’t work as well.</p><p>从小发展的另一种选择是事先计划我们要做的事情。计划通常看起来是更负责任的选择，说「我们要做 x，然后做 y，然后做 z」听起来比「我们要试试 x，看看会发生什么」似乎更有组织，它确实更有组织，只是效果不那么好。</p><p>Planning per se isn’t good. It’s sometimes necessary, but it’s a necessary evil — a response to unforgiving conditions. It’s something you have to do because you’re working with inflexible media, or because you need to coordinate the efforts of a lot of people. If you keep projects small and use flexible media, you don’t have to plan as much, and your designs can evolve instead.</p><p>计划本身并不好，但有时候它是必要的，只是是一种必要的恶 —— 对无情条件的反应。我们必须这么做，因为我们正在使用不灵活的媒介，或者因为我们需要协调很多人的努力，如果我们保持项目小而使用灵活的媒介，就不必计划那么多，我们的设计可以逐步演变。</p><p>Take as much risk as you can afford. In an efficient market, risk is proportionate to reward, so don’t look for certainty, but for a bet with high expected value. If you’re not failing occasionally, you’re probably being too conservative.</p><p>尽可能承担我们负担得起的风险。**在有效市场中，风险与回报成比例，所以不要寻求确定性，而要寻找高期望价值的赌注。**如果我们不失败，偶尔可能是因为过于保守。</p><p>Though conservatism is usually associated with the old, it’s the young who tend to make this mistake. Inexperience makes them fear risk, but it’s when you’re young that you can afford the most.</p><p>虽然保守主义通常是老年人的代名词，但年轻人更容易犯这个错误。无经验让他们害怕风险，但实际上，我们年轻的时候承受得起的风险最大。</p><p>Even a project that fails can be valuable. In the process of working on it, you’ll have crossed territory few others have seen, and encountered questions few others have asked. And there’s probably no better source of questions than the ones you encounter in trying to do something slightly too hard.</p><p>即使一个项目失败了，也可以是有价值的。因为在处理它的过程中，我们会穿过很少有人见过的领域，遇到很少有人提出的问题。<strong>试图做一些稍微难一点的事情，在这个过程中遇到的问题可能是全新问题的最好来源。</strong></p><p>Use the advantages of youth when you have them, and the advantages of age once you have those. The advantages of youth are energy, time, optimism, and freedom. The advantages of age are knowledge, efficiency, money, and power. With effort you can acquire some of the latter when young and keep some of the former when old.</p><p>在我们有年轻人的优势时，使用它们，一旦我们有了有经验的优势，就使用那些。<strong>年轻人的优势是精力、时间、乐观和自由，有经验的优势是知识、效率、金钱和权力 —— 努力工作，我们可以在年轻时获取一些后者，并在经验渐长时保持一些前者。</strong></p><p>The old also have the advantage of knowing which advantages they have. The young often have them without realizing it. The biggest is probably time. The young have no idea how rich they are in time. The best way to turn this time to advantage is to use it in slightly frivolous ways: to learn about something you don’t need to know about, just out of curiosity, or to try building something just because it would be cool, or to become freakishly good at something.</p><p>有经验的人的另一个优势是知道自己有哪些优势。年轻人经常意识不到自己所拥有的优势 —— 最大的可能性来自时间，而年轻人对他们在时间上的富足没有任何概念。利用这个时间的最佳方式是以「略微任性」的方式来使用它：只是出于好奇心而去学习我们不需要知道的东西，或者只是因为一件事很酷而试图去建造一些东西，或者让自己变得非常擅长某事。</p><p>That “slightly” is an important qualification. Spend time lavishly when you’re young, but don’t simply waste it. There’s a big difference between doing something you worry might be a waste of time and doing something you know for sure will be. The former is at least a bet, and possibly a better one than you think. [23]</p><p>「略微」是一个重要的修饰词。当我们年轻的时候，可以挥霍时间，但不要简单地浪费它。做一些我们「担心可能是」浪费时间的事情和「确定会」浪费时间的事情之间有很大的区别 —— 前者至少是一次赌注，结果可能比我们认为的更好。[23]</p><p>The most subtle advantage of youth, or more precisely of inexperience, is that you’re seeing everything with fresh eyes. When your brain embraces an idea for the first time, sometimes the two don’t fit together perfectly. Usually the problem is with your brain, but occasionally it’s with the idea. A piece of it sticks out awkwardly and jabs you when you think about it. People who are used to the idea have learned to ignore it, but you have the opportunity not to. [24]</p><p><strong>年轻，或者说无经验的最微妙的优势，就是我们用全新的眼光看待一切</strong>。当我们的大脑第一次接受一个想法时，有时两者并不完全匹配，但通常问题出在我们的大脑上，偶尔在想法上。想法中的一部分突兀地冒出来，在我们思考时刺痛自己，习惯了这个感觉的人已经学会忽视它，但我们有机会不这样做。[24]</p><p>So when you’re learning about something for the first time, pay attention to things that seem wrong or missing. You’ll be tempted to ignore them, since there’s a 99% chance the problem is with you. And you may have to set aside your misgivings temporarily to keep progressing. But don’t forget about them. When you’ve gotten further into the subject, come back and check if they’re still there. If they’re still viable in the light of your present knowledge, they probably represent an undiscovered idea.</p><p>所以，当我们第一次学习某件事时，要注意那些似乎错误或缺失的东西。我们会被诱惑忽视它们，认为有 99% 的可能性问题在自己身上，并且我们可能必须暂时放下自己的疑虑以继续前进，但不要忘记它们 —— 当我们深入到领域中，再回来检查它们是否依然存在，如果在我们现在的知识水平下，它们仍然是可行的，那么它们可能代表着一个未被发现的想法。</p><p>One of the most valuable kinds of knowledge you get from experience is to know what you don’t have to worry about. The young know all the things that could matter, but not their relative importance. So they worry equally about everything, when they should worry much more about a few things and hardly at all about the rest.</p><p>**经验给我们带来的最有价值的知识之一是知道我们不必担心什么。**年轻人知道所有可能的事，但不知道它们的相对重要性，所以他们对所有事情都一样担忧，而我们应该只对几件事情担忧，对其他的事情几乎不需要担忧。</p><p>But what you don’t know is only half the problem with inexperience. The other half is what you do know that ain’t so. You arrive at adulthood with your head full of nonsense — bad habits you’ve acquired and false things you’ve been taught — and you won’t be able to do great work till you clear away at least the nonsense in the way of whatever type of work you want to do.</p><p>但我们的无知只是缺乏经验问题的其中一半，另一半是我们所熟知的那些错误的东西。我们带着满脑子毫无意义的东西进入成年期 —— 已经养成的坏习惯和被教导的错误观念 —— 在清除了至少是在自己想做的工作的路上的噪声前，我们无法取得杰出成就。</p><p>Much of the nonsense left in your head is left there by schools. We’re so used to schools that we unconsciously treat going to school as identical with learning, but in fact schools have all sorts of strange qualities that warp our ideas about learning and thinking.</p><p>我们头脑中许多无意义的噪声都是学校留下的。我们习惯于学校，以至于我们无意识地将「去学校」当作「学习」，但实际上学校有各种奇怪的价值观，扭曲了我们对学习和思考的观念。</p><p>For example, schools induce passivity. Since you were a small child, there was an authority at the front of the class telling all of you what you had to learn and then measuring whether you did. But neither classes nor tests are intrinsic to learning; they’re just artifacts of the way schools are usually designed.</p><p>例如，学校会引导我们进行被动学习。当我们还是小孩子的时候，课堂便利用其权威告诉我们所有人必须学习什么，然后测试我们是否做到了，但是课堂和考试并不是学习的本质，他们只是学校通常设计的产物。</p><p>The sooner you overcome this passivity, the better. If you’re still in school, try thinking of your education as your project, and your teachers as working for you rather than vice versa. That may seem a stretch, but it’s not merely some weird thought experiment. It’s the truth economically, and in the best case it’s the truth intellectually as well. The best teachers don’t want to be your bosses. They’d prefer it if you pushed ahead, using them as a source of advice, rather than being pulled by them through the material.</p><p>尽快克服这种被动性越好。如果还在学校，那就试着把教育当作自己的项目，老师是在为自己工作，而不是反过来。这可能看起来有些牵强，但这不仅仅是一种特别的思维实验，从经济上说，这是真的，在最好的情况下，从知识上说也是真的，最好的老师不想做我们的老板。他们宁愿我们推进，用他们作为一个建议的来源，而不是被他们通过材料拉动。</p><p>Schools also give you a misleading impression of what work is like. In school they tell you what the problems are, and they’re almost always soluble using no more than you’ve been taught so far. In real life you have to figure out what the problems are, and you often don’t know if they’re soluble at all.</p><p>学校也给我们工作是什么样的误导性印象。在学校里，他们告诉我们问题是什么，而且几乎总是可以使用我们到目前为止学到的东西来解决。在现实生活中，我们必须找出问题是什么，而且往往不知道它们是否可以解决。</p><p>But perhaps the worst thing schools do to you is train you to win by hacking the test. You can’t do great work by doing that. You can’t trick God. So stop looking for that kind of shortcut. The way to beat the system is to focus on problems and solutions that others have overlooked, not to skimp on the work itself.</p><p>但是学校教导我们最糟糕的事情可能就是训练我们通过成为「小镇做题家（hacking the test）」来胜出比赛。我们不能通过这样做取得杰出成就，所以要停止寻找此类捷径，击败系统的方法是专注于其他人忽视的问题和解决方案，而不是偷工减料。</p><p>Don’t think of yourself as dependent on some gatekeeper giving you a “big break.” Even if this were true, the best way to get it would be to focus on doing good work rather than chasing influential people.</p><p><strong>不要依赖某个「看门人」给自己一个「大机会」，即使这是真的，得到它的最好方式是专注于做好工作，而不是追逐有影响力的人。</strong></p><p>And don’t take rejection by committees to heart. The qualities that impress admissions officers and prize committees are quite different from those required to do great work. The decisions of selection committees are only meaningful to the extent that they’re part of a feedback loop, and very few are.</p><p>也不要把「委员会」的拒绝放在心上。让招生官员和管理委员会印象深刻的品质与做出伟大工作所需的品质完全不同。选择管理层的决定只有在它们是反馈循环的一部分时才有意义，而很少有决定是这样的</p><p>People new to a field will often copy existing work. There’s nothing inherently bad about that. There’s no better way to learn how something works than by trying to reproduce it. Nor does copying necessarily make your work unoriginal. Originality is the presence of new ideas, not the absence of old ones.</p><p>在一个领域里，新手经常会复制已有的工作。这本身并没有什么错，试图复制一件事是学习它是如何运作的最好方式，复制并不一定会使我们的工作失去原创性，<strong>原创性在于新想法的产生，而不是旧想法的缺失。</strong></p><p>There’s a good way to copy and a bad way. If you’re going to copy something, do it openly instead of furtively, or worse still, unconsciously. This is what’s meant by the famously misattributed phrase “Great artists steal.” The really dangerous kind of copying, the kind that gives copying a bad name, is the kind that’s done without realizing it, because you’re nothing more than a train running on tracks laid down by someone else. But at the other extreme, copying can be a sign of superiority rather than subordination. [25]</p><p>有好的复制方式，也有坏的。如果我们要复制一些东西，那么公开地去做，而不是偷偷摸摸，或者更糟糕，无意识地去做，这就是那句被误传的名言「伟大的艺术家都是窃贼」的含义。真正危险的复制类型，即给复制带来坏名声的那种，就是我们在不知不觉中做的复制，在这种情况下，我们只不过是在别人铺设的轨道上行驶的列车，但在另一个极端，<strong>复制可以是一种超越的标志，而不是从属关系。</strong>[25]</p><p>In many fields it’s almost inevitable that your early work will be in some sense based on other people’s. Projects rarely arise in a vacuum. They’re usually a reaction to previous work. When you’re first starting out, you don’t have any previous work; if you’re going to react to something, it has to be someone else’s. Once you’re established, you can react to your own. But while the former gets called derivative and the latter doesn’t, structurally the two cases are more similar than they seem.</p><p>在很多领域里，我们早期的工作几乎不可避免地在某种程度上是基于他人的。项目很少是凭空产生的，它们通常是对已有工作的反应：刚开始的时候，我们自己没有任何已有工作，如果我们要对某事有反应，那必然是别人的工作，一旦我们有了稳定的地位，就可以对自己的工作有所反应。尽管前者被认为派生的，后者不被认为派生的，但从结构上看，两种情况比看起来更相似。</p><p>Oddly enough, the very novelty of the most novel ideas sometimes makes them seem at first to be more derivative than they are. New discoveries often have to be conceived initially as variations of existing things, even by their discoverers, because there isn’t yet the conceptual vocabulary to express them.</p><p>有时候，足够新颖的、最新奇的想法一开始看起来更加像派生出来的。在最初构想阶段，新的发现通常需要被视为现有事物的变形，甚至他们的发现者也是这样做的，因为还没有对应的概念以及词汇来描述它们。</p><p>There are definitely some dangers to copying, though. One is that you’ll tend to copy old things — things that were in their day at the frontier of knowledge, but no longer are.</p><p>复制确实有些危险，其中之一是倾向于复制旧东西 —— 那些在过去是知识前沿，但现在已经不再是的东西。</p><p>And when you do copy something, don’t copy every feature of it. Some will make you ridiculous if you do. Don’t copy the manner of an eminent 50 year old professor if you’re 18, for example, or the idiom of a Renaissance poem hundreds of years later.</p><p>当我们复制某件事时，不要复制它的所有特性。如果我们复制某些部分的话，会看起来很荒谬。例如，我们 18 岁时不能复制一位 50 岁杰出教授的举止，或者几百年前文艺复兴时期诗歌的习语。</p><p>Some of the features of things you admire are flaws they succeeded despite. Indeed, the features that are easiest to imitate are the most likely to be the flaws.</p><p>我们所崇拜事物的一些特性是「尽管他们存在缺陷但依然取得成功的」。但事实上，最容易模仿的特性最有可能是缺陷。</p><p>This is particularly true for behavior. Some talented people are jerks, and this sometimes makes it seem to the inexperienced that being a jerk is part of being talented. It isn’t; being talented is merely how they get away with it.</p><p>对于行为尤其如此。一些有才华的人是混蛋，这有时使得无经验的人认为做混蛋是才华的一部分，并不是，才华只是他们得以逃脱的方式。</p><p>One of the most powerful kinds of copying is to copy something from one field into another. History is so full of chance discoveries of this type that it’s probably worth giving chance a hand by deliberately learning about other kinds of work. You can take ideas from quite distant fields if you let them be metaphors.</p><p>最有力的复制类型之一是从一个领域复制到另一个领域。历史上充满了这种类型的偶然发现，所以我们值得有意地去学习其他类型的工作，从而为这类偶然性提供帮助。我们可以从毫不相干的领域中获取想法，如果我们能够让它们成为灵感来源的话。</p><p>Negative examples can be as inspiring as positive ones. In fact you can sometimes learn more from things done badly than from things done well; sometimes it only becomes clear what’s needed when it’s missing.</p><p>负面的例子可能和积极的例子一样启发人。事实上，**我们有时可以从做得糟糕的事情中学到比从做得好的事情中更多的东西，**有时只有当它缺失时，才能清楚地看出完满需要什么。</p><p>If a lot of the best people in your field are collected in one place, it’s usually a good idea to visit for a while. It will increase your ambition, and also, by showing you that these people are human, increase your self-confidence. [26]</p><p>**如果我们所在领域的许多最好的人都集中在一个地方，那去那里待一段时间通常是个好主意。**这会增加我们的斗志，同时，通过向我们展示这些优秀的人都是人，增加我们的自信心。[26]</p><p>If you’re earnest you’ll probably get a warmer welcome than you might expect. Most people who are very good at something are happy to talk about it with anyone who’s genuinely interested. If they’re really good at their work, then they probably have a hobbyist’s interest in it, and hobbyists always want to talk about their hobbies.</p><p>如果我们是真诚的，可能会受到比自己期望的更热烈的欢迎。大多数在某件事上非常出色的人都很乐意和任何真正有兴趣的人谈论它 —— 如果他们真的很擅长自己的工作，那么他们可能对它存在一种类似业余爱好者般的心理，业余爱好者总是想谈论他们的爱好。</p><p>It may take some effort to find the people who are really good, though. Doing great work has such prestige that in some places, particularly universities, there’s a polite fiction that everyone is engaged in it. And that is far from true. People within universities can’t say so openly, but the quality of the work being done in different departments varies immensely. Some departments have people doing great work; others have in the past; others never have.</p><p>然而，找到那些真正优秀的人可能需要一些努力。取得杰出成就会带来巨大的威望，以至于在一些地方，特别是大学，大家都有一个礼貌的假设，那就是每个人都在从事它。而这并非事实，人们不能公开说明这点，但在大学内部，不同部门所做的工作的质量差距巨大 —— 一些部门有人做出了伟大的工作，其他的在过去有过，其他的从来没有过。</p><p>Seek out the best colleagues. There are a lot of projects that can’t be done alone, and even if you’re working on one that can be, it’s good to have other people to encourage you and to bounce ideas off.</p><p>**寻找最能够共事的人。**很多项目是无法独自完成的，即使我们正在从事可以独自完成的项目，也好有其他人来鼓励自己，和我们交流想法。</p><p>Colleagues don’t just affect your work, though; they also affect you. So work with people you want to become like, because you will.</p><p>然而，同事不仅会影响我们的工作，他们也会影响我们本身。所以，<strong>与我们想成为的人一起工作，因为我们将会变得像他们。</strong></p><p>Quality is more important than quantity in colleagues. It’s better to have one or two great ones than a building full of pretty good ones. In fact it’s not merely better, but necessary, judging from history: the degree to which great work happens in clusters suggests that one’s colleagues often make the difference between doing great work and not.</p><p>在同事方面，质量比数量更重要 —— 拥有一两个优秀的同事比拥有一个楼的还算不错的同事更好。实际上，不仅是更好，而且是必需的，从历史来看，在集群中取得杰出成就的案例表明，同事通常决定了我们是否能取得伟大成就。</p><p>How do you know when you have sufficiently good colleagues? In my experience, when you do, you know. Which means if you’re unsure, you probably don’t. But it may be possible to give a more concrete answer than that. Here’s an attempt: sufficiently good colleagues offer surprising insights. They can see and do things that you can’t. So if you have a handful of colleagues good enough to keep you on your toes in this sense, you’re probably over the threshold.</p><p>我们如何知道自己有足够好的同事呢？根据我的经验，当我们有的时候，你就知道了 —— 这意味着，如果我们不确定，那可能没有。可能有更具体的答案，但这里是一个尝试：**足够好的同事会提供令人惊讶的见解，他们能看到并做我们不能做的事。**所以，如果我们有一小撮足够好的同事，让我们在这个意义上保持警觉，他们可能就已经越过了「不错」的阈值。</p><p>Most of us can benefit from collaborating with colleagues, but some projects require people on a larger scale, and starting one of those is not for everyone. If you want to run a project like that, you’ll have to become a manager, and managing well takes aptitude and interest like any other kind of work. If you don’t have them, there is no middle path: you must either force yourself to learn management as a second language, or avoid such projects. [27]</p><p>我们大多数人都可以从与同事的合作中获益，但一些项目需要更大规模的人，并不是每个人都适合发起这样的项目。如果我们想参与这样的项目，将必须成为一个管理者，好的管理需要才能和兴趣，这和其他任何类型的工作一样，如果我们没有它们，就没有妥协的方案：我们必须强迫自己学习管理并将其作为第二技能，或者避免参与这样的项目。[27]</p><p>Husband your morale. It’s the basis of everything when you’re working on ambitious projects. You have to nurture and protect it like a living organism.</p><p>**珍惜自己的士气 —— 当我们从事雄心勃勃的项目时，这是一切的基础。**我们必须像呵护生命一样来培养和保护它。</p><p>Morale starts with your view of life. You’re more likely to do great work if you’re an optimist, and more likely to if you think of yourself as lucky than if you think of yourself as a victim.</p><p>士气从我们的人生观开始。如果我们是一个乐观主义者，则更有可能取得伟大成就，我们需要把自己看作是幸运的，而不是受害者。</p><p>Indeed, work can to some extent protect you from your problems. If you choose work that’s pure, its very difficulties will serve as a refuge from the difficulties of everyday life. If this is escapism, it’s a very productive form of it, and one that has been used by some of the greatest minds in history.</p><p>事实上，工作可以在某种程度上保护我们免受自己的问题的影响。如果我们选择的工作是纯洁的，那么其本身就会成为我们从日常生活的困难中寻求庇护的地方，这种逃避是非常有生产力的，一些历史上最伟大的思想家都利用过这种行为。</p><p>Morale compounds via work: high morale helps you do good work, which increases your morale and helps you do even better work. But this cycle also operates in the other direction: if you’re not doing good work, that can demoralize you and make it even harder to. Since it matters so much for this cycle to be running in the right direction, it can be a good idea to switch to easier work when you’re stuck, just so you start to get something done.</p><p>士气通过工作复合增长：高昂的士气帮助我们做好工作，这又增加了我们的士气，帮助我们做得更好。但这个周期也在反方向奏效：如果我们没有做好工作，那可能会让自己士气低落，使得做事更难。由于这个周期在正确的方向运行如此重要，当我们陷入困境时，切换到更简单的工作可能是个好主意，只要我们一直做事就好。</p><p>One of the biggest mistakes ambitious people make is to allow setbacks to destroy their morale all at once, like a balloon bursting. You can inoculate yourself against this by explicitly considering setbacks a part of your process. Solving hard problems always involves some backtracking.</p><p>雄心勃勃的人最大的错误之一就是让挫折一次性毁掉他们的士气，就像气球爆炸一样。我们可以通过明确挫折是我们过程的一部分来预防这一点，解决难题总是涉及到走回头路。</p><p>Doing great work is a depth-first search whose root node is the desire to. So “If at first you don’t succeed, try, try again” isn’t quite right. It should be: If at first you don’t succeed, either try again, or backtrack and then try again.</p><p>**取得杰出成就是一种深度优先搜索，其根节点是我们想成功的欲望。**所以，「如果一开始没有成功，再试一次」这句话并不完全正确，它应该是「如果一开始没有成功，要么再试一次，要么退回去，然后再试一次」。</p><p>“Never give up” is also not quite right. Obviously there are times when it’s the right choice to eject. A more precise version would be: Never let setbacks panic you into backtracking more than you need to. Corollary: Never abandon the root node.</p><p>「永不放弃」也不完全正确，显然，有时候选择退出是正确的选择。更准确的说法应该是：永远不要让挫折让我们慌乱地走比自己需要的更多的回头路 —— 推论：永远不要放弃根节点。</p><p>It’s not necessarily a bad sign if work is a struggle, any more than it’s a bad sign to be out of breath while running. It depends how fast you’re running. So learn to distinguish good pain from bad. Good pain is a sign of effort; bad pain is a sign of damage.</p><p>工作如果令人痛苦挣扎，不一定是坏的迹象，就像在跑步时呼吸困难不一定是坏的迹象一样，这取决于我们跑得多快。所以学会区分好的痛苦和坏的痛苦 —— 好的痛苦是努力的标志，坏的痛苦是损害的标志。</p><p>An audience is a critical component of morale. If you’re a scholar, your audience may be your peers; in the arts, it may be an audience in the traditional sense. Either way it doesn’t need to be big. The value of an audience doesn’t grow anything like linearly with its size. Which is bad news if you’re famous, but good news if you’re just starting out, because it means a small but dedicated audience can be enough to sustain you. If a handful of people genuinely love what you’re doing, that’s enough.</p><p>**「观众」是士气的关键组成部分。**学者的观众可能是他们的同行，在艺术领域，可能是传统意义上的观众 —— 无论哪种方式，观众的数量不需要很大，观众的价值并不像其大小那样成线性增长。这对于那些著名的人来说是个坏消息，但对于刚刚起步的人来说是个好消息，因为这意味着一小组专注的观众足以支持我们，如果有少数人真正喜欢我们在做的事，那就够了。</p><p>To the extent you can, avoid letting intermediaries come between you and your audience. In some types of work this is inevitable, but it’s so liberating to escape it that you might be better off switching to an adjacent type if that will let you go direct. [28]</p><p>尽可能避免让中间人介入我们和自己的观众之间。在某些类型的工作中，这种情况不可避免，但我们有极大的自由度摆脱这种情况，因此，如果能让我们直接面对自己的观众，那我们最好转而从事类似的工作。[28]</p><p>The people you spend time with will also have a big effect on your morale. You’ll find there are some who increase your energy and others who decrease it, and the effect someone has is not always what you’d expect. Seek out the people who increase your energy and avoid those who decrease it. Though of course if there’s someone you need to take care of, that takes precedence.</p><p>我们花时间在一起的人也会对我们的士气产生很大影响。我们会发现有些人增加了自己的能量，而有些人减少了我们的能量，而一个人对你产生的影响并不总是你期望的。寻找那些能增加我们能量的人，避开那些减少我们能量的人 —— 当然，如果有人需要我们照顾，那就优先考虑。</p><p>Don’t marry someone who doesn’t understand that you need to work, or sees your work as competition for your attention. If you’re ambitious, you need to work; it’s almost like a medical condition; so someone who won’t let you work either doesn’t understand you, or does and doesn’t care.</p><p>不要与一个不明白我们需要工作，或者与我们的工作竞争注意力的人结婚。如果我们有雄心壮志，我们需要工作，这无须多言，所以，如果一个人不让我们工作，要么就是不理解我们，要么就是理解但不在乎。</p><p>Ultimately morale is physical. You think with your body, so it’s important to take care of it. That means exercising regularly, eating and sleeping well, and avoiding the more dangerous kinds of drugs. Running and walking are particularly good forms of exercise because they’re good for thinking. [29]</p><p>最后，**士气其实也是物理的，我们用身体思考，所以照顾好它很重要。**这意味着定期运动、饮食以及保持良好睡眠，避免使用危险类型的药物。跑步和步行是特别好的锻炼方式，因为它们有利于思考。[29]</p><p>People who do great work are not necessarily happier than everyone else, but they’re happier than they’d be if they didn’t. In fact, if you’re smart and ambitious, it’s dangerous not to be productive. People who are smart and ambitious but don’t achieve much tend to become bitter.</p><p>取得杰出成就的人并不一定比其他人更快乐，但他们比不成功时更快乐。实际上，如果我们聪明而有雄心，不工作是危险的，那些聪明而有雄心，但没有成就很多的人往往会变得很痛苦。</p><p>It’s ok to want to impress other people, but choose the right people. The opinion of people you respect is signal. Fame, which is the opinion of a much larger group you might or might not respect, just adds noise.</p><p><strong>想要给别人留下印象是可以的，但要选择正确的人，我们所尊重的人的观点是信号；名声，也就是我们可能尊重或可能不尊重的更广泛群体的观点，只是噪音。</strong></p><p>The prestige of a type of work is at best a trailing indicator and sometimes completely mistaken. If you do anything well enough, you’ll make it prestigious. So the question to ask about a type of work is not how much prestige it has, but how well it could be done.</p><p>一种工作的声望最好的情况下是一个落后的指标，有时则是完全错误的标志。如果我们把任何事情做得足够好，我们就会使它有声望。所以，面对一种工作，我们的问题不应该是它有多大的声望，而是它可以被做到多好。</p><p>Competition can be an effective motivator, but don’t let it choose the problem for you; don’t let yourself get drawn into chasing something just because others are. In fact, don’t let competitors make you do anything much more specific than work harder.</p><p>竞争可以是一个有效的动力，但不要让它指导我们选择问题，不要仅仅因为别人在追求某件事就让自己被扯进去。事实上，不要让竞争者指导我们做任何比较具体的事，比如更加努力工作。</p><p>Curiosity is the best guide. Your curiosity never lies, and it knows more than you do about what’s worth paying attention to.</p><p><strong>好奇心是最好的指导者，好奇心永远不会撒谎，它比我们自己更了解什么值得关注。</strong></p><p>Notice how often that word has come up. If you asked an oracle the secret to doing great work and the oracle replied with a single word, my bet would be on “curiosity.”</p><p>注意这个词出现的频率。<strong>如果我们问一个预言家取得杰出成就的秘密，预言家用一个词回答，我赌就是「好奇心」。</strong></p><p>That doesn’t translate directly to advice. It’s not enough just to be curious, and you can’t command curiosity anyway. But you can nurture it and let it drive you.</p><p>这并不能直接被解释为建议。仅仅是好奇是不够的，我们也不能左右好奇，但是我们可以培养它，让它驱动我们。</p><p>Curiosity is the key to all four steps in doing great work: it will choose the field for you, get you to the frontier, cause you to notice the gaps in it, and drive you to explore them. The whole process is a kind of dance with curiosity.</p><p>好奇心是做伟大工作的所有四个步骤的关键：它会为我们选择领域，带我们到达领域边界，让我们注意到其中的空白，并驱使我们去探索它们 —— 整个过程都在与好奇心共舞。</p><p>Believe it or not, I tried to make this essay as short as I could. But its length at least means it acts as a filter. If you made it this far, you must be interested in doing great work. And if so you’re already further along than you might realize, because the set of people willing to want to is small.</p><p>信不信由你，我试图让这篇论文尽可能地短。但是它的长度至少意味着它起到了一个过滤器的作用 —— 如果你看到了这里，你一定对做伟大的工作感兴趣。如果是这样，你已经比你可能意识到的要进一步了，因为愿意去想的人的集合是很小的。</p><p>The factors in doing great work are factors in the literal, mathematical sense, and they are: ability, interest, effort, and luck. Luck by definition you can’t do anything about, so we can ignore that. And we can assume effort, if you do in fact want to do great work. So the problem boils down to ability and interest. Can you find a kind of work where your ability and interest will combine to yield an explosion of new ideas?</p><p>取得伟大成就的因素在字面上，数学上是因素，它们是：**能力、兴趣、努力和运气。**运气是我们无法左右的，所以可以忽略它；并且，如果确实想要取得伟大成就，我们可以假设每个人都很努力；<strong>所以问题归结为能力和兴趣 —— 我们能否找到一种工作，将自己的能力和兴趣结合起来，让新想法迸发？</strong></p><p>Here there are grounds for optimism. There are so many different ways to do great work, and even more that are still undiscovered. Out of all those different types of work, the one you’re most suited for is probably a pretty close match. Probably a comically close match. It’s just a question of finding it, and how far into it your ability and interest can take you. And you can only answer that by trying.</p><p>我们有乐观的理由。有很多不同的方式来取得伟大成就，与此同时，还有更多的方式还未被发现。在所有这些不同类型的工作中，我们最适合的那一种可能是非常接近的匹配，可能是一个滑稽的接近的匹配 —— 这其中只有一个问题，我们要找到它，以及我们的能力和兴趣能带自己走多远 —— 我们只能通过尝试来回答这个问题。</p><p>Many more people could try to do great work than do. What holds them back is a combination of modesty and fear. It seems presumptuous to try to be Newton or Shakespeare. It also seems hard; surely if you tried something like that, you’d fail. Presumably the calculation is rarely explicit. Few people consciously decide not to try to do great work. But that’s what’s going on subconsciously; they shy away from the question.</p><p>可以尝试取得伟大成就的人比实际做到的人多得多，但阻止他们的是一种由谦逊和恐惧组成的混合物，例如，「试图成为牛顿或莎士比亚似乎有点狂妄，这看起来也很难」，「如果试了这样的事情，一定会失败」，「经过推算，这样的概率很小，不做是明智的」等等。很少有人有意识地决定不去尝试取得伟大成就，但这就是潜意识里正在发生的事 —— 他们回避这个问题。</p><p>So I’m going to pull a sneaky trick on you. Do you want to do great work, or not? Now you have to decide consciously. Sorry about that. I wouldn’t have done it to a general audience. But we already know you’re interested.</p><p>现在我要与你玩个游戏了。你想取得伟大的成就，还是不想呢？现在你必须有意识地下决定 —— 对不起，对此我感到抱歉，我一般不会对读者这么做，但看到这里，我已经知道你感兴趣了。</p><p>Don’t worry about being presumptuous. You don’t have to tell anyone. And if it’s too hard and you fail, so what? Lots of people have worse problems than that. In fact you’ll be lucky if it’s the worst problem you have.</p><p>不要担心过于自大，你不需要讲这个决定告诉任何人。如果太难，失败了，那又怎样呢？很多人需要解决这更糟糕的问题 —— 实际上，如果这是你最糟糕的问题，那么你真的非常幸运。</p><p>Yes, you’ll have to work hard. But again, lots of people have to work hard. And if you’re working on something you find very interesting, which you necessarily will if you’re on the right path, the work will probably feel less burdensome than a lot of your peers’.</p><p>是的，我们必须努力工作。但再次，很多人必须努力工作。并且，如果我们在做自己觉得非常有趣的事情，我们必然会在正确的道路上，工作可能会感觉比我们很多同伴的轻松。</p><p>The discoveries are out there, waiting to be made. Why not by you?</p><p><strong>发现正在等待被发现，为什么不是由我们自己呢？</strong></p><p>Notes</p><p>[1] I don’t think you could give a precise definition of what counts as great work. Doing great work means doing something important so well that you expand people’s ideas of what’s possible. But there’s no threshold for importance. It’s a matter of degree, and often hard to judge at the time anyway. So I’d rather people focused on developing their interests rather than worrying about whether they’re important or not. Just try to do something amazing, and leave it to future generations to say if you succeeded.</p><p>[1] 我不认为我们可以给杰出成就一个精确的定义。取得杰出成就意味着做了某件很重要事情，做得很好，以至于扩大了人们对可能性的认识，但是，对于重要性并没有一个阈值，这是一个程度的问题，而且往往很难在当时进行判断。所以，我宁愿让人们专注于发展他们的兴趣，而不是担心它们是否重要 —— 只要试图做一些令人惊奇的事情，子孙后代会判断你是否成功。</p><p>[2] A lot of standup comedy is based on noticing anomalies in everyday life. “Did you ever notice…?” New ideas come from doing this about nontrivial things. Which may help explain why people’s reaction to a new idea is often the first half of laughing: Ha!</p><p>[2] 很多的单口喜剧都是基于在日常生活中发现的不寻常现象。「你有没有注意到…？」新的想法来自于关于非琐碎事情的这类观察，这可能有助于解释为什么人们对一个新想法的反应往往是笑：哈！</p><p>[3] That second qualifier is critical. If you’re excited about something most authorities discount, but you can’t give a more precise explanation than “they don’t get it,” then you’re starting to drift into the territory of cranks.</p><p>[3] 「有足够的专业知识来精确地说出他们都忽视了什么」这个限定是关键。如果我们对大部分权威都不认可的事情感到兴奋，但不能给出比「他们不懂」更精确的解释，那么我们自己就开始向怪人那一端发展了。</p><p>[4] Finding something to work on is not simply a matter of finding a match between the current version of you and a list of known problems. You’ll often have to coevolve with the problem. That’s why it can sometimes be so hard to figure out what to work on. The search space is huge. It’s the cartesian product of all possible types of work, both known and yet to be discovered, and all possible future versions of you.</p><p>[4] 找到一些事情来做并不仅仅是在当前版本和已知问题之间找到匹配的问题，我们往往必须要与问题共同发展，这就是为什么有时找出该做什么事会很困难。我们所能搜索的空间是巨大的，它是所有可能的工作类型（已知的和尚未发现的）和所有可能的未来版本的笛卡尔乘积。</p><p>There’s no way you could search this whole space, so you have to rely on heuristics to generate promising paths through it and hope the best matches will be clustered. Which they will not always be; different types of work have been collected together as much by accidents of history as by the intrinsic similarities between them.</p><p>我们没有办法搜索整个空间，所以必须依赖启发式方法在空间中生成有希望的路径，并希望最佳匹配会聚集在一起 —— 但是，它们并不总是会聚集在一起 —— 不同类型的工作被聚集在一起，多半是由于历史的偶然性，而非它们的内在相似性。</p><p>[5] There are many reasons curious people are more likely to do great work, but one of the more subtle is that, by casting a wide net, they’re more likely to find the right thing to work on in the first place.</p><p>[5] 好奇的人更有可能取得杰出成就有很多原因，但其中的一个微妙原因是，通过撒了一个宽广的网，他们更有可能在一开始就找到正确的事情来做。</p><p>[6] It can also be dangerous to make things for an audience you feel is less sophisticated than you, if that causes you to talk down to them. You can make a lot of money doing that, if you do it in a sufficiently cynical way, but it’s not the route to great work. Not that anyone using this m.o. would care.</p><p>[6] 如果我们感觉受众不如自己精明，我们可能会对他们居高临下，那么为他们制作出的东西可能也是糟糕的。如果我们抱着藐视一切的态度做产品，可以赚很多钱，但这不是通往杰出成就的路 —— 不过使用这种手段的人可能不会在意。</p><p>[7] This idea I learned from Hardy’s A Mathematician’s Apology, which I recommend to anyone ambitious to do great work, in any field.</p><p>[7] 这个想法我从哈代的《一个数学家的辩白》中学到的，我推荐任何有抱负，要取得伟大成就的人去阅读读，无论是在什么领域。</p><p>[8] Just as we overestimate what we can do in a day and underestimate what we can do over several years, we overestimate the damage done by procrastinating for a day and underestimate the damage done by procrastinating for several years.</p><p>[8] 就像我们高估了我们在一天内可以做什么，低估了我们在几年内可以做什么，我们高估了拖延一天造成的损害，低估了拖延几年造成的损害。</p><p>[9] You can’t usually get paid for doing exactly what you want, especially early on. There are two options: get paid for doing work close to what you want and hope to push it closer, or get paid for doing something else entirely and do your own projects on the side. Both can work, but both have drawbacks: in the first approach your work is compromised by default, and in the second you have to fight to get time to do it.</p><p>[9] 我们通常不能完全按照自己的意愿去做事，特别是在早期。有两个选择：做接近我们想做的工作并希望二者越来越接近，或者做完全不同的事情并在业余时间做自己的项目。两者都可行，但两者都有缺点：在第一种方法中，我们的工作默认被妥协了，在第二种我们必须努力找到时间去做。</p><p>[10] If you set your life up right, it will deliver the focus-relax cycle automatically. The perfect setup is an office you work in and that you walk to and from.</p><p>[10] 如果我们的生活安排得当，它会自动提供「专注 - 放松」的周期。完美的设置是我们在这个循环中工作，并且拥有可以步行往返的办公室。</p><p>[11] There may be some very unworldly people who do great work without consciously trying to. If you want to expand this rule to cover that case, it becomes: Don’t try to be anything except the best.</p><p>[11] 也许有一些非常超凡的人，他们可以取得杰出成就，而不需要有意识地去尝试。如果我们想拓展这个规则以取得同样的成功，它会变成：除了做最好的，别尝试做其他任何事情。</p><p>[12] This gets more complicated in work like acting, where the goal is to adopt a fake persona. But even here it’s possible to be affected. Perhaps the rule in such fields should be to avoid unintentional affectation.</p><p>[12] 在诸如表演之类的工作中，目标是展现一个假的人格，这就更复杂了。但是即使在这种情况下，也有可能被矫饰影响 —— 也许在这样的领域中的规则应该是避免无意的矫饰。</p><p>[13] It’s safe to have beliefs that you treat as unquestionable if and only if they’re also unfalsifiable. For example, it’s safe to have the principle that everyone should be treated equally under the law, because a sentence with a “should” in it isn’t really a statement about the world and is therefore hard to disprove. And if there’s no evidence that could disprove one of your principles, there can’t be any facts you’d need to ignore in order to preserve it.</p><p>[13] 如果我们有一个原则，如何判断它是否可以被视为是无可质疑的？只有在它是无法证伪的情况下才是安全的。例如，每个人都应该在法律面前平等，这是安全的原则，因为一个带有「应该」的句子实际上并不是关于世界观的陈述，因此很难被证明是错误的。如果我们不需要掩盖任何事实以维护它，那就没有证据可以证伪我们的某个原则。</p><p>[14] Affectation is easier to cure than intellectual dishonesty. Affectation is often a shortcoming of the young that burns off in time, while intellectual dishonesty is more of a character flaw.</p><p>[14] 矫饰比智力不诚实更容易治愈。矫饰往往是年轻人的缺点，随着时间的推移会消失，而智力不诚实更像是一个性格上的缺点。</p><p>[15] Obviously you don’t have to be working at the exact moment you have the idea, but you’ll probably have been working fairly recently.</p><p>[15] 显然，我们不必在有想法的那一刻就投入这项工作，但我们需要工作。</p><p>[16] Some say psychoactive drugs have a similar effect. I’m skeptical, but also almost totally ignorant of their effects.</p><p>[16] 有些人说精神活性药物有类似的效果。我持怀疑态度，但也对它们的影响几乎一无所知。</p><p>[17] For example you might give the nth most important topic (m-1)&#x2F;m^n of your attention, for some m &gt; 1. You couldn’t allocate your attention so precisely, of course, but this at least gives an idea of a reasonable distribution.</p><p>[17] 例如，我们可能会给第 n 个最重要的主题 (m-1)&#x2F;m^n 的注意力，m &gt; 1。当然，我们不能那么精确地分配自己的注意力，但这至少给出了一个合理分配的想法。</p><p>[18] The principles defining a religion have to be mistaken. Otherwise anyone might adopt them, and there would be nothing to distinguish the adherents of the religion from everyone else.</p><p>[18] 定义一个宗教的原则必须是错误的。否则，任何人都可能采用它们，那么就没有什么可以区分宗教信徒和其他人的了。</p><p>[19] It might be a good exercise to try writing down a list of questions you wondered about in your youth. You might find you’re now in a position to do something about some of them.</p><p>[19] 试着写下我们过去好奇的问题的列表可能是一个好的练习。我们可能会发现自己现在有能力去解决其中的一些问题。</p><p>[20] The connection between originality and uncertainty causes a strange phenomenon: because the conventional-minded are more certain than the independent-minded, this tends to give them the upper hand in disputes, even though they’re generally stupider.<br>The best lack all conviction, while the worst<br>Are full of passionate intensity.</p><p>[20] 原创性和不确定性之间的联系导致了一种奇特的现象：因为有传统思维的人比独立思维的人更确定，这往往给他们在争论中占上风，即使他们通常更愚蠢。最好的人都缺乏信念，而最差的人充满了顽固气息。</p><p>[21] Derived from Linus Pauling’s “If you want to have good ideas, you must have many ideas.”</p><p>[21] 来自 Linus Pauling 的「如果你想有好主意，你必须有很多主意。」</p><p>[22] Attacking a project as a “toy” is similar to attacking a statement as “inappropriate.” It means that no more substantial criticism can be made to stick.</p><p>[22] 称一个项目为「玩具」类似于称一个声明为「不适当」，这意味着没有更实质的批评可以给出。</p><p>[23] One way to tell whether you’re wasting time is to ask if you’re producing or consuming. Writing computer games is less likely to be a waste of time than playing them, and playing games where you create something is less likely to be a waste of time than playing games where you don’t.</p><p>[23] 判断我们是否在浪费时间的一个方法是问自己是否在生产还是在消费。写电脑游戏可能比玩它们浪费时间的可能性要小，而玩我们可以创造东西的游戏可能比玩不能创造东西的游戏浪费时间的可能性要小。</p><p>[24] Another related advantage is that if you haven’t said anything publicly yet, you won’t be biased toward evidence that supports your earlier conclusions. With sufficient integrity you could achieve eternal youth in this respect, but few manage to. For most people, having previously published opinions has an effect similar to ideology, just in quantity 1.</p><p>[24] 另一个相关的优点是，如果我们还没有公开地说过什么，就不会偏向于相信支持我们之前的结论的证据。以足够的中立态度，我们可以在这方面实现永恒青春，但很少有人能做到。对大多数人来说，以前公开过的意见有一种类似于意识形态的效果，只是在数量上为 1。</p><p>[25] In the early 1630s Daniel Mytens made a painting of Henrietta Maria handing a laurel wreath to Charles I. Van Dyck then painted his own version to show how much better he was.</p><p>[25] 1630 年代初，Daniel Mytens 画了一幅画，描绘了 Henrietta Maria 把月桂冠递给 Charles I 的场景，然后 Van Dyck 画了他自己的版本，以显示他有多么优秀。</p><p>[26] I’m being deliberately vague about what a place is. As of this writing, being in the same physical place has advantages that are hard to duplicate, but that could change.</p><p>[26] 我在这里故意模糊了什么是地方的定义。截至写这篇文章，身处同一物理地点具有难以复制的优势，但这可能会改变。</p><p>[27] This is false when the work the other people have to do is very constrained, as with SETI@home or Bitcoin. It may be possible to expand the area in which it’s false by defining similarly restricted protocols with more freedom of action in the nodes.</p><p>[27] 当其他人必须做的工作非常受限时，这是错误的，例如 SETI@home 或比特币。通过定义类似的受限协议，让节点有更大的行动自由，可能会使错误扩大。</p><p>[28] Corollary: Building something that enables people to go around intermediaries and engage directly with their audience is probably a good idea.</p><p>[28] 推论：构建能让人们绕过中介并直接与受众接触的东西可能是个好主意。</p><p>[29] It may be helpful always to walk or run the same route, because that frees attention for thinking. It feels that way to me, and there is some historical evidence for it.</p><p>[29] 一直走或跑同样的路线可能有所帮助，因为这给思考留出更多注意力。我有这种感觉，也有一些历史证据支持。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平凡而惊奇</title>
    <link href="/2025/07/17/general-and-surprising/"/>
    <url>/2025/07/17/general-and-surprising/</url>
    
    <content type="html"><![CDATA[<h2 id="GENERAL-AND-SURPRISING"><a href="#GENERAL-AND-SURPRISING" class="headerlink" title="GENERAL AND SURPRISING"></a>GENERAL AND SURPRISING</h2><p>原文链接: <a href="https://paulgraham.com/sun.html">https://paulgraham.com/sun.html</a></p><h3 id="一、最具价值的见解"><a href="#一、最具价值的见解" class="headerlink" title="一、最具价值的见解"></a>一、最具价值的见解</h3><p>The most valuable insights are both general and surprising. F &#x3D; ma for example. But general and surprising is a hard combination to achieve. That territory tends to be picked clean, precisely because those insights are so valuable. </p><p>最有价值的见解兼具普遍性和惊喜感。例如 F&#x3D;ma（牛顿第二运动定律）。但兼具普遍性和惊喜感是很难实现的，这类见解所在的领域往往已被挖掘殆尽，原因恰恰在于它们极具价值。</p><p>Ordinarily, the best that people can do is one without the other: either surprising without being general (e.g. gossip), or general without being surprising (e.g. platitudes). </p><p>通常情况下，鱼和熊掌不可兼得：要么有惊喜感却缺乏普遍性（比如八卦），要么有普遍性却毫无惊喜（比如陈词滥调）。</p><p>Where things get interesting is the moderately valuable insights. You get those from small additions of whichever quality was missing. The more common case is a small addition of generality: a piece of gossip that’s more than just gossip, because it teaches something interesting about the world. But another less common approach is to focus on the most general ideas and see if you can find something new to say about them. Because these start out so general, you only need a small delta of novelty to produce a useful insight. </p><p>真正有趣的是那些中等价值的见解。要获得这类见解，只需在缺失的特质上稍作补充。更常见的情况是补充少量普遍性：一条八卦之所以不只是八卦，是因为它能让人了解到关于世界的有趣之事。但另一种不太常见的方式是，聚焦于最具普遍性的观点，看看能否就它们说出些新东西。由于这些观点本身已经极具普遍性，因此只需一点新颖性的补充，就能产生有独到之处的见解。</p><h3 id="二、微小创意也能够带来巨大的不同"><a href="#二、微小创意也能够带来巨大的不同" class="headerlink" title="二、微小创意也能够带来巨大的不同"></a>二、微小创意也能够带来巨大的不同</h3><p>A small delta of novelty is all you’ll be able to get most of the time. Which means if you take this route, your ideas will seem a lot like ones that already exist. Sometimes you’ll find you’ve merely rediscovered an idea that did already exist. But don’t be discouraged. Remember the huge multiplier that kicks in when you do manage to think of something even a little new. </p><p>大多数时候，你能获得的只是少量的新颖性。这意味着如果你选择这条路径，你的观点看起来会和已有的观点十分相似。有时你会发现，自己只是重新发现了一个早已存在的观点。但不必气馁。记住，当你确实想到哪怕一点点新东西时，随之而来的乘法效应是巨大的。</p><p>Corollary: the more general the ideas you’re talking about, the less you should worry about repeating yourself. If you write enough, it’s inevitable you will. Your brain is much the same from year to year and so are the stimuli that hit it. I feel slightly bad when I find I’ve said something close to what I’ve said before, as if I were plagiarizing myself. But rationally one shouldn’t. You won’t say something exactly the same way the second time, and that variation increases the chance you’ll get that tiny but critical delta of novelty. </p><p>推论：你谈论的观点越具普遍性，就越不必担心重复自己。如果你写得足够多，重复是不可避免的。你的大脑年复一年变化不大，冲击它的刺激也大致相同。当我发现自己说的话和以前说过的很接近时，会略感不适，仿佛在抄袭自己。但理性而言，不必如此。你第二次不会用完全相同的方式表达，而这种差异会增加你获得那微小却关键的新颖性增量的机会。</p><h3 id="三、持续探索的勇气"><a href="#三、持续探索的勇气" class="headerlink" title="三、持续探索的勇气"></a>三、持续探索的勇气</h3><p>And of course, ideas beget ideas. (That sounds familiar.) An idea with a small amount of novelty could lead to one with more. But only if you keep going. So it’s doubly important not to let yourself be discouraged by people who say there’s not much new about something you’ve discovered. “Not much new” is a real achievement when you’re talking about the most general ideas. </p><p>当然，观点会催生新观点。（这话听着耳熟。）一个带有少量新颖性的观点可能会引出更具新颖性的观点，但前提是你要坚持下去。因此，当有人说你发现的东西没什么新意时，千万不要气馁，这一点尤为重要。当你谈论的是最具普遍性的观点时，“没太多新意” 其实是一项实实在在的成就。</p><p>It’s not true that there’s nothing new under the sun. There are some domains where there’s almost nothing new. But there’s a big difference between nothing and almost nothing, when it’s multiplied by the area under the sun.</p><p>“日光之下并无新事” 这句话并不正确。有些领域几乎没有新东西，但 “完全没有新东西” 和 “几乎没有新东西” 之间存在巨大差异，尤其是当它乘以 “日光之下的广阔领域” 时。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>何时去追寻你所热爱</title>
    <link href="/2025/07/16/follow-your-passion/"/>
    <url>/2025/07/16/follow-your-passion/</url>
    
    <content type="html"><![CDATA[<h2 id="WHEN-TO-DO-WHAT-YOU-LOVE"><a href="#WHEN-TO-DO-WHAT-YOU-LOVE" class="headerlink" title="WHEN TO DO WHAT YOU LOVE"></a>WHEN TO DO WHAT YOU LOVE</h2><p>原文链接: <a href="https://paulgraham.com/when.html">https://paulgraham.com/when.html</a></p><h3 id="一、关于“追随热情”的争论"><a href="#一、关于“追随热情”的争论" class="headerlink" title="一、关于“追随热情”的争论"></a>一、关于“追随热情”的争论</h3><p>There’s some debate about whether it’s a good idea to “follow your passion.” In fact the question is impossible to answer with a simple yes or no. Sometimes you should and sometimes you shouldn’t, but the border between should and shouldn’t is very complicated. The only way to give a general answer is to trace it. </p><p>关于 “追随激情” 是否是个好主意，存在一些争议。事实上，这个问题无法用简单的 “是” 或 “否” 来回答。有时应该，有时不应该，但 “应该” 与 “不应该” 之间的界限非常复杂。给出一个一般性答案的唯一方法，是追溯其背后的逻辑。</p><p>When people talk about this question, there’s always an implicit “instead of.” All other things being equal, why wouldn’t you work on what interests you the most? So even raising the question implies that all other things aren’t equal, and that you have to choose between working on what interests you the most and something else, like what pays the best. </p><p>人们讨论这个问题时，总会隐含一个 “取而代之” 的前提。在其他条件相同的情况下，为什么不做自己最感兴趣的事呢？因此，即便提出这个问题，也意味着其他条件并不相同 —— 你必须在 “做最感兴趣的事” 和 “其他事”（比如薪资最高的事）之间做出选择。</p><p>And indeed if your main goal is to make money, you can’t usually afford to work on what interests you the most. People pay you for doing what they want, not what you want. But there’s an obvious exception: when you both want the same thing. For example, if you love football, and you’re good enough at it, you can get paid a lot to play it. </p><p>的确，若你的主要目标是赚钱，通常就没法只顾着做最感兴趣的事。人们付钱给你，是为了让你做他们想让你做的事，而非你自己想做的事。但有个明显的例外：当你和他们的需求一致时。比如，如果你热爱足球，且足够擅长，就能靠踢球赚很多钱。</p><p>Of course the odds are against you in a case like football, because so many other people like playing it too. This is not to say you shouldn’t try though. It depends how much ability you have and how hard you’re willing to work. </p><p>当然，在足球这类领域，成功的概率对你不利，因为太多人也喜欢踢球。但这并非说你不该尝试 —— 这取决于你的能力有多强，以及你愿意付出多少努力。</p><p>The odds are better when you have strange tastes: when you like something that pays well and that few other people like. For example, it’s clear that Bill Gates truly loved running a software company. He didn’t just love programming, which a lot of people do. He loved writing software for customers. That is a very strange taste indeed, but if you have it, you can make a lot by indulging it. </p><p>当你的喜好比较特别时，成功的概率会更高：比如你喜欢的事既能赚钱，又没多少人感兴趣。显然，比尔・盖茨是真的热爱经营软件公司。他不只是热爱编程（很多人都热爱编程），而是热爱为客户写软件。这确实是一种非常特别的喜好，但如果你有这种喜好，沉浸其中就能赚很多钱。</p><p>There are even some people who have a genuine intellectual interest in making money. This is distinct from mere greed. They just can’t help noticing when something is mispriced, and can’t help doing something about it. It’s like a puzzle for them. [1] </p><p>甚至有一些人，对赚钱有着真正的智力层面的兴趣。这和单纯的贪婪不同。他们总会不由自主地发现定价不合理的东西，也总会忍不住去做点什么。对他们来说，这就像一道谜题。[1]</p><h3 id="二、目标与兴趣的平衡"><a href="#二、目标与兴趣的平衡" class="headerlink" title="二、目标与兴趣的平衡"></a>二、目标与兴趣的平衡</h3><p>In fact there’s an edge case here so spectacular that it turns all the preceding advice on its head. If you want to make a really huge amount of money — hundreds of millions or even billions of dollars — it turns out to be very useful to work on what interests you the most. The reason is not the extra motivation you get from doing this, but that the way to make a really large amount of money is to start a startup, and working on what interests you is an excellent way to discover startup ideas. </p><p>事实上，这里有一个极端案例，它的影响之大，足以颠覆前面所有的建议。如果你想赚一大笔钱 —— 数亿甚至数十亿美元 —— 那么，做自己最感兴趣的事其实非常有用。原因并非做这些事能带来额外的动力，而是赚大钱的方式往往是创办初创公司，而做自己感兴趣的事，是发现初创公司创意的绝佳途径。</p><p>Many if not most of the biggest startups began as projects the founders were doing for fun. Apple, Google, and Facebook all began that way. Why is this pattern so common? Because the best ideas tend to be such outliers that you’d overlook them if you were consciously looking for ways to make money. Whereas if you’re young and good at technology, your unconscious instincts about what would be interesting to work on are very well aligned with what needs to be built. </p><p>即便不是大多数，也有很多顶尖的初创公司，最初都是创始人出于乐趣而做的项目。苹果、谷歌、脸书都是如此。为什么这种模式如此常见？因为最棒的创意往往太出格，如果你刻意追求赚钱，很可能会忽略它们。而如果你年轻且擅长技术，你对 “做什么事有趣” 的直觉，往往和 “该创造什么” 高度契合。</p><p>So there’s something like a midwit peak for making money. If you don’t need to make much, you can work on whatever you’re most interested in; if you want to become moderately rich, you can’t usually afford to; but if you want to become super rich, and you’re young and good at technology, working on what you’re most interested in becomes a good idea again. </p><p>所以，在赚钱这件事上，存在一种 “中等智慧峰值”：如果你不需要赚太多钱，就能做自己最感兴趣的事；如果你想变得小康，通常就不能只顾兴趣；但如果你想变得超级富有，且年轻又擅长技术，那么做自己最感兴趣的事又会成为一个好主意。</p><h3 id="三、何时做出抉择"><a href="#三、何时做出抉择" class="headerlink" title="三、何时做出抉择"></a>三、何时做出抉择</h3><p>What if you’re not sure what you want? What if you’re attracted to the idea of making money and more attracted to some kinds of work than others, but neither attraction predominates? How do you break ties? </p><p>如果你不确定自己想要什么呢？如果你既被赚钱的想法吸引，又对某些工作更感兴趣，但两者都没有绝对优势，该如何抉择？</p><p>The key here is to understand that such ties are only apparent. When you have trouble choosing between following your interests and making money, it’s never because you have complete knowledge of yourself and of the types of work you’re choosing between, and the options are perfectly balanced. When you can’t decide which path to take, it’s almost always due to ignorance. In fact you’re usually suffering from three kinds of ignorance simultaneously: you don’t know what makes you happy, what the various kinds of work are really like, or how well you could do them. [2] </p><p>关键在于，这种 “难以抉择” 往往只是表面现象。当你在 “追随兴趣” 和 “赚钱” 之间犹豫时，绝非因为你完全了解自己、了解可选的工作，且选项完美平衡。你无法决定，几乎总是因为信息不足 —— 你不知道什么能让自己快乐，不知道各种工作的真实情况，也不知道自己能把这些工作做得多好。[2]</p><p>In a way this ignorance is excusable. It’s often hard to predict these things, and no one even tells you that you need to. If you’re ambitious you’re told you should go to college, and this is good advice so far as it goes, but that’s where it usually ends. No one tells you how to figure out what to work on, or how hard this can be. </p><p>在某种程度上，这种信息不足是可以理解的。预测这些事往往很难，而且没人告诉你需要去弄清楚这些。如果你有野心，别人会告诉你应该上大学，这在某种程度上是个好建议，但通常也就到此为止了。没人告诉你该如何确定自己要做什么，也没人告诉你这件事有多难。</p><p>What do you do in the face of uncertainty? Get more certainty. And probably the best way to do that is to try working on things you’re interested in. That will get you more information about how interested you are in them, how good you are at them, and how much scope they offer for ambition. </p><p>面对不确定性该怎么办？去获取更多确定性。最好的方法可能就是尝试做自己感兴趣的事。这会让你更清楚自己对这件事的兴趣有多深、自己有多擅长，以及这件事能给你多大的发展空间。</p><p>Don’t wait. Don’t wait till the end of college to figure out what to work on. Don’t even wait for internships during college. You don’t necessarily need a job doing x in order to work on x; often you can just start doing it in some form yourself. And since figuring out what to work on is a problem that could take years to solve, the sooner you start, the better. </p><p>别等。别等到大学毕业才确定自己要做什么，甚至别等到大学期间的实习。你不一定非要找到一份做某件事的工作才能去做它 —— 通常你自己就能以某种形式开始。既然确定自己要做什么可能需要好几年，那么越早开始越好。</p><h3 id="四、时势造英雄"><a href="#四、时势造英雄" class="headerlink" title="四、时势造英雄"></a>四、时势造英雄</h3><p>One useful trick for judging different kinds of work is to look at who your colleagues will be. You’ll become like whoever you work with. Do you want to become like these people? </p><p>判断不同工作的一个有用技巧，是看看你未来的同事会是什么样的人。你会变得和他们越来越像。你想变成他们那样吗？</p><p>Indeed, the difference in character between different kinds of work is magnified by the fact that everyone else is facing the same decisions as you. If you choose a kind of work mainly for how well it pays, you’ll be surrounded by other people who chose it for the same reason, and that will make it even more soul-sucking than it seems from the outside. Whereas if you choose work you’re genuinely interested in, you’ll be surrounded mostly by other people who are genuinely interested in it, and that will make it extra inspiring. [3] </p><p>事实上，不同工作在 “人的特质” 上的差异，会因 “每个人都在做类似选择” 而被放大。如果你选一份工作主要是因为薪水高，身边就会围绕着同样为钱而来的人，这会让这份工作比表面看起来更让人身心俱疲。而如果你选择自己真正感兴趣的工作，身边大多会是同样感兴趣的人，这会让工作额外鼓舞人心。[3]</p><p>The other thing you do in the face of uncertainty is to make choices that are uncertainty-proof. The less sure you are about what to do, the more important it is to choose options that give you more options in the future. I call this “staying upwind.” If you’re unsure whether to major in math or economics, for example, choose math; math is upwind of economics in the sense that it will be easier to switch later from math to economics than from economics to math. </p><p>面对不确定性时，另一件要做的事是做 “抗不确定性” 的选择。你越不确定该做什么，就越要选那些能给未来留更多选项的事。我称之为 “保持在上风处”。比如，如果你不确定该选数学还是经济学专业，就选数学 —— 数学相对于经济学处于 “上风”，因为日后从数学转经济学比从经济学转数学更容易。</p><p>There’s one case, though, where it’s easy to say whether you should work on what interests you the most: if you want to do great work. This is not a sufficient condition for doing great work, but it is a necessary one. </p><p>不过，有一种情况，“是否该做自己最感兴趣的事” 的答案很明确：如果你想做出伟大的成就。这不是做出伟大成就的充分条件，但却是必要条件。</p><p>There’s a lot of selection bias in advice about whether to “follow your passion,” and this is the reason. Most such advice comes from people who are famously successful, and if you ask someone who’s famously successful how to do what they did, most will tell you that you have to work on what you’re most interested in. And this is in fact true. </p><p>关于 “是否该追随激情” 的建议，存在很强的选择性偏差，这就是原因所在。大多数这类建议来自那些非常成功的人，如果你问一个极其成功的人如何取得成就，大多数人会告诉你，必须做自己最感兴趣的事。而这其实是事实。</p><p>That doesn’t mean it’s the right advice for everyone. Not everyone can do great work, or wants to. But if you do want to, the complicated question of whether or not to work on what interests you the most becomes simple. The answer is yes. The root of great work is a sort of ambitious curiosity, and you can’t manufacture that.     </p><p>但这并不意味着这对每个人都是正确的建议。不是每个人都能或都想做出伟大的成就。但如果你想，那么 “是否该做自己最感兴趣的事” 这个复杂的问题就会变得简单 —— 答案是 “是”。伟大成就的根源，是一种充满野心的好奇心，而这种好奇心是无法刻意制造的。</p><p>Notes </p><p>[1] These examples show why it’s a mistake to assume that economic inequality must be evidence of some kind of brokenness or unfairness. It’s obvious that different people have different interests, and that some interests yield far more money than others, so how can it not be obvious that some people will end up much richer than others? In a world where some people like to write enterprise software and others like to make studio pottery, economic inequality is the natural outcome. </p><p>[1] 这些例子说明，认为 “经济不平等一定是某种缺陷或不公的证据” 是错误的。显然，不同的人有不同的兴趣，有些兴趣能带来多得多的钱，那么有些人比其他人富有得多，这不也是显而易见的吗？在一个有人喜欢写企业软件、有人喜欢做工作室陶艺的世界里，经济不平等是自然的结果。</p><p>[2] Difficulty choosing between interests is a different matter. That’s not always due to ignorance. It’s often intrinsically difficult. I still have trouble doing it. </p><p>[2] 在不同兴趣之间难以抉择则是另一回事。这并不总是因为信息不足，往往本质上就很难。我至今也很难做到。</p><p>[3] You can’t always take people at their word on this. Since it’s more prestigious to work on things you’re interested in than to be driven by money, people who are driven mainly by money will often claim to be more interested in their work than they actually are. One way to test such claims is by doing the following thought experiment: if their work didn’t pay well, would they take day jobs doing something else in order to do it in their spare time? Lots of mathematicians and scientists and engineers would. Historically lots have. But I don’t think as many investment bankers would.</p><p>[3] 在这一点上，你不能总是轻信别人的话。因为 “为兴趣工作” 比 “为钱工作” 更体面，所以那些主要为钱工作的人，往往会宣称自己对工作的兴趣比实际更深。检验这种说法的一个方法是做这样一个思想实验：如果他们的工作薪水不高，他们会做一份其他的日常工作，以便在业余时间继续做这份工作吗？很多数学家、科学家和工程师会这么做。历史上很多人都是如此。但我觉得，投资银行家里这么做的人不会太多。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好的写作</title>
    <link href="/2025/07/14/good-wrting/"/>
    <url>/2025/07/14/good-wrting/</url>
    
    <content type="html"><![CDATA[<h2 id="GOOD-WRITING"><a href="#GOOD-WRITING" class="headerlink" title="GOOD WRITING"></a>GOOD WRITING</h2><p>原文链接: <a href="https://paulgraham.com/goodwriting.html">https://paulgraham.com/goodwriting.html</a></p><h3 id="一、听起来好-与-观点正确"><a href="#一、听起来好-与-观点正确" class="headerlink" title="一、听起来好 与 观点正确"></a>一、听起来好 与 观点正确</h3><p>There are two senses in which writing can be good: it can sound good, and the ideas can be right. It can have nice, flowing sentences, and it can draw correct conclusions about important things. It might seem as if these two kinds of good would be unrelated, like the speed of a car and the color it’s painted. And yet I don’t think they are. I think writing that sounds good is more likely to be right. </p><p>好的写作可以体现在两个方面：一是<strong>听起来好</strong>，二是<strong>思想正确</strong>。它可以拥有流畅优美的句子，也可以对重要事物得出正确的结论。乍看之下，这两种“好”似乎毫无关联，就像汽车的速度和它的颜色一样互不相干。然而，我认为它们并非如此。<strong>我认为听起来好的文字，更可能是正确的。</strong></p><p>So here we have the most exciting kind of idea: one that seems both preposterous and true. Let’s examine it. How can this possibly be true? </p><p>于是，我们遇到了最令人兴奋的那种观点：一个看似荒谬却又真实的想法。让我们仔细审视它——这怎么可能成立？</p><p>I know it’s true from writing. You can’t simultaneously optimize two unrelated things; when you push one far enough, you always end up sacrificing the other. And yet no matter how hard I push, I never find myself having to choose between the sentence that sounds best and the one that expresses an idea best. If I did, it would be frivolous to care how sentences sound. But in practice it feels the opposite of frivolous. Fixing sentences that sound bad seems to help get the ideas right. [1] </p><p>我从写作中知道这是真的。你无法同时优化两件毫无关联的事情；当你把其中一件事推到极致时，总会牺牲另一件。然而，无论我如何努力，我从未发现自己必须在“听起来最好的句子”和“表达思想最准确的句子”之间做选择。如果真是这样，纠结句子的音律就显得轻浮了。但实践中，这种感觉恰恰相反——<strong>修改听起来别扭的句子，似乎能帮助理清思想</strong>[1]</p><p>By right I mean more than just true. Getting the ideas right means developing them well — drawing the conclusions that matter most, and exploring each one to the right level of detail. So getting the ideas right is not just a matter of saying true things, but saying the right true things. </p><p>这里的“正确”不仅仅是“真实”。思想正确意味着充分发展它们——得出最重要的结论，并以恰当的细节层次展开。因此，思想正确不只是说真话，而是说出<strong>该说的真话</strong>。</p><p>How could trying to make sentences sound good help you do that? The clue to the answer is something I noticed 30 years ago when I was doing the layout for my first book. Sometimes when you’re laying out text you have bad luck. For example, you get a section that runs one line longer than the page. I don’t know what ordinary typesetters do in this situation, but what I did was rewrite the section to make it a line shorter. You’d expect such an arbitrary constraint to make the writing worse. But I found, to my surprise, that it never did. I always ended up with something I liked better. </p><p>为什么追求句子的音律能帮助做到这一点？答案的线索来自30年前我为第一本书排版时的发现。排版时偶尔会遇到厄运：比如某个章节比页面多出一行。我不知道普通排版师会怎么做，但我的解决方法是重写那段，让它缩短一行。这种武断的限制本该让文字变得更糟，但出乎意料的是，结果总是更好。</p><h3 id="二、文章的重力定律"><a href="#二、文章的重力定律" class="headerlink" title="二、文章的重力定律"></a>二、文章的重力定律</h3><p>I don’t think this was because my writing was especially careless. I think if you pointed to a random paragraph in anything written by anyone and told them to make it slightly shorter (or longer), they’d probably be able to come up with something better.</p><p>The best analogy for this phenomenon is when you shake a bin full of different objects. The shakes are arbitrary motions. Or more precisely, they’re not calculated to make any two specific objects fit more closely together. And yet repeated shaking inevitably makes the objects discover brilliantly clever ways of packing themselves. Gravity won’t let them become less tightly packed, so any change has to be a change for the better. [2] </p><p>我不认为这是因为我的写作特别粗心。我相信，如果随机指一段别人的文字并要求稍作删减（或扩充），他们很可能改得更好。</p><p>这种现象的最佳类比是摇晃装满杂物的箱子。摇晃是随机的动作，或者说，它并非为了让某两件物品更紧密贴合。然而，反复摇晃最终会让物品找到绝妙的排列方式。重力不允许它们松散，所以任何变化都只能是优化[2]。</p><p>So it is with writing. If you have to rewrite an awkward passage, you’ll never do it in a way that makes it less true. You couldn’t bear it, any more than gravity could bear things floating upward. So any change in the ideas has to be a change for the better. </p><p>写作也是如此。如果你必须重写一段拗口的文字，绝不会以牺牲真实性为代价。你无法忍受这种妥协，就像重力无法接受物体向上飘浮。因此，思想上的任何调整都只能是改进。</p><p>It’s obvious once you think about it. Writing that sounds good is more likely to be right for the same reason that a well-shaken bin is more likely to be tightly packed. But there’s something else going on as well. Sounding good isn’t just a random external force that leaves the ideas in an essay better off. It actually helps you to get them right. </p><p>细想之下，这显而易见。<strong>听起来好的文字更可能是正确的，就像摇晃充分的箱子更可能紧凑</strong>。但还有另一层原因：音律并非只是随机外力，被动地优化文章思想——它<strong>主动</strong>帮助你理清思路。</p><h3 id="三、好的文章是易读的"><a href="#三、好的文章是易读的" class="headerlink" title="三、好的文章是易读的"></a>三、好的文章是易读的</h3><p>The reason is that it makes the essay easier to read. It’s less work to read writing that flows well. How does that help the writer? Because the writer is the first reader. When I’m working on an essay, I spend far more time reading than writing. I’ll reread some parts 50 or 100 times, replaying the thoughts in them and asking myself, like someone sanding a piece of wood, does anything catch? Does anything feel wrong? And the easier the essay is to read, the easier it is to notice if something catches. </p><p>因为音律让文章更易读。流畅的文字减轻了阅读负担。这对作者有何帮助？因为<strong>作者是第一位读者</strong>。写文章时，我花在阅读上的时间远多于写作。某些段落我会重读50甚至100遍，反复咀嚼其中的思想，像打磨木头一样自问：是否有阻滞？是否有不对劲？文章越易读，越容易发现这些问题。</p><p>So yes, the two senses of good writing are connected in at least two ways. Trying to make writing sound good makes you fix mistakes unconsciously, and also helps you fix them consciously; it shakes the bin of ideas, and also makes mistakes easier to see. But now that we’ve dissolved one layer of preposterousness, I can’t resist adding another. Does sounding good do more than just help you get the ideas right? Is writing that sounds good inherently more likely to be right? Crazy as it may seem, I think that’s true too. </p><p>因此，好的写作的两个维度至少通过两种方式关联：追求音律能让你无意识地修正错误，也有助于有意识地改进；它既“摇晃思想的箱子”，又让错误更易察觉。但既然我们已经揭开了一层荒谬，我不妨再添一层：**音律的作用是否不止于辅助思想正确？听起来好的文字是否天生更可能是正确的？**尽管看似疯狂，我认为确实如此。</p><p>Obviously there’s a connection at the level of individual words. There are lots of words in English that sound like what they mean, often in wonderfully subtle ways. Glitter. Round. Scrape. Prim. Cavalcade. But the sound of good writing depends even more on the way you put words together, and there’s a connection at that level too. </p><p>显然，单个词汇层面就存在关联。英语中许多词的发音暗示其含义，且方式精妙至极。比如“glitter”（闪烁）、“round”（圆润）、“scrape”（刮擦）、“prim”（刻板）、“cavalcade”（队列）。但好文章的音律更多取决于词语组合方式，而这一层面同样存在联系。</p><h3 id="四、好的节奏产生好的文章"><a href="#四、好的节奏产生好的文章" class="headerlink" title="四、好的节奏产生好的文章"></a>四、好的节奏产生好的文章</h3><p>When writing sounds good, it’s mostly because it has good rhythm. But the rhythm of good writing is not the rhythm of music, or the meter of verse. It’s not so regular. If it were, it wouldn’t be good, because the rhythm of good writing has to match the ideas in it, and ideas have all kinds of different shapes. Sometimes they’re simple and you just state them. But other times they’re more subtle, and you need longer, more complicated sentences to tease out all the implications. </p><p>文章听起来好，主要因其节奏得当。但优秀写作的节奏并非音乐的韵律或诗歌的格律，它没那么规整。如果规整，反而不好，因为好文章的节奏必须匹配其中的思想，而思想的形态千差万别。有时它们简单直接，只需陈述；有时则微妙复杂，需要更长的句子梳理全部内涵。</p><p>An essay is a cleaned up train of thought, in the same way dialogue is cleaned up conversation, and a train of thought has a natural rhythm. So when an essay sounds good, it’s not merely because it has a pleasing rhythm, but because it has its natural one. Which means you can use getting the rhythm right as a heuristic for getting the ideas right. And not just in principle: good writers do both simultaneously as a matter of course. Often I don’t even distinguish between the two problems. I just think Ugh, this doesn’t sound right; what do I mean to say here? [3] </p><p>文章是整理过的思路轨迹，如同对白是加工过的对话，而思路自有其自然节奏。因此，文章音律好不仅因为节奏悦耳，更因为节奏<strong>自然</strong>。这意味着你可以把节奏正确作为思想正确的启发式标准。而且不仅是理论上的——优秀作者在实践中会同步解决这两个问题。我常甚至不区分它们，只是觉得“呃，这里听起来不对——我到底想说什么？”[3]</p><p>The sound of writing turns out to be more like the shape of a plane than the color of a car. If it looks good, as Kelly Johnson used to say, it will fly well. </p><p>最终，文字的音律更像飞机的气动外形，而非汽车的颜色。正如凯利·约翰逊所言：“如果它看起来对，飞起来就不会差。”</p><p>This is only true of writing that’s used to develop ideas, though. It doesn’t apply when you have ideas in some other way and then write about them afterward — for example, if you build something, or conduct an experiment, and then write a paper about it. In such cases the ideas often live more in the work than the writing, so the writing can be bad even though the ideas are good. The writing in textbooks and popular surveys can be bad for the same reason: the author isn’t developing the ideas, merely describing other people’s. It’s only when you’re writing to develop ideas that there’s such a close connection between the two senses of doing it well. </p><p>不过，这仅适用于<strong>用于发展思想的写作</strong>。如果你通过其他方式（比如建造某物或做实验）获得思想后再写成文章，音律与思想的关联就会减弱。这类情况下，思想更多存在于工作中而非文字里，因此文章可能糟糕但思想正确。教科书和科普读物的文字不佳也源于此——作者并非发展思想，只是转述他人。<strong>唯有当你通过写作探索思想时，两种“好”才会紧密相连。</strong></p><h3 id="五、内部一致与真实的重合"><a href="#五、内部一致与真实的重合" class="headerlink" title="五、内部一致与真实的重合"></a>五、内部一致与真实的重合</h3><p>Ok, many people will be thinking, this seems plausible so far, but what about liars? Is it not notoriously possible for a smooth-tongued liar to write something beautiful that’s completely false? </p><p>读到此处，许多人会想：目前为止还算合理，但骗子呢？巧舌如簧的骗子难道不能写出优美而完全虚假的文字吗？</p><p>It is, of course. But not without method acting. The way to write something beautiful and false is to begin by making yourself almost believe it. So just like someone writing something beautiful and true, you’re presenting a perfectly-formed train of thought. The difference is the point where it attaches to the world. You’re saying something that would be true if certain false premises were. If for some bizarre reason the number of jobs in a country were fixed, then immigrants really would be taking our jobs. </p><p>当然可以。但前提是<strong>方法派演技</strong>。写出美丽谎言的方法，是先让自己几乎相信它。因此，与写出美丽真理的人一样，你呈现的是一段完美成型的思路。区别在于它和现实的连接点——你描述的是一种在虚假前提下成立的真实。比如，如果某国工作岗位数量固定（尽管这荒诞），那么移民确实会“抢走我们的工作”。</p><p>So it’s not quite right to say that better sounding writing is more likely to be true. Better sounding writing is more likely to be internally consistent. If the writer is honest, internal consistency and truth converge. But while we can’t safely conclude that beautiful writing is true, it’s usually safe to conclude the converse: something that seems clumsily written will usually have gotten the ideas wrong too. </p><p>因此，“音律好的文字更可能真实”并不完全准确。更准确的说法是：<strong>音律好的文字更可能内部一致</strong>。如果作者诚实，内部一致与真实自会重合。</p><p>Indeed, the two senses of good writing are more like two ends of the same thing. The connection between them is not a rigid one; the goodness of good writing is not a rod but a rope, with multiple overlapping connections running through it. But it’s hard to move one end without moving the other. It’s hard to be right without sounding right.</p><p>虽然我们不能断言优美文字必然真实，但通常可以安全地反推：<strong>笨拙的文字往往思想也有问题</strong>。</p><p>事实上，好的写作的两个维度更像是同一事物的两端。它们的联系并非 rigid（僵硬的杆），而是 rope（柔韧的绳），内含多重交织的关联。但你很难只移动一端而不牵动另一端。<strong>很难正确而不听起来正确。</strong></p><p>Notes </p><p>[1] The closest thing to an exception is when you have to go back and insert a new point into the middle of something you’ve written. This often messes up the flow, sometimes in ways you can never quite repair. But I think the ultimate source of this problem is that ideas are tree-shaped and essays are linear. You inevitably run into difficulties when you try to cram the former into the latter. Frankly it’s surprising how much you can get away with. But even so you sometimes have to resort to an endnote. </p><p>[1] 最接近例外的情况是：当你需要在已写好的内容中插入新观点时，常会破坏行文流畅性，有时甚至无法完全修复。我认为根本原因在于思想是树状结构，而文章是线性的。将前者塞进后者时难免遇到困难。说实话，能勉强做到的程度已令人惊讶。但即便如此，有时你仍不得不借助尾注。</p><p>[2] Obviously if you shake the bin hard enough the objects in it can become less tightly packed. And similarly, if you imposed some huge external constraint on your writing, like using alternating one and two syllable words, the ideas would start to suffer. </p><p>[2] 显然，如果摇晃过于剧烈，箱内物品反而会变松散。同理，如果对写作施加某些极端限制（比如交替使用单双音节词），思想就会受损。</p><p>[3] Bizarrely enough, this happened in the writing of this very paragraph. An earlier version shared several phrases in common with the preceding paragraph, and the repetition bugged me each time I reread it. When I got annoyed enough to fix it, I discovered that the repetition reflected a problem in the underlying ideas, and I fixed both simultaneously.</p><p>[3] 诡异的是，这段文字的写作过程就印证了这一点。初稿与前一段有多个重复短语，每次重读都让我不适。当我终于忍无可忍去修改时，发现重复反映了底层思想的问题，于是同步修正了两者。</p>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAUL GRAHAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
